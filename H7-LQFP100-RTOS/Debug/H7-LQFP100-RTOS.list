
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017010  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080172b0  080172b0  000272b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017748  08017748  00027748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017750  08017750  00027750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017754  08017754  00027754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08017758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006678  24000100  08017854  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24006778  08017854  00036778  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bbbb  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070c6  00000000  00000000  0006bce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028e8  00000000  00000000  00072db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002600  00000000  00000000  00075698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b35  00000000  00000000  00077c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c9f7  00000000  00000000  000bc7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00195056  00000000  00000000  000f91c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028e21a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b244  00000000  00000000  0028e26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017298 	.word	0x08017298

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08017298 	.word	0x08017298

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 fe9b 	bl	80043a4 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fda0 	bl	80021b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 ffb6 	bl	80055f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd93 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f8f9 	bl	80048ac <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fd7a 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f8eb 	bl	80048ac <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fd6c 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f8dd 	bl	80048ac <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fd5e 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f8cf 	bl	80048ac <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fd50 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f8c0 	bl	80048ac <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fd41 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f8b1 	bl	80048ac <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fd32 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f8a2 	bl	80048ac <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd23 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f893 	bl	80048ac <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd14 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f884 	bl	80048ac <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd05 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f875 	bl	80048ac <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fcf6 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f866 	bl	80048ac <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fce7 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fd83 	bl	80043a4 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc88 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 ffee 	bl	80048ac <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fc6f 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 ffe0 	bl	80048ac <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fc61 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 ffd2 	bl	80048ac <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fc53 	bl	80021b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 ffc4 	bl	80048ac <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fc45 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fa06 	bl	8008e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 f9fa 	bl	8008e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 f9ee 	bl	8008e0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fb81 	bl	800617c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb9a 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fa3c 	bl	8003f5c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fa36 	bl	8003f5c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fb21 	bl	800617c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fb3a 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fe7d 	bl	801688c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 fee9 	bl	8005970 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb08 	bl	80021b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f904 	bl	8005dd0 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 faf3 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f8d9 	bl	8008e0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fa6c 	bl	800617c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa85 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 fe2e 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 fe45 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_DMA_Init+0x7c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <MX_DMA_Init+0x7c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_DMA_Init+0x7c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fe05 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 fe1c 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fdfd 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 fe14 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 fdf5 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fe0c 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f004 fded 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f004 fe04 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	2010      	movs	r0, #16
 8000d52:	f004 fde5 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d56:	2010      	movs	r0, #16
 8000d58:	f004 fdfc 	bl	8005954 <HAL_NVIC_EnableIRQ>

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400

08000d68 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <vApplicationTickHook+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <vApplicationTickHook+0x18>)
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	24001964 	.word	0x24001964

08000d84 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000da0:	4a24      	ldr	r2, [pc, #144]	; (8000e34 <MX_FREERTOS_Init+0x98>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4824      	ldr	r0, [pc, #144]	; (8000e38 <MX_FREERTOS_Init+0x9c>)
 8000da6:	f012 fb9f 	bl	80134e8 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <MX_FREERTOS_Init+0xa0>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000db0:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <MX_FREERTOS_Init+0xa4>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4823      	ldr	r0, [pc, #140]	; (8000e44 <MX_FREERTOS_Init+0xa8>)
 8000db6:	f012 fb97 	bl	80134e8 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <MX_FREERTOS_Init+0xac>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000dc0:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <MX_FREERTOS_Init+0xb0>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4822      	ldr	r0, [pc, #136]	; (8000e50 <MX_FREERTOS_Init+0xb4>)
 8000dc6:	f012 fb8f 	bl	80134e8 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <MX_FREERTOS_Init+0xb8>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_FREERTOS_Init+0xbc>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_FREERTOS_Init+0xc0>)
 8000dd6:	f012 fb87 	bl	80134e8 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <MX_FREERTOS_Init+0xc4>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <MX_FREERTOS_Init+0xc8>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4820      	ldr	r0, [pc, #128]	; (8000e68 <MX_FREERTOS_Init+0xcc>)
 8000de6:	f012 fb7f 	bl	80134e8 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <MX_FREERTOS_Init+0xd0>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000df0:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <MX_FREERTOS_Init+0xd4>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <MX_FREERTOS_Init+0xd8>)
 8000df6:	f012 fb77 	bl	80134e8 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <MX_FREERTOS_Init+0xdc>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000e00:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <MX_FREERTOS_Init+0xe0>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_FREERTOS_Init+0xe4>)
 8000e06:	f012 fb6f 	bl	80134e8 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <MX_FREERTOS_Init+0xe8>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <MX_FREERTOS_Init+0xec>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <MX_FREERTOS_Init+0xf0>)
 8000e16:	f012 fb67 	bl	80134e8 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_FREERTOS_Init+0xf4>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e20:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <MX_FREERTOS_Init+0xf8>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_FREERTOS_Init+0xfc>)
 8000e26:	f012 fb5f 	bl	80134e8 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_FREERTOS_Init+0x100>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	08017518 	.word	0x08017518
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	24000360 	.word	0x24000360
 8000e40:	0801753c 	.word	0x0801753c
 8000e44:	08000ec9 	.word	0x08000ec9
 8000e48:	240005c0 	.word	0x240005c0
 8000e4c:	08017560 	.word	0x08017560
 8000e50:	08000ef1 	.word	0x08000ef1
 8000e54:	24000820 	.word	0x24000820
 8000e58:	08017584 	.word	0x08017584
 8000e5c:	08000f19 	.word	0x08000f19
 8000e60:	24000a80 	.word	0x24000a80
 8000e64:	080175a8 	.word	0x080175a8
 8000e68:	08000f91 	.word	0x08000f91
 8000e6c:	24000ce0 	.word	0x24000ce0
 8000e70:	080175cc 	.word	0x080175cc
 8000e74:	08001009 	.word	0x08001009
 8000e78:	24000f40 	.word	0x24000f40
 8000e7c:	080175f0 	.word	0x080175f0
 8000e80:	080010b5 	.word	0x080010b5
 8000e84:	240011a0 	.word	0x240011a0
 8000e88:	08017614 	.word	0x08017614
 8000e8c:	080010e5 	.word	0x080010e5
 8000e90:	24001400 	.word	0x24001400
 8000e94:	08017638 	.word	0x08017638
 8000e98:	080011ad 	.word	0x080011ad
 8000e9c:	24001660 	.word	0x24001660

08000ea0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <PMT_init+0x24>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f012 fc9a 	bl	80137ec <osEventFlagsWait>

		create_pmt_packet();
 8000eb8:	f001 f984 	bl	80021c4 <create_pmt_packet>

		osThreadYield();
 8000ebc:	f012 fba6 	bl	801360c <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec0:	e7f2      	b.n	8000ea8 <PMT_init+0x8>
 8000ec2:	bf00      	nop
 8000ec4:	24001914 	.word	0x24001914

08000ec8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <ERPA_init+0x24>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2102      	movs	r1, #2
 8000edc:	f012 fc86 	bl	80137ec <osEventFlagsWait>

		create_erpa_packet();
 8000ee0:	f001 f9b6 	bl	8002250 <create_erpa_packet>

		osThreadYield();
 8000ee4:	f012 fb92 	bl	801360c <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ee8:	e7f2      	b.n	8000ed0 <ERPA_init+0x8>
 8000eea:	bf00      	nop
 8000eec:	24001914 	.word	0x24001914

08000ef0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HK_init+0x24>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	f012 fc72 	bl	80137ec <osEventFlagsWait>

		create_hk_packet();
 8000f08:	f001 fa00 	bl	800230c <create_hk_packet>

		osThreadYield();
 8000f0c:	f012 fb7e 	bl	801360c <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f10:	e7f2      	b.n	8000ef8 <HK_init+0x8>
 8000f12:	bf00      	nop
 8000f14:	24001914 	.word	0x24001914

08000f18 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <AUTOINIT_init+0x70>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	f012 fc5e 	bl	80137ec <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e012      	b.n	8000f5c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <AUTOINIT_init+0x74>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <AUTOINIT_init+0x74>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4413      	add	r3, r2
 8000f46:	889b      	ldrh	r3, [r3, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f008 f926 	bl	800919c <HAL_GPIO_WritePin>
			osDelay(100);
 8000f50:	2064      	movs	r0, #100	; 0x64
 8000f52:	f012 fb7b 	bl	801364c <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	dde9      	ble.n	8000f36 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f62:	2308      	movs	r3, #8
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	e008      	b.n	8000f7a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 febe 	bl	8003cf0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2b0d      	cmp	r3, #13
 8000f7e:	ddf3      	ble.n	8000f68 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f80:	f012 fb44 	bl	801360c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f84:	e7cc      	b.n	8000f20 <AUTOINIT_init+0x8>
 8000f86:	bf00      	nop
 8000f88:	24001918 	.word	0x24001918
 8000f8c:	0801765c 	.word	0x0801765c

08000f90 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <AUTODEINIT_init+0x70>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	f012 fc22 	bl	80137ec <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fa8:	230d      	movs	r3, #13
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e008      	b.n	8000fc0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fe9b 	bl	8003cf0 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	dcf3      	bgt.n	8000fae <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	e012      	b.n	8000ff2 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <AUTODEINIT_init+0x74>)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <AUTODEINIT_init+0x74>)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	889b      	ldrh	r3, [r3, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f008 f8db 	bl	800919c <HAL_GPIO_WritePin>
			osDelay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f012 fb30 	bl	801364c <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dae9      	bge.n	8000fcc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000ff8:	f012 fb08 	bl	801360c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ffc:	e7cc      	b.n	8000f98 <AUTODEINIT_init+0x8>
 8000ffe:	bf00      	nop
 8001000:	24001918 	.word	0x24001918
 8001004:	0801765c 	.word	0x0801765c

08001008 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <Voltage_Monitor_init+0xa8>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	2101      	movs	r1, #1
 800101c:	f012 fbe6 	bl	80137ec <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001020:	f002 fe90 	bl	8003d44 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001024:	f002 fe84 	bl	8003d30 <get_rail_monitor>
 8001028:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e03b      	b.n	80010a8 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	461a      	mov	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d02d      	beq.n	80010a2 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	461a      	mov	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	8898      	ldrh	r0, [r3, #4]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4413      	add	r3, r2
 8001068:	891b      	ldrh	r3, [r3, #8]
 800106a:	4619      	mov	r1, r3
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4413      	add	r3, r2
 800107c:	88db      	ldrh	r3, [r3, #6]
 800107e:	461a      	mov	r2, r3
 8001080:	f002 fec2 	bl	8003e08 <in_range>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10b      	bne.n	80010a2 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	785a      	ldrb	r2, [r3, #1]
 800109c:	3201      	adds	r2, #1
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b11      	cmp	r3, #17
 80010ac:	ddc0      	ble.n	8001030 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010ae:	e7af      	b.n	8001010 <Voltage_Monitor_init+0x8>
 80010b0:	24001918 	.word	0x24001918

080010b4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <STOP_init+0x2c>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	f012 fb90 	bl	80137ec <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <STOP_init+0x2c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2102      	movs	r1, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f012 fb58 	bl	8013788 <osEventFlagsClear>

	  enter_stop();
 80010d8:	f001 f850 	bl	800217c <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010dc:	e7ee      	b.n	80010bc <STOP_init+0x8>
 80010de:	bf00      	nop
 80010e0:	24001918 	.word	0x24001918

080010e4 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <Science_init+0xa8>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f4:	2200      	movs	r2, #0
 80010f6:	2101      	movs	r1, #1
 80010f8:	f012 fb78 	bl	80137ec <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e012      	b.n	8001128 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <Science_init+0xac>)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800110a:	4a21      	ldr	r2, [pc, #132]	; (8001190 <Science_init+0xac>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	889b      	ldrh	r3, [r3, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f008 f840 	bl	800919c <HAL_GPIO_WritePin>
			osDelay(200);
 800111c:	20c8      	movs	r0, #200	; 0xc8
 800111e:	f012 fa95 	bl	801364c <osDelay>
		for (int i = 0; i < 9; i++) {
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b08      	cmp	r3, #8
 800112c:	dde9      	ble.n	8001102 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800112e:	2308      	movs	r3, #8
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	e008      	b.n	8001146 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2101      	movs	r1, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fdd8 	bl	8003cf0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	3301      	adds	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b10      	cmp	r3, #16
 800114a:	ddf3      	ble.n	8001134 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2320      	movs	r3, #32
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <Science_init+0xb0>)
 8001158:	2100      	movs	r1, #0
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <Science_init+0xb4>)
 800115c:	f004 fc82 	bl	8005a64 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <Science_init+0xb8>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <Science_init+0xbc>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800116c:	f001 fa1c 	bl	80025a8 <reset_packet_sequence_numbers>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8001170:	210c      	movs	r1, #12
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <Science_init+0xc0>)
 8001174:	f00d ffd6 	bl	800f124 <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001178:	2100      	movs	r1, #0
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <Science_init+0xc4>)
 800117c:	f00d ffd2 	bl	800f124 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001180:	b662      	cpsie	i
}
 8001182:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001184:	f012 fa42 	bl	801360c <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001188:	e7b0      	b.n	80010ec <Science_init+0x8>
 800118a:	bf00      	nop
 800118c:	2400191c 	.word	0x2400191c
 8001190:	0801765c 	.word	0x0801765c
 8001194:	24000000 	.word	0x24000000
 8001198:	240002d4 	.word	0x240002d4
 800119c:	24001960 	.word	0x24001960
 80011a0:	24001964 	.word	0x24001964
 80011a4:	24001c08 	.word	0x24001c08
 80011a8:	24001bbc 	.word	0x24001bbc

080011ac <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <Idle_init+0x8c>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	f012 fb14 	bl	80137ec <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 80011c4:	210c      	movs	r1, #12
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <Idle_init+0x90>)
 80011c8:	f00e f906 	bl	800f3d8 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80011cc:	2100      	movs	r1, #0
 80011ce:	481c      	ldr	r0, [pc, #112]	; (8001240 <Idle_init+0x94>)
 80011d0:	f00e f902 	bl	800f3d8 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <Idle_init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80011da:	2100      	movs	r1, #0
 80011dc:	481a      	ldr	r0, [pc, #104]	; (8001248 <Idle_init+0x9c>)
 80011de:	f004 fd01 	bl	8005be4 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011e2:	2310      	movs	r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e008      	b.n	80011fa <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fd7e 	bl	8003cf0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	dcf3      	bgt.n	80011e8 <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001200:	2308      	movs	r3, #8
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	e012      	b.n	800122c <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <Idle_init+0xa0>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <Idle_init+0xa0>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4413      	add	r3, r2
 8001216:	889b      	ldrh	r3, [r3, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	f007 ffbe 	bl	800919c <HAL_GPIO_WritePin>
			osDelay(200);
 8001220:	20c8      	movs	r0, #200	; 0xc8
 8001222:	f012 fa13 	bl	801364c <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dae9      	bge.n	8001206 <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 8001232:	f012 f9eb 	bl	801360c <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001236:	e7bd      	b.n	80011b4 <Idle_init+0x8>
 8001238:	2400191c 	.word	0x2400191c
 800123c:	24001c08 	.word	0x24001c08
 8001240:	24001bbc 	.word	0x24001bbc
 8001244:	24001960 	.word	0x24001960
 8001248:	240002d4 	.word	0x240002d4
 800124c:	0801765c 	.word	0x0801765c

08001250 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <MX_GPIO_Init+0xe8>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a32      	ldr	r2, [pc, #200]	; (8001338 <MX_GPIO_Init+0xe8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <MX_GPIO_Init+0xe8>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <MX_GPIO_Init+0xe8>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <MX_GPIO_Init+0xe8>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <MX_GPIO_Init+0xe8>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a23      	ldr	r2, [pc, #140]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_GPIO_Init+0xe8>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <MX_GPIO_Init+0xec>)
 80012e6:	f007 ff59 	bl	800919c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2164      	movs	r1, #100	; 0x64
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_GPIO_Init+0xf0>)
 80012f0:	f007 ff54 	bl	800919c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012f4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80012f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fe:	2302      	movs	r3, #2
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_GPIO_Init+0xec>)
 800130e:	f007 fd7d 	bl	8008e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800131a:	2302      	movs	r3, #2
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_GPIO_Init+0xf0>)
 800132a:	f007 fd6f 	bl	8008e0c <HAL_GPIO_Init>

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	58024400 	.word	0x58024400
 800133c:	58020800 	.word	0x58020800
 8001340:	58020400 	.word	0x58020400

08001344 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_I2C1_Init+0x78>)
 800134a:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <MX_I2C1_Init+0x7c>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_I2C1_Init+0x78>)
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_I2C1_Init+0x80>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_I2C1_Init+0x78>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_I2C1_Init+0x78>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_I2C1_Init+0x78>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_I2C1_Init+0x78>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_I2C1_Init+0x78>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_I2C1_Init+0x78>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_I2C1_Init+0x78>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <MX_I2C1_Init+0x78>)
 8001380:	f007 ff26 	bl	80091d0 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 ff15 	bl	80021b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	480a      	ldr	r0, [pc, #40]	; (80013bc <MX_I2C1_Init+0x78>)
 8001392:	f008 fc6d 	bl	8009c70 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 ff0c 	bl	80021b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_I2C1_Init+0x78>)
 80013a4:	f008 fcaf 	bl	8009d06 <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 ff03 	bl	80021b8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f008 fcf4 	bl	8009da0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	240018c0 	.word	0x240018c0
 80013c0:	40005400 	.word	0x40005400
 80013c4:	00100517 	.word	0x00100517

080013c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ba      	sub	sp, #232	; 0xe8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	22c0      	movs	r2, #192	; 0xc0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f015 fa4f 	bl	801688c <memset>
  if(i2cHandle->Instance==I2C1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_I2C_MspInit+0xc8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d146      	bne.n	8001486 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f8:	f04f 0208 	mov.w	r2, #8
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4618      	mov	r0, r3
 8001410:	f009 fd88 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800141a:	f000 fecd 	bl	80021b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001444:	2312      	movs	r3, #18
 8001446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001456:	2304      	movs	r3, #4
 8001458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_I2C_MspInit+0xd0>)
 8001464:	f007 fcd2 	bl	8008e0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800146a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001474:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_I2C_MspInit+0xcc>)
 800147a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	37e8      	adds	r7, #232	; 0xe8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	58024400 	.word	0x58024400
 8001498:	58020400 	.word	0x58020400

0800149c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014a0:	f3bf 8f4f 	dsb	sy
}
 80014a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <__NVIC_SystemReset+0x24>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014ae:	4904      	ldr	r1, [pc, #16]	; (80014c0 <__NVIC_SystemReset+0x24>)
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_SystemReset+0x28>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014b6:	f3bf 8f4f 	dsb	sy
}
 80014ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <__NVIC_SystemReset+0x20>
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	05fa0004 	.word	0x05fa0004

080014c8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d106      	bne.n	80014e6 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f012 f90e 	bl	8013700 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80014e4:	e02d      	b.n	8001542 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	else if (htim == &htim2) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1a      	ldr	r2, [pc, #104]	; (8001554 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d126      	bne.n	800153c <HAL_TIM_OC_DelayElapsedCallback+0x74>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2102      	movs	r1, #2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f012 f903 	bl	8013700 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b20      	cmp	r3, #32
 8001502:	d113      	bne.n	800152c <HAL_TIM_OC_DelayElapsedCallback+0x64>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	4618      	mov	r0, r3
 800150c:	f012 f8f8 	bl	8013700 <osEventFlagsSet>
			if (HK_ENABLED){
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_TIM_OC_DelayElapsedCallback+0x5e>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2104      	movs	r1, #4
 8001520:	4618      	mov	r0, r3
 8001522:	f012 f8ed 	bl	8013700 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	e002      	b.n	8001542 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		printf("Unknown Timer Interrupt\n");
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800153e:	f015 fa1b 	bl	8016978 <puts>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24001bbc 	.word	0x24001bbc
 8001550:	24001914 	.word	0x24001914
 8001554:	24001c08 	.word	0x24001c08
 8001558:	24001968 	.word	0x24001968
 800155c:	24001918 	.word	0x24001918
 8001560:	24001960 	.word	0x24001960
 8001564:	08017328 	.word	0x08017328

08001568 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	49f2      	ldr	r1, [pc, #968]	; (800193c <HAL_UART_RxCpltCallback+0x3d4>)
 8001574:	48f2      	ldr	r0, [pc, #968]	; (8001940 <HAL_UART_RxCpltCallback+0x3d8>)
 8001576:	f00f fab5 	bl	8010ae4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800157a:	4bf0      	ldr	r3, [pc, #960]	; (800193c <HAL_UART_RxCpltCallback+0x3d4>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2be0      	cmp	r3, #224	; 0xe0
 8001584:	f200 8419 	bhi.w	8001dba <HAL_UART_RxCpltCallback+0x852>
 8001588:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <HAL_UART_RxCpltCallback+0x28>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	08001929 	.word	0x08001929
 8001594:	0800196d 	.word	0x0800196d
 8001598:	080019dd 	.word	0x080019dd
 800159c:	08001a17 	.word	0x08001a17
 80015a0:	08001a4f 	.word	0x08001a4f
 80015a4:	08001a89 	.word	0x08001a89
 80015a8:	08001ac5 	.word	0x08001ac5
 80015ac:	08001b01 	.word	0x08001b01
 80015b0:	08001b3b 	.word	0x08001b3b
 80015b4:	08001b6f 	.word	0x08001b6f
 80015b8:	08001b9b 	.word	0x08001b9b
 80015bc:	08001bc7 	.word	0x08001bc7
 80015c0:	08001bf1 	.word	0x08001bf1
 80015c4:	08001ccd 	.word	0x08001ccd
 80015c8:	08001d35 	.word	0x08001d35
 80015cc:	08001d5d 	.word	0x08001d5d
 80015d0:	08001915 	.word	0x08001915
 80015d4:	08001951 	.word	0x08001951
 80015d8:	080019bf 	.word	0x080019bf
 80015dc:	080019fb 	.word	0x080019fb
 80015e0:	08001a33 	.word	0x08001a33
 80015e4:	08001a6b 	.word	0x08001a6b
 80015e8:	08001aa7 	.word	0x08001aa7
 80015ec:	08001ae3 	.word	0x08001ae3
 80015f0:	08001b1f 	.word	0x08001b1f
 80015f4:	08001b57 	.word	0x08001b57
 80015f8:	08001b7f 	.word	0x08001b7f
 80015fc:	08001bab 	.word	0x08001bab
 8001600:	08001bd7 	.word	0x08001bd7
 8001604:	08001bff 	.word	0x08001bff
 8001608:	08001d0d 	.word	0x08001d0d
 800160c:	08001dbb 	.word	0x08001dbb
 8001610:	08001dbb 	.word	0x08001dbb
 8001614:	08001dbb 	.word	0x08001dbb
 8001618:	08001dbb 	.word	0x08001dbb
 800161c:	08001dbb 	.word	0x08001dbb
 8001620:	08001dbb 	.word	0x08001dbb
 8001624:	08001dbb 	.word	0x08001dbb
 8001628:	08001dbb 	.word	0x08001dbb
 800162c:	08001dbb 	.word	0x08001dbb
 8001630:	08001dbb 	.word	0x08001dbb
 8001634:	08001dbb 	.word	0x08001dbb
 8001638:	08001dbb 	.word	0x08001dbb
 800163c:	08001dbb 	.word	0x08001dbb
 8001640:	08001dbb 	.word	0x08001dbb
 8001644:	08001dbb 	.word	0x08001dbb
 8001648:	08001dbb 	.word	0x08001dbb
 800164c:	08001dbb 	.word	0x08001dbb
 8001650:	08001dbb 	.word	0x08001dbb
 8001654:	08001dbb 	.word	0x08001dbb
 8001658:	08001dbb 	.word	0x08001dbb
 800165c:	08001dbb 	.word	0x08001dbb
 8001660:	08001dbb 	.word	0x08001dbb
 8001664:	08001dbb 	.word	0x08001dbb
 8001668:	08001dbb 	.word	0x08001dbb
 800166c:	08001dbb 	.word	0x08001dbb
 8001670:	08001dbb 	.word	0x08001dbb
 8001674:	08001dbb 	.word	0x08001dbb
 8001678:	08001dbb 	.word	0x08001dbb
 800167c:	08001dbb 	.word	0x08001dbb
 8001680:	08001dbb 	.word	0x08001dbb
 8001684:	08001dbb 	.word	0x08001dbb
 8001688:	08001dbb 	.word	0x08001dbb
 800168c:	08001dbb 	.word	0x08001dbb
 8001690:	08001dbb 	.word	0x08001dbb
 8001694:	08001dbb 	.word	0x08001dbb
 8001698:	08001dbb 	.word	0x08001dbb
 800169c:	08001dbb 	.word	0x08001dbb
 80016a0:	08001dbb 	.word	0x08001dbb
 80016a4:	08001dbb 	.word	0x08001dbb
 80016a8:	08001dbb 	.word	0x08001dbb
 80016ac:	08001dbb 	.word	0x08001dbb
 80016b0:	08001dbb 	.word	0x08001dbb
 80016b4:	08001dbb 	.word	0x08001dbb
 80016b8:	08001dbb 	.word	0x08001dbb
 80016bc:	08001dbb 	.word	0x08001dbb
 80016c0:	08001dbb 	.word	0x08001dbb
 80016c4:	08001dbb 	.word	0x08001dbb
 80016c8:	08001dbb 	.word	0x08001dbb
 80016cc:	08001dbb 	.word	0x08001dbb
 80016d0:	08001dbb 	.word	0x08001dbb
 80016d4:	08001dbb 	.word	0x08001dbb
 80016d8:	08001dbb 	.word	0x08001dbb
 80016dc:	08001dbb 	.word	0x08001dbb
 80016e0:	08001dbb 	.word	0x08001dbb
 80016e4:	08001dbb 	.word	0x08001dbb
 80016e8:	08001dbb 	.word	0x08001dbb
 80016ec:	08001dbb 	.word	0x08001dbb
 80016f0:	08001dbb 	.word	0x08001dbb
 80016f4:	08001dbb 	.word	0x08001dbb
 80016f8:	08001dbb 	.word	0x08001dbb
 80016fc:	08001dbb 	.word	0x08001dbb
 8001700:	08001dbb 	.word	0x08001dbb
 8001704:	08001dbb 	.word	0x08001dbb
 8001708:	08001dbb 	.word	0x08001dbb
 800170c:	08001dbb 	.word	0x08001dbb
 8001710:	08001dbb 	.word	0x08001dbb
 8001714:	08001dbb 	.word	0x08001dbb
 8001718:	08001dbb 	.word	0x08001dbb
 800171c:	08001dbb 	.word	0x08001dbb
 8001720:	08001dbb 	.word	0x08001dbb
 8001724:	08001dbb 	.word	0x08001dbb
 8001728:	08001dbb 	.word	0x08001dbb
 800172c:	08001dbb 	.word	0x08001dbb
 8001730:	08001dbb 	.word	0x08001dbb
 8001734:	08001dbb 	.word	0x08001dbb
 8001738:	08001dbb 	.word	0x08001dbb
 800173c:	08001dbb 	.word	0x08001dbb
 8001740:	08001dbb 	.word	0x08001dbb
 8001744:	08001dbb 	.word	0x08001dbb
 8001748:	08001dbb 	.word	0x08001dbb
 800174c:	08001dbb 	.word	0x08001dbb
 8001750:	08001dbb 	.word	0x08001dbb
 8001754:	08001dbb 	.word	0x08001dbb
 8001758:	08001dbb 	.word	0x08001dbb
 800175c:	08001dbb 	.word	0x08001dbb
 8001760:	08001dbb 	.word	0x08001dbb
 8001764:	08001dbb 	.word	0x08001dbb
 8001768:	08001dbb 	.word	0x08001dbb
 800176c:	08001dbb 	.word	0x08001dbb
 8001770:	08001dbb 	.word	0x08001dbb
 8001774:	08001dbb 	.word	0x08001dbb
 8001778:	08001dbb 	.word	0x08001dbb
 800177c:	08001dbb 	.word	0x08001dbb
 8001780:	08001dbb 	.word	0x08001dbb
 8001784:	08001dbb 	.word	0x08001dbb
 8001788:	08001dbb 	.word	0x08001dbb
 800178c:	08001dbb 	.word	0x08001dbb
 8001790:	08001dbb 	.word	0x08001dbb
 8001794:	08001dbb 	.word	0x08001dbb
 8001798:	08001dbb 	.word	0x08001dbb
 800179c:	08001dbb 	.word	0x08001dbb
 80017a0:	08001dbb 	.word	0x08001dbb
 80017a4:	08001dbb 	.word	0x08001dbb
 80017a8:	08001dbb 	.word	0x08001dbb
 80017ac:	08001dbb 	.word	0x08001dbb
 80017b0:	08001dbb 	.word	0x08001dbb
 80017b4:	08001dbb 	.word	0x08001dbb
 80017b8:	08001dbb 	.word	0x08001dbb
 80017bc:	08001dbb 	.word	0x08001dbb
 80017c0:	08001dbb 	.word	0x08001dbb
 80017c4:	08001dbb 	.word	0x08001dbb
 80017c8:	08001dbb 	.word	0x08001dbb
 80017cc:	08001dbb 	.word	0x08001dbb
 80017d0:	08001dbb 	.word	0x08001dbb
 80017d4:	08001dbb 	.word	0x08001dbb
 80017d8:	08001dbb 	.word	0x08001dbb
 80017dc:	08001dbb 	.word	0x08001dbb
 80017e0:	08001dbb 	.word	0x08001dbb
 80017e4:	08001dbb 	.word	0x08001dbb
 80017e8:	08001dbb 	.word	0x08001dbb
 80017ec:	08001dbb 	.word	0x08001dbb
 80017f0:	08001dbb 	.word	0x08001dbb
 80017f4:	08001dbb 	.word	0x08001dbb
 80017f8:	08001dbb 	.word	0x08001dbb
 80017fc:	08001dbb 	.word	0x08001dbb
 8001800:	08001dbb 	.word	0x08001dbb
 8001804:	08001dbb 	.word	0x08001dbb
 8001808:	08001dbb 	.word	0x08001dbb
 800180c:	08001dbb 	.word	0x08001dbb
 8001810:	08001dbb 	.word	0x08001dbb
 8001814:	08001dbb 	.word	0x08001dbb
 8001818:	08001dbb 	.word	0x08001dbb
 800181c:	08001dbb 	.word	0x08001dbb
 8001820:	08001dbb 	.word	0x08001dbb
 8001824:	08001dbb 	.word	0x08001dbb
 8001828:	08001dbb 	.word	0x08001dbb
 800182c:	08001dbb 	.word	0x08001dbb
 8001830:	08001dbb 	.word	0x08001dbb
 8001834:	08001dbb 	.word	0x08001dbb
 8001838:	08001dbb 	.word	0x08001dbb
 800183c:	08001dbb 	.word	0x08001dbb
 8001840:	08001dbb 	.word	0x08001dbb
 8001844:	08001dbb 	.word	0x08001dbb
 8001848:	08001dbb 	.word	0x08001dbb
 800184c:	08001d99 	.word	0x08001d99
 8001850:	08001dbb 	.word	0x08001dbb
 8001854:	08001dbb 	.word	0x08001dbb
 8001858:	08001dbb 	.word	0x08001dbb
 800185c:	08001dbb 	.word	0x08001dbb
 8001860:	08001dbb 	.word	0x08001dbb
 8001864:	08001dbb 	.word	0x08001dbb
 8001868:	08001dbb 	.word	0x08001dbb
 800186c:	08001dbb 	.word	0x08001dbb
 8001870:	08001dbb 	.word	0x08001dbb
 8001874:	08001dbb 	.word	0x08001dbb
 8001878:	08001dbb 	.word	0x08001dbb
 800187c:	08001dbb 	.word	0x08001dbb
 8001880:	08001dbb 	.word	0x08001dbb
 8001884:	08001dbb 	.word	0x08001dbb
 8001888:	08001dbb 	.word	0x08001dbb
 800188c:	08001d9f 	.word	0x08001d9f
 8001890:	08001dbb 	.word	0x08001dbb
 8001894:	08001dbb 	.word	0x08001dbb
 8001898:	08001dbb 	.word	0x08001dbb
 800189c:	08001dbb 	.word	0x08001dbb
 80018a0:	08001dbb 	.word	0x08001dbb
 80018a4:	08001dbb 	.word	0x08001dbb
 80018a8:	08001dbb 	.word	0x08001dbb
 80018ac:	08001dbb 	.word	0x08001dbb
 80018b0:	08001dbb 	.word	0x08001dbb
 80018b4:	08001dbb 	.word	0x08001dbb
 80018b8:	08001dbb 	.word	0x08001dbb
 80018bc:	08001dbb 	.word	0x08001dbb
 80018c0:	08001dbb 	.word	0x08001dbb
 80018c4:	08001dbb 	.word	0x08001dbb
 80018c8:	08001dbb 	.word	0x08001dbb
 80018cc:	08001dad 	.word	0x08001dad
 80018d0:	08001d85 	.word	0x08001d85
 80018d4:	08001dbb 	.word	0x08001dbb
 80018d8:	08001dbb 	.word	0x08001dbb
 80018dc:	08001dbb 	.word	0x08001dbb
 80018e0:	08001dbb 	.word	0x08001dbb
 80018e4:	08001dbb 	.word	0x08001dbb
 80018e8:	08001dbb 	.word	0x08001dbb
 80018ec:	08001dbb 	.word	0x08001dbb
 80018f0:	08001dbb 	.word	0x08001dbb
 80018f4:	08001dbb 	.word	0x08001dbb
 80018f8:	08001dbb 	.word	0x08001dbb
 80018fc:	08001dbb 	.word	0x08001dbb
 8001900:	08001dbb 	.word	0x08001dbb
 8001904:	08001dbb 	.word	0x08001dbb
 8001908:	08001dbb 	.word	0x08001dbb
 800190c:	08001dbb 	.word	0x08001dbb
 8001910:	08001d71 	.word	0x08001d71
	case 0x10: {
		printf("SDN1 ON\n");
 8001914:	480b      	ldr	r0, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3dc>)
 8001916:	f015 f82f 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x3e0>)
 800191c:	2104      	movs	r1, #4
 800191e:	2201      	movs	r2, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f007 fc3b 	bl	800919c <HAL_GPIO_WritePin>
		break;
 8001926:	e253      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x3e4>)
 800192a:	f015 f825 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_UART_RxCpltCallback+0x3e0>)
 8001930:	2104      	movs	r1, #4
 8001932:	2200      	movs	r2, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f007 fc31 	bl	800919c <HAL_GPIO_WritePin>
		break;
 800193a:	e249      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
 800193c:	24001920 	.word	0x24001920
 8001940:	24001c54 	.word	0x24001c54
 8001944:	08017340 	.word	0x08017340
 8001948:	58020400 	.word	0x58020400
 800194c:	08017348 	.word	0x08017348
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001950:	48bb      	ldr	r0, [pc, #748]	; (8001c40 <HAL_UART_RxCpltCallback+0x6d8>)
 8001952:	f015 f811 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001956:	4bbb      	ldr	r3, [pc, #748]	; (8001c44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001958:	2120      	movs	r1, #32
 800195a:	2201      	movs	r2, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f007 fc1d 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001962:	2101      	movs	r1, #1
 8001964:	2008      	movs	r0, #8
 8001966:	f002 f9c3 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 800196a:	e231      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 800196c:	48b6      	ldr	r0, [pc, #728]	; (8001c48 <HAL_UART_RxCpltCallback+0x6e0>)
 800196e:	f015 f803 	bl	8016978 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001972:	2308      	movs	r3, #8
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e00f      	b.n	8001998 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001978:	4ab4      	ldr	r2, [pc, #720]	; (8001c4c <HAL_UART_RxCpltCallback+0x6e4>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001980:	4ab2      	ldr	r2, [pc, #712]	; (8001c4c <HAL_UART_RxCpltCallback+0x6e4>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	889b      	ldrh	r3, [r3, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	f007 fc05 	bl	800919c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3b01      	subs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dcec      	bgt.n	8001978 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800199e:	2310      	movs	r3, #16
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e008      	b.n	80019b6 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 f9a0 	bl	8003cf0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	dcf3      	bgt.n	80019a4 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80019bc:	e208      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80019be:	48a4      	ldr	r0, [pc, #656]	; (8001c50 <HAL_UART_RxCpltCallback+0x6e8>)
 80019c0:	f014 ffda 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80019c4:	4ba3      	ldr	r3, [pc, #652]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ca:	2201      	movs	r2, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f007 fbe5 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80019d2:	2101      	movs	r1, #1
 80019d4:	2009      	movs	r0, #9
 80019d6:	f002 f98b 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 80019da:	e1f9      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80019dc:	489e      	ldr	r0, [pc, #632]	; (8001c58 <HAL_UART_RxCpltCallback+0x6f0>)
 80019de:	f014 ffcb 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80019e2:	4b9c      	ldr	r3, [pc, #624]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e8:	2200      	movs	r2, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f007 fbd6 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80019f0:	2100      	movs	r1, #0
 80019f2:	2009      	movs	r0, #9
 80019f4:	f002 f97c 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 80019f8:	e1ea      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80019fa:	4898      	ldr	r0, [pc, #608]	; (8001c5c <HAL_UART_RxCpltCallback+0x6f4>)
 80019fc:	f014 ffbc 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001a00:	4b94      	ldr	r3, [pc, #592]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	2201      	movs	r2, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 fbc8 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	200a      	movs	r0, #10
 8001a10:	f002 f96e 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 8001a14:	e1dc      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a16:	4892      	ldr	r0, [pc, #584]	; (8001c60 <HAL_UART_RxCpltCallback+0x6f8>)
 8001a18:	f014 ffae 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001a1c:	4b8d      	ldr	r3, [pc, #564]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	2200      	movs	r2, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f007 fbba 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	200a      	movs	r0, #10
 8001a2c:	f002 f960 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 8001a30:	e1ce      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001a32:	488c      	ldr	r0, [pc, #560]	; (8001c64 <HAL_UART_RxCpltCallback+0x6fc>)
 8001a34:	f014 ffa0 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001a38:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f007 fbac 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	200b      	movs	r0, #11
 8001a48:	f002 f952 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 8001a4c:	e1c0      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001a4e:	4886      	ldr	r0, [pc, #536]	; (8001c68 <HAL_UART_RxCpltCallback+0x700>)
 8001a50:	f014 ff92 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001a54:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a56:	2140      	movs	r1, #64	; 0x40
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f007 fb9e 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	200b      	movs	r0, #11
 8001a64:	f002 f944 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 8001a68:	e1b2      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001a6a:	4880      	ldr	r0, [pc, #512]	; (8001c6c <HAL_UART_RxCpltCallback+0x704>)
 8001a6c:	f014 ff84 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001a70:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a76:	2201      	movs	r2, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f007 fb8f 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	200c      	movs	r0, #12
 8001a82:	f002 f935 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 8001a86:	e1a3      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001a88:	4879      	ldr	r0, [pc, #484]	; (8001c70 <HAL_UART_RxCpltCallback+0x708>)
 8001a8a:	f014 ff75 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001a8e:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a94:	2200      	movs	r2, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f007 fb80 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f002 f926 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 8001aa4:	e194      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001aa6:	4873      	ldr	r0, [pc, #460]	; (8001c74 <HAL_UART_RxCpltCallback+0x70c>)
 8001aa8:	f014 ff66 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001aac:	4b69      	ldr	r3, [pc, #420]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f007 fb71 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001aba:	2101      	movs	r1, #1
 8001abc:	200d      	movs	r0, #13
 8001abe:	f002 f917 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 8001ac2:	e185      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001ac4:	486c      	ldr	r0, [pc, #432]	; (8001c78 <HAL_UART_RxCpltCallback+0x710>)
 8001ac6:	f014 ff57 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001aca:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f007 fb62 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200d      	movs	r0, #13
 8001adc:	f002 f908 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 8001ae0:	e176      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001ae2:	4866      	ldr	r0, [pc, #408]	; (8001c7c <HAL_UART_RxCpltCallback+0x714>)
 8001ae4:	f014 ff48 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001ae8:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aee:	2201      	movs	r2, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 fb53 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001af6:	2101      	movs	r1, #1
 8001af8:	200f      	movs	r0, #15
 8001afa:	f002 f8f9 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 8001afe:	e167      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001b00:	485f      	ldr	r0, [pc, #380]	; (8001c80 <HAL_UART_RxCpltCallback+0x718>)
 8001b02:	f014 ff39 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 fb44 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b14:	2100      	movs	r1, #0
 8001b16:	200f      	movs	r0, #15
 8001b18:	f002 f8ea 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 8001b1c:	e158      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001b1e:	4859      	ldr	r0, [pc, #356]	; (8001c84 <HAL_UART_RxCpltCallback+0x71c>)
 8001b20:	f014 ff2a 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f007 fb36 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001b30:	2101      	movs	r1, #1
 8001b32:	2010      	movs	r0, #16
 8001b34:	f002 f8dc 	bl	8003cf0 <set_rail_monitor_enable>

		break;
 8001b38:	e14a      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001b3a:	4853      	ldr	r0, [pc, #332]	; (8001c88 <HAL_UART_RxCpltCallback+0x720>)
 8001b3c:	f014 ff1c 	bl	8016978 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001b40:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001b42:	2140      	movs	r1, #64	; 0x40
 8001b44:	2200      	movs	r2, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 fb28 	bl	800919c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2010      	movs	r0, #16
 8001b50:	f002 f8ce 	bl	8003cf0 <set_rail_monitor_enable>
		break;
 8001b54:	e13c      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001b56:	484d      	ldr	r0, [pc, #308]	; (8001c8c <HAL_UART_RxCpltCallback+0x724>)
 8001b58:	f014 ff0e 	bl	8016978 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2320      	movs	r3, #32
 8001b62:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <HAL_UART_RxCpltCallback+0x728>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	484b      	ldr	r0, [pc, #300]	; (8001c94 <HAL_UART_RxCpltCallback+0x72c>)
 8001b68:	f003 ff7c 	bl	8005a64 <HAL_DAC_Start_DMA>
		break;
 8001b6c:	e130      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001b6e:	484a      	ldr	r0, [pc, #296]	; (8001c98 <HAL_UART_RxCpltCallback+0x730>)
 8001b70:	f014 ff02 	bl	8016978 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001b74:	2100      	movs	r1, #0
 8001b76:	4847      	ldr	r0, [pc, #284]	; (8001c94 <HAL_UART_RxCpltCallback+0x72c>)
 8001b78:	f004 f834 	bl	8005be4 <HAL_DAC_Stop_DMA>
		break;
 8001b7c:	e128      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001b7e:	4847      	ldr	r0, [pc, #284]	; (8001c9c <HAL_UART_RxCpltCallback+0x734>)
 8001b80:	f014 fefa 	bl	8016978 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b84:	210c      	movs	r1, #12
 8001b86:	4846      	ldr	r0, [pc, #280]	; (8001ca0 <HAL_UART_RxCpltCallback+0x738>)
 8001b88:	f00d facc 	bl	800f124 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001b8c:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <HAL_UART_RxCpltCallback+0x73c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2102      	movs	r1, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f011 fdb4 	bl	8013700 <osEventFlagsSet>

		break;
 8001b98:	e11a      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001b9a:	4843      	ldr	r0, [pc, #268]	; (8001ca8 <HAL_UART_RxCpltCallback+0x740>)
 8001b9c:	f014 feec 	bl	8016978 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001ba0:	210c      	movs	r1, #12
 8001ba2:	483f      	ldr	r0, [pc, #252]	; (8001ca0 <HAL_UART_RxCpltCallback+0x738>)
 8001ba4:	f00d fc18 	bl	800f3d8 <HAL_TIM_OC_Stop_IT>
		break;
 8001ba8:	e112      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001baa:	4840      	ldr	r0, [pc, #256]	; (8001cac <HAL_UART_RxCpltCallback+0x744>)
 8001bac:	f014 fee4 	bl	8016978 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	483f      	ldr	r0, [pc, #252]	; (8001cb0 <HAL_UART_RxCpltCallback+0x748>)
 8001bb4:	f00d fab6 	bl	800f124 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_UART_RxCpltCallback+0x73c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f011 fd9e 	bl	8013700 <osEventFlagsSet>
		break;
 8001bc4:	e104      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001bc6:	483b      	ldr	r0, [pc, #236]	; (8001cb4 <HAL_UART_RxCpltCallback+0x74c>)
 8001bc8:	f014 fed6 	bl	8016978 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4838      	ldr	r0, [pc, #224]	; (8001cb0 <HAL_UART_RxCpltCallback+0x748>)
 8001bd0:	f00d fc02 	bl	800f3d8 <HAL_TIM_OC_Stop_IT>
		break;
 8001bd4:	e0fc      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001bd6:	4838      	ldr	r0, [pc, #224]	; (8001cb8 <HAL_UART_RxCpltCallback+0x750>)
 8001bd8:	f014 fece 	bl	8016978 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_UART_RxCpltCallback+0x73c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2104      	movs	r1, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	f011 fd8c 	bl	8013700 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_UART_RxCpltCallback+0x754>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
		break;
 8001bee:	e0ef      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001bf0:	4833      	ldr	r0, [pc, #204]	; (8001cc0 <HAL_UART_RxCpltCallback+0x758>)
 8001bf2:	f014 fec1 	bl	8016978 <puts>
		HK_ENABLED = 0;
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <HAL_UART_RxCpltCallback+0x754>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
		break;
 8001bfc:	e0e8      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001bfe:	4831      	ldr	r0, [pc, #196]	; (8001cc4 <HAL_UART_RxCpltCallback+0x75c>)
 8001c00:	f014 feba 	bl	8016978 <puts>
		if (step < 14) {
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_UART_RxCpltCallback+0x760>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b0d      	cmp	r3, #13
 8001c0c:	f200 80d9 	bhi.w	8001dc2 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_UART_RxCpltCallback+0x760>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3302      	adds	r3, #2
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_UART_RxCpltCallback+0x760>)
 8001c1c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_UART_RxCpltCallback+0x760>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_UART_RxCpltCallback+0x728>)
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4818      	ldr	r0, [pc, #96]	; (8001c94 <HAL_UART_RxCpltCallback+0x72c>)
 8001c32:	f004 f87a 	bl	8005d2a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c36:	2100      	movs	r1, #0
 8001c38:	4816      	ldr	r0, [pc, #88]	; (8001c94 <HAL_UART_RxCpltCallback+0x72c>)
 8001c3a:	f003 febb 	bl	80059b4 <HAL_DAC_Start>
		}
		break;
 8001c3e:	e0c0      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0x85a>
 8001c40:	08017354 	.word	0x08017354
 8001c44:	58020400 	.word	0x58020400
 8001c48:	08017360 	.word	0x08017360
 8001c4c:	0801765c 	.word	0x0801765c
 8001c50:	0801736c 	.word	0x0801736c
 8001c54:	58020800 	.word	0x58020800
 8001c58:	08017378 	.word	0x08017378
 8001c5c:	08017388 	.word	0x08017388
 8001c60:	08017394 	.word	0x08017394
 8001c64:	080173a0 	.word	0x080173a0
 8001c68:	080173ac 	.word	0x080173ac
 8001c6c:	080173bc 	.word	0x080173bc
 8001c70:	080173c8 	.word	0x080173c8
 8001c74:	080173d4 	.word	0x080173d4
 8001c78:	080173e0 	.word	0x080173e0
 8001c7c:	080173ec 	.word	0x080173ec
 8001c80:	080173fc 	.word	0x080173fc
 8001c84:	0801740c 	.word	0x0801740c
 8001c88:	08017418 	.word	0x08017418
 8001c8c:	08017428 	.word	0x08017428
 8001c90:	24000000 	.word	0x24000000
 8001c94:	240002d4 	.word	0x240002d4
 8001c98:	08017438 	.word	0x08017438
 8001c9c:	08017448 	.word	0x08017448
 8001ca0:	24001c08 	.word	0x24001c08
 8001ca4:	24001914 	.word	0x24001914
 8001ca8:	08017450 	.word	0x08017450
 8001cac:	0801745c 	.word	0x0801745c
 8001cb0:	24001bbc 	.word	0x24001bbc
 8001cb4:	08017464 	.word	0x08017464
 8001cb8:	0801746c 	.word	0x0801746c
 8001cbc:	24001960 	.word	0x24001960
 8001cc0:	08017474 	.word	0x08017474
 8001cc4:	0801747c 	.word	0x0801747c
 8001cc8:	24001961 	.word	0x24001961
	}
	case 0x0D: {
		printf("Step Down\n");
 8001ccc:	4842      	ldr	r0, [pc, #264]	; (8001dd8 <HAL_UART_RxCpltCallback+0x870>)
 8001cce:	f014 fe53 	bl	8016978 <puts>
		if (step > 1) {
 8001cd2:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <HAL_UART_RxCpltCallback+0x874>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d974      	bls.n	8001dc6 <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_UART_RxCpltCallback+0x874>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3b02      	subs	r3, #2
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_UART_RxCpltCallback+0x874>)
 8001ce8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_UART_RxCpltCallback+0x874>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_UART_RxCpltCallback+0x878>)
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4839      	ldr	r0, [pc, #228]	; (8001de4 <HAL_UART_RxCpltCallback+0x87c>)
 8001cfe:	f004 f814 	bl	8005d2a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001d02:	2100      	movs	r1, #0
 8001d04:	4837      	ldr	r0, [pc, #220]	; (8001de4 <HAL_UART_RxCpltCallback+0x87c>)
 8001d06:	f003 fe55 	bl	80059b4 <HAL_DAC_Start>
		}
		break;
 8001d0a:	e05c      	b.n	8001dc6 <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001d0c:	4836      	ldr	r0, [pc, #216]	; (8001de8 <HAL_UART_RxCpltCallback+0x880>)
 8001d0e:	f014 fe33 	bl	8016978 <puts>
		if (cadence <= 50000) {
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d855      	bhi.n	8001dca <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4a31      	ldr	r2, [pc, #196]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d26:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d32:	e04a      	b.n	8001dca <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001d34:	482e      	ldr	r0, [pc, #184]	; (8001df0 <HAL_UART_RxCpltCallback+0x888>)
 8001d36:	f014 fe1f 	bl	8016978 <puts>
		if (cadence >= 6250) {
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f641 0269 	movw	r2, #6249	; 0x1869
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d943      	bls.n	8001dce <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d4e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_UART_RxCpltCallback+0x884>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001d5a:	e038      	b.n	8001dce <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <HAL_UART_RxCpltCallback+0x88c>)
 8001d5e:	f014 fe0b 	bl	8016978 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_UART_RxCpltCallback+0x890>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2102      	movs	r1, #2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f011 fcc9 	bl	8013700 <osEventFlagsSet>
		break;
 8001d6e:	e02f      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001d70:	4822      	ldr	r0, [pc, #136]	; (8001dfc <HAL_UART_RxCpltCallback+0x894>)
 8001d72:	f014 fe01 	bl	8016978 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_UART_RxCpltCallback+0x890>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f011 fcbf 	bl	8013700 <osEventFlagsSet>
		break;
 8001d82:	e025      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <HAL_UART_RxCpltCallback+0x898>)
 8001d86:	f014 fdf7 	bl	8016978 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_UART_RxCpltCallback+0x890>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2108      	movs	r1, #8
 8001d90:	4618      	mov	r0, r3
 8001d92:	f011 fcb5 	bl	8013700 <osEventFlagsSet>
		break;
 8001d96:	e01b      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001d98:	f000 f958 	bl	800204c <sync>
		break;
 8001d9c:	e018      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_UART_RxCpltCallback+0x89c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f011 fcab 	bl	8013700 <osEventFlagsSet>
		break;
 8001daa:	e011      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_UART_RxCpltCallback+0x89c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f011 fca4 	bl	8013700 <osEventFlagsSet>
		break;
 8001db8:	e00a      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001dba:	4813      	ldr	r0, [pc, #76]	; (8001e08 <HAL_UART_RxCpltCallback+0x8a0>)
 8001dbc:	f014 fddc 	bl	8016978 <puts>
		break;
 8001dc0:	e006      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dc2:	bf00      	nop
 8001dc4:	e004      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dc6:	bf00      	nop
 8001dc8:	e002      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001dce:	bf00      	nop
	}
	}
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	08017484 	.word	0x08017484
 8001ddc:	24001961 	.word	0x24001961
 8001de0:	24000000 	.word	0x24000000
 8001de4:	240002d4 	.word	0x240002d4
 8001de8:	08017490 	.word	0x08017490
 8001dec:	24000080 	.word	0x24000080
 8001df0:	0801749c 	.word	0x0801749c
 8001df4:	080174a8 	.word	0x080174a8
 8001df8:	24001918 	.word	0x24001918
 8001dfc:	080174b8 	.word	0x080174b8
 8001e00:	080174c4 	.word	0x080174c4
 8001e04:	2400191c 	.word	0x2400191c
 8001e08:	080174d0 	.word	0x080174d0

08001e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e10:	f002 f83c 	bl	8003e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e14:	f000 f824 	bl	8001e60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e18:	f000 f8a2 	bl	8001f60 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e1c:	f7ff fa18 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e20:	f7fe ff62 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e24:	f001 fc9c 	bl	8003760 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e28:	f7ff fa8c 	bl	8001344 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001e2c:	f000 fe4a 	bl	8002ac4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001e30:	f001 fabe 	bl	80033b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001e34:	f001 fa0e 	bl	8003254 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001e38:	f7fe fcf6 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001e3c:	f7fe fbd2 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001e40:	f7fe fe9e 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001e44:	f000 fde6 	bl	8002a14 <MX_SPI1_Init>
  MX_RTC_Init();
 8001e48:	f000 fbc4 	bl	80025d4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001e4c:	f000 f8b8 	bl	8001fc0 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e50:	f011 fb00 	bl	8013454 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e54:	f7fe ffa2 	bl	8000d9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e58:	f011 fb20 	bl	801349c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e5c:	e7fe      	b.n	8001e5c <main+0x50>
	...

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09c      	sub	sp, #112	; 0x70
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	224c      	movs	r2, #76	; 0x4c
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f014 fd0c 	bl	801688c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2220      	movs	r2, #32
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f014 fd06 	bl	801688c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e80:	2002      	movs	r0, #2
 8001e82:	f007 ffed 	bl	8009e60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <SystemClock_Config+0xf8>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <SystemClock_Config+0xf8>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <SystemClock_Config+0xf8>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <SystemClock_Config+0xfc>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ea8:	4a2c      	ldr	r2, [pc, #176]	; (8001f5c <SystemClock_Config+0xfc>)
 8001eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <SystemClock_Config+0xfc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ebc:	bf00      	nop
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <SystemClock_Config+0xfc>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eca:	d1f8      	bne.n	8001ebe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eda:	2340      	movs	r3, #64	; 0x40
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001eea:	2318      	movs	r3, #24
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001efa:	2308      	movs	r3, #8
 8001efc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001efe:	2302      	movs	r3, #2
 8001f00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f007 ffe2 	bl	8009ed4 <HAL_RCC_OscConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f16:	f000 f94f 	bl	80021b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1a:	233f      	movs	r3, #63	; 0x3f
 8001f1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f2e:	2340      	movs	r3, #64	; 0x40
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f008 fc22 	bl	800a788 <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001f4a:	f000 f935 	bl	80021b8 <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3770      	adds	r7, #112	; 0x70
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	58000400 	.word	0x58000400
 8001f5c:	58024800 	.word	0x58024800

08001f60 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0b0      	sub	sp, #192	; 0xc0
 8001f64:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f66:	463b      	mov	r3, r7
 8001f68:	22c0      	movs	r2, #192	; 0xc0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f014 fc8d 	bl	801688c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001f82:	2318      	movs	r3, #24
 8001f84:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001f86:	2308      	movs	r3, #8
 8001f88:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f96:	2320      	movs	r3, #32
 8001f98:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 ffbc 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001fb2:	f000 f901 	bl	80021b8 <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	37c0      	adds	r7, #192	; 0xc0
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f011 fb5c 	bl	8013682 <osEventFlagsNew>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <system_setup+0x78>)
 8001fce:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <system_setup+0x78>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d100      	bne.n	8001fda <system_setup+0x1a>
        while (1);
 8001fd8:	e7fe      	b.n	8001fd8 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f011 fb51 	bl	8013682 <osEventFlagsNew>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <system_setup+0x7c>)
 8001fe4:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <system_setup+0x7c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d100      	bne.n	8001ff0 <system_setup+0x30>
        while (1);
 8001fee:	e7fe      	b.n	8001fee <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f011 fb46 	bl	8013682 <osEventFlagsNew>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <system_setup+0x80>)
 8001ffa:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <system_setup+0x80>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d100      	bne.n	8002006 <system_setup+0x46>
        while (1);
 8002004:	e7fe      	b.n	8002004 <system_setup+0x44>
    }



	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8002006:	f001 fcb5 	bl	8003974 <voltage_monitor_init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d100      	bne.n	8002012 <system_setup+0x52>
		while (1);
 8002010:	e7fe      	b.n	8002010 <system_setup+0x50>
	}


	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8002012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002016:	f44f 729c 	mov.w	r2, #312	; 0x138
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 800201c:	f000 fb6c 	bl	80026f8 <init_adc_dma>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d100      	bne.n	8002028 <system_setup+0x68>
		while (1);
 8002026:	e7fe      	b.n	8002026 <system_setup+0x66>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	4906      	ldr	r1, [pc, #24]	; (8002044 <system_setup+0x84>)
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <system_setup+0x88>)
 800202e:	f00e fd59 	bl	8010ae4 <HAL_UART_Receive_IT>

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	24001914 	.word	0x24001914
 800203c:	24001918 	.word	0x24001918
 8002040:	2400191c 	.word	0x2400191c
 8002044:	24001920 	.word	0x24001920
 8002048:	24001c54 	.word	0x24001c54

0800204c <sync>:

void sync() {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	send_ACK();
 8002052:	f000 f81f 	bl	8002094 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002056:	480d      	ldr	r0, [pc, #52]	; (800208c <sync+0x40>)
 8002058:	f00e fd90 	bl	8010b7c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	2209      	movs	r2, #9
 8002060:	490b      	ldr	r1, [pc, #44]	; (8002090 <sync+0x44>)
 8002062:	480a      	ldr	r0, [pc, #40]	; (800208c <sync+0x40>)
 8002064:	f00e fc76 	bl	8010954 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <sync+0x44>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2bff      	cmp	r3, #255	; 0xff
 8002072:	d1f3      	bne.n	800205c <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002074:	2201      	movs	r2, #1
 8002076:	4906      	ldr	r1, [pc, #24]	; (8002090 <sync+0x44>)
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <sync+0x40>)
 800207a:	f00e fd33 	bl	8010ae4 <HAL_UART_Receive_IT>

	send_ACK();
 800207e:	f000 f809 	bl	8002094 <send_ACK>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	24001c54 	.word	0x24001c54
 8002090:	24001920 	.word	0x24001920

08002094 <send_ACK>:

void send_ACK() {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <send_ACK+0x1c>)
 800209a:	22ff      	movs	r2, #255	; 0xff
 800209c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	2201      	movs	r2, #1
 80020a2:	4903      	ldr	r1, [pc, #12]	; (80020b0 <send_ACK+0x1c>)
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <send_ACK+0x20>)
 80020a6:	f00e fbc7 	bl	8010838 <HAL_UART_Transmit>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2400196c 	.word	0x2400196c
 80020b4:	24001c54 	.word	0x24001c54

080020b8 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <get_current_step+0xc0>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <get_current_step+0xac>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d4:	da48      	bge.n	8002168 <get_current_step+0xb0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03f      	beq.n	8002160 <get_current_step+0xa8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020e6:	4293      	cmp	r3, r2
 80020e8:	dc3e      	bgt.n	8002168 <get_current_step+0xb0>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d033      	beq.n	800215c <get_current_step+0xa4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80020fa:	da35      	bge.n	8002168 <get_current_step+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002102:	4293      	cmp	r3, r2
 8002104:	d028      	beq.n	8002158 <get_current_step+0xa0>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800210c:	4293      	cmp	r3, r2
 800210e:	dc2b      	bgt.n	8002168 <get_current_step+0xb0>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f240 7245 	movw	r2, #1861	; 0x745
 8002116:	4293      	cmp	r3, r2
 8002118:	d01c      	beq.n	8002154 <get_current_step+0x9c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f240 7245 	movw	r2, #1861	; 0x745
 8002120:	4293      	cmp	r3, r2
 8002122:	dc21      	bgt.n	8002168 <get_current_step+0xb0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800212a:	4293      	cmp	r3, r2
 800212c:	d010      	beq.n	8002150 <get_current_step+0x98>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002134:	4293      	cmp	r3, r2
 8002136:	dc17      	bgt.n	8002168 <get_current_step+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <get_current_step+0x90>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002144:	d002      	beq.n	800214c <get_current_step+0x94>
 8002146:	e00f      	b.n	8002168 <get_current_step+0xb0>
	case 0:
		return 0;
 8002148:	2300      	movs	r3, #0
 800214a:	e00e      	b.n	800216a <get_current_step+0xb2>
	case 620:
		return 1;
 800214c:	2301      	movs	r3, #1
 800214e:	e00c      	b.n	800216a <get_current_step+0xb2>
	case 1241:
		return 2;
 8002150:	2302      	movs	r3, #2
 8002152:	e00a      	b.n	800216a <get_current_step+0xb2>
	case 1861:
		return 3;
 8002154:	2303      	movs	r3, #3
 8002156:	e008      	b.n	800216a <get_current_step+0xb2>
	case 2482:
		return 4;
 8002158:	2304      	movs	r3, #4
 800215a:	e006      	b.n	800216a <get_current_step+0xb2>
	case 3103:
		return 5;
 800215c:	2305      	movs	r3, #5
 800215e:	e004      	b.n	800216a <get_current_step+0xb2>
	case 3723:
		return 6;
 8002160:	2306      	movs	r3, #6
 8002162:	e002      	b.n	800216a <get_current_step+0xb2>
	case 4095:
		return 7;
 8002164:	2307      	movs	r3, #7
 8002166:	e000      	b.n	800216a <get_current_step+0xb2>
	default:
		return -1;
 8002168:	23ff      	movs	r3, #255	; 0xff
	}
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007400 	.word	0x40007400

0800217c <enter_stop>:

void enter_stop() {
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	  send_ACK();
 8002180:	f7ff ff88 	bl	8002094 <send_ACK>

	  vTaskSuspendAll();
 8002184:	f012 fe14 	bl	8014db0 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002188:	2101      	movs	r1, #1
 800218a:	2001      	movs	r0, #1
 800218c:	f007 fe2c 	bl	8009de8 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002190:	f7ff f984 	bl	800149c <__NVIC_SystemReset>

08002194 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021a6:	f001 fead 	bl	8003f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40001000 	.word	0x40001000

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c0:	e7fe      	b.n	80021c0 <Error_Handler+0x8>
	...

080021c4 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021ca:	bf00      	nop
 80021cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d0:	481c      	ldr	r0, [pc, #112]	; (8002244 <create_pmt_packet+0x80>)
 80021d2:	f006 ffcb 	bl	800916c <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f7      	bne.n	80021cc <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fa1e 	bl	8003620 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 facf 	bl	800278c <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80021ee:	23bb      	movs	r3, #187	; 0xbb
 80021f0:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80021f2:	23bb      	movs	r3, #187	; 0xbb
 80021f4:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <create_pmt_packet+0x84>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <create_pmt_packet+0x84>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 800220a:	7a3b      	ldrb	r3, [r7, #8]
 800220c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800220e:	7a7b      	ldrb	r3, [r7, #9]
 8002210:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8002212:	793b      	ldrb	r3, [r7, #4]
 8002214:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002216:	797b      	ldrb	r3, [r7, #5]
 8002218:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 800221a:	79bb      	ldrb	r3, [r7, #6]
 800221c:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8002222:	f107 010c 	add.w	r1, r7, #12
 8002226:	2364      	movs	r3, #100	; 0x64
 8002228:	220a      	movs	r2, #10
 800222a:	4808      	ldr	r0, [pc, #32]	; (800224c <create_pmt_packet+0x88>)
 800222c:	f00e fb04 	bl	8010838 <HAL_UART_Transmit>

	pmt_seq++;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <create_pmt_packet+0x84>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <create_pmt_packet+0x84>)
 800223a:	801a      	strh	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58020000 	.word	0x58020000
 8002248:	2400196e 	.word	0x2400196e
 800224c:	24001c54 	.word	0x24001c54

08002250 <create_erpa_packet>:


void create_erpa_packet() {
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002256:	bf00      	nop
 8002258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225c:	4828      	ldr	r0, [pc, #160]	; (8002300 <create_erpa_packet+0xb0>)
 800225e:	f006 ff85 	bl	800916c <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f7      	bne.n	8002258 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002268:	23ff      	movs	r3, #255	; 0xff
 800226a:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4618      	mov	r0, r3
 8002270:	f001 f9d6 	bl	8003620 <get_uptime>
	sweep_step = get_current_step();
 8002274:	f7ff ff20 	bl	80020b8 <get_current_step>
 8002278:	4603      	mov	r3, r0
 800227a:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4618      	mov	r0, r3
 8002282:	f000 faa7 	bl	80027d4 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fac2 	bl	8002814 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002290:	23aa      	movs	r3, #170	; 0xaa
 8002292:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002294:	23aa      	movs	r3, #170	; 0xaa
 8002296:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <create_erpa_packet+0xb4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <create_erpa_packet+0xb4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <create_erpa_packet+0xb4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80022b4:	7ffb      	ldrb	r3, [r7, #31]
 80022b6:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022b8:	893b      	ldrh	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022c2:	893b      	ldrh	r3, [r7, #8]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022c8:	7b3b      	ldrb	r3, [r7, #12]
 80022ca:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022cc:	7b7b      	ldrb	r3, [r7, #13]
 80022ce:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80022d0:	793b      	ldrb	r3, [r7, #4]
 80022d2:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80022d4:	797b      	ldrb	r3, [r7, #5]
 80022d6:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80022d8:	79bb      	ldrb	r3, [r7, #6]
 80022da:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80022e0:	f107 0110 	add.w	r1, r7, #16
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	220e      	movs	r2, #14
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <create_erpa_packet+0xb8>)
 80022ea:	f00e faa5 	bl	8010838 <HAL_UART_Transmit>

	erpa_seq++;
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <create_erpa_packet+0xb4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <create_erpa_packet+0xb4>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	58020400 	.word	0x58020400
 8002304:	24001970 	.word	0x24001970
 8002308:	24001c54 	.word	0x24001c54

0800230c <create_hk_packet>:


void create_hk_packet() {
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	; 0x50
 8002310:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4618      	mov	r0, r3
 8002316:	f001 f983 	bl	8003620 <get_uptime>
	get_timestamp(timestamp);
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4618      	mov	r0, r3
 8002320:	f001 f9ce 	bl	80036c0 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002324:	f001 fd04 	bl	8003d30 <get_rail_monitor>
 8002328:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800232a:	23cc      	movs	r3, #204	; 0xcc
 800232c:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800232e:	23cc      	movs	r3, #204	; 0xcc
 8002330:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002332:	4b9b      	ldr	r3, [pc, #620]	; (80025a0 <create_hk_packet+0x294>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800233e:	4b98      	ldr	r3, [pc, #608]	; (80025a0 <create_hk_packet+0x294>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002348:	889b      	ldrh	r3, [r3, #4]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002354:	889b      	ldrh	r3, [r3, #4]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 800235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235c:	330a      	adds	r3, #10
 800235e:	889b      	ldrh	r3, [r3, #4]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29b      	uxth	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	330a      	adds	r3, #10
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002374:	3314      	adds	r3, #20
 8002376:	889b      	ldrh	r3, [r3, #4]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	b29b      	uxth	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002382:	3314      	adds	r3, #20
 8002384:	889b      	ldrh	r3, [r3, #4]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 800238a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238c:	331e      	adds	r3, #30
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	331e      	adds	r3, #30
 800239c:	889b      	ldrh	r3, [r3, #4]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80023a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a4:	3328      	adds	r3, #40	; 0x28
 80023a6:	889b      	ldrh	r3, [r3, #4]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80023b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b4:	3328      	adds	r3, #40	; 0x28
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c0:	3332      	adds	r3, #50	; 0x32
 80023c2:	889b      	ldrh	r3, [r3, #4]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 80023ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d0:	3332      	adds	r3, #50	; 0x32
 80023d2:	889b      	ldrh	r3, [r3, #4]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	333c      	adds	r3, #60	; 0x3c
 80023de:	889b      	ldrh	r3, [r3, #4]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 80023ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ec:	333c      	adds	r3, #60	; 0x3c
 80023ee:	889b      	ldrh	r3, [r3, #4]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	3346      	adds	r3, #70	; 0x46
 80023fa:	889b      	ldrh	r3, [r3, #4]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	3346      	adds	r3, #70	; 0x46
 800240a:	889b      	ldrh	r3, [r3, #4]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	3350      	adds	r3, #80	; 0x50
 8002416:	889b      	ldrh	r3, [r3, #4]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002424:	3350      	adds	r3, #80	; 0x50
 8002426:	889b      	ldrh	r3, [r3, #4]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002430:	335a      	adds	r3, #90	; 0x5a
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800243e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002440:	335a      	adds	r3, #90	; 0x5a
 8002442:	889b      	ldrh	r3, [r3, #4]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 800244a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244c:	3364      	adds	r3, #100	; 0x64
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 800245a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245c:	3364      	adds	r3, #100	; 0x64
 800245e:	889b      	ldrh	r3, [r3, #4]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	336e      	adds	r3, #110	; 0x6e
 800246a:	889b      	ldrh	r3, [r3, #4]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	b29b      	uxth	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002478:	336e      	adds	r3, #110	; 0x6e
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002484:	3378      	adds	r3, #120	; 0x78
 8002486:	889b      	ldrh	r3, [r3, #4]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b29b      	uxth	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8002492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002494:	3378      	adds	r3, #120	; 0x78
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 800249e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a0:	3382      	adds	r3, #130	; 0x82
 80024a2:	889b      	ldrh	r3, [r3, #4]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80024ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b0:	3382      	adds	r3, #130	; 0x82
 80024b2:	889b      	ldrh	r3, [r3, #4]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	338c      	adds	r3, #140	; 0x8c
 80024be:	889b      	ldrh	r3, [r3, #4]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	338c      	adds	r3, #140	; 0x8c
 80024ce:	889b      	ldrh	r3, [r3, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	3396      	adds	r3, #150	; 0x96
 80024da:	889b      	ldrh	r3, [r3, #4]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 80024e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e8:	3396      	adds	r3, #150	; 0x96
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	33a0      	adds	r3, #160	; 0xa0
 80024f6:	889b      	ldrh	r3, [r3, #4]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002504:	33a0      	adds	r3, #160	; 0xa0
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	33aa      	adds	r3, #170	; 0xaa
 8002512:	889b      	ldrh	r3, [r3, #4]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	b29b      	uxth	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 800251e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002520:	33aa      	adds	r3, #170	; 0xaa
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 800252a:	7a3b      	ldrb	r3, [r7, #8]
 800252c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8002530:	7a7b      	ldrb	r3, [r7, #9]
 8002532:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002536:	7abb      	ldrb	r3, [r7, #10]
 8002538:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8002542:	7b3b      	ldrb	r3, [r7, #12]
 8002544:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 800254e:	7bbb      	ldrb	r3, [r7, #14]
 8002550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 800255a:	7c3b      	ldrb	r3, [r7, #16]
 800255c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8002560:	7c7b      	ldrb	r3, [r7, #17]
 8002562:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8002566:	793b      	ldrb	r3, [r7, #4]
 8002568:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 800256c:	797b      	ldrb	r3, [r7, #5]
 800256e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 800257e:	f107 0114 	add.w	r1, r7, #20
 8002582:	2364      	movs	r3, #100	; 0x64
 8002584:	2236      	movs	r2, #54	; 0x36
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <create_hk_packet+0x298>)
 8002588:	f00e f956 	bl	8010838 <HAL_UART_Transmit>

	hk_seq++;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <create_hk_packet+0x294>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <create_hk_packet+0x294>)
 8002596:	801a      	strh	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	3750      	adds	r7, #80	; 0x50
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	24001974 	.word	0x24001974
 80025a4:	24001c54 	.word	0x24001c54

080025a8 <reset_packet_sequence_numbers>:
	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
}



void reset_packet_sequence_numbers() {
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <reset_packet_sequence_numbers+0x20>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <reset_packet_sequence_numbers+0x24>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <reset_packet_sequence_numbers+0x28>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	801a      	strh	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	2400196e 	.word	0x2400196e
 80025cc:	24001970 	.word	0x24001970
 80025d0:	24001974 	.word	0x24001974

080025d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025e8:	2300      	movs	r3, #0
 80025ea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <MX_RTC_Init+0xb4>)
 80025ee:	4a27      	ldr	r2, [pc, #156]	; (800268c <MX_RTC_Init+0xb8>)
 80025f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <MX_RTC_Init+0xb4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <MX_RTC_Init+0xb4>)
 80025fa:	2263      	movs	r2, #99	; 0x63
 80025fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <MX_RTC_Init+0xb4>)
 8002600:	f242 720f 	movw	r2, #9999	; 0x270f
 8002604:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <MX_RTC_Init+0xb4>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800260c:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <MX_RTC_Init+0xb4>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <MX_RTC_Init+0xb4>)
 8002614:	2200      	movs	r2, #0
 8002616:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <MX_RTC_Init+0xb4>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800261e:	481a      	ldr	r0, [pc, #104]	; (8002688 <MX_RTC_Init+0xb4>)
 8002620:	f00b f97e 	bl	800d920 <HAL_RTC_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800262a:	f7ff fdc5 	bl	80021b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800262e:	2300      	movs	r3, #0
 8002630:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002632:	2300      	movs	r3, #0
 8002634:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002636:	2300      	movs	r3, #0
 8002638:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2201      	movs	r2, #1
 8002646:	4619      	mov	r1, r3
 8002648:	480f      	ldr	r0, [pc, #60]	; (8002688 <MX_RTC_Init+0xb4>)
 800264a:	f00b f9eb 	bl	800da24 <HAL_RTC_SetTime>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002654:	f7ff fdb0 	bl	80021b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002658:	2301      	movs	r3, #1
 800265a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800265c:	2301      	movs	r3, #1
 800265e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002660:	2301      	movs	r3, #1
 8002662:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002664:	2300      	movs	r3, #0
 8002666:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002668:	463b      	mov	r3, r7
 800266a:	2201      	movs	r2, #1
 800266c:	4619      	mov	r1, r3
 800266e:	4806      	ldr	r0, [pc, #24]	; (8002688 <MX_RTC_Init+0xb4>)
 8002670:	f00b fad2 	bl	800dc18 <HAL_RTC_SetDate>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800267a:	f7ff fd9d 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	24001978 	.word	0x24001978
 800268c:	58004000 	.word	0x58004000

08002690 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b2      	sub	sp, #200	; 0xc8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	22c0      	movs	r2, #192	; 0xc0
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f014 f8f3 	bl	801688c <memset>
  if(rtcHandle->Instance==RTC)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_RTC_MspInit+0x5c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d118      	bne.n	80026e2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_RTC_MspInit+0x60>)
 80026be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	4618      	mov	r0, r3
 80026c8:	f008 fc2c 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80026d2:	f7ff fd71 	bl	80021b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_RTC_MspInit+0x64>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_RTC_MspInit+0x64>)
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026e2:	bf00      	nop
 80026e4:	37c8      	adds	r7, #200	; 0xc8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58004000 	.word	0x58004000
 80026f0:	00019300 	.word	0x00019300
 80026f4:	58024400 	.word	0x58024400

080026f8 <init_adc_dma>:
ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t erpa_spi_raw_data[2]);

// Public Functions
uint8_t init_adc_dma() {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002702:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800270a:	481b      	ldr	r0, [pc, #108]	; (8002778 <init_adc_dma+0x80>)
 800270c:	f002 ff0e 	bl	800552c <HAL_ADCEx_Calibration_Start>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002716:	f7ff fd4f 	bl	80021b8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800271a:	220b      	movs	r2, #11
 800271c:	4917      	ldr	r1, [pc, #92]	; (800277c <init_adc_dma+0x84>)
 800271e:	4816      	ldr	r0, [pc, #88]	; (8002778 <init_adc_dma+0x80>)
 8002720:	f001 ffe2 	bl	80046e8 <HAL_ADC_Start_DMA>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800272a:	f7ff fd45 	bl	80021b8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800272e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002732:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002736:	4812      	ldr	r0, [pc, #72]	; (8002780 <init_adc_dma+0x88>)
 8002738:	f002 fef8 	bl	800552c <HAL_ADCEx_Calibration_Start>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002742:	f7ff fd39 	bl	80021b8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002746:	2204      	movs	r2, #4
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <init_adc_dma+0x8c>)
 800274a:	480d      	ldr	r0, [pc, #52]	; (8002780 <init_adc_dma+0x88>)
 800274c:	f001 ffcc 	bl	80046e8 <HAL_ADC_Start_DMA>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002756:	f7ff fd2f 	bl	80021b8 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <init_adc_dma+0x90>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <init_adc_dma+0x90>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]


	status = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]

	return status;
 800276e:	79fb      	ldrb	r3, [r7, #7]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	2400011c 	.word	0x2400011c
 800277c:	240019a0 	.word	0x240019a0
 8002780:	24000180 	.word	0x24000180
 8002784:	240019c0 	.word	0x240019c0
 8002788:	24001a6c 	.word	0x24001a6c

0800278c <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002794:	f107 010c 	add.w	r1, r7, #12
 8002798:	2301      	movs	r3, #1
 800279a:	2201      	movs	r2, #1
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <sample_pmt_spi+0x44>)
 800279e:	f00b fd05 	bl	800e1ac <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80027a6:	7b7b      	ldrb	r3, [r7, #13]
 80027a8:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <sample_pmt_spi+0x44>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <sample_pmt_spi+0x44>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7bba      	ldrb	r2, [r7, #14]
 80027be:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	701a      	strb	r2, [r3, #0]
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	240019e4 	.word	0x240019e4

080027d4 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80027dc:	2201      	movs	r2, #1
 80027de:	490b      	ldr	r1, [pc, #44]	; (800280c <sample_erpa_spi+0x38>)
 80027e0:	480b      	ldr	r0, [pc, #44]	; (8002810 <sample_erpa_spi+0x3c>)
 80027e2:	f00b ff55 	bl	800e690 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <sample_erpa_spi+0x38>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <sample_erpa_spi+0x38>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3301      	adds	r3, #1
 8002800:	7bba      	ldrb	r2, [r7, #14]
 8002802:	701a      	strb	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	240019e0 	.word	0x240019e0
 8002810:	24001a6c 	.word	0x24001a6c

08002814 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <sample_erpa_adc+0x20>)
 800281e:	885b      	ldrh	r3, [r3, #2]
 8002820:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	89fa      	ldrh	r2, [r7, #14]
 8002826:	801a      	strh	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	240019a0 	.word	0x240019a0

08002838 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002840:	2390      	movs	r3, #144	; 0x90
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f8a2 	bl	800298c <poll_i2c_sensor>
 8002848:	4603      	mov	r3, r0
 800284a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 800284c:	2394      	movs	r3, #148	; 0x94
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f89c 	bl	800298c <poll_i2c_sensor>
 8002854:	4603      	mov	r3, r0
 8002856:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002858:	2392      	movs	r3, #146	; 0x92
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f896 	bl	800298c <poll_i2c_sensor>
 8002860:	4603      	mov	r3, r0
 8002862:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002864:	2396      	movs	r3, #150	; 0x96
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f890 	bl	800298c <poll_i2c_sensor>
 800286c:	4603      	mov	r3, r0
 800286e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	89fa      	ldrh	r2, [r7, #14]
 8002874:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3302      	adds	r3, #2
 800287a:	89ba      	ldrh	r2, [r7, #12]
 800287c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	897a      	ldrh	r2, [r7, #10]
 8002884:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3306      	adds	r3, #6
 800288a:	893a      	ldrh	r2, [r7, #8]
 800288c:	801a      	strh	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <sample_hk_adc1+0xa0>)
 80028a2:	8a9b      	ldrh	r3, [r3, #20]
 80028a4:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <sample_hk_adc1+0xa0>)
 80028a8:	8a1b      	ldrh	r3, [r3, #16]
 80028aa:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <sample_hk_adc1+0xa0>)
 80028ae:	899b      	ldrh	r3, [r3, #12]
 80028b0:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80028b2:	4b21      	ldr	r3, [pc, #132]	; (8002938 <sample_hk_adc1+0xa0>)
 80028b4:	8a5b      	ldrh	r3, [r3, #18]
 80028b6:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80028b8:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <sample_hk_adc1+0xa0>)
 80028ba:	889b      	ldrh	r3, [r3, #4]
 80028bc:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <sample_hk_adc1+0xa0>)
 80028c0:	88db      	ldrh	r3, [r3, #6]
 80028c2:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <sample_hk_adc1+0xa0>)
 80028c6:	89db      	ldrh	r3, [r3, #14]
 80028c8:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <sample_hk_adc1+0xa0>)
 80028cc:	891b      	ldrh	r3, [r3, #8]
 80028ce:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <sample_hk_adc1+0xa0>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <sample_hk_adc1+0xa0>)
 80028d8:	895b      	ldrh	r3, [r3, #10]
 80028da:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8bfa      	ldrh	r2, [r7, #30]
 80028e0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3302      	adds	r3, #2
 80028e6:	8bba      	ldrh	r2, [r7, #28]
 80028e8:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	8b7a      	ldrh	r2, [r7, #26]
 80028f0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3306      	adds	r3, #6
 80028f6:	8b3a      	ldrh	r2, [r7, #24]
 80028f8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3308      	adds	r3, #8
 80028fe:	8afa      	ldrh	r2, [r7, #22]
 8002900:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	330a      	adds	r3, #10
 8002906:	8aba      	ldrh	r2, [r7, #20]
 8002908:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	330c      	adds	r3, #12
 800290e:	8a7a      	ldrh	r2, [r7, #18]
 8002910:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	330e      	adds	r3, #14
 8002916:	8a3a      	ldrh	r2, [r7, #16]
 8002918:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3310      	adds	r3, #16
 800291e:	89fa      	ldrh	r2, [r7, #14]
 8002920:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3312      	adds	r3, #18
 8002926:	89ba      	ldrh	r2, [r7, #12]
 8002928:	801a      	strh	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	240019a0 	.word	0x240019a0

0800293c <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002944:	4b10      	ldr	r3, [pc, #64]	; (8002988 <sample_hk_adc3+0x4c>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <sample_hk_adc3+0x4c>)
 800294c:	885b      	ldrh	r3, [r3, #2]
 800294e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <sample_hk_adc3+0x4c>)
 8002952:	889b      	ldrh	r3, [r3, #4]
 8002954:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <sample_hk_adc3+0x4c>)
 8002958:	88db      	ldrh	r3, [r3, #6]
 800295a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	89fa      	ldrh	r2, [r7, #14]
 8002960:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3302      	adds	r3, #2
 8002966:	89ba      	ldrh	r2, [r7, #12]
 8002968:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	897a      	ldrh	r2, [r7, #10]
 8002970:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3306      	adds	r3, #6
 8002976:	893a      	ldrh	r2, [r7, #8]
 8002978:	801a      	strh	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	240019c0 	.word	0x240019c0

0800298c <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002996:	2300      	movs	r3, #0
 8002998:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	b299      	uxth	r1, r3
 800299e:	f107 0208 	add.w	r2, r7, #8
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2301      	movs	r3, #1
 80029aa:	4817      	ldr	r0, [pc, #92]	; (8002a08 <poll_i2c_sensor+0x7c>)
 80029ac:	f006 fcac 	bl	8009308 <HAL_I2C_Master_Transmit>
 80029b0:	4603      	mov	r3, r0
 80029b2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80029b4:	7b7b      	ldrb	r3, [r7, #13]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 80029ba:	4814      	ldr	r0, [pc, #80]	; (8002a0c <poll_i2c_sensor+0x80>)
 80029bc:	f013 ffdc 	bl	8016978 <puts>
 80029c0:	e01c      	b.n	80029fc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	b299      	uxth	r1, r3
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2302      	movs	r3, #2
 80029d2:	480d      	ldr	r0, [pc, #52]	; (8002a08 <poll_i2c_sensor+0x7c>)
 80029d4:	f006 fdb0 	bl	8009538 <HAL_I2C_Master_Receive>
 80029d8:	4603      	mov	r3, r0
 80029da:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80029dc:	7b7b      	ldrb	r3, [r7, #13]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80029e2:	480b      	ldr	r0, [pc, #44]	; (8002a10 <poll_i2c_sensor+0x84>)
 80029e4:	f013 ffc8 	bl	8016978 <puts>
 80029e8:	e008      	b.n	80029fc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 80029ea:	7a3b      	ldrb	r3, [r7, #8]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80029f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029f4:	7a7a      	ldrb	r2, [r7, #9]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	10db      	asrs	r3, r3, #3
 80029fa:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80029fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	240018c0 	.word	0x240018c0
 8002a0c:	080174e0 	.word	0x080174e0
 8002a10:	080174f0 	.word	0x080174f0

08002a14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a1a:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <MX_SPI1_Init+0xac>)
 8002a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a1e:	4b27      	ldr	r3, [pc, #156]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002a2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a30:	220f      	movs	r2, #15
 8002a32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a48:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a4a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a6e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_SPI1_Init+0xa8>)
 8002aa8:	f00b fa5c 	bl	800df64 <HAL_SPI_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002ab2:	f7ff fb81 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	240019e4 	.word	0x240019e4
 8002ac0:	40013000 	.word	0x40013000

08002ac4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002aca:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <MX_SPI2_Init+0xac>)
 8002acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ace:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002ad0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002ad6:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002ad8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002adc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002af2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002af6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002afa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002afe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_SPI2_Init+0xa8>)
 8002b58:	f00b fa04 	bl	800df64 <HAL_SPI_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002b62:	f7ff fb29 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	24001a6c 	.word	0x24001a6c
 8002b70:	40003800 	.word	0x40003800

08002b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b0bc      	sub	sp, #240	; 0xf0
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	22c0      	movs	r2, #192	; 0xc0
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f013 fe79 	bl	801688c <memset>
  if(spiHandle->Instance==SPI1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a67      	ldr	r2, [pc, #412]	; (8002d3c <HAL_SPI_MspInit+0x1c8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d145      	bne.n	8002c30 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb4:	f107 0318 	add.w	r3, r7, #24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f008 f9b3 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002bc4:	f7ff faf8 	bl	80021b8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bc8:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bd8:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bec:	4a54      	ldr	r2, [pc, #336]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf6:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c04:	2318      	movs	r3, #24
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c26:	4619      	mov	r1, r3
 8002c28:	4846      	ldr	r0, [pc, #280]	; (8002d44 <HAL_SPI_MspInit+0x1d0>)
 8002c2a:	f006 f8ef 	bl	8008e0c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c2e:	e081      	b.n	8002d34 <HAL_SPI_MspInit+0x1c0>
  else if(spiHandle->Instance==SPI2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a44      	ldr	r2, [pc, #272]	; (8002d48 <HAL_SPI_MspInit+0x1d4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d17c      	bne.n	8002d34 <HAL_SPI_MspInit+0x1c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4a:	f107 0318 	add.w	r3, r7, #24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f008 f968 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002c5a:	f7ff faad 	bl	80021b8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c64:	4a36      	ldr	r2, [pc, #216]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c6e:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7c:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c82:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_SPI_MspInit+0x1cc>)
 8002c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002c9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4820      	ldr	r0, [pc, #128]	; (8002d44 <HAL_SPI_MspInit+0x1d0>)
 8002cc2:	f006 f8a3 	bl	8008e0c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <HAL_SPI_MspInit+0x1dc>)
 8002cca:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cce:	2227      	movs	r2, #39	; 0x27
 8002cd0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cec:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002d08:	4810      	ldr	r0, [pc, #64]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002d0a:	f003 fa37 	bl	800617c <HAL_DMA_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_SPI_MspInit+0x1a4>
      Error_Handler();
 8002d14:	f7ff fa50 	bl	80021b8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002d1c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_SPI_MspInit+0x1d8>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2105      	movs	r1, #5
 8002d28:	2024      	movs	r0, #36	; 0x24
 8002d2a:	f002 fdf9 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002d2e:	2024      	movs	r0, #36	; 0x24
 8002d30:	f002 fe10 	bl	8005954 <HAL_NVIC_EnableIRQ>
}
 8002d34:	bf00      	nop
 8002d36:	37f0      	adds	r7, #240	; 0xf0
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40013000 	.word	0x40013000
 8002d40:	58024400 	.word	0x58024400
 8002d44:	58020400 	.word	0x58020400
 8002d48:	40003800 	.word	0x40003800
 8002d4c:	24001af4 	.word	0x24001af4
 8002d50:	40020058 	.word	0x40020058

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <HAL_MspInit+0x38>)
 8002d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_MspInit+0x38>)
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_MspInit+0x38>)
 8002d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f06f 0001 	mvn.w	r0, #1
 8002d80:	f002 fdce 	bl	8005920 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	58024400 	.word	0x58024400

08002d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b090      	sub	sp, #64	; 0x40
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d827      	bhi.n	8002dee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	2036      	movs	r0, #54	; 0x36
 8002da4:	f002 fdbc 	bl	8005920 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002da8:	2036      	movs	r0, #54	; 0x36
 8002daa:	f002 fdd3 	bl	8005954 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <HAL_InitTick+0xc4>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_InitTick+0xc8>)
 8002db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dba:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_InitTick+0xc8>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_InitTick+0xc8>)
 8002dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dd2:	f107 0210 	add.w	r2, r7, #16
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f008 f85f 	bl	800aea0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_InitTick+0x6a>
 8002dec:	e001      	b.n	8002df2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e02b      	b.n	8002e4a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002df2:	f008 f829 	bl	800ae48 <HAL_RCC_GetPCLK1Freq>
 8002df6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002df8:	e004      	b.n	8002e04 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002dfa:	f008 f825 	bl	800ae48 <HAL_RCC_GetPCLK1Freq>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <HAL_InitTick+0xcc>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0c9b      	lsrs	r3, r3, #18
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <HAL_InitTick+0xd4>)
 8002e16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e32:	480b      	ldr	r0, [pc, #44]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e34:	f00c f8a7 	bl	800ef86 <HAL_TIM_Base_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e3e:	4808      	ldr	r0, [pc, #32]	; (8002e60 <HAL_InitTick+0xd0>)
 8002e40:	f00c f8f8 	bl	800f034 <HAL_TIM_Base_Start_IT>
 8002e44:	4603      	mov	r3, r0
 8002e46:	e000      	b.n	8002e4a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3740      	adds	r7, #64	; 0x40
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2400008c 	.word	0x2400008c
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	24001b6c 	.word	0x24001b6c
 8002e64:	40001000 	.word	0x40001000

08002e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002e6c:	e7fe      	b.n	8002e6c <NMI_Handler+0x4>

08002e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <HardFault_Handler+0x4>

08002e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <MemManage_Handler+0x4>

08002e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <BusFault_Handler+0x4>

08002e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <UsageFault_Handler+0x4>

08002e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <DMA1_Stream0_IRQHandler+0x10>)
 8002e9a:	f004 fc99 	bl	80077d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	240001e4 	.word	0x240001e4

08002ea8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <DMA1_Stream1_IRQHandler+0x10>)
 8002eae:	f004 fc8f 	bl	80077d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2400025c 	.word	0x2400025c

08002ebc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA1_Stream2_IRQHandler+0x10>)
 8002ec2:	f004 fc85 	bl	80077d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	24001ce8 	.word	0x24001ce8

08002ed0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <DMA1_Stream3_IRQHandler+0x10>)
 8002ed6:	f004 fc7b 	bl	80077d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	24001af4 	.word	0x24001af4

08002ee4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <DMA1_Stream5_IRQHandler+0x10>)
 8002eea:	f004 fc71 	bl	80077d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	240002e8 	.word	0x240002e8

08002ef8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <TIM1_BRK_IRQHandler+0x10>)
 8002efe:	f00c fbb0 	bl	800f662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	24001bbc 	.word	0x24001bbc

08002f0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <TIM1_UP_IRQHandler+0x10>)
 8002f12:	f00c fba6 	bl	800f662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	24001bbc 	.word	0x24001bbc

08002f20 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002f26:	f00c fb9c 	bl	800f662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	24001bbc 	.word	0x24001bbc

08002f34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <TIM1_CC_IRQHandler+0x10>)
 8002f3a:	f00c fb92 	bl	800f662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	24001bbc 	.word	0x24001bbc

08002f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM2_IRQHandler+0x10>)
 8002f4e:	f00c fb88 	bl	800f662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	24001c08 	.word	0x24001c08

08002f5c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <SPI2_IRQHandler+0x10>)
 8002f62:	f00b fcdd 	bl	800e920 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	24001a6c 	.word	0x24001a6c

08002f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <USART1_IRQHandler+0x10>)
 8002f76:	f00d feb7 	bl	8010ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	24001c54 	.word	0x24001c54

08002f84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <TIM6_DAC_IRQHandler+0x20>)
 8002f8a:	791b      	ldrb	r3, [r3, #4]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <TIM6_DAC_IRQHandler+0x20>)
 8002f94:	f002 fe73 	bl	8005c7e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002f98:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <TIM6_DAC_IRQHandler+0x24>)
 8002f9a:	f00c fb62 	bl	800f662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	240002d4 	.word	0x240002d4
 8002fa8:	24001b6c 	.word	0x24001b6c

08002fac <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <ITM_SendChar+0x48>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <ITM_SendChar+0x48>)
 8002fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <ITM_SendChar+0x4c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <ITM_SendChar+0x4c>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002fce:	bf00      	nop
 8002fd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f8      	beq.n	8002fd0 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002fde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	6013      	str	r3, [r2, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000edfc 	.word	0xe000edfc
 8002ff8:	e0000e00 	.word	0xe0000e00

08002ffc <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e00a      	b.n	8003024 <_read+0x28>
		*ptr++ = __io_getchar();
 800300e:	f3af 8000 	nop.w
 8003012:	4601      	mov	r1, r0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	60ba      	str	r2, [r7, #8]
 800301a:	b2ca      	uxtb	r2, r1
 800301c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	3301      	adds	r3, #1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	dbf0      	blt.n	800300e <_read+0x12>
	}

	return len;
 800302c:	687b      	ldr	r3, [r7, #4]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e009      	b.n	800305c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	60ba      	str	r2, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ffab 	bl	8002fac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	dbf1      	blt.n	8003048 <_write+0x12>
	}
	return len;
 8003064:	687b      	ldr	r3, [r7, #4]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <_close>:

int _close(int file) {
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <_fstat>:

int _fstat(int file, struct stat *st) {
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003096:	605a      	str	r2, [r3, #4]
	return 0;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <_isatty>:

int _isatty(int file) {
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <_sbrk+0x64>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <_sbrk+0x68>)
 80030f8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d207      	bcs.n	8003118 <_sbrk+0x40>
		errno = ENOMEM;
 8003108:	f013 fb88 	bl	801681c <__errno>
 800310c:	4603      	mov	r3, r0
 800310e:	220c      	movs	r2, #12
 8003110:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003116:	e009      	b.n	800312c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <_sbrk+0x64>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <_sbrk+0x64>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	4a05      	ldr	r2, [pc, #20]	; (800313c <_sbrk+0x64>)
 8003128:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800312a:	68fb      	ldr	r3, [r7, #12]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	24080000 	.word	0x24080000
 8003138:	00000400 	.word	0x00000400
 800313c:	24001bb8 	.word	0x24001bb8
 8003140:	24006778 	.word	0x24006778

08003144 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003148:	4b37      	ldr	r3, [pc, #220]	; (8003228 <SystemInit+0xe4>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	4a36      	ldr	r2, [pc, #216]	; (8003228 <SystemInit+0xe4>)
 8003150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <SystemInit+0xe8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	2b06      	cmp	r3, #6
 8003162:	d807      	bhi.n	8003174 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003164:	4b31      	ldr	r3, [pc, #196]	; (800322c <SystemInit+0xe8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 030f 	bic.w	r3, r3, #15
 800316c:	4a2f      	ldr	r2, [pc, #188]	; (800322c <SystemInit+0xe8>)
 800316e:	f043 0307 	orr.w	r3, r3, #7
 8003172:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <SystemInit+0xec>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <SystemInit+0xec>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <SystemInit+0xec>)
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <SystemInit+0xec>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4929      	ldr	r1, [pc, #164]	; (8003230 <SystemInit+0xec>)
 800318c:	4b29      	ldr	r3, [pc, #164]	; (8003234 <SystemInit+0xf0>)
 800318e:	4013      	ands	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <SystemInit+0xe8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <SystemInit+0xe8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 030f 	bic.w	r3, r3, #15
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <SystemInit+0xe8>)
 80031a8:	f043 0307 	orr.w	r3, r3, #7
 80031ac:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <SystemInit+0xec>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <SystemInit+0xec>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <SystemInit+0xec>)
 80031bc:	2200      	movs	r2, #0
 80031be:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <SystemInit+0xec>)
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <SystemInit+0xf4>)
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <SystemInit+0xec>)
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <SystemInit+0xf8>)
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <SystemInit+0xec>)
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <SystemInit+0xfc>)
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <SystemInit+0xec>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <SystemInit+0xec>)
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <SystemInit+0xfc>)
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <SystemInit+0xec>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <SystemInit+0xec>)
 80031e6:	4a16      	ldr	r2, [pc, #88]	; (8003240 <SystemInit+0xfc>)
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <SystemInit+0xec>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <SystemInit+0xec>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <SystemInit+0xec>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <SystemInit+0xec>)
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <SystemInit+0x100>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <SystemInit+0x104>)
 8003208:	4013      	ands	r3, r2
 800320a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800320e:	d202      	bcs.n	8003216 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <SystemInit+0x108>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <SystemInit+0x10c>)
 8003218:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800321c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00
 800322c:	52002000 	.word	0x52002000
 8003230:	58024400 	.word	0x58024400
 8003234:	eaf6ed7f 	.word	0xeaf6ed7f
 8003238:	02020200 	.word	0x02020200
 800323c:	01ff0000 	.word	0x01ff0000
 8003240:	01010280 	.word	0x01010280
 8003244:	5c001000 	.word	0x5c001000
 8003248:	ffff0000 	.word	0xffff0000
 800324c:	51008108 	.word	0x51008108
 8003250:	52004000 	.word	0x52004000

08003254 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b09a      	sub	sp, #104	; 0x68
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003268:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
 8003284:	615a      	str	r2, [r3, #20]
 8003286:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	222c      	movs	r2, #44	; 0x2c
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f013 fafc 	bl	801688c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003294:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <MX_TIM1_Init+0x154>)
 8003296:	4a45      	ldr	r2, [pc, #276]	; (80033ac <MX_TIM1_Init+0x158>)
 8003298:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 800329a:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <MX_TIM1_Init+0x154>)
 800329c:	224a      	movs	r2, #74	; 0x4a
 800329e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a0:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80032a6:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032a8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80032ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032b4:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032c0:	4839      	ldr	r0, [pc, #228]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032c2:	f00b fe60 	bl	800ef86 <HAL_TIM_Base_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80032cc:	f7fe ff74 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032da:	4619      	mov	r1, r3
 80032dc:	4832      	ldr	r0, [pc, #200]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032de:	f00c fbdb 	bl	800fa98 <HAL_TIM_ConfigClockSource>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80032e8:	f7fe ff66 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032ec:	482e      	ldr	r0, [pc, #184]	; (80033a8 <MX_TIM1_Init+0x154>)
 80032ee:	f00c f957 	bl	800f5a0 <HAL_TIM_PWM_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80032f8:	f7fe ff5e 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003308:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800330c:	4619      	mov	r1, r3
 800330e:	4826      	ldr	r0, [pc, #152]	; (80033a8 <MX_TIM1_Init+0x154>)
 8003310:	f00d f918 	bl	8010544 <HAL_TIMEx_MasterConfigSynchronization>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800331a:	f7fe ff4d 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331e:	2360      	movs	r3, #96	; 0x60
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8003322:	f240 13df 	movw	r3, #479	; 0x1df
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003328:	2300      	movs	r3, #0
 800332a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800332c:	2300      	movs	r3, #0
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800333c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003340:	2200      	movs	r2, #0
 8003342:	4619      	mov	r1, r3
 8003344:	4818      	ldr	r0, [pc, #96]	; (80033a8 <MX_TIM1_Init+0x154>)
 8003346:	f00c fa93 	bl	800f870 <HAL_TIM_PWM_ConfigChannel>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003350:	f7fe ff32 	bl	80021b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4807      	ldr	r0, [pc, #28]	; (80033a8 <MX_TIM1_Init+0x154>)
 800338a:	f00d f969 	bl	8010660 <HAL_TIMEx_ConfigBreakDeadTime>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003394:	f7fe ff10 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <MX_TIM1_Init+0x154>)
 800339a:	f000 f8dd 	bl	8003558 <HAL_TIM_MspPostInit>

}
 800339e:	bf00      	nop
 80033a0:	3768      	adds	r7, #104	; 0x68
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	24001bbc 	.word	0x24001bbc
 80033ac:	40010000 	.word	0x40010000

080033b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08e      	sub	sp, #56	; 0x38
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d0:	463b      	mov	r3, r7
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	611a      	str	r2, [r3, #16]
 80033de:	615a      	str	r2, [r3, #20]
 80033e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033e2:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <MX_TIM2_Init+0xe8>)
 80033e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <MX_TIM2_Init+0xe8>)
 80033ec:	224a      	movs	r2, #74	; 0x4a
 80033ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <MX_TIM2_Init+0xe8>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <MX_TIM2_Init+0xe8>)
 80033f8:	f640 4234 	movw	r2, #3124	; 0xc34
 80033fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <MX_TIM2_Init+0xe8>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <MX_TIM2_Init+0xe8>)
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800340a:	4823      	ldr	r0, [pc, #140]	; (8003498 <MX_TIM2_Init+0xe8>)
 800340c:	f00b fdbb 	bl	800ef86 <HAL_TIM_Base_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003416:	f7fe fecf 	bl	80021b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003424:	4619      	mov	r1, r3
 8003426:	481c      	ldr	r0, [pc, #112]	; (8003498 <MX_TIM2_Init+0xe8>)
 8003428:	f00c fb36 	bl	800fa98 <HAL_TIM_ConfigClockSource>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003432:	f7fe fec1 	bl	80021b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003436:	4818      	ldr	r0, [pc, #96]	; (8003498 <MX_TIM2_Init+0xe8>)
 8003438:	f00c f8b2 	bl	800f5a0 <HAL_TIM_PWM_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003442:	f7fe feb9 	bl	80021b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003446:	2320      	movs	r3, #32
 8003448:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800344e:	f107 031c 	add.w	r3, r7, #28
 8003452:	4619      	mov	r1, r3
 8003454:	4810      	ldr	r0, [pc, #64]	; (8003498 <MX_TIM2_Init+0xe8>)
 8003456:	f00d f875 	bl	8010544 <HAL_TIMEx_MasterConfigSynchronization>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003460:	f7fe feaa 	bl	80021b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003464:	2360      	movs	r3, #96	; 0x60
 8003466:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003474:	463b      	mov	r3, r7
 8003476:	220c      	movs	r2, #12
 8003478:	4619      	mov	r1, r3
 800347a:	4807      	ldr	r0, [pc, #28]	; (8003498 <MX_TIM2_Init+0xe8>)
 800347c:	f00c f9f8 	bl	800f870 <HAL_TIM_PWM_ConfigChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003486:	f7fe fe97 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <MX_TIM2_Init+0xe8>)
 800348c:	f000 f864 	bl	8003558 <HAL_TIM_MspPostInit>

}
 8003490:	bf00      	nop
 8003492:	3738      	adds	r7, #56	; 0x38
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	24001c08 	.word	0x24001c08

0800349c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_TIM_Base_MspInit+0xb4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d12f      	bne.n	800350e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ae:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_TIM_Base_MspInit+0xb8>)
 80034b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b4:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_TIM_Base_MspInit+0xb8>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_TIM_Base_MspInit+0xb8>)
 80034c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2105      	movs	r1, #5
 80034d0:	2018      	movs	r0, #24
 80034d2:	f002 fa25 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80034d6:	2018      	movs	r0, #24
 80034d8:	f002 fa3c 	bl	8005954 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	2105      	movs	r1, #5
 80034e0:	2019      	movs	r0, #25
 80034e2:	f002 fa1d 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034e6:	2019      	movs	r0, #25
 80034e8:	f002 fa34 	bl	8005954 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2105      	movs	r1, #5
 80034f0:	201a      	movs	r0, #26
 80034f2:	f002 fa15 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80034f6:	201a      	movs	r0, #26
 80034f8:	f002 fa2c 	bl	8005954 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2105      	movs	r1, #5
 8003500:	201b      	movs	r0, #27
 8003502:	f002 fa0d 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003506:	201b      	movs	r0, #27
 8003508:	f002 fa24 	bl	8005954 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800350c:	e01b      	b.n	8003546 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d116      	bne.n	8003546 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_TIM_Base_MspInit+0xb8>)
 800351a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <HAL_TIM_Base_MspInit+0xb8>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_TIM_Base_MspInit+0xb8>)
 800352a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2105      	movs	r1, #5
 800353a:	201c      	movs	r0, #28
 800353c:	f002 f9f0 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003540:	201c      	movs	r0, #28
 8003542:	f002 fa07 	bl	8005954 <HAL_NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	58024400 	.word	0x58024400

08003558 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <HAL_TIM_MspPostInit+0xb8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d120      	bne.n	80035bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_TIM_MspPostInit+0xbc>)
 800357c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <HAL_TIM_MspPostInit+0xbc>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_TIM_MspPostInit+0xbc>)
 800358c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4818      	ldr	r0, [pc, #96]	; (8003618 <HAL_TIM_MspPostInit+0xc0>)
 80035b6:	f005 fc29 	bl	8008e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035ba:	e024      	b.n	8003606 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d11f      	bne.n	8003606 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_TIM_MspPostInit+0xbc>)
 80035c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035cc:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_TIM_MspPostInit+0xbc>)
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_TIM_MspPostInit+0xbc>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035f6:	2301      	movs	r3, #1
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4806      	ldr	r0, [pc, #24]	; (800361c <HAL_TIM_MspPostInit+0xc4>)
 8003602:	f005 fc03 	bl	8008e0c <HAL_GPIO_Init>
}
 8003606:	bf00      	nop
 8003608:	3728      	adds	r7, #40	; 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	58024400 	.word	0x58024400
 8003618:	58020000 	.word	0x58020000
 800361c:	58020400 	.word	0x58020400

08003620 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <get_uptime+0x94>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8003632:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <get_uptime+0x98>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <get_uptime+0x94>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	429a      	cmp	r2, r3
 8003640:	d005      	beq.n	800364e <get_uptime+0x2e>
		ms = uptime_millis;
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <get_uptime+0x94>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <get_uptime+0x98>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003654:	fb03 f202 	mul.w	r2, r3, r2
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <get_uptime+0x98>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	3301      	adds	r3, #1
 800365e:	4917      	ldr	r1, [pc, #92]	; (80036bc <get_uptime+0x9c>)
 8003660:	fba1 1303 	umull	r1, r3, r1, r3
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	fbb1 f3f3 	udiv	r3, r1, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <get_uptime+0x5a>
		uptime = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	b2da      	uxtb	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	0c1a      	lsrs	r2, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3301      	adds	r3, #1
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	0a1a      	lsrs	r2, r3, #8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3302      	adds	r3, #2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3303      	adds	r3, #3
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	24001964 	.word	0x24001964
 80036b8:	e000e010 	.word	0xe000e010
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	2200      	movs	r2, #0
 80036ce:	4619      	mov	r1, r3
 80036d0:	4821      	ldr	r0, [pc, #132]	; (8003758 <get_timestamp+0x98>)
 80036d2:	f00a fa45 	bl	800db60 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	2200      	movs	r2, #0
 80036dc:	4619      	mov	r1, r3
 80036de:	481e      	ldr	r0, [pc, #120]	; (8003758 <get_timestamp+0x98>)
 80036e0:	f00a fb22 	bl	800dd28 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2264      	movs	r2, #100	; 0x64
 80036e8:	fb03 f202 	mul.w	r2, r3, r2
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <get_timestamp+0x9c>)
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3301      	adds	r3, #1
 80036fc:	7b7a      	ldrb	r2, [r7, #13]
 80036fe:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3302      	adds	r3, #2
 8003704:	7bba      	ldrb	r2, [r7, #14]
 8003706:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3303      	adds	r3, #3
 800370c:	7c3a      	ldrb	r2, [r7, #16]
 800370e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	7c7a      	ldrb	r2, [r7, #17]
 8003716:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3305      	adds	r3, #5
 800371c:	7cba      	ldrb	r2, [r7, #18]
 800371e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	0e1a      	lsrs	r2, r3, #24
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3306      	adds	r3, #6
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	0c1a      	lsrs	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3307      	adds	r3, #7
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	0a1a      	lsrs	r2, r3, #8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3308      	adds	r3, #8
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3309      	adds	r3, #9
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	24001978 	.word	0x24001978
 800375c:	000f4240 	.word	0x000f4240

08003760 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003764:	4b30      	ldr	r3, [pc, #192]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003766:	4a31      	ldr	r2, [pc, #196]	; (800382c <MX_USART1_UART_Init+0xcc>)
 8003768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800376a:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 800376c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003786:	220c      	movs	r2, #12
 8003788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003798:	2200      	movs	r2, #0
 800379a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800379c:	4b22      	ldr	r3, [pc, #136]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037a2:	4b21      	ldr	r3, [pc, #132]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037a8:	481f      	ldr	r0, [pc, #124]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037aa:	f00c fff5 	bl	8010798 <HAL_UART_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80037b4:	f7fe fd00 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037b8:	2100      	movs	r1, #0
 80037ba:	481b      	ldr	r0, [pc, #108]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037bc:	f00f fd3b 	bl	8013236 <HAL_UARTEx_SetTxFifoThreshold>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80037c6:	f7fe fcf7 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037ca:	2100      	movs	r1, #0
 80037cc:	4816      	ldr	r0, [pc, #88]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037ce:	f00f fd70 	bl	80132b2 <HAL_UARTEx_SetRxFifoThreshold>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80037d8:	f7fe fcee 	bl	80021b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80037dc:	4812      	ldr	r0, [pc, #72]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037de:	f00f fcf1 	bl	80131c4 <HAL_UARTEx_DisableFifoMode>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80037e8:	f7fe fce6 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 80037ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037f2:	f00f fd5e 	bl	80132b2 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 80037f6:	480c      	ldr	r0, [pc, #48]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037f8:	f00f fca9 	bl	801314e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 80037fc:	480a      	ldr	r0, [pc, #40]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 80037fe:	f00f fc73 	bl	80130e8 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003810:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <MX_USART1_UART_Init+0xc8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003820:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	24001c54 	.word	0x24001c54
 800382c:	40011000 	.word	0x40011000

08003830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b0ba      	sub	sp, #232	; 0xe8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	22c0      	movs	r2, #192	; 0xc0
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f013 f81b 	bl	801688c <memset>
  if(uartHandle->Instance==USART1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a41      	ldr	r2, [pc, #260]	; (8003960 <HAL_UART_MspInit+0x130>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d17b      	bne.n	8003958 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003860:	f04f 0201 	mov.w	r2, #1
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800386c:	2318      	movs	r3, #24
 800386e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003872:	f107 0310 	add.w	r3, r7, #16
 8003876:	4618      	mov	r0, r3
 8003878:	f007 fb54 	bl	800af24 <HAL_RCCEx_PeriphCLKConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003882:	f7fe fc99 	bl	80021b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_UART_MspInit+0x134>)
 8003888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800388c:	4a35      	ldr	r2, [pc, #212]	; (8003964 <HAL_UART_MspInit+0x134>)
 800388e:	f043 0310 	orr.w	r3, r3, #16
 8003892:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003896:	4b33      	ldr	r3, [pc, #204]	; (8003964 <HAL_UART_MspInit+0x134>)
 8003898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a4:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_UART_MspInit+0x134>)
 80038a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038aa:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_UART_MspInit+0x134>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_UART_MspInit+0x134>)
 80038b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038dc:	2307      	movs	r3, #7
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038e6:	4619      	mov	r1, r3
 80038e8:	481f      	ldr	r0, [pc, #124]	; (8003968 <HAL_UART_MspInit+0x138>)
 80038ea:	f005 fa8f 	bl	8008e0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_UART_MspInit+0x13c>)
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_UART_MspInit+0x140>)
 80038f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_UART_MspInit+0x13c>)
 80038f6:	222a      	movs	r2, #42	; 0x2a
 80038f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_UART_MspInit+0x13c>)
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003902:	2200      	movs	r2, #0
 8003904:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800390c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003910:	2200      	movs	r2, #0
 8003912:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003916:	2200      	movs	r2, #0
 8003918:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_UART_MspInit+0x13c>)
 800391c:	2200      	movs	r2, #0
 800391e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003922:	2200      	movs	r2, #0
 8003924:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003928:	2200      	movs	r2, #0
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800392c:	480f      	ldr	r0, [pc, #60]	; (800396c <HAL_UART_MspInit+0x13c>)
 800392e:	f002 fc25 	bl	800617c <HAL_DMA_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003938:	f7fe fc3e 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <HAL_UART_MspInit+0x13c>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	2105      	movs	r1, #5
 800394c:	2025      	movs	r0, #37	; 0x25
 800394e:	f001 ffe7 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003952:	2025      	movs	r0, #37	; 0x25
 8003954:	f001 fffe 	bl	8005954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003958:	bf00      	nop
 800395a:	37e8      	adds	r7, #232	; 0xe8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40011000 	.word	0x40011000
 8003964:	58024400 	.word	0x58024400
 8003968:	58020000 	.word	0x58020000
 800396c:	24001ce8 	.word	0x24001ce8
 8003970:	40020040 	.word	0x40020040

08003974 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 800397e:	4bc2      	ldr	r3, [pc, #776]	; (8003c88 <voltage_monitor_init+0x314>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003984:	4bc0      	ldr	r3, [pc, #768]	; (8003c88 <voltage_monitor_init+0x314>)
 8003986:	2200      	movs	r2, #0
 8003988:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800398a:	4bbf      	ldr	r3, [pc, #764]	; (8003c88 <voltage_monitor_init+0x314>)
 800398c:	2201      	movs	r2, #1
 800398e:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003990:	4bbd      	ldr	r3, [pc, #756]	; (8003c88 <voltage_monitor_init+0x314>)
 8003992:	2200      	movs	r2, #0
 8003994:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003996:	4bbc      	ldr	r3, [pc, #752]	; (8003c88 <voltage_monitor_init+0x314>)
 8003998:	f242 7210 	movw	r2, #10000	; 0x2710
 800399c:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 800399e:	4bba      	ldr	r3, [pc, #744]	; (8003c88 <voltage_monitor_init+0x314>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80039a4:	4bb8      	ldr	r3, [pc, #736]	; (8003c88 <voltage_monitor_init+0x314>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80039aa:	4bb7      	ldr	r3, [pc, #732]	; (8003c88 <voltage_monitor_init+0x314>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80039b0:	4bb5      	ldr	r3, [pc, #724]	; (8003c88 <voltage_monitor_init+0x314>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80039b6:	4bb4      	ldr	r3, [pc, #720]	; (8003c88 <voltage_monitor_init+0x314>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80039bc:	4bb2      	ldr	r3, [pc, #712]	; (8003c88 <voltage_monitor_init+0x314>)
 80039be:	f242 7210 	movw	r2, #10000	; 0x2710
 80039c2:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80039c4:	4bb0      	ldr	r3, [pc, #704]	; (8003c88 <voltage_monitor_init+0x314>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80039ca:	4baf      	ldr	r3, [pc, #700]	; (8003c88 <voltage_monitor_init+0x314>)
 80039cc:	2202      	movs	r2, #2
 80039ce:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80039d0:	4bad      	ldr	r3, [pc, #692]	; (8003c88 <voltage_monitor_init+0x314>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80039d6:	4bac      	ldr	r3, [pc, #688]	; (8003c88 <voltage_monitor_init+0x314>)
 80039d8:	2201      	movs	r2, #1
 80039da:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80039dc:	4baa      	ldr	r3, [pc, #680]	; (8003c88 <voltage_monitor_init+0x314>)
 80039de:	2200      	movs	r2, #0
 80039e0:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80039e2:	4ba9      	ldr	r3, [pc, #676]	; (8003c88 <voltage_monitor_init+0x314>)
 80039e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80039e8:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80039ea:	4ba7      	ldr	r3, [pc, #668]	; (8003c88 <voltage_monitor_init+0x314>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80039f0:	4ba5      	ldr	r3, [pc, #660]	; (8003c88 <voltage_monitor_init+0x314>)
 80039f2:	2203      	movs	r2, #3
 80039f4:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80039f6:	4ba4      	ldr	r3, [pc, #656]	; (8003c88 <voltage_monitor_init+0x314>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 80039fc:	4ba2      	ldr	r3, [pc, #648]	; (8003c88 <voltage_monitor_init+0x314>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003a04:	4ba0      	ldr	r3, [pc, #640]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a0a:	4b9f      	ldr	r3, [pc, #636]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a10:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003a12:	4b9d      	ldr	r3, [pc, #628]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003a18:	4b9b      	ldr	r3, [pc, #620]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003a20:	4b99      	ldr	r3, [pc, #612]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003a28:	4b97      	ldr	r3, [pc, #604]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003a30:	4b95      	ldr	r3, [pc, #596]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a36:	4b94      	ldr	r3, [pc, #592]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a38:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003a3e:	4b92      	ldr	r3, [pc, #584]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003a44:	4b90      	ldr	r3, [pc, #576]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a46:	2205      	movs	r2, #5
 8003a48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003a4c:	4b8e      	ldr	r3, [pc, #568]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003a54:	4b8c      	ldr	r3, [pc, #560]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a62:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a64:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a68:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003a6a:	4b87      	ldr	r3, [pc, #540]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003a70:	4b85      	ldr	r3, [pc, #532]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a72:	2206      	movs	r2, #6
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003a78:	4b83      	ldr	r3, [pc, #524]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003a80:	4b81      	ldr	r3, [pc, #516]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003a88:	4b7f      	ldr	r3, [pc, #508]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a90:	4b7d      	ldr	r3, [pc, #500]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a92:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a96:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003a9a:	4b7b      	ldr	r3, [pc, #492]	; (8003c88 <voltage_monitor_init+0x314>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003aa2:	4b79      	ldr	r3, [pc, #484]	; (8003c88 <voltage_monitor_init+0x314>)
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003aaa:	4b77      	ldr	r3, [pc, #476]	; (8003c88 <voltage_monitor_init+0x314>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003ab2:	4b75      	ldr	r3, [pc, #468]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003aba:	4b73      	ldr	r3, [pc, #460]	; (8003c88 <voltage_monitor_init+0x314>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ac2:	4b71      	ldr	r3, [pc, #452]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ac4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ac8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003acc:	4b6e      	ldr	r3, [pc, #440]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003ad4:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003adc:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003ae4:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003aec:	4b66      	ldr	r3, [pc, #408]	; (8003c88 <voltage_monitor_init+0x314>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003af4:	4b64      	ldr	r3, [pc, #400]	; (8003c88 <voltage_monitor_init+0x314>)
 8003af6:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003afa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003afe:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b00:	f640 3283 	movw	r2, #2947	; 0xb83
 8003b04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003b08:	4b5f      	ldr	r3, [pc, #380]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b0a:	2209      	movs	r2, #9
 8003b0c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003b10:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003b18:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003b20:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003b28:	4b57      	ldr	r3, [pc, #348]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b2a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003b2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003b32:	4b55      	ldr	r3, [pc, #340]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003b3a:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b3c:	220a      	movs	r2, #10
 8003b3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003b42:	4b51      	ldr	r3, [pc, #324]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003b4a:	4b4f      	ldr	r3, [pc, #316]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003b52:	4b4d      	ldr	r3, [pc, #308]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003b5a:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b5c:	f640 7245 	movw	r2, #3909	; 0xf45
 8003b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003b64:	4b48      	ldr	r3, [pc, #288]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b66:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003b6a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003b6e:	4b46      	ldr	r3, [pc, #280]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b70:	220b      	movs	r2, #11
 8003b72:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003b76:	4b44      	ldr	r3, [pc, #272]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003b7e:	4b42      	ldr	r3, [pc, #264]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003b8e:	4b3e      	ldr	r3, [pc, #248]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b90:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003b94:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <voltage_monitor_init+0x314>)
 8003b9a:	f640 6276 	movw	r2, #3702	; 0xe76
 8003b9e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <voltage_monitor_init+0x314>)
 8003ba4:	220c      	movs	r2, #12
 8003ba6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003baa:	4b37      	ldr	r3, [pc, #220]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003bb2:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003bba:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003bc2:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bc4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003bc8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003bcc:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bd6:	220d      	movs	r2, #13
 8003bd8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003be4:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <voltage_monitor_init+0x314>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003bec:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003bf4:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <voltage_monitor_init+0x314>)
 8003bf6:	f640 7238 	movw	r2, #3896	; 0xf38
 8003bfa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c00:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003c04:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c0a:	220e      	movs	r2, #14
 8003c0c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003c28:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c2a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003c2e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c34:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003c38:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c3e:	220f      	movs	r2, #15
 8003c40:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c5e:	f241 0264 	movw	r2, #4196	; 0x1064
 8003c62:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c70:	2210      	movs	r2, #16
 8003c72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003c7e:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <voltage_monitor_init+0x314>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003c86:	e001      	b.n	8003c8c <voltage_monitor_init+0x318>
 8003c88:	24001d60 	.word	0x24001d60
	rail_monitor[RAIL_n800v].data = 0;
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <voltage_monitor_init+0x378>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <voltage_monitor_init+0x378>)
 8003c96:	f640 5208 	movw	r2, #3336	; 0xd08
 8003c9a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <voltage_monitor_init+0x378>)
 8003ca0:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003ca4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <voltage_monitor_init+0x378>)
 8003caa:	2211      	movs	r2, #17
 8003cac:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <voltage_monitor_init+0x378>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <voltage_monitor_init+0x378>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <voltage_monitor_init+0x378>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <voltage_monitor_init+0x378>)
 8003cca:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cce:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <voltage_monitor_init+0x378>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	71fb      	strb	r3, [r7, #7]

	return status;
 8003cde:	79fb      	ldrb	r3, [r7, #7]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	24001d60 	.word	0x24001d60

08003cf0 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	71fb      	strb	r3, [r7, #7]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003d04:	79fa      	ldrb	r2, [r7, #7]
 8003d06:	4909      	ldr	r1, [pc, #36]	; (8003d2c <set_rail_monitor_enable+0x3c>)
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	440b      	add	r3, r1
 8003d12:	3302      	adds	r3, #2
 8003d14:	79ba      	ldrb	r2, [r7, #6]
 8003d16:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]

	return status;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	24001d60 	.word	0x24001d60

08003d30 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <get_rail_monitor+0x10>)
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	24001d60 	.word	0x24001d60

08003d44 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003d50:	463b      	mov	r3, r7
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fd70 	bl	8002838 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fd9b 	bl	8002898 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fde8 	bl	800293c <sample_hk_adc3>
 8003d6c:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d70:	809a      	strh	r2, [r3, #4]
 8003d72:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d76:	81da      	strh	r2, [r3, #14]
 8003d78:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003d7a:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d7c:	831a      	strh	r2, [r3, #24]
 8003d7e:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003d80:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d82:	845a      	strh	r2, [r3, #34]	; 0x22
 8003d84:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003d86:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d88:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d90:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003d98:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <set_rail_monitor+0xc0>)
 8003d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8003da0:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <set_rail_monitor+0xc0>)
 8003da4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003da8:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <set_rail_monitor+0xc0>)
 8003dac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8003db0:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <set_rail_monitor+0xc0>)
 8003db4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8003db8:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <set_rail_monitor+0xc0>)
 8003dbc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003dc0:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <set_rail_monitor+0xc0>)
 8003dc4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8003dc8:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <set_rail_monitor+0xc0>)
 8003dcc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003dd0:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <set_rail_monitor+0xc0>)
 8003dd4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8003dd8:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <set_rail_monitor+0xc0>)
 8003ddc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8003de0:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <set_rail_monitor+0xc0>)
 8003de4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003de8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <set_rail_monitor+0xc0>)
 8003dec:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8003df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	24001d60 	.word	0x24001d60

08003e08 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	db05      	blt.n	8003e2a <in_range+0x22>
 8003e1e:	89fb      	ldrh	r3, [r7, #14]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	dc01      	bgt.n	8003e2a <in_range+0x22>
		return 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <in_range+0x24>
	}
	return 0;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e3c:	f7ff f982 	bl	8003144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e40:	480c      	ldr	r0, [pc, #48]	; (8003e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e42:	490d      	ldr	r1, [pc, #52]	; (8003e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e44:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e48:	e002      	b.n	8003e50 <LoopCopyDataInit>

08003e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4e:	3304      	adds	r3, #4

08003e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e54:	d3f9      	bcc.n	8003e4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e5c:	e001      	b.n	8003e62 <LoopFillZerobss>

08003e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e60:	3204      	adds	r2, #4

08003e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e64:	d3fb      	bcc.n	8003e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e66:	f012 fcdf 	bl	8016828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e6a:	f7fd ffcf 	bl	8001e0c <main>
  bx  lr
 8003e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e78:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 8003e7c:	08017758 	.word	0x08017758
  ldr r2, =_sbss
 8003e80:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003e84:	24006778 	.word	0x24006778

08003e88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e88:	e7fe      	b.n	8003e88 <ADC3_IRQHandler>
	...

08003e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e92:	2003      	movs	r0, #3
 8003e94:	f001 fd39 	bl	800590a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e98:	f006 fe2c 	bl	800aaf4 <HAL_RCC_GetSysClockFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_Init+0x68>)
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	4913      	ldr	r1, [pc, #76]	; (8003ef8 <HAL_Init+0x6c>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_Init+0x68>)
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	; (8003ef8 <HAL_Init+0x6c>)
 8003ec0:	5cd3      	ldrb	r3, [r2, r3]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <HAL_Init+0x70>)
 8003ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <HAL_Init+0x74>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ed6:	2005      	movs	r0, #5
 8003ed8:	f7fe ff5a 	bl	8002d90 <HAL_InitTick>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e002      	b.n	8003eec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ee6:	f7fe ff35 	bl	8002d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	080176a4 	.word	0x080176a4
 8003efc:	24000088 	.word	0x24000088
 8003f00:	24000084 	.word	0x24000084

08003f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x20>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x24>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_IncTick+0x24>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	24000090 	.word	0x24000090
 8003f28:	24001e14 	.word	0x24001e14

08003f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_GetTick+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	24001e14 	.word	0x24001e14

08003f44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_GetREVID+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	5c001000 	.word	0x5c001000

08003f5c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	401a      	ands	r2, r3
 8003f70:	4904      	ldr	r1, [pc, #16]	; (8003f84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	58000400 	.word	0x58000400

08003f88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3360      	adds	r3, #96	; 0x60
 8004002:	461a      	mov	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	431a      	orrs	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	611a      	str	r2, [r3, #16]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004062:	b480      	push	{r7}
 8004064:	b087      	sub	sp, #28
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3360      	adds	r3, #96	; 0x60
 8004072:	461a      	mov	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	431a      	orrs	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	601a      	str	r2, [r3, #0]
  }
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040be:	b480      	push	{r7}
 80040c0:	b087      	sub	sp, #28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3330      	adds	r3, #48	; 0x30
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	4413      	add	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	211f      	movs	r1, #31
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	401a      	ands	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	f003 011f 	and.w	r1, r3, #31
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	431a      	orrs	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f023 0203 	bic.w	r2, r3, #3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3314      	adds	r3, #20
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	0e5b      	lsrs	r3, r3, #25
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	4413      	add	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	0d1b      	lsrs	r3, r3, #20
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2107      	movs	r1, #7
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	401a      	ands	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	0d1b      	lsrs	r3, r3, #20
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	431a      	orrs	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0318 	and.w	r3, r3, #24
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80041b8:	40d9      	lsrs	r1, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	400b      	ands	r3, r1
 80041be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	000fffff 	.word	0x000fffff

080041dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 031f 	and.w	r3, r3, #31
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6093      	str	r3, [r2, #8]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	5fffffc0 	.word	0x5fffffc0

0800421c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004230:	d101      	bne.n	8004236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <LL_ADC_EnableInternalRegulator+0x24>)
 8004252:	4013      	ands	r3, r2
 8004254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	6fffffc0 	.word	0x6fffffc0

0800426c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004280:	d101      	bne.n	8004286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <LL_ADC_Enable+0x24>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	7fffffc0 	.word	0x7fffffc0

080042bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <LL_ADC_Disable+0x24>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	f043 0202 	orr.w	r2, r3, #2
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	7fffffc0 	.word	0x7fffffc0

080042e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <LL_ADC_IsEnabled+0x18>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <LL_ADC_IsEnabled+0x1a>
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d101      	bne.n	8004322 <LL_ADC_IsDisableOngoing+0x18>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <LL_ADC_IsDisableOngoing+0x1a>
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <LL_ADC_REG_StartConversion+0x24>)
 800433e:	4013      	ands	r3, r2
 8004340:	f043 0204 	orr.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	7fffffc0 	.word	0x7fffffc0

08004358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d101      	bne.n	8004370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b08      	cmp	r3, #8
 8004390:	d101      	bne.n	8004396 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e18f      	b.n	80046de <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fc fabd 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff19 	bl	800421c <LL_ADC_IsDeepPowerDownEnabled>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff feff 	bl	80041f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ff34 	bl	800426c <LL_ADC_IsInternalRegulatorEnabled>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d114      	bne.n	8004434 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff18 	bl	8004244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004414:	4b87      	ldr	r3, [pc, #540]	; (8004634 <HAL_ADC_Init+0x290>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	4a87      	ldr	r2, [pc, #540]	; (8004638 <HAL_ADC_Init+0x294>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	3301      	adds	r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004426:	e002      	b.n	800442e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3b01      	subs	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f9      	bne.n	8004428 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff17 	bl	800426c <LL_ADC_IsInternalRegulatorEnabled>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	f043 0210 	orr.w	r2, r3, #16
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff77 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 800446a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	f040 8129 	bne.w	80046cc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f040 8125 	bne.w	80046cc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800448a:	f043 0202 	orr.w	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ff24 	bl	80042e4 <LL_ADC_IsEnabled>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d136      	bne.n	8004510 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a65      	ldr	r2, [pc, #404]	; (800463c <HAL_ADC_Init+0x298>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_ADC_Init+0x112>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a63      	ldr	r2, [pc, #396]	; (8004640 <HAL_ADC_Init+0x29c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10e      	bne.n	80044d4 <HAL_ADC_Init+0x130>
 80044b6:	4861      	ldr	r0, [pc, #388]	; (800463c <HAL_ADC_Init+0x298>)
 80044b8:	f7ff ff14 	bl	80042e4 <LL_ADC_IsEnabled>
 80044bc:	4604      	mov	r4, r0
 80044be:	4860      	ldr	r0, [pc, #384]	; (8004640 <HAL_ADC_Init+0x29c>)
 80044c0:	f7ff ff10 	bl	80042e4 <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4323      	orrs	r3, r4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e008      	b.n	80044e6 <HAL_ADC_Init+0x142>
 80044d4:	485b      	ldr	r0, [pc, #364]	; (8004644 <HAL_ADC_Init+0x2a0>)
 80044d6:	f7ff ff05 	bl	80042e4 <LL_ADC_IsEnabled>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d012      	beq.n	8004510 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a53      	ldr	r2, [pc, #332]	; (800463c <HAL_ADC_Init+0x298>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_ADC_Init+0x15a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a51      	ldr	r2, [pc, #324]	; (8004640 <HAL_ADC_Init+0x29c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_Init+0x15e>
 80044fe:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_ADC_Init+0x2a4>)
 8004500:	e000      	b.n	8004504 <HAL_ADC_Init+0x160>
 8004502:	4a52      	ldr	r2, [pc, #328]	; (800464c <HAL_ADC_Init+0x2a8>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f7ff fd3c 	bl	8003f88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004510:	f7ff fd18 	bl	8003f44 <HAL_GetREVID>
 8004514:	4603      	mov	r3, r0
 8004516:	f241 0203 	movw	r2, #4099	; 0x1003
 800451a:	4293      	cmp	r3, r2
 800451c:	d914      	bls.n	8004548 <HAL_ADC_Init+0x1a4>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b10      	cmp	r3, #16
 8004524:	d110      	bne.n	8004548 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7d5b      	ldrb	r3, [r3, #21]
 800452a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004530:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004536:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7f1b      	ldrb	r3, [r3, #28]
 800453c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800453e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004540:	f043 030c 	orr.w	r3, r3, #12
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e00d      	b.n	8004564 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	7d5b      	ldrb	r3, [r3, #21]
 800454c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004552:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004558:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	7f1b      	ldrb	r3, [r3, #28]
 800455e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7f1b      	ldrb	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	3b01      	subs	r3, #1
 8004572:	045b      	lsls	r3, r3, #17
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_ADC_Init+0x2ac>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	69b9      	ldr	r1, [r7, #24]
 80045a6:	430b      	orrs	r3, r1
 80045a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fed2 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 80045b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fedf 	bl	800437e <LL_ADC_INJ_IsConversionOngoing>
 80045c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d15f      	bne.n	8004688 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d15c      	bne.n	8004688 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7d1b      	ldrb	r3, [r3, #20]
 80045d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <HAL_ADC_Init+0x2b0>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d130      	bne.n	800465c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_ADC_Init+0x2b4>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800460e:	3a01      	subs	r2, #1
 8004610:	0411      	lsls	r1, r2, #16
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004616:	4311      	orrs	r1, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800461c:	4311      	orrs	r1, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004622:	430a      	orrs	r2, r1
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	611a      	str	r2, [r3, #16]
 8004630:	e01c      	b.n	800466c <HAL_ADC_Init+0x2c8>
 8004632:	bf00      	nop
 8004634:	24000084 	.word	0x24000084
 8004638:	053e2d63 	.word	0x053e2d63
 800463c:	40022000 	.word	0x40022000
 8004640:	40022100 	.word	0x40022100
 8004644:	58026000 	.word	0x58026000
 8004648:	40022300 	.word	0x40022300
 800464c:	58026300 	.word	0x58026300
 8004650:	fff0c003 	.word	0xfff0c003
 8004654:	ffffbffc 	.word	0xffffbffc
 8004658:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fdec 	bl	8005260 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10c      	bne.n	80046aa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f023 010f 	bic.w	r1, r3, #15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
 80046a8:	e007      	b.n	80046ba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 020f 	bic.w	r2, r2, #15
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
 80046ca:	e007      	b.n	80046dc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	f043 0210 	orr.w	r2, r3, #16
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop

080046e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a55      	ldr	r2, [pc, #340]	; (8004850 <HAL_ADC_Start_DMA+0x168>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_ADC_Start_DMA+0x20>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a54      	ldr	r2, [pc, #336]	; (8004854 <HAL_ADC_Start_DMA+0x16c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_ADC_Start_DMA+0x24>
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_ADC_Start_DMA+0x170>)
 800470a:	e000      	b.n	800470e <HAL_ADC_Start_DMA+0x26>
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_ADC_Start_DMA+0x174>)
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fd64 	bl	80041dc <LL_ADC_GetMultimode>
 8004714:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fe1c 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 808c 	bne.w	8004840 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_ADC_Start_DMA+0x4e>
 8004732:	2302      	movs	r3, #2
 8004734:	e087      	b.n	8004846 <HAL_ADC_Start_DMA+0x15e>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b05      	cmp	r3, #5
 8004748:	d002      	beq.n	8004750 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b09      	cmp	r3, #9
 800474e:	d170      	bne.n	8004832 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fc07 	bl	8004f64 <ADC_Enable>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d163      	bne.n	8004828 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004764:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_ADC_Start_DMA+0x178>)
 8004766:	4013      	ands	r3, r2
 8004768:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a37      	ldr	r2, [pc, #220]	; (8004854 <HAL_ADC_Start_DMA+0x16c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d002      	beq.n	8004780 <HAL_ADC_Start_DMA+0x98>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	e000      	b.n	8004782 <HAL_ADC_Start_DMA+0x9a>
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_ADC_Start_DMA+0x168>)
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	4293      	cmp	r3, r2
 8004788:	d002      	beq.n	8004790 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f023 0206 	bic.w	r2, r3, #6
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	659a      	str	r2, [r3, #88]	; 0x58
 80047b4:	e002      	b.n	80047bc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <HAL_ADC_Start_DMA+0x17c>)
 80047c2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <HAL_ADC_Start_DMA+0x180>)
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <HAL_ADC_Start_DMA+0x184>)
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	221c      	movs	r2, #28
 80047da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0210 	orr.w	r2, r2, #16
 80047f2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7ff fc89 	bl	8004116 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3340      	adds	r3, #64	; 0x40
 800480e:	4619      	mov	r1, r3
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f002 f80e 	bl	8006834 <HAL_DMA_Start_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fd85 	bl	8004330 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004826:	e00d      	b.n	8004844 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004830:	e008      	b.n	8004844 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800483e:	e001      	b.n	8004844 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40022000 	.word	0x40022000
 8004854:	40022100 	.word	0x40022100
 8004858:	40022300 	.word	0x40022300
 800485c:	58026300 	.word	0x58026300
 8004860:	fffff0fe 	.word	0xfffff0fe
 8004864:	08005137 	.word	0x08005137
 8004868:	0800520f 	.word	0x0800520f
 800486c:	0800522b 	.word	0x0800522b

08004870 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b0a1      	sub	sp, #132	; 0x84
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4a65      	ldr	r2, [pc, #404]	; (8004a5c <HAL_ADC_ConfigChannel+0x1b0>)
 80048c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x2a>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e32e      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x688>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fd38 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8313 	bne.w	8004f16 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db2c      	blt.n	8004952 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x6a>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2201      	movs	r2, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	e016      	b.n	8004944 <HAL_ADC_ConfigChannel+0x98>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004926:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800492e:	2320      	movs	r3, #32
 8004930:	e003      	b.n	800493a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004934:	fab3 f383 	clz	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2201      	movs	r2, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	69d1      	ldr	r1, [r2, #28]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	430b      	orrs	r3, r1
 8004950:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f7ff fbad 	bl	80040be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fcf5 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 800496e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fd02 	bl	800437e <LL_ADC_INJ_IsConversionOngoing>
 800497a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800497c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 80b8 	bne.w	8004af4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 80b4 	bne.w	8004af4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	461a      	mov	r2, r3
 800499a:	f7ff fbcf 	bl	800413c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800499e:	4b30      	ldr	r3, [pc, #192]	; (8004a60 <HAL_ADC_ConfigChannel+0x1b4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049aa:	d10b      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x118>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	e01d      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x154>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x13e>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	e00a      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x154>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	089b      	lsrs	r3, r3, #2
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d02c      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6919      	ldr	r1, [r3, #16]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a18:	f7ff faea 	bl	8003ff0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6919      	ldr	r1, [r3, #16]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	7e5b      	ldrb	r3, [r3, #25]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x186>
 8004a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a30:	e000      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x188>
 8004a32:	2300      	movs	r3, #0
 8004a34:	461a      	mov	r2, r3
 8004a36:	f7ff fb14 	bl	8004062 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6919      	ldr	r1, [r3, #16]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	7e1b      	ldrb	r3, [r3, #24]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d102      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x1a4>
 8004a4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a4e:	e000      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x1a6>
 8004a50:	2300      	movs	r3, #0
 8004a52:	461a      	mov	r2, r3
 8004a54:	f7ff faec 	bl	8004030 <LL_ADC_SetDataRightShift>
 8004a58:	e04c      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x248>
 8004a5a:	bf00      	nop
 8004a5c:	47ff0000 	.word	0x47ff0000
 8004a60:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	069b      	lsls	r3, r3, #26
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d107      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a86:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	069b      	lsls	r3, r3, #26
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d107      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004aaa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	069b      	lsls	r3, r3, #26
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d107      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ace:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	069b      	lsls	r3, r3, #26
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d107      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004af2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff fbf3 	bl	80042e4 <LL_ADC_IsEnabled>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 8211 	bne.w	8004f28 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f7ff fb3e 	bl	8004194 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4aa1      	ldr	r2, [pc, #644]	; (8004da4 <HAL_ADC_ConfigChannel+0x4f8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f040 812e 	bne.w	8004d80 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x2a0>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0e9b      	lsrs	r3, r3, #26
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e019      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x2d4>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b54:	fa93 f3a3 	rbit	r3, r3
 8004b58:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004b64:	2320      	movs	r3, #32
 8004b66:	e003      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	2b09      	cmp	r3, #9
 8004b78:	bf94      	ite	ls
 8004b7a:	2301      	movls	r3, #1
 8004b7c:	2300      	movhi	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d079      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x2f4>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	069b      	lsls	r3, r3, #26
 8004b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b9e:	e015      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x320>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x340>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	3301      	adds	r3, #1
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	e017      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x370>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e003      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2101      	movs	r1, #1
 8004c18:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1c:	ea42 0103 	orr.w	r1, r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x396>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	3301      	adds	r3, #1
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	051b      	lsls	r3, r3, #20
 8004c40:	e018      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x3c8>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	e003      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c74:	430b      	orrs	r3, r1
 8004c76:	e07e      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x3e8>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	069b      	lsls	r3, r3, #26
 8004c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c92:	e015      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x414>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004cac:	2320      	movs	r3, #32
 8004cae:	e003      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	069b      	lsls	r3, r3, #26
 8004cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x434>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	e017      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x464>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	61bb      	str	r3, [r7, #24]
  return result;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	e003      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	fab3 f383 	clz	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	ea42 0103 	orr.w	r1, r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x490>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e9b      	lsrs	r3, r3, #26
 8004d26:	3301      	adds	r3, #1
 8004d28:	f003 021f 	and.w	r2, r3, #31
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	3b1e      	subs	r3, #30
 8004d34:	051b      	lsls	r3, r3, #20
 8004d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	e01b      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x4c8>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
  return result;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004d54:	2320      	movs	r3, #32
 8004d56:	e003      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	f003 021f 	and.w	r2, r3, #31
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3b1e      	subs	r3, #30
 8004d6e:	051b      	lsls	r3, r3, #20
 8004d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d74:	430b      	orrs	r3, r1
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	6892      	ldr	r2, [r2, #8]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f7ff f9de 	bl	800413c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f280 80cf 	bge.w	8004f28 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <HAL_ADC_ConfigChannel+0x4fc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_ADC_ConfigChannel+0x4f2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <HAL_ADC_ConfigChannel+0x500>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10a      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x508>
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <HAL_ADC_ConfigChannel+0x504>)
 8004da0:	e009      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x50a>
 8004da2:	bf00      	nop
 8004da4:	47ff0000 	.word	0x47ff0000
 8004da8:	40022000 	.word	0x40022000
 8004dac:	40022100 	.word	0x40022100
 8004db0:	40022300 	.word	0x40022300
 8004db4:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <HAL_ADC_ConfigChannel+0x690>)
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff f90c 	bl	8003fd4 <LL_ADC_GetCommonPathInternalCh>
 8004dbc:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a5f      	ldr	r2, [pc, #380]	; (8004f40 <HAL_ADC_ConfigChannel+0x694>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_ADC_ConfigChannel+0x526>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5d      	ldr	r2, [pc, #372]	; (8004f44 <HAL_ADC_ConfigChannel+0x698>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10e      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x544>
 8004dd2:	485b      	ldr	r0, [pc, #364]	; (8004f40 <HAL_ADC_ConfigChannel+0x694>)
 8004dd4:	f7ff fa86 	bl	80042e4 <LL_ADC_IsEnabled>
 8004dd8:	4604      	mov	r4, r0
 8004dda:	485a      	ldr	r0, [pc, #360]	; (8004f44 <HAL_ADC_ConfigChannel+0x698>)
 8004ddc:	f7ff fa82 	bl	80042e4 <LL_ADC_IsEnabled>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4323      	orrs	r3, r4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e008      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x556>
 8004df0:	4855      	ldr	r0, [pc, #340]	; (8004f48 <HAL_ADC_ConfigChannel+0x69c>)
 8004df2:	f7ff fa77 	bl	80042e4 <LL_ADC_IsEnabled>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d07d      	beq.n	8004f02 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a50      	ldr	r2, [pc, #320]	; (8004f4c <HAL_ADC_ConfigChannel+0x6a0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d130      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x5c6>
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d12b      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4a      	ldr	r2, [pc, #296]	; (8004f48 <HAL_ADC_ConfigChannel+0x69c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	f040 8081 	bne.w	8004f28 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a45      	ldr	r2, [pc, #276]	; (8004f40 <HAL_ADC_ConfigChannel+0x694>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_ADC_ConfigChannel+0x58e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a43      	ldr	r2, [pc, #268]	; (8004f44 <HAL_ADC_ConfigChannel+0x698>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x592>
 8004e3a:	4a45      	ldr	r2, [pc, #276]	; (8004f50 <HAL_ADC_ConfigChannel+0x6a4>)
 8004e3c:	e000      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x594>
 8004e3e:	4a3f      	ldr	r2, [pc, #252]	; (8004f3c <HAL_ADC_ConfigChannel+0x690>)
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7ff f8b0 	bl	8003fae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e4e:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_ADC_ConfigChannel+0x6a8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	4a40      	ldr	r2, [pc, #256]	; (8004f58 <HAL_ADC_ConfigChannel+0x6ac>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e62:	e002      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f9      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e70:	e05a      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a39      	ldr	r2, [pc, #228]	; (8004f5c <HAL_ADC_ConfigChannel+0x6b0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d11e      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x60e>
 8004e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d119      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <HAL_ADC_ConfigChannel+0x69c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d14b      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <HAL_ADC_ConfigChannel+0x694>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_ADC_ConfigChannel+0x5f8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a29      	ldr	r2, [pc, #164]	; (8004f44 <HAL_ADC_ConfigChannel+0x698>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x5fc>
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x5fe>
 8004ea8:	4a24      	ldr	r2, [pc, #144]	; (8004f3c <HAL_ADC_ConfigChannel+0x690>)
 8004eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7ff f87b 	bl	8003fae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eb8:	e036      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a28      	ldr	r2, [pc, #160]	; (8004f60 <HAL_ADC_ConfigChannel+0x6b4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d131      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
 8004ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d12c      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <HAL_ADC_ConfigChannel+0x69c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d127      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_ADC_ConfigChannel+0x694>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_ADC_ConfigChannel+0x640>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_ADC_ConfigChannel+0x698>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x644>
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_ADC_ConfigChannel+0x6a4>)
 8004eee:	e000      	b.n	8004ef2 <HAL_ADC_ConfigChannel+0x646>
 8004ef0:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <HAL_ADC_ConfigChannel+0x690>)
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f7ff f857 	bl	8003fae <LL_ADC_SetCommonPathInternalCh>
 8004f00:	e012      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f14:	e008      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3784      	adds	r7, #132	; 0x84
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	58026300 	.word	0x58026300
 8004f40:	40022000 	.word	0x40022000
 8004f44:	40022100 	.word	0x40022100
 8004f48:	58026000 	.word	0x58026000
 8004f4c:	cb840000 	.word	0xcb840000
 8004f50:	40022300 	.word	0x40022300
 8004f54:	24000084 	.word	0x24000084
 8004f58:	053e2d63 	.word	0x053e2d63
 8004f5c:	c7520000 	.word	0xc7520000
 8004f60:	cfb80000 	.word	0xcfb80000

08004f64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff f9b7 	bl	80042e4 <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d16e      	bne.n	800505a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	4b38      	ldr	r3, [pc, #224]	; (8005064 <ADC_Enable+0x100>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f043 0210 	orr.w	r2, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	f043 0201 	orr.w	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e05a      	b.n	800505c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff f972 	bl	8004294 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fb0:	f7fe ffbc 	bl	8003f2c <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <ADC_Enable+0x104>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <ADC_Enable+0x66>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a29      	ldr	r2, [pc, #164]	; (800506c <ADC_Enable+0x108>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <ADC_Enable+0x6a>
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <ADC_Enable+0x10c>)
 8004fcc:	e000      	b.n	8004fd0 <ADC_Enable+0x6c>
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <ADC_Enable+0x110>)
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff f903 	bl	80041dc <LL_ADC_GetMultimode>
 8004fd6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	; (800506c <ADC_Enable+0x108>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d002      	beq.n	8004fe8 <ADC_Enable+0x84>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <ADC_Enable+0x86>
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <ADC_Enable+0x104>)
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d02c      	beq.n	800504c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d130      	bne.n	800505a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ff8:	e028      	b.n	800504c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff f970 	bl	80042e4 <LL_ADC_IsEnabled>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff f940 	bl	8004294 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005014:	f7fe ff8a 	bl	8003f2c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d914      	bls.n	800504c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b01      	cmp	r3, #1
 800502e:	d00d      	beq.n	800504c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	f043 0201 	orr.w	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e007      	b.n	800505c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d1cf      	bne.n	8004ffa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	8000003f 	.word	0x8000003f
 8005068:	40022000 	.word	0x40022000
 800506c:	40022100 	.word	0x40022100
 8005070:	40022300 	.word	0x40022300
 8005074:	58026300 	.word	0x58026300

08005078 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff f940 	bl	800430a <LL_ADC_IsDisableOngoing>
 800508a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff f927 	bl	80042e4 <LL_ADC_IsEnabled>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d047      	beq.n	800512c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d144      	bne.n	800512c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030d 	and.w	r3, r3, #13
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10c      	bne.n	80050ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff f901 	bl	80042bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2203      	movs	r2, #3
 80050c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050c2:	f7fe ff33 	bl	8003f2c <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050c8:	e029      	b.n	800511e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0210 	orr.w	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e023      	b.n	800512e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050e6:	f7fe ff21 	bl	8003f2c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d914      	bls.n	800511e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f043 0210 	orr.w	r2, r3, #16
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	f043 0201 	orr.w	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e007      	b.n	800512e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1dc      	bne.n	80050e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800514c:	2b00      	cmp	r3, #0
 800514e:	d14b      	bne.n	80051e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe ff92 	bl	8004098 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d032      	beq.n	80051e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d12b      	bne.n	80051e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11f      	bne.n	80051e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
 80051ac:	e018      	b.n	80051e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	f043 0201 	orr.w	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff fb45 	bl	8004870 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051e6:	e00e      	b.n	8005206 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7ff fb4f 	bl	8004898 <HAL_ADC_ErrorCallback>
}
 80051fa:	e004      	b.n	8005206 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff fb31 	bl	8004884 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	f043 0204 	orr.w	r2, r3, #4
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fb21 	bl	8004898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a7a      	ldr	r2, [pc, #488]	; (8005458 <ADC_ConfigureBoostMode+0x1f8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <ADC_ConfigureBoostMode+0x1c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a79      	ldr	r2, [pc, #484]	; (800545c <ADC_ConfigureBoostMode+0x1fc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d109      	bne.n	8005290 <ADC_ConfigureBoostMode+0x30>
 800527c:	4b78      	ldr	r3, [pc, #480]	; (8005460 <ADC_ConfigureBoostMode+0x200>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005284:	2b00      	cmp	r3, #0
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e008      	b.n	80052a2 <ADC_ConfigureBoostMode+0x42>
 8005290:	4b74      	ldr	r3, [pc, #464]	; (8005464 <ADC_ConfigureBoostMode+0x204>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01c      	beq.n	80052e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80052a6:	f005 fd9f 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 80052aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052b4:	d010      	beq.n	80052d8 <ADC_ConfigureBoostMode+0x78>
 80052b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052ba:	d873      	bhi.n	80053a4 <ADC_ConfigureBoostMode+0x144>
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c0:	d002      	beq.n	80052c8 <ADC_ConfigureBoostMode+0x68>
 80052c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c6:	d16d      	bne.n	80053a4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	60fb      	str	r3, [r7, #12]
        break;
 80052d6:	e068      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	60fb      	str	r3, [r7, #12]
        break;
 80052de:	e064      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	f007 f826 	bl	800c338 <HAL_RCCEx_GetPeriphCLKFreq>
 80052ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052f6:	d051      	beq.n	800539c <ADC_ConfigureBoostMode+0x13c>
 80052f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052fc:	d854      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 80052fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005302:	d047      	beq.n	8005394 <ADC_ConfigureBoostMode+0x134>
 8005304:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005308:	d84e      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 800530a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800530e:	d03d      	beq.n	800538c <ADC_ConfigureBoostMode+0x12c>
 8005310:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005314:	d848      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 8005316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800531a:	d033      	beq.n	8005384 <ADC_ConfigureBoostMode+0x124>
 800531c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005320:	d842      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 8005322:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005326:	d029      	beq.n	800537c <ADC_ConfigureBoostMode+0x11c>
 8005328:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800532c:	d83c      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 800532e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005332:	d01a      	beq.n	800536a <ADC_ConfigureBoostMode+0x10a>
 8005334:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005338:	d836      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 800533a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800533e:	d014      	beq.n	800536a <ADC_ConfigureBoostMode+0x10a>
 8005340:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005344:	d830      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 8005346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534a:	d00e      	beq.n	800536a <ADC_ConfigureBoostMode+0x10a>
 800534c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005350:	d82a      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 8005352:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005356:	d008      	beq.n	800536a <ADC_ConfigureBoostMode+0x10a>
 8005358:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800535c:	d824      	bhi.n	80053a8 <ADC_ConfigureBoostMode+0x148>
 800535e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005362:	d002      	beq.n	800536a <ADC_ConfigureBoostMode+0x10a>
 8005364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005368:	d11e      	bne.n	80053a8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	0c9b      	lsrs	r3, r3, #18
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	60fb      	str	r3, [r7, #12]
        break;
 800537a:	e016      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	60fb      	str	r3, [r7, #12]
        break;
 8005382:	e012      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	60fb      	str	r3, [r7, #12]
        break;
 800538a:	e00e      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	60fb      	str	r3, [r7, #12]
        break;
 8005392:	e00a      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	09db      	lsrs	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
        break;
 800539a:	e006      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	60fb      	str	r3, [r7, #12]
        break;
 80053a2:	e002      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
        break;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80053a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80053aa:	f7fe fdcb 	bl	8003f44 <HAL_GetREVID>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d815      	bhi.n	80053e4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <ADC_ConfigureBoostMode+0x208>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d908      	bls.n	80053d2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80053d0:	e03e      	b.n	8005450 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	e035      	b.n	8005450 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <ADC_ConfigureBoostMode+0x20c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d808      	bhi.n	8005404 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005400:	609a      	str	r2, [r3, #8]
}
 8005402:	e025      	b.n	8005450 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <ADC_ConfigureBoostMode+0x210>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d80a      	bhi.n	8005422 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	e016      	b.n	8005450 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a13      	ldr	r2, [pc, #76]	; (8005474 <ADC_ConfigureBoostMode+0x214>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d80a      	bhi.n	8005440 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543c:	609a      	str	r2, [r3, #8]
}
 800543e:	e007      	b.n	8005450 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800544e:	609a      	str	r2, [r3, #8]
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40022000 	.word	0x40022000
 800545c:	40022100 	.word	0x40022100
 8005460:	40022300 	.word	0x40022300
 8005464:	58026300 	.word	0x58026300
 8005468:	01312d00 	.word	0x01312d00
 800546c:	005f5e10 	.word	0x005f5e10
 8005470:	00bebc20 	.word	0x00bebc20
 8005474:	017d7840 	.word	0x017d7840

08005478 <LL_ADC_IsEnabled>:
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <LL_ADC_IsEnabled+0x18>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <LL_ADC_IsEnabled+0x1a>
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <LL_ADC_StartCalibration>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <LL_ADC_StartCalibration+0x38>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054c0:	430a      	orrs	r2, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	3ffeffc0 	.word	0x3ffeffc0

080054dc <LL_ADC_IsCalibrationOnGoing>:
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f0:	d101      	bne.n	80054f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_ADC_REG_IsConversionOngoing>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d101      	bne.n	800551c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_ADCEx_Calibration_Start+0x1e>
 8005546:	2302      	movs	r3, #2
 8005548:	e04c      	b.n	80055e4 <HAL_ADCEx_Calibration_Start+0xb8>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff fd90 	bl	8005078 <ADC_Disable>
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d135      	bne.n	80055ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005566:	4b21      	ldr	r3, [pc, #132]	; (80055ec <HAL_ADCEx_Calibration_Start+0xc0>)
 8005568:	4013      	ands	r3, r2
 800556a:	f043 0202 	orr.w	r2, r3, #2
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff90 	bl	80054a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005580:	e014      	b.n	80055ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3301      	adds	r3, #1
 8005586:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d30d      	bcc.n	80055ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	f023 0312 	bic.w	r3, r3, #18
 8005598:	f043 0210 	orr.w	r2, r3, #16
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e01b      	b.n	80055e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff93 	bl	80054dc <LL_ADC_IsCalibrationOnGoing>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e2      	bne.n	8005582 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	f023 0303 	bic.w	r3, r3, #3
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
 80055cc:	e005      	b.n	80055da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f043 0210 	orr.w	r2, r3, #16
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	ffffeefd 	.word	0xffffeefd
 80055f0:	25c3f800 	.word	0x25c3f800

080055f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b09f      	sub	sp, #124	; 0x7c
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800560e:	2302      	movs	r3, #2
 8005610:	e0be      	b.n	8005790 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800561e:	2300      	movs	r3, #0
 8005620:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5c      	ldr	r2, [pc, #368]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d102      	bne.n	8005632 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800562c:	4b5b      	ldr	r3, [pc, #364]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	e001      	b.n	8005636 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e09d      	b.n	8005790 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff54 	bl	8005504 <LL_ADC_REG_IsConversionOngoing>
 800565c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff ff4e 	bl	8005504 <LL_ADC_REG_IsConversionOngoing>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d17f      	bne.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800566e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005670:	2b00      	cmp	r3, #0
 8005672:	d17c      	bne.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a47      	ldr	r2, [pc, #284]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a46      	ldr	r2, [pc, #280]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d101      	bne.n	800568c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005688:	4b45      	ldr	r3, [pc, #276]	; (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800568a:	e000      	b.n	800568e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800568c:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800568e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d039      	beq.n	800570c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a38      	ldr	r2, [pc, #224]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d10e      	bne.n	80056dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80056be:	4836      	ldr	r0, [pc, #216]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056c0:	f7ff feda 	bl	8005478 <LL_ADC_IsEnabled>
 80056c4:	4604      	mov	r4, r0
 80056c6:	4835      	ldr	r0, [pc, #212]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056c8:	f7ff fed6 	bl	8005478 <LL_ADC_IsEnabled>
 80056cc:	4603      	mov	r3, r0
 80056ce:	4323      	orrs	r3, r4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e008      	b.n	80056ee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80056dc:	4832      	ldr	r0, [pc, #200]	; (80057a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80056de:	f7ff fecb 	bl	8005478 <LL_ADC_IsEnabled>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d047      	beq.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	4b2d      	ldr	r3, [pc, #180]	; (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	6811      	ldr	r1, [r2, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	6892      	ldr	r2, [r2, #8]
 8005702:	430a      	orrs	r2, r1
 8005704:	431a      	orrs	r2, r3
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800570a:	e03a      	b.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d10e      	bne.n	800574a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800572c:	481a      	ldr	r0, [pc, #104]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800572e:	f7ff fea3 	bl	8005478 <LL_ADC_IsEnabled>
 8005732:	4604      	mov	r4, r0
 8005734:	4819      	ldr	r0, [pc, #100]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005736:	f7ff fe9f 	bl	8005478 <LL_ADC_IsEnabled>
 800573a:	4603      	mov	r3, r0
 800573c:	4323      	orrs	r3, r4
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf0c      	ite	eq
 8005742:	2301      	moveq	r3, #1
 8005744:	2300      	movne	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e008      	b.n	800575c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800574a:	4817      	ldr	r0, [pc, #92]	; (80057a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800574c:	f7ff fe94 	bl	8005478 <LL_ADC_IsEnabled>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d010      	beq.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	4b11      	ldr	r3, [pc, #68]	; (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005766:	4013      	ands	r3, r2
 8005768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800576a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800576c:	e009      	b.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005780:	e000      	b.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005782:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800578c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005790:	4618      	mov	r0, r3
 8005792:	377c      	adds	r7, #124	; 0x7c
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}
 8005798:	40022000 	.word	0x40022000
 800579c:	40022100 	.word	0x40022100
 80057a0:	40022300 	.word	0x40022300
 80057a4:	58026300 	.word	0x58026300
 80057a8:	58026000 	.word	0x58026000
 80057ac:	fffff0e0 	.word	0xfffff0e0

080057b0 <__NVIC_SetPriorityGrouping>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <__NVIC_SetPriorityGrouping+0x40>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057cc:	4013      	ands	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <__NVIC_SetPriorityGrouping+0x44>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <__NVIC_SetPriorityGrouping+0x40>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	60d3      	str	r3, [r2, #12]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	e000ed00 	.word	0xe000ed00
 80057f4:	05fa0000 	.word	0x05fa0000

080057f8 <__NVIC_GetPriorityGrouping>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <__NVIC_GetPriorityGrouping+0x18>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	f003 0307 	and.w	r3, r3, #7
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	e000ed00 	.word	0xe000ed00

08005814 <__NVIC_EnableIRQ>:
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800581e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	db0b      	blt.n	800583e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	f003 021f 	and.w	r2, r3, #31
 800582c:	4907      	ldr	r1, [pc, #28]	; (800584c <__NVIC_EnableIRQ+0x38>)
 800582e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2001      	movs	r0, #1
 8005836:	fa00 f202 	lsl.w	r2, r0, r2
 800583a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	e000e100 	.word	0xe000e100

08005850 <__NVIC_SetPriority>:
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	6039      	str	r1, [r7, #0]
 800585a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800585c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005860:	2b00      	cmp	r3, #0
 8005862:	db0a      	blt.n	800587a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	490c      	ldr	r1, [pc, #48]	; (800589c <__NVIC_SetPriority+0x4c>)
 800586a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800586e:	0112      	lsls	r2, r2, #4
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	440b      	add	r3, r1
 8005874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005878:	e00a      	b.n	8005890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4908      	ldr	r1, [pc, #32]	; (80058a0 <__NVIC_SetPriority+0x50>)
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	3b04      	subs	r3, #4
 8005888:	0112      	lsls	r2, r2, #4
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	440b      	add	r3, r1
 800588e:	761a      	strb	r2, [r3, #24]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	e000e100 	.word	0xe000e100
 80058a0:	e000ed00 	.word	0xe000ed00

080058a4 <NVIC_EncodePriority>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	; 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f1c3 0307 	rsb	r3, r3, #7
 80058be:	2b04      	cmp	r3, #4
 80058c0:	bf28      	it	cs
 80058c2:	2304      	movcs	r3, #4
 80058c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d902      	bls.n	80058d4 <NVIC_EncodePriority+0x30>
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	3b03      	subs	r3, #3
 80058d2:	e000      	b.n	80058d6 <NVIC_EncodePriority+0x32>
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43da      	mvns	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	401a      	ands	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	43d9      	mvns	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058fc:	4313      	orrs	r3, r2
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3724      	adds	r7, #36	; 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff ff4c 	bl	80057b0 <__NVIC_SetPriorityGrouping>
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800592e:	f7ff ff63 	bl	80057f8 <__NVIC_GetPriorityGrouping>
 8005932:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f7ff ffb3 	bl	80058a4 <NVIC_EncodePriority>
 800593e:	4602      	mov	r2, r0
 8005940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff82 	bl	8005850 <__NVIC_SetPriority>
}
 800594c:	bf00      	nop
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800595e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff56 	bl	8005814 <__NVIC_EnableIRQ>
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e014      	b.n	80059ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	791b      	ldrb	r3, [r3, #4]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb f926 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e046      	b.n	8005a56 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	795b      	ldrb	r3, [r3, #5]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_DAC_Start+0x20>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e040      	b.n	8005a56 <HAL_DAC_Start+0xa2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6819      	ldr	r1, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2201      	movs	r2, #1
 80059ee:	409a      	lsls	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d11d      	bne.n	8005a48 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	e014      	b.n	8005a48 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2102      	movs	r1, #2
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d107      	bne.n	8005a48 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0202 	orr.w	r2, r2, #2
 8005a46:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0a2      	b.n	8005bc2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	795b      	ldrb	r3, [r3, #5]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_DAC_Start_DMA+0x24>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e09c      	b.n	8005bc2 <HAL_DAC_Start_DMA+0x15e>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2202      	movs	r2, #2
 8005a92:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d129      	bne.n	8005aee <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	4a4b      	ldr	r2, [pc, #300]	; (8005bcc <HAL_DAC_Start_DMA+0x168>)
 8005aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4a4a      	ldr	r2, [pc, #296]	; (8005bd0 <HAL_DAC_Start_DMA+0x16c>)
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4a49      	ldr	r2, [pc, #292]	; (8005bd4 <HAL_DAC_Start_DMA+0x170>)
 8005ab0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DAC_Start_DMA+0x6c>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d005      	beq.n	8005ada <HAL_DAC_Start_DMA+0x76>
 8005ace:	e009      	b.n	8005ae4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	613b      	str	r3, [r7, #16]
        break;
 8005ad8:	e033      	b.n	8005b42 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	613b      	str	r3, [r7, #16]
        break;
 8005ae2:	e02e      	b.n	8005b42 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3310      	adds	r3, #16
 8005aea:	613b      	str	r3, [r7, #16]
        break;
 8005aec:	e029      	b.n	8005b42 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	4a39      	ldr	r2, [pc, #228]	; (8005bd8 <HAL_DAC_Start_DMA+0x174>)
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <HAL_DAC_Start_DMA+0x178>)
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <HAL_DAC_Start_DMA+0x17c>)
 8005b04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b14:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_DAC_Start_DMA+0xc0>
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d005      	beq.n	8005b2e <HAL_DAC_Start_DMA+0xca>
 8005b22:	e009      	b.n	8005b38 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	613b      	str	r3, [r7, #16]
        break;
 8005b2c:	e009      	b.n	8005b42 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3318      	adds	r3, #24
 8005b34:	613b      	str	r3, [r7, #16]
        break;
 8005b36:	e004      	b.n	8005b42 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	331c      	adds	r3, #28
 8005b3e:	613b      	str	r3, [r7, #16]
        break;
 8005b40:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d111      	bne.n	8005b6c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6898      	ldr	r0, [r3, #8]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	f000 fe67 	bl	8006834 <HAL_DMA_Start_IT>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]
 8005b6a:	e010      	b.n	8005b8e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68d8      	ldr	r0, [r3, #12]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	f000 fe55 	bl	8006834 <HAL_DMA_Start_IT>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e005      	b.n	8005bc0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08006055 	.word	0x08006055
 8005bd0:	08006077 	.word	0x08006077
 8005bd4:	08006093 	.word	0x08006093
 8005bd8:	08006111 	.word	0x08006111
 8005bdc:	08006133 	.word	0x08006133
 8005be0:	0800614f 	.word	0x0800614f

08005be4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e03e      	b.n	8005c76 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43da      	mvns	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6819      	ldr	r1, [r3, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2201      	movs	r2, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43da      	mvns	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	400a      	ands	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10d      	bne.n	8005c54 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 f863 	bl	8006d08 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e00c      	b.n	8005c6e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 f855 	bl	8006d08 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005c6c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01d      	beq.n	8005cdc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d018      	beq.n	8005cdc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2204      	movs	r2, #4
 8005cae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f86f 	bl	8005dba <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d018      	beq.n	8005d22 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f043 0202 	orr.w	r2, r3, #2
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9ed 	bl	80060fc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e015      	b.n	8005d72 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4413      	add	r3, r2
 8005d58:	3308      	adds	r3, #8
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	e004      	b.n	8005d68 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3314      	adds	r3, #20
 8005d66:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_DAC_ConfigChannel+0x1e>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e12a      	b.n	8006048 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	795b      	ldrb	r3, [r3, #5]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_DAC_ConfigChannel+0x2e>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e124      	b.n	8006048 <HAL_DAC_ConfigChannel+0x278>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2202      	movs	r2, #2
 8005e08:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d17a      	bne.n	8005f08 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005e12:	f7fe f88b 	bl	8003f2c <HAL_GetTick>
 8005e16:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d13d      	bne.n	8005e9a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e1e:	e018      	b.n	8005e52 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e20:	f7fe f884 	bl	8003f2c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d911      	bls.n	8005e52 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	4b86      	ldr	r3, [pc, #536]	; (8006050 <HAL_DAC_ConfigChannel+0x280>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f043 0208 	orr.w	r2, r3, #8
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0fa      	b.n	8006048 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	4b7d      	ldr	r3, [pc, #500]	; (8006050 <HAL_DAC_ConfigChannel+0x280>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1df      	bne.n	8005e20 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	6992      	ldr	r2, [r2, #24]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
 8005e6a:	e020      	b.n	8005eae <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e6c:	f7fe f85e 	bl	8003f2c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d90f      	bls.n	8005e9a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	da0a      	bge.n	8005e9a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f043 0208 	orr.w	r2, r3, #8
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2203      	movs	r2, #3
 8005e94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0d6      	b.n	8006048 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dbe3      	blt.n	8005e6c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	6992      	ldr	r2, [r2, #24]
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	ea02 0103 	and.w	r1, r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	21ff      	movs	r1, #255	; 0xff
 8005eea:	fa01 f303 	lsl.w	r3, r1, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	ea02 0103 	and.w	r1, r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	409a      	lsls	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d11d      	bne.n	8005f4c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	221f      	movs	r2, #31
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f003 0310 	and.w	r3, r3, #16
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4013      	ands	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d102      	bne.n	8005f76 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
 8005f74:	e00f      	b.n	8005f96 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d102      	bne.n	8005f84 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
 8005f82:	e008      	b.n	8005f96 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	e001      	b.n	8005f96 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6819      	ldr	r1, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f003 0310 	and.w	r3, r3, #16
 8005fcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43da      	mvns	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	400a      	ands	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	22c0      	movs	r2, #192	; 0xc0
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	43da      	mvns	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	400a      	ands	r2, r1
 8006036:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	; 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20008000 	.word	0x20008000

08006054 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff fe8b 	bl	8005d7e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	711a      	strb	r2, [r3, #4]
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff fe84 	bl	8005d92 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f043 0204 	orr.w	r2, r3, #4
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff fe7a 	bl	8005da6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	711a      	strb	r2, [r3, #4]
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff ffce 	bl	80060c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	711a      	strb	r2, [r3, #4]
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ffc7 	bl	80060d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f043 0204 	orr.w	r2, r3, #4
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ffbd 	bl	80060e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	711a      	strb	r2, [r3, #4]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006184:	f7fd fed2 	bl	8003f2c <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e316      	b.n	80067c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a66      	ldr	r2, [pc, #408]	; (8006334 <HAL_DMA_Init+0x1b8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d04a      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a65      	ldr	r2, [pc, #404]	; (8006338 <HAL_DMA_Init+0x1bc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d045      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a63      	ldr	r2, [pc, #396]	; (800633c <HAL_DMA_Init+0x1c0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d040      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a62      	ldr	r2, [pc, #392]	; (8006340 <HAL_DMA_Init+0x1c4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d03b      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a60      	ldr	r2, [pc, #384]	; (8006344 <HAL_DMA_Init+0x1c8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d036      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a5f      	ldr	r2, [pc, #380]	; (8006348 <HAL_DMA_Init+0x1cc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d031      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5d      	ldr	r2, [pc, #372]	; (800634c <HAL_DMA_Init+0x1d0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02c      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5c      	ldr	r2, [pc, #368]	; (8006350 <HAL_DMA_Init+0x1d4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d027      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a5a      	ldr	r2, [pc, #360]	; (8006354 <HAL_DMA_Init+0x1d8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a59      	ldr	r2, [pc, #356]	; (8006358 <HAL_DMA_Init+0x1dc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01d      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a57      	ldr	r2, [pc, #348]	; (800635c <HAL_DMA_Init+0x1e0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a56      	ldr	r2, [pc, #344]	; (8006360 <HAL_DMA_Init+0x1e4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a54      	ldr	r2, [pc, #336]	; (8006364 <HAL_DMA_Init+0x1e8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a53      	ldr	r2, [pc, #332]	; (8006368 <HAL_DMA_Init+0x1ec>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a51      	ldr	r2, [pc, #324]	; (800636c <HAL_DMA_Init+0x1f0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_DMA_Init+0xb8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a50      	ldr	r2, [pc, #320]	; (8006370 <HAL_DMA_Init+0x1f4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <HAL_DMA_Init+0xbc>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_DMA_Init+0xbe>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 813b 	beq.w	80064b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a37      	ldr	r2, [pc, #220]	; (8006334 <HAL_DMA_Init+0x1b8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d04a      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a36      	ldr	r2, [pc, #216]	; (8006338 <HAL_DMA_Init+0x1bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d045      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a34      	ldr	r2, [pc, #208]	; (800633c <HAL_DMA_Init+0x1c0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d040      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a33      	ldr	r2, [pc, #204]	; (8006340 <HAL_DMA_Init+0x1c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d03b      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a31      	ldr	r2, [pc, #196]	; (8006344 <HAL_DMA_Init+0x1c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d036      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a30      	ldr	r2, [pc, #192]	; (8006348 <HAL_DMA_Init+0x1cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d031      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_DMA_Init+0x1d0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02c      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2d      	ldr	r2, [pc, #180]	; (8006350 <HAL_DMA_Init+0x1d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d027      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <HAL_DMA_Init+0x1d8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d022      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2a      	ldr	r2, [pc, #168]	; (8006358 <HAL_DMA_Init+0x1dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01d      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_DMA_Init+0x1e0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a27      	ldr	r2, [pc, #156]	; (8006360 <HAL_DMA_Init+0x1e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a25      	ldr	r2, [pc, #148]	; (8006364 <HAL_DMA_Init+0x1e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a24      	ldr	r2, [pc, #144]	; (8006368 <HAL_DMA_Init+0x1ec>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_DMA_Init+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_DMA_Init+0x174>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a21      	ldr	r2, [pc, #132]	; (8006370 <HAL_DMA_Init+0x1f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d108      	bne.n	8006302 <HAL_DMA_Init+0x186>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e007      	b.n	8006312 <HAL_DMA_Init+0x196>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006312:	e02f      	b.n	8006374 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006314:	f7fd fe0a 	bl	8003f2c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b05      	cmp	r3, #5
 8006320:	d928      	bls.n	8006374 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2203      	movs	r2, #3
 800632c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e246      	b.n	80067c2 <HAL_DMA_Init+0x646>
 8006334:	40020010 	.word	0x40020010
 8006338:	40020028 	.word	0x40020028
 800633c:	40020040 	.word	0x40020040
 8006340:	40020058 	.word	0x40020058
 8006344:	40020070 	.word	0x40020070
 8006348:	40020088 	.word	0x40020088
 800634c:	400200a0 	.word	0x400200a0
 8006350:	400200b8 	.word	0x400200b8
 8006354:	40020410 	.word	0x40020410
 8006358:	40020428 	.word	0x40020428
 800635c:	40020440 	.word	0x40020440
 8006360:	40020458 	.word	0x40020458
 8006364:	40020470 	.word	0x40020470
 8006368:	40020488 	.word	0x40020488
 800636c:	400204a0 	.word	0x400204a0
 8006370:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1c8      	bne.n	8006314 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4b83      	ldr	r3, [pc, #524]	; (800659c <HAL_DMA_Init+0x420>)
 800638e:	4013      	ands	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800639a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d107      	bne.n	80063d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	4313      	orrs	r3, r2
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80063d8:	4b71      	ldr	r3, [pc, #452]	; (80065a0 <HAL_DMA_Init+0x424>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b71      	ldr	r3, [pc, #452]	; (80065a4 <HAL_DMA_Init+0x428>)
 80063de:	4013      	ands	r3, r2
 80063e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e4:	d328      	bcc.n	8006438 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b28      	cmp	r3, #40	; 0x28
 80063ec:	d903      	bls.n	80063f6 <HAL_DMA_Init+0x27a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b2e      	cmp	r3, #46	; 0x2e
 80063f4:	d917      	bls.n	8006426 <HAL_DMA_Init+0x2aa>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b3e      	cmp	r3, #62	; 0x3e
 80063fc:	d903      	bls.n	8006406 <HAL_DMA_Init+0x28a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b42      	cmp	r3, #66	; 0x42
 8006404:	d90f      	bls.n	8006426 <HAL_DMA_Init+0x2aa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b46      	cmp	r3, #70	; 0x46
 800640c:	d903      	bls.n	8006416 <HAL_DMA_Init+0x29a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b48      	cmp	r3, #72	; 0x48
 8006414:	d907      	bls.n	8006426 <HAL_DMA_Init+0x2aa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b4e      	cmp	r3, #78	; 0x4e
 800641c:	d905      	bls.n	800642a <HAL_DMA_Init+0x2ae>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b52      	cmp	r3, #82	; 0x52
 8006424:	d801      	bhi.n	800642a <HAL_DMA_Init+0x2ae>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <HAL_DMA_Init+0x2b0>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006436:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b04      	cmp	r3, #4
 8006460:	d117      	bne.n	8006492 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f002 fb3f 	bl	8008af8 <DMA_CheckFifoParam>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2240      	movs	r2, #64	; 0x40
 8006484:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e197      	b.n	80067c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f002 fa7a 	bl	8008994 <DMA_CalcBaseAndBitshift>
 80064a0:	4603      	mov	r3, r0
 80064a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	223f      	movs	r2, #63	; 0x3f
 80064ae:	409a      	lsls	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	e0cd      	b.n	8006652 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3b      	ldr	r2, [pc, #236]	; (80065a8 <HAL_DMA_Init+0x42c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a39      	ldr	r2, [pc, #228]	; (80065ac <HAL_DMA_Init+0x430>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01d      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a38      	ldr	r2, [pc, #224]	; (80065b0 <HAL_DMA_Init+0x434>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a36      	ldr	r2, [pc, #216]	; (80065b4 <HAL_DMA_Init+0x438>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a35      	ldr	r2, [pc, #212]	; (80065b8 <HAL_DMA_Init+0x43c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a33      	ldr	r2, [pc, #204]	; (80065bc <HAL_DMA_Init+0x440>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a32      	ldr	r2, [pc, #200]	; (80065c0 <HAL_DMA_Init+0x444>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_DMA_Init+0x38a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a30      	ldr	r2, [pc, #192]	; (80065c4 <HAL_DMA_Init+0x448>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_DMA_Init+0x38e>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <HAL_DMA_Init+0x390>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8097 	beq.w	8006640 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a24      	ldr	r2, [pc, #144]	; (80065a8 <HAL_DMA_Init+0x42c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d021      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_DMA_Init+0x430>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01c      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <HAL_DMA_Init+0x434>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d017      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1f      	ldr	r2, [pc, #124]	; (80065b4 <HAL_DMA_Init+0x438>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d012      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <HAL_DMA_Init+0x43c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00d      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <HAL_DMA_Init+0x440>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d008      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <HAL_DMA_Init+0x444>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <HAL_DMA_Init+0x3e4>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a19      	ldr	r2, [pc, #100]	; (80065c4 <HAL_DMA_Init+0x448>)
 800655e:	4293      	cmp	r3, r2
 8006560:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <HAL_DMA_Init+0x44c>)
 800657e:	4013      	ands	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d020      	beq.n	80065cc <HAL_DMA_Init+0x450>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b80      	cmp	r3, #128	; 0x80
 8006590:	d102      	bne.n	8006598 <HAL_DMA_Init+0x41c>
 8006592:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006596:	e01a      	b.n	80065ce <HAL_DMA_Init+0x452>
 8006598:	2300      	movs	r3, #0
 800659a:	e018      	b.n	80065ce <HAL_DMA_Init+0x452>
 800659c:	fe10803f 	.word	0xfe10803f
 80065a0:	5c001000 	.word	0x5c001000
 80065a4:	ffff0000 	.word	0xffff0000
 80065a8:	58025408 	.word	0x58025408
 80065ac:	5802541c 	.word	0x5802541c
 80065b0:	58025430 	.word	0x58025430
 80065b4:	58025444 	.word	0x58025444
 80065b8:	58025458 	.word	0x58025458
 80065bc:	5802546c 	.word	0x5802546c
 80065c0:	58025480 	.word	0x58025480
 80065c4:	58025494 	.word	0x58025494
 80065c8:	fffe000f 	.word	0xfffe000f
 80065cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68d2      	ldr	r2, [r2, #12]
 80065d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	4b6e      	ldr	r3, [pc, #440]	; (80067cc <HAL_DMA_Init+0x650>)
 8006614:	4413      	add	r3, r2
 8006616:	4a6e      	ldr	r2, [pc, #440]	; (80067d0 <HAL_DMA_Init+0x654>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	009a      	lsls	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f002 f9b5 	bl	8008994 <DMA_CalcBaseAndBitshift>
 800662a:	4603      	mov	r3, r0
 800662c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2201      	movs	r2, #1
 8006638:	409a      	lsls	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	e008      	b.n	8006652 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2240      	movs	r2, #64	; 0x40
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e0b7      	b.n	80067c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5f      	ldr	r2, [pc, #380]	; (80067d4 <HAL_DMA_Init+0x658>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d072      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5d      	ldr	r2, [pc, #372]	; (80067d8 <HAL_DMA_Init+0x65c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d06d      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5c      	ldr	r2, [pc, #368]	; (80067dc <HAL_DMA_Init+0x660>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d068      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_DMA_Init+0x664>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d063      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a59      	ldr	r2, [pc, #356]	; (80067e4 <HAL_DMA_Init+0x668>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d05e      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a57      	ldr	r2, [pc, #348]	; (80067e8 <HAL_DMA_Init+0x66c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d059      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a56      	ldr	r2, [pc, #344]	; (80067ec <HAL_DMA_Init+0x670>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d054      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a54      	ldr	r2, [pc, #336]	; (80067f0 <HAL_DMA_Init+0x674>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d04f      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a53      	ldr	r2, [pc, #332]	; (80067f4 <HAL_DMA_Init+0x678>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d04a      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a51      	ldr	r2, [pc, #324]	; (80067f8 <HAL_DMA_Init+0x67c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d045      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a50      	ldr	r2, [pc, #320]	; (80067fc <HAL_DMA_Init+0x680>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d040      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a4e      	ldr	r2, [pc, #312]	; (8006800 <HAL_DMA_Init+0x684>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d03b      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a4d      	ldr	r2, [pc, #308]	; (8006804 <HAL_DMA_Init+0x688>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d036      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a4b      	ldr	r2, [pc, #300]	; (8006808 <HAL_DMA_Init+0x68c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d031      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a4a      	ldr	r2, [pc, #296]	; (800680c <HAL_DMA_Init+0x690>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d02c      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a48      	ldr	r2, [pc, #288]	; (8006810 <HAL_DMA_Init+0x694>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d027      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a47      	ldr	r2, [pc, #284]	; (8006814 <HAL_DMA_Init+0x698>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a45      	ldr	r2, [pc, #276]	; (8006818 <HAL_DMA_Init+0x69c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01d      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a44      	ldr	r2, [pc, #272]	; (800681c <HAL_DMA_Init+0x6a0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a42      	ldr	r2, [pc, #264]	; (8006820 <HAL_DMA_Init+0x6a4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a41      	ldr	r2, [pc, #260]	; (8006824 <HAL_DMA_Init+0x6a8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <HAL_DMA_Init+0x6ac>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a3e      	ldr	r2, [pc, #248]	; (800682c <HAL_DMA_Init+0x6b0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_DMA_Init+0x5c6>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3c      	ldr	r2, [pc, #240]	; (8006830 <HAL_DMA_Init+0x6b4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d101      	bne.n	8006746 <HAL_DMA_Init+0x5ca>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_DMA_Init+0x5cc>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d032      	beq.n	80067b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f002 fa4f 	bl	8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d102      	bne.n	8006760 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006774:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_DMA_Init+0x624>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b08      	cmp	r3, #8
 8006784:	d80c      	bhi.n	80067a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f002 facc 	bl	8008d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	e008      	b.n	80067b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	a7fdabf8 	.word	0xa7fdabf8
 80067d0:	cccccccd 	.word	0xcccccccd
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	58025408 	.word	0x58025408
 8006818:	5802541c 	.word	0x5802541c
 800681c:	58025430 	.word	0x58025430
 8006820:	58025444 	.word	0x58025444
 8006824:	58025458 	.word	0x58025458
 8006828:	5802546c 	.word	0x5802546c
 800682c:	58025480 	.word	0x58025480
 8006830:	58025494 	.word	0x58025494

08006834 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e226      	b.n	8006c9e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_DMA_Start_IT+0x2a>
 800685a:	2302      	movs	r3, #2
 800685c:	e21f      	b.n	8006c9e <HAL_DMA_Start_IT+0x46a>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	f040 820a 	bne.w	8006c88 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a68      	ldr	r2, [pc, #416]	; (8006a28 <HAL_DMA_Start_IT+0x1f4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d04a      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a66      	ldr	r2, [pc, #408]	; (8006a2c <HAL_DMA_Start_IT+0x1f8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d045      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a65      	ldr	r2, [pc, #404]	; (8006a30 <HAL_DMA_Start_IT+0x1fc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d040      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a63      	ldr	r2, [pc, #396]	; (8006a34 <HAL_DMA_Start_IT+0x200>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d03b      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a62      	ldr	r2, [pc, #392]	; (8006a38 <HAL_DMA_Start_IT+0x204>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d036      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a60      	ldr	r2, [pc, #384]	; (8006a3c <HAL_DMA_Start_IT+0x208>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d031      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a5f      	ldr	r2, [pc, #380]	; (8006a40 <HAL_DMA_Start_IT+0x20c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d02c      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a5d      	ldr	r2, [pc, #372]	; (8006a44 <HAL_DMA_Start_IT+0x210>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d027      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a5c      	ldr	r2, [pc, #368]	; (8006a48 <HAL_DMA_Start_IT+0x214>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a5a      	ldr	r2, [pc, #360]	; (8006a4c <HAL_DMA_Start_IT+0x218>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01d      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a59      	ldr	r2, [pc, #356]	; (8006a50 <HAL_DMA_Start_IT+0x21c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a57      	ldr	r2, [pc, #348]	; (8006a54 <HAL_DMA_Start_IT+0x220>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a56      	ldr	r2, [pc, #344]	; (8006a58 <HAL_DMA_Start_IT+0x224>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a54      	ldr	r2, [pc, #336]	; (8006a5c <HAL_DMA_Start_IT+0x228>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a53      	ldr	r2, [pc, #332]	; (8006a60 <HAL_DMA_Start_IT+0x22c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_DMA_Start_IT+0xee>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a51      	ldr	r2, [pc, #324]	; (8006a64 <HAL_DMA_Start_IT+0x230>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d108      	bne.n	8006934 <HAL_DMA_Start_IT+0x100>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e007      	b.n	8006944 <HAL_DMA_Start_IT+0x110>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0201 	bic.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fe76 	bl	800863c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a34      	ldr	r2, [pc, #208]	; (8006a28 <HAL_DMA_Start_IT+0x1f4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d04a      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a33      	ldr	r2, [pc, #204]	; (8006a2c <HAL_DMA_Start_IT+0x1f8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d045      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a31      	ldr	r2, [pc, #196]	; (8006a30 <HAL_DMA_Start_IT+0x1fc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d040      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a30      	ldr	r2, [pc, #192]	; (8006a34 <HAL_DMA_Start_IT+0x200>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d03b      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a2e      	ldr	r2, [pc, #184]	; (8006a38 <HAL_DMA_Start_IT+0x204>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d036      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a2d      	ldr	r2, [pc, #180]	; (8006a3c <HAL_DMA_Start_IT+0x208>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d031      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a2b      	ldr	r2, [pc, #172]	; (8006a40 <HAL_DMA_Start_IT+0x20c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d02c      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a2a      	ldr	r2, [pc, #168]	; (8006a44 <HAL_DMA_Start_IT+0x210>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d027      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a28      	ldr	r2, [pc, #160]	; (8006a48 <HAL_DMA_Start_IT+0x214>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d022      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a27      	ldr	r2, [pc, #156]	; (8006a4c <HAL_DMA_Start_IT+0x218>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01d      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a25      	ldr	r2, [pc, #148]	; (8006a50 <HAL_DMA_Start_IT+0x21c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d018      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <HAL_DMA_Start_IT+0x220>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a22      	ldr	r2, [pc, #136]	; (8006a58 <HAL_DMA_Start_IT+0x224>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00e      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <HAL_DMA_Start_IT+0x228>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d009      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <HAL_DMA_Start_IT+0x22c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <HAL_DMA_Start_IT+0x1bc>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <HAL_DMA_Start_IT+0x230>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d101      	bne.n	80069f4 <HAL_DMA_Start_IT+0x1c0>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <HAL_DMA_Start_IT+0x1c2>
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d036      	beq.n	8006a68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f023 021e 	bic.w	r2, r3, #30
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0216 	orr.w	r2, r2, #22
 8006a0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d03e      	beq.n	8006a94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0208 	orr.w	r2, r2, #8
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e035      	b.n	8006a94 <HAL_DMA_Start_IT+0x260>
 8006a28:	40020010 	.word	0x40020010
 8006a2c:	40020028 	.word	0x40020028
 8006a30:	40020040 	.word	0x40020040
 8006a34:	40020058 	.word	0x40020058
 8006a38:	40020070 	.word	0x40020070
 8006a3c:	40020088 	.word	0x40020088
 8006a40:	400200a0 	.word	0x400200a0
 8006a44:	400200b8 	.word	0x400200b8
 8006a48:	40020410 	.word	0x40020410
 8006a4c:	40020428 	.word	0x40020428
 8006a50:	40020440 	.word	0x40020440
 8006a54:	40020458 	.word	0x40020458
 8006a58:	40020470 	.word	0x40020470
 8006a5c:	40020488 	.word	0x40020488
 8006a60:	400204a0 	.word	0x400204a0
 8006a64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 020e 	bic.w	r2, r3, #14
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 020a 	orr.w	r2, r2, #10
 8006a7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0204 	orr.w	r2, r2, #4
 8006a92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a83      	ldr	r2, [pc, #524]	; (8006ca8 <HAL_DMA_Start_IT+0x474>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d072      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a82      	ldr	r2, [pc, #520]	; (8006cac <HAL_DMA_Start_IT+0x478>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d06d      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a80      	ldr	r2, [pc, #512]	; (8006cb0 <HAL_DMA_Start_IT+0x47c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d068      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a7f      	ldr	r2, [pc, #508]	; (8006cb4 <HAL_DMA_Start_IT+0x480>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d063      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a7d      	ldr	r2, [pc, #500]	; (8006cb8 <HAL_DMA_Start_IT+0x484>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d05e      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a7c      	ldr	r2, [pc, #496]	; (8006cbc <HAL_DMA_Start_IT+0x488>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d059      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a7a      	ldr	r2, [pc, #488]	; (8006cc0 <HAL_DMA_Start_IT+0x48c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d054      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a79      	ldr	r2, [pc, #484]	; (8006cc4 <HAL_DMA_Start_IT+0x490>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d04f      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a77      	ldr	r2, [pc, #476]	; (8006cc8 <HAL_DMA_Start_IT+0x494>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d04a      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a76      	ldr	r2, [pc, #472]	; (8006ccc <HAL_DMA_Start_IT+0x498>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d045      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a74      	ldr	r2, [pc, #464]	; (8006cd0 <HAL_DMA_Start_IT+0x49c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d040      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a73      	ldr	r2, [pc, #460]	; (8006cd4 <HAL_DMA_Start_IT+0x4a0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a71      	ldr	r2, [pc, #452]	; (8006cd8 <HAL_DMA_Start_IT+0x4a4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d036      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a70      	ldr	r2, [pc, #448]	; (8006cdc <HAL_DMA_Start_IT+0x4a8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d031      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a6e      	ldr	r2, [pc, #440]	; (8006ce0 <HAL_DMA_Start_IT+0x4ac>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a6d      	ldr	r2, [pc, #436]	; (8006ce4 <HAL_DMA_Start_IT+0x4b0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d027      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6b      	ldr	r2, [pc, #428]	; (8006ce8 <HAL_DMA_Start_IT+0x4b4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a6a      	ldr	r2, [pc, #424]	; (8006cec <HAL_DMA_Start_IT+0x4b8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a68      	ldr	r2, [pc, #416]	; (8006cf0 <HAL_DMA_Start_IT+0x4bc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a67      	ldr	r2, [pc, #412]	; (8006cf4 <HAL_DMA_Start_IT+0x4c0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a65      	ldr	r2, [pc, #404]	; (8006cf8 <HAL_DMA_Start_IT+0x4c4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a64      	ldr	r2, [pc, #400]	; (8006cfc <HAL_DMA_Start_IT+0x4c8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a62      	ldr	r2, [pc, #392]	; (8006d00 <HAL_DMA_Start_IT+0x4cc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_DMA_Start_IT+0x350>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a61      	ldr	r2, [pc, #388]	; (8006d04 <HAL_DMA_Start_IT+0x4d0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d101      	bne.n	8006b88 <HAL_DMA_Start_IT+0x354>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_DMA_Start_IT+0x356>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01a      	beq.n	8006bc4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006baa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <HAL_DMA_Start_IT+0x474>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d04a      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a36      	ldr	r2, [pc, #216]	; (8006cac <HAL_DMA_Start_IT+0x478>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d045      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a34      	ldr	r2, [pc, #208]	; (8006cb0 <HAL_DMA_Start_IT+0x47c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d040      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a33      	ldr	r2, [pc, #204]	; (8006cb4 <HAL_DMA_Start_IT+0x480>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d03b      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a31      	ldr	r2, [pc, #196]	; (8006cb8 <HAL_DMA_Start_IT+0x484>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d036      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a30      	ldr	r2, [pc, #192]	; (8006cbc <HAL_DMA_Start_IT+0x488>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d031      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2e      	ldr	r2, [pc, #184]	; (8006cc0 <HAL_DMA_Start_IT+0x48c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d02c      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2d      	ldr	r2, [pc, #180]	; (8006cc4 <HAL_DMA_Start_IT+0x490>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d027      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <HAL_DMA_Start_IT+0x494>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d022      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <HAL_DMA_Start_IT+0x498>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d01d      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a28      	ldr	r2, [pc, #160]	; (8006cd0 <HAL_DMA_Start_IT+0x49c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a27      	ldr	r2, [pc, #156]	; (8006cd4 <HAL_DMA_Start_IT+0x4a0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a25      	ldr	r2, [pc, #148]	; (8006cd8 <HAL_DMA_Start_IT+0x4a4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a24      	ldr	r2, [pc, #144]	; (8006cdc <HAL_DMA_Start_IT+0x4a8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a22      	ldr	r2, [pc, #136]	; (8006ce0 <HAL_DMA_Start_IT+0x4ac>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_DMA_Start_IT+0x430>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <HAL_DMA_Start_IT+0x4b0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d108      	bne.n	8006c76 <HAL_DMA_Start_IT+0x442>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e012      	b.n	8006c9c <HAL_DMA_Start_IT+0x468>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0201 	orr.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e009      	b.n	8006c9c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40020010 	.word	0x40020010
 8006cac:	40020028 	.word	0x40020028
 8006cb0:	40020040 	.word	0x40020040
 8006cb4:	40020058 	.word	0x40020058
 8006cb8:	40020070 	.word	0x40020070
 8006cbc:	40020088 	.word	0x40020088
 8006cc0:	400200a0 	.word	0x400200a0
 8006cc4:	400200b8 	.word	0x400200b8
 8006cc8:	40020410 	.word	0x40020410
 8006ccc:	40020428 	.word	0x40020428
 8006cd0:	40020440 	.word	0x40020440
 8006cd4:	40020458 	.word	0x40020458
 8006cd8:	40020470 	.word	0x40020470
 8006cdc:	40020488 	.word	0x40020488
 8006ce0:	400204a0 	.word	0x400204a0
 8006ce4:	400204b8 	.word	0x400204b8
 8006ce8:	58025408 	.word	0x58025408
 8006cec:	5802541c 	.word	0x5802541c
 8006cf0:	58025430 	.word	0x58025430
 8006cf4:	58025444 	.word	0x58025444
 8006cf8:	58025458 	.word	0x58025458
 8006cfc:	5802546c 	.word	0x5802546c
 8006d00:	58025480 	.word	0x58025480
 8006d04:	58025494 	.word	0x58025494

08006d08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006d10:	f7fd f90c 	bl	8003f2c <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e2dc      	b.n	80072da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d008      	beq.n	8006d3e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2280      	movs	r2, #128	; 0x80
 8006d30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e2cd      	b.n	80072da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a76      	ldr	r2, [pc, #472]	; (8006f1c <HAL_DMA_Abort+0x214>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d04a      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a74      	ldr	r2, [pc, #464]	; (8006f20 <HAL_DMA_Abort+0x218>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d045      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a73      	ldr	r2, [pc, #460]	; (8006f24 <HAL_DMA_Abort+0x21c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d040      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a71      	ldr	r2, [pc, #452]	; (8006f28 <HAL_DMA_Abort+0x220>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d03b      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a70      	ldr	r2, [pc, #448]	; (8006f2c <HAL_DMA_Abort+0x224>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d036      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a6e      	ldr	r2, [pc, #440]	; (8006f30 <HAL_DMA_Abort+0x228>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d031      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a6d      	ldr	r2, [pc, #436]	; (8006f34 <HAL_DMA_Abort+0x22c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d02c      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a6b      	ldr	r2, [pc, #428]	; (8006f38 <HAL_DMA_Abort+0x230>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d027      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a6a      	ldr	r2, [pc, #424]	; (8006f3c <HAL_DMA_Abort+0x234>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a68      	ldr	r2, [pc, #416]	; (8006f40 <HAL_DMA_Abort+0x238>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01d      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a67      	ldr	r2, [pc, #412]	; (8006f44 <HAL_DMA_Abort+0x23c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a65      	ldr	r2, [pc, #404]	; (8006f48 <HAL_DMA_Abort+0x240>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a64      	ldr	r2, [pc, #400]	; (8006f4c <HAL_DMA_Abort+0x244>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a62      	ldr	r2, [pc, #392]	; (8006f50 <HAL_DMA_Abort+0x248>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a61      	ldr	r2, [pc, #388]	; (8006f54 <HAL_DMA_Abort+0x24c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_DMA_Abort+0xd6>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5f      	ldr	r2, [pc, #380]	; (8006f58 <HAL_DMA_Abort+0x250>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d101      	bne.n	8006de2 <HAL_DMA_Abort+0xda>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <HAL_DMA_Abort+0xdc>
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d013      	beq.n	8006e10 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 021e 	bic.w	r2, r2, #30
 8006df6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695a      	ldr	r2, [r3, #20]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e06:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e00a      	b.n	8006e26 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 020e 	bic.w	r2, r2, #14
 8006e1e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a3c      	ldr	r2, [pc, #240]	; (8006f1c <HAL_DMA_Abort+0x214>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d072      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a3a      	ldr	r2, [pc, #232]	; (8006f20 <HAL_DMA_Abort+0x218>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d06d      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a39      	ldr	r2, [pc, #228]	; (8006f24 <HAL_DMA_Abort+0x21c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d068      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a37      	ldr	r2, [pc, #220]	; (8006f28 <HAL_DMA_Abort+0x220>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d063      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a36      	ldr	r2, [pc, #216]	; (8006f2c <HAL_DMA_Abort+0x224>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d05e      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a34      	ldr	r2, [pc, #208]	; (8006f30 <HAL_DMA_Abort+0x228>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d059      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a33      	ldr	r2, [pc, #204]	; (8006f34 <HAL_DMA_Abort+0x22c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d054      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a31      	ldr	r2, [pc, #196]	; (8006f38 <HAL_DMA_Abort+0x230>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d04f      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a30      	ldr	r2, [pc, #192]	; (8006f3c <HAL_DMA_Abort+0x234>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d04a      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2e      	ldr	r2, [pc, #184]	; (8006f40 <HAL_DMA_Abort+0x238>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d045      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2d      	ldr	r2, [pc, #180]	; (8006f44 <HAL_DMA_Abort+0x23c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d040      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a2b      	ldr	r2, [pc, #172]	; (8006f48 <HAL_DMA_Abort+0x240>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d03b      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <HAL_DMA_Abort+0x244>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d036      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a28      	ldr	r2, [pc, #160]	; (8006f50 <HAL_DMA_Abort+0x248>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d031      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <HAL_DMA_Abort+0x24c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d02c      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a25      	ldr	r2, [pc, #148]	; (8006f58 <HAL_DMA_Abort+0x250>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d027      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a24      	ldr	r2, [pc, #144]	; (8006f5c <HAL_DMA_Abort+0x254>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d022      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a22      	ldr	r2, [pc, #136]	; (8006f60 <HAL_DMA_Abort+0x258>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01d      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <HAL_DMA_Abort+0x25c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <HAL_DMA_Abort+0x260>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <HAL_DMA_Abort+0x264>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1c      	ldr	r2, [pc, #112]	; (8006f70 <HAL_DMA_Abort+0x268>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1b      	ldr	r2, [pc, #108]	; (8006f74 <HAL_DMA_Abort+0x26c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_DMA_Abort+0x20e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <HAL_DMA_Abort+0x270>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d132      	bne.n	8006f7c <HAL_DMA_Abort+0x274>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e031      	b.n	8006f7e <HAL_DMA_Abort+0x276>
 8006f1a:	bf00      	nop
 8006f1c:	40020010 	.word	0x40020010
 8006f20:	40020028 	.word	0x40020028
 8006f24:	40020040 	.word	0x40020040
 8006f28:	40020058 	.word	0x40020058
 8006f2c:	40020070 	.word	0x40020070
 8006f30:	40020088 	.word	0x40020088
 8006f34:	400200a0 	.word	0x400200a0
 8006f38:	400200b8 	.word	0x400200b8
 8006f3c:	40020410 	.word	0x40020410
 8006f40:	40020428 	.word	0x40020428
 8006f44:	40020440 	.word	0x40020440
 8006f48:	40020458 	.word	0x40020458
 8006f4c:	40020470 	.word	0x40020470
 8006f50:	40020488 	.word	0x40020488
 8006f54:	400204a0 	.word	0x400204a0
 8006f58:	400204b8 	.word	0x400204b8
 8006f5c:	58025408 	.word	0x58025408
 8006f60:	5802541c 	.word	0x5802541c
 8006f64:	58025430 	.word	0x58025430
 8006f68:	58025444 	.word	0x58025444
 8006f6c:	58025458 	.word	0x58025458
 8006f70:	5802546c 	.word	0x5802546c
 8006f74:	58025480 	.word	0x58025480
 8006f78:	58025494 	.word	0x58025494
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a6d      	ldr	r2, [pc, #436]	; (800714c <HAL_DMA_Abort+0x444>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d04a      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a6b      	ldr	r2, [pc, #428]	; (8007150 <HAL_DMA_Abort+0x448>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d045      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a6a      	ldr	r2, [pc, #424]	; (8007154 <HAL_DMA_Abort+0x44c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d040      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a68      	ldr	r2, [pc, #416]	; (8007158 <HAL_DMA_Abort+0x450>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a67      	ldr	r2, [pc, #412]	; (800715c <HAL_DMA_Abort+0x454>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d036      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a65      	ldr	r2, [pc, #404]	; (8007160 <HAL_DMA_Abort+0x458>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d031      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a64      	ldr	r2, [pc, #400]	; (8007164 <HAL_DMA_Abort+0x45c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d02c      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a62      	ldr	r2, [pc, #392]	; (8007168 <HAL_DMA_Abort+0x460>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d027      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a61      	ldr	r2, [pc, #388]	; (800716c <HAL_DMA_Abort+0x464>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a5f      	ldr	r2, [pc, #380]	; (8007170 <HAL_DMA_Abort+0x468>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a5e      	ldr	r2, [pc, #376]	; (8007174 <HAL_DMA_Abort+0x46c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a5c      	ldr	r2, [pc, #368]	; (8007178 <HAL_DMA_Abort+0x470>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a5b      	ldr	r2, [pc, #364]	; (800717c <HAL_DMA_Abort+0x474>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a59      	ldr	r2, [pc, #356]	; (8007180 <HAL_DMA_Abort+0x478>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a58      	ldr	r2, [pc, #352]	; (8007184 <HAL_DMA_Abort+0x47c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_Abort+0x32a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a56      	ldr	r2, [pc, #344]	; (8007188 <HAL_DMA_Abort+0x480>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d108      	bne.n	8007044 <HAL_DMA_Abort+0x33c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e007      	b.n	8007054 <HAL_DMA_Abort+0x34c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007054:	e013      	b.n	800707e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007056:	f7fc ff69 	bl	8003f2c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b05      	cmp	r3, #5
 8007062:	d90c      	bls.n	800707e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2203      	movs	r2, #3
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e12d      	b.n	80072da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2f      	ldr	r2, [pc, #188]	; (800714c <HAL_DMA_Abort+0x444>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d04a      	beq.n	800712a <HAL_DMA_Abort+0x422>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2d      	ldr	r2, [pc, #180]	; (8007150 <HAL_DMA_Abort+0x448>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d045      	beq.n	800712a <HAL_DMA_Abort+0x422>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a2c      	ldr	r2, [pc, #176]	; (8007154 <HAL_DMA_Abort+0x44c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d040      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a2a      	ldr	r2, [pc, #168]	; (8007158 <HAL_DMA_Abort+0x450>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d03b      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a29      	ldr	r2, [pc, #164]	; (800715c <HAL_DMA_Abort+0x454>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d036      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a27      	ldr	r2, [pc, #156]	; (8007160 <HAL_DMA_Abort+0x458>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d031      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a26      	ldr	r2, [pc, #152]	; (8007164 <HAL_DMA_Abort+0x45c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d02c      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a24      	ldr	r2, [pc, #144]	; (8007168 <HAL_DMA_Abort+0x460>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d027      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a23      	ldr	r2, [pc, #140]	; (800716c <HAL_DMA_Abort+0x464>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d022      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a21      	ldr	r2, [pc, #132]	; (8007170 <HAL_DMA_Abort+0x468>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01d      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a20      	ldr	r2, [pc, #128]	; (8007174 <HAL_DMA_Abort+0x46c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d018      	beq.n	800712a <HAL_DMA_Abort+0x422>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <HAL_DMA_Abort+0x470>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <HAL_DMA_Abort+0x422>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_DMA_Abort+0x474>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_DMA_Abort+0x422>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <HAL_DMA_Abort+0x478>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_DMA_Abort+0x422>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1a      	ldr	r2, [pc, #104]	; (8007184 <HAL_DMA_Abort+0x47c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_DMA_Abort+0x422>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_DMA_Abort+0x480>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d101      	bne.n	800712e <HAL_DMA_Abort+0x426>
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <HAL_DMA_Abort+0x428>
 800712e:	2300      	movs	r3, #0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d02b      	beq.n	800718c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	223f      	movs	r2, #63	; 0x3f
 8007144:	409a      	lsls	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	609a      	str	r2, [r3, #8]
 800714a:	e02a      	b.n	80071a2 <HAL_DMA_Abort+0x49a>
 800714c:	40020010 	.word	0x40020010
 8007150:	40020028 	.word	0x40020028
 8007154:	40020040 	.word	0x40020040
 8007158:	40020058 	.word	0x40020058
 800715c:	40020070 	.word	0x40020070
 8007160:	40020088 	.word	0x40020088
 8007164:	400200a0 	.word	0x400200a0
 8007168:	400200b8 	.word	0x400200b8
 800716c:	40020410 	.word	0x40020410
 8007170:	40020428 	.word	0x40020428
 8007174:	40020440 	.word	0x40020440
 8007178:	40020458 	.word	0x40020458
 800717c:	40020470 	.word	0x40020470
 8007180:	40020488 	.word	0x40020488
 8007184:	400204a0 	.word	0x400204a0
 8007188:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007190:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2201      	movs	r2, #1
 800719c:	409a      	lsls	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a4f      	ldr	r2, [pc, #316]	; (80072e4 <HAL_DMA_Abort+0x5dc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d072      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a4d      	ldr	r2, [pc, #308]	; (80072e8 <HAL_DMA_Abort+0x5e0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d06d      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a4c      	ldr	r2, [pc, #304]	; (80072ec <HAL_DMA_Abort+0x5e4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d068      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a4a      	ldr	r2, [pc, #296]	; (80072f0 <HAL_DMA_Abort+0x5e8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d063      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a49      	ldr	r2, [pc, #292]	; (80072f4 <HAL_DMA_Abort+0x5ec>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d05e      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a47      	ldr	r2, [pc, #284]	; (80072f8 <HAL_DMA_Abort+0x5f0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d059      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a46      	ldr	r2, [pc, #280]	; (80072fc <HAL_DMA_Abort+0x5f4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d054      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a44      	ldr	r2, [pc, #272]	; (8007300 <HAL_DMA_Abort+0x5f8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d04f      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a43      	ldr	r2, [pc, #268]	; (8007304 <HAL_DMA_Abort+0x5fc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d04a      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a41      	ldr	r2, [pc, #260]	; (8007308 <HAL_DMA_Abort+0x600>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d045      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a40      	ldr	r2, [pc, #256]	; (800730c <HAL_DMA_Abort+0x604>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d040      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <HAL_DMA_Abort+0x608>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d03b      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a3d      	ldr	r2, [pc, #244]	; (8007314 <HAL_DMA_Abort+0x60c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d036      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a3b      	ldr	r2, [pc, #236]	; (8007318 <HAL_DMA_Abort+0x610>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d031      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a3a      	ldr	r2, [pc, #232]	; (800731c <HAL_DMA_Abort+0x614>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d02c      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a38      	ldr	r2, [pc, #224]	; (8007320 <HAL_DMA_Abort+0x618>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d027      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a37      	ldr	r2, [pc, #220]	; (8007324 <HAL_DMA_Abort+0x61c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d022      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a35      	ldr	r2, [pc, #212]	; (8007328 <HAL_DMA_Abort+0x620>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01d      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a34      	ldr	r2, [pc, #208]	; (800732c <HAL_DMA_Abort+0x624>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d018      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a32      	ldr	r2, [pc, #200]	; (8007330 <HAL_DMA_Abort+0x628>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a31      	ldr	r2, [pc, #196]	; (8007334 <HAL_DMA_Abort+0x62c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00e      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2f      	ldr	r2, [pc, #188]	; (8007338 <HAL_DMA_Abort+0x630>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2e      	ldr	r2, [pc, #184]	; (800733c <HAL_DMA_Abort+0x634>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <HAL_DMA_Abort+0x58a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <HAL_DMA_Abort+0x638>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d101      	bne.n	8007296 <HAL_DMA_Abort+0x58e>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <HAL_DMA_Abort+0x590>
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d015      	beq.n	80072c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00c      	beq.n	80072c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40020010 	.word	0x40020010
 80072e8:	40020028 	.word	0x40020028
 80072ec:	40020040 	.word	0x40020040
 80072f0:	40020058 	.word	0x40020058
 80072f4:	40020070 	.word	0x40020070
 80072f8:	40020088 	.word	0x40020088
 80072fc:	400200a0 	.word	0x400200a0
 8007300:	400200b8 	.word	0x400200b8
 8007304:	40020410 	.word	0x40020410
 8007308:	40020428 	.word	0x40020428
 800730c:	40020440 	.word	0x40020440
 8007310:	40020458 	.word	0x40020458
 8007314:	40020470 	.word	0x40020470
 8007318:	40020488 	.word	0x40020488
 800731c:	400204a0 	.word	0x400204a0
 8007320:	400204b8 	.word	0x400204b8
 8007324:	58025408 	.word	0x58025408
 8007328:	5802541c 	.word	0x5802541c
 800732c:	58025430 	.word	0x58025430
 8007330:	58025444 	.word	0x58025444
 8007334:	58025458 	.word	0x58025458
 8007338:	5802546c 	.word	0x5802546c
 800733c:	58025480 	.word	0x58025480
 8007340:	58025494 	.word	0x58025494

08007344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e237      	b.n	80077c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d004      	beq.n	800736c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2280      	movs	r2, #128	; 0x80
 8007366:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e22c      	b.n	80077c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a5c      	ldr	r2, [pc, #368]	; (80074e4 <HAL_DMA_Abort_IT+0x1a0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d04a      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a5b      	ldr	r2, [pc, #364]	; (80074e8 <HAL_DMA_Abort_IT+0x1a4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d045      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a59      	ldr	r2, [pc, #356]	; (80074ec <HAL_DMA_Abort_IT+0x1a8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d040      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a58      	ldr	r2, [pc, #352]	; (80074f0 <HAL_DMA_Abort_IT+0x1ac>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d03b      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a56      	ldr	r2, [pc, #344]	; (80074f4 <HAL_DMA_Abort_IT+0x1b0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d036      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a55      	ldr	r2, [pc, #340]	; (80074f8 <HAL_DMA_Abort_IT+0x1b4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d031      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a53      	ldr	r2, [pc, #332]	; (80074fc <HAL_DMA_Abort_IT+0x1b8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02c      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a52      	ldr	r2, [pc, #328]	; (8007500 <HAL_DMA_Abort_IT+0x1bc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d027      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a50      	ldr	r2, [pc, #320]	; (8007504 <HAL_DMA_Abort_IT+0x1c0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d022      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a4f      	ldr	r2, [pc, #316]	; (8007508 <HAL_DMA_Abort_IT+0x1c4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d01d      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a4d      	ldr	r2, [pc, #308]	; (800750c <HAL_DMA_Abort_IT+0x1c8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d018      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a4c      	ldr	r2, [pc, #304]	; (8007510 <HAL_DMA_Abort_IT+0x1cc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a4a      	ldr	r2, [pc, #296]	; (8007514 <HAL_DMA_Abort_IT+0x1d0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00e      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a49      	ldr	r2, [pc, #292]	; (8007518 <HAL_DMA_Abort_IT+0x1d4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a47      	ldr	r2, [pc, #284]	; (800751c <HAL_DMA_Abort_IT+0x1d8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <HAL_DMA_Abort_IT+0xc8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a46      	ldr	r2, [pc, #280]	; (8007520 <HAL_DMA_Abort_IT+0x1dc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d101      	bne.n	8007410 <HAL_DMA_Abort_IT+0xcc>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <HAL_DMA_Abort_IT+0xce>
 8007410:	2300      	movs	r3, #0
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8086 	beq.w	8007524 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2204      	movs	r2, #4
 800741c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2f      	ldr	r2, [pc, #188]	; (80074e4 <HAL_DMA_Abort_IT+0x1a0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d04a      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2e      	ldr	r2, [pc, #184]	; (80074e8 <HAL_DMA_Abort_IT+0x1a4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d045      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2c      	ldr	r2, [pc, #176]	; (80074ec <HAL_DMA_Abort_IT+0x1a8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d040      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2b      	ldr	r2, [pc, #172]	; (80074f0 <HAL_DMA_Abort_IT+0x1ac>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d03b      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a29      	ldr	r2, [pc, #164]	; (80074f4 <HAL_DMA_Abort_IT+0x1b0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d036      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a28      	ldr	r2, [pc, #160]	; (80074f8 <HAL_DMA_Abort_IT+0x1b4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d031      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a26      	ldr	r2, [pc, #152]	; (80074fc <HAL_DMA_Abort_IT+0x1b8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d02c      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a25      	ldr	r2, [pc, #148]	; (8007500 <HAL_DMA_Abort_IT+0x1bc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d027      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a23      	ldr	r2, [pc, #140]	; (8007504 <HAL_DMA_Abort_IT+0x1c0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d022      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a22      	ldr	r2, [pc, #136]	; (8007508 <HAL_DMA_Abort_IT+0x1c4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d01d      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a20      	ldr	r2, [pc, #128]	; (800750c <HAL_DMA_Abort_IT+0x1c8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d018      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <HAL_DMA_Abort_IT+0x1cc>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <HAL_DMA_Abort_IT+0x1d0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00e      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <HAL_DMA_Abort_IT+0x1d4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d009      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1a      	ldr	r2, [pc, #104]	; (800751c <HAL_DMA_Abort_IT+0x1d8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <HAL_DMA_Abort_IT+0x17c>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a19      	ldr	r2, [pc, #100]	; (8007520 <HAL_DMA_Abort_IT+0x1dc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d108      	bne.n	80074d2 <HAL_DMA_Abort_IT+0x18e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	e178      	b.n	80077c4 <HAL_DMA_Abort_IT+0x480>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0201 	bic.w	r2, r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e16f      	b.n	80077c4 <HAL_DMA_Abort_IT+0x480>
 80074e4:	40020010 	.word	0x40020010
 80074e8:	40020028 	.word	0x40020028
 80074ec:	40020040 	.word	0x40020040
 80074f0:	40020058 	.word	0x40020058
 80074f4:	40020070 	.word	0x40020070
 80074f8:	40020088 	.word	0x40020088
 80074fc:	400200a0 	.word	0x400200a0
 8007500:	400200b8 	.word	0x400200b8
 8007504:	40020410 	.word	0x40020410
 8007508:	40020428 	.word	0x40020428
 800750c:	40020440 	.word	0x40020440
 8007510:	40020458 	.word	0x40020458
 8007514:	40020470 	.word	0x40020470
 8007518:	40020488 	.word	0x40020488
 800751c:	400204a0 	.word	0x400204a0
 8007520:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 020e 	bic.w	r2, r2, #14
 8007532:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a6c      	ldr	r2, [pc, #432]	; (80076ec <HAL_DMA_Abort_IT+0x3a8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d04a      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a6b      	ldr	r2, [pc, #428]	; (80076f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d045      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a69      	ldr	r2, [pc, #420]	; (80076f4 <HAL_DMA_Abort_IT+0x3b0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d040      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a68      	ldr	r2, [pc, #416]	; (80076f8 <HAL_DMA_Abort_IT+0x3b4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d03b      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a66      	ldr	r2, [pc, #408]	; (80076fc <HAL_DMA_Abort_IT+0x3b8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d036      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a65      	ldr	r2, [pc, #404]	; (8007700 <HAL_DMA_Abort_IT+0x3bc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d031      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a63      	ldr	r2, [pc, #396]	; (8007704 <HAL_DMA_Abort_IT+0x3c0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d02c      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a62      	ldr	r2, [pc, #392]	; (8007708 <HAL_DMA_Abort_IT+0x3c4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d027      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a60      	ldr	r2, [pc, #384]	; (800770c <HAL_DMA_Abort_IT+0x3c8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d022      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5f      	ldr	r2, [pc, #380]	; (8007710 <HAL_DMA_Abort_IT+0x3cc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d01d      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5d      	ldr	r2, [pc, #372]	; (8007714 <HAL_DMA_Abort_IT+0x3d0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5c      	ldr	r2, [pc, #368]	; (8007718 <HAL_DMA_Abort_IT+0x3d4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d013      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a5a      	ldr	r2, [pc, #360]	; (800771c <HAL_DMA_Abort_IT+0x3d8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a59      	ldr	r2, [pc, #356]	; (8007720 <HAL_DMA_Abort_IT+0x3dc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a57      	ldr	r2, [pc, #348]	; (8007724 <HAL_DMA_Abort_IT+0x3e0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <HAL_DMA_Abort_IT+0x290>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a56      	ldr	r2, [pc, #344]	; (8007728 <HAL_DMA_Abort_IT+0x3e4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d108      	bne.n	80075e6 <HAL_DMA_Abort_IT+0x2a2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0201 	bic.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e007      	b.n	80075f6 <HAL_DMA_Abort_IT+0x2b2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a3c      	ldr	r2, [pc, #240]	; (80076ec <HAL_DMA_Abort_IT+0x3a8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d072      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3a      	ldr	r2, [pc, #232]	; (80076f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d06d      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a39      	ldr	r2, [pc, #228]	; (80076f4 <HAL_DMA_Abort_IT+0x3b0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d068      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a37      	ldr	r2, [pc, #220]	; (80076f8 <HAL_DMA_Abort_IT+0x3b4>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d063      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a36      	ldr	r2, [pc, #216]	; (80076fc <HAL_DMA_Abort_IT+0x3b8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d05e      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a34      	ldr	r2, [pc, #208]	; (8007700 <HAL_DMA_Abort_IT+0x3bc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d059      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a33      	ldr	r2, [pc, #204]	; (8007704 <HAL_DMA_Abort_IT+0x3c0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d054      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a31      	ldr	r2, [pc, #196]	; (8007708 <HAL_DMA_Abort_IT+0x3c4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d04f      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a30      	ldr	r2, [pc, #192]	; (800770c <HAL_DMA_Abort_IT+0x3c8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d04a      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a2e      	ldr	r2, [pc, #184]	; (8007710 <HAL_DMA_Abort_IT+0x3cc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d045      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a2d      	ldr	r2, [pc, #180]	; (8007714 <HAL_DMA_Abort_IT+0x3d0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d040      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2b      	ldr	r2, [pc, #172]	; (8007718 <HAL_DMA_Abort_IT+0x3d4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d03b      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2a      	ldr	r2, [pc, #168]	; (800771c <HAL_DMA_Abort_IT+0x3d8>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d036      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a28      	ldr	r2, [pc, #160]	; (8007720 <HAL_DMA_Abort_IT+0x3dc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d031      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a27      	ldr	r2, [pc, #156]	; (8007724 <HAL_DMA_Abort_IT+0x3e0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d02c      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a25      	ldr	r2, [pc, #148]	; (8007728 <HAL_DMA_Abort_IT+0x3e4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d027      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a24      	ldr	r2, [pc, #144]	; (800772c <HAL_DMA_Abort_IT+0x3e8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d022      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a22      	ldr	r2, [pc, #136]	; (8007730 <HAL_DMA_Abort_IT+0x3ec>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d01d      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a21      	ldr	r2, [pc, #132]	; (8007734 <HAL_DMA_Abort_IT+0x3f0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d018      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <HAL_DMA_Abort_IT+0x3f4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d013      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1e      	ldr	r2, [pc, #120]	; (800773c <HAL_DMA_Abort_IT+0x3f8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00e      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <HAL_DMA_Abort_IT+0x3fc>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <HAL_DMA_Abort_IT+0x400>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d004      	beq.n	80076e6 <HAL_DMA_Abort_IT+0x3a2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a19      	ldr	r2, [pc, #100]	; (8007748 <HAL_DMA_Abort_IT+0x404>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d132      	bne.n	800774c <HAL_DMA_Abort_IT+0x408>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e031      	b.n	800774e <HAL_DMA_Abort_IT+0x40a>
 80076ea:	bf00      	nop
 80076ec:	40020010 	.word	0x40020010
 80076f0:	40020028 	.word	0x40020028
 80076f4:	40020040 	.word	0x40020040
 80076f8:	40020058 	.word	0x40020058
 80076fc:	40020070 	.word	0x40020070
 8007700:	40020088 	.word	0x40020088
 8007704:	400200a0 	.word	0x400200a0
 8007708:	400200b8 	.word	0x400200b8
 800770c:	40020410 	.word	0x40020410
 8007710:	40020428 	.word	0x40020428
 8007714:	40020440 	.word	0x40020440
 8007718:	40020458 	.word	0x40020458
 800771c:	40020470 	.word	0x40020470
 8007720:	40020488 	.word	0x40020488
 8007724:	400204a0 	.word	0x400204a0
 8007728:	400204b8 	.word	0x400204b8
 800772c:	58025408 	.word	0x58025408
 8007730:	5802541c 	.word	0x5802541c
 8007734:	58025430 	.word	0x58025430
 8007738:	58025444 	.word	0x58025444
 800773c:	58025458 	.word	0x58025458
 8007740:	5802546c 	.word	0x5802546c
 8007744:	58025480 	.word	0x58025480
 8007748:	58025494 	.word	0x58025494
 800774c:	2300      	movs	r3, #0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d028      	beq.n	80077a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007760:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2201      	movs	r2, #1
 8007772:	409a      	lsls	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007780:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00c      	beq.n	80077a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007798:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08a      	sub	sp, #40	; 0x28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80077dc:	4b67      	ldr	r3, [pc, #412]	; (800797c <HAL_DMA_IRQHandler+0x1ac>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a67      	ldr	r2, [pc, #412]	; (8007980 <HAL_DMA_IRQHandler+0x1b0>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	0a9b      	lsrs	r3, r3, #10
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a5f      	ldr	r2, [pc, #380]	; (8007984 <HAL_DMA_IRQHandler+0x1b4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d04a      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5d      	ldr	r2, [pc, #372]	; (8007988 <HAL_DMA_IRQHandler+0x1b8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d045      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a5c      	ldr	r2, [pc, #368]	; (800798c <HAL_DMA_IRQHandler+0x1bc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d040      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a5a      	ldr	r2, [pc, #360]	; (8007990 <HAL_DMA_IRQHandler+0x1c0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d03b      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a59      	ldr	r2, [pc, #356]	; (8007994 <HAL_DMA_IRQHandler+0x1c4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d036      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a57      	ldr	r2, [pc, #348]	; (8007998 <HAL_DMA_IRQHandler+0x1c8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d031      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a56      	ldr	r2, [pc, #344]	; (800799c <HAL_DMA_IRQHandler+0x1cc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d02c      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a54      	ldr	r2, [pc, #336]	; (80079a0 <HAL_DMA_IRQHandler+0x1d0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d027      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a53      	ldr	r2, [pc, #332]	; (80079a4 <HAL_DMA_IRQHandler+0x1d4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d022      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a51      	ldr	r2, [pc, #324]	; (80079a8 <HAL_DMA_IRQHandler+0x1d8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01d      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a50      	ldr	r2, [pc, #320]	; (80079ac <HAL_DMA_IRQHandler+0x1dc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d018      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a4e      	ldr	r2, [pc, #312]	; (80079b0 <HAL_DMA_IRQHandler+0x1e0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d013      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a4d      	ldr	r2, [pc, #308]	; (80079b4 <HAL_DMA_IRQHandler+0x1e4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00e      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a4b      	ldr	r2, [pc, #300]	; (80079b8 <HAL_DMA_IRQHandler+0x1e8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d009      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a4a      	ldr	r2, [pc, #296]	; (80079bc <HAL_DMA_IRQHandler+0x1ec>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d004      	beq.n	80078a2 <HAL_DMA_IRQHandler+0xd2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a48      	ldr	r2, [pc, #288]	; (80079c0 <HAL_DMA_IRQHandler+0x1f0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d101      	bne.n	80078a6 <HAL_DMA_IRQHandler+0xd6>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <HAL_DMA_IRQHandler+0xd8>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 842b 	beq.w	8008104 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	2208      	movs	r2, #8
 80078b8:	409a      	lsls	r2, r3
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80a2 	beq.w	8007a08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2e      	ldr	r2, [pc, #184]	; (8007984 <HAL_DMA_IRQHandler+0x1b4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d04a      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a2d      	ldr	r2, [pc, #180]	; (8007988 <HAL_DMA_IRQHandler+0x1b8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d045      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <HAL_DMA_IRQHandler+0x1bc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d040      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <HAL_DMA_IRQHandler+0x1c0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d03b      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a28      	ldr	r2, [pc, #160]	; (8007994 <HAL_DMA_IRQHandler+0x1c4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d036      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a27      	ldr	r2, [pc, #156]	; (8007998 <HAL_DMA_IRQHandler+0x1c8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d031      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a25      	ldr	r2, [pc, #148]	; (800799c <HAL_DMA_IRQHandler+0x1cc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d02c      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a24      	ldr	r2, [pc, #144]	; (80079a0 <HAL_DMA_IRQHandler+0x1d0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d027      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a22      	ldr	r2, [pc, #136]	; (80079a4 <HAL_DMA_IRQHandler+0x1d4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d022      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a21      	ldr	r2, [pc, #132]	; (80079a8 <HAL_DMA_IRQHandler+0x1d8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d01d      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <HAL_DMA_IRQHandler+0x1dc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d018      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_DMA_IRQHandler+0x1e0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d013      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1c      	ldr	r2, [pc, #112]	; (80079b4 <HAL_DMA_IRQHandler+0x1e4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d00e      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <HAL_DMA_IRQHandler+0x1e8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d009      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_DMA_IRQHandler+0x1ec>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_DMA_IRQHandler+0x194>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <HAL_DMA_IRQHandler+0x1f0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d12f      	bne.n	80079c4 <HAL_DMA_IRQHandler+0x1f4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0304 	and.w	r3, r3, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bf14      	ite	ne
 8007972:	2301      	movne	r3, #1
 8007974:	2300      	moveq	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	e02e      	b.n	80079d8 <HAL_DMA_IRQHandler+0x208>
 800797a:	bf00      	nop
 800797c:	24000084 	.word	0x24000084
 8007980:	1b4e81b5 	.word	0x1b4e81b5
 8007984:	40020010 	.word	0x40020010
 8007988:	40020028 	.word	0x40020028
 800798c:	40020040 	.word	0x40020040
 8007990:	40020058 	.word	0x40020058
 8007994:	40020070 	.word	0x40020070
 8007998:	40020088 	.word	0x40020088
 800799c:	400200a0 	.word	0x400200a0
 80079a0:	400200b8 	.word	0x400200b8
 80079a4:	40020410 	.word	0x40020410
 80079a8:	40020428 	.word	0x40020428
 80079ac:	40020440 	.word	0x40020440
 80079b0:	40020458 	.word	0x40020458
 80079b4:	40020470 	.word	0x40020470
 80079b8:	40020488 	.word	0x40020488
 80079bc:	400204a0 	.word	0x400204a0
 80079c0:	400204b8 	.word	0x400204b8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bf14      	ite	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	2300      	moveq	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d015      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0204 	bic.w	r2, r2, #4
 80079ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2208      	movs	r2, #8
 80079f6:	409a      	lsls	r2, r3
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a00:	f043 0201 	orr.w	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	fa22 f303 	lsr.w	r3, r2, r3
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d06e      	beq.n	8007afc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a69      	ldr	r2, [pc, #420]	; (8007bc8 <HAL_DMA_IRQHandler+0x3f8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d04a      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a67      	ldr	r2, [pc, #412]	; (8007bcc <HAL_DMA_IRQHandler+0x3fc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d045      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a66      	ldr	r2, [pc, #408]	; (8007bd0 <HAL_DMA_IRQHandler+0x400>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d040      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a64      	ldr	r2, [pc, #400]	; (8007bd4 <HAL_DMA_IRQHandler+0x404>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d03b      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a63      	ldr	r2, [pc, #396]	; (8007bd8 <HAL_DMA_IRQHandler+0x408>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d036      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a61      	ldr	r2, [pc, #388]	; (8007bdc <HAL_DMA_IRQHandler+0x40c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d031      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a60      	ldr	r2, [pc, #384]	; (8007be0 <HAL_DMA_IRQHandler+0x410>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d02c      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a5e      	ldr	r2, [pc, #376]	; (8007be4 <HAL_DMA_IRQHandler+0x414>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d027      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a5d      	ldr	r2, [pc, #372]	; (8007be8 <HAL_DMA_IRQHandler+0x418>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d022      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a5b      	ldr	r2, [pc, #364]	; (8007bec <HAL_DMA_IRQHandler+0x41c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d01d      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a5a      	ldr	r2, [pc, #360]	; (8007bf0 <HAL_DMA_IRQHandler+0x420>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d018      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a58      	ldr	r2, [pc, #352]	; (8007bf4 <HAL_DMA_IRQHandler+0x424>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a57      	ldr	r2, [pc, #348]	; (8007bf8 <HAL_DMA_IRQHandler+0x428>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00e      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a55      	ldr	r2, [pc, #340]	; (8007bfc <HAL_DMA_IRQHandler+0x42c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a54      	ldr	r2, [pc, #336]	; (8007c00 <HAL_DMA_IRQHandler+0x430>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_DMA_IRQHandler+0x2ee>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a52      	ldr	r2, [pc, #328]	; (8007c04 <HAL_DMA_IRQHandler+0x434>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d10a      	bne.n	8007ad4 <HAL_DMA_IRQHandler+0x304>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	e003      	b.n	8007adc <HAL_DMA_IRQHandler+0x30c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2300      	movs	r3, #0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	2201      	movs	r2, #1
 8007aea:	409a      	lsls	r2, r3
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f043 0202 	orr.w	r2, r3, #2
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2204      	movs	r2, #4
 8007b06:	409a      	lsls	r2, r3
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 808f 	beq.w	8007c30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a2c      	ldr	r2, [pc, #176]	; (8007bc8 <HAL_DMA_IRQHandler+0x3f8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d04a      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a2a      	ldr	r2, [pc, #168]	; (8007bcc <HAL_DMA_IRQHandler+0x3fc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d045      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a29      	ldr	r2, [pc, #164]	; (8007bd0 <HAL_DMA_IRQHandler+0x400>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d040      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a27      	ldr	r2, [pc, #156]	; (8007bd4 <HAL_DMA_IRQHandler+0x404>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d03b      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a26      	ldr	r2, [pc, #152]	; (8007bd8 <HAL_DMA_IRQHandler+0x408>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d036      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a24      	ldr	r2, [pc, #144]	; (8007bdc <HAL_DMA_IRQHandler+0x40c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d031      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a23      	ldr	r2, [pc, #140]	; (8007be0 <HAL_DMA_IRQHandler+0x410>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d02c      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a21      	ldr	r2, [pc, #132]	; (8007be4 <HAL_DMA_IRQHandler+0x414>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d027      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a20      	ldr	r2, [pc, #128]	; (8007be8 <HAL_DMA_IRQHandler+0x418>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d022      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <HAL_DMA_IRQHandler+0x41c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01d      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1d      	ldr	r2, [pc, #116]	; (8007bf0 <HAL_DMA_IRQHandler+0x420>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d018      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a1b      	ldr	r2, [pc, #108]	; (8007bf4 <HAL_DMA_IRQHandler+0x424>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1a      	ldr	r2, [pc, #104]	; (8007bf8 <HAL_DMA_IRQHandler+0x428>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00e      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <HAL_DMA_IRQHandler+0x42c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d009      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <HAL_DMA_IRQHandler+0x430>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_DMA_IRQHandler+0x3e2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <HAL_DMA_IRQHandler+0x434>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d12a      	bne.n	8007c08 <HAL_DMA_IRQHandler+0x438>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e023      	b.n	8007c10 <HAL_DMA_IRQHandler+0x440>
 8007bc8:	40020010 	.word	0x40020010
 8007bcc:	40020028 	.word	0x40020028
 8007bd0:	40020040 	.word	0x40020040
 8007bd4:	40020058 	.word	0x40020058
 8007bd8:	40020070 	.word	0x40020070
 8007bdc:	40020088 	.word	0x40020088
 8007be0:	400200a0 	.word	0x400200a0
 8007be4:	400200b8 	.word	0x400200b8
 8007be8:	40020410 	.word	0x40020410
 8007bec:	40020428 	.word	0x40020428
 8007bf0:	40020440 	.word	0x40020440
 8007bf4:	40020458 	.word	0x40020458
 8007bf8:	40020470 	.word	0x40020470
 8007bfc:	40020488 	.word	0x40020488
 8007c00:	400204a0 	.word	0x400204a0
 8007c04:	400204b8 	.word	0x400204b8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00d      	beq.n	8007c30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c18:	f003 031f 	and.w	r3, r3, #31
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	409a      	lsls	r2, r3
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	f043 0204 	orr.w	r2, r3, #4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2210      	movs	r2, #16
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80a6 	beq.w	8007d92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a85      	ldr	r2, [pc, #532]	; (8007e60 <HAL_DMA_IRQHandler+0x690>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d04a      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a83      	ldr	r2, [pc, #524]	; (8007e64 <HAL_DMA_IRQHandler+0x694>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d045      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a82      	ldr	r2, [pc, #520]	; (8007e68 <HAL_DMA_IRQHandler+0x698>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d040      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a80      	ldr	r2, [pc, #512]	; (8007e6c <HAL_DMA_IRQHandler+0x69c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d03b      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a7f      	ldr	r2, [pc, #508]	; (8007e70 <HAL_DMA_IRQHandler+0x6a0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d036      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a7d      	ldr	r2, [pc, #500]	; (8007e74 <HAL_DMA_IRQHandler+0x6a4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d031      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a7c      	ldr	r2, [pc, #496]	; (8007e78 <HAL_DMA_IRQHandler+0x6a8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d02c      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a7a      	ldr	r2, [pc, #488]	; (8007e7c <HAL_DMA_IRQHandler+0x6ac>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d027      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a79      	ldr	r2, [pc, #484]	; (8007e80 <HAL_DMA_IRQHandler+0x6b0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d022      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a77      	ldr	r2, [pc, #476]	; (8007e84 <HAL_DMA_IRQHandler+0x6b4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01d      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a76      	ldr	r2, [pc, #472]	; (8007e88 <HAL_DMA_IRQHandler+0x6b8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d018      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a74      	ldr	r2, [pc, #464]	; (8007e8c <HAL_DMA_IRQHandler+0x6bc>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a73      	ldr	r2, [pc, #460]	; (8007e90 <HAL_DMA_IRQHandler+0x6c0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a71      	ldr	r2, [pc, #452]	; (8007e94 <HAL_DMA_IRQHandler+0x6c4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d009      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a70      	ldr	r2, [pc, #448]	; (8007e98 <HAL_DMA_IRQHandler+0x6c8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d004      	beq.n	8007ce6 <HAL_DMA_IRQHandler+0x516>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a6e      	ldr	r2, [pc, #440]	; (8007e9c <HAL_DMA_IRQHandler+0x6cc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d10a      	bne.n	8007cfc <HAL_DMA_IRQHandler+0x52c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bf14      	ite	ne
 8007cf4:	2301      	movne	r3, #1
 8007cf6:	2300      	moveq	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	e009      	b.n	8007d10 <HAL_DMA_IRQHandler+0x540>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d03e      	beq.n	8007d92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d018      	beq.n	8007d64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d108      	bne.n	8007d52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d024      	beq.n	8007d92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
 8007d50:	e01f      	b.n	8007d92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01b      	beq.n	8007d92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	e016      	b.n	8007d92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0208 	bic.w	r2, r2, #8
 8007d80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	409a      	lsls	r2, r3
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f000 8110 	beq.w	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2c      	ldr	r2, [pc, #176]	; (8007e60 <HAL_DMA_IRQHandler+0x690>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d04a      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2b      	ldr	r2, [pc, #172]	; (8007e64 <HAL_DMA_IRQHandler+0x694>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d045      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <HAL_DMA_IRQHandler+0x698>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d040      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a28      	ldr	r2, [pc, #160]	; (8007e6c <HAL_DMA_IRQHandler+0x69c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d03b      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <HAL_DMA_IRQHandler+0x6a0>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d036      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a25      	ldr	r2, [pc, #148]	; (8007e74 <HAL_DMA_IRQHandler+0x6a4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d031      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a23      	ldr	r2, [pc, #140]	; (8007e78 <HAL_DMA_IRQHandler+0x6a8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d02c      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <HAL_DMA_IRQHandler+0x6ac>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d027      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a20      	ldr	r2, [pc, #128]	; (8007e80 <HAL_DMA_IRQHandler+0x6b0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d022      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1f      	ldr	r2, [pc, #124]	; (8007e84 <HAL_DMA_IRQHandler+0x6b4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d01d      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1d      	ldr	r2, [pc, #116]	; (8007e88 <HAL_DMA_IRQHandler+0x6b8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d018      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <HAL_DMA_IRQHandler+0x6bc>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d013      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <HAL_DMA_IRQHandler+0x6c0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00e      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <HAL_DMA_IRQHandler+0x6c4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d009      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <HAL_DMA_IRQHandler+0x6c8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d004      	beq.n	8007e48 <HAL_DMA_IRQHandler+0x678>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <HAL_DMA_IRQHandler+0x6cc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d12b      	bne.n	8007ea0 <HAL_DMA_IRQHandler+0x6d0>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bf14      	ite	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	2300      	moveq	r3, #0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	e02a      	b.n	8007eb4 <HAL_DMA_IRQHandler+0x6e4>
 8007e5e:	bf00      	nop
 8007e60:	40020010 	.word	0x40020010
 8007e64:	40020028 	.word	0x40020028
 8007e68:	40020040 	.word	0x40020040
 8007e6c:	40020058 	.word	0x40020058
 8007e70:	40020070 	.word	0x40020070
 8007e74:	40020088 	.word	0x40020088
 8007e78:	400200a0 	.word	0x400200a0
 8007e7c:	400200b8 	.word	0x400200b8
 8007e80:	40020410 	.word	0x40020410
 8007e84:	40020428 	.word	0x40020428
 8007e88:	40020440 	.word	0x40020440
 8007e8c:	40020458 	.word	0x40020458
 8007e90:	40020470 	.word	0x40020470
 8007e94:	40020488 	.word	0x40020488
 8007e98:	400204a0 	.word	0x400204a0
 8007e9c:	400204b8 	.word	0x400204b8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8087 	beq.w	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebe:	f003 031f 	and.w	r3, r3, #31
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	409a      	lsls	r2, r3
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d139      	bne.n	8007f4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0216 	bic.w	r2, r2, #22
 8007ee4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ef4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <HAL_DMA_IRQHandler+0x736>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0208 	bic.w	r2, r2, #8
 8007f14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	223f      	movs	r2, #63	; 0x3f
 8007f20:	409a      	lsls	r2, r3
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 834a 	beq.w	80085d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
          }
          return;
 8007f48:	e344      	b.n	80085d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d018      	beq.n	8007f8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d108      	bne.n	8007f78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d02c      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
 8007f76:	e027      	b.n	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d023      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
 8007f88:	e01e      	b.n	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10f      	bne.n	8007fb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0210 	bic.w	r2, r2, #16
 8007fa6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8306 	beq.w	80085de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 8088 	beq.w	80080f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a7a      	ldr	r2, [pc, #488]	; (80081d8 <HAL_DMA_IRQHandler+0xa08>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d04a      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a79      	ldr	r2, [pc, #484]	; (80081dc <HAL_DMA_IRQHandler+0xa0c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d045      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a77      	ldr	r2, [pc, #476]	; (80081e0 <HAL_DMA_IRQHandler+0xa10>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d040      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a76      	ldr	r2, [pc, #472]	; (80081e4 <HAL_DMA_IRQHandler+0xa14>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d03b      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a74      	ldr	r2, [pc, #464]	; (80081e8 <HAL_DMA_IRQHandler+0xa18>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d036      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a73      	ldr	r2, [pc, #460]	; (80081ec <HAL_DMA_IRQHandler+0xa1c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d031      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a71      	ldr	r2, [pc, #452]	; (80081f0 <HAL_DMA_IRQHandler+0xa20>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d02c      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a70      	ldr	r2, [pc, #448]	; (80081f4 <HAL_DMA_IRQHandler+0xa24>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d027      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a6e      	ldr	r2, [pc, #440]	; (80081f8 <HAL_DMA_IRQHandler+0xa28>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d022      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a6d      	ldr	r2, [pc, #436]	; (80081fc <HAL_DMA_IRQHandler+0xa2c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d01d      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a6b      	ldr	r2, [pc, #428]	; (8008200 <HAL_DMA_IRQHandler+0xa30>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d018      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a6a      	ldr	r2, [pc, #424]	; (8008204 <HAL_DMA_IRQHandler+0xa34>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d013      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a68      	ldr	r2, [pc, #416]	; (8008208 <HAL_DMA_IRQHandler+0xa38>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00e      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a67      	ldr	r2, [pc, #412]	; (800820c <HAL_DMA_IRQHandler+0xa3c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d009      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a65      	ldr	r2, [pc, #404]	; (8008210 <HAL_DMA_IRQHandler+0xa40>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <HAL_DMA_IRQHandler+0x8b8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a64      	ldr	r2, [pc, #400]	; (8008214 <HAL_DMA_IRQHandler+0xa44>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d108      	bne.n	800809a <HAL_DMA_IRQHandler+0x8ca>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e007      	b.n	80080aa <HAL_DMA_IRQHandler+0x8da>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0201 	bic.w	r2, r2, #1
 80080a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d307      	bcc.n	80080c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f2      	bne.n	80080aa <HAL_DMA_IRQHandler+0x8da>
 80080c4:	e000      	b.n	80080c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80080c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2203      	movs	r2, #3
 80080da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80080de:	e003      	b.n	80080e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8272 	beq.w	80085de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
 8008102:	e26c      	b.n	80085de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a43      	ldr	r2, [pc, #268]	; (8008218 <HAL_DMA_IRQHandler+0xa48>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d022      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a42      	ldr	r2, [pc, #264]	; (800821c <HAL_DMA_IRQHandler+0xa4c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d01d      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a40      	ldr	r2, [pc, #256]	; (8008220 <HAL_DMA_IRQHandler+0xa50>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d018      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a3f      	ldr	r2, [pc, #252]	; (8008224 <HAL_DMA_IRQHandler+0xa54>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d013      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a3d      	ldr	r2, [pc, #244]	; (8008228 <HAL_DMA_IRQHandler+0xa58>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00e      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a3c      	ldr	r2, [pc, #240]	; (800822c <HAL_DMA_IRQHandler+0xa5c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d009      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a3a      	ldr	r2, [pc, #232]	; (8008230 <HAL_DMA_IRQHandler+0xa60>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_DMA_IRQHandler+0x984>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a39      	ldr	r2, [pc, #228]	; (8008234 <HAL_DMA_IRQHandler+0xa64>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d101      	bne.n	8008158 <HAL_DMA_IRQHandler+0x988>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <HAL_DMA_IRQHandler+0x98a>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 823f 	beq.w	80085de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816c:	f003 031f 	and.w	r3, r3, #31
 8008170:	2204      	movs	r2, #4
 8008172:	409a      	lsls	r2, r3
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4013      	ands	r3, r2
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80cd 	beq.w	8008318 <HAL_DMA_IRQHandler+0xb48>
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80c7 	beq.w	8008318 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2204      	movs	r2, #4
 8008194:	409a      	lsls	r2, r3
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d049      	beq.n	8008238 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d109      	bne.n	80081c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8210 	beq.w	80085d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081c0:	e20a      	b.n	80085d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8206 	beq.w	80085d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081d4:	e200      	b.n	80085d8 <HAL_DMA_IRQHandler+0xe08>
 80081d6:	bf00      	nop
 80081d8:	40020010 	.word	0x40020010
 80081dc:	40020028 	.word	0x40020028
 80081e0:	40020040 	.word	0x40020040
 80081e4:	40020058 	.word	0x40020058
 80081e8:	40020070 	.word	0x40020070
 80081ec:	40020088 	.word	0x40020088
 80081f0:	400200a0 	.word	0x400200a0
 80081f4:	400200b8 	.word	0x400200b8
 80081f8:	40020410 	.word	0x40020410
 80081fc:	40020428 	.word	0x40020428
 8008200:	40020440 	.word	0x40020440
 8008204:	40020458 	.word	0x40020458
 8008208:	40020470 	.word	0x40020470
 800820c:	40020488 	.word	0x40020488
 8008210:	400204a0 	.word	0x400204a0
 8008214:	400204b8 	.word	0x400204b8
 8008218:	58025408 	.word	0x58025408
 800821c:	5802541c 	.word	0x5802541c
 8008220:	58025430 	.word	0x58025430
 8008224:	58025444 	.word	0x58025444
 8008228:	58025458 	.word	0x58025458
 800822c:	5802546c 	.word	0x5802546c
 8008230:	58025480 	.word	0x58025480
 8008234:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d160      	bne.n	8008304 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a7f      	ldr	r2, [pc, #508]	; (8008444 <HAL_DMA_IRQHandler+0xc74>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d04a      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a7d      	ldr	r2, [pc, #500]	; (8008448 <HAL_DMA_IRQHandler+0xc78>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d045      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a7c      	ldr	r2, [pc, #496]	; (800844c <HAL_DMA_IRQHandler+0xc7c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d040      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a7a      	ldr	r2, [pc, #488]	; (8008450 <HAL_DMA_IRQHandler+0xc80>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d03b      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a79      	ldr	r2, [pc, #484]	; (8008454 <HAL_DMA_IRQHandler+0xc84>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d036      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a77      	ldr	r2, [pc, #476]	; (8008458 <HAL_DMA_IRQHandler+0xc88>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d031      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a76      	ldr	r2, [pc, #472]	; (800845c <HAL_DMA_IRQHandler+0xc8c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d02c      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a74      	ldr	r2, [pc, #464]	; (8008460 <HAL_DMA_IRQHandler+0xc90>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d027      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a73      	ldr	r2, [pc, #460]	; (8008464 <HAL_DMA_IRQHandler+0xc94>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d022      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a71      	ldr	r2, [pc, #452]	; (8008468 <HAL_DMA_IRQHandler+0xc98>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d01d      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a70      	ldr	r2, [pc, #448]	; (800846c <HAL_DMA_IRQHandler+0xc9c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d018      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a6e      	ldr	r2, [pc, #440]	; (8008470 <HAL_DMA_IRQHandler+0xca0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a6d      	ldr	r2, [pc, #436]	; (8008474 <HAL_DMA_IRQHandler+0xca4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00e      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a6b      	ldr	r2, [pc, #428]	; (8008478 <HAL_DMA_IRQHandler+0xca8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d009      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a6a      	ldr	r2, [pc, #424]	; (800847c <HAL_DMA_IRQHandler+0xcac>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d004      	beq.n	80082e2 <HAL_DMA_IRQHandler+0xb12>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a68      	ldr	r2, [pc, #416]	; (8008480 <HAL_DMA_IRQHandler+0xcb0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <HAL_DMA_IRQHandler+0xb24>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0208 	bic.w	r2, r2, #8
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e007      	b.n	8008304 <HAL_DMA_IRQHandler+0xb34>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0204 	bic.w	r2, r2, #4
 8008302:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8165 	beq.w	80085d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008316:	e15f      	b.n	80085d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831c:	f003 031f 	and.w	r3, r3, #31
 8008320:	2202      	movs	r2, #2
 8008322:	409a      	lsls	r2, r3
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	4013      	ands	r3, r2
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 80c5 	beq.w	80084b8 <HAL_DMA_IRQHandler+0xce8>
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80bf 	beq.w	80084b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833e:	f003 031f 	and.w	r3, r3, #31
 8008342:	2202      	movs	r2, #2
 8008344:	409a      	lsls	r2, r3
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d018      	beq.n	8008386 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 813a 	beq.w	80085dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008370:	e134      	b.n	80085dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8130 	beq.w	80085dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008384:	e12a      	b.n	80085dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 8089 	bne.w	80084a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a2b      	ldr	r2, [pc, #172]	; (8008444 <HAL_DMA_IRQHandler+0xc74>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d04a      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a29      	ldr	r2, [pc, #164]	; (8008448 <HAL_DMA_IRQHandler+0xc78>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d045      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a28      	ldr	r2, [pc, #160]	; (800844c <HAL_DMA_IRQHandler+0xc7c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d040      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a26      	ldr	r2, [pc, #152]	; (8008450 <HAL_DMA_IRQHandler+0xc80>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d03b      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a25      	ldr	r2, [pc, #148]	; (8008454 <HAL_DMA_IRQHandler+0xc84>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d036      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a23      	ldr	r2, [pc, #140]	; (8008458 <HAL_DMA_IRQHandler+0xc88>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d031      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a22      	ldr	r2, [pc, #136]	; (800845c <HAL_DMA_IRQHandler+0xc8c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d02c      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a20      	ldr	r2, [pc, #128]	; (8008460 <HAL_DMA_IRQHandler+0xc90>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d027      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1f      	ldr	r2, [pc, #124]	; (8008464 <HAL_DMA_IRQHandler+0xc94>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d022      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <HAL_DMA_IRQHandler+0xc98>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d01d      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1c      	ldr	r2, [pc, #112]	; (800846c <HAL_DMA_IRQHandler+0xc9c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d018      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <HAL_DMA_IRQHandler+0xca0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a19      	ldr	r2, [pc, #100]	; (8008474 <HAL_DMA_IRQHandler+0xca4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00e      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a17      	ldr	r2, [pc, #92]	; (8008478 <HAL_DMA_IRQHandler+0xca8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d009      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <HAL_DMA_IRQHandler+0xcac>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d004      	beq.n	8008432 <HAL_DMA_IRQHandler+0xc62>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a14      	ldr	r2, [pc, #80]	; (8008480 <HAL_DMA_IRQHandler+0xcb0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d128      	bne.n	8008484 <HAL_DMA_IRQHandler+0xcb4>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0214 	bic.w	r2, r2, #20
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	e027      	b.n	8008494 <HAL_DMA_IRQHandler+0xcc4>
 8008444:	40020010 	.word	0x40020010
 8008448:	40020028 	.word	0x40020028
 800844c:	40020040 	.word	0x40020040
 8008450:	40020058 	.word	0x40020058
 8008454:	40020070 	.word	0x40020070
 8008458:	40020088 	.word	0x40020088
 800845c:	400200a0 	.word	0x400200a0
 8008460:	400200b8 	.word	0x400200b8
 8008464:	40020410 	.word	0x40020410
 8008468:	40020428 	.word	0x40020428
 800846c:	40020440 	.word	0x40020440
 8008470:	40020458 	.word	0x40020458
 8008474:	40020470 	.word	0x40020470
 8008478:	40020488 	.word	0x40020488
 800847c:	400204a0 	.word	0x400204a0
 8008480:	400204b8 	.word	0x400204b8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 020a 	bic.w	r2, r2, #10
 8008492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8097 	beq.w	80085dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084b6:	e091      	b.n	80085dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	2208      	movs	r2, #8
 80084c2:	409a      	lsls	r2, r3
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 8088 	beq.w	80085de <HAL_DMA_IRQHandler+0xe0e>
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 8082 	beq.w	80085de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a41      	ldr	r2, [pc, #260]	; (80085e4 <HAL_DMA_IRQHandler+0xe14>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d04a      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a3f      	ldr	r2, [pc, #252]	; (80085e8 <HAL_DMA_IRQHandler+0xe18>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d045      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a3e      	ldr	r2, [pc, #248]	; (80085ec <HAL_DMA_IRQHandler+0xe1c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d040      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a3c      	ldr	r2, [pc, #240]	; (80085f0 <HAL_DMA_IRQHandler+0xe20>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d03b      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a3b      	ldr	r2, [pc, #236]	; (80085f4 <HAL_DMA_IRQHandler+0xe24>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d036      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a39      	ldr	r2, [pc, #228]	; (80085f8 <HAL_DMA_IRQHandler+0xe28>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d031      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a38      	ldr	r2, [pc, #224]	; (80085fc <HAL_DMA_IRQHandler+0xe2c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d02c      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a36      	ldr	r2, [pc, #216]	; (8008600 <HAL_DMA_IRQHandler+0xe30>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d027      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a35      	ldr	r2, [pc, #212]	; (8008604 <HAL_DMA_IRQHandler+0xe34>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d022      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a33      	ldr	r2, [pc, #204]	; (8008608 <HAL_DMA_IRQHandler+0xe38>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d01d      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a32      	ldr	r2, [pc, #200]	; (800860c <HAL_DMA_IRQHandler+0xe3c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d018      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a30      	ldr	r2, [pc, #192]	; (8008610 <HAL_DMA_IRQHandler+0xe40>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d013      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a2f      	ldr	r2, [pc, #188]	; (8008614 <HAL_DMA_IRQHandler+0xe44>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00e      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <HAL_DMA_IRQHandler+0xe48>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d009      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a2c      	ldr	r2, [pc, #176]	; (800861c <HAL_DMA_IRQHandler+0xe4c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d004      	beq.n	800857a <HAL_DMA_IRQHandler+0xdaa>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <HAL_DMA_IRQHandler+0xe50>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d108      	bne.n	800858c <HAL_DMA_IRQHandler+0xdbc>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 021c 	bic.w	r2, r2, #28
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e007      	b.n	800859c <HAL_DMA_IRQHandler+0xdcc>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 020e 	bic.w	r2, r2, #14
 800859a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a0:	f003 031f 	and.w	r3, r3, #31
 80085a4:	2201      	movs	r2, #1
 80085a6:	409a      	lsls	r2, r3
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	e004      	b.n	80085de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80085d4:	bf00      	nop
 80085d6:	e002      	b.n	80085de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085d8:	bf00      	nop
 80085da:	e000      	b.n	80085de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085de:	3728      	adds	r7, #40	; 0x28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40020010 	.word	0x40020010
 80085e8:	40020028 	.word	0x40020028
 80085ec:	40020040 	.word	0x40020040
 80085f0:	40020058 	.word	0x40020058
 80085f4:	40020070 	.word	0x40020070
 80085f8:	40020088 	.word	0x40020088
 80085fc:	400200a0 	.word	0x400200a0
 8008600:	400200b8 	.word	0x400200b8
 8008604:	40020410 	.word	0x40020410
 8008608:	40020428 	.word	0x40020428
 800860c:	40020440 	.word	0x40020440
 8008610:	40020458 	.word	0x40020458
 8008614:	40020470 	.word	0x40020470
 8008618:	40020488 	.word	0x40020488
 800861c:	400204a0 	.word	0x400204a0
 8008620:	400204b8 	.word	0x400204b8

08008624 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008654:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a7f      	ldr	r2, [pc, #508]	; (8008858 <DMA_SetConfig+0x21c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d072      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a7d      	ldr	r2, [pc, #500]	; (800885c <DMA_SetConfig+0x220>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d06d      	beq.n	8008746 <DMA_SetConfig+0x10a>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a7c      	ldr	r2, [pc, #496]	; (8008860 <DMA_SetConfig+0x224>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d068      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a7a      	ldr	r2, [pc, #488]	; (8008864 <DMA_SetConfig+0x228>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d063      	beq.n	8008746 <DMA_SetConfig+0x10a>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a79      	ldr	r2, [pc, #484]	; (8008868 <DMA_SetConfig+0x22c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d05e      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a77      	ldr	r2, [pc, #476]	; (800886c <DMA_SetConfig+0x230>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d059      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a76      	ldr	r2, [pc, #472]	; (8008870 <DMA_SetConfig+0x234>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d054      	beq.n	8008746 <DMA_SetConfig+0x10a>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a74      	ldr	r2, [pc, #464]	; (8008874 <DMA_SetConfig+0x238>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d04f      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a73      	ldr	r2, [pc, #460]	; (8008878 <DMA_SetConfig+0x23c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d04a      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a71      	ldr	r2, [pc, #452]	; (800887c <DMA_SetConfig+0x240>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d045      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a70      	ldr	r2, [pc, #448]	; (8008880 <DMA_SetConfig+0x244>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d040      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a6e      	ldr	r2, [pc, #440]	; (8008884 <DMA_SetConfig+0x248>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d03b      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a6d      	ldr	r2, [pc, #436]	; (8008888 <DMA_SetConfig+0x24c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d036      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a6b      	ldr	r2, [pc, #428]	; (800888c <DMA_SetConfig+0x250>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d031      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a6a      	ldr	r2, [pc, #424]	; (8008890 <DMA_SetConfig+0x254>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d02c      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a68      	ldr	r2, [pc, #416]	; (8008894 <DMA_SetConfig+0x258>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d027      	beq.n	8008746 <DMA_SetConfig+0x10a>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a67      	ldr	r2, [pc, #412]	; (8008898 <DMA_SetConfig+0x25c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d022      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a65      	ldr	r2, [pc, #404]	; (800889c <DMA_SetConfig+0x260>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01d      	beq.n	8008746 <DMA_SetConfig+0x10a>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a64      	ldr	r2, [pc, #400]	; (80088a0 <DMA_SetConfig+0x264>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d018      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a62      	ldr	r2, [pc, #392]	; (80088a4 <DMA_SetConfig+0x268>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <DMA_SetConfig+0x10a>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a61      	ldr	r2, [pc, #388]	; (80088a8 <DMA_SetConfig+0x26c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a5f      	ldr	r2, [pc, #380]	; (80088ac <DMA_SetConfig+0x270>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <DMA_SetConfig+0x10a>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a5e      	ldr	r2, [pc, #376]	; (80088b0 <DMA_SetConfig+0x274>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <DMA_SetConfig+0x10a>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a5c      	ldr	r2, [pc, #368]	; (80088b4 <DMA_SetConfig+0x278>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d101      	bne.n	800874a <DMA_SetConfig+0x10e>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <DMA_SetConfig+0x110>
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008758:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800876a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a39      	ldr	r2, [pc, #228]	; (8008858 <DMA_SetConfig+0x21c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d04a      	beq.n	800880c <DMA_SetConfig+0x1d0>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a38      	ldr	r2, [pc, #224]	; (800885c <DMA_SetConfig+0x220>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d045      	beq.n	800880c <DMA_SetConfig+0x1d0>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a36      	ldr	r2, [pc, #216]	; (8008860 <DMA_SetConfig+0x224>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d040      	beq.n	800880c <DMA_SetConfig+0x1d0>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a35      	ldr	r2, [pc, #212]	; (8008864 <DMA_SetConfig+0x228>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d03b      	beq.n	800880c <DMA_SetConfig+0x1d0>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a33      	ldr	r2, [pc, #204]	; (8008868 <DMA_SetConfig+0x22c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d036      	beq.n	800880c <DMA_SetConfig+0x1d0>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a32      	ldr	r2, [pc, #200]	; (800886c <DMA_SetConfig+0x230>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d031      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a30      	ldr	r2, [pc, #192]	; (8008870 <DMA_SetConfig+0x234>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d02c      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2f      	ldr	r2, [pc, #188]	; (8008874 <DMA_SetConfig+0x238>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d027      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a2d      	ldr	r2, [pc, #180]	; (8008878 <DMA_SetConfig+0x23c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d022      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <DMA_SetConfig+0x240>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d01d      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <DMA_SetConfig+0x244>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d018      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a29      	ldr	r2, [pc, #164]	; (8008884 <DMA_SetConfig+0x248>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d013      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a27      	ldr	r2, [pc, #156]	; (8008888 <DMA_SetConfig+0x24c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00e      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a26      	ldr	r2, [pc, #152]	; (800888c <DMA_SetConfig+0x250>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d009      	beq.n	800880c <DMA_SetConfig+0x1d0>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a24      	ldr	r2, [pc, #144]	; (8008890 <DMA_SetConfig+0x254>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d004      	beq.n	800880c <DMA_SetConfig+0x1d0>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a23      	ldr	r2, [pc, #140]	; (8008894 <DMA_SetConfig+0x258>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d101      	bne.n	8008810 <DMA_SetConfig+0x1d4>
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <DMA_SetConfig+0x1d6>
 8008810:	2300      	movs	r3, #0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d059      	beq.n	80088ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	223f      	movs	r2, #63	; 0x3f
 8008820:	409a      	lsls	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008834:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b40      	cmp	r3, #64	; 0x40
 8008844:	d138      	bne.n	80088b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008856:	e086      	b.n	8008966 <DMA_SetConfig+0x32a>
 8008858:	40020010 	.word	0x40020010
 800885c:	40020028 	.word	0x40020028
 8008860:	40020040 	.word	0x40020040
 8008864:	40020058 	.word	0x40020058
 8008868:	40020070 	.word	0x40020070
 800886c:	40020088 	.word	0x40020088
 8008870:	400200a0 	.word	0x400200a0
 8008874:	400200b8 	.word	0x400200b8
 8008878:	40020410 	.word	0x40020410
 800887c:	40020428 	.word	0x40020428
 8008880:	40020440 	.word	0x40020440
 8008884:	40020458 	.word	0x40020458
 8008888:	40020470 	.word	0x40020470
 800888c:	40020488 	.word	0x40020488
 8008890:	400204a0 	.word	0x400204a0
 8008894:	400204b8 	.word	0x400204b8
 8008898:	58025408 	.word	0x58025408
 800889c:	5802541c 	.word	0x5802541c
 80088a0:	58025430 	.word	0x58025430
 80088a4:	58025444 	.word	0x58025444
 80088a8:	58025458 	.word	0x58025458
 80088ac:	5802546c 	.word	0x5802546c
 80088b0:	58025480 	.word	0x58025480
 80088b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	60da      	str	r2, [r3, #12]
}
 80088c8:	e04d      	b.n	8008966 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a29      	ldr	r2, [pc, #164]	; (8008974 <DMA_SetConfig+0x338>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d022      	beq.n	800891a <DMA_SetConfig+0x2de>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a27      	ldr	r2, [pc, #156]	; (8008978 <DMA_SetConfig+0x33c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01d      	beq.n	800891a <DMA_SetConfig+0x2de>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a26      	ldr	r2, [pc, #152]	; (800897c <DMA_SetConfig+0x340>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d018      	beq.n	800891a <DMA_SetConfig+0x2de>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a24      	ldr	r2, [pc, #144]	; (8008980 <DMA_SetConfig+0x344>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <DMA_SetConfig+0x2de>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a23      	ldr	r2, [pc, #140]	; (8008984 <DMA_SetConfig+0x348>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00e      	beq.n	800891a <DMA_SetConfig+0x2de>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a21      	ldr	r2, [pc, #132]	; (8008988 <DMA_SetConfig+0x34c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d009      	beq.n	800891a <DMA_SetConfig+0x2de>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a20      	ldr	r2, [pc, #128]	; (800898c <DMA_SetConfig+0x350>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d004      	beq.n	800891a <DMA_SetConfig+0x2de>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <DMA_SetConfig+0x354>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d101      	bne.n	800891e <DMA_SetConfig+0x2e2>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <DMA_SetConfig+0x2e4>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d020      	beq.n	8008966 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	2201      	movs	r2, #1
 800892e:	409a      	lsls	r2, r3
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b40      	cmp	r3, #64	; 0x40
 8008942:	d108      	bne.n	8008956 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	60da      	str	r2, [r3, #12]
}
 8008954:	e007      	b.n	8008966 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	60da      	str	r2, [r3, #12]
}
 8008966:	bf00      	nop
 8008968:	371c      	adds	r7, #28
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	58025408 	.word	0x58025408
 8008978:	5802541c 	.word	0x5802541c
 800897c:	58025430 	.word	0x58025430
 8008980:	58025444 	.word	0x58025444
 8008984:	58025458 	.word	0x58025458
 8008988:	5802546c 	.word	0x5802546c
 800898c:	58025480 	.word	0x58025480
 8008990:	58025494 	.word	0x58025494

08008994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a42      	ldr	r2, [pc, #264]	; (8008aac <DMA_CalcBaseAndBitshift+0x118>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d04a      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a41      	ldr	r2, [pc, #260]	; (8008ab0 <DMA_CalcBaseAndBitshift+0x11c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d045      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a3f      	ldr	r2, [pc, #252]	; (8008ab4 <DMA_CalcBaseAndBitshift+0x120>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d040      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a3e      	ldr	r2, [pc, #248]	; (8008ab8 <DMA_CalcBaseAndBitshift+0x124>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d03b      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a3c      	ldr	r2, [pc, #240]	; (8008abc <DMA_CalcBaseAndBitshift+0x128>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d036      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a3b      	ldr	r2, [pc, #236]	; (8008ac0 <DMA_CalcBaseAndBitshift+0x12c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d031      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a39      	ldr	r2, [pc, #228]	; (8008ac4 <DMA_CalcBaseAndBitshift+0x130>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d02c      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a38      	ldr	r2, [pc, #224]	; (8008ac8 <DMA_CalcBaseAndBitshift+0x134>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d027      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a36      	ldr	r2, [pc, #216]	; (8008acc <DMA_CalcBaseAndBitshift+0x138>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d022      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a35      	ldr	r2, [pc, #212]	; (8008ad0 <DMA_CalcBaseAndBitshift+0x13c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d01d      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a33      	ldr	r2, [pc, #204]	; (8008ad4 <DMA_CalcBaseAndBitshift+0x140>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d018      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a32      	ldr	r2, [pc, #200]	; (8008ad8 <DMA_CalcBaseAndBitshift+0x144>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d013      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a30      	ldr	r2, [pc, #192]	; (8008adc <DMA_CalcBaseAndBitshift+0x148>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00e      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a2f      	ldr	r2, [pc, #188]	; (8008ae0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d009      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ae4 <DMA_CalcBaseAndBitshift+0x150>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d004      	beq.n	8008a3c <DMA_CalcBaseAndBitshift+0xa8>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a2c      	ldr	r2, [pc, #176]	; (8008ae8 <DMA_CalcBaseAndBitshift+0x154>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d101      	bne.n	8008a40 <DMA_CalcBaseAndBitshift+0xac>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <DMA_CalcBaseAndBitshift+0xae>
 8008a40:	2300      	movs	r3, #0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d024      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	3b10      	subs	r3, #16
 8008a4e:	4a27      	ldr	r2, [pc, #156]	; (8008aec <DMA_CalcBaseAndBitshift+0x158>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	091b      	lsrs	r3, r3, #4
 8008a56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008a60:	5cd3      	ldrb	r3, [r2, r3]
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d908      	bls.n	8008a80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	4b1f      	ldr	r3, [pc, #124]	; (8008af4 <DMA_CalcBaseAndBitshift+0x160>)
 8008a76:	4013      	ands	r3, r2
 8008a78:	1d1a      	adds	r2, r3, #4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	659a      	str	r2, [r3, #88]	; 0x58
 8008a7e:	e00d      	b.n	8008a9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <DMA_CalcBaseAndBitshift+0x160>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a8e:	e005      	b.n	8008a9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40020010 	.word	0x40020010
 8008ab0:	40020028 	.word	0x40020028
 8008ab4:	40020040 	.word	0x40020040
 8008ab8:	40020058 	.word	0x40020058
 8008abc:	40020070 	.word	0x40020070
 8008ac0:	40020088 	.word	0x40020088
 8008ac4:	400200a0 	.word	0x400200a0
 8008ac8:	400200b8 	.word	0x400200b8
 8008acc:	40020410 	.word	0x40020410
 8008ad0:	40020428 	.word	0x40020428
 8008ad4:	40020440 	.word	0x40020440
 8008ad8:	40020458 	.word	0x40020458
 8008adc:	40020470 	.word	0x40020470
 8008ae0:	40020488 	.word	0x40020488
 8008ae4:	400204a0 	.word	0x400204a0
 8008ae8:	400204b8 	.word	0x400204b8
 8008aec:	aaaaaaab 	.word	0xaaaaaaab
 8008af0:	080176b4 	.word	0x080176b4
 8008af4:	fffffc00 	.word	0xfffffc00

08008af8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d120      	bne.n	8008b4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d858      	bhi.n	8008bc6 <DMA_CheckFifoParam+0xce>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <DMA_CheckFifoParam+0x24>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b2d 	.word	0x08008b2d
 8008b20:	08008b3f 	.word	0x08008b3f
 8008b24:	08008b2d 	.word	0x08008b2d
 8008b28:	08008bc7 	.word	0x08008bc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d048      	beq.n	8008bca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b3c:	e045      	b.n	8008bca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b46:	d142      	bne.n	8008bce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b4c:	e03f      	b.n	8008bce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b56:	d123      	bne.n	8008ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d838      	bhi.n	8008bd2 <DMA_CheckFifoParam+0xda>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <DMA_CheckFifoParam+0x70>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b7f 	.word	0x08008b7f
 8008b70:	08008b79 	.word	0x08008b79
 8008b74:	08008b91 	.word	0x08008b91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8008b7c:	e030      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d025      	beq.n	8008bd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b8e:	e022      	b.n	8008bd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b98:	d11f      	bne.n	8008bda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b9e:	e01c      	b.n	8008bda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d902      	bls.n	8008bae <DMA_CheckFifoParam+0xb6>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d003      	beq.n	8008bb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008bac:	e018      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8008bb2:	e015      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00e      	beq.n	8008bde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc4:	e00b      	b.n	8008bde <DMA_CheckFifoParam+0xe6>
        break;
 8008bc6:	bf00      	nop
 8008bc8:	e00a      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        break;
 8008bca:	bf00      	nop
 8008bcc:	e008      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        break;
 8008bce:	bf00      	nop
 8008bd0:	e006      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        break;
 8008bd2:	bf00      	nop
 8008bd4:	e004      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        break;
 8008bd6:	bf00      	nop
 8008bd8:	e002      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
        break;
 8008bda:	bf00      	nop
 8008bdc:	e000      	b.n	8008be0 <DMA_CheckFifoParam+0xe8>
    break;
 8008bde:	bf00      	nop
    }
  }

  return status;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop

08008bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a38      	ldr	r2, [pc, #224]	; (8008ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d022      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a36      	ldr	r2, [pc, #216]	; (8008ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d01d      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a35      	ldr	r2, [pc, #212]	; (8008cec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d018      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a33      	ldr	r2, [pc, #204]	; (8008cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a32      	ldr	r2, [pc, #200]	; (8008cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00e      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a30      	ldr	r2, [pc, #192]	; (8008cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d009      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a2f      	ldr	r2, [pc, #188]	; (8008cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d004      	beq.n	8008c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a2d      	ldr	r2, [pc, #180]	; (8008d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d101      	bne.n	8008c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e000      	b.n	8008c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008c52:	2300      	movs	r3, #0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01a      	beq.n	8008c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	3b08      	subs	r3, #8
 8008c60:	4a28      	ldr	r2, [pc, #160]	; (8008d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	4b26      	ldr	r3, [pc, #152]	; (8008d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a24      	ldr	r2, [pc, #144]	; (8008d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008c7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f003 031f 	and.w	r3, r3, #31
 8008c84:	2201      	movs	r2, #1
 8008c86:	409a      	lsls	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008c8c:	e024      	b.n	8008cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	3b10      	subs	r3, #16
 8008c96:	4a1e      	ldr	r2, [pc, #120]	; (8008d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008c98:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9c:	091b      	lsrs	r3, r3, #4
 8008c9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4a1c      	ldr	r2, [pc, #112]	; (8008d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d806      	bhi.n	8008cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4a1b      	ldr	r2, [pc, #108]	; (8008d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d902      	bls.n	8008cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4b18      	ldr	r3, [pc, #96]	; (8008d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a16      	ldr	r2, [pc, #88]	; (8008d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008cc8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	409a      	lsls	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008cd8:	bf00      	nop
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	58025408 	.word	0x58025408
 8008ce8:	5802541c 	.word	0x5802541c
 8008cec:	58025430 	.word	0x58025430
 8008cf0:	58025444 	.word	0x58025444
 8008cf4:	58025458 	.word	0x58025458
 8008cf8:	5802546c 	.word	0x5802546c
 8008cfc:	58025480 	.word	0x58025480
 8008d00:	58025494 	.word	0x58025494
 8008d04:	cccccccd 	.word	0xcccccccd
 8008d08:	16009600 	.word	0x16009600
 8008d0c:	58025880 	.word	0x58025880
 8008d10:	aaaaaaab 	.word	0xaaaaaaab
 8008d14:	400204b8 	.word	0x400204b8
 8008d18:	4002040f 	.word	0x4002040f
 8008d1c:	10008200 	.word	0x10008200
 8008d20:	40020880 	.word	0x40020880

08008d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d04a      	beq.n	8008dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d847      	bhi.n	8008dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a25      	ldr	r2, [pc, #148]	; (8008ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d022      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a24      	ldr	r2, [pc, #144]	; (8008de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d01d      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d018      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a21      	ldr	r2, [pc, #132]	; (8008de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d013      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d00e      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d009      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1b      	ldr	r2, [pc, #108]	; (8008df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d101      	bne.n	8008d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008d94:	2300      	movs	r3, #0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	4b17      	ldr	r3, [pc, #92]	; (8008dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	461a      	mov	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008dac:	671a      	str	r2, [r3, #112]	; 0x70
 8008dae:	e009      	b.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a11      	ldr	r2, [pc, #68]	; (8008e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008dc2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	2201      	movs	r2, #1
 8008dca:	409a      	lsls	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	58025408 	.word	0x58025408
 8008de0:	5802541c 	.word	0x5802541c
 8008de4:	58025430 	.word	0x58025430
 8008de8:	58025444 	.word	0x58025444
 8008dec:	58025458 	.word	0x58025458
 8008df0:	5802546c 	.word	0x5802546c
 8008df4:	58025480 	.word	0x58025480
 8008df8:	58025494 	.word	0x58025494
 8008dfc:	1600963f 	.word	0x1600963f
 8008e00:	58025940 	.word	0x58025940
 8008e04:	1000823f 	.word	0x1000823f
 8008e08:	40020940 	.word	0x40020940

08008e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b089      	sub	sp, #36	; 0x24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e1a:	4b89      	ldr	r3, [pc, #548]	; (8009040 <HAL_GPIO_Init+0x234>)
 8008e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e1e:	e194      	b.n	800914a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	2101      	movs	r1, #1
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8186 	beq.w	8009144 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d005      	beq.n	8008e50 <HAL_GPIO_Init+0x44>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f003 0303 	and.w	r3, r3, #3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d130      	bne.n	8008eb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	2203      	movs	r2, #3
 8008e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e60:	43db      	mvns	r3, r3
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	4013      	ands	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	fa02 f303 	lsl.w	r3, r2, r3
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e86:	2201      	movs	r2, #1
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	43db      	mvns	r3, r3
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	4013      	ands	r3, r2
 8008e94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	091b      	lsrs	r3, r3, #4
 8008e9c:	f003 0201 	and.w	r2, r3, #1
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d017      	beq.n	8008eee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	2203      	movs	r2, #3
 8008eca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ece:	43db      	mvns	r3, r3
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d123      	bne.n	8008f42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	08da      	lsrs	r2, r3, #3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3208      	adds	r2, #8
 8008f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	220f      	movs	r2, #15
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	43db      	mvns	r3, r3
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	08da      	lsrs	r2, r3, #3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3208      	adds	r2, #8
 8008f3c:	69b9      	ldr	r1, [r7, #24]
 8008f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43db      	mvns	r3, r3
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	4013      	ands	r3, r2
 8008f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f003 0203 	and.w	r2, r3, #3
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80e0 	beq.w	8009144 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f84:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <HAL_GPIO_Init+0x238>)
 8008f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f8a:	4a2e      	ldr	r2, [pc, #184]	; (8009044 <HAL_GPIO_Init+0x238>)
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008f94:	4b2b      	ldr	r3, [pc, #172]	; (8009044 <HAL_GPIO_Init+0x238>)
 8008f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008fa2:	4a29      	ldr	r2, [pc, #164]	; (8009048 <HAL_GPIO_Init+0x23c>)
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	089b      	lsrs	r3, r3, #2
 8008fa8:	3302      	adds	r3, #2
 8008faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	220f      	movs	r2, #15
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	43db      	mvns	r3, r3
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a20      	ldr	r2, [pc, #128]	; (800904c <HAL_GPIO_Init+0x240>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d052      	beq.n	8009074 <HAL_GPIO_Init+0x268>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a1f      	ldr	r2, [pc, #124]	; (8009050 <HAL_GPIO_Init+0x244>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d031      	beq.n	800903a <HAL_GPIO_Init+0x22e>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a1e      	ldr	r2, [pc, #120]	; (8009054 <HAL_GPIO_Init+0x248>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d02b      	beq.n	8009036 <HAL_GPIO_Init+0x22a>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a1d      	ldr	r2, [pc, #116]	; (8009058 <HAL_GPIO_Init+0x24c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d025      	beq.n	8009032 <HAL_GPIO_Init+0x226>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a1c      	ldr	r2, [pc, #112]	; (800905c <HAL_GPIO_Init+0x250>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d01f      	beq.n	800902e <HAL_GPIO_Init+0x222>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a1b      	ldr	r2, [pc, #108]	; (8009060 <HAL_GPIO_Init+0x254>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d019      	beq.n	800902a <HAL_GPIO_Init+0x21e>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a1a      	ldr	r2, [pc, #104]	; (8009064 <HAL_GPIO_Init+0x258>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d013      	beq.n	8009026 <HAL_GPIO_Init+0x21a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a19      	ldr	r2, [pc, #100]	; (8009068 <HAL_GPIO_Init+0x25c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d00d      	beq.n	8009022 <HAL_GPIO_Init+0x216>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a18      	ldr	r2, [pc, #96]	; (800906c <HAL_GPIO_Init+0x260>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d007      	beq.n	800901e <HAL_GPIO_Init+0x212>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a17      	ldr	r2, [pc, #92]	; (8009070 <HAL_GPIO_Init+0x264>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d101      	bne.n	800901a <HAL_GPIO_Init+0x20e>
 8009016:	2309      	movs	r3, #9
 8009018:	e02d      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 800901a:	230a      	movs	r3, #10
 800901c:	e02b      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 800901e:	2308      	movs	r3, #8
 8009020:	e029      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 8009022:	2307      	movs	r3, #7
 8009024:	e027      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 8009026:	2306      	movs	r3, #6
 8009028:	e025      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 800902a:	2305      	movs	r3, #5
 800902c:	e023      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 800902e:	2304      	movs	r3, #4
 8009030:	e021      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 8009032:	2303      	movs	r3, #3
 8009034:	e01f      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 8009036:	2302      	movs	r3, #2
 8009038:	e01d      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 800903a:	2301      	movs	r3, #1
 800903c:	e01b      	b.n	8009076 <HAL_GPIO_Init+0x26a>
 800903e:	bf00      	nop
 8009040:	58000080 	.word	0x58000080
 8009044:	58024400 	.word	0x58024400
 8009048:	58000400 	.word	0x58000400
 800904c:	58020000 	.word	0x58020000
 8009050:	58020400 	.word	0x58020400
 8009054:	58020800 	.word	0x58020800
 8009058:	58020c00 	.word	0x58020c00
 800905c:	58021000 	.word	0x58021000
 8009060:	58021400 	.word	0x58021400
 8009064:	58021800 	.word	0x58021800
 8009068:	58021c00 	.word	0x58021c00
 800906c:	58022000 	.word	0x58022000
 8009070:	58022400 	.word	0x58022400
 8009074:	2300      	movs	r3, #0
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	f002 0203 	and.w	r2, r2, #3
 800907c:	0092      	lsls	r2, r2, #2
 800907e:	4093      	lsls	r3, r2
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	4313      	orrs	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009086:	4938      	ldr	r1, [pc, #224]	; (8009168 <HAL_GPIO_Init+0x35c>)
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	3302      	adds	r3, #2
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	43db      	mvns	r3, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	4013      	ands	r3, r2
 80090a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80090ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80090c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	43db      	mvns	r3, r3
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4013      	ands	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80090e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	43db      	mvns	r3, r3
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	4013      	ands	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	43db      	mvns	r3, r3
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	4013      	ands	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	3301      	adds	r3, #1
 8009148:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	f47f ae63 	bne.w	8008e20 <HAL_GPIO_Init+0x14>
  }
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	3724      	adds	r7, #36	; 0x24
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	58000400 	.word	0x58000400

0800916c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	887b      	ldrh	r3, [r7, #2]
 800917e:	4013      	ands	r3, r2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
 8009188:	e001      	b.n	800918e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	807b      	strh	r3, [r7, #2]
 80091a8:	4613      	mov	r3, r2
 80091aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091ac:	787b      	ldrb	r3, [r7, #1]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091b2:	887a      	ldrh	r2, [r7, #2]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80091b8:	e003      	b.n	80091c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80091ba:	887b      	ldrh	r3, [r7, #2]
 80091bc:	041a      	lsls	r2, r3, #16
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	619a      	str	r2, [r3, #24]
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e08b      	b.n	80092fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f8 f8e6 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2224      	movs	r2, #36	; 0x24
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 0201 	bic.w	r2, r2, #1
 8009212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009220:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009230:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d107      	bne.n	800924a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	e006      	b.n	8009258 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689a      	ldr	r2, [r3, #8]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009256:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d108      	bne.n	8009272 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800926e:	605a      	str	r2, [r3, #4]
 8009270:	e007      	b.n	8009282 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6859      	ldr	r1, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <HAL_I2C_Init+0x134>)
 800928e:	430b      	orrs	r3, r1
 8009290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69d9      	ldr	r1, [r3, #28]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 0201 	orr.w	r2, r2, #1
 80092da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	02008000 	.word	0x02008000

08009308 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af02      	add	r7, sp, #8
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	461a      	mov	r2, r3
 8009314:	460b      	mov	r3, r1
 8009316:	817b      	strh	r3, [r7, #10]
 8009318:	4613      	mov	r3, r2
 800931a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2b20      	cmp	r3, #32
 8009326:	f040 80fd 	bne.w	8009524 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009330:	2b01      	cmp	r3, #1
 8009332:	d101      	bne.n	8009338 <HAL_I2C_Master_Transmit+0x30>
 8009334:	2302      	movs	r3, #2
 8009336:	e0f6      	b.n	8009526 <HAL_I2C_Master_Transmit+0x21e>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009340:	f7fa fdf4 	bl	8003f2c <HAL_GetTick>
 8009344:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	2319      	movs	r3, #25
 800934c:	2201      	movs	r2, #1
 800934e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fa0a 	bl	800976c <I2C_WaitOnFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e0e1      	b.n	8009526 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2221      	movs	r2, #33	; 0x21
 8009366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2210      	movs	r2, #16
 800936e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	893a      	ldrh	r2, [r7, #8]
 8009382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800938e:	b29b      	uxth	r3, r3
 8009390:	2bff      	cmp	r3, #255	; 0xff
 8009392:	d906      	bls.n	80093a2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	22ff      	movs	r2, #255	; 0xff
 8009398:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800939a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e007      	b.n	80093b2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80093ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d024      	beq.n	8009404 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29a      	uxth	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	3301      	adds	r3, #1
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	8979      	ldrh	r1, [r7, #10]
 80093f6:	4b4e      	ldr	r3, [pc, #312]	; (8009530 <HAL_I2C_Master_Transmit+0x228>)
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 fc05 	bl	8009c0c <I2C_TransferConfig>
 8009402:	e066      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009408:	b2da      	uxtb	r2, r3
 800940a:	8979      	ldrh	r1, [r7, #10]
 800940c:	4b48      	ldr	r3, [pc, #288]	; (8009530 <HAL_I2C_Master_Transmit+0x228>)
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fbfa 	bl	8009c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009418:	e05b      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	6a39      	ldr	r1, [r7, #32]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 f9fd 	bl	800981e <I2C_WaitOnTXISFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e07b      	b.n	8009526 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	781a      	ldrb	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009456:	3b01      	subs	r3, #1
 8009458:	b29a      	uxth	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009462:	b29b      	uxth	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d034      	beq.n	80094d2 <HAL_I2C_Master_Transmit+0x1ca>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d130      	bne.n	80094d2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	2200      	movs	r2, #0
 8009478:	2180      	movs	r1, #128	; 0x80
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f976 	bl	800976c <I2C_WaitOnFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e04d      	b.n	8009526 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948e:	b29b      	uxth	r3, r3
 8009490:	2bff      	cmp	r3, #255	; 0xff
 8009492:	d90e      	bls.n	80094b2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	22ff      	movs	r2, #255	; 0xff
 8009498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	8979      	ldrh	r1, [r7, #10]
 80094a2:	2300      	movs	r3, #0
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 fbae 	bl	8009c0c <I2C_TransferConfig>
 80094b0:	e00f      	b.n	80094d2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	8979      	ldrh	r1, [r7, #10]
 80094c4:	2300      	movs	r3, #0
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 fb9d 	bl	8009c0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d19e      	bne.n	800941a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	6a39      	ldr	r1, [r7, #32]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f9e3 	bl	80098ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e01a      	b.n	8009526 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2220      	movs	r2, #32
 80094f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6859      	ldr	r1, [r3, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <HAL_I2C_Master_Transmit+0x22c>)
 8009504:	400b      	ands	r3, r1
 8009506:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2220      	movs	r2, #32
 800950c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	e000      	b.n	8009526 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009524:	2302      	movs	r3, #2
  }
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	80002000 	.word	0x80002000
 8009534:	fe00e800 	.word	0xfe00e800

08009538 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af02      	add	r7, sp, #8
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	607a      	str	r2, [r7, #4]
 8009542:	461a      	mov	r2, r3
 8009544:	460b      	mov	r3, r1
 8009546:	817b      	strh	r3, [r7, #10]
 8009548:	4613      	mov	r3, r2
 800954a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b20      	cmp	r3, #32
 8009556:	f040 80db 	bne.w	8009710 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009560:	2b01      	cmp	r3, #1
 8009562:	d101      	bne.n	8009568 <HAL_I2C_Master_Receive+0x30>
 8009564:	2302      	movs	r3, #2
 8009566:	e0d4      	b.n	8009712 <HAL_I2C_Master_Receive+0x1da>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009570:	f7fa fcdc 	bl	8003f2c <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	2319      	movs	r3, #25
 800957c:	2201      	movs	r2, #1
 800957e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 f8f2 	bl	800976c <I2C_WaitOnFlagUntilTimeout>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e0bf      	b.n	8009712 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2222      	movs	r2, #34	; 0x22
 8009596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2210      	movs	r2, #16
 800959e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	893a      	ldrh	r2, [r7, #8]
 80095b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095be:	b29b      	uxth	r3, r3
 80095c0:	2bff      	cmp	r3, #255	; 0xff
 80095c2:	d90e      	bls.n	80095e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	22ff      	movs	r2, #255	; 0xff
 80095c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	8979      	ldrh	r1, [r7, #10]
 80095d2:	4b52      	ldr	r3, [pc, #328]	; (800971c <HAL_I2C_Master_Receive+0x1e4>)
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fb16 	bl	8009c0c <I2C_TransferConfig>
 80095e0:	e06d      	b.n	80096be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	8979      	ldrh	r1, [r7, #10]
 80095f4:	4b49      	ldr	r3, [pc, #292]	; (800971c <HAL_I2C_Master_Receive+0x1e4>)
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 fb05 	bl	8009c0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009602:	e05c      	b.n	80096be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	6a39      	ldr	r1, [r7, #32]
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f993 	bl	8009934 <I2C_WaitOnRXNEFlagUntilTimeout>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e07c      	b.n	8009712 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964e:	b29b      	uxth	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d034      	beq.n	80096be <HAL_I2C_Master_Receive+0x186>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	2b00      	cmp	r3, #0
 800965a:	d130      	bne.n	80096be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	2200      	movs	r2, #0
 8009664:	2180      	movs	r1, #128	; 0x80
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f880 	bl	800976c <I2C_WaitOnFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e04d      	b.n	8009712 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967a:	b29b      	uxth	r3, r3
 800967c:	2bff      	cmp	r3, #255	; 0xff
 800967e:	d90e      	bls.n	800969e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968a:	b2da      	uxtb	r2, r3
 800968c:	8979      	ldrh	r1, [r7, #10]
 800968e:	2300      	movs	r3, #0
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fab8 	bl	8009c0c <I2C_TransferConfig>
 800969c:	e00f      	b.n	80096be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	8979      	ldrh	r1, [r7, #10]
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 faa7 	bl	8009c0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d19d      	bne.n	8009604 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	6a39      	ldr	r1, [r7, #32]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f8ed 	bl	80098ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e01a      	b.n	8009712 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2220      	movs	r2, #32
 80096e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6859      	ldr	r1, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <HAL_I2C_Master_Receive+0x1e8>)
 80096f0:	400b      	ands	r3, r1
 80096f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	e000      	b.n	8009712 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009710:	2302      	movs	r3, #2
  }
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	80002400 	.word	0x80002400
 8009720:	fe00e800 	.word	0xfe00e800

08009724 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b02      	cmp	r3, #2
 8009738:	d103      	bne.n	8009742 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b01      	cmp	r3, #1
 800974e:	d007      	beq.n	8009760 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f042 0201 	orr.w	r2, r2, #1
 800975e:	619a      	str	r2, [r3, #24]
  }
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	603b      	str	r3, [r7, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800977c:	e03b      	b.n	80097f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f962 	bl	8009a4c <I2C_IsErrorOccurred>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e041      	b.n	8009816 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009798:	d02d      	beq.n	80097f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979a:	f7fa fbc7 	bl	8003f2c <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d302      	bcc.n	80097b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d122      	bne.n	80097f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4013      	ands	r3, r2
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	429a      	cmp	r2, r3
 80097be:	bf0c      	ite	eq
 80097c0:	2301      	moveq	r3, #1
 80097c2:	2300      	movne	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	461a      	mov	r2, r3
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d113      	bne.n	80097f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d2:	f043 0220 	orr.w	r2, r3, #32
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2220      	movs	r2, #32
 80097de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e00f      	b.n	8009816 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4013      	ands	r3, r2
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	461a      	mov	r2, r3
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	429a      	cmp	r2, r3
 8009812:	d0b4      	beq.n	800977e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800982a:	e033      	b.n	8009894 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 f90b 	bl	8009a4c <I2C_IsErrorOccurred>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e031      	b.n	80098a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009846:	d025      	beq.n	8009894 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009848:	f7fa fb70 	bl	8003f2c <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	429a      	cmp	r2, r3
 8009856:	d302      	bcc.n	800985e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d11a      	bne.n	8009894 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b02      	cmp	r3, #2
 800986a:	d013      	beq.n	8009894 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009870:	f043 0220 	orr.w	r2, r3, #32
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2220      	movs	r2, #32
 800987c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e007      	b.n	80098a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d1c4      	bne.n	800982c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098b8:	e02f      	b.n	800991a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 f8c4 	bl	8009a4c <I2C_IsErrorOccurred>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e02d      	b.n	800992a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ce:	f7fa fb2d 	bl	8003f2c <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d302      	bcc.n	80098e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11a      	bne.n	800991a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b20      	cmp	r3, #32
 80098f0:	d013      	beq.n	800991a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	f043 0220 	orr.w	r2, r3, #32
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2220      	movs	r2, #32
 8009902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e007      	b.n	800992a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b20      	cmp	r3, #32
 8009926:	d1c8      	bne.n	80098ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009944:	e071      	b.n	8009a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f87e 	bl	8009a4c <I2C_IsErrorOccurred>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	f003 0320 	and.w	r3, r3, #32
 8009964:	2b20      	cmp	r3, #32
 8009966:	d13b      	bne.n	80099e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d138      	bne.n	80099e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b04      	cmp	r3, #4
 800997a:	d105      	bne.n	8009988 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b10      	cmp	r3, #16
 8009994:	d121      	bne.n	80099da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2210      	movs	r2, #16
 800999c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2204      	movs	r2, #4
 80099a2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2220      	movs	r2, #32
 80099aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80099b8:	400b      	ands	r3, r1
 80099ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	75fb      	strb	r3, [r7, #23]
 80099d8:	e002      	b.n	80099e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80099e0:	f7fa faa4 	bl	8003f2c <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d119      	bne.n	8009a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d116      	bne.n	8009a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d00f      	beq.n	8009a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f043 0220 	orr.w	r2, r3, #32
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d002      	beq.n	8009a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d083      	beq.n	8009946 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	fe00e800 	.word	0xfe00e800

08009a4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f003 0310 	and.w	r3, r3, #16
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d068      	beq.n	8009b4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2210      	movs	r2, #16
 8009a7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a80:	e049      	b.n	8009b16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a88:	d045      	beq.n	8009b16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a8a:	f7fa fa4f 	bl	8003f2c <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d302      	bcc.n	8009aa0 <I2C_IsErrorOccurred+0x54>
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d13a      	bne.n	8009b16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ab2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac2:	d121      	bne.n	8009b08 <I2C_IsErrorOccurred+0xbc>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aca:	d01d      	beq.n	8009b08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009acc:	7cfb      	ldrb	r3, [r7, #19]
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d01a      	beq.n	8009b08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ae0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ae2:	f7fa fa23 	bl	8003f2c <HAL_GetTick>
 8009ae6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ae8:	e00e      	b.n	8009b08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009aea:	f7fa fa1f 	bl	8003f2c <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	2b19      	cmp	r3, #25
 8009af6:	d907      	bls.n	8009b08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	f043 0320 	orr.w	r3, r3, #32
 8009afe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b06:	e006      	b.n	8009b16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	d1e9      	bne.n	8009aea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d003      	beq.n	8009b2c <I2C_IsErrorOccurred+0xe0>
 8009b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0aa      	beq.n	8009a82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d103      	bne.n	8009b3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	f043 0304 	orr.w	r3, r3, #4
 8009b42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00b      	beq.n	8009b96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	f043 0308 	orr.w	r3, r3, #8
 8009b84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01c      	beq.n	8009bfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7ff fdaf 	bl	8009724 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6859      	ldr	r1, [r3, #4]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <I2C_IsErrorOccurred+0x1bc>)
 8009bd2:	400b      	ands	r3, r1
 8009bd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	fe00e800 	.word	0xfe00e800

08009c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	607b      	str	r3, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	817b      	strh	r3, [r7, #10]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c1e:	897b      	ldrh	r3, [r7, #10]
 8009c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c24:	7a7b      	ldrb	r3, [r7, #9]
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	0d5b      	lsrs	r3, r3, #21
 8009c46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c4a:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <I2C_TransferConfig+0x60>)
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	43db      	mvns	r3, r3
 8009c50:	ea02 0103 	and.w	r1, r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c5e:	bf00      	nop
 8009c60:	371c      	adds	r7, #28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	03ff63ff 	.word	0x03ff63ff

08009c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d138      	bne.n	8009cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d101      	bne.n	8009c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e032      	b.n	8009cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2224      	movs	r2, #36	; 0x24
 8009ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0201 	bic.w	r2, r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e000      	b.n	8009cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cf8:	2302      	movs	r3, #2
  }
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d139      	bne.n	8009d90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d101      	bne.n	8009d2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d26:	2302      	movs	r3, #2
 8009d28:	e033      	b.n	8009d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2224      	movs	r2, #36	; 0x24
 8009d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0201 	bic.w	r2, r2, #1
 8009d48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	021b      	lsls	r3, r3, #8
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0201 	orr.w	r2, r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e000      	b.n	8009d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d90:	2302      	movs	r3, #2
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
	...

08009da0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dae:	4a0c      	ldr	r2, [pc, #48]	; (8009de0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009db0:	f043 0302 	orr.w	r3, r3, #2
 8009db4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009db8:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009dc6:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	4906      	ldr	r1, [pc, #24]	; (8009de4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	604b      	str	r3, [r1, #4]
}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	58024400 	.word	0x58024400
 8009de4:	58000400 	.word	0x58000400

08009de8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009df4:	4b18      	ldr	r3, [pc, #96]	; (8009e58 <HAL_PWR_EnterSTOPMode+0x70>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f023 0201 	bic.w	r2, r3, #1
 8009dfc:	4916      	ldr	r1, [pc, #88]	; (8009e58 <HAL_PWR_EnterSTOPMode+0x70>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009e04:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	4a13      	ldr	r2, [pc, #76]	; (8009e58 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e0a:	f023 0305 	bic.w	r3, r3, #5
 8009e0e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009e10:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	4a10      	ldr	r2, [pc, #64]	; (8009e58 <HAL_PWR_EnterSTOPMode+0x70>)
 8009e16:	f023 0302 	bic.w	r3, r3, #2
 8009e1a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009e1c:	4b0f      	ldr	r3, [pc, #60]	; (8009e5c <HAL_PWR_EnterSTOPMode+0x74>)
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	4a0e      	ldr	r2, [pc, #56]	; (8009e5c <HAL_PWR_EnterSTOPMode+0x74>)
 8009e22:	f043 0304 	orr.w	r3, r3, #4
 8009e26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009e28:	f3bf 8f4f 	dsb	sy
}
 8009e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e2e:	f3bf 8f6f 	isb	sy
}
 8009e32:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009e3a:	bf30      	wfi
 8009e3c:	e000      	b.n	8009e40 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009e3e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009e40:	4b06      	ldr	r3, [pc, #24]	; (8009e5c <HAL_PWR_EnterSTOPMode+0x74>)
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	4a05      	ldr	r2, [pc, #20]	; (8009e5c <HAL_PWR_EnterSTOPMode+0x74>)
 8009e46:	f023 0304 	bic.w	r3, r3, #4
 8009e4a:	6113      	str	r3, [r2, #16]
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	58024800 	.word	0x58024800
 8009e5c:	e000ed00 	.word	0xe000ed00

08009e60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e68:	4b19      	ldr	r3, [pc, #100]	; (8009ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d00a      	beq.n	8009e8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e74:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f003 0307 	and.w	r3, r3, #7
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d001      	beq.n	8009e86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e01f      	b.n	8009ec6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e01d      	b.n	8009ec6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e8a:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f023 0207 	bic.w	r2, r3, #7
 8009e92:	490f      	ldr	r1, [pc, #60]	; (8009ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e9a:	f7fa f847 	bl	8003f2c <HAL_GetTick>
 8009e9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ea0:	e009      	b.n	8009eb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ea2:	f7fa f843 	bl	8003f2c <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eb0:	d901      	bls.n	8009eb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e007      	b.n	8009ec6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eb6:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <HAL_PWREx_ConfigSupply+0x70>)
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ec2:	d1ee      	bne.n	8009ea2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	58024800 	.word	0x58024800

08009ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08c      	sub	sp, #48	; 0x30
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f000 bc48 	b.w	800a778 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 8088 	beq.w	800a006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ef6:	4b99      	ldr	r3, [pc, #612]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f00:	4b96      	ldr	r3, [pc, #600]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d007      	beq.n	8009f1c <HAL_RCC_OscConfig+0x48>
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	2b18      	cmp	r3, #24
 8009f10:	d111      	bne.n	8009f36 <HAL_RCC_OscConfig+0x62>
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	f003 0303 	and.w	r3, r3, #3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d10c      	bne.n	8009f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f1c:	4b8f      	ldr	r3, [pc, #572]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d06d      	beq.n	800a004 <HAL_RCC_OscConfig+0x130>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d169      	bne.n	800a004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f000 bc21 	b.w	800a778 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f3e:	d106      	bne.n	8009f4e <HAL_RCC_OscConfig+0x7a>
 8009f40:	4b86      	ldr	r3, [pc, #536]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a85      	ldr	r2, [pc, #532]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	e02e      	b.n	8009fac <HAL_RCC_OscConfig+0xd8>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <HAL_RCC_OscConfig+0x9c>
 8009f56:	4b81      	ldr	r3, [pc, #516]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a80      	ldr	r2, [pc, #512]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	4b7e      	ldr	r3, [pc, #504]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a7d      	ldr	r2, [pc, #500]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	e01d      	b.n	8009fac <HAL_RCC_OscConfig+0xd8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f78:	d10c      	bne.n	8009f94 <HAL_RCC_OscConfig+0xc0>
 8009f7a:	4b78      	ldr	r3, [pc, #480]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a77      	ldr	r2, [pc, #476]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	4b75      	ldr	r3, [pc, #468]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a74      	ldr	r2, [pc, #464]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	e00b      	b.n	8009fac <HAL_RCC_OscConfig+0xd8>
 8009f94:	4b71      	ldr	r3, [pc, #452]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a70      	ldr	r2, [pc, #448]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	4b6e      	ldr	r3, [pc, #440]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a6d      	ldr	r2, [pc, #436]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d013      	beq.n	8009fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb4:	f7f9 ffba 	bl	8003f2c <HAL_GetTick>
 8009fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fbc:	f7f9 ffb6 	bl	8003f2c <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b64      	cmp	r3, #100	; 0x64
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e3d4      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fce:	4b63      	ldr	r3, [pc, #396]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0f0      	beq.n	8009fbc <HAL_RCC_OscConfig+0xe8>
 8009fda:	e014      	b.n	800a006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fdc:	f7f9 ffa6 	bl	8003f2c <HAL_GetTick>
 8009fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fe2:	e008      	b.n	8009ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fe4:	f7f9 ffa2 	bl	8003f2c <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b64      	cmp	r3, #100	; 0x64
 8009ff0:	d901      	bls.n	8009ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e3c0      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ff6:	4b59      	ldr	r3, [pc, #356]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f0      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x110>
 800a002:	e000      	b.n	800a006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 80ca 	beq.w	800a1a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a014:	4b51      	ldr	r3, [pc, #324]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a01c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a01e:	4b4f      	ldr	r3, [pc, #316]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d007      	beq.n	800a03a <HAL_RCC_OscConfig+0x166>
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	2b18      	cmp	r3, #24
 800a02e:	d156      	bne.n	800a0de <HAL_RCC_OscConfig+0x20a>
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d151      	bne.n	800a0de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a03a:	4b48      	ldr	r3, [pc, #288]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <HAL_RCC_OscConfig+0x17e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e392      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a052:	4b42      	ldr	r3, [pc, #264]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f023 0219 	bic.w	r2, r3, #25
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	493f      	ldr	r1, [pc, #252]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a060:	4313      	orrs	r3, r2
 800a062:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a064:	f7f9 ff62 	bl	8003f2c <HAL_GetTick>
 800a068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a06a:	e008      	b.n	800a07e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a06c:	f7f9 ff5e 	bl	8003f2c <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b02      	cmp	r3, #2
 800a078:	d901      	bls.n	800a07e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e37c      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a07e:	4b37      	ldr	r3, [pc, #220]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0304 	and.w	r3, r3, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	d0f0      	beq.n	800a06c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a08a:	f7f9 ff5b 	bl	8003f44 <HAL_GetREVID>
 800a08e:	4603      	mov	r3, r0
 800a090:	f241 0203 	movw	r2, #4099	; 0x1003
 800a094:	4293      	cmp	r3, r2
 800a096:	d817      	bhi.n	800a0c8 <HAL_RCC_OscConfig+0x1f4>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	2b40      	cmp	r3, #64	; 0x40
 800a09e:	d108      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x1de>
 800a0a0:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0a8:	4a2c      	ldr	r2, [pc, #176]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0b0:	e07a      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0b2:	4b2a      	ldr	r3, [pc, #168]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	031b      	lsls	r3, r3, #12
 800a0c0:	4926      	ldr	r1, [pc, #152]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0c6:	e06f      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0c8:	4b24      	ldr	r3, [pc, #144]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	061b      	lsls	r3, r3, #24
 800a0d6:	4921      	ldr	r1, [pc, #132]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0dc:	e064      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d047      	beq.n	800a176 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f023 0219 	bic.w	r2, r3, #25
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	491a      	ldr	r1, [pc, #104]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f8:	f7f9 ff18 	bl	8003f2c <HAL_GetTick>
 800a0fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0fe:	e008      	b.n	800a112 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a100:	f7f9 ff14 	bl	8003f2c <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e332      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0f0      	beq.n	800a100 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a11e:	f7f9 ff11 	bl	8003f44 <HAL_GetREVID>
 800a122:	4603      	mov	r3, r0
 800a124:	f241 0203 	movw	r2, #4099	; 0x1003
 800a128:	4293      	cmp	r3, r2
 800a12a:	d819      	bhi.n	800a160 <HAL_RCC_OscConfig+0x28c>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	2b40      	cmp	r3, #64	; 0x40
 800a132:	d108      	bne.n	800a146 <HAL_RCC_OscConfig+0x272>
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a13c:	4a07      	ldr	r2, [pc, #28]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a13e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a142:	6053      	str	r3, [r2, #4]
 800a144:	e030      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2d4>
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	031b      	lsls	r3, r3, #12
 800a154:	4901      	ldr	r1, [pc, #4]	; (800a15c <HAL_RCC_OscConfig+0x288>)
 800a156:	4313      	orrs	r3, r2
 800a158:	604b      	str	r3, [r1, #4]
 800a15a:	e025      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2d4>
 800a15c:	58024400 	.word	0x58024400
 800a160:	4b9a      	ldr	r3, [pc, #616]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	061b      	lsls	r3, r3, #24
 800a16e:	4997      	ldr	r1, [pc, #604]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a170:	4313      	orrs	r3, r2
 800a172:	604b      	str	r3, [r1, #4]
 800a174:	e018      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a176:	4b95      	ldr	r3, [pc, #596]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a94      	ldr	r2, [pc, #592]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a17c:	f023 0301 	bic.w	r3, r3, #1
 800a180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a182:	f7f9 fed3 	bl	8003f2c <HAL_GetTick>
 800a186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a188:	e008      	b.n	800a19c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a18a:	f7f9 fecf 	bl	8003f2c <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d901      	bls.n	800a19c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e2ed      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a19c:	4b8b      	ldr	r3, [pc, #556]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1f0      	bne.n	800a18a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0310 	and.w	r3, r3, #16
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 80a9 	beq.w	800a308 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1b6:	4b85      	ldr	r3, [pc, #532]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1c0:	4b82      	ldr	r3, [pc, #520]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d007      	beq.n	800a1dc <HAL_RCC_OscConfig+0x308>
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2b18      	cmp	r3, #24
 800a1d0:	d13a      	bne.n	800a248 <HAL_RCC_OscConfig+0x374>
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f003 0303 	and.w	r3, r3, #3
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d135      	bne.n	800a248 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1dc:	4b7b      	ldr	r3, [pc, #492]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x320>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	2b80      	cmp	r3, #128	; 0x80
 800a1ee:	d001      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e2c1      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1f4:	f7f9 fea6 	bl	8003f44 <HAL_GetREVID>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d817      	bhi.n	800a232 <HAL_RCC_OscConfig+0x35e>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	2b20      	cmp	r3, #32
 800a208:	d108      	bne.n	800a21c <HAL_RCC_OscConfig+0x348>
 800a20a:	4b70      	ldr	r3, [pc, #448]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a212:	4a6e      	ldr	r2, [pc, #440]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a218:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a21a:	e075      	b.n	800a308 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a21c:	4b6b      	ldr	r3, [pc, #428]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	069b      	lsls	r3, r3, #26
 800a22a:	4968      	ldr	r1, [pc, #416]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a230:	e06a      	b.n	800a308 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a232:	4b66      	ldr	r3, [pc, #408]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	061b      	lsls	r3, r3, #24
 800a240:	4962      	ldr	r1, [pc, #392]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a242:	4313      	orrs	r3, r2
 800a244:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a246:	e05f      	b.n	800a308 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d042      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a250:	4b5e      	ldr	r3, [pc, #376]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a5d      	ldr	r2, [pc, #372]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25c:	f7f9 fe66 	bl	8003f2c <HAL_GetTick>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a262:	e008      	b.n	800a276 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a264:	f7f9 fe62 	bl	8003f2c <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d901      	bls.n	800a276 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e280      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a276:	4b55      	ldr	r3, [pc, #340]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0f0      	beq.n	800a264 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a282:	f7f9 fe5f 	bl	8003f44 <HAL_GetREVID>
 800a286:	4603      	mov	r3, r0
 800a288:	f241 0203 	movw	r2, #4099	; 0x1003
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d817      	bhi.n	800a2c0 <HAL_RCC_OscConfig+0x3ec>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	2b20      	cmp	r3, #32
 800a296:	d108      	bne.n	800a2aa <HAL_RCC_OscConfig+0x3d6>
 800a298:	4b4c      	ldr	r3, [pc, #304]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2a0:	4a4a      	ldr	r2, [pc, #296]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2a6:	6053      	str	r3, [r2, #4]
 800a2a8:	e02e      	b.n	800a308 <HAL_RCC_OscConfig+0x434>
 800a2aa:	4b48      	ldr	r3, [pc, #288]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	069b      	lsls	r3, r3, #26
 800a2b8:	4944      	ldr	r1, [pc, #272]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	604b      	str	r3, [r1, #4]
 800a2be:	e023      	b.n	800a308 <HAL_RCC_OscConfig+0x434>
 800a2c0:	4b42      	ldr	r3, [pc, #264]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
 800a2cc:	061b      	lsls	r3, r3, #24
 800a2ce:	493f      	ldr	r1, [pc, #252]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	60cb      	str	r3, [r1, #12]
 800a2d4:	e018      	b.n	800a308 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a2d6:	4b3d      	ldr	r3, [pc, #244]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a3c      	ldr	r2, [pc, #240]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e2:	f7f9 fe23 	bl	8003f2c <HAL_GetTick>
 800a2e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2e8:	e008      	b.n	800a2fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a2ea:	f7f9 fe1f 	bl	8003f2c <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d901      	bls.n	800a2fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e23d      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a2fc:	4b33      	ldr	r3, [pc, #204]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1f0      	bne.n	800a2ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0308 	and.w	r3, r3, #8
 800a310:	2b00      	cmp	r3, #0
 800a312:	d036      	beq.n	800a382 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d019      	beq.n	800a350 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a31c:	4b2b      	ldr	r3, [pc, #172]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a320:	4a2a      	ldr	r2, [pc, #168]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a322:	f043 0301 	orr.w	r3, r3, #1
 800a326:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a328:	f7f9 fe00 	bl	8003f2c <HAL_GetTick>
 800a32c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a32e:	e008      	b.n	800a342 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a330:	f7f9 fdfc 	bl	8003f2c <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d901      	bls.n	800a342 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e21a      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a342:	4b22      	ldr	r3, [pc, #136]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0f0      	beq.n	800a330 <HAL_RCC_OscConfig+0x45c>
 800a34e:	e018      	b.n	800a382 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a350:	4b1e      	ldr	r3, [pc, #120]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a354:	4a1d      	ldr	r2, [pc, #116]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a356:	f023 0301 	bic.w	r3, r3, #1
 800a35a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a35c:	f7f9 fde6 	bl	8003f2c <HAL_GetTick>
 800a360:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a362:	e008      	b.n	800a376 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a364:	f7f9 fde2 	bl	8003f2c <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e200      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a376:	4b15      	ldr	r3, [pc, #84]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1f0      	bne.n	800a364 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d039      	beq.n	800a402 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01c      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a396:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a0c      	ldr	r2, [pc, #48]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a39c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3a2:	f7f9 fdc3 	bl	8003f2c <HAL_GetTick>
 800a3a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3a8:	e008      	b.n	800a3bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3aa:	f7f9 fdbf 	bl	8003f2c <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d901      	bls.n	800a3bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e1dd      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3bc:	4b03      	ldr	r3, [pc, #12]	; (800a3cc <HAL_RCC_OscConfig+0x4f8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0f0      	beq.n	800a3aa <HAL_RCC_OscConfig+0x4d6>
 800a3c8:	e01b      	b.n	800a402 <HAL_RCC_OscConfig+0x52e>
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a3d0:	4b9b      	ldr	r3, [pc, #620]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a9a      	ldr	r2, [pc, #616]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3dc:	f7f9 fda6 	bl	8003f2c <HAL_GetTick>
 800a3e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3e2:	e008      	b.n	800a3f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3e4:	f7f9 fda2 	bl	8003f2c <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d901      	bls.n	800a3f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e1c0      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a3f6:	4b92      	ldr	r3, [pc, #584]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f0      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 8081 	beq.w	800a512 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a410:	4b8c      	ldr	r3, [pc, #560]	; (800a644 <HAL_RCC_OscConfig+0x770>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a8b      	ldr	r2, [pc, #556]	; (800a644 <HAL_RCC_OscConfig+0x770>)
 800a416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a41a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a41c:	f7f9 fd86 	bl	8003f2c <HAL_GetTick>
 800a420:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a424:	f7f9 fd82 	bl	8003f2c <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b64      	cmp	r3, #100	; 0x64
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e1a0      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a436:	4b83      	ldr	r3, [pc, #524]	; (800a644 <HAL_RCC_OscConfig+0x770>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0f0      	beq.n	800a424 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d106      	bne.n	800a458 <HAL_RCC_OscConfig+0x584>
 800a44a:	4b7d      	ldr	r3, [pc, #500]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44e:	4a7c      	ldr	r2, [pc, #496]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	6713      	str	r3, [r2, #112]	; 0x70
 800a456:	e02d      	b.n	800a4b4 <HAL_RCC_OscConfig+0x5e0>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10c      	bne.n	800a47a <HAL_RCC_OscConfig+0x5a6>
 800a460:	4b77      	ldr	r3, [pc, #476]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a464:	4a76      	ldr	r2, [pc, #472]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	6713      	str	r3, [r2, #112]	; 0x70
 800a46c:	4b74      	ldr	r3, [pc, #464]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a470:	4a73      	ldr	r2, [pc, #460]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a472:	f023 0304 	bic.w	r3, r3, #4
 800a476:	6713      	str	r3, [r2, #112]	; 0x70
 800a478:	e01c      	b.n	800a4b4 <HAL_RCC_OscConfig+0x5e0>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d10c      	bne.n	800a49c <HAL_RCC_OscConfig+0x5c8>
 800a482:	4b6f      	ldr	r3, [pc, #444]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a6e      	ldr	r2, [pc, #440]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a488:	f043 0304 	orr.w	r3, r3, #4
 800a48c:	6713      	str	r3, [r2, #112]	; 0x70
 800a48e:	4b6c      	ldr	r3, [pc, #432]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a492:	4a6b      	ldr	r2, [pc, #428]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	6713      	str	r3, [r2, #112]	; 0x70
 800a49a:	e00b      	b.n	800a4b4 <HAL_RCC_OscConfig+0x5e0>
 800a49c:	4b68      	ldr	r3, [pc, #416]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a0:	4a67      	ldr	r2, [pc, #412]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a4a2:	f023 0301 	bic.w	r3, r3, #1
 800a4a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a8:	4b65      	ldr	r3, [pc, #404]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ac:	4a64      	ldr	r2, [pc, #400]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a4ae:	f023 0304 	bic.w	r3, r3, #4
 800a4b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d015      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4bc:	f7f9 fd36 	bl	8003f2c <HAL_GetTick>
 800a4c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4c2:	e00a      	b.n	800a4da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4c4:	f7f9 fd32 	bl	8003f2c <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e14e      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4da:	4b59      	ldr	r3, [pc, #356]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0ee      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x5f0>
 800a4e6:	e014      	b.n	800a512 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4e8:	f7f9 fd20 	bl	8003f2c <HAL_GetTick>
 800a4ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a4ee:	e00a      	b.n	800a506 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4f0:	f7f9 fd1c 	bl	8003f2c <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e138      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a506:	4b4e      	ldr	r3, [pc, #312]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1ee      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 812d 	beq.w	800a776 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a51c:	4b48      	ldr	r3, [pc, #288]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a524:	2b18      	cmp	r3, #24
 800a526:	f000 80bd 	beq.w	800a6a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b02      	cmp	r3, #2
 800a530:	f040 809e 	bne.w	800a670 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a534:	4b42      	ldr	r3, [pc, #264]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a41      	ldr	r2, [pc, #260]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a53a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a53e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a540:	f7f9 fcf4 	bl	8003f2c <HAL_GetTick>
 800a544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a548:	f7f9 fcf0 	bl	8003f2c <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e10e      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a55a:	4b39      	ldr	r3, [pc, #228]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1f0      	bne.n	800a548 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a566:	4b36      	ldr	r3, [pc, #216]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a56a:	4b37      	ldr	r3, [pc, #220]	; (800a648 <HAL_RCC_OscConfig+0x774>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a576:	0112      	lsls	r2, r2, #4
 800a578:	430a      	orrs	r2, r1
 800a57a:	4931      	ldr	r1, [pc, #196]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	628b      	str	r3, [r1, #40]	; 0x28
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a584:	3b01      	subs	r3, #1
 800a586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58e:	3b01      	subs	r3, #1
 800a590:	025b      	lsls	r3, r3, #9
 800a592:	b29b      	uxth	r3, r3
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59a:	3b01      	subs	r3, #1
 800a59c:	041b      	lsls	r3, r3, #16
 800a59e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	061b      	lsls	r3, r3, #24
 800a5ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5b0:	4923      	ldr	r1, [pc, #140]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a5b6:	4b22      	ldr	r3, [pc, #136]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ba:	4a21      	ldr	r2, [pc, #132]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5bc:	f023 0301 	bic.w	r3, r3, #1
 800a5c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5c2:	4b1f      	ldr	r3, [pc, #124]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <HAL_RCC_OscConfig+0x778>)
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5ce:	00d2      	lsls	r2, r2, #3
 800a5d0:	491b      	ldr	r1, [pc, #108]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a5d6:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5da:	f023 020c 	bic.w	r2, r3, #12
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	4917      	ldr	r1, [pc, #92]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a5e8:	4b15      	ldr	r3, [pc, #84]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	f023 0202 	bic.w	r2, r3, #2
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f4:	4912      	ldr	r1, [pc, #72]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a5fa:	4b11      	ldr	r3, [pc, #68]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	4a10      	ldr	r2, [pc, #64]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a604:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a606:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60a:	4a0d      	ldr	r2, [pc, #52]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a60c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a612:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a616:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a61c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a61e:	4b08      	ldr	r3, [pc, #32]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	4a07      	ldr	r2, [pc, #28]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a624:	f043 0301 	orr.w	r3, r3, #1
 800a628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a62a:	4b05      	ldr	r3, [pc, #20]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a04      	ldr	r2, [pc, #16]	; (800a640 <HAL_RCC_OscConfig+0x76c>)
 800a630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a636:	f7f9 fc79 	bl	8003f2c <HAL_GetTick>
 800a63a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a63c:	e011      	b.n	800a662 <HAL_RCC_OscConfig+0x78e>
 800a63e:	bf00      	nop
 800a640:	58024400 	.word	0x58024400
 800a644:	58024800 	.word	0x58024800
 800a648:	fffffc0c 	.word	0xfffffc0c
 800a64c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a650:	f7f9 fc6c 	bl	8003f2c <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e08a      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a662:	4b47      	ldr	r3, [pc, #284]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0f0      	beq.n	800a650 <HAL_RCC_OscConfig+0x77c>
 800a66e:	e082      	b.n	800a776 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a670:	4b43      	ldr	r3, [pc, #268]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a42      	ldr	r2, [pc, #264]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a67a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a67c:	f7f9 fc56 	bl	8003f2c <HAL_GetTick>
 800a680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a682:	e008      	b.n	800a696 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a684:	f7f9 fc52 	bl	8003f2c <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d901      	bls.n	800a696 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e070      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a696:	4b3a      	ldr	r3, [pc, #232]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1f0      	bne.n	800a684 <HAL_RCC_OscConfig+0x7b0>
 800a6a2:	e068      	b.n	800a776 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6a4:	4b36      	ldr	r3, [pc, #216]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6aa:	4b35      	ldr	r3, [pc, #212]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d031      	beq.n	800a71c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f003 0203 	and.w	r2, r3, #3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d12a      	bne.n	800a71c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	091b      	lsrs	r3, r3, #4
 800a6ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d122      	bne.n	800a71c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d11a      	bne.n	800a71c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	0a5b      	lsrs	r3, r3, #9
 800a6ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d111      	bne.n	800a71c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	0c1b      	lsrs	r3, r3, #16
 800a6fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a706:	429a      	cmp	r2, r3
 800a708:	d108      	bne.n	800a71c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	0e1b      	lsrs	r3, r3, #24
 800a70e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a716:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a718:	429a      	cmp	r2, r3
 800a71a:	d001      	beq.n	800a720 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e02b      	b.n	800a778 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a720:	4b17      	ldr	r3, [pc, #92]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a724:	08db      	lsrs	r3, r3, #3
 800a726:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a72a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	429a      	cmp	r2, r3
 800a734:	d01f      	beq.n	800a776 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a736:	4b12      	ldr	r3, [pc, #72]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	4a11      	ldr	r2, [pc, #68]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a73c:	f023 0301 	bic.w	r3, r3, #1
 800a740:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a742:	f7f9 fbf3 	bl	8003f2c <HAL_GetTick>
 800a746:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a748:	bf00      	nop
 800a74a:	f7f9 fbef 	bl	8003f2c <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	4293      	cmp	r3, r2
 800a754:	d0f9      	beq.n	800a74a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a756:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a75a:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <HAL_RCC_OscConfig+0x8b0>)
 800a75c:	4013      	ands	r3, r2
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a762:	00d2      	lsls	r2, r2, #3
 800a764:	4906      	ldr	r1, [pc, #24]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a766:	4313      	orrs	r3, r2
 800a768:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a76a:	4b05      	ldr	r3, [pc, #20]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	4a04      	ldr	r2, [pc, #16]	; (800a780 <HAL_RCC_OscConfig+0x8ac>)
 800a770:	f043 0301 	orr.w	r3, r3, #1
 800a774:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3730      	adds	r7, #48	; 0x30
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	58024400 	.word	0x58024400
 800a784:	ffff0007 	.word	0xffff0007

0800a788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e19c      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a79c:	4b8a      	ldr	r3, [pc, #552]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d910      	bls.n	800a7cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7aa:	4b87      	ldr	r3, [pc, #540]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f023 020f 	bic.w	r2, r3, #15
 800a7b2:	4985      	ldr	r1, [pc, #532]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7ba:	4b83      	ldr	r3, [pc, #524]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d001      	beq.n	800a7cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e184      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	4b7b      	ldr	r3, [pc, #492]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d908      	bls.n	800a7fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7e8:	4b78      	ldr	r3, [pc, #480]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4975      	ldr	r1, [pc, #468]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d010      	beq.n	800a828 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	4b70      	ldr	r3, [pc, #448]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a812:	429a      	cmp	r2, r3
 800a814:	d908      	bls.n	800a828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a816:	4b6d      	ldr	r3, [pc, #436]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	496a      	ldr	r1, [pc, #424]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a824:	4313      	orrs	r3, r2
 800a826:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0310 	and.w	r3, r3, #16
 800a830:	2b00      	cmp	r3, #0
 800a832:	d010      	beq.n	800a856 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699a      	ldr	r2, [r3, #24]
 800a838:	4b64      	ldr	r3, [pc, #400]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a840:	429a      	cmp	r2, r3
 800a842:	d908      	bls.n	800a856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a844:	4b61      	ldr	r3, [pc, #388]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	495e      	ldr	r1, [pc, #376]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a852:	4313      	orrs	r3, r2
 800a854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d010      	beq.n	800a884 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69da      	ldr	r2, [r3, #28]
 800a866:	4b59      	ldr	r3, [pc, #356]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a86e:	429a      	cmp	r2, r3
 800a870:	d908      	bls.n	800a884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a872:	4b56      	ldr	r3, [pc, #344]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	4953      	ldr	r1, [pc, #332]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a880:	4313      	orrs	r3, r2
 800a882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d010      	beq.n	800a8b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	4b4d      	ldr	r3, [pc, #308]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d908      	bls.n	800a8b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8a0:	4b4a      	ldr	r3, [pc, #296]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	f023 020f 	bic.w	r2, r3, #15
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	4947      	ldr	r1, [pc, #284]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0301 	and.w	r3, r3, #1
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d055      	beq.n	800a96a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a8be:	4b43      	ldr	r3, [pc, #268]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	4940      	ldr	r1, [pc, #256]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d107      	bne.n	800a8e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8d8:	4b3c      	ldr	r3, [pc, #240]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d121      	bne.n	800a928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e0f6      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d107      	bne.n	800a900 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8f0:	4b36      	ldr	r3, [pc, #216]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d115      	bne.n	800a928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e0ea      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d107      	bne.n	800a918 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a908:	4b30      	ldr	r3, [pc, #192]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e0de      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a918:	4b2c      	ldr	r3, [pc, #176]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e0d6      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a928:	4b28      	ldr	r3, [pc, #160]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	f023 0207 	bic.w	r2, r3, #7
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	4925      	ldr	r1, [pc, #148]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a936:	4313      	orrs	r3, r2
 800a938:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a93a:	f7f9 faf7 	bl	8003f2c <HAL_GetTick>
 800a93e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a940:	e00a      	b.n	800a958 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a942:	f7f9 faf3 	bl	8003f2c <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a950:	4293      	cmp	r3, r2
 800a952:	d901      	bls.n	800a958 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e0be      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a958:	4b1c      	ldr	r3, [pc, #112]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	429a      	cmp	r2, r3
 800a968:	d1eb      	bne.n	800a942 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0302 	and.w	r3, r3, #2
 800a972:	2b00      	cmp	r3, #0
 800a974:	d010      	beq.n	800a998 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68da      	ldr	r2, [r3, #12]
 800a97a:	4b14      	ldr	r3, [pc, #80]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	f003 030f 	and.w	r3, r3, #15
 800a982:	429a      	cmp	r2, r3
 800a984:	d208      	bcs.n	800a998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a986:	4b11      	ldr	r3, [pc, #68]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	f023 020f 	bic.w	r2, r3, #15
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	490e      	ldr	r1, [pc, #56]	; (800a9cc <HAL_RCC_ClockConfig+0x244>)
 800a994:	4313      	orrs	r3, r2
 800a996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a998:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 030f 	and.w	r3, r3, #15
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d214      	bcs.n	800a9d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f023 020f 	bic.w	r2, r3, #15
 800a9ae:	4906      	ldr	r1, [pc, #24]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9b6:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <HAL_RCC_ClockConfig+0x240>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 030f 	and.w	r3, r3, #15
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d005      	beq.n	800a9d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e086      	b.n	800aad6 <HAL_RCC_ClockConfig+0x34e>
 800a9c8:	52002000 	.word	0x52002000
 800a9cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d010      	beq.n	800a9fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691a      	ldr	r2, [r3, #16]
 800a9e0:	4b3f      	ldr	r3, [pc, #252]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d208      	bcs.n	800a9fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9ec:	4b3c      	ldr	r3, [pc, #240]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	4939      	ldr	r1, [pc, #228]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0308 	and.w	r3, r3, #8
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d010      	beq.n	800aa2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695a      	ldr	r2, [r3, #20]
 800aa0e:	4b34      	ldr	r3, [pc, #208]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d208      	bcs.n	800aa2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa1a:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	492e      	ldr	r1, [pc, #184]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0310 	and.w	r3, r3, #16
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d010      	beq.n	800aa5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699a      	ldr	r2, [r3, #24]
 800aa3c:	4b28      	ldr	r3, [pc, #160]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d208      	bcs.n	800aa5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa48:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	4922      	ldr	r1, [pc, #136]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0320 	and.w	r3, r3, #32
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d010      	beq.n	800aa88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	69da      	ldr	r2, [r3, #28]
 800aa6a:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d208      	bcs.n	800aa88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa76:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	4917      	ldr	r1, [pc, #92]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa84:	4313      	orrs	r3, r2
 800aa86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa88:	f000 f834 	bl	800aaf4 <HAL_RCC_GetSysClockFreq>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	0a1b      	lsrs	r3, r3, #8
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	4912      	ldr	r1, [pc, #72]	; (800aae4 <HAL_RCC_ClockConfig+0x35c>)
 800aa9a:	5ccb      	ldrb	r3, [r1, r3]
 800aa9c:	f003 031f 	and.w	r3, r3, #31
 800aaa0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <HAL_RCC_ClockConfig+0x358>)
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	4a0d      	ldr	r2, [pc, #52]	; (800aae4 <HAL_RCC_ClockConfig+0x35c>)
 800aab0:	5cd3      	ldrb	r3, [r2, r3]
 800aab2:	f003 031f 	and.w	r3, r3, #31
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	4a0a      	ldr	r2, [pc, #40]	; (800aae8 <HAL_RCC_ClockConfig+0x360>)
 800aabe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aac0:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <HAL_RCC_ClockConfig+0x364>)
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aac6:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <HAL_RCC_ClockConfig+0x368>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7f8 f960 	bl	8002d90 <HAL_InitTick>
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	58024400 	.word	0x58024400
 800aae4:	080176a4 	.word	0x080176a4
 800aae8:	24000088 	.word	0x24000088
 800aaec:	24000084 	.word	0x24000084
 800aaf0:	2400008c 	.word	0x2400008c

0800aaf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b089      	sub	sp, #36	; 0x24
 800aaf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aafa:	4bb3      	ldr	r3, [pc, #716]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab02:	2b18      	cmp	r3, #24
 800ab04:	f200 8155 	bhi.w	800adb2 <HAL_RCC_GetSysClockFreq+0x2be>
 800ab08:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0e:	bf00      	nop
 800ab10:	0800ab75 	.word	0x0800ab75
 800ab14:	0800adb3 	.word	0x0800adb3
 800ab18:	0800adb3 	.word	0x0800adb3
 800ab1c:	0800adb3 	.word	0x0800adb3
 800ab20:	0800adb3 	.word	0x0800adb3
 800ab24:	0800adb3 	.word	0x0800adb3
 800ab28:	0800adb3 	.word	0x0800adb3
 800ab2c:	0800adb3 	.word	0x0800adb3
 800ab30:	0800ab9b 	.word	0x0800ab9b
 800ab34:	0800adb3 	.word	0x0800adb3
 800ab38:	0800adb3 	.word	0x0800adb3
 800ab3c:	0800adb3 	.word	0x0800adb3
 800ab40:	0800adb3 	.word	0x0800adb3
 800ab44:	0800adb3 	.word	0x0800adb3
 800ab48:	0800adb3 	.word	0x0800adb3
 800ab4c:	0800adb3 	.word	0x0800adb3
 800ab50:	0800aba1 	.word	0x0800aba1
 800ab54:	0800adb3 	.word	0x0800adb3
 800ab58:	0800adb3 	.word	0x0800adb3
 800ab5c:	0800adb3 	.word	0x0800adb3
 800ab60:	0800adb3 	.word	0x0800adb3
 800ab64:	0800adb3 	.word	0x0800adb3
 800ab68:	0800adb3 	.word	0x0800adb3
 800ab6c:	0800adb3 	.word	0x0800adb3
 800ab70:	0800aba7 	.word	0x0800aba7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab74:	4b94      	ldr	r3, [pc, #592]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0320 	and.w	r3, r3, #32
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab80:	4b91      	ldr	r3, [pc, #580]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	08db      	lsrs	r3, r3, #3
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	4a90      	ldr	r2, [pc, #576]	; (800adcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ab92:	e111      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab94:	4b8d      	ldr	r3, [pc, #564]	; (800adcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab96:	61bb      	str	r3, [r7, #24]
      break;
 800ab98:	e10e      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ab9a:	4b8d      	ldr	r3, [pc, #564]	; (800add0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab9c:	61bb      	str	r3, [r7, #24]
      break;
 800ab9e:	e10b      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aba0:	4b8c      	ldr	r3, [pc, #560]	; (800add4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aba2:	61bb      	str	r3, [r7, #24]
      break;
 800aba4:	e108      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aba6:	4b88      	ldr	r3, [pc, #544]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abaa:	f003 0303 	and.w	r3, r3, #3
 800abae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800abb0:	4b85      	ldr	r3, [pc, #532]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	091b      	lsrs	r3, r3, #4
 800abb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abbc:	4b82      	ldr	r3, [pc, #520]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abc6:	4b80      	ldr	r3, [pc, #512]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abca:	08db      	lsrs	r3, r3, #3
 800abcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	fb02 f303 	mul.w	r3, r2, r3
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 80e1 	beq.w	800adac <HAL_RCC_GetSysClockFreq+0x2b8>
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b02      	cmp	r3, #2
 800abee:	f000 8083 	beq.w	800acf8 <HAL_RCC_GetSysClockFreq+0x204>
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	f200 80a1 	bhi.w	800ad3c <HAL_RCC_GetSysClockFreq+0x248>
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <HAL_RCC_GetSysClockFreq+0x114>
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d056      	beq.n	800acb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ac06:	e099      	b.n	800ad3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac08:	4b6f      	ldr	r3, [pc, #444]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0320 	and.w	r3, r3, #32
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d02d      	beq.n	800ac70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac14:	4b6c      	ldr	r3, [pc, #432]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	08db      	lsrs	r3, r3, #3
 800ac1a:	f003 0303 	and.w	r3, r3, #3
 800ac1e:	4a6b      	ldr	r2, [pc, #428]	; (800adcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
 800ac24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	ee07 3a90 	vmov	s15, r3
 800ac2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac3e:	4b62      	ldr	r3, [pc, #392]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac52:	eddf 5a61 	vldr	s11, [pc, #388]	; 800add8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ac6e:	e087      	b.n	800ad80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	ee07 3a90 	vmov	s15, r3
 800ac76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800addc <HAL_RCC_GetSysClockFreq+0x2e8>
 800ac7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac82:	4b51      	ldr	r3, [pc, #324]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac92:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac96:	eddf 5a50 	vldr	s11, [pc, #320]	; 800add8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acb2:	e065      	b.n	800ad80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ade0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800acc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc6:	4b40      	ldr	r3, [pc, #256]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800acda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800add8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800acde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800acf6:	e043      	b.n	800ad80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad02:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ade4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ad06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0a:	4b2f      	ldr	r3, [pc, #188]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800add8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad3a:	e021      	b.n	800ad80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ade0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4e:	4b1e      	ldr	r3, [pc, #120]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800add8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ad80:	4b11      	ldr	r3, [pc, #68]	; (800adc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	0a5b      	lsrs	r3, r3, #9
 800ad86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	ee07 3a90 	vmov	s15, r3
 800ad94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad98:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada4:	ee17 3a90 	vmov	r3, s15
 800ada8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800adaa:	e005      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	61bb      	str	r3, [r7, #24]
      break;
 800adb0:	e002      	b.n	800adb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800adb2:	4b07      	ldr	r3, [pc, #28]	; (800add0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800adb4:	61bb      	str	r3, [r7, #24]
      break;
 800adb6:	bf00      	nop
  }

  return sysclockfreq;
 800adb8:	69bb      	ldr	r3, [r7, #24]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3724      	adds	r7, #36	; 0x24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	58024400 	.word	0x58024400
 800adcc:	03d09000 	.word	0x03d09000
 800add0:	003d0900 	.word	0x003d0900
 800add4:	017d7840 	.word	0x017d7840
 800add8:	46000000 	.word	0x46000000
 800addc:	4c742400 	.word	0x4c742400
 800ade0:	4a742400 	.word	0x4a742400
 800ade4:	4bbebc20 	.word	0x4bbebc20

0800ade8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800adee:	f7ff fe81 	bl	800aaf4 <HAL_RCC_GetSysClockFreq>
 800adf2:	4602      	mov	r2, r0
 800adf4:	4b10      	ldr	r3, [pc, #64]	; (800ae38 <HAL_RCC_GetHCLKFreq+0x50>)
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	0a1b      	lsrs	r3, r3, #8
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	490f      	ldr	r1, [pc, #60]	; (800ae3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ae00:	5ccb      	ldrb	r3, [r1, r3]
 800ae02:	f003 031f 	and.w	r3, r3, #31
 800ae06:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	f003 030f 	and.w	r3, r3, #15
 800ae14:	4a09      	ldr	r2, [pc, #36]	; (800ae3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ae16:	5cd3      	ldrb	r3, [r2, r3]
 800ae18:	f003 031f 	and.w	r3, r3, #31
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae22:	4a07      	ldr	r2, [pc, #28]	; (800ae40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae26:	4a07      	ldr	r2, [pc, #28]	; (800ae44 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	58024400 	.word	0x58024400
 800ae3c:	080176a4 	.word	0x080176a4
 800ae40:	24000088 	.word	0x24000088
 800ae44:	24000084 	.word	0x24000084

0800ae48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae4c:	f7ff ffcc 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae50:	4602      	mov	r2, r0
 800ae52:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	091b      	lsrs	r3, r3, #4
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	4904      	ldr	r1, [pc, #16]	; (800ae70 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae5e:	5ccb      	ldrb	r3, [r1, r3]
 800ae60:	f003 031f 	and.w	r3, r3, #31
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	58024400 	.word	0x58024400
 800ae70:	080176a4 	.word	0x080176a4

0800ae74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ae78:	f7ff ffb6 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	4b06      	ldr	r3, [pc, #24]	; (800ae98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	0a1b      	lsrs	r3, r3, #8
 800ae84:	f003 0307 	and.w	r3, r3, #7
 800ae88:	4904      	ldr	r1, [pc, #16]	; (800ae9c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ae8a:	5ccb      	ldrb	r3, [r1, r3]
 800ae8c:	f003 031f 	and.w	r3, r3, #31
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	080176a4 	.word	0x080176a4

0800aea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	223f      	movs	r2, #63	; 0x3f
 800aeae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aeb0:	4b1a      	ldr	r3, [pc, #104]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	f003 0207 	and.w	r2, r3, #7
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800aebc:	4b17      	ldr	r3, [pc, #92]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800aec8:	4b14      	ldr	r3, [pc, #80]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	f003 020f 	and.w	r2, r3, #15
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800aed4:	4b11      	ldr	r3, [pc, #68]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800aee0:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aeec:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aef8:	4b08      	ldr	r3, [pc, #32]	; (800af1c <HAL_RCC_GetClockConfig+0x7c>)
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af04:	4b06      	ldr	r3, [pc, #24]	; (800af20 <HAL_RCC_GetClockConfig+0x80>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 020f 	and.w	r2, r3, #15
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	601a      	str	r2, [r3, #0]
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	58024400 	.word	0x58024400
 800af20:	52002000 	.word	0x52002000

0800af24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af28:	b0ca      	sub	sp, #296	; 0x128
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af30:	2300      	movs	r3, #0
 800af32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af36:	2300      	movs	r3, #0
 800af38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800af48:	2500      	movs	r5, #0
 800af4a:	ea54 0305 	orrs.w	r3, r4, r5
 800af4e:	d049      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800af50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af5a:	d02f      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800af5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af60:	d828      	bhi.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af66:	d01a      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af6c:	d822      	bhi.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af76:	d007      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800af78:	e01c      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af7a:	4bb8      	ldr	r3, [pc, #736]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7e:	4ab7      	ldr	r2, [pc, #732]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af86:	e01a      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8c:	3308      	adds	r3, #8
 800af8e:	2102      	movs	r1, #2
 800af90:	4618      	mov	r0, r3
 800af92:	f002 fb61 	bl	800d658 <RCCEx_PLL2_Config>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800af9c:	e00f      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa2:	3328      	adds	r3, #40	; 0x28
 800afa4:	2102      	movs	r1, #2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f002 fc08 	bl	800d7bc <RCCEx_PLL3_Config>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afb2:	e004      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afba:	e000      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800afbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800afc6:	4ba5      	ldr	r3, [pc, #660]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800afce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afd4:	4aa1      	ldr	r2, [pc, #644]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd6:	430b      	orrs	r3, r1
 800afd8:	6513      	str	r3, [r2, #80]	; 0x50
 800afda:	e003      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800afe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aff0:	f04f 0900 	mov.w	r9, #0
 800aff4:	ea58 0309 	orrs.w	r3, r8, r9
 800aff8:	d047      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800affa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800affe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b000:	2b04      	cmp	r3, #4
 800b002:	d82a      	bhi.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b004:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00a:	bf00      	nop
 800b00c:	0800b021 	.word	0x0800b021
 800b010:	0800b02f 	.word	0x0800b02f
 800b014:	0800b045 	.word	0x0800b045
 800b018:	0800b063 	.word	0x0800b063
 800b01c:	0800b063 	.word	0x0800b063
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b020:	4b8e      	ldr	r3, [pc, #568]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	4a8d      	ldr	r2, [pc, #564]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b02c:	e01a      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b032:	3308      	adds	r3, #8
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f002 fb0e 	bl	800d658 <RCCEx_PLL2_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b042:	e00f      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b048:	3328      	adds	r3, #40	; 0x28
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f002 fbb5 	bl	800d7bc <RCCEx_PLL3_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b058:	e004      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b060:	e000      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b062:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10a      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b06c:	4b7b      	ldr	r3, [pc, #492]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b070:	f023 0107 	bic.w	r1, r3, #7
 800b074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b07a:	4a78      	ldr	r2, [pc, #480]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6513      	str	r3, [r2, #80]	; 0x50
 800b080:	e003      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b096:	f04f 0b00 	mov.w	fp, #0
 800b09a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b09e:	d04c      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0aa:	d030      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b0ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b0:	d829      	bhi.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0b2:	2bc0      	cmp	r3, #192	; 0xc0
 800b0b4:	d02d      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b0b6:	2bc0      	cmp	r3, #192	; 0xc0
 800b0b8:	d825      	bhi.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0ba:	2b80      	cmp	r3, #128	; 0x80
 800b0bc:	d018      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b0be:	2b80      	cmp	r3, #128	; 0x80
 800b0c0:	d821      	bhi.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b0c6:	2b40      	cmp	r3, #64	; 0x40
 800b0c8:	d007      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b0ca:	e01c      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0cc:	4b63      	ldr	r3, [pc, #396]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	4a62      	ldr	r2, [pc, #392]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0d8:	e01c      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0de:	3308      	adds	r3, #8
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 fab8 	bl	800d658 <RCCEx_PLL2_Config>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b0ee:	e011      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f4:	3328      	adds	r3, #40	; 0x28
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 fb5f 	bl	800d7bc <RCCEx_PLL3_Config>
 800b0fe:	4603      	mov	r3, r0
 800b100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b104:	e006      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b10c:	e002      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b10e:	bf00      	nop
 800b110:	e000      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b112:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b11c:	4b4f      	ldr	r3, [pc, #316]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b120:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b12a:	4a4c      	ldr	r2, [pc, #304]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b12c:	430b      	orrs	r3, r1
 800b12e:	6513      	str	r3, [r2, #80]	; 0x50
 800b130:	e003      	b.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b146:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b14a:	2300      	movs	r3, #0
 800b14c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b150:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b154:	460b      	mov	r3, r1
 800b156:	4313      	orrs	r3, r2
 800b158:	d053      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b166:	d035      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b16c:	d82e      	bhi.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b16e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b172:	d031      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b174:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b178:	d828      	bhi.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b17a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b17e:	d01a      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b184:	d822      	bhi.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b18a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b18e:	d007      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b190:	e01c      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b192:	4b32      	ldr	r3, [pc, #200]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	4a31      	ldr	r2, [pc, #196]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b19c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b19e:	e01c      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f002 fa55 	bl	800d658 <RCCEx_PLL2_Config>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b1b4:	e011      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ba:	3328      	adds	r3, #40	; 0x28
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f002 fafc 	bl	800d7bc <RCCEx_PLL3_Config>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ca:	e006      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1d2:	e002      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1d4:	bf00      	nop
 800b1d6:	e000      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10b      	bne.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b1e2:	4b1e      	ldr	r3, [pc, #120]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1f2:	4a1a      	ldr	r2, [pc, #104]	; (800b25c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	6593      	str	r3, [r2, #88]	; 0x58
 800b1f8:	e003      	b.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b20e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b212:	2300      	movs	r3, #0
 800b214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b218:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b21c:	460b      	mov	r3, r1
 800b21e:	4313      	orrs	r3, r2
 800b220:	d056      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b22a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b22e:	d038      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b234:	d831      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b23a:	d034      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b23c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b240:	d82b      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b246:	d01d      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b24c:	d825      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d006      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b252:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b256:	d00a      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b258:	e01f      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b25a:	bf00      	nop
 800b25c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b260:	4ba2      	ldr	r3, [pc, #648]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	4aa1      	ldr	r2, [pc, #644]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b26a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b26c:	e01c      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b272:	3308      	adds	r3, #8
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f002 f9ee 	bl	800d658 <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b282:	e011      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b288:	3328      	adds	r3, #40	; 0x28
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 fa95 	bl	800d7bc <RCCEx_PLL3_Config>
 800b292:	4603      	mov	r3, r0
 800b294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b298:	e006      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2a0:	e002      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e000      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10b      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b2b0:	4b8e      	ldr	r3, [pc, #568]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2c0:	4a8a      	ldr	r2, [pc, #552]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2c2:	430b      	orrs	r3, r1
 800b2c4:	6593      	str	r3, [r2, #88]	; 0x58
 800b2c6:	e003      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b2dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b2e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	d03a      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f6:	2b30      	cmp	r3, #48	; 0x30
 800b2f8:	d01f      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b2fa:	2b30      	cmp	r3, #48	; 0x30
 800b2fc:	d819      	bhi.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d00c      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b302:	2b20      	cmp	r3, #32
 800b304:	d815      	bhi.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d019      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b30a:	2b10      	cmp	r3, #16
 800b30c:	d111      	bne.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b30e:	4b77      	ldr	r3, [pc, #476]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	4a76      	ldr	r2, [pc, #472]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b31a:	e011      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b320:	3308      	adds	r3, #8
 800b322:	2102      	movs	r1, #2
 800b324:	4618      	mov	r0, r3
 800b326:	f002 f997 	bl	800d658 <RCCEx_PLL2_Config>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b330:	e006      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b338:	e002      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b33a:	bf00      	nop
 800b33c:	e000      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b33e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10a      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b348:	4b68      	ldr	r3, [pc, #416]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b356:	4a65      	ldr	r2, [pc, #404]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b358:	430b      	orrs	r3, r1
 800b35a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b35c:	e003      	b.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b372:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b376:	2300      	movs	r3, #0
 800b378:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b37c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b380:	460b      	mov	r3, r1
 800b382:	4313      	orrs	r3, r2
 800b384:	d051      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b38c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b390:	d035      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b396:	d82e      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b39c:	d031      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b39e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3a2:	d828      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3a8:	d01a      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b3aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ae:	d822      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d003      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3b8:	d007      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b3ba:	e01c      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3bc:	4b4b      	ldr	r3, [pc, #300]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	4a4a      	ldr	r2, [pc, #296]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3c8:	e01c      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 f940 	bl	800d658 <RCCEx_PLL2_Config>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3de:	e011      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e4:	3328      	adds	r3, #40	; 0x28
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f002 f9e7 	bl	800d7bc <RCCEx_PLL3_Config>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3f4:	e006      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3fc:	e002      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b402:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b40c:	4b37      	ldr	r3, [pc, #220]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b410:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b41a:	4a34      	ldr	r2, [pc, #208]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b41c:	430b      	orrs	r3, r1
 800b41e:	6513      	str	r3, [r2, #80]	; 0x50
 800b420:	e003      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b43a:	2300      	movs	r3, #0
 800b43c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b440:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b444:	460b      	mov	r3, r1
 800b446:	4313      	orrs	r3, r2
 800b448:	d056      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b454:	d033      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b45a:	d82c      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b45c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b460:	d02f      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b466:	d826      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b468:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b46c:	d02b      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b46e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b472:	d820      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b478:	d012      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b47a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b47e:	d81a      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d022      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b488:	d115      	bne.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48e:	3308      	adds	r3, #8
 800b490:	2101      	movs	r1, #1
 800b492:	4618      	mov	r0, r3
 800b494:	f002 f8e0 	bl	800d658 <RCCEx_PLL2_Config>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b49e:	e015      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	3328      	adds	r3, #40	; 0x28
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f002 f987 	bl	800d7bc <RCCEx_PLL3_Config>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b4b4:	e00a      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4bc:	e006      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4be:	bf00      	nop
 800b4c0:	e004      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4c2:	bf00      	nop
 800b4c4:	e002      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4c6:	bf00      	nop
 800b4c8:	e000      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b4ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10d      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e2:	4a02      	ldr	r2, [pc, #8]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	6513      	str	r3, [r2, #80]	; 0x50
 800b4e8:	e006      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b4ea:	bf00      	nop
 800b4ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b50e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b512:	460b      	mov	r3, r1
 800b514:	4313      	orrs	r3, r2
 800b516:	d055      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b524:	d033      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b52a:	d82c      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b530:	d02f      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b536:	d826      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b53c:	d02b      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b53e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b542:	d820      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b548:	d012      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b54a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54e:	d81a      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b550:	2b00      	cmp	r3, #0
 800b552:	d022      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b558:	d115      	bne.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55e:	3308      	adds	r3, #8
 800b560:	2101      	movs	r1, #1
 800b562:	4618      	mov	r0, r3
 800b564:	f002 f878 	bl	800d658 <RCCEx_PLL2_Config>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b56e:	e015      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b574:	3328      	adds	r3, #40	; 0x28
 800b576:	2101      	movs	r1, #1
 800b578:	4618      	mov	r0, r3
 800b57a:	f002 f91f 	bl	800d7bc <RCCEx_PLL3_Config>
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b584:	e00a      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b58c:	e006      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b58e:	bf00      	nop
 800b590:	e004      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b592:	bf00      	nop
 800b594:	e002      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b596:	bf00      	nop
 800b598:	e000      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b5a4:	4ba3      	ldr	r3, [pc, #652]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5b4:	4a9f      	ldr	r2, [pc, #636]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ba:	e003      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b5d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b5da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	d037      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ee:	d00e      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b5f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5f4:	d816      	bhi.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d018      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b5fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5fe:	d111      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b600:	4b8c      	ldr	r3, [pc, #560]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	4a8b      	ldr	r2, [pc, #556]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b60c:	e00f      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b612:	3308      	adds	r3, #8
 800b614:	2101      	movs	r1, #1
 800b616:	4618      	mov	r0, r3
 800b618:	f002 f81e 	bl	800d658 <RCCEx_PLL2_Config>
 800b61c:	4603      	mov	r3, r0
 800b61e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b622:	e004      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b62a:	e000      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b62e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b636:	4b7f      	ldr	r3, [pc, #508]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b644:	4a7b      	ldr	r2, [pc, #492]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b646:	430b      	orrs	r3, r1
 800b648:	6513      	str	r3, [r2, #80]	; 0x50
 800b64a:	e003      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b664:	2300      	movs	r3, #0
 800b666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b66a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b66e:	460b      	mov	r3, r1
 800b670:	4313      	orrs	r3, r2
 800b672:	d039      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d81c      	bhi.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b67e:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b6c1 	.word	0x0800b6c1
 800b688:	0800b695 	.word	0x0800b695
 800b68c:	0800b6a3 	.word	0x0800b6a3
 800b690:	0800b6c1 	.word	0x0800b6c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b694:	4b67      	ldr	r3, [pc, #412]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	4a66      	ldr	r2, [pc, #408]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b69a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6a0:	e00f      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	2102      	movs	r1, #2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f001 ffd4 	bl	800d658 <RCCEx_PLL2_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6b6:	e004      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6be:	e000      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b6c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b6ca:	4b5a      	ldr	r3, [pc, #360]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ce:	f023 0103 	bic.w	r1, r3, #3
 800b6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6d8:	4a56      	ldr	r2, [pc, #344]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6de:	e003      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b6f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b6fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b702:	460b      	mov	r3, r1
 800b704:	4313      	orrs	r3, r2
 800b706:	f000 809f 	beq.w	800b848 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b70a:	4b4b      	ldr	r3, [pc, #300]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a4a      	ldr	r2, [pc, #296]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b716:	f7f8 fc09 	bl	8003f2c <HAL_GetTick>
 800b71a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b71e:	e00b      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b720:	f7f8 fc04 	bl	8003f2c <HAL_GetTick>
 800b724:	4602      	mov	r2, r0
 800b726:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	2b64      	cmp	r3, #100	; 0x64
 800b72e:	d903      	bls.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b736:	e005      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b738:	4b3f      	ldr	r3, [pc, #252]	; (800b838 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0ed      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d179      	bne.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b74c:	4b39      	ldr	r3, [pc, #228]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b754:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b758:	4053      	eors	r3, r2
 800b75a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d015      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b762:	4b34      	ldr	r3, [pc, #208]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b76a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b76e:	4b31      	ldr	r3, [pc, #196]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b772:	4a30      	ldr	r2, [pc, #192]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b778:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b77a:	4b2e      	ldr	r3, [pc, #184]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77e:	4a2d      	ldr	r2, [pc, #180]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b784:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b786:	4a2b      	ldr	r2, [pc, #172]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b788:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b78c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b79a:	d118      	bne.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b79c:	f7f8 fbc6 	bl	8003f2c <HAL_GetTick>
 800b7a0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7a4:	e00d      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7a6:	f7f8 fbc1 	bl	8003f2c <HAL_GetTick>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b7b0:	1ad2      	subs	r2, r2, r3
 800b7b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d903      	bls.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b7c0:	e005      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7c2:	4b1c      	ldr	r3, [pc, #112]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0eb      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d129      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7e6:	d10e      	bne.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b7e8:	4b12      	ldr	r3, [pc, #72]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7f8:	091a      	lsrs	r2, r3, #4
 800b7fa:	4b10      	ldr	r3, [pc, #64]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	4a0d      	ldr	r2, [pc, #52]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b800:	430b      	orrs	r3, r1
 800b802:	6113      	str	r3, [r2, #16]
 800b804:	e005      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b806:	4b0b      	ldr	r3, [pc, #44]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	4a0a      	ldr	r2, [pc, #40]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b80c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b810:	6113      	str	r3, [r2, #16]
 800b812:	4b08      	ldr	r3, [pc, #32]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b814:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b81e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b822:	4a04      	ldr	r2, [pc, #16]	; (800b834 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b824:	430b      	orrs	r3, r1
 800b826:	6713      	str	r3, [r2, #112]	; 0x70
 800b828:	e00e      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b82e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b832:	e009      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b834:	58024400 	.word	0x58024400
 800b838:	58024800 	.word	0x58024800
 800b83c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f002 0301 	and.w	r3, r2, #1
 800b854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b858:	2300      	movs	r3, #0
 800b85a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b85e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b862:	460b      	mov	r3, r1
 800b864:	4313      	orrs	r3, r2
 800b866:	f000 8089 	beq.w	800b97c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b870:	2b28      	cmp	r3, #40	; 0x28
 800b872:	d86b      	bhi.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b874:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87a:	bf00      	nop
 800b87c:	0800b955 	.word	0x0800b955
 800b880:	0800b94d 	.word	0x0800b94d
 800b884:	0800b94d 	.word	0x0800b94d
 800b888:	0800b94d 	.word	0x0800b94d
 800b88c:	0800b94d 	.word	0x0800b94d
 800b890:	0800b94d 	.word	0x0800b94d
 800b894:	0800b94d 	.word	0x0800b94d
 800b898:	0800b94d 	.word	0x0800b94d
 800b89c:	0800b921 	.word	0x0800b921
 800b8a0:	0800b94d 	.word	0x0800b94d
 800b8a4:	0800b94d 	.word	0x0800b94d
 800b8a8:	0800b94d 	.word	0x0800b94d
 800b8ac:	0800b94d 	.word	0x0800b94d
 800b8b0:	0800b94d 	.word	0x0800b94d
 800b8b4:	0800b94d 	.word	0x0800b94d
 800b8b8:	0800b94d 	.word	0x0800b94d
 800b8bc:	0800b937 	.word	0x0800b937
 800b8c0:	0800b94d 	.word	0x0800b94d
 800b8c4:	0800b94d 	.word	0x0800b94d
 800b8c8:	0800b94d 	.word	0x0800b94d
 800b8cc:	0800b94d 	.word	0x0800b94d
 800b8d0:	0800b94d 	.word	0x0800b94d
 800b8d4:	0800b94d 	.word	0x0800b94d
 800b8d8:	0800b94d 	.word	0x0800b94d
 800b8dc:	0800b955 	.word	0x0800b955
 800b8e0:	0800b94d 	.word	0x0800b94d
 800b8e4:	0800b94d 	.word	0x0800b94d
 800b8e8:	0800b94d 	.word	0x0800b94d
 800b8ec:	0800b94d 	.word	0x0800b94d
 800b8f0:	0800b94d 	.word	0x0800b94d
 800b8f4:	0800b94d 	.word	0x0800b94d
 800b8f8:	0800b94d 	.word	0x0800b94d
 800b8fc:	0800b955 	.word	0x0800b955
 800b900:	0800b94d 	.word	0x0800b94d
 800b904:	0800b94d 	.word	0x0800b94d
 800b908:	0800b94d 	.word	0x0800b94d
 800b90c:	0800b94d 	.word	0x0800b94d
 800b910:	0800b94d 	.word	0x0800b94d
 800b914:	0800b94d 	.word	0x0800b94d
 800b918:	0800b94d 	.word	0x0800b94d
 800b91c:	0800b955 	.word	0x0800b955
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b924:	3308      	adds	r3, #8
 800b926:	2101      	movs	r1, #1
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 fe95 	bl	800d658 <RCCEx_PLL2_Config>
 800b92e:	4603      	mov	r3, r0
 800b930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b934:	e00f      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93a:	3328      	adds	r3, #40	; 0x28
 800b93c:	2101      	movs	r1, #1
 800b93e:	4618      	mov	r0, r3
 800b940:	f001 ff3c 	bl	800d7bc <RCCEx_PLL3_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b94a:	e004      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b952:	e000      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b95e:	4bbf      	ldr	r3, [pc, #764]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b962:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96c:	4abb      	ldr	r2, [pc, #748]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b96e:	430b      	orrs	r3, r1
 800b970:	6553      	str	r3, [r2, #84]	; 0x54
 800b972:	e003      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b978:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f002 0302 	and.w	r3, r2, #2
 800b988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b98c:	2300      	movs	r3, #0
 800b98e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b992:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b996:	460b      	mov	r3, r1
 800b998:	4313      	orrs	r3, r2
 800b99a:	d041      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9a2:	2b05      	cmp	r3, #5
 800b9a4:	d824      	bhi.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b9a6:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ac:	0800b9f9 	.word	0x0800b9f9
 800b9b0:	0800b9c5 	.word	0x0800b9c5
 800b9b4:	0800b9db 	.word	0x0800b9db
 800b9b8:	0800b9f9 	.word	0x0800b9f9
 800b9bc:	0800b9f9 	.word	0x0800b9f9
 800b9c0:	0800b9f9 	.word	0x0800b9f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 fe43 	bl	800d658 <RCCEx_PLL2_Config>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9d8:	e00f      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9de:	3328      	adds	r3, #40	; 0x28
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f001 feea 	bl	800d7bc <RCCEx_PLL3_Config>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9ee:	e004      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9f6:	e000      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b9f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10a      	bne.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba02:	4b96      	ldr	r3, [pc, #600]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba06:	f023 0107 	bic.w	r1, r3, #7
 800ba0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba10:	4a92      	ldr	r2, [pc, #584]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba12:	430b      	orrs	r3, r1
 800ba14:	6553      	str	r3, [r2, #84]	; 0x54
 800ba16:	e003      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f002 0304 	and.w	r3, r2, #4
 800ba2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba30:	2300      	movs	r3, #0
 800ba32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	d044      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba48:	2b05      	cmp	r3, #5
 800ba4a:	d825      	bhi.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ba4c:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ba4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800baa1 	.word	0x0800baa1
 800ba58:	0800ba6d 	.word	0x0800ba6d
 800ba5c:	0800ba83 	.word	0x0800ba83
 800ba60:	0800baa1 	.word	0x0800baa1
 800ba64:	0800baa1 	.word	0x0800baa1
 800ba68:	0800baa1 	.word	0x0800baa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba70:	3308      	adds	r3, #8
 800ba72:	2101      	movs	r1, #1
 800ba74:	4618      	mov	r0, r3
 800ba76:	f001 fdef 	bl	800d658 <RCCEx_PLL2_Config>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba80:	e00f      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba86:	3328      	adds	r3, #40	; 0x28
 800ba88:	2101      	movs	r1, #1
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f001 fe96 	bl	800d7bc <RCCEx_PLL3_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba96:	e004      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba9e:	e000      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800baa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10b      	bne.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800baaa:	4b6c      	ldr	r3, [pc, #432]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baae:	f023 0107 	bic.w	r1, r3, #7
 800bab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baba:	4a68      	ldr	r2, [pc, #416]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800babc:	430b      	orrs	r3, r1
 800babe:	6593      	str	r3, [r2, #88]	; 0x58
 800bac0:	e003      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	f002 0320 	and.w	r3, r2, #32
 800bad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bada:	2300      	movs	r3, #0
 800badc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bae4:	460b      	mov	r3, r1
 800bae6:	4313      	orrs	r3, r2
 800bae8:	d055      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800baea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800baf6:	d033      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800baf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bafc:	d82c      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bafe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb02:	d02f      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bb04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb08:	d826      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb0e:	d02b      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bb10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb14:	d820      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb1a:	d012      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bb1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb20:	d81a      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d022      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bb26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb2a:	d115      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb30:	3308      	adds	r3, #8
 800bb32:	2100      	movs	r1, #0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 fd8f 	bl	800d658 <RCCEx_PLL2_Config>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb40:	e015      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb46:	3328      	adds	r3, #40	; 0x28
 800bb48:	2102      	movs	r1, #2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f001 fe36 	bl	800d7bc <RCCEx_PLL3_Config>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb56:	e00a      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb5e:	e006      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb60:	bf00      	nop
 800bb62:	e004      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb64:	bf00      	nop
 800bb66:	e002      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb68:	bf00      	nop
 800bb6a:	e000      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bb6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10b      	bne.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb86:	4a35      	ldr	r2, [pc, #212]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb88:	430b      	orrs	r3, r1
 800bb8a:	6553      	str	r3, [r2, #84]	; 0x54
 800bb8c:	e003      	b.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bba6:	2300      	movs	r3, #0
 800bba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bbac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	d058      	beq.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbc2:	d033      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bbc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbc8:	d82c      	bhi.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbce:	d02f      	beq.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bbd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbd4:	d826      	bhi.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbda:	d02b      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bbdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbe0:	d820      	bhi.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbe6:	d012      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bbe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbec:	d81a      	bhi.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d022      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bbf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbf6:	d115      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	2100      	movs	r1, #0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f001 fd29 	bl	800d658 <RCCEx_PLL2_Config>
 800bc06:	4603      	mov	r3, r0
 800bc08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc0c:	e015      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc12:	3328      	adds	r3, #40	; 0x28
 800bc14:	2102      	movs	r1, #2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fdd0 	bl	800d7bc <RCCEx_PLL3_Config>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc22:	e00a      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc2a:	e006      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc2c:	bf00      	nop
 800bc2e:	e004      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc30:	bf00      	nop
 800bc32:	e002      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc34:	bf00      	nop
 800bc36:	e000      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10e      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc42:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc52:	4a02      	ldr	r2, [pc, #8]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc54:	430b      	orrs	r3, r1
 800bc56:	6593      	str	r3, [r2, #88]	; 0x58
 800bc58:	e006      	b.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bc5a:	bf00      	nop
 800bc5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bc74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bc82:	460b      	mov	r3, r1
 800bc84:	4313      	orrs	r3, r2
 800bc86:	d055      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc94:	d033      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bc96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc9a:	d82c      	bhi.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bc9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bca0:	d02f      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bca6:	d826      	bhi.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bca8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcac:	d02b      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bcae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcb2:	d820      	bhi.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcb8:	d012      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bcba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcbe:	d81a      	bhi.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d022      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bcc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcc8:	d115      	bne.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	3308      	adds	r3, #8
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 fcc0 	bl	800d658 <RCCEx_PLL2_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcde:	e015      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce4:	3328      	adds	r3, #40	; 0x28
 800bce6:	2102      	movs	r1, #2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f001 fd67 	bl	800d7bc <RCCEx_PLL3_Config>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcf4:	e00a      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcfc:	e006      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bcfe:	bf00      	nop
 800bd00:	e004      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd02:	bf00      	nop
 800bd04:	e002      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd06:	bf00      	nop
 800bd08:	e000      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10b      	bne.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd14:	4ba1      	ldr	r3, [pc, #644]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd18:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd24:	4a9d      	ldr	r2, [pc, #628]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd26:	430b      	orrs	r3, r1
 800bd28:	6593      	str	r3, [r2, #88]	; 0x58
 800bd2a:	e003      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	f002 0308 	and.w	r3, r2, #8
 800bd40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd44:	2300      	movs	r3, #0
 800bd46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4313      	orrs	r3, r2
 800bd52:	d01e      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd60:	d10c      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd66:	3328      	adds	r3, #40	; 0x28
 800bd68:	2102      	movs	r1, #2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f001 fd26 	bl	800d7bc <RCCEx_PLL3_Config>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd7c:	4b87      	ldr	r3, [pc, #540]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd8c:	4a83      	ldr	r2, [pc, #524]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd8e:	430b      	orrs	r3, r1
 800bd90:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f002 0310 	and.w	r3, r2, #16
 800bd9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bda2:	2300      	movs	r3, #0
 800bda4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bda8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bdac:	460b      	mov	r3, r1
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	d01e      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdbe:	d10c      	bne.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bdc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc4:	3328      	adds	r3, #40	; 0x28
 800bdc6:	2102      	movs	r1, #2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f001 fcf7 	bl	800d7bc <RCCEx_PLL3_Config>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdda:	4b70      	ldr	r3, [pc, #448]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdea:	4a6c      	ldr	r2, [pc, #432]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdec:	430b      	orrs	r3, r1
 800bdee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bdfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be00:	2300      	movs	r3, #0
 800be02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800be0a:	460b      	mov	r3, r1
 800be0c:	4313      	orrs	r3, r2
 800be0e:	d03e      	beq.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800be10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be1c:	d022      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800be1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be22:	d81b      	bhi.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800be28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be2c:	d00b      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800be2e:	e015      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be34:	3308      	adds	r3, #8
 800be36:	2100      	movs	r1, #0
 800be38:	4618      	mov	r0, r3
 800be3a:	f001 fc0d 	bl	800d658 <RCCEx_PLL2_Config>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be44:	e00f      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4a:	3328      	adds	r3, #40	; 0x28
 800be4c:	2102      	movs	r1, #2
 800be4e:	4618      	mov	r0, r3
 800be50:	f001 fcb4 	bl	800d7bc <RCCEx_PLL3_Config>
 800be54:	4603      	mov	r3, r0
 800be56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be5a:	e004      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be62:	e000      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800be64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10b      	bne.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be6e:	4b4b      	ldr	r3, [pc, #300]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be7e:	4a47      	ldr	r2, [pc, #284]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be80:	430b      	orrs	r3, r1
 800be82:	6593      	str	r3, [r2, #88]	; 0x58
 800be84:	e003      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800be9a:	67bb      	str	r3, [r7, #120]	; 0x78
 800be9c:	2300      	movs	r3, #0
 800be9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bea0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bea4:	460b      	mov	r3, r1
 800bea6:	4313      	orrs	r3, r2
 800bea8:	d03b      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800beb6:	d01f      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800beb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bebc:	d818      	bhi.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bec2:	d003      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bec8:	d007      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800beca:	e011      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800becc:	4b33      	ldr	r3, [pc, #204]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	4a32      	ldr	r2, [pc, #200]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bed8:	e00f      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bede:	3328      	adds	r3, #40	; 0x28
 800bee0:	2101      	movs	r1, #1
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 fc6a 	bl	800d7bc <RCCEx_PLL3_Config>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800beee:	e004      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bef6:	e000      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800befa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf02:	4b26      	ldr	r3, [pc, #152]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf12:	4a22      	ldr	r2, [pc, #136]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf14:	430b      	orrs	r3, r1
 800bf16:	6553      	str	r3, [r2, #84]	; 0x54
 800bf18:	e003      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf2e:	673b      	str	r3, [r7, #112]	; 0x70
 800bf30:	2300      	movs	r3, #0
 800bf32:	677b      	str	r3, [r7, #116]	; 0x74
 800bf34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	d034      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d003      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bf48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf4c:	d007      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bf4e:	e011      	b.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf50:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf54:	4a11      	ldr	r2, [pc, #68]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf5c:	e00e      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf62:	3308      	adds	r3, #8
 800bf64:	2102      	movs	r1, #2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f001 fb76 	bl	800d658 <RCCEx_PLL2_Config>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf72:	e003      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10d      	bne.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf92:	4a02      	ldr	r2, [pc, #8]	; (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf94:	430b      	orrs	r3, r1
 800bf96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf98:	e006      	b.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bf9a:	bf00      	nop
 800bf9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bfb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	d00c      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc8:	3328      	adds	r3, #40	; 0x28
 800bfca:	2102      	movs	r1, #2
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f001 fbf5 	bl	800d7bc <RCCEx_PLL3_Config>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bfea:	663b      	str	r3, [r7, #96]	; 0x60
 800bfec:	2300      	movs	r3, #0
 800bfee:	667b      	str	r3, [r7, #100]	; 0x64
 800bff0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bff4:	460b      	mov	r3, r1
 800bff6:	4313      	orrs	r3, r2
 800bff8:	d038      	beq.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c006:	d018      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c00c:	d811      	bhi.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c00e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c012:	d014      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c018:	d80b      	bhi.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d011      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c022:	d106      	bne.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c024:	4bc3      	ldr	r3, [pc, #780]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	4ac2      	ldr	r2, [pc, #776]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c02a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c02e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c030:	e008      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c038:	e004      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c03a:	bf00      	nop
 800c03c:	e002      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c03e:	bf00      	nop
 800c040:	e000      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c042:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10b      	bne.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c04c:	4bb9      	ldr	r3, [pc, #740]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c050:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c05c:	4ab5      	ldr	r2, [pc, #724]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c05e:	430b      	orrs	r3, r1
 800c060:	6553      	str	r3, [r2, #84]	; 0x54
 800c062:	e003      	b.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c078:	65bb      	str	r3, [r7, #88]	; 0x58
 800c07a:	2300      	movs	r3, #0
 800c07c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c07e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c082:	460b      	mov	r3, r1
 800c084:	4313      	orrs	r3, r2
 800c086:	d009      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c088:	4baa      	ldr	r3, [pc, #680]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c08a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c08c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c096:	4aa7      	ldr	r2, [pc, #668]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c098:	430b      	orrs	r3, r1
 800c09a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c0a8:	653b      	str	r3, [r7, #80]	; 0x50
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	d00a      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c0b8:	4b9e      	ldr	r3, [pc, #632]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c0c8:	4a9a      	ldr	r2, [pc, #616]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ca:	430b      	orrs	r3, r1
 800c0cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c0da:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0dc:	2300      	movs	r3, #0
 800c0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	d009      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c0ea:	4b92      	ldr	r3, [pc, #584]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f8:	4a8e      	ldr	r2, [pc, #568]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0fa:	430b      	orrs	r3, r1
 800c0fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c10a:	643b      	str	r3, [r7, #64]	; 0x40
 800c10c:	2300      	movs	r3, #0
 800c10e:	647b      	str	r3, [r7, #68]	; 0x44
 800c110:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c114:	460b      	mov	r3, r1
 800c116:	4313      	orrs	r3, r2
 800c118:	d00e      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c11a:	4b86      	ldr	r3, [pc, #536]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	4a85      	ldr	r2, [pc, #532]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c124:	6113      	str	r3, [r2, #16]
 800c126:	4b83      	ldr	r3, [pc, #524]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c128:	6919      	ldr	r1, [r3, #16]
 800c12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c132:	4a80      	ldr	r2, [pc, #512]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c134:	430b      	orrs	r3, r1
 800c136:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c144:	63bb      	str	r3, [r7, #56]	; 0x38
 800c146:	2300      	movs	r3, #0
 800c148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c14a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c14e:	460b      	mov	r3, r1
 800c150:	4313      	orrs	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c154:	4b77      	ldr	r3, [pc, #476]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c158:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c162:	4a74      	ldr	r2, [pc, #464]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c164:	430b      	orrs	r3, r1
 800c166:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c174:	633b      	str	r3, [r7, #48]	; 0x30
 800c176:	2300      	movs	r3, #0
 800c178:	637b      	str	r3, [r7, #52]	; 0x34
 800c17a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c17e:	460b      	mov	r3, r1
 800c180:	4313      	orrs	r3, r2
 800c182:	d00a      	beq.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c184:	4b6b      	ldr	r3, [pc, #428]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c188:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c194:	4a67      	ldr	r2, [pc, #412]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c196:	430b      	orrs	r3, r1
 800c198:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	62b9      	str	r1, [r7, #40]	; 0x28
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	d011      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ba:	3308      	adds	r3, #8
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f001 fa4a 	bl	800d658 <RCCEx_PLL2_Config>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c1ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	6239      	str	r1, [r7, #32]
 800c1e6:	f003 0302 	and.w	r3, r3, #2
 800c1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	d011      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	4618      	mov	r0, r3
 800c200:	f001 fa2a 	bl	800d658 <RCCEx_PLL2_Config>
 800c204:	4603      	mov	r3, r0
 800c206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c20a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	2100      	movs	r1, #0
 800c224:	61b9      	str	r1, [r7, #24]
 800c226:	f003 0304 	and.w	r3, r3, #4
 800c22a:	61fb      	str	r3, [r7, #28]
 800c22c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c230:	460b      	mov	r3, r1
 800c232:	4313      	orrs	r3, r2
 800c234:	d011      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23a:	3308      	adds	r3, #8
 800c23c:	2102      	movs	r1, #2
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fa0a 	bl	800d658 <RCCEx_PLL2_Config>
 800c244:	4603      	mov	r3, r0
 800c246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	2100      	movs	r1, #0
 800c264:	6139      	str	r1, [r7, #16]
 800c266:	f003 0308 	and.w	r3, r3, #8
 800c26a:	617b      	str	r3, [r7, #20]
 800c26c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c270:	460b      	mov	r3, r1
 800c272:	4313      	orrs	r3, r2
 800c274:	d011      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27a:	3328      	adds	r3, #40	; 0x28
 800c27c:	2100      	movs	r1, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f001 fa9c 	bl	800d7bc <RCCEx_PLL3_Config>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	f003 0310 	and.w	r3, r3, #16
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	d011      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ba:	3328      	adds	r3, #40	; 0x28
 800c2bc:	2101      	movs	r1, #1
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f001 fa7c 	bl	800d7bc <RCCEx_PLL3_Config>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	6039      	str	r1, [r7, #0]
 800c2e6:	f003 0320 	and.w	r3, r3, #32
 800c2ea:	607b      	str	r3, [r7, #4]
 800c2ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	d011      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fa:	3328      	adds	r3, #40	; 0x28
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f001 fa5c 	bl	800d7bc <RCCEx_PLL3_Config>
 800c304:	4603      	mov	r3, r0
 800c306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c31a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	e000      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
}
 800c328:	4618      	mov	r0, r3
 800c32a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c32e:	46bd      	mov	sp, r7
 800c330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c334:	58024400 	.word	0x58024400

0800c338 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b090      	sub	sp, #64	; 0x40
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c342:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c346:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c34a:	430b      	orrs	r3, r1
 800c34c:	f040 8094 	bne.w	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c350:	4b9e      	ldr	r3, [pc, #632]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c354:	f003 0307 	and.w	r3, r3, #7
 800c358:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	2b04      	cmp	r3, #4
 800c35e:	f200 8087 	bhi.w	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c362:	a201      	add	r2, pc, #4	; (adr r2, 800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c368:	0800c37d 	.word	0x0800c37d
 800c36c:	0800c3a5 	.word	0x0800c3a5
 800c370:	0800c3cd 	.word	0x0800c3cd
 800c374:	0800c469 	.word	0x0800c469
 800c378:	0800c3f5 	.word	0x0800c3f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c37c:	4b93      	ldr	r3, [pc, #588]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c388:	d108      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c38e:	4618      	mov	r0, r3
 800c390:	f001 f810 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c398:	f000 bd45 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a0:	f000 bd41 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3a4:	4b89      	ldr	r3, [pc, #548]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3b0:	d108      	bne.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b2:	f107 0318 	add.w	r3, r7, #24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 fd54 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c0:	f000 bd31 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c8:	f000 bd2d 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3cc:	4b7f      	ldr	r3, [pc, #508]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3d8:	d108      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3da:	f107 030c 	add.w	r3, r7, #12
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 fe94 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e8:	f000 bd1d 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f0:	f000 bd19 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3f4:	4b75      	ldr	r3, [pc, #468]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3fe:	4b73      	ldr	r3, [pc, #460]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f003 0304 	and.w	r3, r3, #4
 800c406:	2b04      	cmp	r3, #4
 800c408:	d10c      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d109      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c410:	4b6e      	ldr	r3, [pc, #440]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	08db      	lsrs	r3, r3, #3
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	4a6d      	ldr	r2, [pc, #436]	; (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c41c:	fa22 f303 	lsr.w	r3, r2, r3
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c422:	e01f      	b.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c424:	4b69      	ldr	r3, [pc, #420]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c430:	d106      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c438:	d102      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c43a:	4b66      	ldr	r3, [pc, #408]	; (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43e:	e011      	b.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c440:	4b62      	ldr	r3, [pc, #392]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c44c:	d106      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c454:	d102      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c456:	4b60      	ldr	r3, [pc, #384]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c45a:	e003      	b.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c460:	f000 bce1 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c464:	f000 bcdf 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c468:	4b5c      	ldr	r3, [pc, #368]	; (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	f000 bcdb 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c474:	f000 bcd7 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c47c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c480:	430b      	orrs	r3, r1
 800c482:	f040 80ad 	bne.w	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c486:	4b51      	ldr	r3, [pc, #324]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c48a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c48e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c496:	d056      	beq.n	800c546 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49e:	f200 8090 	bhi.w	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	2bc0      	cmp	r3, #192	; 0xc0
 800c4a6:	f000 8088 	beq.w	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	2bc0      	cmp	r3, #192	; 0xc0
 800c4ae:	f200 8088 	bhi.w	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	2b80      	cmp	r3, #128	; 0x80
 800c4b6:	d032      	beq.n	800c51e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ba:	2b80      	cmp	r3, #128	; 0x80
 800c4bc:	f200 8081 	bhi.w	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2b40      	cmp	r3, #64	; 0x40
 800c4ca:	d014      	beq.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c4cc:	e079      	b.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4ce:	4b3f      	ldr	r3, [pc, #252]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4da:	d108      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 ff67 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ea:	f000 bc9c 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f2:	f000 bc98 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4f6:	4b35      	ldr	r3, [pc, #212]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c502:	d108      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c504:	f107 0318 	add.w	r3, r7, #24
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 fcab 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c512:	f000 bc88 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c51a:	f000 bc84 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c51e:	4b2b      	ldr	r3, [pc, #172]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c52a:	d108      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c52c:	f107 030c 	add.w	r3, r7, #12
 800c530:	4618      	mov	r0, r3
 800c532:	f000 fdeb 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c53a:	f000 bc74 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c542:	f000 bc70 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c546:	4b21      	ldr	r3, [pc, #132]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c54a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c54e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c550:	4b1e      	ldr	r3, [pc, #120]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d10c      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d109      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c562:	4b1a      	ldr	r3, [pc, #104]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	08db      	lsrs	r3, r3, #3
 800c568:	f003 0303 	and.w	r3, r3, #3
 800c56c:	4a18      	ldr	r2, [pc, #96]	; (800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c56e:	fa22 f303 	lsr.w	r3, r2, r3
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c574:	e01f      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c576:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c582:	d106      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c58a:	d102      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c58c:	4b11      	ldr	r3, [pc, #68]	; (800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c590:	e011      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c592:	4b0e      	ldr	r3, [pc, #56]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c59a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c59e:	d106      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5a6:	d102      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5a8:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ac:	e003      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5b2:	f000 bc38 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5b6:	f000 bc36 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5ba:	4b08      	ldr	r3, [pc, #32]	; (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5be:	f000 bc32 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c6:	f000 bc2e 	b.w	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5ca:	bf00      	nop
 800c5cc:	58024400 	.word	0x58024400
 800c5d0:	03d09000 	.word	0x03d09000
 800c5d4:	003d0900 	.word	0x003d0900
 800c5d8:	017d7840 	.word	0x017d7840
 800c5dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5e4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c5e8:	430b      	orrs	r3, r1
 800c5ea:	f040 809c 	bne.w	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c5ee:	4b9e      	ldr	r3, [pc, #632]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c5f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5fe:	d054      	beq.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c606:	f200 808b 	bhi.w	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c610:	f000 8083 	beq.w	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c616:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c61a:	f200 8081 	bhi.w	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c624:	d02f      	beq.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c62c:	d878      	bhi.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c630:	2b00      	cmp	r3, #0
 800c632:	d004      	beq.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c63a:	d012      	beq.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c63c:	e070      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c63e:	4b8a      	ldr	r3, [pc, #552]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c64a:	d107      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c64c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c650:	4618      	mov	r0, r3
 800c652:	f000 feaf 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65a:	e3e4      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c660:	e3e1      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c662:	4b81      	ldr	r3, [pc, #516]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c66a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c66e:	d107      	bne.n	800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c670:	f107 0318 	add.w	r3, r7, #24
 800c674:	4618      	mov	r0, r3
 800c676:	f000 fbf5 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c67e:	e3d2      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c680:	2300      	movs	r3, #0
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c684:	e3cf      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c686:	4b78      	ldr	r3, [pc, #480]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c68e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c692:	d107      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c694:	f107 030c 	add.w	r3, r7, #12
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 fd37 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a2:	e3c0      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a8:	e3bd      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6aa:	4b6f      	ldr	r3, [pc, #444]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6b4:	4b6c      	ldr	r3, [pc, #432]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0304 	and.w	r3, r3, #4
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d10c      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6c6:	4b68      	ldr	r3, [pc, #416]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	08db      	lsrs	r3, r3, #3
 800c6cc:	f003 0303 	and.w	r3, r3, #3
 800c6d0:	4a66      	ldr	r2, [pc, #408]	; (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6d8:	e01e      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6da:	4b63      	ldr	r3, [pc, #396]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e6:	d106      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ee:	d102      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6f0:	4b5f      	ldr	r3, [pc, #380]	; (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e010      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6f6:	4b5c      	ldr	r3, [pc, #368]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c702:	d106      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c70a:	d102      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c70c:	4b59      	ldr	r3, [pc, #356]	; (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c710:	e002      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c716:	e386      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c718:	e385      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c71a:	4b57      	ldr	r3, [pc, #348]	; (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71e:	e382      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c724:	e37f      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c72a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c72e:	430b      	orrs	r3, r1
 800c730:	f040 80a7 	bne.w	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c734:	4b4c      	ldr	r3, [pc, #304]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c738:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c73c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c744:	d055      	beq.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c74c:	f200 8096 	bhi.w	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c756:	f000 8084 	beq.w	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c760:	f200 808c 	bhi.w	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c76a:	d030      	beq.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c772:	f200 8083 	bhi.w	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d004      	beq.n	800c786 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c782:	d012      	beq.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c784:	e07a      	b.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c786:	4b38      	ldr	r3, [pc, #224]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c78e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c792:	d107      	bne.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 fe0b 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a2:	e340      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a8:	e33d      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7aa:	4b2f      	ldr	r3, [pc, #188]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7b6:	d107      	bne.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7b8:	f107 0318 	add.w	r3, r7, #24
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 fb51 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c6:	e32e      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7cc:	e32b      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7ce:	4b26      	ldr	r3, [pc, #152]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7da:	d107      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7dc:	f107 030c 	add.w	r3, r7, #12
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 fc93 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ea:	e31c      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f0:	e319      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7fc:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 0304 	and.w	r3, r3, #4
 800c804:	2b04      	cmp	r3, #4
 800c806:	d10c      	bne.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d109      	bne.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c80e:	4b16      	ldr	r3, [pc, #88]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	08db      	lsrs	r3, r3, #3
 800c814:	f003 0303 	and.w	r3, r3, #3
 800c818:	4a14      	ldr	r2, [pc, #80]	; (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c81a:	fa22 f303 	lsr.w	r3, r2, r3
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c820:	e01e      	b.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c822:	4b11      	ldr	r3, [pc, #68]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c82a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c82e:	d106      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c836:	d102      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c838:	4b0d      	ldr	r3, [pc, #52]	; (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c83c:	e010      	b.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c83e:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c84a:	d106      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c852:	d102      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c854:	4b07      	ldr	r3, [pc, #28]	; (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c858:	e002      	b.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c85e:	e2e2      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c860:	e2e1      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c862:	4b05      	ldr	r3, [pc, #20]	; (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c866:	e2de      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c868:	58024400 	.word	0x58024400
 800c86c:	03d09000 	.word	0x03d09000
 800c870:	003d0900 	.word	0x003d0900
 800c874:	017d7840 	.word	0x017d7840
 800c878:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c880:	e2d1      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c886:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c88a:	430b      	orrs	r3, r1
 800c88c:	f040 809c 	bne.w	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c890:	4b93      	ldr	r3, [pc, #588]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c894:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c898:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8a0:	d054      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8a8:	f200 808b 	bhi.w	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8b2:	f000 8083 	beq.w	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8bc:	f200 8081 	bhi.w	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8c6:	d02f      	beq.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8ce:	d878      	bhi.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8dc:	d012      	beq.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c8de:	e070      	b.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8e0:	4b7f      	ldr	r3, [pc, #508]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ec:	d107      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fd5e 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8fc:	e293      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c902:	e290      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c904:	4b76      	ldr	r3, [pc, #472]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c90c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c910:	d107      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c912:	f107 0318 	add.w	r3, r7, #24
 800c916:	4618      	mov	r0, r3
 800c918:	f000 faa4 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c920:	e281      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c926:	e27e      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c928:	4b6d      	ldr	r3, [pc, #436]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c934:	d107      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c936:	f107 030c 	add.w	r3, r7, #12
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 fbe6 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c944:	e26f      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94a:	e26c      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c94c:	4b64      	ldr	r3, [pc, #400]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c954:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c956:	4b62      	ldr	r3, [pc, #392]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 0304 	and.w	r3, r3, #4
 800c95e:	2b04      	cmp	r3, #4
 800c960:	d10c      	bne.n	800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c964:	2b00      	cmp	r3, #0
 800c966:	d109      	bne.n	800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c968:	4b5d      	ldr	r3, [pc, #372]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	08db      	lsrs	r3, r3, #3
 800c96e:	f003 0303 	and.w	r3, r3, #3
 800c972:	4a5c      	ldr	r2, [pc, #368]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c974:	fa22 f303 	lsr.w	r3, r2, r3
 800c978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c97a:	e01e      	b.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c97c:	4b58      	ldr	r3, [pc, #352]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c988:	d106      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c98c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c990:	d102      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c992:	4b55      	ldr	r3, [pc, #340]	; (800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c996:	e010      	b.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c998:	4b51      	ldr	r3, [pc, #324]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9a4:	d106      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ac:	d102      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9ae:	4b4f      	ldr	r3, [pc, #316]	; (800caec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b2:	e002      	b.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9b8:	e235      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9ba:	e234      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9bc:	4b4c      	ldr	r3, [pc, #304]	; (800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c0:	e231      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c6:	e22e      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9cc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c9d0:	430b      	orrs	r3, r1
 800c9d2:	f040 808f 	bne.w	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c9d6:	4b42      	ldr	r3, [pc, #264]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9da:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c9de:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9e6:	d06b      	beq.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9ee:	d874      	bhi.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9f6:	d056      	beq.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c9fe:	d86c      	bhi.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca06:	d03b      	beq.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca0e:	d864      	bhi.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca16:	d021      	beq.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca1e:	d85c      	bhi.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d004      	beq.n	800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca2c:	d004      	beq.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ca2e:	e054      	b.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ca30:	f7fe fa0a 	bl	800ae48 <HAL_RCC_GetPCLK1Freq>
 800ca34:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca36:	e1f6      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca38:	4b29      	ldr	r3, [pc, #164]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca44:	d107      	bne.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca46:	f107 0318 	add.w	r3, r7, #24
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fa0a 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca54:	e1e7      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca5a:	e1e4      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca5c:	4b20      	ldr	r3, [pc, #128]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca68:	d107      	bne.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca6a:	f107 030c 	add.w	r3, r7, #12
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fb4c 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca78:	e1d5      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca7e:	e1d2      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca80:	4b17      	ldr	r3, [pc, #92]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	d109      	bne.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca8c:	4b14      	ldr	r3, [pc, #80]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	08db      	lsrs	r3, r3, #3
 800ca92:	f003 0303 	and.w	r3, r3, #3
 800ca96:	4a13      	ldr	r2, [pc, #76]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca98:	fa22 f303 	lsr.w	r3, r2, r3
 800ca9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca9e:	e1c2      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa4:	e1bf      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800caa6:	4b0e      	ldr	r3, [pc, #56]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab2:	d102      	bne.n	800caba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab8:	e1b5      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cabe:	e1b2      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cacc:	d102      	bne.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cace:	4b07      	ldr	r3, [pc, #28]	; (800caec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad2:	e1a8      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad8:	e1a5      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cade:	e1a2      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cae0:	58024400 	.word	0x58024400
 800cae4:	03d09000 	.word	0x03d09000
 800cae8:	003d0900 	.word	0x003d0900
 800caec:	017d7840 	.word	0x017d7840
 800caf0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800caf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caf8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cafc:	430b      	orrs	r3, r1
 800cafe:	d173      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb00:	4b9c      	ldr	r3, [pc, #624]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb10:	d02f      	beq.n	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb18:	d863      	bhi.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d004      	beq.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb26:	d012      	beq.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cb28:	e05b      	b.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb2a:	4b92      	ldr	r3, [pc, #584]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb36:	d107      	bne.n	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb38:	f107 0318 	add.w	r3, r7, #24
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f991 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb46:	e16e      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4c:	e16b      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb4e:	4b89      	ldr	r3, [pc, #548]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb5a:	d107      	bne.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb5c:	f107 030c 	add.w	r3, r7, #12
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 fad3 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb6a:	e15c      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb70:	e159      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb72:	4b80      	ldr	r3, [pc, #512]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb7c:	4b7d      	ldr	r3, [pc, #500]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d10c      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d109      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb8e:	4b79      	ldr	r3, [pc, #484]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	08db      	lsrs	r3, r3, #3
 800cb94:	f003 0303 	and.w	r3, r3, #3
 800cb98:	4a77      	ldr	r2, [pc, #476]	; (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cb9a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba0:	e01e      	b.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cba2:	4b74      	ldr	r3, [pc, #464]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbae:	d106      	bne.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbb6:	d102      	bne.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbb8:	4b70      	ldr	r3, [pc, #448]	; (800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbbc:	e010      	b.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbbe:	4b6d      	ldr	r3, [pc, #436]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbca:	d106      	bne.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbd2:	d102      	bne.n	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbd4:	4b6a      	ldr	r3, [pc, #424]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd8:	e002      	b.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbde:	e122      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbe0:	e121      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe6:	e11e      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cbe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cbf0:	430b      	orrs	r3, r1
 800cbf2:	d133      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cbf4:	4b5f      	ldr	r3, [pc, #380]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbfc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d004      	beq.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc0a:	d012      	beq.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cc0c:	e023      	b.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc0e:	4b59      	ldr	r3, [pc, #356]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc1a:	d107      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fbc7 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2a:	e0fc      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc30:	e0f9      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc32:	4b50      	ldr	r3, [pc, #320]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc3e:	d107      	bne.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc40:	f107 0318 	add.w	r3, r7, #24
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 f90d 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4e:	e0ea      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc54:	e0e7      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5a:	e0e4      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc60:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cc64:	430b      	orrs	r3, r1
 800cc66:	f040 808d 	bne.w	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cc6a:	4b42      	ldr	r3, [pc, #264]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc6e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cc72:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc7a:	d06b      	beq.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc82:	d874      	bhi.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc8a:	d056      	beq.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc92:	d86c      	bhi.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc9a:	d03b      	beq.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cca2:	d864      	bhi.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccaa:	d021      	beq.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb2:	d85c      	bhi.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d004      	beq.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccc0:	d004      	beq.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ccc2:	e054      	b.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ccc4:	f000 f8b8 	bl	800ce38 <HAL_RCCEx_GetD3PCLK1Freq>
 800ccc8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccca:	e0ac      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cccc:	4b29      	ldr	r3, [pc, #164]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccd8:	d107      	bne.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccda:	f107 0318 	add.w	r3, r7, #24
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 f8c0 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cce8:	e09d      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccee:	e09a      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccf0:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccfc:	d107      	bne.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccfe:	f107 030c 	add.w	r3, r7, #12
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fa02 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd0c:	e08b      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd12:	e088      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd14:	4b17      	ldr	r3, [pc, #92]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0304 	and.w	r3, r3, #4
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d109      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd20:	4b14      	ldr	r3, [pc, #80]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	08db      	lsrs	r3, r3, #3
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	4a13      	ldr	r2, [pc, #76]	; (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd32:	e078      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd38:	e075      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd3a:	4b0e      	ldr	r3, [pc, #56]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd46:	d102      	bne.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cd48:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd4c:	e06b      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd52:	e068      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd54:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd60:	d102      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cd62:	4b07      	ldr	r3, [pc, #28]	; (800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd66:	e05e      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd6c:	e05b      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd72:	e058      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd74:	58024400 	.word	0x58024400
 800cd78:	03d09000 	.word	0x03d09000
 800cd7c:	003d0900 	.word	0x003d0900
 800cd80:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cd84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd88:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cd8c:	430b      	orrs	r3, r1
 800cd8e:	d148      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cd90:	4b27      	ldr	r3, [pc, #156]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda0:	d02a      	beq.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cda8:	d838      	bhi.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d004      	beq.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdb6:	d00d      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cdb8:	e030      	b.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdba:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdc6:	d102      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cdc8:	4b1a      	ldr	r3, [pc, #104]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdcc:	e02b      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd2:	e028      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdd4:	4b16      	ldr	r3, [pc, #88]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cde0:	d107      	bne.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 fae4 	bl	800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf0:	e019      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf6:	e016      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdf8:	4b0d      	ldr	r3, [pc, #52]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce04:	d107      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce06:	f107 0318 	add.w	r3, r7, #24
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 f82a 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce14:	e007      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce1a:	e004      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce20:	e001      	b.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ce26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3740      	adds	r7, #64	; 0x40
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	58024400 	.word	0x58024400
 800ce34:	017d7840 	.word	0x017d7840

0800ce38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ce3c:	f7fd ffd4 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ce40:	4602      	mov	r2, r0
 800ce42:	4b06      	ldr	r3, [pc, #24]	; (800ce5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce44:	6a1b      	ldr	r3, [r3, #32]
 800ce46:	091b      	lsrs	r3, r3, #4
 800ce48:	f003 0307 	and.w	r3, r3, #7
 800ce4c:	4904      	ldr	r1, [pc, #16]	; (800ce60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ce4e:	5ccb      	ldrb	r3, [r1, r3]
 800ce50:	f003 031f 	and.w	r3, r3, #31
 800ce54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	58024400 	.word	0x58024400
 800ce60:	080176a4 	.word	0x080176a4

0800ce64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b089      	sub	sp, #36	; 0x24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce6c:	4ba1      	ldr	r3, [pc, #644]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce70:	f003 0303 	and.w	r3, r3, #3
 800ce74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ce76:	4b9f      	ldr	r3, [pc, #636]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7a:	0b1b      	lsrs	r3, r3, #12
 800ce7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce82:	4b9c      	ldr	r3, [pc, #624]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce86:	091b      	lsrs	r3, r3, #4
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ce8e:	4b99      	ldr	r3, [pc, #612]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce92:	08db      	lsrs	r3, r3, #3
 800ce94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	ee07 3a90 	vmov	s15, r3
 800cea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 8111 	beq.w	800d0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	f000 8083 	beq.w	800cfc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	f200 80a1 	bhi.w	800d004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d003      	beq.n	800ced0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d056      	beq.n	800cf7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cece:	e099      	b.n	800d004 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ced0:	4b88      	ldr	r3, [pc, #544]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0320 	and.w	r3, r3, #32
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d02d      	beq.n	800cf38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cedc:	4b85      	ldr	r3, [pc, #532]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	08db      	lsrs	r3, r3, #3
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	4a84      	ldr	r2, [pc, #528]	; (800d0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cee8:	fa22 f303 	lsr.w	r3, r2, r3
 800ceec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	ee07 3a90 	vmov	s15, r3
 800cef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	ee07 3a90 	vmov	s15, r3
 800cefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf06:	4b7b      	ldr	r3, [pc, #492]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0e:	ee07 3a90 	vmov	s15, r3
 800cf12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf16:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf36:	e087      	b.n	800d048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d100 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4a:	4b6a      	ldr	r3, [pc, #424]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf52:	ee07 3a90 	vmov	s15, r3
 800cf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf7a:	e065      	b.n	800d048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	ee07 3a90 	vmov	s15, r3
 800cf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf8e:	4b59      	ldr	r3, [pc, #356]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfbe:	e043      	b.n	800d048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	ee07 3a90 	vmov	s15, r3
 800cfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cfce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd2:	4b48      	ldr	r3, [pc, #288]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d002:	e021      	b.n	800d048 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	ee07 3a90 	vmov	s15, r3
 800d00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d016:	4b37      	ldr	r3, [pc, #220]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01e:	ee07 3a90 	vmov	s15, r3
 800d022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d026:	ed97 6a03 	vldr	s12, [r7, #12]
 800d02a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d046:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d048:	4b2a      	ldr	r3, [pc, #168]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04c:	0a5b      	lsrs	r3, r3, #9
 800d04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d052:	ee07 3a90 	vmov	s15, r3
 800d056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d062:	edd7 6a07 	vldr	s13, [r7, #28]
 800d066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d06e:	ee17 2a90 	vmov	r2, s15
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d076:	4b1f      	ldr	r3, [pc, #124]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07a:	0c1b      	lsrs	r3, r3, #16
 800d07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d080:	ee07 3a90 	vmov	s15, r3
 800d084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d08c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d090:	edd7 6a07 	vldr	s13, [r7, #28]
 800d094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d09c:	ee17 2a90 	vmov	r2, s15
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d0a4:	4b13      	ldr	r3, [pc, #76]	; (800d0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a8:	0e1b      	lsrs	r3, r3, #24
 800d0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ae:	ee07 3a90 	vmov	s15, r3
 800d0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ca:	ee17 2a90 	vmov	r2, s15
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d0d2:	e008      	b.n	800d0e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	609a      	str	r2, [r3, #8]
}
 800d0e6:	bf00      	nop
 800d0e8:	3724      	adds	r7, #36	; 0x24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	58024400 	.word	0x58024400
 800d0f8:	03d09000 	.word	0x03d09000
 800d0fc:	46000000 	.word	0x46000000
 800d100:	4c742400 	.word	0x4c742400
 800d104:	4a742400 	.word	0x4a742400
 800d108:	4bbebc20 	.word	0x4bbebc20

0800d10c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b089      	sub	sp, #36	; 0x24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d114:	4ba1      	ldr	r3, [pc, #644]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d118:	f003 0303 	and.w	r3, r3, #3
 800d11c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d11e:	4b9f      	ldr	r3, [pc, #636]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d122:	0d1b      	lsrs	r3, r3, #20
 800d124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d128:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d12a:	4b9c      	ldr	r3, [pc, #624]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12e:	0a1b      	lsrs	r3, r3, #8
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d136:	4b99      	ldr	r3, [pc, #612]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d13a:	08db      	lsrs	r3, r3, #3
 800d13c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	fb02 f303 	mul.w	r3, r2, r3
 800d146:	ee07 3a90 	vmov	s15, r3
 800d14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 8111 	beq.w	800d37c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	f000 8083 	beq.w	800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	2b02      	cmp	r3, #2
 800d166:	f200 80a1 	bhi.w	800d2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d003      	beq.n	800d178 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d056      	beq.n	800d224 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d176:	e099      	b.n	800d2ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d178:	4b88      	ldr	r3, [pc, #544]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f003 0320 	and.w	r3, r3, #32
 800d180:	2b00      	cmp	r3, #0
 800d182:	d02d      	beq.n	800d1e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d184:	4b85      	ldr	r3, [pc, #532]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	08db      	lsrs	r3, r3, #3
 800d18a:	f003 0303 	and.w	r3, r3, #3
 800d18e:	4a84      	ldr	r2, [pc, #528]	; (800d3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d190:	fa22 f303 	lsr.w	r3, r2, r3
 800d194:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	ee07 3a90 	vmov	s15, r3
 800d19c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ae:	4b7b      	ldr	r3, [pc, #492]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d1de:	e087      	b.n	800d2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	ee07 3a90 	vmov	s15, r3
 800d1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d1ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1f2:	4b6a      	ldr	r3, [pc, #424]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1fa:	ee07 3a90 	vmov	s15, r3
 800d1fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d202:	ed97 6a03 	vldr	s12, [r7, #12]
 800d206:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d20a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d20e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d21a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d21e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d222:	e065      	b.n	800d2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	ee07 3a90 	vmov	s15, r3
 800d22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d236:	4b59      	ldr	r3, [pc, #356]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d23e:	ee07 3a90 	vmov	s15, r3
 800d242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d246:	ed97 6a03 	vldr	s12, [r7, #12]
 800d24a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d24e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d25a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d25e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d266:	e043      	b.n	800d2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	ee07 3a90 	vmov	s15, r3
 800d26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d272:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d27a:	4b48      	ldr	r3, [pc, #288]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d282:	ee07 3a90 	vmov	s15, r3
 800d286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d28a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d28e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d29a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2aa:	e021      	b.n	800d2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	ee07 3a90 	vmov	s15, r3
 800d2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2be:	4b37      	ldr	r3, [pc, #220]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c6:	ee07 3a90 	vmov	s15, r3
 800d2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d2f0:	4b2a      	ldr	r3, [pc, #168]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f4:	0a5b      	lsrs	r3, r3, #9
 800d2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d30a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d30e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d316:	ee17 2a90 	vmov	r2, s15
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d31e:	4b1f      	ldr	r3, [pc, #124]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d322:	0c1b      	lsrs	r3, r3, #16
 800d324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d328:	ee07 3a90 	vmov	s15, r3
 800d32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d334:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d338:	edd7 6a07 	vldr	s13, [r7, #28]
 800d33c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d344:	ee17 2a90 	vmov	r2, s15
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d34c:	4b13      	ldr	r3, [pc, #76]	; (800d39c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d350:	0e1b      	lsrs	r3, r3, #24
 800d352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d362:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d366:	edd7 6a07 	vldr	s13, [r7, #28]
 800d36a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d36e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d372:	ee17 2a90 	vmov	r2, s15
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d37a:	e008      	b.n	800d38e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	609a      	str	r2, [r3, #8]
}
 800d38e:	bf00      	nop
 800d390:	3724      	adds	r7, #36	; 0x24
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	58024400 	.word	0x58024400
 800d3a0:	03d09000 	.word	0x03d09000
 800d3a4:	46000000 	.word	0x46000000
 800d3a8:	4c742400 	.word	0x4c742400
 800d3ac:	4a742400 	.word	0x4a742400
 800d3b0:	4bbebc20 	.word	0x4bbebc20

0800d3b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b089      	sub	sp, #36	; 0x24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3bc:	4ba0      	ldr	r3, [pc, #640]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c0:	f003 0303 	and.w	r3, r3, #3
 800d3c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d3c6:	4b9e      	ldr	r3, [pc, #632]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ca:	091b      	lsrs	r3, r3, #4
 800d3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d3d2:	4b9b      	ldr	r3, [pc, #620]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d3dc:	4b98      	ldr	r3, [pc, #608]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e0:	08db      	lsrs	r3, r3, #3
 800d3e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3e6:	693a      	ldr	r2, [r7, #16]
 800d3e8:	fb02 f303 	mul.w	r3, r2, r3
 800d3ec:	ee07 3a90 	vmov	s15, r3
 800d3f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 8111 	beq.w	800d622 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	2b02      	cmp	r3, #2
 800d404:	f000 8083 	beq.w	800d50e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	f200 80a1 	bhi.w	800d552 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d003      	beq.n	800d41e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d056      	beq.n	800d4ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d41c:	e099      	b.n	800d552 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d41e:	4b88      	ldr	r3, [pc, #544]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0320 	and.w	r3, r3, #32
 800d426:	2b00      	cmp	r3, #0
 800d428:	d02d      	beq.n	800d486 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d42a:	4b85      	ldr	r3, [pc, #532]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	08db      	lsrs	r3, r3, #3
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	4a83      	ldr	r2, [pc, #524]	; (800d644 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d436:	fa22 f303 	lsr.w	r3, r2, r3
 800d43a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	ee07 3a90 	vmov	s15, r3
 800d442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	ee07 3a90 	vmov	s15, r3
 800d44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d454:	4b7a      	ldr	r3, [pc, #488]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45c:	ee07 3a90 	vmov	s15, r3
 800d460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d464:	ed97 6a03 	vldr	s12, [r7, #12]
 800d468:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d648 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d46c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d480:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d484:	e087      	b.n	800d596 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	ee07 3a90 	vmov	s15, r3
 800d48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d490:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d64c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d498:	4b69      	ldr	r3, [pc, #420]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a0:	ee07 3a90 	vmov	s15, r3
 800d4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d648 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4c8:	e065      	b.n	800d596 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	ee07 3a90 	vmov	s15, r3
 800d4d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d650 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d4d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4dc:	4b58      	ldr	r3, [pc, #352]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e4:	ee07 3a90 	vmov	s15, r3
 800d4e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d648 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d508:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d50c:	e043      	b.n	800d596 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	ee07 3a90 	vmov	s15, r3
 800d514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d518:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d654 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d51c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d520:	4b47      	ldr	r3, [pc, #284]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d528:	ee07 3a90 	vmov	s15, r3
 800d52c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d530:	ed97 6a03 	vldr	s12, [r7, #12]
 800d534:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d648 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d53c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d54c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d550:	e021      	b.n	800d596 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	ee07 3a90 	vmov	s15, r3
 800d558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d64c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d564:	4b36      	ldr	r3, [pc, #216]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d56c:	ee07 3a90 	vmov	s15, r3
 800d570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d574:	ed97 6a03 	vldr	s12, [r7, #12]
 800d578:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d648 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d57c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d594:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d596:	4b2a      	ldr	r3, [pc, #168]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59a:	0a5b      	lsrs	r3, r3, #9
 800d59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5a0:	ee07 3a90 	vmov	s15, r3
 800d5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5bc:	ee17 2a90 	vmov	r2, s15
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d5c4:	4b1e      	ldr	r3, [pc, #120]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c8:	0c1b      	lsrs	r3, r3, #16
 800d5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ce:	ee07 3a90 	vmov	s15, r3
 800d5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5de:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ea:	ee17 2a90 	vmov	r2, s15
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d5f2:	4b13      	ldr	r3, [pc, #76]	; (800d640 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f6:	0e1b      	lsrs	r3, r3, #24
 800d5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5fc:	ee07 3a90 	vmov	s15, r3
 800d600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d608:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d60c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d618:	ee17 2a90 	vmov	r2, s15
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d620:	e008      	b.n	800d634 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2200      	movs	r2, #0
 800d626:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	609a      	str	r2, [r3, #8]
}
 800d634:	bf00      	nop
 800d636:	3724      	adds	r7, #36	; 0x24
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	58024400 	.word	0x58024400
 800d644:	03d09000 	.word	0x03d09000
 800d648:	46000000 	.word	0x46000000
 800d64c:	4c742400 	.word	0x4c742400
 800d650:	4a742400 	.word	0x4a742400
 800d654:	4bbebc20 	.word	0x4bbebc20

0800d658 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d666:	4b53      	ldr	r3, [pc, #332]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66a:	f003 0303 	and.w	r3, r3, #3
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d101      	bne.n	800d676 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	e099      	b.n	800d7aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d676:	4b4f      	ldr	r3, [pc, #316]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a4e      	ldr	r2, [pc, #312]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d67c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d682:	f7f6 fc53 	bl	8003f2c <HAL_GetTick>
 800d686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d688:	e008      	b.n	800d69c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d68a:	f7f6 fc4f 	bl	8003f2c <HAL_GetTick>
 800d68e:	4602      	mov	r2, r0
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	2b02      	cmp	r3, #2
 800d696:	d901      	bls.n	800d69c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e086      	b.n	800d7aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d69c:	4b45      	ldr	r3, [pc, #276]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1f0      	bne.n	800d68a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d6a8:	4b42      	ldr	r3, [pc, #264]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	031b      	lsls	r3, r3, #12
 800d6b6:	493f      	ldr	r1, [pc, #252]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	628b      	str	r3, [r1, #40]	; 0x28
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	025b      	lsls	r3, r3, #9
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	431a      	orrs	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	041b      	lsls	r3, r3, #16
 800d6da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d6de:	431a      	orrs	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	061b      	lsls	r3, r3, #24
 800d6e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d6ec:	4931      	ldr	r1, [pc, #196]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d6f2:	4b30      	ldr	r3, [pc, #192]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	695b      	ldr	r3, [r3, #20]
 800d6fe:	492d      	ldr	r1, [pc, #180]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d700:	4313      	orrs	r3, r2
 800d702:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d704:	4b2b      	ldr	r3, [pc, #172]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d708:	f023 0220 	bic.w	r2, r3, #32
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	4928      	ldr	r1, [pc, #160]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d712:	4313      	orrs	r3, r2
 800d714:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d716:	4b27      	ldr	r3, [pc, #156]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71a:	4a26      	ldr	r2, [pc, #152]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d71c:	f023 0310 	bic.w	r3, r3, #16
 800d720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d722:	4b24      	ldr	r3, [pc, #144]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d726:	4b24      	ldr	r3, [pc, #144]	; (800d7b8 <RCCEx_PLL2_Config+0x160>)
 800d728:	4013      	ands	r3, r2
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	69d2      	ldr	r2, [r2, #28]
 800d72e:	00d2      	lsls	r2, r2, #3
 800d730:	4920      	ldr	r1, [pc, #128]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d732:	4313      	orrs	r3, r2
 800d734:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d736:	4b1f      	ldr	r3, [pc, #124]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73a:	4a1e      	ldr	r2, [pc, #120]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d73c:	f043 0310 	orr.w	r3, r3, #16
 800d740:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d106      	bne.n	800d756 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d748:	4b1a      	ldr	r3, [pc, #104]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	4a19      	ldr	r2, [pc, #100]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d74e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d752:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d754:	e00f      	b.n	800d776 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d106      	bne.n	800d76a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d75c:	4b15      	ldr	r3, [pc, #84]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d760:	4a14      	ldr	r2, [pc, #80]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d766:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d768:	e005      	b.n	800d776 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d76a:	4b12      	ldr	r3, [pc, #72]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76e:	4a11      	ldr	r2, [pc, #68]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d774:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d776:	4b0f      	ldr	r3, [pc, #60]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a0e      	ldr	r2, [pc, #56]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d77c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d782:	f7f6 fbd3 	bl	8003f2c <HAL_GetTick>
 800d786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d788:	e008      	b.n	800d79c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d78a:	f7f6 fbcf 	bl	8003f2c <HAL_GetTick>
 800d78e:	4602      	mov	r2, r0
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	2b02      	cmp	r3, #2
 800d796:	d901      	bls.n	800d79c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d798:	2303      	movs	r3, #3
 800d79a:	e006      	b.n	800d7aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d79c:	4b05      	ldr	r3, [pc, #20]	; (800d7b4 <RCCEx_PLL2_Config+0x15c>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d0f0      	beq.n	800d78a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	58024400 	.word	0x58024400
 800d7b8:	ffff0007 	.word	0xffff0007

0800d7bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7ca:	4b53      	ldr	r3, [pc, #332]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ce:	f003 0303 	and.w	r3, r3, #3
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d101      	bne.n	800d7da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e099      	b.n	800d90e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d7da:	4b4f      	ldr	r3, [pc, #316]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a4e      	ldr	r2, [pc, #312]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d7e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7e6:	f7f6 fba1 	bl	8003f2c <HAL_GetTick>
 800d7ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7ec:	e008      	b.n	800d800 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d7ee:	f7f6 fb9d 	bl	8003f2c <HAL_GetTick>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d901      	bls.n	800d800 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	e086      	b.n	800d90e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d800:	4b45      	ldr	r3, [pc, #276]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1f0      	bne.n	800d7ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d80c:	4b42      	ldr	r3, [pc, #264]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d810:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	051b      	lsls	r3, r3, #20
 800d81a:	493f      	ldr	r1, [pc, #252]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	628b      	str	r3, [r1, #40]	; 0x28
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	3b01      	subs	r3, #1
 800d826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	3b01      	subs	r3, #1
 800d830:	025b      	lsls	r3, r3, #9
 800d832:	b29b      	uxth	r3, r3
 800d834:	431a      	orrs	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	041b      	lsls	r3, r3, #16
 800d83e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d842:	431a      	orrs	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	3b01      	subs	r3, #1
 800d84a:	061b      	lsls	r3, r3, #24
 800d84c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d850:	4931      	ldr	r1, [pc, #196]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d852:	4313      	orrs	r3, r2
 800d854:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d856:	4b30      	ldr	r3, [pc, #192]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	492d      	ldr	r1, [pc, #180]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d864:	4313      	orrs	r3, r2
 800d866:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d868:	4b2b      	ldr	r3, [pc, #172]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	4928      	ldr	r1, [pc, #160]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d876:	4313      	orrs	r3, r2
 800d878:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d87a:	4b27      	ldr	r3, [pc, #156]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	4a26      	ldr	r2, [pc, #152]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d886:	4b24      	ldr	r3, [pc, #144]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d88a:	4b24      	ldr	r3, [pc, #144]	; (800d91c <RCCEx_PLL3_Config+0x160>)
 800d88c:	4013      	ands	r3, r2
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	69d2      	ldr	r2, [r2, #28]
 800d892:	00d2      	lsls	r2, r2, #3
 800d894:	4920      	ldr	r1, [pc, #128]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d896:	4313      	orrs	r3, r2
 800d898:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d89a:	4b1f      	ldr	r3, [pc, #124]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89e:	4a1e      	ldr	r2, [pc, #120]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d8ac:	4b1a      	ldr	r3, [pc, #104]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b0:	4a19      	ldr	r2, [pc, #100]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d8b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8b8:	e00f      	b.n	800d8da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d106      	bne.n	800d8ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d8c0:	4b15      	ldr	r3, [pc, #84]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	4a14      	ldr	r2, [pc, #80]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8cc:	e005      	b.n	800d8da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d8ce:	4b12      	ldr	r3, [pc, #72]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d2:	4a11      	ldr	r2, [pc, #68]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d8da:	4b0f      	ldr	r3, [pc, #60]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a0e      	ldr	r2, [pc, #56]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d8e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8e6:	f7f6 fb21 	bl	8003f2c <HAL_GetTick>
 800d8ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8ec:	e008      	b.n	800d900 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8ee:	f7f6 fb1d 	bl	8003f2c <HAL_GetTick>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d901      	bls.n	800d900 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	e006      	b.n	800d90e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d900:	4b05      	ldr	r3, [pc, #20]	; (800d918 <RCCEx_PLL3_Config+0x15c>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0f0      	beq.n	800d8ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	58024400 	.word	0x58024400
 800d91c:	ffff0007 	.word	0xffff0007

0800d920 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d071      	beq.n	800da16 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7f4 fea2 	bl	8002690 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2202      	movs	r2, #2
 800d950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	f003 0310 	and.w	r3, r3, #16
 800d95e:	2b10      	cmp	r3, #16
 800d960:	d050      	beq.n	800da04 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	22ca      	movs	r2, #202	; 0xca
 800d968:	625a      	str	r2, [r3, #36]	; 0x24
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2253      	movs	r2, #83	; 0x53
 800d970:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 fa4a 	bl	800de0c <RTC_EnterInitMode>
 800d978:	4603      	mov	r3, r0
 800d97a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d124      	bne.n	800d9cc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6899      	ldr	r1, [r3, #8]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	4b24      	ldr	r3, [pc, #144]	; (800da20 <HAL_RTC_Init+0x100>)
 800d98e:	400b      	ands	r3, r1
 800d990:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6899      	ldr	r1, [r3, #8]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	699b      	ldr	r3, [r3, #24]
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	430a      	orrs	r2, r1
 800d9ae:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	0419      	lsls	r1, r3, #16
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 fa56 	bl	800de74 <RTC_ExitInitMode>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d113      	bne.n	800d9fa <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f022 0203 	bic.w	r2, r2, #3
 800d9e0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	69da      	ldr	r2, [r3, #28]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	22ff      	movs	r2, #255	; 0xff
 800da00:	625a      	str	r2, [r3, #36]	; 0x24
 800da02:	e001      	b.n	800da08 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800da08:	7bfb      	ldrb	r3, [r7, #15]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d103      	bne.n	800da16 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800da16:	7bfb      	ldrb	r3, [r7, #15]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	ff8fffbf 	.word	0xff8fffbf

0800da24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da24:	b590      	push	{r4, r7, lr}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d101      	bne.n	800da3e <HAL_RTC_SetTime+0x1a>
 800da3a:	2302      	movs	r3, #2
 800da3c:	e089      	b.n	800db52 <HAL_RTC_SetTime+0x12e>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2202      	movs	r2, #2
 800da4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	22ca      	movs	r2, #202	; 0xca
 800da54:	625a      	str	r2, [r3, #36]	; 0x24
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2253      	movs	r2, #83	; 0x53
 800da5c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 f9d4 	bl	800de0c <RTC_EnterInitMode>
 800da64:	4603      	mov	r3, r0
 800da66:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da68:	7cfb      	ldrb	r3, [r7, #19]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d161      	bne.n	800db32 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d126      	bne.n	800dac2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2200      	movs	r2, #0
 800da86:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 fa2f 	bl	800def0 <RTC_ByteToBcd2>
 800da92:	4603      	mov	r3, r0
 800da94:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	785b      	ldrb	r3, [r3, #1]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 fa28 	bl	800def0 <RTC_ByteToBcd2>
 800daa0:	4603      	mov	r3, r0
 800daa2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800daa4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	789b      	ldrb	r3, [r3, #2]
 800daaa:	4618      	mov	r0, r3
 800daac:	f000 fa20 	bl	800def0 <RTC_ByteToBcd2>
 800dab0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dab2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	78db      	ldrb	r3, [r3, #3]
 800daba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dabc:	4313      	orrs	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	e018      	b.n	800daf4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d102      	bne.n	800dad6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	2200      	movs	r2, #0
 800dad4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	785b      	ldrb	r3, [r3, #1]
 800dae0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dae2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dae8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	78db      	ldrb	r3, [r3, #3]
 800daee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800daf0:	4313      	orrs	r3, r2
 800daf2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	6979      	ldr	r1, [r7, #20]
 800dafa:	4b18      	ldr	r3, [pc, #96]	; (800db5c <HAL_RTC_SetTime+0x138>)
 800dafc:	400b      	ands	r3, r1
 800dafe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	689a      	ldr	r2, [r3, #8]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800db0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6899      	ldr	r1, [r3, #8]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	431a      	orrs	r2, r3
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	430a      	orrs	r2, r1
 800db26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f000 f9a3 	bl	800de74 <RTC_ExitInitMode>
 800db2e:	4603      	mov	r3, r0
 800db30:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	22ff      	movs	r2, #255	; 0xff
 800db38:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800db3a:	7cfb      	ldrb	r3, [r7, #19]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d103      	bne.n	800db48 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800db50:	7cfb      	ldrb	r3, [r7, #19]
}
 800db52:	4618      	mov	r0, r3
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	bd90      	pop	{r4, r7, pc}
 800db5a:	bf00      	nop
 800db5c:	007f7f7f 	.word	0x007f7f7f

0800db60 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	4b22      	ldr	r3, [pc, #136]	; (800dc14 <HAL_RTC_GetTime+0xb4>)
 800db8c:	4013      	ands	r3, r2
 800db8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	0c1b      	lsrs	r3, r3, #16
 800db94:	b2db      	uxtb	r3, r3
 800db96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	0a1b      	lsrs	r3, r3, #8
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	0d9b      	lsrs	r3, r3, #22
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d11a      	bne.n	800dc0a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f000 f9a9 	bl	800df30 <RTC_Bcd2ToByte>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 f9a0 	bl	800df30 <RTC_Bcd2ToByte>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	789b      	ldrb	r3, [r3, #2]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f000 f997 	bl	800df30 <RTC_Bcd2ToByte>
 800dc02:	4603      	mov	r3, r0
 800dc04:	461a      	mov	r2, r3
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dc0a:	2300      	movs	r3, #0
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	007f7f7f 	.word	0x007f7f7f

0800dc18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc18:	b590      	push	{r4, r7, lr}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <HAL_RTC_SetDate+0x1a>
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e073      	b.n	800dd1a <HAL_RTC_SetDate+0x102>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10e      	bne.n	800dc66 <HAL_RTC_SetDate+0x4e>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	785b      	ldrb	r3, [r3, #1]
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d008      	beq.n	800dc66 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	785b      	ldrb	r3, [r3, #1]
 800dc58:	f023 0310 	bic.w	r3, r3, #16
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	330a      	adds	r3, #10
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d11c      	bne.n	800dca6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	78db      	ldrb	r3, [r3, #3]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 f93d 	bl	800def0 <RTC_ByteToBcd2>
 800dc76:	4603      	mov	r3, r0
 800dc78:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	785b      	ldrb	r3, [r3, #1]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 f936 	bl	800def0 <RTC_ByteToBcd2>
 800dc84:	4603      	mov	r3, r0
 800dc86:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dc88:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	789b      	ldrb	r3, [r3, #2]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 f92e 	bl	800def0 <RTC_ByteToBcd2>
 800dc94:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dc96:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dca0:	4313      	orrs	r3, r2
 800dca2:	617b      	str	r3, [r7, #20]
 800dca4:	e00e      	b.n	800dcc4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	78db      	ldrb	r3, [r3, #3]
 800dcaa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	785b      	ldrb	r3, [r3, #1]
 800dcb0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dcb2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dcb8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	22ca      	movs	r2, #202	; 0xca
 800dcca:	625a      	str	r2, [r3, #36]	; 0x24
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2253      	movs	r2, #83	; 0x53
 800dcd2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 f899 	bl	800de0c <RTC_EnterInitMode>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dcde:	7cfb      	ldrb	r3, [r7, #19]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	6979      	ldr	r1, [r7, #20]
 800dcea:	4b0e      	ldr	r3, [pc, #56]	; (800dd24 <HAL_RTC_SetDate+0x10c>)
 800dcec:	400b      	ands	r3, r1
 800dcee:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 f8bf 	bl	800de74 <RTC_ExitInitMode>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	22ff      	movs	r2, #255	; 0xff
 800dd00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dd02:	7cfb      	ldrb	r3, [r7, #19]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dd18:	7cfb      	ldrb	r3, [r7, #19]


}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	371c      	adds	r7, #28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd90      	pop	{r4, r7, pc}
 800dd22:	bf00      	nop
 800dd24:	00ffff3f 	.word	0x00ffff3f

0800dd28 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	4b21      	ldr	r3, [pc, #132]	; (800ddc0 <HAL_RTC_GetDate+0x98>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	0c1b      	lsrs	r3, r3, #16
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	0a1b      	lsrs	r3, r3, #8
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 031f 	and.w	r3, r3, #31
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	0b5b      	lsrs	r3, r3, #13
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f003 0307 	and.w	r3, r3, #7
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d11a      	bne.n	800ddb4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	78db      	ldrb	r3, [r3, #3]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 f8d4 	bl	800df30 <RTC_Bcd2ToByte>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	785b      	ldrb	r3, [r3, #1]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 f8cb 	bl	800df30 <RTC_Bcd2ToByte>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	789b      	ldrb	r3, [r3, #2]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 f8c2 	bl	800df30 <RTC_Bcd2ToByte>
 800ddac:	4603      	mov	r3, r0
 800ddae:	461a      	mov	r2, r3
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	00ffff3f 	.word	0x00ffff3f

0800ddc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a0d      	ldr	r2, [pc, #52]	; (800de08 <HAL_RTC_WaitForSynchro+0x44>)
 800ddd2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ddd4:	f7f6 f8aa 	bl	8003f2c <HAL_GetTick>
 800ddd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ddda:	e009      	b.n	800ddf0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dddc:	f7f6 f8a6 	bl	8003f2c <HAL_GetTick>
 800dde0:	4602      	mov	r2, r0
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	1ad3      	subs	r3, r2, r3
 800dde6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddea:	d901      	bls.n	800ddf0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e007      	b.n	800de00 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	f003 0320 	and.w	r3, r3, #32
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d0ee      	beq.n	800dddc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	0003ff5f 	.word	0x0003ff5f

0800de0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de14:	2300      	movs	r3, #0
 800de16:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de22:	2b00      	cmp	r3, #0
 800de24:	d120      	bne.n	800de68 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800de30:	f7f6 f87c 	bl	8003f2c <HAL_GetTick>
 800de34:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de36:	e00d      	b.n	800de54 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800de38:	f7f6 f878 	bl	8003f2c <HAL_GetTick>
 800de3c:	4602      	mov	r2, r0
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	1ad3      	subs	r3, r2, r3
 800de42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de46:	d905      	bls.n	800de54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800de48:	2303      	movs	r3, #3
 800de4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2203      	movs	r2, #3
 800de50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d102      	bne.n	800de68 <RTC_EnterInitMode+0x5c>
 800de62:	7bfb      	ldrb	r3, [r7, #15]
 800de64:	2b03      	cmp	r3, #3
 800de66:	d1e7      	bne.n	800de38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800de68:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
	...

0800de74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800de80:	4b1a      	ldr	r3, [pc, #104]	; (800deec <RTC_ExitInitMode+0x78>)
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a19      	ldr	r2, [pc, #100]	; (800deec <RTC_ExitInitMode+0x78>)
 800de86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de8a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800de8c:	4b17      	ldr	r3, [pc, #92]	; (800deec <RTC_ExitInitMode+0x78>)
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f003 0320 	and.w	r3, r3, #32
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10c      	bne.n	800deb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff ff93 	bl	800ddc4 <HAL_RTC_WaitForSynchro>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d01e      	beq.n	800dee2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2203      	movs	r2, #3
 800dea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800deac:	2303      	movs	r3, #3
 800deae:	73fb      	strb	r3, [r7, #15]
 800deb0:	e017      	b.n	800dee2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800deb2:	4b0e      	ldr	r3, [pc, #56]	; (800deec <RTC_ExitInitMode+0x78>)
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	4a0d      	ldr	r2, [pc, #52]	; (800deec <RTC_ExitInitMode+0x78>)
 800deb8:	f023 0320 	bic.w	r3, r3, #32
 800debc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff ff80 	bl	800ddc4 <HAL_RTC_WaitForSynchro>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d005      	beq.n	800ded6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2203      	movs	r2, #3
 800dece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ded6:	4b05      	ldr	r3, [pc, #20]	; (800deec <RTC_ExitInitMode+0x78>)
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	4a04      	ldr	r2, [pc, #16]	; (800deec <RTC_ExitInitMode+0x78>)
 800dedc:	f043 0320 	orr.w	r3, r3, #32
 800dee0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	58004000 	.word	0x58004000

0800def0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800defe:	79fb      	ldrb	r3, [r7, #7]
 800df00:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800df02:	e005      	b.n	800df10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3301      	adds	r3, #1
 800df08:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800df0a:	7afb      	ldrb	r3, [r7, #11]
 800df0c:	3b0a      	subs	r3, #10
 800df0e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800df10:	7afb      	ldrb	r3, [r7, #11]
 800df12:	2b09      	cmp	r3, #9
 800df14:	d8f6      	bhi.n	800df04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	011b      	lsls	r3, r3, #4
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	7afb      	ldrb	r3, [r7, #11]
 800df20:	4313      	orrs	r3, r2
 800df22:	b2db      	uxtb	r3, r3
}
 800df24:	4618      	mov	r0, r3
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	4603      	mov	r3, r0
 800df38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	091b      	lsrs	r3, r3, #4
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	461a      	mov	r2, r3
 800df42:	0092      	lsls	r2, r2, #2
 800df44:	4413      	add	r3, r2
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	b2da      	uxtb	r2, r3
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	4413      	add	r3, r2
 800df56:	b2db      	uxtb	r3, r3
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d101      	bne.n	800df76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	e10f      	b.n	800e196 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a87      	ldr	r2, [pc, #540]	; (800e1a0 <HAL_SPI_Init+0x23c>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d00f      	beq.n	800dfa6 <HAL_SPI_Init+0x42>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a86      	ldr	r2, [pc, #536]	; (800e1a4 <HAL_SPI_Init+0x240>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d00a      	beq.n	800dfa6 <HAL_SPI_Init+0x42>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a84      	ldr	r2, [pc, #528]	; (800e1a8 <HAL_SPI_Init+0x244>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d005      	beq.n	800dfa6 <HAL_SPI_Init+0x42>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	2b0f      	cmp	r3, #15
 800dfa0:	d901      	bls.n	800dfa6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e0f7      	b.n	800e196 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 ffd2 	bl	800ef50 <SPI_GetPacketSize>
 800dfac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4a7b      	ldr	r2, [pc, #492]	; (800e1a0 <HAL_SPI_Init+0x23c>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d00c      	beq.n	800dfd2 <HAL_SPI_Init+0x6e>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a79      	ldr	r2, [pc, #484]	; (800e1a4 <HAL_SPI_Init+0x240>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d007      	beq.n	800dfd2 <HAL_SPI_Init+0x6e>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a78      	ldr	r2, [pc, #480]	; (800e1a8 <HAL_SPI_Init+0x244>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d002      	beq.n	800dfd2 <HAL_SPI_Init+0x6e>
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2b08      	cmp	r3, #8
 800dfd0:	d811      	bhi.n	800dff6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfd6:	4a72      	ldr	r2, [pc, #456]	; (800e1a0 <HAL_SPI_Init+0x23c>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d009      	beq.n	800dff0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a70      	ldr	r2, [pc, #448]	; (800e1a4 <HAL_SPI_Init+0x240>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d004      	beq.n	800dff0 <HAL_SPI_Init+0x8c>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a6f      	ldr	r2, [pc, #444]	; (800e1a8 <HAL_SPI_Init+0x244>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d104      	bne.n	800dffa <HAL_SPI_Init+0x96>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b10      	cmp	r3, #16
 800dff4:	d901      	bls.n	800dffa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e0cd      	b.n	800e196 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e000:	b2db      	uxtb	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	d106      	bne.n	800e014 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7f4 fdb0 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2202      	movs	r2, #2
 800e018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 0201 	bic.w	r2, r2, #1
 800e02a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e036:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e040:	d119      	bne.n	800e076 <HAL_SPI_Init+0x112>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e04a:	d103      	bne.n	800e054 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e050:	2b00      	cmp	r3, #0
 800e052:	d008      	beq.n	800e066 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10c      	bne.n	800e076 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e064:	d107      	bne.n	800e076 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e074:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00f      	beq.n	800e0a2 <HAL_SPI_Init+0x13e>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	2b06      	cmp	r3, #6
 800e088:	d90b      	bls.n	800e0a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	e007      	b.n	800e0b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	69da      	ldr	r2, [r3, #28]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	431a      	orrs	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c4:	ea42 0103 	orr.w	r1, r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	68da      	ldr	r2, [r3, #12]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	430a      	orrs	r2, r1
 800e0d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	431a      	orrs	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	431a      	orrs	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	691b      	ldr	r3, [r3, #16]
 800e0ee:	431a      	orrs	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	431a      	orrs	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	431a      	orrs	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e106:	431a      	orrs	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	431a      	orrs	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e112:	ea42 0103 	orr.w	r1, r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d113      	bne.n	800e152 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e13c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e150:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f022 0201 	bic.w	r2, r2, #1
 800e160:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	430a      	orrs	r2, r1
 800e182:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	40013000 	.word	0x40013000
 800e1a4:	40003800 	.word	0x40003800
 800e1a8:	40003c00 	.word	0x40003c00

0800e1ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b088      	sub	sp, #32
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1c0:	095b      	lsrs	r3, r3, #5
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3330      	adds	r3, #48	; 0x30
 800e1ce:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1d0:	f7f5 feac 	bl	8003f2c <HAL_GetTick>
 800e1d4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d001      	beq.n	800e1e6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	e250      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <HAL_SPI_Receive+0x46>
 800e1ec:	88fb      	ldrh	r3, [r7, #6]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d101      	bne.n	800e1f6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e248      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d101      	bne.n	800e204 <HAL_SPI_Receive+0x58>
 800e200:	2302      	movs	r3, #2
 800e202:	e241      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2204      	movs	r2, #4
 800e210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	88fa      	ldrh	r2, [r7, #6]
 800e226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	88fa      	ldrh	r2, [r7, #6]
 800e22e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2200      	movs	r2, #0
 800e252:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e25c:	d108      	bne.n	800e270 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e009      	b.n	800e284 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e282:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	4b95      	ldr	r3, [pc, #596]	; (800e4e0 <HAL_SPI_Receive+0x334>)
 800e28c:	4013      	ands	r3, r2
 800e28e:	88f9      	ldrh	r1, [r7, #6]
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	6812      	ldr	r2, [r2, #0]
 800e294:	430b      	orrs	r3, r1
 800e296:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f042 0201 	orr.w	r2, r2, #1
 800e2a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2b0:	d107      	bne.n	800e2c2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	2b0f      	cmp	r3, #15
 800e2c8:	d96c      	bls.n	800e3a4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e2ca:	e064      	b.n	800e396 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	695b      	ldr	r3, [r3, #20]
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d114      	bne.n	800e30c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2ec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f2:	1d1a      	adds	r2, r3, #4
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	3b01      	subs	r3, #1
 800e302:	b29a      	uxth	r2, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e30a:	e044      	b.n	800e396 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e312:	b29b      	uxth	r3, r3
 800e314:	8bfa      	ldrh	r2, [r7, #30]
 800e316:	429a      	cmp	r2, r3
 800e318:	d919      	bls.n	800e34e <HAL_SPI_Receive+0x1a2>
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d014      	beq.n	800e34e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e32c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e32e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e334:	1d1a      	adds	r2, r3, #4
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e340:	b29b      	uxth	r3, r3
 800e342:	3b01      	subs	r3, #1
 800e344:	b29a      	uxth	r2, r3
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e34c:	e023      	b.n	800e396 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e34e:	f7f5 fded 	bl	8003f2c <HAL_GetTick>
 800e352:	4602      	mov	r2, r0
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	683a      	ldr	r2, [r7, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d803      	bhi.n	800e366 <HAL_SPI_Receive+0x1ba>
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e364:	d102      	bne.n	800e36c <HAL_SPI_Receive+0x1c0>
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d114      	bne.n	800e396 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f000 fd4f 	bl	800ee10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e378:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e392:	2303      	movs	r3, #3
 800e394:	e178      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d194      	bne.n	800e2cc <HAL_SPI_Receive+0x120>
 800e3a2:	e15e      	b.n	800e662 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	2b07      	cmp	r3, #7
 800e3aa:	f240 8153 	bls.w	800e654 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e3ae:	e08f      	b.n	800e4d0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	695b      	ldr	r3, [r3, #20]
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d114      	bne.n	800e3f0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ca:	69ba      	ldr	r2, [r7, #24]
 800e3cc:	8812      	ldrh	r2, [r2, #0]
 800e3ce:	b292      	uxth	r2, r2
 800e3d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3d6:	1c9a      	adds	r2, r3, #2
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3ee:	e06f      	b.n	800e4d0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	8bfa      	ldrh	r2, [r7, #30]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d924      	bls.n	800e448 <HAL_SPI_Receive+0x29c>
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01f      	beq.n	800e448 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e40c:	69ba      	ldr	r2, [r7, #24]
 800e40e:	8812      	ldrh	r2, [r2, #0]
 800e410:	b292      	uxth	r2, r2
 800e412:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e418:	1c9a      	adds	r2, r3, #2
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e422:	69ba      	ldr	r2, [r7, #24]
 800e424:	8812      	ldrh	r2, [r2, #0]
 800e426:	b292      	uxth	r2, r2
 800e428:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e42e:	1c9a      	adds	r2, r3, #2
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	3b02      	subs	r3, #2
 800e43e:	b29a      	uxth	r2, r3
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e446:	e043      	b.n	800e4d0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e44e:	b29b      	uxth	r3, r3
 800e450:	2b01      	cmp	r3, #1
 800e452:	d119      	bne.n	800e488 <HAL_SPI_Receive+0x2dc>
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d014      	beq.n	800e488 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	8812      	ldrh	r2, [r2, #0]
 800e466:	b292      	uxth	r2, r2
 800e468:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46e:	1c9a      	adds	r2, r3, #2
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	3b01      	subs	r3, #1
 800e47e:	b29a      	uxth	r2, r3
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e486:	e023      	b.n	800e4d0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e488:	f7f5 fd50 	bl	8003f2c <HAL_GetTick>
 800e48c:	4602      	mov	r2, r0
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	429a      	cmp	r2, r3
 800e496:	d803      	bhi.n	800e4a0 <HAL_SPI_Receive+0x2f4>
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e49e:	d102      	bne.n	800e4a6 <HAL_SPI_Receive+0x2fa>
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d114      	bne.n	800e4d0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 fcb2 	bl	800ee10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	e0db      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f47f af69 	bne.w	800e3b0 <HAL_SPI_Receive+0x204>
 800e4de:	e0c0      	b.n	800e662 <HAL_SPI_Receive+0x4b6>
 800e4e0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	695b      	ldr	r3, [r3, #20]
 800e4ea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d117      	bne.n	800e52a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e506:	7812      	ldrb	r2, [r2, #0]
 800e508:	b2d2      	uxtb	r2, r2
 800e50a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e510:	1c5a      	adds	r2, r3, #1
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	3b01      	subs	r3, #1
 800e520:	b29a      	uxth	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e528:	e094      	b.n	800e654 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e530:	b29b      	uxth	r3, r3
 800e532:	8bfa      	ldrh	r2, [r7, #30]
 800e534:	429a      	cmp	r2, r3
 800e536:	d946      	bls.n	800e5c6 <HAL_SPI_Receive+0x41a>
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d041      	beq.n	800e5c6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e54e:	7812      	ldrb	r2, [r2, #0]
 800e550:	b2d2      	uxtb	r2, r2
 800e552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e56a:	7812      	ldrb	r2, [r2, #0]
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e586:	7812      	ldrb	r2, [r2, #0]
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3b04      	subs	r3, #4
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5c4:	e046      	b.n	800e654 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d81c      	bhi.n	800e60c <HAL_SPI_Receive+0x460>
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d017      	beq.n	800e60c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e8:	7812      	ldrb	r2, [r2, #0]
 800e5ea:	b2d2      	uxtb	r2, r2
 800e5ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	3b01      	subs	r3, #1
 800e602:	b29a      	uxth	r2, r3
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e60a:	e023      	b.n	800e654 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e60c:	f7f5 fc8e 	bl	8003f2c <HAL_GetTick>
 800e610:	4602      	mov	r2, r0
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d803      	bhi.n	800e624 <HAL_SPI_Receive+0x478>
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e622:	d102      	bne.n	800e62a <HAL_SPI_Receive+0x47e>
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d114      	bne.n	800e654 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f000 fbf0 	bl	800ee10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e636:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e650:	2303      	movs	r3, #3
 800e652:	e019      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f47f af41 	bne.w	800e4e4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f000 fbd4 	bl	800ee10 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d001      	beq.n	800e686 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e686:	2300      	movs	r3, #0
  }
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	4613      	mov	r3, r2
 800e69c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d005      	beq.n	800e6b6 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 800e6b2:	2302      	movs	r3, #2
 800e6b4:	e127      	b.n	800e906 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <HAL_SPI_Receive_DMA+0x32>
 800e6bc:	88fb      	ldrh	r3, [r7, #6]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d105      	bne.n	800e6ce <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e11b      	b.n	800e906 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d101      	bne.n	800e6dc <HAL_SPI_Receive_DMA+0x4c>
 800e6d8:	2302      	movs	r3, #2
 800e6da:	e114      	b.n	800e906 <HAL_SPI_Receive_DMA+0x276>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2204      	movs	r2, #4
 800e6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	88fa      	ldrh	r2, [r7, #6]
 800e6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	88fa      	ldrh	r2, [r7, #6]
 800e706:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e72e:	d108      	bne.n	800e742 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	e009      	b.n	800e756 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e754:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	2b0f      	cmp	r3, #15
 800e75c:	d905      	bls.n	800e76a <HAL_SPI_Receive_DMA+0xda>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e762:	699b      	ldr	r3, [r3, #24]
 800e764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e768:	d10f      	bne.n	800e78a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e76e:	2b07      	cmp	r3, #7
 800e770:	d911      	bls.n	800e796 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e776:	699b      	ldr	r3, [r3, #24]
 800e778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e77c:	d00b      	beq.n	800e796 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e782:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e788:	d005      	beq.n	800e796 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e0b7      	b.n	800e906 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	689a      	ldr	r2, [r3, #8]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e7a4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	2b07      	cmp	r3, #7
 800e7ac:	d820      	bhi.n	800e7f0 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7b8:	d109      	bne.n	800e7ce <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	105b      	asrs	r3, r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7d8:	d11e      	bne.n	800e818 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	3303      	adds	r3, #3
 800e7e4:	109b      	asrs	r3, r3, #2
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7ee:	e013      	b.n	800e818 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	2b0f      	cmp	r3, #15
 800e7f6:	d80f      	bhi.n	800e818 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7fc:	699b      	ldr	r3, [r3, #24]
 800e7fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e802:	d109      	bne.n	800e818 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	3301      	adds	r3, #1
 800e80e:	105b      	asrs	r3, r3, #1
 800e810:	b29a      	uxth	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e81c:	4a3c      	ldr	r2, [pc, #240]	; (800e910 <HAL_SPI_Receive_DMA+0x280>)
 800e81e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e824:	4a3b      	ldr	r2, [pc, #236]	; (800e914 <HAL_SPI_Receive_DMA+0x284>)
 800e826:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e82c:	4a3a      	ldr	r2, [pc, #232]	; (800e918 <HAL_SPI_Receive_DMA+0x288>)
 800e82e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e834:	2200      	movs	r2, #0
 800e836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	3330      	adds	r3, #48	; 0x30
 800e842:	4619      	mov	r1, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e848:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e850:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e852:	f7f7 ffef 	bl	8006834 <HAL_DMA_Start_IT>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d011      	beq.n	800e880 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e862:	f043 0210 	orr.w	r2, r3, #16
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	e042      	b.n	800e906 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e884:	69db      	ldr	r3, [r3, #28]
 800e886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e88a:	d108      	bne.n	800e89e <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6859      	ldr	r1, [r3, #4]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	4b21      	ldr	r3, [pc, #132]	; (800e91c <HAL_SPI_Receive_DMA+0x28c>)
 800e898:	400b      	ands	r3, r1
 800e89a:	6053      	str	r3, [r2, #4]
 800e89c:	e009      	b.n	800e8b2 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	685a      	ldr	r2, [r3, #4]
 800e8a4:	4b1d      	ldr	r3, [pc, #116]	; (800e91c <HAL_SPI_Receive_DMA+0x28c>)
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	88f9      	ldrh	r1, [r7, #6]
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	6812      	ldr	r2, [r2, #0]
 800e8ae:	430b      	orrs	r3, r1
 800e8b0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	689a      	ldr	r2, [r3, #8]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e8c0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	691a      	ldr	r2, [r3, #16]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800e8d0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f042 0201 	orr.w	r2, r2, #1
 800e8e0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8ea:	d107      	bne.n	800e8fc <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8fa:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	0800ed7b 	.word	0x0800ed7b
 800e914:	0800ed35 	.word	0x0800ed35
 800e918:	0800ed97 	.word	0x0800ed97
 800e91c:	ffff0000 	.word	0xffff0000

0800e920 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08a      	sub	sp, #40	; 0x28
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800e938:	6a3a      	ldr	r2, [r7, #32]
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	4013      	ands	r3, r2
 800e93e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800e948:	2300      	movs	r3, #0
 800e94a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e952:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3330      	adds	r3, #48	; 0x30
 800e95a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e962:	2b00      	cmp	r3, #0
 800e964:	d010      	beq.n	800e988 <HAL_SPI_IRQHandler+0x68>
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	f003 0308 	and.w	r3, r3, #8
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00b      	beq.n	800e988 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	699a      	ldr	r2, [r3, #24]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e97e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 f9cd 	bl	800ed20 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800e986:	e192      	b.n	800ecae <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d113      	bne.n	800e9ba <HAL_SPI_IRQHandler+0x9a>
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	f003 0320 	and.w	r3, r3, #32
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d10e      	bne.n	800e9ba <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d009      	beq.n	800e9ba <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	4798      	blx	r3
    handled = 1UL;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10f      	bne.n	800e9e4 <HAL_SPI_IRQHandler+0xc4>
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00a      	beq.n	800e9e4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d105      	bne.n	800e9e4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	4798      	blx	r3
    handled = 1UL;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	f003 0320 	and.w	r3, r3, #32
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10f      	bne.n	800ea0e <HAL_SPI_IRQHandler+0xee>
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	f003 0302 	and.w	r3, r3, #2
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00a      	beq.n	800ea0e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d105      	bne.n	800ea0e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	4798      	blx	r3
    handled = 1UL;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f040 8147 	bne.w	800eca4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	f003 0308 	and.w	r3, r3, #8
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 808b 	beq.w	800eb38 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	699a      	ldr	r2, [r3, #24]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f042 0208 	orr.w	r2, r2, #8
 800ea30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	699a      	ldr	r2, [r3, #24]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f042 0210 	orr.w	r2, r2, #16
 800ea40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	699a      	ldr	r2, [r3, #24]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea50:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	691a      	ldr	r2, [r3, #16]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f022 0208 	bic.w	r2, r2, #8
 800ea60:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d13d      	bne.n	800eaec <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ea70:	e036      	b.n	800eae0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	2b0f      	cmp	r3, #15
 800ea78:	d90b      	bls.n	800ea92 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ea84:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea8a:	1d1a      	adds	r2, r3, #4
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	665a      	str	r2, [r3, #100]	; 0x64
 800ea90:	e01d      	b.n	800eace <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	2b07      	cmp	r3, #7
 800ea98:	d90b      	bls.n	800eab2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	8812      	ldrh	r2, [r2, #0]
 800eaa2:	b292      	uxth	r2, r2
 800eaa4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaaa:	1c9a      	adds	r2, r3, #2
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	665a      	str	r2, [r3, #100]	; 0x64
 800eab0:	e00d      	b.n	800eace <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eabe:	7812      	ldrb	r2, [r2, #0]
 800eac0:	b2d2      	uxtb	r2, r2
 800eac2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eac8:	1c5a      	adds	r2, r3, #1
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	3b01      	subs	r3, #1
 800ead8:	b29a      	uxth	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1c2      	bne.n	800ea72 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f98f 	bl	800ee10 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d003      	beq.n	800eb0c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 f901 	bl	800ed0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800eb0a:	e0d0      	b.n	800ecae <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800eb0c:	7cfb      	ldrb	r3, [r7, #19]
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	d103      	bne.n	800eb1a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f8e6 	bl	800ece4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800eb18:	e0c6      	b.n	800eca8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800eb1a:	7cfb      	ldrb	r3, [r7, #19]
 800eb1c:	2b04      	cmp	r3, #4
 800eb1e:	d103      	bne.n	800eb28 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f8d5 	bl	800ecd0 <HAL_SPI_RxCpltCallback>
    return;
 800eb26:	e0bf      	b.n	800eca8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800eb28:	7cfb      	ldrb	r3, [r7, #19]
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	f040 80bc 	bne.w	800eca8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f8c3 	bl	800ecbc <HAL_SPI_TxCpltCallback>
    return;
 800eb36:	e0b7      	b.n	800eca8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 80b5 	beq.w	800ecae <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00f      	beq.n	800eb6e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb54:	f043 0204 	orr.w	r2, r3, #4
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	699a      	ldr	r2, [r3, #24]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800eb6e:	69bb      	ldr	r3, [r7, #24]
 800eb70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00f      	beq.n	800eb98 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb7e:	f043 0201 	orr.w	r2, r3, #1
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	699a      	ldr	r2, [r3, #24]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00f      	beq.n	800ebc2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eba8:	f043 0208 	orr.w	r2, r3, #8
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	699a      	ldr	r2, [r3, #24]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ebc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	f003 0320 	and.w	r3, r3, #32
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00f      	beq.n	800ebec <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	699a      	ldr	r2, [r3, #24]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f042 0220 	orr.w	r2, r2, #32
 800ebea:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d05a      	beq.n	800ecac <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f022 0201 	bic.w	r2, r2, #1
 800ec04:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	6919      	ldr	r1, [r3, #16]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	4b28      	ldr	r3, [pc, #160]	; (800ecb4 <HAL_SPI_IRQHandler+0x394>)
 800ec12:	400b      	ands	r3, r1
 800ec14:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ec1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ec20:	d138      	bne.n	800ec94 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689a      	ldr	r2, [r3, #8]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ec30:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d013      	beq.n	800ec62 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec3e:	4a1e      	ldr	r2, [pc, #120]	; (800ecb8 <HAL_SPI_IRQHandler+0x398>)
 800ec40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7f8 fb7c 	bl	8007344 <HAL_DMA_Abort_IT>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d007      	beq.n	800ec62 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d020      	beq.n	800ecac <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec6e:	4a12      	ldr	r2, [pc, #72]	; (800ecb8 <HAL_SPI_IRQHandler+0x398>)
 800ec70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f8 fb64 	bl	8007344 <HAL_DMA_Abort_IT>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d014      	beq.n	800ecac <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ec92:	e00b      	b.n	800ecac <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 f835 	bl	800ed0c <HAL_SPI_ErrorCallback>
    return;
 800eca2:	e003      	b.n	800ecac <HAL_SPI_IRQHandler+0x38c>
    return;
 800eca4:	bf00      	nop
 800eca6:	e002      	b.n	800ecae <HAL_SPI_IRQHandler+0x38e>
    return;
 800eca8:	bf00      	nop
 800ecaa:	e000      	b.n	800ecae <HAL_SPI_IRQHandler+0x38e>
    return;
 800ecac:	bf00      	nop
  }
}
 800ecae:	3728      	adds	r7, #40	; 0x28
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	fffffc94 	.word	0xfffffc94
 800ecb8:	0800eddd 	.word	0x0800eddd

0800ecbc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ed14:	bf00      	nop
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed40:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	2b07      	cmp	r3, #7
 800ed4c:	d011      	beq.n	800ed72 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed52:	69db      	ldr	r3, [r3, #28]
 800ed54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed58:	d103      	bne.n	800ed62 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff ffb8 	bl	800ecd0 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ed60:	e007      	b.n	800ed72 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f042 0208 	orr.w	r2, r2, #8
 800ed70:	611a      	str	r2, [r3, #16]
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b084      	sub	sp, #16
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed86:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff ffb5 	bl	800ecf8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ed8e:	bf00      	nop
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b084      	sub	sp, #16
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7f9 fc3d 	bl	8008624 <HAL_DMA_GetError>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b02      	cmp	r3, #2
 800edae:	d011      	beq.n	800edd4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f000 f82d 	bl	800ee10 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edbc:	f043 0210 	orr.w	r2, r3, #16
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2201      	movs	r2, #1
 800edca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f7ff ff9c 	bl	800ed0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800edd4:	bf00      	nop
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f7ff ff82 	bl	800ed0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	699a      	ldr	r2, [r3, #24]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f042 0208 	orr.w	r2, r2, #8
 800ee2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	699a      	ldr	r2, [r3, #24]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f042 0210 	orr.w	r2, r2, #16
 800ee3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f022 0201 	bic.w	r2, r2, #1
 800ee4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6919      	ldr	r1, [r3, #16]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	4b3c      	ldr	r3, [pc, #240]	; (800ef4c <SPI_CloseTransfer+0x13c>)
 800ee5c:	400b      	ands	r3, r1
 800ee5e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	689a      	ldr	r2, [r3, #8]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ee6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b04      	cmp	r3, #4
 800ee7a:	d014      	beq.n	800eea6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f003 0320 	and.w	r3, r3, #32
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00f      	beq.n	800eea6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	699a      	ldr	r2, [r3, #24]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f042 0220 	orr.w	r2, r2, #32
 800eea4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b03      	cmp	r3, #3
 800eeb0:	d014      	beq.n	800eedc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00f      	beq.n	800eedc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eec2:	f043 0204 	orr.w	r2, r3, #4
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	699a      	ldr	r2, [r3, #24]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eeda:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00f      	beq.n	800ef06 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeec:	f043 0201 	orr.w	r2, r3, #1
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	699a      	ldr	r2, [r3, #24]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00f      	beq.n	800ef30 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef16:	f043 0208 	orr.w	r2, r3, #8
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	699a      	ldr	r2, [r3, #24]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ef40:	bf00      	nop
 800ef42:	3714      	adds	r7, #20
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	fffffc90 	.word	0xfffffc90

0800ef50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef5c:	095b      	lsrs	r3, r3, #5
 800ef5e:	3301      	adds	r3, #1
 800ef60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	3301      	adds	r3, #1
 800ef68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	3307      	adds	r3, #7
 800ef6e:	08db      	lsrs	r3, r3, #3
 800ef70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	fb02 f303 	mul.w	r3, r2, r3
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d101      	bne.n	800ef98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	e049      	b.n	800f02c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d106      	bne.n	800efb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f4 fa75 	bl	800349c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2202      	movs	r2, #2
 800efb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3304      	adds	r3, #4
 800efc2:	4619      	mov	r1, r3
 800efc4:	4610      	mov	r0, r2
 800efc6:	f000 fe7d 	bl	800fcc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2201      	movs	r2, #1
 800efce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2201      	movs	r2, #1
 800efd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2201      	movs	r2, #1
 800efde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2201      	movs	r2, #1
 800efe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2201      	movs	r2, #1
 800eff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2201      	movs	r2, #1
 800effe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2201      	movs	r2, #1
 800f006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2201      	movs	r2, #1
 800f01e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f042:	b2db      	uxtb	r3, r3
 800f044:	2b01      	cmp	r3, #1
 800f046:	d001      	beq.n	800f04c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	e054      	b.n	800f0f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2202      	movs	r2, #2
 800f050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68da      	ldr	r2, [r3, #12]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f042 0201 	orr.w	r2, r2, #1
 800f062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a26      	ldr	r2, [pc, #152]	; (800f104 <HAL_TIM_Base_Start_IT+0xd0>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d022      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f076:	d01d      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a22      	ldr	r2, [pc, #136]	; (800f108 <HAL_TIM_Base_Start_IT+0xd4>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d018      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a21      	ldr	r2, [pc, #132]	; (800f10c <HAL_TIM_Base_Start_IT+0xd8>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d013      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a1f      	ldr	r2, [pc, #124]	; (800f110 <HAL_TIM_Base_Start_IT+0xdc>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d00e      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a1e      	ldr	r2, [pc, #120]	; (800f114 <HAL_TIM_Base_Start_IT+0xe0>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d009      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a1c      	ldr	r2, [pc, #112]	; (800f118 <HAL_TIM_Base_Start_IT+0xe4>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d004      	beq.n	800f0b4 <HAL_TIM_Base_Start_IT+0x80>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a1b      	ldr	r2, [pc, #108]	; (800f11c <HAL_TIM_Base_Start_IT+0xe8>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d115      	bne.n	800f0e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	689a      	ldr	r2, [r3, #8]
 800f0ba:	4b19      	ldr	r3, [pc, #100]	; (800f120 <HAL_TIM_Base_Start_IT+0xec>)
 800f0bc:	4013      	ands	r3, r2
 800f0be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2b06      	cmp	r3, #6
 800f0c4:	d015      	beq.n	800f0f2 <HAL_TIM_Base_Start_IT+0xbe>
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0cc:	d011      	beq.n	800f0f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f042 0201 	orr.w	r2, r2, #1
 800f0dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0de:	e008      	b.n	800f0f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f042 0201 	orr.w	r2, r2, #1
 800f0ee:	601a      	str	r2, [r3, #0]
 800f0f0:	e000      	b.n	800f0f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	40010000 	.word	0x40010000
 800f108:	40000400 	.word	0x40000400
 800f10c:	40000800 	.word	0x40000800
 800f110:	40000c00 	.word	0x40000c00
 800f114:	40010400 	.word	0x40010400
 800f118:	40001800 	.word	0x40001800
 800f11c:	40014000 	.word	0x40014000
 800f120:	00010007 	.word	0x00010007

0800f124 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f12e:	2300      	movs	r3, #0
 800f130:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d109      	bne.n	800f14c <HAL_TIM_OC_Start_IT+0x28>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	2b01      	cmp	r3, #1
 800f142:	bf14      	ite	ne
 800f144:	2301      	movne	r3, #1
 800f146:	2300      	moveq	r3, #0
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	e03c      	b.n	800f1c6 <HAL_TIM_OC_Start_IT+0xa2>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b04      	cmp	r3, #4
 800f150:	d109      	bne.n	800f166 <HAL_TIM_OC_Start_IT+0x42>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	bf14      	ite	ne
 800f15e:	2301      	movne	r3, #1
 800f160:	2300      	moveq	r3, #0
 800f162:	b2db      	uxtb	r3, r3
 800f164:	e02f      	b.n	800f1c6 <HAL_TIM_OC_Start_IT+0xa2>
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	2b08      	cmp	r3, #8
 800f16a:	d109      	bne.n	800f180 <HAL_TIM_OC_Start_IT+0x5c>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b01      	cmp	r3, #1
 800f176:	bf14      	ite	ne
 800f178:	2301      	movne	r3, #1
 800f17a:	2300      	moveq	r3, #0
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	e022      	b.n	800f1c6 <HAL_TIM_OC_Start_IT+0xa2>
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2b0c      	cmp	r3, #12
 800f184:	d109      	bne.n	800f19a <HAL_TIM_OC_Start_IT+0x76>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b01      	cmp	r3, #1
 800f190:	bf14      	ite	ne
 800f192:	2301      	movne	r3, #1
 800f194:	2300      	moveq	r3, #0
 800f196:	b2db      	uxtb	r3, r3
 800f198:	e015      	b.n	800f1c6 <HAL_TIM_OC_Start_IT+0xa2>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b10      	cmp	r3, #16
 800f19e:	d109      	bne.n	800f1b4 <HAL_TIM_OC_Start_IT+0x90>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	bf14      	ite	ne
 800f1ac:	2301      	movne	r3, #1
 800f1ae:	2300      	moveq	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	e008      	b.n	800f1c6 <HAL_TIM_OC_Start_IT+0xa2>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	bf14      	ite	ne
 800f1c0:	2301      	movne	r3, #1
 800f1c2:	2300      	moveq	r3, #0
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e0ec      	b.n	800f3a8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <HAL_TIM_OC_Start_IT+0xba>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1dc:	e023      	b.n	800f226 <HAL_TIM_OC_Start_IT+0x102>
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	2b04      	cmp	r3, #4
 800f1e2:	d104      	bne.n	800f1ee <HAL_TIM_OC_Start_IT+0xca>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1ec:	e01b      	b.n	800f226 <HAL_TIM_OC_Start_IT+0x102>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b08      	cmp	r3, #8
 800f1f2:	d104      	bne.n	800f1fe <HAL_TIM_OC_Start_IT+0xda>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2202      	movs	r2, #2
 800f1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1fc:	e013      	b.n	800f226 <HAL_TIM_OC_Start_IT+0x102>
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b0c      	cmp	r3, #12
 800f202:	d104      	bne.n	800f20e <HAL_TIM_OC_Start_IT+0xea>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2202      	movs	r2, #2
 800f208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f20c:	e00b      	b.n	800f226 <HAL_TIM_OC_Start_IT+0x102>
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	2b10      	cmp	r3, #16
 800f212:	d104      	bne.n	800f21e <HAL_TIM_OC_Start_IT+0xfa>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2202      	movs	r2, #2
 800f218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f21c:	e003      	b.n	800f226 <HAL_TIM_OC_Start_IT+0x102>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2202      	movs	r2, #2
 800f222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	2b0c      	cmp	r3, #12
 800f22a:	d841      	bhi.n	800f2b0 <HAL_TIM_OC_Start_IT+0x18c>
 800f22c:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <HAL_TIM_OC_Start_IT+0x110>)
 800f22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f232:	bf00      	nop
 800f234:	0800f269 	.word	0x0800f269
 800f238:	0800f2b1 	.word	0x0800f2b1
 800f23c:	0800f2b1 	.word	0x0800f2b1
 800f240:	0800f2b1 	.word	0x0800f2b1
 800f244:	0800f27b 	.word	0x0800f27b
 800f248:	0800f2b1 	.word	0x0800f2b1
 800f24c:	0800f2b1 	.word	0x0800f2b1
 800f250:	0800f2b1 	.word	0x0800f2b1
 800f254:	0800f28d 	.word	0x0800f28d
 800f258:	0800f2b1 	.word	0x0800f2b1
 800f25c:	0800f2b1 	.word	0x0800f2b1
 800f260:	0800f2b1 	.word	0x0800f2b1
 800f264:	0800f29f 	.word	0x0800f29f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	68da      	ldr	r2, [r3, #12]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f042 0202 	orr.w	r2, r2, #2
 800f276:	60da      	str	r2, [r3, #12]
      break;
 800f278:	e01d      	b.n	800f2b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	68da      	ldr	r2, [r3, #12]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f042 0204 	orr.w	r2, r2, #4
 800f288:	60da      	str	r2, [r3, #12]
      break;
 800f28a:	e014      	b.n	800f2b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	68da      	ldr	r2, [r3, #12]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f042 0208 	orr.w	r2, r2, #8
 800f29a:	60da      	str	r2, [r3, #12]
      break;
 800f29c:	e00b      	b.n	800f2b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	68da      	ldr	r2, [r3, #12]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f042 0210 	orr.w	r2, r2, #16
 800f2ac:	60da      	str	r2, [r3, #12]
      break;
 800f2ae:	e002      	b.n	800f2b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	73fb      	strb	r3, [r7, #15]
      break;
 800f2b4:	bf00      	nop
  }

  if (status == HAL_OK)
 800f2b6:	7bfb      	ldrb	r3, [r7, #15]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d174      	bne.n	800f3a6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f001 f917 	bl	80104f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a38      	ldr	r2, [pc, #224]	; (800f3b0 <HAL_TIM_OC_Start_IT+0x28c>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d013      	beq.n	800f2fc <HAL_TIM_OC_Start_IT+0x1d8>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a36      	ldr	r2, [pc, #216]	; (800f3b4 <HAL_TIM_OC_Start_IT+0x290>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d00e      	beq.n	800f2fc <HAL_TIM_OC_Start_IT+0x1d8>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a35      	ldr	r2, [pc, #212]	; (800f3b8 <HAL_TIM_OC_Start_IT+0x294>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d009      	beq.n	800f2fc <HAL_TIM_OC_Start_IT+0x1d8>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a33      	ldr	r2, [pc, #204]	; (800f3bc <HAL_TIM_OC_Start_IT+0x298>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d004      	beq.n	800f2fc <HAL_TIM_OC_Start_IT+0x1d8>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a32      	ldr	r2, [pc, #200]	; (800f3c0 <HAL_TIM_OC_Start_IT+0x29c>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d101      	bne.n	800f300 <HAL_TIM_OC_Start_IT+0x1dc>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e000      	b.n	800f302 <HAL_TIM_OC_Start_IT+0x1de>
 800f300:	2300      	movs	r3, #0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d007      	beq.n	800f316 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a25      	ldr	r2, [pc, #148]	; (800f3b0 <HAL_TIM_OC_Start_IT+0x28c>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d022      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f328:	d01d      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a25      	ldr	r2, [pc, #148]	; (800f3c4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d018      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a23      	ldr	r2, [pc, #140]	; (800f3c8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d013      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a22      	ldr	r2, [pc, #136]	; (800f3cc <HAL_TIM_OC_Start_IT+0x2a8>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d00e      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a19      	ldr	r2, [pc, #100]	; (800f3b4 <HAL_TIM_OC_Start_IT+0x290>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d009      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a1e      	ldr	r2, [pc, #120]	; (800f3d0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d004      	beq.n	800f366 <HAL_TIM_OC_Start_IT+0x242>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a15      	ldr	r2, [pc, #84]	; (800f3b8 <HAL_TIM_OC_Start_IT+0x294>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d115      	bne.n	800f392 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689a      	ldr	r2, [r3, #8]
 800f36c:	4b19      	ldr	r3, [pc, #100]	; (800f3d4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800f36e:	4013      	ands	r3, r2
 800f370:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	2b06      	cmp	r3, #6
 800f376:	d015      	beq.n	800f3a4 <HAL_TIM_OC_Start_IT+0x280>
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f37e:	d011      	beq.n	800f3a4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f042 0201 	orr.w	r2, r2, #1
 800f38e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f390:	e008      	b.n	800f3a4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f042 0201 	orr.w	r2, r2, #1
 800f3a0:	601a      	str	r2, [r3, #0]
 800f3a2:	e000      	b.n	800f3a6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3a4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	40010000 	.word	0x40010000
 800f3b4:	40010400 	.word	0x40010400
 800f3b8:	40014000 	.word	0x40014000
 800f3bc:	40014400 	.word	0x40014400
 800f3c0:	40014800 	.word	0x40014800
 800f3c4:	40000400 	.word	0x40000400
 800f3c8:	40000800 	.word	0x40000800
 800f3cc:	40000c00 	.word	0x40000c00
 800f3d0:	40001800 	.word	0x40001800
 800f3d4:	00010007 	.word	0x00010007

0800f3d8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	2b0c      	cmp	r3, #12
 800f3ea:	d841      	bhi.n	800f470 <HAL_TIM_OC_Stop_IT+0x98>
 800f3ec:	a201      	add	r2, pc, #4	; (adr r2, 800f3f4 <HAL_TIM_OC_Stop_IT+0x1c>)
 800f3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f2:	bf00      	nop
 800f3f4:	0800f429 	.word	0x0800f429
 800f3f8:	0800f471 	.word	0x0800f471
 800f3fc:	0800f471 	.word	0x0800f471
 800f400:	0800f471 	.word	0x0800f471
 800f404:	0800f43b 	.word	0x0800f43b
 800f408:	0800f471 	.word	0x0800f471
 800f40c:	0800f471 	.word	0x0800f471
 800f410:	0800f471 	.word	0x0800f471
 800f414:	0800f44d 	.word	0x0800f44d
 800f418:	0800f471 	.word	0x0800f471
 800f41c:	0800f471 	.word	0x0800f471
 800f420:	0800f471 	.word	0x0800f471
 800f424:	0800f45f 	.word	0x0800f45f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68da      	ldr	r2, [r3, #12]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f022 0202 	bic.w	r2, r2, #2
 800f436:	60da      	str	r2, [r3, #12]
      break;
 800f438:	e01d      	b.n	800f476 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f022 0204 	bic.w	r2, r2, #4
 800f448:	60da      	str	r2, [r3, #12]
      break;
 800f44a:	e014      	b.n	800f476 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68da      	ldr	r2, [r3, #12]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f022 0208 	bic.w	r2, r2, #8
 800f45a:	60da      	str	r2, [r3, #12]
      break;
 800f45c:	e00b      	b.n	800f476 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68da      	ldr	r2, [r3, #12]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0210 	bic.w	r2, r2, #16
 800f46c:	60da      	str	r2, [r3, #12]
      break;
 800f46e:	e002      	b.n	800f476 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	73fb      	strb	r3, [r7, #15]
      break;
 800f474:	bf00      	nop
  }

  if (status == HAL_OK)
 800f476:	7bfb      	ldrb	r3, [r7, #15]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f040 8081 	bne.w	800f580 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2200      	movs	r2, #0
 800f484:	6839      	ldr	r1, [r7, #0]
 800f486:	4618      	mov	r0, r3
 800f488:	f001 f836 	bl	80104f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4a3e      	ldr	r2, [pc, #248]	; (800f58c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d013      	beq.n	800f4be <HAL_TIM_OC_Stop_IT+0xe6>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a3d      	ldr	r2, [pc, #244]	; (800f590 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d00e      	beq.n	800f4be <HAL_TIM_OC_Stop_IT+0xe6>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4a3b      	ldr	r2, [pc, #236]	; (800f594 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d009      	beq.n	800f4be <HAL_TIM_OC_Stop_IT+0xe6>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4a3a      	ldr	r2, [pc, #232]	; (800f598 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d004      	beq.n	800f4be <HAL_TIM_OC_Stop_IT+0xe6>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a38      	ldr	r2, [pc, #224]	; (800f59c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d101      	bne.n	800f4c2 <HAL_TIM_OC_Stop_IT+0xea>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e000      	b.n	800f4c4 <HAL_TIM_OC_Stop_IT+0xec>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d017      	beq.n	800f4f8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6a1a      	ldr	r2, [r3, #32]
 800f4ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10f      	bne.n	800f4f8 <HAL_TIM_OC_Stop_IT+0x120>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6a1a      	ldr	r2, [r3, #32]
 800f4de:	f240 4344 	movw	r3, #1092	; 0x444
 800f4e2:	4013      	ands	r3, r2
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d107      	bne.n	800f4f8 <HAL_TIM_OC_Stop_IT+0x120>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f4f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	6a1a      	ldr	r2, [r3, #32]
 800f4fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800f502:	4013      	ands	r3, r2
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10f      	bne.n	800f528 <HAL_TIM_OC_Stop_IT+0x150>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6a1a      	ldr	r2, [r3, #32]
 800f50e:	f240 4344 	movw	r3, #1092	; 0x444
 800f512:	4013      	ands	r3, r2
 800f514:	2b00      	cmp	r3, #0
 800f516:	d107      	bne.n	800f528 <HAL_TIM_OC_Stop_IT+0x150>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f022 0201 	bic.w	r2, r2, #1
 800f526:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d104      	bne.n	800f538 <HAL_TIM_OC_Stop_IT+0x160>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2201      	movs	r2, #1
 800f532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f536:	e023      	b.n	800f580 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	2b04      	cmp	r3, #4
 800f53c:	d104      	bne.n	800f548 <HAL_TIM_OC_Stop_IT+0x170>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2201      	movs	r2, #1
 800f542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f546:	e01b      	b.n	800f580 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2b08      	cmp	r3, #8
 800f54c:	d104      	bne.n	800f558 <HAL_TIM_OC_Stop_IT+0x180>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2201      	movs	r2, #1
 800f552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f556:	e013      	b.n	800f580 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	2b0c      	cmp	r3, #12
 800f55c:	d104      	bne.n	800f568 <HAL_TIM_OC_Stop_IT+0x190>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2201      	movs	r2, #1
 800f562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f566:	e00b      	b.n	800f580 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	2b10      	cmp	r3, #16
 800f56c:	d104      	bne.n	800f578 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2201      	movs	r2, #1
 800f572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f576:	e003      	b.n	800f580 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f580:	7bfb      	ldrb	r3, [r7, #15]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
 800f58a:	bf00      	nop
 800f58c:	40010000 	.word	0x40010000
 800f590:	40010400 	.word	0x40010400
 800f594:	40014000 	.word	0x40014000
 800f598:	40014400 	.word	0x40014400
 800f59c:	40014800 	.word	0x40014800

0800f5a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e049      	b.n	800f646 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f841 	bl	800f64e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3304      	adds	r3, #4
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4610      	mov	r0, r2
 800f5e0:	f000 fb70 	bl	800fcc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2201      	movs	r2, #1
 800f620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f64e:	b480      	push	{r7}
 800f650:	b083      	sub	sp, #12
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f656:	bf00      	nop
 800f658:	370c      	adds	r7, #12
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b084      	sub	sp, #16
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f003 0302 	and.w	r3, r3, #2
 800f680:	2b00      	cmp	r3, #0
 800f682:	d020      	beq.n	800f6c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f003 0302 	and.w	r3, r3, #2
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01b      	beq.n	800f6c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f06f 0202 	mvn.w	r2, #2
 800f696:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	699b      	ldr	r3, [r3, #24]
 800f6a4:	f003 0303 	and.w	r3, r3, #3
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d003      	beq.n	800f6b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 faeb 	bl	800fc88 <HAL_TIM_IC_CaptureCallback>
 800f6b2:	e005      	b.n	800f6c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f1 ff07 	bl	80014c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 faee 	bl	800fc9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	f003 0304 	and.w	r3, r3, #4
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d020      	beq.n	800f712 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f003 0304 	and.w	r3, r3, #4
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d01b      	beq.n	800f712 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f06f 0204 	mvn.w	r2, #4
 800f6e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2202      	movs	r2, #2
 800f6e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d003      	beq.n	800f700 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fac5 	bl	800fc88 <HAL_TIM_IC_CaptureCallback>
 800f6fe:	e005      	b.n	800f70c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7f1 fee1 	bl	80014c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 fac8 	bl	800fc9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	f003 0308 	and.w	r3, r3, #8
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d020      	beq.n	800f75e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f003 0308 	and.w	r3, r3, #8
 800f722:	2b00      	cmp	r3, #0
 800f724:	d01b      	beq.n	800f75e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f06f 0208 	mvn.w	r2, #8
 800f72e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2204      	movs	r2, #4
 800f734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	69db      	ldr	r3, [r3, #28]
 800f73c:	f003 0303 	and.w	r3, r3, #3
 800f740:	2b00      	cmp	r3, #0
 800f742:	d003      	beq.n	800f74c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 fa9f 	bl	800fc88 <HAL_TIM_IC_CaptureCallback>
 800f74a:	e005      	b.n	800f758 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7f1 febb 	bl	80014c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 faa2 	bl	800fc9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2200      	movs	r2, #0
 800f75c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	f003 0310 	and.w	r3, r3, #16
 800f764:	2b00      	cmp	r3, #0
 800f766:	d020      	beq.n	800f7aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f003 0310 	and.w	r3, r3, #16
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d01b      	beq.n	800f7aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f06f 0210 	mvn.w	r2, #16
 800f77a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2208      	movs	r2, #8
 800f780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69db      	ldr	r3, [r3, #28]
 800f788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d003      	beq.n	800f798 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fa79 	bl	800fc88 <HAL_TIM_IC_CaptureCallback>
 800f796:	e005      	b.n	800f7a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7f1 fe95 	bl	80014c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fa7c 	bl	800fc9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f003 0301 	and.w	r3, r3, #1
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00c      	beq.n	800f7ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f003 0301 	and.w	r3, r3, #1
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d007      	beq.n	800f7ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f06f 0201 	mvn.w	r2, #1
 800f7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7f2 fce3 	bl	8002194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d104      	bne.n	800f7e2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00c      	beq.n	800f7fc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d007      	beq.n	800f7fc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 ffba 	bl	8010770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00c      	beq.n	800f820 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d007      	beq.n	800f820 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 ffb2 	bl	8010784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00c      	beq.n	800f844 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f830:	2b00      	cmp	r3, #0
 800f832:	d007      	beq.n	800f844 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 fa36 	bl	800fcb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	f003 0320 	and.w	r3, r3, #32
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00c      	beq.n	800f868 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f003 0320 	and.w	r3, r3, #32
 800f854:	2b00      	cmp	r3, #0
 800f856:	d007      	beq.n	800f868 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f06f 0220 	mvn.w	r2, #32
 800f860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 ff7a 	bl	801075c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f868:	bf00      	nop
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f886:	2b01      	cmp	r3, #1
 800f888:	d101      	bne.n	800f88e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f88a:	2302      	movs	r3, #2
 800f88c:	e0ff      	b.n	800fa8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2201      	movs	r2, #1
 800f892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b14      	cmp	r3, #20
 800f89a:	f200 80f0 	bhi.w	800fa7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f89e:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a4:	0800f8f9 	.word	0x0800f8f9
 800f8a8:	0800fa7f 	.word	0x0800fa7f
 800f8ac:	0800fa7f 	.word	0x0800fa7f
 800f8b0:	0800fa7f 	.word	0x0800fa7f
 800f8b4:	0800f939 	.word	0x0800f939
 800f8b8:	0800fa7f 	.word	0x0800fa7f
 800f8bc:	0800fa7f 	.word	0x0800fa7f
 800f8c0:	0800fa7f 	.word	0x0800fa7f
 800f8c4:	0800f97b 	.word	0x0800f97b
 800f8c8:	0800fa7f 	.word	0x0800fa7f
 800f8cc:	0800fa7f 	.word	0x0800fa7f
 800f8d0:	0800fa7f 	.word	0x0800fa7f
 800f8d4:	0800f9bb 	.word	0x0800f9bb
 800f8d8:	0800fa7f 	.word	0x0800fa7f
 800f8dc:	0800fa7f 	.word	0x0800fa7f
 800f8e0:	0800fa7f 	.word	0x0800fa7f
 800f8e4:	0800f9fd 	.word	0x0800f9fd
 800f8e8:	0800fa7f 	.word	0x0800fa7f
 800f8ec:	0800fa7f 	.word	0x0800fa7f
 800f8f0:	0800fa7f 	.word	0x0800fa7f
 800f8f4:	0800fa3d 	.word	0x0800fa3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68b9      	ldr	r1, [r7, #8]
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 fa86 	bl	800fe10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	699a      	ldr	r2, [r3, #24]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f042 0208 	orr.w	r2, r2, #8
 800f912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	699a      	ldr	r2, [r3, #24]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f022 0204 	bic.w	r2, r2, #4
 800f922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6999      	ldr	r1, [r3, #24]
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	691a      	ldr	r2, [r3, #16]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	430a      	orrs	r2, r1
 800f934:	619a      	str	r2, [r3, #24]
      break;
 800f936:	e0a5      	b.n	800fa84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	68b9      	ldr	r1, [r7, #8]
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 faf6 	bl	800ff30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	699a      	ldr	r2, [r3, #24]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	699a      	ldr	r2, [r3, #24]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	6999      	ldr	r1, [r3, #24]
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	691b      	ldr	r3, [r3, #16]
 800f96e:	021a      	lsls	r2, r3, #8
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	430a      	orrs	r2, r1
 800f976:	619a      	str	r2, [r3, #24]
      break;
 800f978:	e084      	b.n	800fa84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	4618      	mov	r0, r3
 800f982:	f000 fb5f 	bl	8010044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69da      	ldr	r2, [r3, #28]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f042 0208 	orr.w	r2, r2, #8
 800f994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	69da      	ldr	r2, [r3, #28]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f022 0204 	bic.w	r2, r2, #4
 800f9a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	69d9      	ldr	r1, [r3, #28]
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	691a      	ldr	r2, [r3, #16]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	430a      	orrs	r2, r1
 800f9b6:	61da      	str	r2, [r3, #28]
      break;
 800f9b8:	e064      	b.n	800fa84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68b9      	ldr	r1, [r7, #8]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f000 fbc7 	bl	8010154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	69da      	ldr	r2, [r3, #28]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	69da      	ldr	r2, [r3, #28]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	69d9      	ldr	r1, [r3, #28]
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	691b      	ldr	r3, [r3, #16]
 800f9f0:	021a      	lsls	r2, r3, #8
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	430a      	orrs	r2, r1
 800f9f8:	61da      	str	r2, [r3, #28]
      break;
 800f9fa:	e043      	b.n	800fa84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68b9      	ldr	r1, [r7, #8]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 fc10 	bl	8010228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f042 0208 	orr.w	r2, r2, #8
 800fa16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f022 0204 	bic.w	r2, r2, #4
 800fa26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	691a      	ldr	r2, [r3, #16]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	430a      	orrs	r2, r1
 800fa38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fa3a:	e023      	b.n	800fa84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68b9      	ldr	r1, [r7, #8]
 800fa42:	4618      	mov	r0, r3
 800fa44:	f000 fc54 	bl	80102f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	691b      	ldr	r3, [r3, #16]
 800fa72:	021a      	lsls	r2, r3, #8
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	430a      	orrs	r2, r1
 800fa7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fa7c:	e002      	b.n	800fa84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	75fb      	strb	r3, [r7, #23]
      break;
 800fa82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3718      	adds	r7, #24
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop

0800fa98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800faac:	2b01      	cmp	r3, #1
 800faae:	d101      	bne.n	800fab4 <HAL_TIM_ConfigClockSource+0x1c>
 800fab0:	2302      	movs	r3, #2
 800fab2:	e0dc      	b.n	800fc6e <HAL_TIM_ConfigClockSource+0x1d6>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2202      	movs	r2, #2
 800fac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	4b6a      	ldr	r3, [pc, #424]	; (800fc78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800fad0:	4013      	ands	r3, r2
 800fad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a64      	ldr	r2, [pc, #400]	; (800fc7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800faea:	4293      	cmp	r3, r2
 800faec:	f000 80a9 	beq.w	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800faf0:	4a62      	ldr	r2, [pc, #392]	; (800fc7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	f200 80ae 	bhi.w	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800faf8:	4a61      	ldr	r2, [pc, #388]	; (800fc80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	f000 80a1 	beq.w	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb00:	4a5f      	ldr	r2, [pc, #380]	; (800fc80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	f200 80a6 	bhi.w	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb08:	4a5e      	ldr	r2, [pc, #376]	; (800fc84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	f000 8099 	beq.w	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb10:	4a5c      	ldr	r2, [pc, #368]	; (800fc84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	f200 809e 	bhi.w	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fb1c:	f000 8091 	beq.w	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800fb24:	f200 8096 	bhi.w	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb2c:	f000 8089 	beq.w	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb34:	f200 808e 	bhi.w	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb3c:	d03e      	beq.n	800fbbc <HAL_TIM_ConfigClockSource+0x124>
 800fb3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb42:	f200 8087 	bhi.w	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb4a:	f000 8086 	beq.w	800fc5a <HAL_TIM_ConfigClockSource+0x1c2>
 800fb4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb52:	d87f      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb54:	2b70      	cmp	r3, #112	; 0x70
 800fb56:	d01a      	beq.n	800fb8e <HAL_TIM_ConfigClockSource+0xf6>
 800fb58:	2b70      	cmp	r3, #112	; 0x70
 800fb5a:	d87b      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb5c:	2b60      	cmp	r3, #96	; 0x60
 800fb5e:	d050      	beq.n	800fc02 <HAL_TIM_ConfigClockSource+0x16a>
 800fb60:	2b60      	cmp	r3, #96	; 0x60
 800fb62:	d877      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb64:	2b50      	cmp	r3, #80	; 0x50
 800fb66:	d03c      	beq.n	800fbe2 <HAL_TIM_ConfigClockSource+0x14a>
 800fb68:	2b50      	cmp	r3, #80	; 0x50
 800fb6a:	d873      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb6c:	2b40      	cmp	r3, #64	; 0x40
 800fb6e:	d058      	beq.n	800fc22 <HAL_TIM_ConfigClockSource+0x18a>
 800fb70:	2b40      	cmp	r3, #64	; 0x40
 800fb72:	d86f      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb74:	2b30      	cmp	r3, #48	; 0x30
 800fb76:	d064      	beq.n	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb78:	2b30      	cmp	r3, #48	; 0x30
 800fb7a:	d86b      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb7c:	2b20      	cmp	r3, #32
 800fb7e:	d060      	beq.n	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb80:	2b20      	cmp	r3, #32
 800fb82:	d867      	bhi.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d05c      	beq.n	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb88:	2b10      	cmp	r3, #16
 800fb8a:	d05a      	beq.n	800fc42 <HAL_TIM_ConfigClockSource+0x1aa>
 800fb8c:	e062      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6818      	ldr	r0, [r3, #0]
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	6899      	ldr	r1, [r3, #8]
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	685a      	ldr	r2, [r3, #4]
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	f000 fc8b 	bl	80104b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	689b      	ldr	r3, [r3, #8]
 800fba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fbb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	609a      	str	r2, [r3, #8]
      break;
 800fbba:	e04f      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6818      	ldr	r0, [r3, #0]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	6899      	ldr	r1, [r3, #8]
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	685a      	ldr	r2, [r3, #4]
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	f000 fc74 	bl	80104b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	689a      	ldr	r2, [r3, #8]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fbde:	609a      	str	r2, [r3, #8]
      break;
 800fbe0:	e03c      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6818      	ldr	r0, [r3, #0]
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	6859      	ldr	r1, [r3, #4]
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	f000 fbe4 	bl	80103bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2150      	movs	r1, #80	; 0x50
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f000 fc3e 	bl	801047c <TIM_ITRx_SetConfig>
      break;
 800fc00:	e02c      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6818      	ldr	r0, [r3, #0]
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	6859      	ldr	r1, [r3, #4]
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	f000 fc03 	bl	801041a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2160      	movs	r1, #96	; 0x60
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 fc2e 	bl	801047c <TIM_ITRx_SetConfig>
      break;
 800fc20:	e01c      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6818      	ldr	r0, [r3, #0]
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	6859      	ldr	r1, [r3, #4]
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	f000 fbc4 	bl	80103bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2140      	movs	r1, #64	; 0x40
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 fc1e 	bl	801047c <TIM_ITRx_SetConfig>
      break;
 800fc40:	e00c      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	4610      	mov	r0, r2
 800fc4e:	f000 fc15 	bl	801047c <TIM_ITRx_SetConfig>
      break;
 800fc52:	e003      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800fc54:	2301      	movs	r3, #1
 800fc56:	73fb      	strb	r3, [r7, #15]
      break;
 800fc58:	e000      	b.n	800fc5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800fc5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	ffceff88 	.word	0xffceff88
 800fc7c:	00100040 	.word	0x00100040
 800fc80:	00100030 	.word	0x00100030
 800fc84:	00100020 	.word	0x00100020

0800fc88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fca4:	bf00      	nop
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fcb8:	bf00      	nop
 800fcba:	370c      	adds	r7, #12
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b085      	sub	sp, #20
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4a46      	ldr	r2, [pc, #280]	; (800fdf0 <TIM_Base_SetConfig+0x12c>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d013      	beq.n	800fd04 <TIM_Base_SetConfig+0x40>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fce2:	d00f      	beq.n	800fd04 <TIM_Base_SetConfig+0x40>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	4a43      	ldr	r2, [pc, #268]	; (800fdf4 <TIM_Base_SetConfig+0x130>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d00b      	beq.n	800fd04 <TIM_Base_SetConfig+0x40>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	4a42      	ldr	r2, [pc, #264]	; (800fdf8 <TIM_Base_SetConfig+0x134>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d007      	beq.n	800fd04 <TIM_Base_SetConfig+0x40>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4a41      	ldr	r2, [pc, #260]	; (800fdfc <TIM_Base_SetConfig+0x138>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d003      	beq.n	800fd04 <TIM_Base_SetConfig+0x40>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	4a40      	ldr	r2, [pc, #256]	; (800fe00 <TIM_Base_SetConfig+0x13c>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d108      	bne.n	800fd16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4a35      	ldr	r2, [pc, #212]	; (800fdf0 <TIM_Base_SetConfig+0x12c>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d01f      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd24:	d01b      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4a32      	ldr	r2, [pc, #200]	; (800fdf4 <TIM_Base_SetConfig+0x130>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d017      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4a31      	ldr	r2, [pc, #196]	; (800fdf8 <TIM_Base_SetConfig+0x134>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d013      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4a30      	ldr	r2, [pc, #192]	; (800fdfc <TIM_Base_SetConfig+0x138>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d00f      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a2f      	ldr	r2, [pc, #188]	; (800fe00 <TIM_Base_SetConfig+0x13c>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d00b      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a2e      	ldr	r2, [pc, #184]	; (800fe04 <TIM_Base_SetConfig+0x140>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d007      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4a2d      	ldr	r2, [pc, #180]	; (800fe08 <TIM_Base_SetConfig+0x144>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d003      	beq.n	800fd5e <TIM_Base_SetConfig+0x9a>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a2c      	ldr	r2, [pc, #176]	; (800fe0c <TIM_Base_SetConfig+0x148>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d108      	bne.n	800fd70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	695b      	ldr	r3, [r3, #20]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	689a      	ldr	r2, [r3, #8]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a16      	ldr	r2, [pc, #88]	; (800fdf0 <TIM_Base_SetConfig+0x12c>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d00f      	beq.n	800fdbc <TIM_Base_SetConfig+0xf8>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4a18      	ldr	r2, [pc, #96]	; (800fe00 <TIM_Base_SetConfig+0x13c>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d00b      	beq.n	800fdbc <TIM_Base_SetConfig+0xf8>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4a17      	ldr	r2, [pc, #92]	; (800fe04 <TIM_Base_SetConfig+0x140>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d007      	beq.n	800fdbc <TIM_Base_SetConfig+0xf8>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	4a16      	ldr	r2, [pc, #88]	; (800fe08 <TIM_Base_SetConfig+0x144>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d003      	beq.n	800fdbc <TIM_Base_SetConfig+0xf8>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4a15      	ldr	r2, [pc, #84]	; (800fe0c <TIM_Base_SetConfig+0x148>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d103      	bne.n	800fdc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	691a      	ldr	r2, [r3, #16]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	f003 0301 	and.w	r3, r3, #1
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d105      	bne.n	800fde2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	691b      	ldr	r3, [r3, #16]
 800fdda:	f023 0201 	bic.w	r2, r3, #1
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	611a      	str	r2, [r3, #16]
  }
}
 800fde2:	bf00      	nop
 800fde4:	3714      	adds	r7, #20
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	40010000 	.word	0x40010000
 800fdf4:	40000400 	.word	0x40000400
 800fdf8:	40000800 	.word	0x40000800
 800fdfc:	40000c00 	.word	0x40000c00
 800fe00:	40010400 	.word	0x40010400
 800fe04:	40014000 	.word	0x40014000
 800fe08:	40014400 	.word	0x40014400
 800fe0c:	40014800 	.word	0x40014800

0800fe10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b087      	sub	sp, #28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6a1b      	ldr	r3, [r3, #32]
 800fe1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a1b      	ldr	r3, [r3, #32]
 800fe24:	f023 0201 	bic.w	r2, r3, #1
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	699b      	ldr	r3, [r3, #24]
 800fe36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4b37      	ldr	r3, [pc, #220]	; (800ff18 <TIM_OC1_SetConfig+0x108>)
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f023 0303 	bic.w	r3, r3, #3
 800fe46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f023 0302 	bic.w	r3, r3, #2
 800fe58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4a2d      	ldr	r2, [pc, #180]	; (800ff1c <TIM_OC1_SetConfig+0x10c>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d00f      	beq.n	800fe8c <TIM_OC1_SetConfig+0x7c>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a2c      	ldr	r2, [pc, #176]	; (800ff20 <TIM_OC1_SetConfig+0x110>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d00b      	beq.n	800fe8c <TIM_OC1_SetConfig+0x7c>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a2b      	ldr	r2, [pc, #172]	; (800ff24 <TIM_OC1_SetConfig+0x114>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d007      	beq.n	800fe8c <TIM_OC1_SetConfig+0x7c>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a2a      	ldr	r2, [pc, #168]	; (800ff28 <TIM_OC1_SetConfig+0x118>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d003      	beq.n	800fe8c <TIM_OC1_SetConfig+0x7c>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a29      	ldr	r2, [pc, #164]	; (800ff2c <TIM_OC1_SetConfig+0x11c>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d10c      	bne.n	800fea6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f023 0308 	bic.w	r3, r3, #8
 800fe92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	697a      	ldr	r2, [r7, #20]
 800fe9a:	4313      	orrs	r3, r2
 800fe9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	f023 0304 	bic.w	r3, r3, #4
 800fea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4a1c      	ldr	r2, [pc, #112]	; (800ff1c <TIM_OC1_SetConfig+0x10c>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d00f      	beq.n	800fece <TIM_OC1_SetConfig+0xbe>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a1b      	ldr	r2, [pc, #108]	; (800ff20 <TIM_OC1_SetConfig+0x110>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d00b      	beq.n	800fece <TIM_OC1_SetConfig+0xbe>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4a1a      	ldr	r2, [pc, #104]	; (800ff24 <TIM_OC1_SetConfig+0x114>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d007      	beq.n	800fece <TIM_OC1_SetConfig+0xbe>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	4a19      	ldr	r2, [pc, #100]	; (800ff28 <TIM_OC1_SetConfig+0x118>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d003      	beq.n	800fece <TIM_OC1_SetConfig+0xbe>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4a18      	ldr	r2, [pc, #96]	; (800ff2c <TIM_OC1_SetConfig+0x11c>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d111      	bne.n	800fef2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fedc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	695b      	ldr	r3, [r3, #20]
 800fee2:	693a      	ldr	r2, [r7, #16]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	693a      	ldr	r2, [r7, #16]
 800feee:	4313      	orrs	r3, r2
 800fef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	693a      	ldr	r2, [r7, #16]
 800fef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	685a      	ldr	r2, [r3, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	697a      	ldr	r2, [r7, #20]
 800ff0a:	621a      	str	r2, [r3, #32]
}
 800ff0c:	bf00      	nop
 800ff0e:	371c      	adds	r7, #28
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	fffeff8f 	.word	0xfffeff8f
 800ff1c:	40010000 	.word	0x40010000
 800ff20:	40010400 	.word	0x40010400
 800ff24:	40014000 	.word	0x40014000
 800ff28:	40014400 	.word	0x40014400
 800ff2c:	40014800 	.word	0x40014800

0800ff30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b087      	sub	sp, #28
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a1b      	ldr	r3, [r3, #32]
 800ff3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a1b      	ldr	r3, [r3, #32]
 800ff44:	f023 0210 	bic.w	r2, r3, #16
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	699b      	ldr	r3, [r3, #24]
 800ff56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	4b34      	ldr	r3, [pc, #208]	; (801002c <TIM_OC2_SetConfig+0xfc>)
 800ff5c:	4013      	ands	r3, r2
 800ff5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	021b      	lsls	r3, r3, #8
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	f023 0320 	bic.w	r3, r3, #32
 800ff7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	011b      	lsls	r3, r3, #4
 800ff82:	697a      	ldr	r2, [r7, #20]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4a29      	ldr	r2, [pc, #164]	; (8010030 <TIM_OC2_SetConfig+0x100>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d003      	beq.n	800ff98 <TIM_OC2_SetConfig+0x68>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4a28      	ldr	r2, [pc, #160]	; (8010034 <TIM_OC2_SetConfig+0x104>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d10d      	bne.n	800ffb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	011b      	lsls	r3, r3, #4
 800ffa6:	697a      	ldr	r2, [r7, #20]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	4a1e      	ldr	r2, [pc, #120]	; (8010030 <TIM_OC2_SetConfig+0x100>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d00f      	beq.n	800ffdc <TIM_OC2_SetConfig+0xac>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4a1d      	ldr	r2, [pc, #116]	; (8010034 <TIM_OC2_SetConfig+0x104>)
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d00b      	beq.n	800ffdc <TIM_OC2_SetConfig+0xac>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	4a1c      	ldr	r2, [pc, #112]	; (8010038 <TIM_OC2_SetConfig+0x108>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d007      	beq.n	800ffdc <TIM_OC2_SetConfig+0xac>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4a1b      	ldr	r2, [pc, #108]	; (801003c <TIM_OC2_SetConfig+0x10c>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d003      	beq.n	800ffdc <TIM_OC2_SetConfig+0xac>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	4a1a      	ldr	r2, [pc, #104]	; (8010040 <TIM_OC2_SetConfig+0x110>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	d113      	bne.n	8010004 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	4313      	orrs	r3, r2
 800fff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	693a      	ldr	r2, [r7, #16]
 8010000:	4313      	orrs	r3, r2
 8010002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	693a      	ldr	r2, [r7, #16]
 8010008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	68fa      	ldr	r2, [r7, #12]
 801000e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	697a      	ldr	r2, [r7, #20]
 801001c:	621a      	str	r2, [r3, #32]
}
 801001e:	bf00      	nop
 8010020:	371c      	adds	r7, #28
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	feff8fff 	.word	0xfeff8fff
 8010030:	40010000 	.word	0x40010000
 8010034:	40010400 	.word	0x40010400
 8010038:	40014000 	.word	0x40014000
 801003c:	40014400 	.word	0x40014400
 8010040:	40014800 	.word	0x40014800

08010044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010044:	b480      	push	{r7}
 8010046:	b087      	sub	sp, #28
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6a1b      	ldr	r3, [r3, #32]
 8010052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6a1b      	ldr	r3, [r3, #32]
 8010058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	69db      	ldr	r3, [r3, #28]
 801006a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801006c:	68fa      	ldr	r2, [r7, #12]
 801006e:	4b33      	ldr	r3, [pc, #204]	; (801013c <TIM_OC3_SetConfig+0xf8>)
 8010070:	4013      	ands	r3, r2
 8010072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f023 0303 	bic.w	r3, r3, #3
 801007a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	4313      	orrs	r3, r2
 8010084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801008c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	021b      	lsls	r3, r3, #8
 8010094:	697a      	ldr	r2, [r7, #20]
 8010096:	4313      	orrs	r3, r2
 8010098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a28      	ldr	r2, [pc, #160]	; (8010140 <TIM_OC3_SetConfig+0xfc>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d003      	beq.n	80100aa <TIM_OC3_SetConfig+0x66>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a27      	ldr	r2, [pc, #156]	; (8010144 <TIM_OC3_SetConfig+0x100>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d10d      	bne.n	80100c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	021b      	lsls	r3, r3, #8
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80100c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a1d      	ldr	r2, [pc, #116]	; (8010140 <TIM_OC3_SetConfig+0xfc>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d00f      	beq.n	80100ee <TIM_OC3_SetConfig+0xaa>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4a1c      	ldr	r2, [pc, #112]	; (8010144 <TIM_OC3_SetConfig+0x100>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d00b      	beq.n	80100ee <TIM_OC3_SetConfig+0xaa>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4a1b      	ldr	r2, [pc, #108]	; (8010148 <TIM_OC3_SetConfig+0x104>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d007      	beq.n	80100ee <TIM_OC3_SetConfig+0xaa>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a1a      	ldr	r2, [pc, #104]	; (801014c <TIM_OC3_SetConfig+0x108>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d003      	beq.n	80100ee <TIM_OC3_SetConfig+0xaa>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a19      	ldr	r2, [pc, #100]	; (8010150 <TIM_OC3_SetConfig+0x10c>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d113      	bne.n	8010116 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	695b      	ldr	r3, [r3, #20]
 8010102:	011b      	lsls	r3, r3, #4
 8010104:	693a      	ldr	r2, [r7, #16]
 8010106:	4313      	orrs	r3, r2
 8010108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	699b      	ldr	r3, [r3, #24]
 801010e:	011b      	lsls	r3, r3, #4
 8010110:	693a      	ldr	r2, [r7, #16]
 8010112:	4313      	orrs	r3, r2
 8010114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	693a      	ldr	r2, [r7, #16]
 801011a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	685a      	ldr	r2, [r3, #4]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	621a      	str	r2, [r3, #32]
}
 8010130:	bf00      	nop
 8010132:	371c      	adds	r7, #28
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	fffeff8f 	.word	0xfffeff8f
 8010140:	40010000 	.word	0x40010000
 8010144:	40010400 	.word	0x40010400
 8010148:	40014000 	.word	0x40014000
 801014c:	40014400 	.word	0x40014400
 8010150:	40014800 	.word	0x40014800

08010154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010154:	b480      	push	{r7}
 8010156:	b087      	sub	sp, #28
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a1b      	ldr	r3, [r3, #32]
 8010162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a1b      	ldr	r3, [r3, #32]
 8010168:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	69db      	ldr	r3, [r3, #28]
 801017a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	4b24      	ldr	r3, [pc, #144]	; (8010210 <TIM_OC4_SetConfig+0xbc>)
 8010180:	4013      	ands	r3, r2
 8010182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801018a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	021b      	lsls	r3, r3, #8
 8010192:	68fa      	ldr	r2, [r7, #12]
 8010194:	4313      	orrs	r3, r2
 8010196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801019e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	031b      	lsls	r3, r3, #12
 80101a6:	693a      	ldr	r2, [r7, #16]
 80101a8:	4313      	orrs	r3, r2
 80101aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4a19      	ldr	r2, [pc, #100]	; (8010214 <TIM_OC4_SetConfig+0xc0>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d00f      	beq.n	80101d4 <TIM_OC4_SetConfig+0x80>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4a18      	ldr	r2, [pc, #96]	; (8010218 <TIM_OC4_SetConfig+0xc4>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d00b      	beq.n	80101d4 <TIM_OC4_SetConfig+0x80>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4a17      	ldr	r2, [pc, #92]	; (801021c <TIM_OC4_SetConfig+0xc8>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d007      	beq.n	80101d4 <TIM_OC4_SetConfig+0x80>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4a16      	ldr	r2, [pc, #88]	; (8010220 <TIM_OC4_SetConfig+0xcc>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d003      	beq.n	80101d4 <TIM_OC4_SetConfig+0x80>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4a15      	ldr	r2, [pc, #84]	; (8010224 <TIM_OC4_SetConfig+0xd0>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d109      	bne.n	80101e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	695b      	ldr	r3, [r3, #20]
 80101e0:	019b      	lsls	r3, r3, #6
 80101e2:	697a      	ldr	r2, [r7, #20]
 80101e4:	4313      	orrs	r3, r2
 80101e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	697a      	ldr	r2, [r7, #20]
 80101ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	693a      	ldr	r2, [r7, #16]
 8010200:	621a      	str	r2, [r3, #32]
}
 8010202:	bf00      	nop
 8010204:	371c      	adds	r7, #28
 8010206:	46bd      	mov	sp, r7
 8010208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	feff8fff 	.word	0xfeff8fff
 8010214:	40010000 	.word	0x40010000
 8010218:	40010400 	.word	0x40010400
 801021c:	40014000 	.word	0x40014000
 8010220:	40014400 	.word	0x40014400
 8010224:	40014800 	.word	0x40014800

08010228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010228:	b480      	push	{r7}
 801022a:	b087      	sub	sp, #28
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6a1b      	ldr	r3, [r3, #32]
 8010236:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a1b      	ldr	r3, [r3, #32]
 801023c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801024e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4b21      	ldr	r3, [pc, #132]	; (80102d8 <TIM_OC5_SetConfig+0xb0>)
 8010254:	4013      	ands	r3, r2
 8010256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	4313      	orrs	r3, r2
 8010260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	041b      	lsls	r3, r3, #16
 8010270:	693a      	ldr	r2, [r7, #16]
 8010272:	4313      	orrs	r3, r2
 8010274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a18      	ldr	r2, [pc, #96]	; (80102dc <TIM_OC5_SetConfig+0xb4>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d00f      	beq.n	801029e <TIM_OC5_SetConfig+0x76>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a17      	ldr	r2, [pc, #92]	; (80102e0 <TIM_OC5_SetConfig+0xb8>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d00b      	beq.n	801029e <TIM_OC5_SetConfig+0x76>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a16      	ldr	r2, [pc, #88]	; (80102e4 <TIM_OC5_SetConfig+0xbc>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d007      	beq.n	801029e <TIM_OC5_SetConfig+0x76>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a15      	ldr	r2, [pc, #84]	; (80102e8 <TIM_OC5_SetConfig+0xc0>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d003      	beq.n	801029e <TIM_OC5_SetConfig+0x76>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a14      	ldr	r2, [pc, #80]	; (80102ec <TIM_OC5_SetConfig+0xc4>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d109      	bne.n	80102b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80102a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	695b      	ldr	r3, [r3, #20]
 80102aa:	021b      	lsls	r3, r3, #8
 80102ac:	697a      	ldr	r2, [r7, #20]
 80102ae:	4313      	orrs	r3, r2
 80102b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	697a      	ldr	r2, [r7, #20]
 80102b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	685a      	ldr	r2, [r3, #4]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	693a      	ldr	r2, [r7, #16]
 80102ca:	621a      	str	r2, [r3, #32]
}
 80102cc:	bf00      	nop
 80102ce:	371c      	adds	r7, #28
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr
 80102d8:	fffeff8f 	.word	0xfffeff8f
 80102dc:	40010000 	.word	0x40010000
 80102e0:	40010400 	.word	0x40010400
 80102e4:	40014000 	.word	0x40014000
 80102e8:	40014400 	.word	0x40014400
 80102ec:	40014800 	.word	0x40014800

080102f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b087      	sub	sp, #28
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6a1b      	ldr	r3, [r3, #32]
 8010304:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	4b22      	ldr	r3, [pc, #136]	; (80103a4 <TIM_OC6_SetConfig+0xb4>)
 801031c:	4013      	ands	r3, r2
 801031e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	021b      	lsls	r3, r3, #8
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	4313      	orrs	r3, r2
 801032a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	051b      	lsls	r3, r3, #20
 801033a:	693a      	ldr	r2, [r7, #16]
 801033c:	4313      	orrs	r3, r2
 801033e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	4a19      	ldr	r2, [pc, #100]	; (80103a8 <TIM_OC6_SetConfig+0xb8>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d00f      	beq.n	8010368 <TIM_OC6_SetConfig+0x78>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a18      	ldr	r2, [pc, #96]	; (80103ac <TIM_OC6_SetConfig+0xbc>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d00b      	beq.n	8010368 <TIM_OC6_SetConfig+0x78>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	4a17      	ldr	r2, [pc, #92]	; (80103b0 <TIM_OC6_SetConfig+0xc0>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d007      	beq.n	8010368 <TIM_OC6_SetConfig+0x78>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4a16      	ldr	r2, [pc, #88]	; (80103b4 <TIM_OC6_SetConfig+0xc4>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d003      	beq.n	8010368 <TIM_OC6_SetConfig+0x78>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4a15      	ldr	r2, [pc, #84]	; (80103b8 <TIM_OC6_SetConfig+0xc8>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d109      	bne.n	801037c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801036e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	695b      	ldr	r3, [r3, #20]
 8010374:	029b      	lsls	r3, r3, #10
 8010376:	697a      	ldr	r2, [r7, #20]
 8010378:	4313      	orrs	r3, r2
 801037a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	697a      	ldr	r2, [r7, #20]
 8010380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	693a      	ldr	r2, [r7, #16]
 8010394:	621a      	str	r2, [r3, #32]
}
 8010396:	bf00      	nop
 8010398:	371c      	adds	r7, #28
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	feff8fff 	.word	0xfeff8fff
 80103a8:	40010000 	.word	0x40010000
 80103ac:	40010400 	.word	0x40010400
 80103b0:	40014000 	.word	0x40014000
 80103b4:	40014400 	.word	0x40014400
 80103b8:	40014800 	.word	0x40014800

080103bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80103bc:	b480      	push	{r7}
 80103be:	b087      	sub	sp, #28
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6a1b      	ldr	r3, [r3, #32]
 80103d2:	f023 0201 	bic.w	r2, r3, #1
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	699b      	ldr	r3, [r3, #24]
 80103de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80103e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	011b      	lsls	r3, r3, #4
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	f023 030a 	bic.w	r3, r3, #10
 80103f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	4313      	orrs	r3, r2
 8010400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	693a      	ldr	r2, [r7, #16]
 8010406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	621a      	str	r2, [r3, #32]
}
 801040e:	bf00      	nop
 8010410:	371c      	adds	r7, #28
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr

0801041a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801041a:	b480      	push	{r7}
 801041c:	b087      	sub	sp, #28
 801041e:	af00      	add	r7, sp, #0
 8010420:	60f8      	str	r0, [r7, #12]
 8010422:	60b9      	str	r1, [r7, #8]
 8010424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6a1b      	ldr	r3, [r3, #32]
 801042a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6a1b      	ldr	r3, [r3, #32]
 8010430:	f023 0210 	bic.w	r2, r3, #16
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	031b      	lsls	r3, r3, #12
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	4313      	orrs	r3, r2
 801044e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	011b      	lsls	r3, r3, #4
 801045c:	697a      	ldr	r2, [r7, #20]
 801045e:	4313      	orrs	r3, r2
 8010460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	693a      	ldr	r2, [r7, #16]
 8010466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	697a      	ldr	r2, [r7, #20]
 801046c:	621a      	str	r2, [r3, #32]
}
 801046e:	bf00      	nop
 8010470:	371c      	adds	r7, #28
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr
	...

0801047c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	689b      	ldr	r3, [r3, #8]
 801048a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <TIM_ITRx_SetConfig+0x38>)
 8010490:	4013      	ands	r3, r2
 8010492:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	4313      	orrs	r3, r2
 801049a:	f043 0307 	orr.w	r3, r3, #7
 801049e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	609a      	str	r2, [r3, #8]
}
 80104a6:	bf00      	nop
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	ffcfff8f 	.word	0xffcfff8f

080104b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b087      	sub	sp, #28
 80104bc:	af00      	add	r7, sp, #0
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	607a      	str	r2, [r7, #4]
 80104c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80104d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	021a      	lsls	r2, r3, #8
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	431a      	orrs	r2, r3
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	4313      	orrs	r3, r2
 80104e0:	697a      	ldr	r2, [r7, #20]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	697a      	ldr	r2, [r7, #20]
 80104ea:	609a      	str	r2, [r3, #8]
}
 80104ec:	bf00      	nop
 80104ee:	371c      	adds	r7, #28
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b087      	sub	sp, #28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	f003 031f 	and.w	r3, r3, #31
 801050a:	2201      	movs	r2, #1
 801050c:	fa02 f303 	lsl.w	r3, r2, r3
 8010510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6a1a      	ldr	r2, [r3, #32]
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	43db      	mvns	r3, r3
 801051a:	401a      	ands	r2, r3
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6a1a      	ldr	r2, [r3, #32]
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	f003 031f 	and.w	r3, r3, #31
 801052a:	6879      	ldr	r1, [r7, #4]
 801052c:	fa01 f303 	lsl.w	r3, r1, r3
 8010530:	431a      	orrs	r2, r3
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	621a      	str	r2, [r3, #32]
}
 8010536:	bf00      	nop
 8010538:	371c      	adds	r7, #28
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr
	...

08010544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010554:	2b01      	cmp	r3, #1
 8010556:	d101      	bne.n	801055c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010558:	2302      	movs	r3, #2
 801055a:	e06d      	b.n	8010638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2202      	movs	r2, #2
 8010568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	689b      	ldr	r3, [r3, #8]
 801057a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4a30      	ldr	r2, [pc, #192]	; (8010644 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d004      	beq.n	8010590 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4a2f      	ldr	r2, [pc, #188]	; (8010648 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d108      	bne.n	80105a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010596:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	4313      	orrs	r3, r2
 80105a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	4313      	orrs	r3, r2
 80105b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a20      	ldr	r2, [pc, #128]	; (8010644 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d022      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105ce:	d01d      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a1d      	ldr	r2, [pc, #116]	; (801064c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d018      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a1c      	ldr	r2, [pc, #112]	; (8010650 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d013      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4a1a      	ldr	r2, [pc, #104]	; (8010654 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d00e      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a15      	ldr	r2, [pc, #84]	; (8010648 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d009      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a16      	ldr	r2, [pc, #88]	; (8010658 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d004      	beq.n	801060c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a15      	ldr	r2, [pc, #84]	; (801065c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d10c      	bne.n	8010626 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	4313      	orrs	r3, r2
 801061c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2201      	movs	r2, #1
 801062a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2200      	movs	r2, #0
 8010632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	40010000 	.word	0x40010000
 8010648:	40010400 	.word	0x40010400
 801064c:	40000400 	.word	0x40000400
 8010650:	40000800 	.word	0x40000800
 8010654:	40000c00 	.word	0x40000c00
 8010658:	40001800 	.word	0x40001800
 801065c:	40014000 	.word	0x40014000

08010660 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801066a:	2300      	movs	r3, #0
 801066c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010674:	2b01      	cmp	r3, #1
 8010676:	d101      	bne.n	801067c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010678:	2302      	movs	r3, #2
 801067a:	e065      	b.n	8010748 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2201      	movs	r2, #1
 8010680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	4313      	orrs	r3, r2
 8010690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	689b      	ldr	r3, [r3, #8]
 801069c:	4313      	orrs	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	4313      	orrs	r3, r2
 80106ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4313      	orrs	r3, r2
 80106ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	4313      	orrs	r3, r2
 80106d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106e2:	4313      	orrs	r3, r2
 80106e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	699b      	ldr	r3, [r3, #24]
 80106f0:	041b      	lsls	r3, r3, #16
 80106f2:	4313      	orrs	r3, r2
 80106f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a16      	ldr	r2, [pc, #88]	; (8010754 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d004      	beq.n	801070a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4a14      	ldr	r2, [pc, #80]	; (8010758 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d115      	bne.n	8010736 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010714:	051b      	lsls	r3, r3, #20
 8010716:	4313      	orrs	r3, r2
 8010718:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	69db      	ldr	r3, [r3, #28]
 8010724:	4313      	orrs	r3, r2
 8010726:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	6a1b      	ldr	r3, [r3, #32]
 8010732:	4313      	orrs	r3, r2
 8010734:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3714      	adds	r7, #20
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr
 8010754:	40010000 	.word	0x40010000
 8010758:	40010400 	.word	0x40010400

0801075c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010764:	bf00      	nop
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010778:	bf00      	nop
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801078c:	bf00      	nop
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d101      	bne.n	80107aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107a6:	2301      	movs	r3, #1
 80107a8:	e042      	b.n	8010830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d106      	bne.n	80107c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7f3 f837 	bl	8003830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2224      	movs	r2, #36	; 0x24
 80107c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	681a      	ldr	r2, [r3, #0]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f022 0201 	bic.w	r2, r2, #1
 80107d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d002      	beq.n	80107e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f001 fbc2 	bl	8011f6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f000 fe57 	bl	801149c <UART_SetConfig>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d101      	bne.n	80107f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80107f4:	2301      	movs	r3, #1
 80107f6:	e01b      	b.n	8010830 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	685a      	ldr	r2, [r3, #4]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	689a      	ldr	r2, [r3, #8]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f042 0201 	orr.w	r2, r2, #1
 8010826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 fc41 	bl	80120b0 <UART_CheckIdleState>
 801082e:	4603      	mov	r3, r0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	; 0x28
 801083c:	af02      	add	r7, sp, #8
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	603b      	str	r3, [r7, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801084e:	2b20      	cmp	r3, #32
 8010850:	d17b      	bne.n	801094a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d002      	beq.n	801085e <HAL_UART_Transmit+0x26>
 8010858:	88fb      	ldrh	r3, [r7, #6]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801085e:	2301      	movs	r3, #1
 8010860:	e074      	b.n	801094c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2221      	movs	r2, #33	; 0x21
 801086e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010872:	f7f3 fb5b 	bl	8003f2c <HAL_GetTick>
 8010876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	88fa      	ldrh	r2, [r7, #6]
 801087c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	88fa      	ldrh	r2, [r7, #6]
 8010884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010890:	d108      	bne.n	80108a4 <HAL_UART_Transmit+0x6c>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	691b      	ldr	r3, [r3, #16]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d104      	bne.n	80108a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	61bb      	str	r3, [r7, #24]
 80108a2:	e003      	b.n	80108ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80108a8:	2300      	movs	r3, #0
 80108aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80108ac:	e030      	b.n	8010910 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	2200      	movs	r2, #0
 80108b6:	2180      	movs	r1, #128	; 0x80
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	f001 fca3 	bl	8012204 <UART_WaitOnFlagUntilTimeout>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d005      	beq.n	80108d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2220      	movs	r2, #32
 80108c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80108cc:	2303      	movs	r3, #3
 80108ce:	e03d      	b.n	801094c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d10b      	bne.n	80108ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	881b      	ldrh	r3, [r3, #0]
 80108da:	461a      	mov	r2, r3
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80108e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	3302      	adds	r3, #2
 80108ea:	61bb      	str	r3, [r7, #24]
 80108ec:	e007      	b.n	80108fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	781a      	ldrb	r2, [r3, #0]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	3301      	adds	r3, #1
 80108fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010904:	b29b      	uxth	r3, r3
 8010906:	3b01      	subs	r3, #1
 8010908:	b29a      	uxth	r2, r3
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010916:	b29b      	uxth	r3, r3
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1c8      	bne.n	80108ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	9300      	str	r3, [sp, #0]
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	2200      	movs	r2, #0
 8010924:	2140      	movs	r1, #64	; 0x40
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f001 fc6c 	bl	8012204 <UART_WaitOnFlagUntilTimeout>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d005      	beq.n	801093e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2220      	movs	r2, #32
 8010936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801093a:	2303      	movs	r3, #3
 801093c:	e006      	b.n	801094c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2220      	movs	r2, #32
 8010942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010946:	2300      	movs	r3, #0
 8010948:	e000      	b.n	801094c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801094a:	2302      	movs	r3, #2
  }
}
 801094c:	4618      	mov	r0, r3
 801094e:	3720      	adds	r7, #32
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b08a      	sub	sp, #40	; 0x28
 8010958:	af02      	add	r7, sp, #8
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	603b      	str	r3, [r7, #0]
 8010960:	4613      	mov	r3, r2
 8010962:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801096a:	2b20      	cmp	r3, #32
 801096c:	f040 80b5 	bne.w	8010ada <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d002      	beq.n	801097c <HAL_UART_Receive+0x28>
 8010976:	88fb      	ldrh	r3, [r7, #6]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d101      	bne.n	8010980 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801097c:	2301      	movs	r3, #1
 801097e:	e0ad      	b.n	8010adc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2200      	movs	r2, #0
 8010984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2222      	movs	r2, #34	; 0x22
 801098c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2200      	movs	r2, #0
 8010994:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010996:	f7f3 fac9 	bl	8003f2c <HAL_GetTick>
 801099a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	88fa      	ldrh	r2, [r7, #6]
 80109a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	88fa      	ldrh	r2, [r7, #6]
 80109a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109b4:	d10e      	bne.n	80109d4 <HAL_UART_Receive+0x80>
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	691b      	ldr	r3, [r3, #16]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <HAL_UART_Receive+0x76>
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80109c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80109c8:	e02d      	b.n	8010a26 <HAL_UART_Receive+0xd2>
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	22ff      	movs	r2, #255	; 0xff
 80109ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80109d2:	e028      	b.n	8010a26 <HAL_UART_Receive+0xd2>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d10d      	bne.n	80109f8 <HAL_UART_Receive+0xa4>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d104      	bne.n	80109ee <HAL_UART_Receive+0x9a>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	22ff      	movs	r2, #255	; 0xff
 80109e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80109ec:	e01b      	b.n	8010a26 <HAL_UART_Receive+0xd2>
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	227f      	movs	r2, #127	; 0x7f
 80109f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80109f6:	e016      	b.n	8010a26 <HAL_UART_Receive+0xd2>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a00:	d10d      	bne.n	8010a1e <HAL_UART_Receive+0xca>
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d104      	bne.n	8010a14 <HAL_UART_Receive+0xc0>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	227f      	movs	r2, #127	; 0x7f
 8010a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a12:	e008      	b.n	8010a26 <HAL_UART_Receive+0xd2>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	223f      	movs	r2, #63	; 0x3f
 8010a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010a1c:	e003      	b.n	8010a26 <HAL_UART_Receive+0xd2>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	689b      	ldr	r3, [r3, #8]
 8010a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a36:	d108      	bne.n	8010a4a <HAL_UART_Receive+0xf6>
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	691b      	ldr	r3, [r3, #16]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d104      	bne.n	8010a4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010a40:	2300      	movs	r3, #0
 8010a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	61bb      	str	r3, [r7, #24]
 8010a48:	e003      	b.n	8010a52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010a52:	e036      	b.n	8010ac2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	2120      	movs	r1, #32
 8010a5e:	68f8      	ldr	r0, [r7, #12]
 8010a60:	f001 fbd0 	bl	8012204 <UART_WaitOnFlagUntilTimeout>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d005      	beq.n	8010a76 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010a72:	2303      	movs	r3, #3
 8010a74:	e032      	b.n	8010adc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10c      	bne.n	8010a96 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	8a7b      	ldrh	r3, [r7, #18]
 8010a86:	4013      	ands	r3, r2
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	3302      	adds	r3, #2
 8010a92:	61bb      	str	r3, [r7, #24]
 8010a94:	e00c      	b.n	8010ab0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	8a7b      	ldrh	r3, [r7, #18]
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	4013      	ands	r3, r2
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	3301      	adds	r3, #1
 8010aae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	b29a      	uxth	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1c2      	bne.n	8010a54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2220      	movs	r2, #32
 8010ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e000      	b.n	8010adc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010ada:	2302      	movs	r3, #2
  }
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b08a      	sub	sp, #40	; 0x28
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	4613      	mov	r3, r2
 8010af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010af8:	2b20      	cmp	r3, #32
 8010afa:	d137      	bne.n	8010b6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d002      	beq.n	8010b08 <HAL_UART_Receive_IT+0x24>
 8010b02:	88fb      	ldrh	r3, [r7, #6]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d101      	bne.n	8010b0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e030      	b.n	8010b6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a18      	ldr	r2, [pc, #96]	; (8010b78 <HAL_UART_Receive_IT+0x94>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d01f      	beq.n	8010b5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d018      	beq.n	8010b5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	e853 3f00 	ldrex	r3, [r3]
 8010b36:	613b      	str	r3, [r7, #16]
   return(result);
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	461a      	mov	r2, r3
 8010b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b48:	623b      	str	r3, [r7, #32]
 8010b4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b4c:	69f9      	ldr	r1, [r7, #28]
 8010b4e:	6a3a      	ldr	r2, [r7, #32]
 8010b50:	e841 2300 	strex	r3, r2, [r1]
 8010b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1e6      	bne.n	8010b2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010b5c:	88fb      	ldrh	r3, [r7, #6]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	68b9      	ldr	r1, [r7, #8]
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f001 fbbc 	bl	80122e0 <UART_Start_Receive_IT>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	e000      	b.n	8010b6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010b6c:	2302      	movs	r3, #2
  }
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3728      	adds	r7, #40	; 0x28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	58000c00 	.word	0x58000c00

08010b7c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b09a      	sub	sp, #104	; 0x68
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b8c:	e853 3f00 	ldrex	r3, [r3]
 8010b90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b98:	667b      	str	r3, [r7, #100]	; 0x64
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8010ba4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010baa:	e841 2300 	strex	r3, r2, [r1]
 8010bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1e6      	bne.n	8010b84 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	3308      	adds	r3, #8
 8010bbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc0:	e853 3f00 	ldrex	r3, [r3]
 8010bc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bc8:	4b46      	ldr	r3, [pc, #280]	; (8010ce4 <HAL_UART_AbortReceive+0x168>)
 8010bca:	4013      	ands	r3, r2
 8010bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3308      	adds	r3, #8
 8010bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bd6:	643a      	str	r2, [r7, #64]	; 0x40
 8010bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010bde:	e841 2300 	strex	r3, r2, [r1]
 8010be2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1e5      	bne.n	8010bb6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d118      	bne.n	8010c24 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf8:	6a3b      	ldr	r3, [r7, #32]
 8010bfa:	e853 3f00 	ldrex	r3, [r3]
 8010bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	f023 0310 	bic.w	r3, r3, #16
 8010c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c12:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c18:	e841 2300 	strex	r3, r2, [r1]
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d1e6      	bne.n	8010bf2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	689b      	ldr	r3, [r3, #8]
 8010c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c2e:	2b40      	cmp	r3, #64	; 0x40
 8010c30:	d13b      	bne.n	8010caa <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	3308      	adds	r3, #8
 8010c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	e853 3f00 	ldrex	r3, [r3]
 8010c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	3308      	adds	r3, #8
 8010c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c52:	61ba      	str	r2, [r7, #24]
 8010c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c56:	6979      	ldr	r1, [r7, #20]
 8010c58:	69ba      	ldr	r2, [r7, #24]
 8010c5a:	e841 2300 	strex	r3, r2, [r1]
 8010c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1e5      	bne.n	8010c32 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d01c      	beq.n	8010caa <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c76:	2200      	movs	r2, #0
 8010c78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f6 f841 	bl	8006d08 <HAL_DMA_Abort>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00e      	beq.n	8010caa <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7f7 fcc6 	bl	8008624 <HAL_DMA_GetError>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b20      	cmp	r3, #32
 8010c9c:	d105      	bne.n	8010caa <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2210      	movs	r2, #16
 8010ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	e017      	b.n	8010cda <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	220f      	movs	r2, #15
 8010cb8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	699a      	ldr	r2, [r3, #24]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f042 0208 	orr.w	r2, r2, #8
 8010cc8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2220      	movs	r2, #32
 8010cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010cd8:	2300      	movs	r3, #0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3768      	adds	r7, #104	; 0x68
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	effffffe 	.word	0xeffffffe

08010ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b0ba      	sub	sp, #232	; 0xe8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	69db      	ldr	r3, [r3, #28]
 8010cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010d0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010d12:	f640 030f 	movw	r3, #2063	; 0x80f
 8010d16:	4013      	ands	r3, r2
 8010d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d11b      	bne.n	8010d5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d28:	f003 0320 	and.w	r3, r3, #32
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d015      	beq.n	8010d5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d34:	f003 0320 	and.w	r3, r3, #32
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d105      	bne.n	8010d48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d009      	beq.n	8010d5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	f000 8377 	beq.w	8011440 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	4798      	blx	r3
      }
      return;
 8010d5a:	e371      	b.n	8011440 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 8123 	beq.w	8010fac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010d66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010d6a:	4b8d      	ldr	r3, [pc, #564]	; (8010fa0 <HAL_UART_IRQHandler+0x2b8>)
 8010d6c:	4013      	ands	r3, r2
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010d76:	4b8b      	ldr	r3, [pc, #556]	; (8010fa4 <HAL_UART_IRQHandler+0x2bc>)
 8010d78:	4013      	ands	r3, r2
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f000 8116 	beq.w	8010fac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d84:	f003 0301 	and.w	r3, r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d011      	beq.n	8010db0 <HAL_UART_IRQHandler+0xc8>
 8010d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00b      	beq.n	8010db0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010da6:	f043 0201 	orr.w	r2, r3, #1
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010db4:	f003 0302 	and.w	r3, r3, #2
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d011      	beq.n	8010de0 <HAL_UART_IRQHandler+0xf8>
 8010dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dc0:	f003 0301 	and.w	r3, r3, #1
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00b      	beq.n	8010de0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2202      	movs	r2, #2
 8010dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dd6:	f043 0204 	orr.w	r2, r3, #4
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010de4:	f003 0304 	and.w	r3, r3, #4
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d011      	beq.n	8010e10 <HAL_UART_IRQHandler+0x128>
 8010dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010df0:	f003 0301 	and.w	r3, r3, #1
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d00b      	beq.n	8010e10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2204      	movs	r2, #4
 8010dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e06:	f043 0202 	orr.w	r2, r3, #2
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e14:	f003 0308 	and.w	r3, r3, #8
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d017      	beq.n	8010e4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e20:	f003 0320 	and.w	r3, r3, #32
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d105      	bne.n	8010e34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010e28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010e2c:	4b5c      	ldr	r3, [pc, #368]	; (8010fa0 <HAL_UART_IRQHandler+0x2b8>)
 8010e2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d00b      	beq.n	8010e4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2208      	movs	r2, #8
 8010e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e42:	f043 0208 	orr.w	r2, r3, #8
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d012      	beq.n	8010e7e <HAL_UART_IRQHandler+0x196>
 8010e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00c      	beq.n	8010e7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e74:	f043 0220 	orr.w	r2, r3, #32
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f000 82dd 	beq.w	8011444 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e8e:	f003 0320 	and.w	r3, r3, #32
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d013      	beq.n	8010ebe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e9a:	f003 0320 	and.w	r3, r3, #32
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d105      	bne.n	8010eae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d007      	beq.n	8010ebe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d003      	beq.n	8010ebe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	689b      	ldr	r3, [r3, #8]
 8010ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ed2:	2b40      	cmp	r3, #64	; 0x40
 8010ed4:	d005      	beq.n	8010ee2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d054      	beq.n	8010f8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f001 fb1e 	bl	8012524 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef2:	2b40      	cmp	r3, #64	; 0x40
 8010ef4:	d146      	bne.n	8010f84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	3308      	adds	r3, #8
 8010efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f04:	e853 3f00 	ldrex	r3, [r3]
 8010f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	3308      	adds	r3, #8
 8010f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010f32:	e841 2300 	strex	r3, r2, [r1]
 8010f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d1d9      	bne.n	8010ef6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d017      	beq.n	8010f7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f52:	4a15      	ldr	r2, [pc, #84]	; (8010fa8 <HAL_UART_IRQHandler+0x2c0>)
 8010f54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7f6 f9f1 	bl	8007344 <HAL_DMA_Abort_IT>
 8010f62:	4603      	mov	r3, r0
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d019      	beq.n	8010f9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010f76:	4610      	mov	r0, r2
 8010f78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f7a:	e00f      	b.n	8010f9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 fa77 	bl	8011470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f82:	e00b      	b.n	8010f9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fa73 	bl	8011470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f8a:	e007      	b.n	8010f9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 fa6f 	bl	8011470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010f9a:	e253      	b.n	8011444 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f9c:	bf00      	nop
    return;
 8010f9e:	e251      	b.n	8011444 <HAL_UART_IRQHandler+0x75c>
 8010fa0:	10000001 	.word	0x10000001
 8010fa4:	04000120 	.word	0x04000120
 8010fa8:	080125f1 	.word	0x080125f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	f040 81e7 	bne.w	8011384 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fba:	f003 0310 	and.w	r3, r3, #16
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f000 81e0 	beq.w	8011384 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fc8:	f003 0310 	and.w	r3, r3, #16
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f000 81d9 	beq.w	8011384 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2210      	movs	r2, #16
 8010fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	689b      	ldr	r3, [r3, #8]
 8010fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fe4:	2b40      	cmp	r3, #64	; 0x40
 8010fe6:	f040 8151 	bne.w	801128c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4a96      	ldr	r2, [pc, #600]	; (801124c <HAL_UART_IRQHandler+0x564>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d068      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4a93      	ldr	r2, [pc, #588]	; (8011250 <HAL_UART_IRQHandler+0x568>)
 8011002:	4293      	cmp	r3, r2
 8011004:	d061      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	4a91      	ldr	r2, [pc, #580]	; (8011254 <HAL_UART_IRQHandler+0x56c>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d05a      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4a8e      	ldr	r2, [pc, #568]	; (8011258 <HAL_UART_IRQHandler+0x570>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d053      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a8c      	ldr	r2, [pc, #560]	; (801125c <HAL_UART_IRQHandler+0x574>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d04c      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a89      	ldr	r2, [pc, #548]	; (8011260 <HAL_UART_IRQHandler+0x578>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d045      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a87      	ldr	r2, [pc, #540]	; (8011264 <HAL_UART_IRQHandler+0x57c>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d03e      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a84      	ldr	r2, [pc, #528]	; (8011268 <HAL_UART_IRQHandler+0x580>)
 8011056:	4293      	cmp	r3, r2
 8011058:	d037      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4a82      	ldr	r2, [pc, #520]	; (801126c <HAL_UART_IRQHandler+0x584>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d030      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a7f      	ldr	r2, [pc, #508]	; (8011270 <HAL_UART_IRQHandler+0x588>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d029      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	4a7d      	ldr	r2, [pc, #500]	; (8011274 <HAL_UART_IRQHandler+0x58c>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d022      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	4a7a      	ldr	r2, [pc, #488]	; (8011278 <HAL_UART_IRQHandler+0x590>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d01b      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4a78      	ldr	r2, [pc, #480]	; (801127c <HAL_UART_IRQHandler+0x594>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d014      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4a75      	ldr	r2, [pc, #468]	; (8011280 <HAL_UART_IRQHandler+0x598>)
 80110aa:	4293      	cmp	r3, r2
 80110ac:	d00d      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4a73      	ldr	r2, [pc, #460]	; (8011284 <HAL_UART_IRQHandler+0x59c>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d006      	beq.n	80110ca <HAL_UART_IRQHandler+0x3e2>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a70      	ldr	r2, [pc, #448]	; (8011288 <HAL_UART_IRQHandler+0x5a0>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d106      	bne.n	80110d8 <HAL_UART_IRQHandler+0x3f0>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	e005      	b.n	80110e4 <HAL_UART_IRQHandler+0x3fc>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80110e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f000 81ab 	beq.w	8011448 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80110f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80110fc:	429a      	cmp	r2, r3
 80110fe:	f080 81a3 	bcs.w	8011448 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011108:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011112:	69db      	ldr	r3, [r3, #28]
 8011114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011118:	f000 8087 	beq.w	801122a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011128:	e853 3f00 	ldrex	r3, [r3]
 801112c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	461a      	mov	r2, r3
 8011142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801114a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011156:	e841 2300 	strex	r3, r2, [r1]
 801115a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801115e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1da      	bne.n	801111c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	3308      	adds	r3, #8
 801116c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801116e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011170:	e853 3f00 	ldrex	r3, [r3]
 8011174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011178:	f023 0301 	bic.w	r3, r3, #1
 801117c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	3308      	adds	r3, #8
 8011186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801118a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801118e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011196:	e841 2300 	strex	r3, r2, [r1]
 801119a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801119c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1e1      	bne.n	8011166 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	3308      	adds	r3, #8
 80111a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ac:	e853 3f00 	ldrex	r3, [r3]
 80111b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80111b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	3308      	adds	r3, #8
 80111c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80111c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80111c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80111cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80111ce:	e841 2300 	strex	r3, r2, [r1]
 80111d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80111d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1e3      	bne.n	80111a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2220      	movs	r2, #32
 80111de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111f0:	e853 3f00 	ldrex	r3, [r3]
 80111f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80111f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111f8:	f023 0310 	bic.w	r3, r3, #16
 80111fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	461a      	mov	r2, r3
 8011206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801120a:	65bb      	str	r3, [r7, #88]	; 0x58
 801120c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011212:	e841 2300 	strex	r3, r2, [r1]
 8011216:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1e4      	bne.n	80111e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011224:	4618      	mov	r0, r3
 8011226:	f7f5 fd6f 	bl	8006d08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2202      	movs	r2, #2
 801122e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801123c:	b29b      	uxth	r3, r3
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	b29b      	uxth	r3, r3
 8011242:	4619      	mov	r1, r3
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f000 f91d 	bl	8011484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801124a:	e0fd      	b.n	8011448 <HAL_UART_IRQHandler+0x760>
 801124c:	40020010 	.word	0x40020010
 8011250:	40020028 	.word	0x40020028
 8011254:	40020040 	.word	0x40020040
 8011258:	40020058 	.word	0x40020058
 801125c:	40020070 	.word	0x40020070
 8011260:	40020088 	.word	0x40020088
 8011264:	400200a0 	.word	0x400200a0
 8011268:	400200b8 	.word	0x400200b8
 801126c:	40020410 	.word	0x40020410
 8011270:	40020428 	.word	0x40020428
 8011274:	40020440 	.word	0x40020440
 8011278:	40020458 	.word	0x40020458
 801127c:	40020470 	.word	0x40020470
 8011280:	40020488 	.word	0x40020488
 8011284:	400204a0 	.word	0x400204a0
 8011288:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011298:	b29b      	uxth	r3, r3
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 80cf 	beq.w	801144c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80112ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f000 80ca 	beq.w	801144c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c0:	e853 3f00 	ldrex	r3, [r3]
 80112c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80112c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80112cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	461a      	mov	r2, r3
 80112d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80112da:	647b      	str	r3, [r7, #68]	; 0x44
 80112dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80112e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112e2:	e841 2300 	strex	r3, r2, [r1]
 80112e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80112e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1e4      	bne.n	80112b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	3308      	adds	r3, #8
 80112f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f8:	e853 3f00 	ldrex	r3, [r3]
 80112fc:	623b      	str	r3, [r7, #32]
   return(result);
 80112fe:	6a3a      	ldr	r2, [r7, #32]
 8011300:	4b55      	ldr	r3, [pc, #340]	; (8011458 <HAL_UART_IRQHandler+0x770>)
 8011302:	4013      	ands	r3, r2
 8011304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	3308      	adds	r3, #8
 801130e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011312:	633a      	str	r2, [r7, #48]	; 0x30
 8011314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801131a:	e841 2300 	strex	r3, r2, [r1]
 801131e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011322:	2b00      	cmp	r3, #0
 8011324:	d1e3      	bne.n	80112ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2220      	movs	r2, #32
 801132a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2200      	movs	r2, #0
 8011332:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	e853 3f00 	ldrex	r3, [r3]
 8011346:	60fb      	str	r3, [r7, #12]
   return(result);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f023 0310 	bic.w	r3, r3, #16
 801134e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	461a      	mov	r2, r3
 8011358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801135c:	61fb      	str	r3, [r7, #28]
 801135e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011360:	69b9      	ldr	r1, [r7, #24]
 8011362:	69fa      	ldr	r2, [r7, #28]
 8011364:	e841 2300 	strex	r3, r2, [r1]
 8011368:	617b      	str	r3, [r7, #20]
   return(result);
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1e4      	bne.n	801133a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2202      	movs	r2, #2
 8011374:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801137a:	4619      	mov	r1, r3
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f000 f881 	bl	8011484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011382:	e063      	b.n	801144c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801138c:	2b00      	cmp	r3, #0
 801138e:	d00e      	beq.n	80113ae <HAL_UART_IRQHandler+0x6c6>
 8011390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011398:	2b00      	cmp	r3, #0
 801139a:	d008      	beq.n	80113ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80113a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f001 fe80 	bl	80130ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80113ac:	e051      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80113ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d014      	beq.n	80113e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80113ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d105      	bne.n	80113d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80113c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d008      	beq.n	80113e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d03a      	beq.n	8011450 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	4798      	blx	r3
    }
    return;
 80113e2:	e035      	b.n	8011450 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80113e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d009      	beq.n	8011404 <HAL_UART_IRQHandler+0x71c>
 80113f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d003      	beq.n	8011404 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f001 f90d 	bl	801261c <UART_EndTransmit_IT>
    return;
 8011402:	e026      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801140c:	2b00      	cmp	r3, #0
 801140e:	d009      	beq.n	8011424 <HAL_UART_IRQHandler+0x73c>
 8011410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011418:	2b00      	cmp	r3, #0
 801141a:	d003      	beq.n	8011424 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f001 fe59 	bl	80130d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011422:	e016      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801142c:	2b00      	cmp	r3, #0
 801142e:	d010      	beq.n	8011452 <HAL_UART_IRQHandler+0x76a>
 8011430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011434:	2b00      	cmp	r3, #0
 8011436:	da0c      	bge.n	8011452 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f001 fe41 	bl	80130c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801143e:	e008      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
      return;
 8011440:	bf00      	nop
 8011442:	e006      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
    return;
 8011444:	bf00      	nop
 8011446:	e004      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
      return;
 8011448:	bf00      	nop
 801144a:	e002      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
      return;
 801144c:	bf00      	nop
 801144e:	e000      	b.n	8011452 <HAL_UART_IRQHandler+0x76a>
    return;
 8011450:	bf00      	nop
  }
}
 8011452:	37e8      	adds	r7, #232	; 0xe8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	effffffe 	.word	0xeffffffe

0801145c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801145c:	b480      	push	{r7}
 801145e:	b083      	sub	sp, #12
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011478:	bf00      	nop
 801147a:	370c      	adds	r7, #12
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	460b      	mov	r3, r1
 801148e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011490:	bf00      	nop
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801149c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80114a0:	b092      	sub	sp, #72	; 0x48
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80114a6:	2300      	movs	r3, #0
 80114a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	689a      	ldr	r2, [r3, #8]
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	691b      	ldr	r3, [r3, #16]
 80114b4:	431a      	orrs	r2, r3
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	695b      	ldr	r3, [r3, #20]
 80114ba:	431a      	orrs	r2, r3
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	69db      	ldr	r3, [r3, #28]
 80114c0:	4313      	orrs	r3, r2
 80114c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	4bbe      	ldr	r3, [pc, #760]	; (80117c4 <UART_SetConfig+0x328>)
 80114cc:	4013      	ands	r3, r2
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	6812      	ldr	r2, [r2, #0]
 80114d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114d4:	430b      	orrs	r3, r1
 80114d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	68da      	ldr	r2, [r3, #12]
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	430a      	orrs	r2, r1
 80114ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	699b      	ldr	r3, [r3, #24]
 80114f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4ab3      	ldr	r2, [pc, #716]	; (80117c8 <UART_SetConfig+0x32c>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d004      	beq.n	8011508 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011504:	4313      	orrs	r3, r2
 8011506:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	689a      	ldr	r2, [r3, #8]
 801150e:	4baf      	ldr	r3, [pc, #700]	; (80117cc <UART_SetConfig+0x330>)
 8011510:	4013      	ands	r3, r2
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	6812      	ldr	r2, [r2, #0]
 8011516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011518:	430b      	orrs	r3, r1
 801151a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011522:	f023 010f 	bic.w	r1, r3, #15
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	430a      	orrs	r2, r1
 8011530:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4aa6      	ldr	r2, [pc, #664]	; (80117d0 <UART_SetConfig+0x334>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d177      	bne.n	801162c <UART_SetConfig+0x190>
 801153c:	4ba5      	ldr	r3, [pc, #660]	; (80117d4 <UART_SetConfig+0x338>)
 801153e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011544:	2b28      	cmp	r3, #40	; 0x28
 8011546:	d86d      	bhi.n	8011624 <UART_SetConfig+0x188>
 8011548:	a201      	add	r2, pc, #4	; (adr r2, 8011550 <UART_SetConfig+0xb4>)
 801154a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801154e:	bf00      	nop
 8011550:	080115f5 	.word	0x080115f5
 8011554:	08011625 	.word	0x08011625
 8011558:	08011625 	.word	0x08011625
 801155c:	08011625 	.word	0x08011625
 8011560:	08011625 	.word	0x08011625
 8011564:	08011625 	.word	0x08011625
 8011568:	08011625 	.word	0x08011625
 801156c:	08011625 	.word	0x08011625
 8011570:	080115fd 	.word	0x080115fd
 8011574:	08011625 	.word	0x08011625
 8011578:	08011625 	.word	0x08011625
 801157c:	08011625 	.word	0x08011625
 8011580:	08011625 	.word	0x08011625
 8011584:	08011625 	.word	0x08011625
 8011588:	08011625 	.word	0x08011625
 801158c:	08011625 	.word	0x08011625
 8011590:	08011605 	.word	0x08011605
 8011594:	08011625 	.word	0x08011625
 8011598:	08011625 	.word	0x08011625
 801159c:	08011625 	.word	0x08011625
 80115a0:	08011625 	.word	0x08011625
 80115a4:	08011625 	.word	0x08011625
 80115a8:	08011625 	.word	0x08011625
 80115ac:	08011625 	.word	0x08011625
 80115b0:	0801160d 	.word	0x0801160d
 80115b4:	08011625 	.word	0x08011625
 80115b8:	08011625 	.word	0x08011625
 80115bc:	08011625 	.word	0x08011625
 80115c0:	08011625 	.word	0x08011625
 80115c4:	08011625 	.word	0x08011625
 80115c8:	08011625 	.word	0x08011625
 80115cc:	08011625 	.word	0x08011625
 80115d0:	08011615 	.word	0x08011615
 80115d4:	08011625 	.word	0x08011625
 80115d8:	08011625 	.word	0x08011625
 80115dc:	08011625 	.word	0x08011625
 80115e0:	08011625 	.word	0x08011625
 80115e4:	08011625 	.word	0x08011625
 80115e8:	08011625 	.word	0x08011625
 80115ec:	08011625 	.word	0x08011625
 80115f0:	0801161d 	.word	0x0801161d
 80115f4:	2301      	movs	r3, #1
 80115f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fa:	e222      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80115fc:	2304      	movs	r3, #4
 80115fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011602:	e21e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011604:	2308      	movs	r3, #8
 8011606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160a:	e21a      	b.n	8011a42 <UART_SetConfig+0x5a6>
 801160c:	2310      	movs	r3, #16
 801160e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011612:	e216      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011614:	2320      	movs	r3, #32
 8011616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801161a:	e212      	b.n	8011a42 <UART_SetConfig+0x5a6>
 801161c:	2340      	movs	r3, #64	; 0x40
 801161e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011622:	e20e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011624:	2380      	movs	r3, #128	; 0x80
 8011626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162a:	e20a      	b.n	8011a42 <UART_SetConfig+0x5a6>
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	4a69      	ldr	r2, [pc, #420]	; (80117d8 <UART_SetConfig+0x33c>)
 8011632:	4293      	cmp	r3, r2
 8011634:	d130      	bne.n	8011698 <UART_SetConfig+0x1fc>
 8011636:	4b67      	ldr	r3, [pc, #412]	; (80117d4 <UART_SetConfig+0x338>)
 8011638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801163a:	f003 0307 	and.w	r3, r3, #7
 801163e:	2b05      	cmp	r3, #5
 8011640:	d826      	bhi.n	8011690 <UART_SetConfig+0x1f4>
 8011642:	a201      	add	r2, pc, #4	; (adr r2, 8011648 <UART_SetConfig+0x1ac>)
 8011644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011648:	08011661 	.word	0x08011661
 801164c:	08011669 	.word	0x08011669
 8011650:	08011671 	.word	0x08011671
 8011654:	08011679 	.word	0x08011679
 8011658:	08011681 	.word	0x08011681
 801165c:	08011689 	.word	0x08011689
 8011660:	2300      	movs	r3, #0
 8011662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011666:	e1ec      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011668:	2304      	movs	r3, #4
 801166a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166e:	e1e8      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011670:	2308      	movs	r3, #8
 8011672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011676:	e1e4      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011678:	2310      	movs	r3, #16
 801167a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801167e:	e1e0      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011680:	2320      	movs	r3, #32
 8011682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011686:	e1dc      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011688:	2340      	movs	r3, #64	; 0x40
 801168a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168e:	e1d8      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011690:	2380      	movs	r3, #128	; 0x80
 8011692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011696:	e1d4      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	4a4f      	ldr	r2, [pc, #316]	; (80117dc <UART_SetConfig+0x340>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d130      	bne.n	8011704 <UART_SetConfig+0x268>
 80116a2:	4b4c      	ldr	r3, [pc, #304]	; (80117d4 <UART_SetConfig+0x338>)
 80116a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116a6:	f003 0307 	and.w	r3, r3, #7
 80116aa:	2b05      	cmp	r3, #5
 80116ac:	d826      	bhi.n	80116fc <UART_SetConfig+0x260>
 80116ae:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <UART_SetConfig+0x218>)
 80116b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b4:	080116cd 	.word	0x080116cd
 80116b8:	080116d5 	.word	0x080116d5
 80116bc:	080116dd 	.word	0x080116dd
 80116c0:	080116e5 	.word	0x080116e5
 80116c4:	080116ed 	.word	0x080116ed
 80116c8:	080116f5 	.word	0x080116f5
 80116cc:	2300      	movs	r3, #0
 80116ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116d2:	e1b6      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80116d4:	2304      	movs	r3, #4
 80116d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116da:	e1b2      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80116dc:	2308      	movs	r3, #8
 80116de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116e2:	e1ae      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80116e4:	2310      	movs	r3, #16
 80116e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ea:	e1aa      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80116ec:	2320      	movs	r3, #32
 80116ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116f2:	e1a6      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80116f4:	2340      	movs	r3, #64	; 0x40
 80116f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fa:	e1a2      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80116fc:	2380      	movs	r3, #128	; 0x80
 80116fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011702:	e19e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4a35      	ldr	r2, [pc, #212]	; (80117e0 <UART_SetConfig+0x344>)
 801170a:	4293      	cmp	r3, r2
 801170c:	d130      	bne.n	8011770 <UART_SetConfig+0x2d4>
 801170e:	4b31      	ldr	r3, [pc, #196]	; (80117d4 <UART_SetConfig+0x338>)
 8011710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011712:	f003 0307 	and.w	r3, r3, #7
 8011716:	2b05      	cmp	r3, #5
 8011718:	d826      	bhi.n	8011768 <UART_SetConfig+0x2cc>
 801171a:	a201      	add	r2, pc, #4	; (adr r2, 8011720 <UART_SetConfig+0x284>)
 801171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011720:	08011739 	.word	0x08011739
 8011724:	08011741 	.word	0x08011741
 8011728:	08011749 	.word	0x08011749
 801172c:	08011751 	.word	0x08011751
 8011730:	08011759 	.word	0x08011759
 8011734:	08011761 	.word	0x08011761
 8011738:	2300      	movs	r3, #0
 801173a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801173e:	e180      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011740:	2304      	movs	r3, #4
 8011742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011746:	e17c      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011748:	2308      	movs	r3, #8
 801174a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801174e:	e178      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011750:	2310      	movs	r3, #16
 8011752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011756:	e174      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011758:	2320      	movs	r3, #32
 801175a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175e:	e170      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011760:	2340      	movs	r3, #64	; 0x40
 8011762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011766:	e16c      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011768:	2380      	movs	r3, #128	; 0x80
 801176a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176e:	e168      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4a1b      	ldr	r2, [pc, #108]	; (80117e4 <UART_SetConfig+0x348>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d142      	bne.n	8011800 <UART_SetConfig+0x364>
 801177a:	4b16      	ldr	r3, [pc, #88]	; (80117d4 <UART_SetConfig+0x338>)
 801177c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801177e:	f003 0307 	and.w	r3, r3, #7
 8011782:	2b05      	cmp	r3, #5
 8011784:	d838      	bhi.n	80117f8 <UART_SetConfig+0x35c>
 8011786:	a201      	add	r2, pc, #4	; (adr r2, 801178c <UART_SetConfig+0x2f0>)
 8011788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801178c:	080117a5 	.word	0x080117a5
 8011790:	080117ad 	.word	0x080117ad
 8011794:	080117b5 	.word	0x080117b5
 8011798:	080117bd 	.word	0x080117bd
 801179c:	080117e9 	.word	0x080117e9
 80117a0:	080117f1 	.word	0x080117f1
 80117a4:	2300      	movs	r3, #0
 80117a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117aa:	e14a      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80117ac:	2304      	movs	r3, #4
 80117ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b2:	e146      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80117b4:	2308      	movs	r3, #8
 80117b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ba:	e142      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80117bc:	2310      	movs	r3, #16
 80117be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c2:	e13e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80117c4:	cfff69f3 	.word	0xcfff69f3
 80117c8:	58000c00 	.word	0x58000c00
 80117cc:	11fff4ff 	.word	0x11fff4ff
 80117d0:	40011000 	.word	0x40011000
 80117d4:	58024400 	.word	0x58024400
 80117d8:	40004400 	.word	0x40004400
 80117dc:	40004800 	.word	0x40004800
 80117e0:	40004c00 	.word	0x40004c00
 80117e4:	40005000 	.word	0x40005000
 80117e8:	2320      	movs	r3, #32
 80117ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ee:	e128      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80117f0:	2340      	movs	r3, #64	; 0x40
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f6:	e124      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80117f8:	2380      	movs	r3, #128	; 0x80
 80117fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fe:	e120      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4acb      	ldr	r2, [pc, #812]	; (8011b34 <UART_SetConfig+0x698>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d176      	bne.n	80118f8 <UART_SetConfig+0x45c>
 801180a:	4bcb      	ldr	r3, [pc, #812]	; (8011b38 <UART_SetConfig+0x69c>)
 801180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801180e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011812:	2b28      	cmp	r3, #40	; 0x28
 8011814:	d86c      	bhi.n	80118f0 <UART_SetConfig+0x454>
 8011816:	a201      	add	r2, pc, #4	; (adr r2, 801181c <UART_SetConfig+0x380>)
 8011818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801181c:	080118c1 	.word	0x080118c1
 8011820:	080118f1 	.word	0x080118f1
 8011824:	080118f1 	.word	0x080118f1
 8011828:	080118f1 	.word	0x080118f1
 801182c:	080118f1 	.word	0x080118f1
 8011830:	080118f1 	.word	0x080118f1
 8011834:	080118f1 	.word	0x080118f1
 8011838:	080118f1 	.word	0x080118f1
 801183c:	080118c9 	.word	0x080118c9
 8011840:	080118f1 	.word	0x080118f1
 8011844:	080118f1 	.word	0x080118f1
 8011848:	080118f1 	.word	0x080118f1
 801184c:	080118f1 	.word	0x080118f1
 8011850:	080118f1 	.word	0x080118f1
 8011854:	080118f1 	.word	0x080118f1
 8011858:	080118f1 	.word	0x080118f1
 801185c:	080118d1 	.word	0x080118d1
 8011860:	080118f1 	.word	0x080118f1
 8011864:	080118f1 	.word	0x080118f1
 8011868:	080118f1 	.word	0x080118f1
 801186c:	080118f1 	.word	0x080118f1
 8011870:	080118f1 	.word	0x080118f1
 8011874:	080118f1 	.word	0x080118f1
 8011878:	080118f1 	.word	0x080118f1
 801187c:	080118d9 	.word	0x080118d9
 8011880:	080118f1 	.word	0x080118f1
 8011884:	080118f1 	.word	0x080118f1
 8011888:	080118f1 	.word	0x080118f1
 801188c:	080118f1 	.word	0x080118f1
 8011890:	080118f1 	.word	0x080118f1
 8011894:	080118f1 	.word	0x080118f1
 8011898:	080118f1 	.word	0x080118f1
 801189c:	080118e1 	.word	0x080118e1
 80118a0:	080118f1 	.word	0x080118f1
 80118a4:	080118f1 	.word	0x080118f1
 80118a8:	080118f1 	.word	0x080118f1
 80118ac:	080118f1 	.word	0x080118f1
 80118b0:	080118f1 	.word	0x080118f1
 80118b4:	080118f1 	.word	0x080118f1
 80118b8:	080118f1 	.word	0x080118f1
 80118bc:	080118e9 	.word	0x080118e9
 80118c0:	2301      	movs	r3, #1
 80118c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c6:	e0bc      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118c8:	2304      	movs	r3, #4
 80118ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ce:	e0b8      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118d0:	2308      	movs	r3, #8
 80118d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d6:	e0b4      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118d8:	2310      	movs	r3, #16
 80118da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118de:	e0b0      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118e0:	2320      	movs	r3, #32
 80118e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118e6:	e0ac      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118e8:	2340      	movs	r3, #64	; 0x40
 80118ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ee:	e0a8      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118f0:	2380      	movs	r3, #128	; 0x80
 80118f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118f6:	e0a4      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	4a8f      	ldr	r2, [pc, #572]	; (8011b3c <UART_SetConfig+0x6a0>)
 80118fe:	4293      	cmp	r3, r2
 8011900:	d130      	bne.n	8011964 <UART_SetConfig+0x4c8>
 8011902:	4b8d      	ldr	r3, [pc, #564]	; (8011b38 <UART_SetConfig+0x69c>)
 8011904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011906:	f003 0307 	and.w	r3, r3, #7
 801190a:	2b05      	cmp	r3, #5
 801190c:	d826      	bhi.n	801195c <UART_SetConfig+0x4c0>
 801190e:	a201      	add	r2, pc, #4	; (adr r2, 8011914 <UART_SetConfig+0x478>)
 8011910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011914:	0801192d 	.word	0x0801192d
 8011918:	08011935 	.word	0x08011935
 801191c:	0801193d 	.word	0x0801193d
 8011920:	08011945 	.word	0x08011945
 8011924:	0801194d 	.word	0x0801194d
 8011928:	08011955 	.word	0x08011955
 801192c:	2300      	movs	r3, #0
 801192e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011932:	e086      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011934:	2304      	movs	r3, #4
 8011936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801193a:	e082      	b.n	8011a42 <UART_SetConfig+0x5a6>
 801193c:	2308      	movs	r3, #8
 801193e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011942:	e07e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011944:	2310      	movs	r3, #16
 8011946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801194a:	e07a      	b.n	8011a42 <UART_SetConfig+0x5a6>
 801194c:	2320      	movs	r3, #32
 801194e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011952:	e076      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011954:	2340      	movs	r3, #64	; 0x40
 8011956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801195a:	e072      	b.n	8011a42 <UART_SetConfig+0x5a6>
 801195c:	2380      	movs	r3, #128	; 0x80
 801195e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011962:	e06e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4a75      	ldr	r2, [pc, #468]	; (8011b40 <UART_SetConfig+0x6a4>)
 801196a:	4293      	cmp	r3, r2
 801196c:	d130      	bne.n	80119d0 <UART_SetConfig+0x534>
 801196e:	4b72      	ldr	r3, [pc, #456]	; (8011b38 <UART_SetConfig+0x69c>)
 8011970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011972:	f003 0307 	and.w	r3, r3, #7
 8011976:	2b05      	cmp	r3, #5
 8011978:	d826      	bhi.n	80119c8 <UART_SetConfig+0x52c>
 801197a:	a201      	add	r2, pc, #4	; (adr r2, 8011980 <UART_SetConfig+0x4e4>)
 801197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011980:	08011999 	.word	0x08011999
 8011984:	080119a1 	.word	0x080119a1
 8011988:	080119a9 	.word	0x080119a9
 801198c:	080119b1 	.word	0x080119b1
 8011990:	080119b9 	.word	0x080119b9
 8011994:	080119c1 	.word	0x080119c1
 8011998:	2300      	movs	r3, #0
 801199a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199e:	e050      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119a0:	2304      	movs	r3, #4
 80119a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119a6:	e04c      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119a8:	2308      	movs	r3, #8
 80119aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ae:	e048      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119b0:	2310      	movs	r3, #16
 80119b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119b6:	e044      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119b8:	2320      	movs	r3, #32
 80119ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119be:	e040      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119c0:	2340      	movs	r3, #64	; 0x40
 80119c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119c6:	e03c      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119c8:	2380      	movs	r3, #128	; 0x80
 80119ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ce:	e038      	b.n	8011a42 <UART_SetConfig+0x5a6>
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4a5b      	ldr	r2, [pc, #364]	; (8011b44 <UART_SetConfig+0x6a8>)
 80119d6:	4293      	cmp	r3, r2
 80119d8:	d130      	bne.n	8011a3c <UART_SetConfig+0x5a0>
 80119da:	4b57      	ldr	r3, [pc, #348]	; (8011b38 <UART_SetConfig+0x69c>)
 80119dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119de:	f003 0307 	and.w	r3, r3, #7
 80119e2:	2b05      	cmp	r3, #5
 80119e4:	d826      	bhi.n	8011a34 <UART_SetConfig+0x598>
 80119e6:	a201      	add	r2, pc, #4	; (adr r2, 80119ec <UART_SetConfig+0x550>)
 80119e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ec:	08011a05 	.word	0x08011a05
 80119f0:	08011a0d 	.word	0x08011a0d
 80119f4:	08011a15 	.word	0x08011a15
 80119f8:	08011a1d 	.word	0x08011a1d
 80119fc:	08011a25 	.word	0x08011a25
 8011a00:	08011a2d 	.word	0x08011a2d
 8011a04:	2302      	movs	r3, #2
 8011a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a0a:	e01a      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a0c:	2304      	movs	r3, #4
 8011a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a12:	e016      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a14:	2308      	movs	r3, #8
 8011a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a1a:	e012      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a1c:	2310      	movs	r3, #16
 8011a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a22:	e00e      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a24:	2320      	movs	r3, #32
 8011a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a2a:	e00a      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a2c:	2340      	movs	r3, #64	; 0x40
 8011a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a32:	e006      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a34:	2380      	movs	r3, #128	; 0x80
 8011a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a3a:	e002      	b.n	8011a42 <UART_SetConfig+0x5a6>
 8011a3c:	2380      	movs	r3, #128	; 0x80
 8011a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a3f      	ldr	r2, [pc, #252]	; (8011b44 <UART_SetConfig+0x6a8>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	f040 80f8 	bne.w	8011c3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011a4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a52:	2b20      	cmp	r3, #32
 8011a54:	dc46      	bgt.n	8011ae4 <UART_SetConfig+0x648>
 8011a56:	2b02      	cmp	r3, #2
 8011a58:	f2c0 8082 	blt.w	8011b60 <UART_SetConfig+0x6c4>
 8011a5c:	3b02      	subs	r3, #2
 8011a5e:	2b1e      	cmp	r3, #30
 8011a60:	d87e      	bhi.n	8011b60 <UART_SetConfig+0x6c4>
 8011a62:	a201      	add	r2, pc, #4	; (adr r2, 8011a68 <UART_SetConfig+0x5cc>)
 8011a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a68:	08011aeb 	.word	0x08011aeb
 8011a6c:	08011b61 	.word	0x08011b61
 8011a70:	08011af3 	.word	0x08011af3
 8011a74:	08011b61 	.word	0x08011b61
 8011a78:	08011b61 	.word	0x08011b61
 8011a7c:	08011b61 	.word	0x08011b61
 8011a80:	08011b03 	.word	0x08011b03
 8011a84:	08011b61 	.word	0x08011b61
 8011a88:	08011b61 	.word	0x08011b61
 8011a8c:	08011b61 	.word	0x08011b61
 8011a90:	08011b61 	.word	0x08011b61
 8011a94:	08011b61 	.word	0x08011b61
 8011a98:	08011b61 	.word	0x08011b61
 8011a9c:	08011b61 	.word	0x08011b61
 8011aa0:	08011b13 	.word	0x08011b13
 8011aa4:	08011b61 	.word	0x08011b61
 8011aa8:	08011b61 	.word	0x08011b61
 8011aac:	08011b61 	.word	0x08011b61
 8011ab0:	08011b61 	.word	0x08011b61
 8011ab4:	08011b61 	.word	0x08011b61
 8011ab8:	08011b61 	.word	0x08011b61
 8011abc:	08011b61 	.word	0x08011b61
 8011ac0:	08011b61 	.word	0x08011b61
 8011ac4:	08011b61 	.word	0x08011b61
 8011ac8:	08011b61 	.word	0x08011b61
 8011acc:	08011b61 	.word	0x08011b61
 8011ad0:	08011b61 	.word	0x08011b61
 8011ad4:	08011b61 	.word	0x08011b61
 8011ad8:	08011b61 	.word	0x08011b61
 8011adc:	08011b61 	.word	0x08011b61
 8011ae0:	08011b53 	.word	0x08011b53
 8011ae4:	2b40      	cmp	r3, #64	; 0x40
 8011ae6:	d037      	beq.n	8011b58 <UART_SetConfig+0x6bc>
 8011ae8:	e03a      	b.n	8011b60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011aea:	f7fb f9a5 	bl	800ce38 <HAL_RCCEx_GetD3PCLK1Freq>
 8011aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011af0:	e03c      	b.n	8011b6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fb f9b4 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b00:	e034      	b.n	8011b6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b02:	f107 0318 	add.w	r3, r7, #24
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fb fb00 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b10:	e02c      	b.n	8011b6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b12:	4b09      	ldr	r3, [pc, #36]	; (8011b38 <UART_SetConfig+0x69c>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f003 0320 	and.w	r3, r3, #32
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d016      	beq.n	8011b4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b1e:	4b06      	ldr	r3, [pc, #24]	; (8011b38 <UART_SetConfig+0x69c>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	08db      	lsrs	r3, r3, #3
 8011b24:	f003 0303 	and.w	r3, r3, #3
 8011b28:	4a07      	ldr	r2, [pc, #28]	; (8011b48 <UART_SetConfig+0x6ac>)
 8011b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8011b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b30:	e01c      	b.n	8011b6c <UART_SetConfig+0x6d0>
 8011b32:	bf00      	nop
 8011b34:	40011400 	.word	0x40011400
 8011b38:	58024400 	.word	0x58024400
 8011b3c:	40007800 	.word	0x40007800
 8011b40:	40007c00 	.word	0x40007c00
 8011b44:	58000c00 	.word	0x58000c00
 8011b48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011b4c:	4b9d      	ldr	r3, [pc, #628]	; (8011dc4 <UART_SetConfig+0x928>)
 8011b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b50:	e00c      	b.n	8011b6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b52:	4b9d      	ldr	r3, [pc, #628]	; (8011dc8 <UART_SetConfig+0x92c>)
 8011b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b56:	e009      	b.n	8011b6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b5e:	e005      	b.n	8011b6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011b60:	2300      	movs	r3, #0
 8011b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011b64:	2301      	movs	r3, #1
 8011b66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f000 81de 	beq.w	8011f30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b78:	4a94      	ldr	r2, [pc, #592]	; (8011dcc <UART_SetConfig+0x930>)
 8011b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b86:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	4413      	add	r3, r2
 8011b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d305      	bcc.n	8011ba4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d903      	bls.n	8011bac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011baa:	e1c1      	b.n	8011f30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bae:	2200      	movs	r2, #0
 8011bb0:	60bb      	str	r3, [r7, #8]
 8011bb2:	60fa      	str	r2, [r7, #12]
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb8:	4a84      	ldr	r2, [pc, #528]	; (8011dcc <UART_SetConfig+0x930>)
 8011bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	603b      	str	r3, [r7, #0]
 8011bc4:	607a      	str	r2, [r7, #4]
 8011bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011bce:	f7ee fb87 	bl	80002e0 <__aeabi_uldivmod>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	4619      	mov	r1, r3
 8011bda:	f04f 0200 	mov.w	r2, #0
 8011bde:	f04f 0300 	mov.w	r3, #0
 8011be2:	020b      	lsls	r3, r1, #8
 8011be4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011be8:	0202      	lsls	r2, r0, #8
 8011bea:	6979      	ldr	r1, [r7, #20]
 8011bec:	6849      	ldr	r1, [r1, #4]
 8011bee:	0849      	lsrs	r1, r1, #1
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	eb12 0804 	adds.w	r8, r2, r4
 8011bfa:	eb43 0905 	adc.w	r9, r3, r5
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	469a      	mov	sl, r3
 8011c06:	4693      	mov	fp, r2
 8011c08:	4652      	mov	r2, sl
 8011c0a:	465b      	mov	r3, fp
 8011c0c:	4640      	mov	r0, r8
 8011c0e:	4649      	mov	r1, r9
 8011c10:	f7ee fb66 	bl	80002e0 <__aeabi_uldivmod>
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	4613      	mov	r3, r2
 8011c1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c22:	d308      	bcc.n	8011c36 <UART_SetConfig+0x79a>
 8011c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c2a:	d204      	bcs.n	8011c36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c32:	60da      	str	r2, [r3, #12]
 8011c34:	e17c      	b.n	8011f30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011c36:	2301      	movs	r3, #1
 8011c38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c3c:	e178      	b.n	8011f30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	69db      	ldr	r3, [r3, #28]
 8011c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c46:	f040 80c5 	bne.w	8011dd4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011c4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c4e:	2b20      	cmp	r3, #32
 8011c50:	dc48      	bgt.n	8011ce4 <UART_SetConfig+0x848>
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	db7b      	blt.n	8011d4e <UART_SetConfig+0x8b2>
 8011c56:	2b20      	cmp	r3, #32
 8011c58:	d879      	bhi.n	8011d4e <UART_SetConfig+0x8b2>
 8011c5a:	a201      	add	r2, pc, #4	; (adr r2, 8011c60 <UART_SetConfig+0x7c4>)
 8011c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c60:	08011ceb 	.word	0x08011ceb
 8011c64:	08011cf3 	.word	0x08011cf3
 8011c68:	08011d4f 	.word	0x08011d4f
 8011c6c:	08011d4f 	.word	0x08011d4f
 8011c70:	08011cfb 	.word	0x08011cfb
 8011c74:	08011d4f 	.word	0x08011d4f
 8011c78:	08011d4f 	.word	0x08011d4f
 8011c7c:	08011d4f 	.word	0x08011d4f
 8011c80:	08011d0b 	.word	0x08011d0b
 8011c84:	08011d4f 	.word	0x08011d4f
 8011c88:	08011d4f 	.word	0x08011d4f
 8011c8c:	08011d4f 	.word	0x08011d4f
 8011c90:	08011d4f 	.word	0x08011d4f
 8011c94:	08011d4f 	.word	0x08011d4f
 8011c98:	08011d4f 	.word	0x08011d4f
 8011c9c:	08011d4f 	.word	0x08011d4f
 8011ca0:	08011d1b 	.word	0x08011d1b
 8011ca4:	08011d4f 	.word	0x08011d4f
 8011ca8:	08011d4f 	.word	0x08011d4f
 8011cac:	08011d4f 	.word	0x08011d4f
 8011cb0:	08011d4f 	.word	0x08011d4f
 8011cb4:	08011d4f 	.word	0x08011d4f
 8011cb8:	08011d4f 	.word	0x08011d4f
 8011cbc:	08011d4f 	.word	0x08011d4f
 8011cc0:	08011d4f 	.word	0x08011d4f
 8011cc4:	08011d4f 	.word	0x08011d4f
 8011cc8:	08011d4f 	.word	0x08011d4f
 8011ccc:	08011d4f 	.word	0x08011d4f
 8011cd0:	08011d4f 	.word	0x08011d4f
 8011cd4:	08011d4f 	.word	0x08011d4f
 8011cd8:	08011d4f 	.word	0x08011d4f
 8011cdc:	08011d4f 	.word	0x08011d4f
 8011ce0:	08011d41 	.word	0x08011d41
 8011ce4:	2b40      	cmp	r3, #64	; 0x40
 8011ce6:	d02e      	beq.n	8011d46 <UART_SetConfig+0x8aa>
 8011ce8:	e031      	b.n	8011d4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cea:	f7f9 f8ad 	bl	800ae48 <HAL_RCC_GetPCLK1Freq>
 8011cee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cf0:	e033      	b.n	8011d5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cf2:	f7f9 f8bf 	bl	800ae74 <HAL_RCC_GetPCLK2Freq>
 8011cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cf8:	e02f      	b.n	8011d5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fb f8b0 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d08:	e027      	b.n	8011d5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d0a:	f107 0318 	add.w	r3, r7, #24
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fb f9fc 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d18:	e01f      	b.n	8011d5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d1a:	4b2d      	ldr	r3, [pc, #180]	; (8011dd0 <UART_SetConfig+0x934>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f003 0320 	and.w	r3, r3, #32
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d009      	beq.n	8011d3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d26:	4b2a      	ldr	r3, [pc, #168]	; (8011dd0 <UART_SetConfig+0x934>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	08db      	lsrs	r3, r3, #3
 8011d2c:	f003 0303 	and.w	r3, r3, #3
 8011d30:	4a24      	ldr	r2, [pc, #144]	; (8011dc4 <UART_SetConfig+0x928>)
 8011d32:	fa22 f303 	lsr.w	r3, r2, r3
 8011d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d38:	e00f      	b.n	8011d5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011d3a:	4b22      	ldr	r3, [pc, #136]	; (8011dc4 <UART_SetConfig+0x928>)
 8011d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d3e:	e00c      	b.n	8011d5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d40:	4b21      	ldr	r3, [pc, #132]	; (8011dc8 <UART_SetConfig+0x92c>)
 8011d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d44:	e009      	b.n	8011d5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d4c:	e005      	b.n	8011d5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d52:	2301      	movs	r3, #1
 8011d54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	f000 80e7 	beq.w	8011f30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d66:	4a19      	ldr	r2, [pc, #100]	; (8011dcc <UART_SetConfig+0x930>)
 8011d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d74:	005a      	lsls	r2, r3, #1
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	085b      	lsrs	r3, r3, #1
 8011d7c:	441a      	add	r2, r3
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8a:	2b0f      	cmp	r3, #15
 8011d8c:	d916      	bls.n	8011dbc <UART_SetConfig+0x920>
 8011d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d94:	d212      	bcs.n	8011dbc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	f023 030f 	bic.w	r3, r3, #15
 8011d9e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da2:	085b      	lsrs	r3, r3, #1
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	f003 0307 	and.w	r3, r3, #7
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011dae:	4313      	orrs	r3, r2
 8011db0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011db8:	60da      	str	r2, [r3, #12]
 8011dba:	e0b9      	b.n	8011f30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011dc2:	e0b5      	b.n	8011f30 <UART_SetConfig+0xa94>
 8011dc4:	03d09000 	.word	0x03d09000
 8011dc8:	003d0900 	.word	0x003d0900
 8011dcc:	080176bc 	.word	0x080176bc
 8011dd0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011dd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011dd8:	2b20      	cmp	r3, #32
 8011dda:	dc49      	bgt.n	8011e70 <UART_SetConfig+0x9d4>
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	db7c      	blt.n	8011eda <UART_SetConfig+0xa3e>
 8011de0:	2b20      	cmp	r3, #32
 8011de2:	d87a      	bhi.n	8011eda <UART_SetConfig+0xa3e>
 8011de4:	a201      	add	r2, pc, #4	; (adr r2, 8011dec <UART_SetConfig+0x950>)
 8011de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dea:	bf00      	nop
 8011dec:	08011e77 	.word	0x08011e77
 8011df0:	08011e7f 	.word	0x08011e7f
 8011df4:	08011edb 	.word	0x08011edb
 8011df8:	08011edb 	.word	0x08011edb
 8011dfc:	08011e87 	.word	0x08011e87
 8011e00:	08011edb 	.word	0x08011edb
 8011e04:	08011edb 	.word	0x08011edb
 8011e08:	08011edb 	.word	0x08011edb
 8011e0c:	08011e97 	.word	0x08011e97
 8011e10:	08011edb 	.word	0x08011edb
 8011e14:	08011edb 	.word	0x08011edb
 8011e18:	08011edb 	.word	0x08011edb
 8011e1c:	08011edb 	.word	0x08011edb
 8011e20:	08011edb 	.word	0x08011edb
 8011e24:	08011edb 	.word	0x08011edb
 8011e28:	08011edb 	.word	0x08011edb
 8011e2c:	08011ea7 	.word	0x08011ea7
 8011e30:	08011edb 	.word	0x08011edb
 8011e34:	08011edb 	.word	0x08011edb
 8011e38:	08011edb 	.word	0x08011edb
 8011e3c:	08011edb 	.word	0x08011edb
 8011e40:	08011edb 	.word	0x08011edb
 8011e44:	08011edb 	.word	0x08011edb
 8011e48:	08011edb 	.word	0x08011edb
 8011e4c:	08011edb 	.word	0x08011edb
 8011e50:	08011edb 	.word	0x08011edb
 8011e54:	08011edb 	.word	0x08011edb
 8011e58:	08011edb 	.word	0x08011edb
 8011e5c:	08011edb 	.word	0x08011edb
 8011e60:	08011edb 	.word	0x08011edb
 8011e64:	08011edb 	.word	0x08011edb
 8011e68:	08011edb 	.word	0x08011edb
 8011e6c:	08011ecd 	.word	0x08011ecd
 8011e70:	2b40      	cmp	r3, #64	; 0x40
 8011e72:	d02e      	beq.n	8011ed2 <UART_SetConfig+0xa36>
 8011e74:	e031      	b.n	8011eda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e76:	f7f8 ffe7 	bl	800ae48 <HAL_RCC_GetPCLK1Freq>
 8011e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e7c:	e033      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011e7e:	f7f8 fff9 	bl	800ae74 <HAL_RCC_GetPCLK2Freq>
 8011e82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e84:	e02f      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fa ffea 	bl	800ce64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e94:	e027      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e96:	f107 0318 	add.w	r3, r7, #24
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fb f936 	bl	800d10c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ea4:	e01f      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ea6:	4b2d      	ldr	r3, [pc, #180]	; (8011f5c <UART_SetConfig+0xac0>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f003 0320 	and.w	r3, r3, #32
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d009      	beq.n	8011ec6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011eb2:	4b2a      	ldr	r3, [pc, #168]	; (8011f5c <UART_SetConfig+0xac0>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	08db      	lsrs	r3, r3, #3
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	4a28      	ldr	r2, [pc, #160]	; (8011f60 <UART_SetConfig+0xac4>)
 8011ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8011ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ec4:	e00f      	b.n	8011ee6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011ec6:	4b26      	ldr	r3, [pc, #152]	; (8011f60 <UART_SetConfig+0xac4>)
 8011ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011eca:	e00c      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ecc:	4b25      	ldr	r3, [pc, #148]	; (8011f64 <UART_SetConfig+0xac8>)
 8011ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ed0:	e009      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ed8:	e005      	b.n	8011ee6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011eda:	2300      	movs	r3, #0
 8011edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ee4:	bf00      	nop
    }

    if (pclk != 0U)
 8011ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d021      	beq.n	8011f30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef0:	4a1d      	ldr	r2, [pc, #116]	; (8011f68 <UART_SetConfig+0xacc>)
 8011ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011efa:	fbb3 f2f2 	udiv	r2, r3, r2
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	085b      	lsrs	r3, r3, #1
 8011f04:	441a      	add	r2, r3
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f12:	2b0f      	cmp	r3, #15
 8011f14:	d909      	bls.n	8011f2a <UART_SetConfig+0xa8e>
 8011f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f1c:	d205      	bcs.n	8011f2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	60da      	str	r2, [r3, #12]
 8011f28:	e002      	b.n	8011f30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	2201      	movs	r2, #1
 8011f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	2200      	movs	r2, #0
 8011f44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011f4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3748      	adds	r7, #72	; 0x48
 8011f54:	46bd      	mov	sp, r7
 8011f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011f5a:	bf00      	nop
 8011f5c:	58024400 	.word	0x58024400
 8011f60:	03d09000 	.word	0x03d09000
 8011f64:	003d0900 	.word	0x003d0900
 8011f68:	080176bc 	.word	0x080176bc

08011f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f78:	f003 0308 	and.w	r3, r3, #8
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d00a      	beq.n	8011f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	430a      	orrs	r2, r1
 8011f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f9a:	f003 0301 	and.w	r3, r3, #1
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d00a      	beq.n	8011fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	430a      	orrs	r2, r1
 8011fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fbc:	f003 0302 	and.w	r3, r3, #2
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d00a      	beq.n	8011fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	430a      	orrs	r2, r1
 8011fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fde:	f003 0304 	and.w	r3, r3, #4
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00a      	beq.n	8011ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	430a      	orrs	r2, r1
 8011ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012000:	f003 0310 	and.w	r3, r3, #16
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00a      	beq.n	801201e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	430a      	orrs	r2, r1
 801201c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012022:	f003 0320 	and.w	r3, r3, #32
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00a      	beq.n	8012040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	430a      	orrs	r2, r1
 801203e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012048:	2b00      	cmp	r3, #0
 801204a:	d01a      	beq.n	8012082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	430a      	orrs	r2, r1
 8012060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801206a:	d10a      	bne.n	8012082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	430a      	orrs	r2, r1
 8012080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00a      	beq.n	80120a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	430a      	orrs	r2, r1
 80120a2:	605a      	str	r2, [r3, #4]
  }
}
 80120a4:	bf00      	nop
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b098      	sub	sp, #96	; 0x60
 80120b4:	af02      	add	r7, sp, #8
 80120b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80120c0:	f7f1 ff34 	bl	8003f2c <HAL_GetTick>
 80120c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f003 0308 	and.w	r3, r3, #8
 80120d0:	2b08      	cmp	r3, #8
 80120d2:	d12f      	bne.n	8012134 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80120d8:	9300      	str	r3, [sp, #0]
 80120da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120dc:	2200      	movs	r2, #0
 80120de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 f88e 	bl	8012204 <UART_WaitOnFlagUntilTimeout>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d022      	beq.n	8012134 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	e853 3f00 	ldrex	r3, [r3]
 80120fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80120fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012102:	653b      	str	r3, [r7, #80]	; 0x50
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	461a      	mov	r2, r3
 801210a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210c:	647b      	str	r3, [r7, #68]	; 0x44
 801210e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012114:	e841 2300 	strex	r3, r2, [r1]
 8012118:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801211c:	2b00      	cmp	r3, #0
 801211e:	d1e6      	bne.n	80120ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2220      	movs	r2, #32
 8012124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012130:	2303      	movs	r3, #3
 8012132:	e063      	b.n	80121fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f003 0304 	and.w	r3, r3, #4
 801213e:	2b04      	cmp	r3, #4
 8012140:	d149      	bne.n	80121d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012142:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801214a:	2200      	movs	r2, #0
 801214c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f000 f857 	bl	8012204 <UART_WaitOnFlagUntilTimeout>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d03c      	beq.n	80121d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012164:	e853 3f00 	ldrex	r3, [r3]
 8012168:	623b      	str	r3, [r7, #32]
   return(result);
 801216a:	6a3b      	ldr	r3, [r7, #32]
 801216c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012170:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	461a      	mov	r2, r3
 8012178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217a:	633b      	str	r3, [r7, #48]	; 0x30
 801217c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012182:	e841 2300 	strex	r3, r2, [r1]
 8012186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1e6      	bne.n	801215c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	3308      	adds	r3, #8
 8012194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	e853 3f00 	ldrex	r3, [r3]
 801219c:	60fb      	str	r3, [r7, #12]
   return(result);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f023 0301 	bic.w	r3, r3, #1
 80121a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	3308      	adds	r3, #8
 80121ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121ae:	61fa      	str	r2, [r7, #28]
 80121b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b2:	69b9      	ldr	r1, [r7, #24]
 80121b4:	69fa      	ldr	r2, [r7, #28]
 80121b6:	e841 2300 	strex	r3, r2, [r1]
 80121ba:	617b      	str	r3, [r7, #20]
   return(result);
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1e5      	bne.n	801218e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2220      	movs	r2, #32
 80121c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80121d2:	2303      	movs	r3, #3
 80121d4:	e012      	b.n	80121fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2220      	movs	r2, #32
 80121da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2220      	movs	r2, #32
 80121e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2200      	movs	r2, #0
 80121f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121fa:	2300      	movs	r3, #0
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3758      	adds	r7, #88	; 0x58
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	603b      	str	r3, [r7, #0]
 8012210:	4613      	mov	r3, r2
 8012212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012214:	e04f      	b.n	80122b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801221c:	d04b      	beq.n	80122b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801221e:	f7f1 fe85 	bl	8003f2c <HAL_GetTick>
 8012222:	4602      	mov	r2, r0
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	1ad3      	subs	r3, r2, r3
 8012228:	69ba      	ldr	r2, [r7, #24]
 801222a:	429a      	cmp	r2, r3
 801222c:	d302      	bcc.n	8012234 <UART_WaitOnFlagUntilTimeout+0x30>
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d101      	bne.n	8012238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012234:	2303      	movs	r3, #3
 8012236:	e04e      	b.n	80122d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f003 0304 	and.w	r3, r3, #4
 8012242:	2b00      	cmp	r3, #0
 8012244:	d037      	beq.n	80122b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	2b80      	cmp	r3, #128	; 0x80
 801224a:	d034      	beq.n	80122b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	2b40      	cmp	r3, #64	; 0x40
 8012250:	d031      	beq.n	80122b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	69db      	ldr	r3, [r3, #28]
 8012258:	f003 0308 	and.w	r3, r3, #8
 801225c:	2b08      	cmp	r3, #8
 801225e:	d110      	bne.n	8012282 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2208      	movs	r2, #8
 8012266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f000 f95b 	bl	8012524 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	2208      	movs	r2, #8
 8012272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2200      	movs	r2, #0
 801227a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801227e:	2301      	movs	r3, #1
 8012280:	e029      	b.n	80122d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	69db      	ldr	r3, [r3, #28]
 8012288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801228c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012290:	d111      	bne.n	80122b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801229a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801229c:	68f8      	ldr	r0, [r7, #12]
 801229e:	f000 f941 	bl	8012524 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2220      	movs	r2, #32
 80122a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80122b2:	2303      	movs	r3, #3
 80122b4:	e00f      	b.n	80122d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	69da      	ldr	r2, [r3, #28]
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	4013      	ands	r3, r2
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	bf0c      	ite	eq
 80122c6:	2301      	moveq	r3, #1
 80122c8:	2300      	movne	r3, #0
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	461a      	mov	r2, r3
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d0a0      	beq.n	8012216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80122d4:	2300      	movs	r3, #0
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
	...

080122e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b0a3      	sub	sp, #140	; 0x8c
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	4613      	mov	r3, r2
 80122ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	88fa      	ldrh	r2, [r7, #6]
 80122f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	88fa      	ldrh	r2, [r7, #6]
 8012300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	2200      	movs	r2, #0
 8012308:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012312:	d10e      	bne.n	8012332 <UART_Start_Receive_IT+0x52>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	691b      	ldr	r3, [r3, #16]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d105      	bne.n	8012328 <UART_Start_Receive_IT+0x48>
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012322:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012326:	e02d      	b.n	8012384 <UART_Start_Receive_IT+0xa4>
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	22ff      	movs	r2, #255	; 0xff
 801232c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012330:	e028      	b.n	8012384 <UART_Start_Receive_IT+0xa4>
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	689b      	ldr	r3, [r3, #8]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d10d      	bne.n	8012356 <UART_Start_Receive_IT+0x76>
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	691b      	ldr	r3, [r3, #16]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d104      	bne.n	801234c <UART_Start_Receive_IT+0x6c>
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	22ff      	movs	r2, #255	; 0xff
 8012346:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801234a:	e01b      	b.n	8012384 <UART_Start_Receive_IT+0xa4>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	227f      	movs	r2, #127	; 0x7f
 8012350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012354:	e016      	b.n	8012384 <UART_Start_Receive_IT+0xa4>
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801235e:	d10d      	bne.n	801237c <UART_Start_Receive_IT+0x9c>
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d104      	bne.n	8012372 <UART_Start_Receive_IT+0x92>
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	227f      	movs	r2, #127	; 0x7f
 801236c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012370:	e008      	b.n	8012384 <UART_Start_Receive_IT+0xa4>
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	223f      	movs	r2, #63	; 0x3f
 8012376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801237a:	e003      	b.n	8012384 <UART_Start_Receive_IT+0xa4>
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2200      	movs	r2, #0
 8012380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2200      	movs	r2, #0
 8012388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2222      	movs	r2, #34	; 0x22
 8012390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	3308      	adds	r3, #8
 801239a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801239e:	e853 3f00 	ldrex	r3, [r3]
 80123a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80123a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123a6:	f043 0301 	orr.w	r3, r3, #1
 80123aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	3308      	adds	r3, #8
 80123b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80123b8:	673a      	str	r2, [r7, #112]	; 0x70
 80123ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80123be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80123c0:	e841 2300 	strex	r3, r2, [r1]
 80123c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80123c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d1e3      	bne.n	8012394 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80123d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80123d4:	d14f      	bne.n	8012476 <UART_Start_Receive_IT+0x196>
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80123dc:	88fa      	ldrh	r2, [r7, #6]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d349      	bcc.n	8012476 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123ea:	d107      	bne.n	80123fc <UART_Start_Receive_IT+0x11c>
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	691b      	ldr	r3, [r3, #16]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d103      	bne.n	80123fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	4a47      	ldr	r2, [pc, #284]	; (8012514 <UART_Start_Receive_IT+0x234>)
 80123f8:	675a      	str	r2, [r3, #116]	; 0x74
 80123fa:	e002      	b.n	8012402 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	4a46      	ldr	r2, [pc, #280]	; (8012518 <UART_Start_Receive_IT+0x238>)
 8012400:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	691b      	ldr	r3, [r3, #16]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d01a      	beq.n	8012440 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012412:	e853 3f00 	ldrex	r3, [r3]
 8012416:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801241e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	461a      	mov	r2, r3
 8012428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801242c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801242e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012430:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012434:	e841 2300 	strex	r3, r2, [r1]
 8012438:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801243a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1e4      	bne.n	801240a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	3308      	adds	r3, #8
 8012446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801244a:	e853 3f00 	ldrex	r3, [r3]
 801244e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012456:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	3308      	adds	r3, #8
 801245e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012460:	64ba      	str	r2, [r7, #72]	; 0x48
 8012462:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012464:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012468:	e841 2300 	strex	r3, r2, [r1]
 801246c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801246e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012470:	2b00      	cmp	r3, #0
 8012472:	d1e5      	bne.n	8012440 <UART_Start_Receive_IT+0x160>
 8012474:	e046      	b.n	8012504 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801247e:	d107      	bne.n	8012490 <UART_Start_Receive_IT+0x1b0>
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d103      	bne.n	8012490 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	4a24      	ldr	r2, [pc, #144]	; (801251c <UART_Start_Receive_IT+0x23c>)
 801248c:	675a      	str	r2, [r3, #116]	; 0x74
 801248e:	e002      	b.n	8012496 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	4a23      	ldr	r2, [pc, #140]	; (8012520 <UART_Start_Receive_IT+0x240>)
 8012494:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d019      	beq.n	80124d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a6:	e853 3f00 	ldrex	r3, [r3]
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80124ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80124b2:	677b      	str	r3, [r7, #116]	; 0x74
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	461a      	mov	r2, r3
 80124ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80124bc:	637b      	str	r3, [r7, #52]	; 0x34
 80124be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124c4:	e841 2300 	strex	r3, r2, [r1]
 80124c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80124ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d1e6      	bne.n	801249e <UART_Start_Receive_IT+0x1be>
 80124d0:	e018      	b.n	8012504 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	e853 3f00 	ldrex	r3, [r3]
 80124de:	613b      	str	r3, [r7, #16]
   return(result);
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	f043 0320 	orr.w	r3, r3, #32
 80124e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	461a      	mov	r2, r3
 80124ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80124f0:	623b      	str	r3, [r7, #32]
 80124f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f4:	69f9      	ldr	r1, [r7, #28]
 80124f6:	6a3a      	ldr	r2, [r7, #32]
 80124f8:	e841 2300 	strex	r3, r2, [r1]
 80124fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d1e6      	bne.n	80124d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012504:	2300      	movs	r3, #0
}
 8012506:	4618      	mov	r0, r3
 8012508:	378c      	adds	r7, #140	; 0x8c
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop
 8012514:	08012d45 	.word	0x08012d45
 8012518:	080129e5 	.word	0x080129e5
 801251c:	0801282d 	.word	0x0801282d
 8012520:	08012675 	.word	0x08012675

08012524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012524:	b480      	push	{r7}
 8012526:	b095      	sub	sp, #84	; 0x54
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012534:	e853 3f00 	ldrex	r3, [r3]
 8012538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	461a      	mov	r2, r3
 8012548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801254a:	643b      	str	r3, [r7, #64]	; 0x40
 801254c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801254e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012552:	e841 2300 	strex	r3, r2, [r1]
 8012556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255a:	2b00      	cmp	r3, #0
 801255c:	d1e6      	bne.n	801252c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	3308      	adds	r3, #8
 8012564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012566:	6a3b      	ldr	r3, [r7, #32]
 8012568:	e853 3f00 	ldrex	r3, [r3]
 801256c:	61fb      	str	r3, [r7, #28]
   return(result);
 801256e:	69fa      	ldr	r2, [r7, #28]
 8012570:	4b1e      	ldr	r3, [pc, #120]	; (80125ec <UART_EndRxTransfer+0xc8>)
 8012572:	4013      	ands	r3, r2
 8012574:	64bb      	str	r3, [r7, #72]	; 0x48
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	3308      	adds	r3, #8
 801257c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801257e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012586:	e841 2300 	strex	r3, r2, [r1]
 801258a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1e5      	bne.n	801255e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012596:	2b01      	cmp	r3, #1
 8012598:	d118      	bne.n	80125cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	e853 3f00 	ldrex	r3, [r3]
 80125a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	f023 0310 	bic.w	r3, r3, #16
 80125ae:	647b      	str	r3, [r7, #68]	; 0x44
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	461a      	mov	r2, r3
 80125b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b8:	61bb      	str	r3, [r7, #24]
 80125ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125bc:	6979      	ldr	r1, [r7, #20]
 80125be:	69ba      	ldr	r2, [r7, #24]
 80125c0:	e841 2300 	strex	r3, r2, [r1]
 80125c4:	613b      	str	r3, [r7, #16]
   return(result);
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d1e6      	bne.n	801259a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2220      	movs	r2, #32
 80125d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2200      	movs	r2, #0
 80125d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2200      	movs	r2, #0
 80125de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80125e0:	bf00      	nop
 80125e2:	3754      	adds	r7, #84	; 0x54
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr
 80125ec:	effffffe 	.word	0xeffffffe

080125f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2200      	movs	r2, #0
 8012602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2200      	movs	r2, #0
 801260a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801260e:	68f8      	ldr	r0, [r7, #12]
 8012610:	f7fe ff2e 	bl	8011470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012614:	bf00      	nop
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b088      	sub	sp, #32
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	e853 3f00 	ldrex	r3, [r3]
 8012630:	60bb      	str	r3, [r7, #8]
   return(result);
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012638:	61fb      	str	r3, [r7, #28]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	461a      	mov	r2, r3
 8012640:	69fb      	ldr	r3, [r7, #28]
 8012642:	61bb      	str	r3, [r7, #24]
 8012644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012646:	6979      	ldr	r1, [r7, #20]
 8012648:	69ba      	ldr	r2, [r7, #24]
 801264a:	e841 2300 	strex	r3, r2, [r1]
 801264e:	613b      	str	r3, [r7, #16]
   return(result);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1e6      	bne.n	8012624 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2220      	movs	r2, #32
 801265a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2200      	movs	r2, #0
 8012662:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f7fe fef9 	bl	801145c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801266a:	bf00      	nop
 801266c:	3720      	adds	r7, #32
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b09c      	sub	sp, #112	; 0x70
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012682:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801268c:	2b22      	cmp	r3, #34	; 0x22
 801268e:	f040 80be 	bne.w	801280e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012698:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801269c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80126a0:	b2d9      	uxtb	r1, r3
 80126a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80126a6:	b2da      	uxtb	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126ac:	400a      	ands	r2, r1
 80126ae:	b2d2      	uxtb	r2, r2
 80126b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126b6:	1c5a      	adds	r2, r3, #1
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	3b01      	subs	r3, #1
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f040 80a1 	bne.w	801281e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e4:	e853 3f00 	ldrex	r3, [r3]
 80126e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80126ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80126f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	461a      	mov	r2, r3
 80126f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80126fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80126fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012702:	e841 2300 	strex	r3, r2, [r1]
 8012706:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801270a:	2b00      	cmp	r3, #0
 801270c:	d1e6      	bne.n	80126dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	3308      	adds	r3, #8
 8012714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	e853 3f00 	ldrex	r3, [r3]
 801271c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012720:	f023 0301 	bic.w	r3, r3, #1
 8012724:	667b      	str	r3, [r7, #100]	; 0x64
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	3308      	adds	r3, #8
 801272c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801272e:	647a      	str	r2, [r7, #68]	; 0x44
 8012730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012736:	e841 2300 	strex	r3, r2, [r1]
 801273a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801273c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273e:	2b00      	cmp	r3, #0
 8012740:	d1e5      	bne.n	801270e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2220      	movs	r2, #32
 8012746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2200      	movs	r2, #0
 801274e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4a33      	ldr	r2, [pc, #204]	; (8012828 <UART_RxISR_8BIT+0x1b4>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d01f      	beq.n	80127a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801276a:	2b00      	cmp	r3, #0
 801276c:	d018      	beq.n	80127a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012776:	e853 3f00 	ldrex	r3, [r3]
 801277a:	623b      	str	r3, [r7, #32]
   return(result);
 801277c:	6a3b      	ldr	r3, [r7, #32]
 801277e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012782:	663b      	str	r3, [r7, #96]	; 0x60
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	461a      	mov	r2, r3
 801278a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801278c:	633b      	str	r3, [r7, #48]	; 0x30
 801278e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012794:	e841 2300 	strex	r3, r2, [r1]
 8012798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279c:	2b00      	cmp	r3, #0
 801279e:	d1e6      	bne.n	801276e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d12e      	bne.n	8012806 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	e853 3f00 	ldrex	r3, [r3]
 80127ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f023 0310 	bic.w	r3, r3, #16
 80127c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	461a      	mov	r2, r3
 80127ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127cc:	61fb      	str	r3, [r7, #28]
 80127ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d0:	69b9      	ldr	r1, [r7, #24]
 80127d2:	69fa      	ldr	r2, [r7, #28]
 80127d4:	e841 2300 	strex	r3, r2, [r1]
 80127d8:	617b      	str	r3, [r7, #20]
   return(result);
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d1e6      	bne.n	80127ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	69db      	ldr	r3, [r3, #28]
 80127e6:	f003 0310 	and.w	r3, r3, #16
 80127ea:	2b10      	cmp	r3, #16
 80127ec:	d103      	bne.n	80127f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	2210      	movs	r2, #16
 80127f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127fc:	4619      	mov	r1, r3
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7fe fe40 	bl	8011484 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012804:	e00b      	b.n	801281e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f7ee feae 	bl	8001568 <HAL_UART_RxCpltCallback>
}
 801280c:	e007      	b.n	801281e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	699a      	ldr	r2, [r3, #24]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f042 0208 	orr.w	r2, r2, #8
 801281c:	619a      	str	r2, [r3, #24]
}
 801281e:	bf00      	nop
 8012820:	3770      	adds	r7, #112	; 0x70
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	58000c00 	.word	0x58000c00

0801282c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b09c      	sub	sp, #112	; 0x70
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801283a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012844:	2b22      	cmp	r3, #34	; 0x22
 8012846:	f040 80be 	bne.w	80129c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012850:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012858:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801285a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801285e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012862:	4013      	ands	r3, r2
 8012864:	b29a      	uxth	r2, r3
 8012866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012868:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801286e:	1c9a      	adds	r2, r3, #2
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801287a:	b29b      	uxth	r3, r3
 801287c:	3b01      	subs	r3, #1
 801287e:	b29a      	uxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801288c:	b29b      	uxth	r3, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	f040 80a1 	bne.w	80129d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801289c:	e853 3f00 	ldrex	r3, [r3]
 80128a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80128a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128a8:	667b      	str	r3, [r7, #100]	; 0x64
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128b2:	657b      	str	r3, [r7, #84]	; 0x54
 80128b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128ba:	e841 2300 	strex	r3, r2, [r1]
 80128be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80128c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1e6      	bne.n	8012894 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	3308      	adds	r3, #8
 80128cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d0:	e853 3f00 	ldrex	r3, [r3]
 80128d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	f023 0301 	bic.w	r3, r3, #1
 80128dc:	663b      	str	r3, [r7, #96]	; 0x60
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3308      	adds	r3, #8
 80128e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80128e6:	643a      	str	r2, [r7, #64]	; 0x40
 80128e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128ee:	e841 2300 	strex	r3, r2, [r1]
 80128f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80128f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1e5      	bne.n	80128c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2220      	movs	r2, #32
 80128fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2200      	movs	r2, #0
 8012906:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4a33      	ldr	r2, [pc, #204]	; (80129e0 <UART_RxISR_16BIT+0x1b4>)
 8012914:	4293      	cmp	r3, r2
 8012916:	d01f      	beq.n	8012958 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012922:	2b00      	cmp	r3, #0
 8012924:	d018      	beq.n	8012958 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801292c:	6a3b      	ldr	r3, [r7, #32]
 801292e:	e853 3f00 	ldrex	r3, [r3]
 8012932:	61fb      	str	r3, [r7, #28]
   return(result);
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801293a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	461a      	mov	r2, r3
 8012942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012946:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801294a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801294c:	e841 2300 	strex	r3, r2, [r1]
 8012950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1e6      	bne.n	8012926 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801295c:	2b01      	cmp	r3, #1
 801295e:	d12e      	bne.n	80129be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2200      	movs	r2, #0
 8012964:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	e853 3f00 	ldrex	r3, [r3]
 8012972:	60bb      	str	r3, [r7, #8]
   return(result);
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	f023 0310 	bic.w	r3, r3, #16
 801297a:	65bb      	str	r3, [r7, #88]	; 0x58
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	461a      	mov	r2, r3
 8012982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012984:	61bb      	str	r3, [r7, #24]
 8012986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012988:	6979      	ldr	r1, [r7, #20]
 801298a:	69ba      	ldr	r2, [r7, #24]
 801298c:	e841 2300 	strex	r3, r2, [r1]
 8012990:	613b      	str	r3, [r7, #16]
   return(result);
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d1e6      	bne.n	8012966 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	69db      	ldr	r3, [r3, #28]
 801299e:	f003 0310 	and.w	r3, r3, #16
 80129a2:	2b10      	cmp	r3, #16
 80129a4:	d103      	bne.n	80129ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2210      	movs	r2, #16
 80129ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129b4:	4619      	mov	r1, r3
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7fe fd64 	bl	8011484 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129bc:	e00b      	b.n	80129d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7ee fdd2 	bl	8001568 <HAL_UART_RxCpltCallback>
}
 80129c4:	e007      	b.n	80129d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	699a      	ldr	r2, [r3, #24]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f042 0208 	orr.w	r2, r2, #8
 80129d4:	619a      	str	r2, [r3, #24]
}
 80129d6:	bf00      	nop
 80129d8:	3770      	adds	r7, #112	; 0x70
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	58000c00 	.word	0x58000c00

080129e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b0ac      	sub	sp, #176	; 0xb0
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	689b      	ldr	r3, [r3, #8]
 8012a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a1a:	2b22      	cmp	r3, #34	; 0x22
 8012a1c:	f040 8180 	bne.w	8012d20 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a26:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a2a:	e123      	b.n	8012c74 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a32:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012a36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012a3a:	b2d9      	uxtb	r1, r3
 8012a3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012a40:	b2da      	uxtb	r2, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a46:	400a      	ands	r2, r1
 8012a48:	b2d2      	uxtb	r2, r2
 8012a4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a50:	1c5a      	adds	r2, r3, #1
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	b29a      	uxth	r2, r3
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	69db      	ldr	r3, [r3, #28]
 8012a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a76:	f003 0307 	and.w	r3, r3, #7
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d053      	beq.n	8012b26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a82:	f003 0301 	and.w	r3, r3, #1
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d011      	beq.n	8012aae <UART_RxISR_8BIT_FIFOEN+0xca>
 8012a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00b      	beq.n	8012aae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aa4:	f043 0201 	orr.w	r2, r3, #1
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ab2:	f003 0302 	and.w	r3, r3, #2
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d011      	beq.n	8012ade <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012abe:	f003 0301 	and.w	r3, r3, #1
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d00b      	beq.n	8012ade <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	2202      	movs	r2, #2
 8012acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ad4:	f043 0204 	orr.w	r2, r3, #4
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ae2:	f003 0304 	and.w	r3, r3, #4
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d011      	beq.n	8012b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012aee:	f003 0301 	and.w	r3, r3, #1
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d00b      	beq.n	8012b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2204      	movs	r2, #4
 8012afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b04:	f043 0202 	orr.w	r2, r3, #2
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d006      	beq.n	8012b26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7fe fca9 	bl	8011470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2200      	movs	r2, #0
 8012b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f040 80a0 	bne.w	8012c74 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b3c:	e853 3f00 	ldrex	r3, [r3]
 8012b40:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	461a      	mov	r2, r3
 8012b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012b58:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012b5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012b5e:	e841 2300 	strex	r3, r2, [r1]
 8012b62:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d1e4      	bne.n	8012b34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	3308      	adds	r3, #8
 8012b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b74:	e853 3f00 	ldrex	r3, [r3]
 8012b78:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b7c:	4b6e      	ldr	r3, [pc, #440]	; (8012d38 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012b7e:	4013      	ands	r3, r2
 8012b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	3308      	adds	r3, #8
 8012b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012b8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8012b90:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b92:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012b94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012b96:	e841 2300 	strex	r3, r2, [r1]
 8012b9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1e3      	bne.n	8012b6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2220      	movs	r2, #32
 8012ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4a60      	ldr	r2, [pc, #384]	; (8012d3c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	d021      	beq.n	8012c04 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d01a      	beq.n	8012c04 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bd6:	e853 3f00 	ldrex	r3, [r3]
 8012bda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	461a      	mov	r2, r3
 8012bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8012bf2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012bf8:	e841 2300 	strex	r3, r2, [r1]
 8012bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1e4      	bne.n	8012bce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d130      	bne.n	8012c6e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1a:	e853 3f00 	ldrex	r3, [r3]
 8012c1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c22:	f023 0310 	bic.w	r3, r3, #16
 8012c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	461a      	mov	r2, r3
 8012c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c34:	643b      	str	r3, [r7, #64]	; 0x40
 8012c36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c3c:	e841 2300 	strex	r3, r2, [r1]
 8012c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1e4      	bne.n	8012c12 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	69db      	ldr	r3, [r3, #28]
 8012c4e:	f003 0310 	and.w	r3, r3, #16
 8012c52:	2b10      	cmp	r3, #16
 8012c54:	d103      	bne.n	8012c5e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2210      	movs	r2, #16
 8012c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c64:	4619      	mov	r1, r3
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f7fe fc0c 	bl	8011484 <HAL_UARTEx_RxEventCallback>
 8012c6c:	e002      	b.n	8012c74 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7ee fc7a 	bl	8001568 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d006      	beq.n	8012c8a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012c80:	f003 0320 	and.w	r3, r3, #32
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f47f aed1 	bne.w	8012a2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d049      	beq.n	8012d30 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012ca2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d242      	bcs.n	8012d30 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	3308      	adds	r3, #8
 8012cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cb2:	6a3b      	ldr	r3, [r7, #32]
 8012cb4:	e853 3f00 	ldrex	r3, [r3]
 8012cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	3308      	adds	r3, #8
 8012cca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cd6:	e841 2300 	strex	r3, r2, [r1]
 8012cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d1e3      	bne.n	8012caa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4a16      	ldr	r2, [pc, #88]	; (8012d40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012ce6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	e853 3f00 	ldrex	r3, [r3]
 8012cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	f043 0320 	orr.w	r3, r3, #32
 8012cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	461a      	mov	r2, r3
 8012d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d0a:	61bb      	str	r3, [r7, #24]
 8012d0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d0e:	6979      	ldr	r1, [r7, #20]
 8012d10:	69ba      	ldr	r2, [r7, #24]
 8012d12:	e841 2300 	strex	r3, r2, [r1]
 8012d16:	613b      	str	r3, [r7, #16]
   return(result);
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1e4      	bne.n	8012ce8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d1e:	e007      	b.n	8012d30 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	699a      	ldr	r2, [r3, #24]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f042 0208 	orr.w	r2, r2, #8
 8012d2e:	619a      	str	r2, [r3, #24]
}
 8012d30:	bf00      	nop
 8012d32:	37b0      	adds	r7, #176	; 0xb0
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	effffffe 	.word	0xeffffffe
 8012d3c:	58000c00 	.word	0x58000c00
 8012d40:	08012675 	.word	0x08012675

08012d44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b0ae      	sub	sp, #184	; 0xb8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d52:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	69db      	ldr	r3, [r3, #28]
 8012d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	689b      	ldr	r3, [r3, #8]
 8012d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d7a:	2b22      	cmp	r3, #34	; 0x22
 8012d7c:	f040 8184 	bne.w	8013088 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d86:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012d8a:	e127      	b.n	8012fdc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d92:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012d9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012da2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012da6:	4013      	ands	r3, r2
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012db4:	1c9a      	adds	r2, r3, #2
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	69db      	ldr	r3, [r3, #28]
 8012dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012dda:	f003 0307 	and.w	r3, r3, #7
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d053      	beq.n	8012e8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012de6:	f003 0301 	and.w	r3, r3, #1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d011      	beq.n	8012e12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d00b      	beq.n	8012e12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e08:	f043 0201 	orr.w	r2, r3, #1
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e16:	f003 0302 	and.w	r3, r3, #2
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d011      	beq.n	8012e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e22:	f003 0301 	and.w	r3, r3, #1
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00b      	beq.n	8012e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2202      	movs	r2, #2
 8012e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e38:	f043 0204 	orr.w	r2, r3, #4
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e46:	f003 0304 	and.w	r3, r3, #4
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d011      	beq.n	8012e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e52:	f003 0301 	and.w	r3, r3, #1
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00b      	beq.n	8012e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2204      	movs	r2, #4
 8012e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e68:	f043 0202 	orr.w	r2, r3, #2
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d006      	beq.n	8012e8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f7fe faf7 	bl	8011470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f040 80a2 	bne.w	8012fdc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ea0:	e853 3f00 	ldrex	r3, [r3]
 8012ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ebe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ec6:	e841 2300 	strex	r3, r2, [r1]
 8012eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d1e2      	bne.n	8012e98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	3308      	adds	r3, #8
 8012ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012edc:	e853 3f00 	ldrex	r3, [r3]
 8012ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012ee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ee4:	4b6e      	ldr	r3, [pc, #440]	; (80130a0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012ee6:	4013      	ands	r3, r2
 8012ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012efe:	e841 2300 	strex	r3, r2, [r1]
 8012f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d1e3      	bne.n	8012ed2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2220      	movs	r2, #32
 8012f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2200      	movs	r2, #0
 8012f16:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a60      	ldr	r2, [pc, #384]	; (80130a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d021      	beq.n	8012f6c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d01a      	beq.n	8012f6c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3e:	e853 3f00 	ldrex	r3, [r3]
 8012f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	461a      	mov	r2, r3
 8012f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f60:	e841 2300 	strex	r3, r2, [r1]
 8012f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d1e4      	bne.n	8012f36 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d130      	bne.n	8012fd6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2200      	movs	r2, #0
 8012f78:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	e853 3f00 	ldrex	r3, [r3]
 8012f86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f8a:	f023 0310 	bic.w	r3, r3, #16
 8012f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	461a      	mov	r2, r3
 8012f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8012f9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fa4:	e841 2300 	strex	r3, r2, [r1]
 8012fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d1e4      	bne.n	8012f7a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	69db      	ldr	r3, [r3, #28]
 8012fb6:	f003 0310 	and.w	r3, r3, #16
 8012fba:	2b10      	cmp	r3, #16
 8012fbc:	d103      	bne.n	8012fc6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2210      	movs	r2, #16
 8012fc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012fcc:	4619      	mov	r1, r3
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7fe fa58 	bl	8011484 <HAL_UARTEx_RxEventCallback>
 8012fd4:	e002      	b.n	8012fdc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7ee fac6 	bl	8001568 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012fdc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d006      	beq.n	8012ff2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012fe8:	f003 0320 	and.w	r3, r3, #32
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f47f aecd 	bne.w	8012d8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ff8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012ffc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013000:	2b00      	cmp	r3, #0
 8013002:	d049      	beq.n	8013098 <UART_RxISR_16BIT_FIFOEN+0x354>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801300a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801300e:	429a      	cmp	r2, r3
 8013010:	d242      	bcs.n	8013098 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	3308      	adds	r3, #8
 8013018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301c:	e853 3f00 	ldrex	r3, [r3]
 8013020:	623b      	str	r3, [r7, #32]
   return(result);
 8013022:	6a3b      	ldr	r3, [r7, #32]
 8013024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	3308      	adds	r3, #8
 8013032:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013036:	633a      	str	r2, [r7, #48]	; 0x30
 8013038:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801303a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801303c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801303e:	e841 2300 	strex	r3, r2, [r1]
 8013042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013046:	2b00      	cmp	r3, #0
 8013048:	d1e3      	bne.n	8013012 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	4a16      	ldr	r2, [pc, #88]	; (80130a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801304e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	e853 3f00 	ldrex	r3, [r3]
 801305c:	60fb      	str	r3, [r7, #12]
   return(result);
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f043 0320 	orr.w	r3, r3, #32
 8013064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	461a      	mov	r2, r3
 801306e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013072:	61fb      	str	r3, [r7, #28]
 8013074:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013076:	69b9      	ldr	r1, [r7, #24]
 8013078:	69fa      	ldr	r2, [r7, #28]
 801307a:	e841 2300 	strex	r3, r2, [r1]
 801307e:	617b      	str	r3, [r7, #20]
   return(result);
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d1e4      	bne.n	8013050 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013086:	e007      	b.n	8013098 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	699a      	ldr	r2, [r3, #24]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f042 0208 	orr.w	r2, r2, #8
 8013096:	619a      	str	r2, [r3, #24]
}
 8013098:	bf00      	nop
 801309a:	37b8      	adds	r7, #184	; 0xb8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	effffffe 	.word	0xeffffffe
 80130a4:	58000c00 	.word	0x58000c00
 80130a8:	0801282d 	.word	0x0801282d

080130ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b083      	sub	sp, #12
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80130b4:	bf00      	nop
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr

080130c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80130c0:	b480      	push	{r7}
 80130c2:	b083      	sub	sp, #12
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80130c8:	bf00      	nop
 80130ca:	370c      	adds	r7, #12
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr

080130d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80130d4:	b480      	push	{r7}
 80130d6:	b083      	sub	sp, #12
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80130dc:	bf00      	nop
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80130e8:	b480      	push	{r7}
 80130ea:	b089      	sub	sp, #36	; 0x24
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80130f6:	2b01      	cmp	r3, #1
 80130f8:	d101      	bne.n	80130fe <HAL_UARTEx_EnableStopMode+0x16>
 80130fa:	2302      	movs	r3, #2
 80130fc:	e021      	b.n	8013142 <HAL_UARTEx_EnableStopMode+0x5a>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2201      	movs	r2, #1
 8013102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	e853 3f00 	ldrex	r3, [r3]
 8013112:	60bb      	str	r3, [r7, #8]
   return(result);
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	f043 0302 	orr.w	r3, r3, #2
 801311a:	61fb      	str	r3, [r7, #28]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	461a      	mov	r2, r3
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	61bb      	str	r3, [r7, #24]
 8013126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013128:	6979      	ldr	r1, [r7, #20]
 801312a:	69ba      	ldr	r2, [r7, #24]
 801312c:	e841 2300 	strex	r3, r2, [r1]
 8013130:	613b      	str	r3, [r7, #16]
   return(result);
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d1e6      	bne.n	8013106 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3724      	adds	r7, #36	; 0x24
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr

0801314e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801314e:	b580      	push	{r7, lr}
 8013150:	b084      	sub	sp, #16
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801315c:	2b01      	cmp	r3, #1
 801315e:	d101      	bne.n	8013164 <HAL_UARTEx_EnableFifoMode+0x16>
 8013160:	2302      	movs	r3, #2
 8013162:	e02b      	b.n	80131bc <HAL_UARTEx_EnableFifoMode+0x6e>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2201      	movs	r2, #1
 8013168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2224      	movs	r2, #36	; 0x24
 8013170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	f022 0201 	bic.w	r2, r2, #1
 801318a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013192:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801319a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 f8c3 	bl	8013330 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2220      	movs	r2, #32
 80131ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2200      	movs	r2, #0
 80131b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80131ba:	2300      	movs	r3, #0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d101      	bne.n	80131da <HAL_UARTEx_DisableFifoMode+0x16>
 80131d6:	2302      	movs	r3, #2
 80131d8:	e027      	b.n	801322a <HAL_UARTEx_DisableFifoMode+0x66>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2201      	movs	r2, #1
 80131de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2224      	movs	r2, #36	; 0x24
 80131e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f022 0201 	bic.w	r2, r2, #1
 8013200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2220      	movs	r2, #32
 801321c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2200      	movs	r2, #0
 8013224:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013228:	2300      	movs	r3, #0
}
 801322a:	4618      	mov	r0, r3
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013236:	b580      	push	{r7, lr}
 8013238:	b084      	sub	sp, #16
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
 801323e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013246:	2b01      	cmp	r3, #1
 8013248:	d101      	bne.n	801324e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801324a:	2302      	movs	r3, #2
 801324c:	e02d      	b.n	80132aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2201      	movs	r2, #1
 8013252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2224      	movs	r2, #36	; 0x24
 801325a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f022 0201 	bic.w	r2, r2, #1
 8013274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	689b      	ldr	r3, [r3, #8]
 801327c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	430a      	orrs	r2, r1
 8013288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 f850 	bl	8013330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2220      	movs	r2, #32
 801329c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80132a8:	2300      	movs	r3, #0
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b084      	sub	sp, #16
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
 80132ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d101      	bne.n	80132ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80132c6:	2302      	movs	r3, #2
 80132c8:	e02d      	b.n	8013326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2201      	movs	r2, #1
 80132ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2224      	movs	r2, #36	; 0x24
 80132d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	681a      	ldr	r2, [r3, #0]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f022 0201 	bic.w	r2, r2, #1
 80132f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	683a      	ldr	r2, [r7, #0]
 8013302:	430a      	orrs	r2, r1
 8013304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 f812 	bl	8013330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	68fa      	ldr	r2, [r7, #12]
 8013312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2220      	movs	r2, #32
 8013318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2200      	movs	r2, #0
 8013320:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013324:	2300      	movs	r3, #0
}
 8013326:	4618      	mov	r0, r3
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
	...

08013330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013330:	b480      	push	{r7}
 8013332:	b085      	sub	sp, #20
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801333c:	2b00      	cmp	r3, #0
 801333e:	d108      	bne.n	8013352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2201      	movs	r2, #1
 8013344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2201      	movs	r2, #1
 801334c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013350:	e031      	b.n	80133b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013352:	2310      	movs	r3, #16
 8013354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013356:	2310      	movs	r3, #16
 8013358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	0e5b      	lsrs	r3, r3, #25
 8013362:	b2db      	uxtb	r3, r3
 8013364:	f003 0307 	and.w	r3, r3, #7
 8013368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	689b      	ldr	r3, [r3, #8]
 8013370:	0f5b      	lsrs	r3, r3, #29
 8013372:	b2db      	uxtb	r3, r3
 8013374:	f003 0307 	and.w	r3, r3, #7
 8013378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801337a:	7bbb      	ldrb	r3, [r7, #14]
 801337c:	7b3a      	ldrb	r2, [r7, #12]
 801337e:	4911      	ldr	r1, [pc, #68]	; (80133c4 <UARTEx_SetNbDataToProcess+0x94>)
 8013380:	5c8a      	ldrb	r2, [r1, r2]
 8013382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013386:	7b3a      	ldrb	r2, [r7, #12]
 8013388:	490f      	ldr	r1, [pc, #60]	; (80133c8 <UARTEx_SetNbDataToProcess+0x98>)
 801338a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801338c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013390:	b29a      	uxth	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013398:	7bfb      	ldrb	r3, [r7, #15]
 801339a:	7b7a      	ldrb	r2, [r7, #13]
 801339c:	4909      	ldr	r1, [pc, #36]	; (80133c4 <UARTEx_SetNbDataToProcess+0x94>)
 801339e:	5c8a      	ldrb	r2, [r1, r2]
 80133a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80133a4:	7b7a      	ldrb	r2, [r7, #13]
 80133a6:	4908      	ldr	r1, [pc, #32]	; (80133c8 <UARTEx_SetNbDataToProcess+0x98>)
 80133a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80133aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80133b6:	bf00      	nop
 80133b8:	3714      	adds	r7, #20
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	080176d4 	.word	0x080176d4
 80133c8:	080176dc 	.word	0x080176dc

080133cc <__NVIC_SetPriority>:
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	4603      	mov	r3, r0
 80133d4:	6039      	str	r1, [r7, #0]
 80133d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80133d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	db0a      	blt.n	80133f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	490c      	ldr	r1, [pc, #48]	; (8013418 <__NVIC_SetPriority+0x4c>)
 80133e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133ea:	0112      	lsls	r2, r2, #4
 80133ec:	b2d2      	uxtb	r2, r2
 80133ee:	440b      	add	r3, r1
 80133f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80133f4:	e00a      	b.n	801340c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	b2da      	uxtb	r2, r3
 80133fa:	4908      	ldr	r1, [pc, #32]	; (801341c <__NVIC_SetPriority+0x50>)
 80133fc:	88fb      	ldrh	r3, [r7, #6]
 80133fe:	f003 030f 	and.w	r3, r3, #15
 8013402:	3b04      	subs	r3, #4
 8013404:	0112      	lsls	r2, r2, #4
 8013406:	b2d2      	uxtb	r2, r2
 8013408:	440b      	add	r3, r1
 801340a:	761a      	strb	r2, [r3, #24]
}
 801340c:	bf00      	nop
 801340e:	370c      	adds	r7, #12
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr
 8013418:	e000e100 	.word	0xe000e100
 801341c:	e000ed00 	.word	0xe000ed00

08013420 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013420:	b580      	push	{r7, lr}
 8013422:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013424:	4b05      	ldr	r3, [pc, #20]	; (801343c <SysTick_Handler+0x1c>)
 8013426:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013428:	f002 f958 	bl	80156dc <xTaskGetSchedulerState>
 801342c:	4603      	mov	r3, r0
 801342e:	2b01      	cmp	r3, #1
 8013430:	d001      	beq.n	8013436 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013432:	f002 ff79 	bl	8016328 <xPortSysTickHandler>
  }
}
 8013436:	bf00      	nop
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	e000e010 	.word	0xe000e010

08013440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013440:	b580      	push	{r7, lr}
 8013442:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013444:	2100      	movs	r1, #0
 8013446:	f06f 0004 	mvn.w	r0, #4
 801344a:	f7ff ffbf 	bl	80133cc <__NVIC_SetPriority>
#endif
}
 801344e:	bf00      	nop
 8013450:	bd80      	pop	{r7, pc}
	...

08013454 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013454:	b480      	push	{r7}
 8013456:	b083      	sub	sp, #12
 8013458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801345a:	f3ef 8305 	mrs	r3, IPSR
 801345e:	603b      	str	r3, [r7, #0]
  return(result);
 8013460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013462:	2b00      	cmp	r3, #0
 8013464:	d003      	beq.n	801346e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013466:	f06f 0305 	mvn.w	r3, #5
 801346a:	607b      	str	r3, [r7, #4]
 801346c:	e00c      	b.n	8013488 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801346e:	4b0a      	ldr	r3, [pc, #40]	; (8013498 <osKernelInitialize+0x44>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d105      	bne.n	8013482 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013476:	4b08      	ldr	r3, [pc, #32]	; (8013498 <osKernelInitialize+0x44>)
 8013478:	2201      	movs	r2, #1
 801347a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801347c:	2300      	movs	r3, #0
 801347e:	607b      	str	r3, [r7, #4]
 8013480:	e002      	b.n	8013488 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013488:	687b      	ldr	r3, [r7, #4]
}
 801348a:	4618      	mov	r0, r3
 801348c:	370c      	adds	r7, #12
 801348e:	46bd      	mov	sp, r7
 8013490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	24001e18 	.word	0x24001e18

0801349c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134a2:	f3ef 8305 	mrs	r3, IPSR
 80134a6:	603b      	str	r3, [r7, #0]
  return(result);
 80134a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d003      	beq.n	80134b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80134ae:	f06f 0305 	mvn.w	r3, #5
 80134b2:	607b      	str	r3, [r7, #4]
 80134b4:	e010      	b.n	80134d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80134b6:	4b0b      	ldr	r3, [pc, #44]	; (80134e4 <osKernelStart+0x48>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d109      	bne.n	80134d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80134be:	f7ff ffbf 	bl	8013440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80134c2:	4b08      	ldr	r3, [pc, #32]	; (80134e4 <osKernelStart+0x48>)
 80134c4:	2202      	movs	r2, #2
 80134c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80134c8:	f001 fc0c 	bl	8014ce4 <vTaskStartScheduler>
      stat = osOK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	607b      	str	r3, [r7, #4]
 80134d0:	e002      	b.n	80134d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80134d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80134d8:	687b      	ldr	r3, [r7, #4]
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	24001e18 	.word	0x24001e18

080134e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b08e      	sub	sp, #56	; 0x38
 80134ec:	af04      	add	r7, sp, #16
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80134f4:	2300      	movs	r3, #0
 80134f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134f8:	f3ef 8305 	mrs	r3, IPSR
 80134fc:	617b      	str	r3, [r7, #20]
  return(result);
 80134fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013500:	2b00      	cmp	r3, #0
 8013502:	d17e      	bne.n	8013602 <osThreadNew+0x11a>
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d07b      	beq.n	8013602 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801350a:	2380      	movs	r3, #128	; 0x80
 801350c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801350e:	2318      	movs	r3, #24
 8013510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013512:	2300      	movs	r3, #0
 8013514:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801351a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d045      	beq.n	80135ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d002      	beq.n	8013530 <osThreadNew+0x48>
        name = attr->name;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	699b      	ldr	r3, [r3, #24]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	699b      	ldr	r3, [r3, #24]
 801353c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d008      	beq.n	8013556 <osThreadNew+0x6e>
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	2b38      	cmp	r3, #56	; 0x38
 8013548:	d805      	bhi.n	8013556 <osThreadNew+0x6e>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	d001      	beq.n	801355a <osThreadNew+0x72>
        return (NULL);
 8013556:	2300      	movs	r3, #0
 8013558:	e054      	b.n	8013604 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	695b      	ldr	r3, [r3, #20]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d003      	beq.n	801356a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	695b      	ldr	r3, [r3, #20]
 8013566:	089b      	lsrs	r3, r3, #2
 8013568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d00e      	beq.n	8013590 <osThreadNew+0xa8>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	68db      	ldr	r3, [r3, #12]
 8013576:	2b5b      	cmp	r3, #91	; 0x5b
 8013578:	d90a      	bls.n	8013590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801357e:	2b00      	cmp	r3, #0
 8013580:	d006      	beq.n	8013590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	695b      	ldr	r3, [r3, #20]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d002      	beq.n	8013590 <osThreadNew+0xa8>
        mem = 1;
 801358a:	2301      	movs	r3, #1
 801358c:	61bb      	str	r3, [r7, #24]
 801358e:	e010      	b.n	80135b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	689b      	ldr	r3, [r3, #8]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d10c      	bne.n	80135b2 <osThreadNew+0xca>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d108      	bne.n	80135b2 <osThreadNew+0xca>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	691b      	ldr	r3, [r3, #16]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d104      	bne.n	80135b2 <osThreadNew+0xca>
          mem = 0;
 80135a8:	2300      	movs	r3, #0
 80135aa:	61bb      	str	r3, [r7, #24]
 80135ac:	e001      	b.n	80135b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80135b2:	69bb      	ldr	r3, [r7, #24]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d110      	bne.n	80135da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80135bc:	687a      	ldr	r2, [r7, #4]
 80135be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80135c0:	9202      	str	r2, [sp, #8]
 80135c2:	9301      	str	r3, [sp, #4]
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	9300      	str	r3, [sp, #0]
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	6a3a      	ldr	r2, [r7, #32]
 80135cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f001 f9b2 	bl	8014938 <xTaskCreateStatic>
 80135d4:	4603      	mov	r3, r0
 80135d6:	613b      	str	r3, [r7, #16]
 80135d8:	e013      	b.n	8013602 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d110      	bne.n	8013602 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80135e0:	6a3b      	ldr	r3, [r7, #32]
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	f107 0310 	add.w	r3, r7, #16
 80135e8:	9301      	str	r3, [sp, #4]
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	9300      	str	r3, [sp, #0]
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135f2:	68f8      	ldr	r0, [r7, #12]
 80135f4:	f001 f9fd 	bl	80149f2 <xTaskCreate>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d001      	beq.n	8013602 <osThreadNew+0x11a>
            hTask = NULL;
 80135fe:	2300      	movs	r3, #0
 8013600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013602:	693b      	ldr	r3, [r7, #16]
}
 8013604:	4618      	mov	r0, r3
 8013606:	3728      	adds	r7, #40	; 0x28
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801360c:	b480      	push	{r7}
 801360e:	b083      	sub	sp, #12
 8013610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013612:	f3ef 8305 	mrs	r3, IPSR
 8013616:	603b      	str	r3, [r7, #0]
  return(result);
 8013618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801361a:	2b00      	cmp	r3, #0
 801361c:	d003      	beq.n	8013626 <osThreadYield+0x1a>
    stat = osErrorISR;
 801361e:	f06f 0305 	mvn.w	r3, #5
 8013622:	607b      	str	r3, [r7, #4]
 8013624:	e009      	b.n	801363a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8013626:	2300      	movs	r3, #0
 8013628:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801362a:	4b07      	ldr	r3, [pc, #28]	; (8013648 <osThreadYield+0x3c>)
 801362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	f3bf 8f4f 	dsb	sy
 8013636:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801363a:	687b      	ldr	r3, [r7, #4]
}
 801363c:	4618      	mov	r0, r3
 801363e:	370c      	adds	r7, #12
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	e000ed04 	.word	0xe000ed04

0801364c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013654:	f3ef 8305 	mrs	r3, IPSR
 8013658:	60bb      	str	r3, [r7, #8]
  return(result);
 801365a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801365c:	2b00      	cmp	r3, #0
 801365e:	d003      	beq.n	8013668 <osDelay+0x1c>
    stat = osErrorISR;
 8013660:	f06f 0305 	mvn.w	r3, #5
 8013664:	60fb      	str	r3, [r7, #12]
 8013666:	e007      	b.n	8013678 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013668:	2300      	movs	r3, #0
 801366a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d002      	beq.n	8013678 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f001 fb02 	bl	8014c7c <vTaskDelay>
    }
  }

  return (stat);
 8013678:	68fb      	ldr	r3, [r7, #12]
}
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}

08013682 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013682:	b580      	push	{r7, lr}
 8013684:	b086      	sub	sp, #24
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801368a:	2300      	movs	r3, #0
 801368c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801368e:	f3ef 8305 	mrs	r3, IPSR
 8013692:	60fb      	str	r3, [r7, #12]
  return(result);
 8013694:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8013696:	2b00      	cmp	r3, #0
 8013698:	d12d      	bne.n	80136f6 <osEventFlagsNew+0x74>
    mem = -1;
 801369a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801369e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d015      	beq.n	80136d2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d006      	beq.n	80136bc <osEventFlagsNew+0x3a>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	2b1f      	cmp	r3, #31
 80136b4:	d902      	bls.n	80136bc <osEventFlagsNew+0x3a>
        mem = 1;
 80136b6:	2301      	movs	r3, #1
 80136b8:	613b      	str	r3, [r7, #16]
 80136ba:	e00c      	b.n	80136d6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d108      	bne.n	80136d6 <osEventFlagsNew+0x54>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d104      	bne.n	80136d6 <osEventFlagsNew+0x54>
          mem = 0;
 80136cc:	2300      	movs	r3, #0
 80136ce:	613b      	str	r3, [r7, #16]
 80136d0:	e001      	b.n	80136d6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80136d2:	2300      	movs	r3, #0
 80136d4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d106      	bne.n	80136ea <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	4618      	mov	r0, r3
 80136e2:	f000 f91d 	bl	8013920 <xEventGroupCreateStatic>
 80136e6:	6178      	str	r0, [r7, #20]
 80136e8:	e005      	b.n	80136f6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d102      	bne.n	80136f6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80136f0:	f000 f94d 	bl	801398e <xEventGroupCreate>
 80136f4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80136f6:	697b      	ldr	r3, [r7, #20]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d004      	beq.n	801371e <osEventFlagsSet+0x1e>
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801371a:	2b00      	cmp	r3, #0
 801371c:	d003      	beq.n	8013726 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801371e:	f06f 0303 	mvn.w	r3, #3
 8013722:	617b      	str	r3, [r7, #20]
 8013724:	e028      	b.n	8013778 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013726:	f3ef 8305 	mrs	r3, IPSR
 801372a:	60fb      	str	r3, [r7, #12]
  return(result);
 801372c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801372e:	2b00      	cmp	r3, #0
 8013730:	d01d      	beq.n	801376e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8013736:	f107 0308 	add.w	r3, r7, #8
 801373a:	461a      	mov	r2, r3
 801373c:	6839      	ldr	r1, [r7, #0]
 801373e:	6938      	ldr	r0, [r7, #16]
 8013740:	f000 fb46 	bl	8013dd0 <xEventGroupSetBitsFromISR>
 8013744:	4603      	mov	r3, r0
 8013746:	2b00      	cmp	r3, #0
 8013748:	d103      	bne.n	8013752 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801374a:	f06f 0302 	mvn.w	r3, #2
 801374e:	617b      	str	r3, [r7, #20]
 8013750:	e012      	b.n	8013778 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00d      	beq.n	8013778 <osEventFlagsSet+0x78>
 801375c:	4b09      	ldr	r3, [pc, #36]	; (8013784 <osEventFlagsSet+0x84>)
 801375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013762:	601a      	str	r2, [r3, #0]
 8013764:	f3bf 8f4f 	dsb	sy
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	e004      	b.n	8013778 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801376e:	6839      	ldr	r1, [r7, #0]
 8013770:	6938      	ldr	r0, [r7, #16]
 8013772:	f000 fa65 	bl	8013c40 <xEventGroupSetBits>
 8013776:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013778:	697b      	ldr	r3, [r7, #20]
}
 801377a:	4618      	mov	r0, r3
 801377c:	3718      	adds	r7, #24
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	e000ed04 	.word	0xe000ed04

08013788 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013788:	b580      	push	{r7, lr}
 801378a:	b086      	sub	sp, #24
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d004      	beq.n	80137a6 <osEventFlagsClear+0x1e>
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d003      	beq.n	80137ae <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80137a6:	f06f 0303 	mvn.w	r3, #3
 80137aa:	617b      	str	r3, [r7, #20]
 80137ac:	e019      	b.n	80137e2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137ae:	f3ef 8305 	mrs	r3, IPSR
 80137b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80137b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d00e      	beq.n	80137d8 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80137ba:	6938      	ldr	r0, [r7, #16]
 80137bc:	f000 fa1c 	bl	8013bf8 <xEventGroupGetBitsFromISR>
 80137c0:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80137c2:	6839      	ldr	r1, [r7, #0]
 80137c4:	6938      	ldr	r0, [r7, #16]
 80137c6:	f000 fa03 	bl	8013bd0 <xEventGroupClearBitsFromISR>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d108      	bne.n	80137e2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80137d0:	f06f 0302 	mvn.w	r3, #2
 80137d4:	617b      	str	r3, [r7, #20]
 80137d6:	e004      	b.n	80137e2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80137d8:	6839      	ldr	r1, [r7, #0]
 80137da:	6938      	ldr	r0, [r7, #16]
 80137dc:	f000 f9c0 	bl	8013b60 <xEventGroupClearBits>
 80137e0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80137e2:	697b      	ldr	r3, [r7, #20]
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3718      	adds	r7, #24
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08c      	sub	sp, #48	; 0x30
 80137f0:	af02      	add	r7, sp, #8
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d004      	beq.n	801380e <osEventFlagsWait+0x22>
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801380a:	2b00      	cmp	r3, #0
 801380c:	d003      	beq.n	8013816 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801380e:	f06f 0303 	mvn.w	r3, #3
 8013812:	61fb      	str	r3, [r7, #28]
 8013814:	e04b      	b.n	80138ae <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013816:	f3ef 8305 	mrs	r3, IPSR
 801381a:	617b      	str	r3, [r7, #20]
  return(result);
 801381c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801381e:	2b00      	cmp	r3, #0
 8013820:	d003      	beq.n	801382a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013822:	f06f 0305 	mvn.w	r3, #5
 8013826:	61fb      	str	r3, [r7, #28]
 8013828:	e041      	b.n	80138ae <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f003 0301 	and.w	r3, r3, #1
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8013834:	2301      	movs	r3, #1
 8013836:	627b      	str	r3, [r7, #36]	; 0x24
 8013838:	e001      	b.n	801383e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801383a:	2300      	movs	r3, #0
 801383c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f003 0302 	and.w	r3, r3, #2
 8013844:	2b00      	cmp	r3, #0
 8013846:	d002      	beq.n	801384e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013848:	2300      	movs	r3, #0
 801384a:	623b      	str	r3, [r7, #32]
 801384c:	e001      	b.n	8013852 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801384e:	2301      	movs	r3, #1
 8013850:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013858:	6a3a      	ldr	r2, [r7, #32]
 801385a:	68b9      	ldr	r1, [r7, #8]
 801385c:	69b8      	ldr	r0, [r7, #24]
 801385e:	f000 f8b1 	bl	80139c4 <xEventGroupWaitBits>
 8013862:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f003 0301 	and.w	r3, r3, #1
 801386a:	2b00      	cmp	r3, #0
 801386c:	d010      	beq.n	8013890 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801386e:	68ba      	ldr	r2, [r7, #8]
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	4013      	ands	r3, r2
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	429a      	cmp	r2, r3
 8013878:	d019      	beq.n	80138ae <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d003      	beq.n	8013888 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013880:	f06f 0301 	mvn.w	r3, #1
 8013884:	61fb      	str	r3, [r7, #28]
 8013886:	e012      	b.n	80138ae <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8013888:	f06f 0302 	mvn.w	r3, #2
 801388c:	61fb      	str	r3, [r7, #28]
 801388e:	e00e      	b.n	80138ae <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013890:	68ba      	ldr	r2, [r7, #8]
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	4013      	ands	r3, r2
 8013896:	2b00      	cmp	r3, #0
 8013898:	d109      	bne.n	80138ae <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d003      	beq.n	80138a8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80138a0:	f06f 0301 	mvn.w	r3, #1
 80138a4:	61fb      	str	r3, [r7, #28]
 80138a6:	e002      	b.n	80138ae <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80138a8:	f06f 0302 	mvn.w	r3, #2
 80138ac:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80138ae:	69fb      	ldr	r3, [r7, #28]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3728      	adds	r7, #40	; 0x28
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80138b8:	b480      	push	{r7}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	4a07      	ldr	r2, [pc, #28]	; (80138e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80138c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	4a06      	ldr	r2, [pc, #24]	; (80138e8 <vApplicationGetIdleTaskMemory+0x30>)
 80138ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2280      	movs	r2, #128	; 0x80
 80138d4:	601a      	str	r2, [r3, #0]
}
 80138d6:	bf00      	nop
 80138d8:	3714      	adds	r7, #20
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr
 80138e2:	bf00      	nop
 80138e4:	24001e1c 	.word	0x24001e1c
 80138e8:	24001e78 	.word	0x24001e78

080138ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80138ec:	b480      	push	{r7}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4a07      	ldr	r2, [pc, #28]	; (8013918 <vApplicationGetTimerTaskMemory+0x2c>)
 80138fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	4a06      	ldr	r2, [pc, #24]	; (801391c <vApplicationGetTimerTaskMemory+0x30>)
 8013902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f44f 7280 	mov.w	r2, #256	; 0x100
 801390a:	601a      	str	r2, [r3, #0]
}
 801390c:	bf00      	nop
 801390e:	3714      	adds	r7, #20
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr
 8013918:	24002078 	.word	0x24002078
 801391c:	240020d4 	.word	0x240020d4

08013920 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013920:	b580      	push	{r7, lr}
 8013922:	b086      	sub	sp, #24
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d10a      	bne.n	8013944 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013932:	f383 8811 	msr	BASEPRI, r3
 8013936:	f3bf 8f6f 	isb	sy
 801393a:	f3bf 8f4f 	dsb	sy
 801393e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013940:	bf00      	nop
 8013942:	e7fe      	b.n	8013942 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013944:	2320      	movs	r3, #32
 8013946:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	2b20      	cmp	r3, #32
 801394c:	d00a      	beq.n	8013964 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013952:	f383 8811 	msr	BASEPRI, r3
 8013956:	f3bf 8f6f 	isb	sy
 801395a:	f3bf 8f4f 	dsb	sy
 801395e:	60fb      	str	r3, [r7, #12]
}
 8013960:	bf00      	nop
 8013962:	e7fe      	b.n	8013962 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d00a      	beq.n	8013984 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2200      	movs	r2, #0
 8013972:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	3304      	adds	r3, #4
 8013978:	4618      	mov	r0, r3
 801397a:	f000 fa3d 	bl	8013df8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	2201      	movs	r2, #1
 8013982:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013984:	697b      	ldr	r3, [r7, #20]
	}
 8013986:	4618      	mov	r0, r3
 8013988:	3718      	adds	r7, #24
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}

0801398e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801398e:	b580      	push	{r7, lr}
 8013990:	b082      	sub	sp, #8
 8013992:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013994:	2020      	movs	r0, #32
 8013996:	f002 fd57 	bl	8016448 <pvPortMalloc>
 801399a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d00a      	beq.n	80139b8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	3304      	adds	r3, #4
 80139ac:	4618      	mov	r0, r3
 80139ae:	f000 fa23 	bl	8013df8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80139b8:	687b      	ldr	r3, [r7, #4]
	}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3708      	adds	r7, #8
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
	...

080139c4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b090      	sub	sp, #64	; 0x40
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
 80139d0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80139d6:	2300      	movs	r3, #0
 80139d8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80139da:	2300      	movs	r3, #0
 80139dc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10a      	bne.n	80139fa <xEventGroupWaitBits+0x36>
	__asm volatile
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	623b      	str	r3, [r7, #32]
}
 80139f6:	bf00      	nop
 80139f8:	e7fe      	b.n	80139f8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d00a      	beq.n	8013a1a <xEventGroupWaitBits+0x56>
	__asm volatile
 8013a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a08:	f383 8811 	msr	BASEPRI, r3
 8013a0c:	f3bf 8f6f 	isb	sy
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	61fb      	str	r3, [r7, #28]
}
 8013a16:	bf00      	nop
 8013a18:	e7fe      	b.n	8013a18 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d10a      	bne.n	8013a36 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a24:	f383 8811 	msr	BASEPRI, r3
 8013a28:	f3bf 8f6f 	isb	sy
 8013a2c:	f3bf 8f4f 	dsb	sy
 8013a30:	61bb      	str	r3, [r7, #24]
}
 8013a32:	bf00      	nop
 8013a34:	e7fe      	b.n	8013a34 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a36:	f001 fe51 	bl	80156dc <xTaskGetSchedulerState>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d102      	bne.n	8013a46 <xEventGroupWaitBits+0x82>
 8013a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d101      	bne.n	8013a4a <xEventGroupWaitBits+0x86>
 8013a46:	2301      	movs	r3, #1
 8013a48:	e000      	b.n	8013a4c <xEventGroupWaitBits+0x88>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10a      	bne.n	8013a66 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a54:	f383 8811 	msr	BASEPRI, r3
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	617b      	str	r3, [r7, #20]
}
 8013a62:	bf00      	nop
 8013a64:	e7fe      	b.n	8013a64 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013a66:	f001 f9a3 	bl	8014db0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013a70:	683a      	ldr	r2, [r7, #0]
 8013a72:	68b9      	ldr	r1, [r7, #8]
 8013a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a76:	f000 f988 	bl	8013d8a <prvTestWaitCondition>
 8013a7a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d00e      	beq.n	8013aa0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a84:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013a86:	2300      	movs	r3, #0
 8013a88:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d028      	beq.n	8013ae2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	43db      	mvns	r3, r3
 8013a98:	401a      	ands	r2, r3
 8013a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a9c:	601a      	str	r2, [r3, #0]
 8013a9e:	e020      	b.n	8013ae2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d104      	bne.n	8013ab0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013aaa:	2301      	movs	r3, #1
 8013aac:	633b      	str	r3, [r7, #48]	; 0x30
 8013aae:	e018      	b.n	8013ae2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d003      	beq.n	8013abe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013abc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d003      	beq.n	8013acc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013aca:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ace:	1d18      	adds	r0, r3, #4
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad4:	4313      	orrs	r3, r2
 8013ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ad8:	4619      	mov	r1, r3
 8013ada:	f001 fb77 	bl	80151cc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013ae2:	f001 f973 	bl	8014dcc <xTaskResumeAll>
 8013ae6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d031      	beq.n	8013b52 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d107      	bne.n	8013b04 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013af4:	4b19      	ldr	r3, [pc, #100]	; (8013b5c <xEventGroupWaitBits+0x198>)
 8013af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013afa:	601a      	str	r2, [r3, #0]
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013b04:	f001 fe76 	bl	80157f4 <uxTaskResetEventItemValue>
 8013b08:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d11a      	bne.n	8013b4a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013b14:	f002 fb76 	bl	8016204 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	68b9      	ldr	r1, [r7, #8]
 8013b22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013b24:	f000 f931 	bl	8013d8a <prvTestWaitCondition>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d009      	beq.n	8013b42 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d006      	beq.n	8013b42 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b36:	681a      	ldr	r2, [r3, #0]
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	43db      	mvns	r3, r3
 8013b3c:	401a      	ands	r2, r3
 8013b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b40:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013b42:	2301      	movs	r3, #1
 8013b44:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013b46:	f002 fb8d 	bl	8016264 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b50:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3740      	adds	r7, #64	; 0x40
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	e000ed04 	.word	0xe000ed04

08013b60 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d10a      	bne.n	8013b8a <xEventGroupClearBits+0x2a>
	__asm volatile
 8013b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b78:	f383 8811 	msr	BASEPRI, r3
 8013b7c:	f3bf 8f6f 	isb	sy
 8013b80:	f3bf 8f4f 	dsb	sy
 8013b84:	60fb      	str	r3, [r7, #12]
}
 8013b86:	bf00      	nop
 8013b88:	e7fe      	b.n	8013b88 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00a      	beq.n	8013baa <xEventGroupClearBits+0x4a>
	__asm volatile
 8013b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b98:	f383 8811 	msr	BASEPRI, r3
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f3bf 8f4f 	dsb	sy
 8013ba4:	60bb      	str	r3, [r7, #8]
}
 8013ba6:	bf00      	nop
 8013ba8:	e7fe      	b.n	8013ba8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013baa:	f002 fb2b 	bl	8016204 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	43db      	mvns	r3, r3
 8013bbc:	401a      	ands	r2, r3
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013bc2:	f002 fb4f 	bl	8016264 <vPortExitCritical>

	return uxReturn;
 8013bc6:	693b      	ldr	r3, [r7, #16]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013bda:	2300      	movs	r3, #0
 8013bdc:	683a      	ldr	r2, [r7, #0]
 8013bde:	6879      	ldr	r1, [r7, #4]
 8013be0:	4804      	ldr	r0, [pc, #16]	; (8013bf4 <xEventGroupClearBitsFromISR+0x24>)
 8013be2:	f002 f9c1 	bl	8015f68 <xTimerPendFunctionCallFromISR>
 8013be6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013be8:	68fb      	ldr	r3, [r7, #12]
	}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	08013d71 	.word	0x08013d71

08013bf8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b089      	sub	sp, #36	; 0x24
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013c04:	f3ef 8211 	mrs	r2, BASEPRI
 8013c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	60fa      	str	r2, [r7, #12]
 8013c1a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c1e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	617b      	str	r3, [r7, #20]
 8013c26:	69bb      	ldr	r3, [r7, #24]
 8013c28:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013c30:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013c32:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013c34:	4618      	mov	r0, r3
 8013c36:	3724      	adds	r7, #36	; 0x24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3e:	4770      	bx	lr

08013c40 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b08e      	sub	sp, #56	; 0x38
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013c52:	2300      	movs	r3, #0
 8013c54:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d10a      	bne.n	8013c72 <xEventGroupSetBits+0x32>
	__asm volatile
 8013c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c60:	f383 8811 	msr	BASEPRI, r3
 8013c64:	f3bf 8f6f 	isb	sy
 8013c68:	f3bf 8f4f 	dsb	sy
 8013c6c:	613b      	str	r3, [r7, #16]
}
 8013c6e:	bf00      	nop
 8013c70:	e7fe      	b.n	8013c70 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d00a      	beq.n	8013c92 <xEventGroupSetBits+0x52>
	__asm volatile
 8013c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c80:	f383 8811 	msr	BASEPRI, r3
 8013c84:	f3bf 8f6f 	isb	sy
 8013c88:	f3bf 8f4f 	dsb	sy
 8013c8c:	60fb      	str	r3, [r7, #12]
}
 8013c8e:	bf00      	nop
 8013c90:	e7fe      	b.n	8013c90 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c94:	3304      	adds	r3, #4
 8013c96:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	3308      	adds	r3, #8
 8013c9c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013c9e:	f001 f887 	bl	8014db0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	431a      	orrs	r2, r3
 8013cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013cb4:	e03c      	b.n	8013d30 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ccc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013cd4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d108      	bne.n	8013cf2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	4013      	ands	r3, r2
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00b      	beq.n	8013d04 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013cec:	2301      	movs	r3, #1
 8013cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cf0:	e008      	b.n	8013d04 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	4013      	ands	r3, r2
 8013cfa:	69ba      	ldr	r2, [r7, #24]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d101      	bne.n	8013d04 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013d00:	2301      	movs	r3, #1
 8013d02:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d010      	beq.n	8013d2c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d003      	beq.n	8013d1c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013d24:	4619      	mov	r1, r3
 8013d26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013d28:	f001 fb1c 	bl	8015364 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d32:	6a3b      	ldr	r3, [r7, #32]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d1be      	bne.n	8013cb6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	43db      	mvns	r3, r3
 8013d40:	401a      	ands	r2, r3
 8013d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d44:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013d46:	f001 f841 	bl	8014dcc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4c:	681b      	ldr	r3, [r3, #0]
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3738      	adds	r7, #56	; 0x38
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b082      	sub	sp, #8
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
 8013d5e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d60:	6839      	ldr	r1, [r7, #0]
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f7ff ff6c 	bl	8013c40 <xEventGroupSetBits>
}
 8013d68:	bf00      	nop
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d7a:	6839      	ldr	r1, [r7, #0]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff feef 	bl	8013b60 <xEventGroupClearBits>
}
 8013d82:	bf00      	nop
 8013d84:	3708      	adds	r7, #8
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}

08013d8a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013d8a:	b480      	push	{r7}
 8013d8c:	b087      	sub	sp, #28
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	60f8      	str	r0, [r7, #12]
 8013d92:	60b9      	str	r1, [r7, #8]
 8013d94:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013d96:	2300      	movs	r3, #0
 8013d98:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d107      	bne.n	8013db0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	4013      	ands	r3, r2
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d00a      	beq.n	8013dc0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013daa:	2301      	movs	r3, #1
 8013dac:	617b      	str	r3, [r7, #20]
 8013dae:	e007      	b.n	8013dc0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	4013      	ands	r3, r2
 8013db6:	68ba      	ldr	r2, [r7, #8]
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d101      	bne.n	8013dc0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013dc0:	697b      	ldr	r3, [r7, #20]
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	371c      	adds	r7, #28
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
	...

08013dd0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b086      	sub	sp, #24
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	68ba      	ldr	r2, [r7, #8]
 8013de0:	68f9      	ldr	r1, [r7, #12]
 8013de2:	4804      	ldr	r0, [pc, #16]	; (8013df4 <xEventGroupSetBitsFromISR+0x24>)
 8013de4:	f002 f8c0 	bl	8015f68 <xTimerPendFunctionCallFromISR>
 8013de8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013dea:	697b      	ldr	r3, [r7, #20]
	}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3718      	adds	r7, #24
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}
 8013df4:	08013d57 	.word	0x08013d57

08013df8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f103 0208 	add.w	r2, r3, #8
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f103 0208 	add.w	r2, r3, #8
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f103 0208 	add.w	r2, r3, #8
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013e2c:	bf00      	nop
 8013e2e:	370c      	adds	r7, #12
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013e46:	bf00      	nop
 8013e48:	370c      	adds	r7, #12
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr

08013e52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e52:	b480      	push	{r7}
 8013e54:	b085      	sub	sp, #20
 8013e56:	af00      	add	r7, sp, #0
 8013e58:	6078      	str	r0, [r7, #4]
 8013e5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	68fa      	ldr	r2, [r7, #12]
 8013e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	689a      	ldr	r2, [r3, #8]
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	689b      	ldr	r3, [r3, #8]
 8013e74:	683a      	ldr	r2, [r7, #0]
 8013e76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	683a      	ldr	r2, [r7, #0]
 8013e7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	1c5a      	adds	r2, r3, #1
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	601a      	str	r2, [r3, #0]
}
 8013e8e:	bf00      	nop
 8013e90:	3714      	adds	r7, #20
 8013e92:	46bd      	mov	sp, r7
 8013e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e98:	4770      	bx	lr

08013e9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e9a:	b480      	push	{r7}
 8013e9c:	b085      	sub	sp, #20
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	6078      	str	r0, [r7, #4]
 8013ea2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eb0:	d103      	bne.n	8013eba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	691b      	ldr	r3, [r3, #16]
 8013eb6:	60fb      	str	r3, [r7, #12]
 8013eb8:	e00c      	b.n	8013ed4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	3308      	adds	r3, #8
 8013ebe:	60fb      	str	r3, [r7, #12]
 8013ec0:	e002      	b.n	8013ec8 <vListInsert+0x2e>
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	60fb      	str	r3, [r7, #12]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d2f6      	bcs.n	8013ec2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	685a      	ldr	r2, [r3, #4]
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	683a      	ldr	r2, [r7, #0]
 8013ee2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	683a      	ldr	r2, [r7, #0]
 8013eee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	1c5a      	adds	r2, r3, #1
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	601a      	str	r2, [r3, #0]
}
 8013f00:	bf00      	nop
 8013f02:	3714      	adds	r7, #20
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr

08013f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	691b      	ldr	r3, [r3, #16]
 8013f18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	6892      	ldr	r2, [r2, #8]
 8013f22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	689b      	ldr	r3, [r3, #8]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	6852      	ldr	r2, [r2, #4]
 8013f2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d103      	bne.n	8013f40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	689a      	ldr	r2, [r3, #8]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2200      	movs	r2, #0
 8013f44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	1e5a      	subs	r2, r3, #1
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3714      	adds	r7, #20
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d10a      	bne.n	8013f8a <xQueueGenericReset+0x2a>
	__asm volatile
 8013f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f78:	f383 8811 	msr	BASEPRI, r3
 8013f7c:	f3bf 8f6f 	isb	sy
 8013f80:	f3bf 8f4f 	dsb	sy
 8013f84:	60bb      	str	r3, [r7, #8]
}
 8013f86:	bf00      	nop
 8013f88:	e7fe      	b.n	8013f88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013f8a:	f002 f93b 	bl	8016204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f96:	68f9      	ldr	r1, [r7, #12]
 8013f98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f9a:	fb01 f303 	mul.w	r3, r1, r3
 8013f9e:	441a      	add	r2, r3
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	681a      	ldr	r2, [r3, #0]
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681a      	ldr	r2, [r3, #0]
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	68f9      	ldr	r1, [r7, #12]
 8013fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013fc0:	fb01 f303 	mul.w	r3, r1, r3
 8013fc4:	441a      	add	r2, r3
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	22ff      	movs	r2, #255	; 0xff
 8013fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	22ff      	movs	r2, #255	; 0xff
 8013fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d114      	bne.n	801400a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d01a      	beq.n	801401e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	3310      	adds	r3, #16
 8013fec:	4618      	mov	r0, r3
 8013fee:	f001 f955 	bl	801529c <xTaskRemoveFromEventList>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d012      	beq.n	801401e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013ff8:	4b0c      	ldr	r3, [pc, #48]	; (801402c <xQueueGenericReset+0xcc>)
 8013ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ffe:	601a      	str	r2, [r3, #0]
 8014000:	f3bf 8f4f 	dsb	sy
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	e009      	b.n	801401e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	3310      	adds	r3, #16
 801400e:	4618      	mov	r0, r3
 8014010:	f7ff fef2 	bl	8013df8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	3324      	adds	r3, #36	; 0x24
 8014018:	4618      	mov	r0, r3
 801401a:	f7ff feed 	bl	8013df8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801401e:	f002 f921 	bl	8016264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014022:	2301      	movs	r3, #1
}
 8014024:	4618      	mov	r0, r3
 8014026:	3710      	adds	r7, #16
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	e000ed04 	.word	0xe000ed04

08014030 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014030:	b580      	push	{r7, lr}
 8014032:	b08e      	sub	sp, #56	; 0x38
 8014034:	af02      	add	r7, sp, #8
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
 801403c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d10a      	bne.n	801405a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8014044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014048:	f383 8811 	msr	BASEPRI, r3
 801404c:	f3bf 8f6f 	isb	sy
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014056:	bf00      	nop
 8014058:	e7fe      	b.n	8014058 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d10a      	bne.n	8014076 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014064:	f383 8811 	msr	BASEPRI, r3
 8014068:	f3bf 8f6f 	isb	sy
 801406c:	f3bf 8f4f 	dsb	sy
 8014070:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014072:	bf00      	nop
 8014074:	e7fe      	b.n	8014074 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d002      	beq.n	8014082 <xQueueGenericCreateStatic+0x52>
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <xQueueGenericCreateStatic+0x56>
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <xQueueGenericCreateStatic+0x58>
 8014086:	2300      	movs	r3, #0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d10a      	bne.n	80140a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014090:	f383 8811 	msr	BASEPRI, r3
 8014094:	f3bf 8f6f 	isb	sy
 8014098:	f3bf 8f4f 	dsb	sy
 801409c:	623b      	str	r3, [r7, #32]
}
 801409e:	bf00      	nop
 80140a0:	e7fe      	b.n	80140a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d102      	bne.n	80140ae <xQueueGenericCreateStatic+0x7e>
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <xQueueGenericCreateStatic+0x82>
 80140ae:	2301      	movs	r3, #1
 80140b0:	e000      	b.n	80140b4 <xQueueGenericCreateStatic+0x84>
 80140b2:	2300      	movs	r3, #0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d10a      	bne.n	80140ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80140b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140bc:	f383 8811 	msr	BASEPRI, r3
 80140c0:	f3bf 8f6f 	isb	sy
 80140c4:	f3bf 8f4f 	dsb	sy
 80140c8:	61fb      	str	r3, [r7, #28]
}
 80140ca:	bf00      	nop
 80140cc:	e7fe      	b.n	80140cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80140ce:	2350      	movs	r3, #80	; 0x50
 80140d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	2b50      	cmp	r3, #80	; 0x50
 80140d6:	d00a      	beq.n	80140ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80140d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140dc:	f383 8811 	msr	BASEPRI, r3
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f3bf 8f4f 	dsb	sy
 80140e8:	61bb      	str	r3, [r7, #24]
}
 80140ea:	bf00      	nop
 80140ec:	e7fe      	b.n	80140ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80140ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80140f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d00d      	beq.n	8014116 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80140fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fc:	2201      	movs	r2, #1
 80140fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014102:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014108:	9300      	str	r3, [sp, #0]
 801410a:	4613      	mov	r3, r2
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	68b9      	ldr	r1, [r7, #8]
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f000 f805 	bl	8014120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014118:	4618      	mov	r0, r3
 801411a:	3730      	adds	r7, #48	; 0x30
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
 801412c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d103      	bne.n	801413c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	69ba      	ldr	r2, [r7, #24]
 8014138:	601a      	str	r2, [r3, #0]
 801413a:	e002      	b.n	8014142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	68fa      	ldr	r2, [r7, #12]
 8014146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801414e:	2101      	movs	r1, #1
 8014150:	69b8      	ldr	r0, [r7, #24]
 8014152:	f7ff ff05 	bl	8013f60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	78fa      	ldrb	r2, [r7, #3]
 801415a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801415e:	bf00      	nop
 8014160:	3710      	adds	r7, #16
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
	...

08014168 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b08e      	sub	sp, #56	; 0x38
 801416c:	af00      	add	r7, sp, #0
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014176:	2300      	movs	r3, #0
 8014178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014180:	2b00      	cmp	r3, #0
 8014182:	d10a      	bne.n	801419a <xQueueGenericSend+0x32>
	__asm volatile
 8014184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014188:	f383 8811 	msr	BASEPRI, r3
 801418c:	f3bf 8f6f 	isb	sy
 8014190:	f3bf 8f4f 	dsb	sy
 8014194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014196:	bf00      	nop
 8014198:	e7fe      	b.n	8014198 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d103      	bne.n	80141a8 <xQueueGenericSend+0x40>
 80141a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d101      	bne.n	80141ac <xQueueGenericSend+0x44>
 80141a8:	2301      	movs	r3, #1
 80141aa:	e000      	b.n	80141ae <xQueueGenericSend+0x46>
 80141ac:	2300      	movs	r3, #0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d10a      	bne.n	80141c8 <xQueueGenericSend+0x60>
	__asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b6:	f383 8811 	msr	BASEPRI, r3
 80141ba:	f3bf 8f6f 	isb	sy
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141c4:	bf00      	nop
 80141c6:	e7fe      	b.n	80141c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	2b02      	cmp	r3, #2
 80141cc:	d103      	bne.n	80141d6 <xQueueGenericSend+0x6e>
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141d2:	2b01      	cmp	r3, #1
 80141d4:	d101      	bne.n	80141da <xQueueGenericSend+0x72>
 80141d6:	2301      	movs	r3, #1
 80141d8:	e000      	b.n	80141dc <xQueueGenericSend+0x74>
 80141da:	2300      	movs	r3, #0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d10a      	bne.n	80141f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80141e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e4:	f383 8811 	msr	BASEPRI, r3
 80141e8:	f3bf 8f6f 	isb	sy
 80141ec:	f3bf 8f4f 	dsb	sy
 80141f0:	623b      	str	r3, [r7, #32]
}
 80141f2:	bf00      	nop
 80141f4:	e7fe      	b.n	80141f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141f6:	f001 fa71 	bl	80156dc <xTaskGetSchedulerState>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d102      	bne.n	8014206 <xQueueGenericSend+0x9e>
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d101      	bne.n	801420a <xQueueGenericSend+0xa2>
 8014206:	2301      	movs	r3, #1
 8014208:	e000      	b.n	801420c <xQueueGenericSend+0xa4>
 801420a:	2300      	movs	r3, #0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d10a      	bne.n	8014226 <xQueueGenericSend+0xbe>
	__asm volatile
 8014210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014214:	f383 8811 	msr	BASEPRI, r3
 8014218:	f3bf 8f6f 	isb	sy
 801421c:	f3bf 8f4f 	dsb	sy
 8014220:	61fb      	str	r3, [r7, #28]
}
 8014222:	bf00      	nop
 8014224:	e7fe      	b.n	8014224 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014226:	f001 ffed 	bl	8016204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014232:	429a      	cmp	r2, r3
 8014234:	d302      	bcc.n	801423c <xQueueGenericSend+0xd4>
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	2b02      	cmp	r3, #2
 801423a:	d129      	bne.n	8014290 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801423c:	683a      	ldr	r2, [r7, #0]
 801423e:	68b9      	ldr	r1, [r7, #8]
 8014240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014242:	f000 fa0b 	bl	801465c <prvCopyDataToQueue>
 8014246:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424c:	2b00      	cmp	r3, #0
 801424e:	d010      	beq.n	8014272 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014252:	3324      	adds	r3, #36	; 0x24
 8014254:	4618      	mov	r0, r3
 8014256:	f001 f821 	bl	801529c <xTaskRemoveFromEventList>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d013      	beq.n	8014288 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014260:	4b3f      	ldr	r3, [pc, #252]	; (8014360 <xQueueGenericSend+0x1f8>)
 8014262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014266:	601a      	str	r2, [r3, #0]
 8014268:	f3bf 8f4f 	dsb	sy
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	e00a      	b.n	8014288 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014274:	2b00      	cmp	r3, #0
 8014276:	d007      	beq.n	8014288 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014278:	4b39      	ldr	r3, [pc, #228]	; (8014360 <xQueueGenericSend+0x1f8>)
 801427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801427e:	601a      	str	r2, [r3, #0]
 8014280:	f3bf 8f4f 	dsb	sy
 8014284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014288:	f001 ffec 	bl	8016264 <vPortExitCritical>
				return pdPASS;
 801428c:	2301      	movs	r3, #1
 801428e:	e063      	b.n	8014358 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d103      	bne.n	801429e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014296:	f001 ffe5 	bl	8016264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801429a:	2300      	movs	r3, #0
 801429c:	e05c      	b.n	8014358 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d106      	bne.n	80142b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142a4:	f107 0314 	add.w	r3, r7, #20
 80142a8:	4618      	mov	r0, r3
 80142aa:	f001 f8bd 	bl	8015428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142ae:	2301      	movs	r3, #1
 80142b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142b2:	f001 ffd7 	bl	8016264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142b6:	f000 fd7b 	bl	8014db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142ba:	f001 ffa3 	bl	8016204 <vPortEnterCritical>
 80142be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142c4:	b25b      	sxtb	r3, r3
 80142c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142ca:	d103      	bne.n	80142d4 <xQueueGenericSend+0x16c>
 80142cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ce:	2200      	movs	r2, #0
 80142d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142da:	b25b      	sxtb	r3, r3
 80142dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142e0:	d103      	bne.n	80142ea <xQueueGenericSend+0x182>
 80142e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e4:	2200      	movs	r2, #0
 80142e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142ea:	f001 ffbb 	bl	8016264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142ee:	1d3a      	adds	r2, r7, #4
 80142f0:	f107 0314 	add.w	r3, r7, #20
 80142f4:	4611      	mov	r1, r2
 80142f6:	4618      	mov	r0, r3
 80142f8:	f001 f8ac 	bl	8015454 <xTaskCheckForTimeOut>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d124      	bne.n	801434c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014304:	f000 faa2 	bl	801484c <prvIsQueueFull>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d018      	beq.n	8014340 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014310:	3310      	adds	r3, #16
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	4611      	mov	r1, r2
 8014316:	4618      	mov	r0, r3
 8014318:	f000 ff34 	bl	8015184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801431c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801431e:	f000 fa2d 	bl	801477c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014322:	f000 fd53 	bl	8014dcc <xTaskResumeAll>
 8014326:	4603      	mov	r3, r0
 8014328:	2b00      	cmp	r3, #0
 801432a:	f47f af7c 	bne.w	8014226 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801432e:	4b0c      	ldr	r3, [pc, #48]	; (8014360 <xQueueGenericSend+0x1f8>)
 8014330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014334:	601a      	str	r2, [r3, #0]
 8014336:	f3bf 8f4f 	dsb	sy
 801433a:	f3bf 8f6f 	isb	sy
 801433e:	e772      	b.n	8014226 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014342:	f000 fa1b 	bl	801477c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014346:	f000 fd41 	bl	8014dcc <xTaskResumeAll>
 801434a:	e76c      	b.n	8014226 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801434c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801434e:	f000 fa15 	bl	801477c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014352:	f000 fd3b 	bl	8014dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014358:	4618      	mov	r0, r3
 801435a:	3738      	adds	r7, #56	; 0x38
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	e000ed04 	.word	0xe000ed04

08014364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b090      	sub	sp, #64	; 0x40
 8014368:	af00      	add	r7, sp, #0
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
 8014370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014378:	2b00      	cmp	r3, #0
 801437a:	d10a      	bne.n	8014392 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014380:	f383 8811 	msr	BASEPRI, r3
 8014384:	f3bf 8f6f 	isb	sy
 8014388:	f3bf 8f4f 	dsb	sy
 801438c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801438e:	bf00      	nop
 8014390:	e7fe      	b.n	8014390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d103      	bne.n	80143a0 <xQueueGenericSendFromISR+0x3c>
 8014398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801439c:	2b00      	cmp	r3, #0
 801439e:	d101      	bne.n	80143a4 <xQueueGenericSendFromISR+0x40>
 80143a0:	2301      	movs	r3, #1
 80143a2:	e000      	b.n	80143a6 <xQueueGenericSendFromISR+0x42>
 80143a4:	2300      	movs	r3, #0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d10a      	bne.n	80143c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80143aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ae:	f383 8811 	msr	BASEPRI, r3
 80143b2:	f3bf 8f6f 	isb	sy
 80143b6:	f3bf 8f4f 	dsb	sy
 80143ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143bc:	bf00      	nop
 80143be:	e7fe      	b.n	80143be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	2b02      	cmp	r3, #2
 80143c4:	d103      	bne.n	80143ce <xQueueGenericSendFromISR+0x6a>
 80143c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d101      	bne.n	80143d2 <xQueueGenericSendFromISR+0x6e>
 80143ce:	2301      	movs	r3, #1
 80143d0:	e000      	b.n	80143d4 <xQueueGenericSendFromISR+0x70>
 80143d2:	2300      	movs	r3, #0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d10a      	bne.n	80143ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80143d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143dc:	f383 8811 	msr	BASEPRI, r3
 80143e0:	f3bf 8f6f 	isb	sy
 80143e4:	f3bf 8f4f 	dsb	sy
 80143e8:	623b      	str	r3, [r7, #32]
}
 80143ea:	bf00      	nop
 80143ec:	e7fe      	b.n	80143ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80143ee:	f001 ffeb 	bl	80163c8 <vPortValidateInterruptPriority>
	__asm volatile
 80143f2:	f3ef 8211 	mrs	r2, BASEPRI
 80143f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fa:	f383 8811 	msr	BASEPRI, r3
 80143fe:	f3bf 8f6f 	isb	sy
 8014402:	f3bf 8f4f 	dsb	sy
 8014406:	61fa      	str	r2, [r7, #28]
 8014408:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801440a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801440c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014416:	429a      	cmp	r2, r3
 8014418:	d302      	bcc.n	8014420 <xQueueGenericSendFromISR+0xbc>
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	2b02      	cmp	r3, #2
 801441e:	d12f      	bne.n	8014480 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801442e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014430:	683a      	ldr	r2, [r7, #0]
 8014432:	68b9      	ldr	r1, [r7, #8]
 8014434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014436:	f000 f911 	bl	801465c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801443a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801443e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014442:	d112      	bne.n	801446a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014448:	2b00      	cmp	r3, #0
 801444a:	d016      	beq.n	801447a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801444e:	3324      	adds	r3, #36	; 0x24
 8014450:	4618      	mov	r0, r3
 8014452:	f000 ff23 	bl	801529c <xTaskRemoveFromEventList>
 8014456:	4603      	mov	r3, r0
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00e      	beq.n	801447a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00b      	beq.n	801447a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2201      	movs	r2, #1
 8014466:	601a      	str	r2, [r3, #0]
 8014468:	e007      	b.n	801447a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801446a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801446e:	3301      	adds	r3, #1
 8014470:	b2db      	uxtb	r3, r3
 8014472:	b25a      	sxtb	r2, r3
 8014474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801447a:	2301      	movs	r3, #1
 801447c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801447e:	e001      	b.n	8014484 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014480:	2300      	movs	r3, #0
 8014482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014486:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	f383 8811 	msr	BASEPRI, r3
}
 801448e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014492:	4618      	mov	r0, r3
 8014494:	3740      	adds	r7, #64	; 0x40
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
	...

0801449c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b08c      	sub	sp, #48	; 0x30
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	60b9      	str	r1, [r7, #8]
 80144a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d10a      	bne.n	80144cc <xQueueReceive+0x30>
	__asm volatile
 80144b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ba:	f383 8811 	msr	BASEPRI, r3
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	f3bf 8f4f 	dsb	sy
 80144c6:	623b      	str	r3, [r7, #32]
}
 80144c8:	bf00      	nop
 80144ca:	e7fe      	b.n	80144ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d103      	bne.n	80144da <xQueueReceive+0x3e>
 80144d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d101      	bne.n	80144de <xQueueReceive+0x42>
 80144da:	2301      	movs	r3, #1
 80144dc:	e000      	b.n	80144e0 <xQueueReceive+0x44>
 80144de:	2300      	movs	r3, #0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d10a      	bne.n	80144fa <xQueueReceive+0x5e>
	__asm volatile
 80144e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e8:	f383 8811 	msr	BASEPRI, r3
 80144ec:	f3bf 8f6f 	isb	sy
 80144f0:	f3bf 8f4f 	dsb	sy
 80144f4:	61fb      	str	r3, [r7, #28]
}
 80144f6:	bf00      	nop
 80144f8:	e7fe      	b.n	80144f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80144fa:	f001 f8ef 	bl	80156dc <xTaskGetSchedulerState>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d102      	bne.n	801450a <xQueueReceive+0x6e>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d101      	bne.n	801450e <xQueueReceive+0x72>
 801450a:	2301      	movs	r3, #1
 801450c:	e000      	b.n	8014510 <xQueueReceive+0x74>
 801450e:	2300      	movs	r3, #0
 8014510:	2b00      	cmp	r3, #0
 8014512:	d10a      	bne.n	801452a <xQueueReceive+0x8e>
	__asm volatile
 8014514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014518:	f383 8811 	msr	BASEPRI, r3
 801451c:	f3bf 8f6f 	isb	sy
 8014520:	f3bf 8f4f 	dsb	sy
 8014524:	61bb      	str	r3, [r7, #24]
}
 8014526:	bf00      	nop
 8014528:	e7fe      	b.n	8014528 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801452a:	f001 fe6b 	bl	8016204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014532:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014536:	2b00      	cmp	r3, #0
 8014538:	d01f      	beq.n	801457a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801453a:	68b9      	ldr	r1, [r7, #8]
 801453c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801453e:	f000 f8f7 	bl	8014730 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014544:	1e5a      	subs	r2, r3, #1
 8014546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014548:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454c:	691b      	ldr	r3, [r3, #16]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d00f      	beq.n	8014572 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014554:	3310      	adds	r3, #16
 8014556:	4618      	mov	r0, r3
 8014558:	f000 fea0 	bl	801529c <xTaskRemoveFromEventList>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d007      	beq.n	8014572 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014562:	4b3d      	ldr	r3, [pc, #244]	; (8014658 <xQueueReceive+0x1bc>)
 8014564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014568:	601a      	str	r2, [r3, #0]
 801456a:	f3bf 8f4f 	dsb	sy
 801456e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014572:	f001 fe77 	bl	8016264 <vPortExitCritical>
				return pdPASS;
 8014576:	2301      	movs	r3, #1
 8014578:	e069      	b.n	801464e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d103      	bne.n	8014588 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014580:	f001 fe70 	bl	8016264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014584:	2300      	movs	r3, #0
 8014586:	e062      	b.n	801464e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801458a:	2b00      	cmp	r3, #0
 801458c:	d106      	bne.n	801459c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801458e:	f107 0310 	add.w	r3, r7, #16
 8014592:	4618      	mov	r0, r3
 8014594:	f000 ff48 	bl	8015428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014598:	2301      	movs	r3, #1
 801459a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801459c:	f001 fe62 	bl	8016264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145a0:	f000 fc06 	bl	8014db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145a4:	f001 fe2e 	bl	8016204 <vPortEnterCritical>
 80145a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145ae:	b25b      	sxtb	r3, r3
 80145b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145b4:	d103      	bne.n	80145be <xQueueReceive+0x122>
 80145b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b8:	2200      	movs	r2, #0
 80145ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145c4:	b25b      	sxtb	r3, r3
 80145c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145ca:	d103      	bne.n	80145d4 <xQueueReceive+0x138>
 80145cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ce:	2200      	movs	r2, #0
 80145d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145d4:	f001 fe46 	bl	8016264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145d8:	1d3a      	adds	r2, r7, #4
 80145da:	f107 0310 	add.w	r3, r7, #16
 80145de:	4611      	mov	r1, r2
 80145e0:	4618      	mov	r0, r3
 80145e2:	f000 ff37 	bl	8015454 <xTaskCheckForTimeOut>
 80145e6:	4603      	mov	r3, r0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d123      	bne.n	8014634 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145ee:	f000 f917 	bl	8014820 <prvIsQueueEmpty>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d017      	beq.n	8014628 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145fa:	3324      	adds	r3, #36	; 0x24
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	4611      	mov	r1, r2
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fdbf 	bl	8015184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014608:	f000 f8b8 	bl	801477c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801460c:	f000 fbde 	bl	8014dcc <xTaskResumeAll>
 8014610:	4603      	mov	r3, r0
 8014612:	2b00      	cmp	r3, #0
 8014614:	d189      	bne.n	801452a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014616:	4b10      	ldr	r3, [pc, #64]	; (8014658 <xQueueReceive+0x1bc>)
 8014618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801461c:	601a      	str	r2, [r3, #0]
 801461e:	f3bf 8f4f 	dsb	sy
 8014622:	f3bf 8f6f 	isb	sy
 8014626:	e780      	b.n	801452a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801462a:	f000 f8a7 	bl	801477c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801462e:	f000 fbcd 	bl	8014dcc <xTaskResumeAll>
 8014632:	e77a      	b.n	801452a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014636:	f000 f8a1 	bl	801477c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801463a:	f000 fbc7 	bl	8014dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801463e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014640:	f000 f8ee 	bl	8014820 <prvIsQueueEmpty>
 8014644:	4603      	mov	r3, r0
 8014646:	2b00      	cmp	r3, #0
 8014648:	f43f af6f 	beq.w	801452a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801464c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801464e:	4618      	mov	r0, r3
 8014650:	3730      	adds	r7, #48	; 0x30
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	e000ed04 	.word	0xe000ed04

0801465c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b086      	sub	sp, #24
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014668:	2300      	movs	r3, #0
 801466a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014670:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014676:	2b00      	cmp	r3, #0
 8014678:	d10d      	bne.n	8014696 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d14d      	bne.n	801471e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	689b      	ldr	r3, [r3, #8]
 8014686:	4618      	mov	r0, r3
 8014688:	f001 f846 	bl	8015718 <xTaskPriorityDisinherit>
 801468c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	2200      	movs	r2, #0
 8014692:	609a      	str	r2, [r3, #8]
 8014694:	e043      	b.n	801471e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d119      	bne.n	80146d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6858      	ldr	r0, [r3, #4]
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146a4:	461a      	mov	r2, r3
 80146a6:	68b9      	ldr	r1, [r7, #8]
 80146a8:	f002 f8e2 	bl	8016870 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	685a      	ldr	r2, [r3, #4]
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b4:	441a      	add	r2, r3
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	685a      	ldr	r2, [r3, #4]
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	689b      	ldr	r3, [r3, #8]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d32b      	bcc.n	801471e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	605a      	str	r2, [r3, #4]
 80146ce:	e026      	b.n	801471e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	68d8      	ldr	r0, [r3, #12]
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146d8:	461a      	mov	r2, r3
 80146da:	68b9      	ldr	r1, [r7, #8]
 80146dc:	f002 f8c8 	bl	8016870 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	68da      	ldr	r2, [r3, #12]
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146e8:	425b      	negs	r3, r3
 80146ea:	441a      	add	r2, r3
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	68da      	ldr	r2, [r3, #12]
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d207      	bcs.n	801470c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	689a      	ldr	r2, [r3, #8]
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014704:	425b      	negs	r3, r3
 8014706:	441a      	add	r2, r3
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b02      	cmp	r3, #2
 8014710:	d105      	bne.n	801471e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d002      	beq.n	801471e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	3b01      	subs	r3, #1
 801471c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	1c5a      	adds	r2, r3, #1
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014726:	697b      	ldr	r3, [r7, #20]
}
 8014728:	4618      	mov	r0, r3
 801472a:	3718      	adds	r7, #24
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801473e:	2b00      	cmp	r3, #0
 8014740:	d018      	beq.n	8014774 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	68da      	ldr	r2, [r3, #12]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801474a:	441a      	add	r2, r3
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	68da      	ldr	r2, [r3, #12]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	689b      	ldr	r3, [r3, #8]
 8014758:	429a      	cmp	r2, r3
 801475a:	d303      	bcc.n	8014764 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	68d9      	ldr	r1, [r3, #12]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801476c:	461a      	mov	r2, r3
 801476e:	6838      	ldr	r0, [r7, #0]
 8014770:	f002 f87e 	bl	8016870 <memcpy>
	}
}
 8014774:	bf00      	nop
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}

0801477c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014784:	f001 fd3e 	bl	8016204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801478e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014790:	e011      	b.n	80147b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014796:	2b00      	cmp	r3, #0
 8014798:	d012      	beq.n	80147c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	3324      	adds	r3, #36	; 0x24
 801479e:	4618      	mov	r0, r3
 80147a0:	f000 fd7c 	bl	801529c <xTaskRemoveFromEventList>
 80147a4:	4603      	mov	r3, r0
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d001      	beq.n	80147ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80147aa:	f000 feb5 	bl	8015518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80147ae:	7bfb      	ldrb	r3, [r7, #15]
 80147b0:	3b01      	subs	r3, #1
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80147b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	dce9      	bgt.n	8014792 <prvUnlockQueue+0x16>
 80147be:	e000      	b.n	80147c2 <prvUnlockQueue+0x46>
					break;
 80147c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	22ff      	movs	r2, #255	; 0xff
 80147c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80147ca:	f001 fd4b 	bl	8016264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80147ce:	f001 fd19 	bl	8016204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80147d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80147da:	e011      	b.n	8014800 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	691b      	ldr	r3, [r3, #16]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d012      	beq.n	801480a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	3310      	adds	r3, #16
 80147e8:	4618      	mov	r0, r3
 80147ea:	f000 fd57 	bl	801529c <xTaskRemoveFromEventList>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d001      	beq.n	80147f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80147f4:	f000 fe90 	bl	8015518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80147f8:	7bbb      	ldrb	r3, [r7, #14]
 80147fa:	3b01      	subs	r3, #1
 80147fc:	b2db      	uxtb	r3, r3
 80147fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014804:	2b00      	cmp	r3, #0
 8014806:	dce9      	bgt.n	80147dc <prvUnlockQueue+0x60>
 8014808:	e000      	b.n	801480c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801480a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	22ff      	movs	r2, #255	; 0xff
 8014810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014814:	f001 fd26 	bl	8016264 <vPortExitCritical>
}
 8014818:	bf00      	nop
 801481a:	3710      	adds	r7, #16
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014828:	f001 fcec 	bl	8016204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014830:	2b00      	cmp	r3, #0
 8014832:	d102      	bne.n	801483a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014834:	2301      	movs	r3, #1
 8014836:	60fb      	str	r3, [r7, #12]
 8014838:	e001      	b.n	801483e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801483a:	2300      	movs	r3, #0
 801483c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801483e:	f001 fd11 	bl	8016264 <vPortExitCritical>

	return xReturn;
 8014842:	68fb      	ldr	r3, [r7, #12]
}
 8014844:	4618      	mov	r0, r3
 8014846:	3710      	adds	r7, #16
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014854:	f001 fcd6 	bl	8016204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014860:	429a      	cmp	r2, r3
 8014862:	d102      	bne.n	801486a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014864:	2301      	movs	r3, #1
 8014866:	60fb      	str	r3, [r7, #12]
 8014868:	e001      	b.n	801486e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801486a:	2300      	movs	r3, #0
 801486c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801486e:	f001 fcf9 	bl	8016264 <vPortExitCritical>

	return xReturn;
 8014872:	68fb      	ldr	r3, [r7, #12]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3710      	adds	r7, #16
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801487c:	b480      	push	{r7}
 801487e:	b085      	sub	sp, #20
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014886:	2300      	movs	r3, #0
 8014888:	60fb      	str	r3, [r7, #12]
 801488a:	e014      	b.n	80148b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801488c:	4a0f      	ldr	r2, [pc, #60]	; (80148cc <vQueueAddToRegistry+0x50>)
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d10b      	bne.n	80148b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014898:	490c      	ldr	r1, [pc, #48]	; (80148cc <vQueueAddToRegistry+0x50>)
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	683a      	ldr	r2, [r7, #0]
 801489e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80148a2:	4a0a      	ldr	r2, [pc, #40]	; (80148cc <vQueueAddToRegistry+0x50>)
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	00db      	lsls	r3, r3, #3
 80148a8:	4413      	add	r3, r2
 80148aa:	687a      	ldr	r2, [r7, #4]
 80148ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80148ae:	e006      	b.n	80148be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	3301      	adds	r3, #1
 80148b4:	60fb      	str	r3, [r7, #12]
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2b07      	cmp	r3, #7
 80148ba:	d9e7      	bls.n	801488c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80148bc:	bf00      	nop
 80148be:	bf00      	nop
 80148c0:	3714      	adds	r7, #20
 80148c2:	46bd      	mov	sp, r7
 80148c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	240024d4 	.word	0x240024d4

080148d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80148e0:	f001 fc90 	bl	8016204 <vPortEnterCritical>
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148ea:	b25b      	sxtb	r3, r3
 80148ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148f0:	d103      	bne.n	80148fa <vQueueWaitForMessageRestricted+0x2a>
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	2200      	movs	r2, #0
 80148f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014900:	b25b      	sxtb	r3, r3
 8014902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014906:	d103      	bne.n	8014910 <vQueueWaitForMessageRestricted+0x40>
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	2200      	movs	r2, #0
 801490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014910:	f001 fca8 	bl	8016264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014918:	2b00      	cmp	r3, #0
 801491a:	d106      	bne.n	801492a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	3324      	adds	r3, #36	; 0x24
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	68b9      	ldr	r1, [r7, #8]
 8014924:	4618      	mov	r0, r3
 8014926:	f000 fc8d 	bl	8015244 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801492a:	6978      	ldr	r0, [r7, #20]
 801492c:	f7ff ff26 	bl	801477c <prvUnlockQueue>
	}
 8014930:	bf00      	nop
 8014932:	3718      	adds	r7, #24
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014938:	b580      	push	{r7, lr}
 801493a:	b08e      	sub	sp, #56	; 0x38
 801493c:	af04      	add	r7, sp, #16
 801493e:	60f8      	str	r0, [r7, #12]
 8014940:	60b9      	str	r1, [r7, #8]
 8014942:	607a      	str	r2, [r7, #4]
 8014944:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014948:	2b00      	cmp	r3, #0
 801494a:	d10a      	bne.n	8014962 <xTaskCreateStatic+0x2a>
	__asm volatile
 801494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014950:	f383 8811 	msr	BASEPRI, r3
 8014954:	f3bf 8f6f 	isb	sy
 8014958:	f3bf 8f4f 	dsb	sy
 801495c:	623b      	str	r3, [r7, #32]
}
 801495e:	bf00      	nop
 8014960:	e7fe      	b.n	8014960 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014964:	2b00      	cmp	r3, #0
 8014966:	d10a      	bne.n	801497e <xTaskCreateStatic+0x46>
	__asm volatile
 8014968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496c:	f383 8811 	msr	BASEPRI, r3
 8014970:	f3bf 8f6f 	isb	sy
 8014974:	f3bf 8f4f 	dsb	sy
 8014978:	61fb      	str	r3, [r7, #28]
}
 801497a:	bf00      	nop
 801497c:	e7fe      	b.n	801497c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801497e:	235c      	movs	r3, #92	; 0x5c
 8014980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	2b5c      	cmp	r3, #92	; 0x5c
 8014986:	d00a      	beq.n	801499e <xTaskCreateStatic+0x66>
	__asm volatile
 8014988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801498c:	f383 8811 	msr	BASEPRI, r3
 8014990:	f3bf 8f6f 	isb	sy
 8014994:	f3bf 8f4f 	dsb	sy
 8014998:	61bb      	str	r3, [r7, #24]
}
 801499a:	bf00      	nop
 801499c:	e7fe      	b.n	801499c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801499e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80149a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d01e      	beq.n	80149e4 <xTaskCreateStatic+0xac>
 80149a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d01b      	beq.n	80149e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80149ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80149b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b8:	2202      	movs	r2, #2
 80149ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80149be:	2300      	movs	r3, #0
 80149c0:	9303      	str	r3, [sp, #12]
 80149c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c4:	9302      	str	r3, [sp, #8]
 80149c6:	f107 0314 	add.w	r3, r7, #20
 80149ca:	9301      	str	r3, [sp, #4]
 80149cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ce:	9300      	str	r3, [sp, #0]
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	68b9      	ldr	r1, [r7, #8]
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f000 f850 	bl	8014a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80149dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149de:	f000 f8dd 	bl	8014b9c <prvAddNewTaskToReadyList>
 80149e2:	e001      	b.n	80149e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80149e4:	2300      	movs	r3, #0
 80149e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80149e8:	697b      	ldr	r3, [r7, #20]
	}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3728      	adds	r7, #40	; 0x28
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80149f2:	b580      	push	{r7, lr}
 80149f4:	b08c      	sub	sp, #48	; 0x30
 80149f6:	af04      	add	r7, sp, #16
 80149f8:	60f8      	str	r0, [r7, #12]
 80149fa:	60b9      	str	r1, [r7, #8]
 80149fc:	603b      	str	r3, [r7, #0]
 80149fe:	4613      	mov	r3, r2
 8014a00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a02:	88fb      	ldrh	r3, [r7, #6]
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	4618      	mov	r0, r3
 8014a08:	f001 fd1e 	bl	8016448 <pvPortMalloc>
 8014a0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d00e      	beq.n	8014a32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014a14:	205c      	movs	r0, #92	; 0x5c
 8014a16:	f001 fd17 	bl	8016448 <pvPortMalloc>
 8014a1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d003      	beq.n	8014a2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014a22:	69fb      	ldr	r3, [r7, #28]
 8014a24:	697a      	ldr	r2, [r7, #20]
 8014a26:	631a      	str	r2, [r3, #48]	; 0x30
 8014a28:	e005      	b.n	8014a36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014a2a:	6978      	ldr	r0, [r7, #20]
 8014a2c:	f001 fdd8 	bl	80165e0 <vPortFree>
 8014a30:	e001      	b.n	8014a36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014a32:	2300      	movs	r3, #0
 8014a34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d017      	beq.n	8014a6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	2200      	movs	r2, #0
 8014a40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014a44:	88fa      	ldrh	r2, [r7, #6]
 8014a46:	2300      	movs	r3, #0
 8014a48:	9303      	str	r3, [sp, #12]
 8014a4a:	69fb      	ldr	r3, [r7, #28]
 8014a4c:	9302      	str	r3, [sp, #8]
 8014a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a50:	9301      	str	r3, [sp, #4]
 8014a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a54:	9300      	str	r3, [sp, #0]
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	68b9      	ldr	r1, [r7, #8]
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	f000 f80e 	bl	8014a7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a60:	69f8      	ldr	r0, [r7, #28]
 8014a62:	f000 f89b 	bl	8014b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014a66:	2301      	movs	r3, #1
 8014a68:	61bb      	str	r3, [r7, #24]
 8014a6a:	e002      	b.n	8014a72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014a72:	69bb      	ldr	r3, [r7, #24]
	}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3720      	adds	r7, #32
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}

08014a7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b088      	sub	sp, #32
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
 8014a88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	009b      	lsls	r3, r3, #2
 8014a92:	461a      	mov	r2, r3
 8014a94:	21a5      	movs	r1, #165	; 0xa5
 8014a96:	f001 fef9 	bl	801688c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a9e:	6879      	ldr	r1, [r7, #4]
 8014aa0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014aa4:	440b      	add	r3, r1
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	f023 0307 	bic.w	r3, r3, #7
 8014ab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014ab4:	69bb      	ldr	r3, [r7, #24]
 8014ab6:	f003 0307 	and.w	r3, r3, #7
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d00a      	beq.n	8014ad4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac2:	f383 8811 	msr	BASEPRI, r3
 8014ac6:	f3bf 8f6f 	isb	sy
 8014aca:	f3bf 8f4f 	dsb	sy
 8014ace:	617b      	str	r3, [r7, #20]
}
 8014ad0:	bf00      	nop
 8014ad2:	e7fe      	b.n	8014ad2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d01f      	beq.n	8014b1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014ada:	2300      	movs	r3, #0
 8014adc:	61fb      	str	r3, [r7, #28]
 8014ade:	e012      	b.n	8014b06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014ae0:	68ba      	ldr	r2, [r7, #8]
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	7819      	ldrb	r1, [r3, #0]
 8014ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	4413      	add	r3, r2
 8014aee:	3334      	adds	r3, #52	; 0x34
 8014af0:	460a      	mov	r2, r1
 8014af2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014af4:	68ba      	ldr	r2, [r7, #8]
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	4413      	add	r3, r2
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d006      	beq.n	8014b0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	3301      	adds	r3, #1
 8014b04:	61fb      	str	r3, [r7, #28]
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	2b0f      	cmp	r3, #15
 8014b0a:	d9e9      	bls.n	8014ae0 <prvInitialiseNewTask+0x64>
 8014b0c:	e000      	b.n	8014b10 <prvInitialiseNewTask+0x94>
			{
				break;
 8014b0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b12:	2200      	movs	r2, #0
 8014b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014b18:	e003      	b.n	8014b22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b24:	2b37      	cmp	r3, #55	; 0x37
 8014b26:	d901      	bls.n	8014b2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014b28:	2337      	movs	r3, #55	; 0x37
 8014b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b40:	3304      	adds	r3, #4
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7ff f978 	bl	8013e38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b4a:	3318      	adds	r3, #24
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7ff f973 	bl	8013e38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b70:	2200      	movs	r2, #0
 8014b72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014b76:	683a      	ldr	r2, [r7, #0]
 8014b78:	68f9      	ldr	r1, [r7, #12]
 8014b7a:	69b8      	ldr	r0, [r7, #24]
 8014b7c:	f001 fa14 	bl	8015fa8 <pxPortInitialiseStack>
 8014b80:	4602      	mov	r2, r0
 8014b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d002      	beq.n	8014b92 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b92:	bf00      	nop
 8014b94:	3720      	adds	r7, #32
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
	...

08014b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b082      	sub	sp, #8
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014ba4:	f001 fb2e 	bl	8016204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014ba8:	4b2d      	ldr	r3, [pc, #180]	; (8014c60 <prvAddNewTaskToReadyList+0xc4>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	3301      	adds	r3, #1
 8014bae:	4a2c      	ldr	r2, [pc, #176]	; (8014c60 <prvAddNewTaskToReadyList+0xc4>)
 8014bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014bb2:	4b2c      	ldr	r3, [pc, #176]	; (8014c64 <prvAddNewTaskToReadyList+0xc8>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d109      	bne.n	8014bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014bba:	4a2a      	ldr	r2, [pc, #168]	; (8014c64 <prvAddNewTaskToReadyList+0xc8>)
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014bc0:	4b27      	ldr	r3, [pc, #156]	; (8014c60 <prvAddNewTaskToReadyList+0xc4>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d110      	bne.n	8014bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014bc8:	f000 fcca 	bl	8015560 <prvInitialiseTaskLists>
 8014bcc:	e00d      	b.n	8014bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014bce:	4b26      	ldr	r3, [pc, #152]	; (8014c68 <prvAddNewTaskToReadyList+0xcc>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d109      	bne.n	8014bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014bd6:	4b23      	ldr	r3, [pc, #140]	; (8014c64 <prvAddNewTaskToReadyList+0xc8>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d802      	bhi.n	8014bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014be4:	4a1f      	ldr	r2, [pc, #124]	; (8014c64 <prvAddNewTaskToReadyList+0xc8>)
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014bea:	4b20      	ldr	r3, [pc, #128]	; (8014c6c <prvAddNewTaskToReadyList+0xd0>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	4a1e      	ldr	r2, [pc, #120]	; (8014c6c <prvAddNewTaskToReadyList+0xd0>)
 8014bf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014bf4:	4b1d      	ldr	r3, [pc, #116]	; (8014c6c <prvAddNewTaskToReadyList+0xd0>)
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c00:	4b1b      	ldr	r3, [pc, #108]	; (8014c70 <prvAddNewTaskToReadyList+0xd4>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d903      	bls.n	8014c10 <prvAddNewTaskToReadyList+0x74>
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c0c:	4a18      	ldr	r2, [pc, #96]	; (8014c70 <prvAddNewTaskToReadyList+0xd4>)
 8014c0e:	6013      	str	r3, [r2, #0]
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c14:	4613      	mov	r3, r2
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	4413      	add	r3, r2
 8014c1a:	009b      	lsls	r3, r3, #2
 8014c1c:	4a15      	ldr	r2, [pc, #84]	; (8014c74 <prvAddNewTaskToReadyList+0xd8>)
 8014c1e:	441a      	add	r2, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	3304      	adds	r3, #4
 8014c24:	4619      	mov	r1, r3
 8014c26:	4610      	mov	r0, r2
 8014c28:	f7ff f913 	bl	8013e52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014c2c:	f001 fb1a 	bl	8016264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014c30:	4b0d      	ldr	r3, [pc, #52]	; (8014c68 <prvAddNewTaskToReadyList+0xcc>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00e      	beq.n	8014c56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014c38:	4b0a      	ldr	r3, [pc, #40]	; (8014c64 <prvAddNewTaskToReadyList+0xc8>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d207      	bcs.n	8014c56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014c46:	4b0c      	ldr	r3, [pc, #48]	; (8014c78 <prvAddNewTaskToReadyList+0xdc>)
 8014c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c4c:	601a      	str	r2, [r3, #0]
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c56:	bf00      	nop
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	240029e8 	.word	0x240029e8
 8014c64:	24002514 	.word	0x24002514
 8014c68:	240029f4 	.word	0x240029f4
 8014c6c:	24002a04 	.word	0x24002a04
 8014c70:	240029f0 	.word	0x240029f0
 8014c74:	24002518 	.word	0x24002518
 8014c78:	e000ed04 	.word	0xe000ed04

08014c7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b084      	sub	sp, #16
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014c84:	2300      	movs	r3, #0
 8014c86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d017      	beq.n	8014cbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014c8e:	4b13      	ldr	r3, [pc, #76]	; (8014cdc <vTaskDelay+0x60>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d00a      	beq.n	8014cac <vTaskDelay+0x30>
	__asm volatile
 8014c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	60bb      	str	r3, [r7, #8]
}
 8014ca8:	bf00      	nop
 8014caa:	e7fe      	b.n	8014caa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014cac:	f000 f880 	bl	8014db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014cb0:	2100      	movs	r1, #0
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f000 fdb6 	bl	8015824 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014cb8:	f000 f888 	bl	8014dcc <xTaskResumeAll>
 8014cbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d107      	bne.n	8014cd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014cc4:	4b06      	ldr	r3, [pc, #24]	; (8014ce0 <vTaskDelay+0x64>)
 8014cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cca:	601a      	str	r2, [r3, #0]
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014cd4:	bf00      	nop
 8014cd6:	3710      	adds	r7, #16
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	24002a10 	.word	0x24002a10
 8014ce0:	e000ed04 	.word	0xe000ed04

08014ce4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b08a      	sub	sp, #40	; 0x28
 8014ce8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014cea:	2300      	movs	r3, #0
 8014cec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014cf2:	463a      	mov	r2, r7
 8014cf4:	1d39      	adds	r1, r7, #4
 8014cf6:	f107 0308 	add.w	r3, r7, #8
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fe fddc 	bl	80138b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014d00:	6839      	ldr	r1, [r7, #0]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	68ba      	ldr	r2, [r7, #8]
 8014d06:	9202      	str	r2, [sp, #8]
 8014d08:	9301      	str	r3, [sp, #4]
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	2300      	movs	r3, #0
 8014d10:	460a      	mov	r2, r1
 8014d12:	4921      	ldr	r1, [pc, #132]	; (8014d98 <vTaskStartScheduler+0xb4>)
 8014d14:	4821      	ldr	r0, [pc, #132]	; (8014d9c <vTaskStartScheduler+0xb8>)
 8014d16:	f7ff fe0f 	bl	8014938 <xTaskCreateStatic>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	4a20      	ldr	r2, [pc, #128]	; (8014da0 <vTaskStartScheduler+0xbc>)
 8014d1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014d20:	4b1f      	ldr	r3, [pc, #124]	; (8014da0 <vTaskStartScheduler+0xbc>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d002      	beq.n	8014d2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014d28:	2301      	movs	r3, #1
 8014d2a:	617b      	str	r3, [r7, #20]
 8014d2c:	e001      	b.n	8014d32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	d102      	bne.n	8014d3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014d38:	f000 fdc8 	bl	80158cc <xTimerCreateTimerTask>
 8014d3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	2b01      	cmp	r3, #1
 8014d42:	d116      	bne.n	8014d72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d48:	f383 8811 	msr	BASEPRI, r3
 8014d4c:	f3bf 8f6f 	isb	sy
 8014d50:	f3bf 8f4f 	dsb	sy
 8014d54:	613b      	str	r3, [r7, #16]
}
 8014d56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014d58:	4b12      	ldr	r3, [pc, #72]	; (8014da4 <vTaskStartScheduler+0xc0>)
 8014d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014d60:	4b11      	ldr	r3, [pc, #68]	; (8014da8 <vTaskStartScheduler+0xc4>)
 8014d62:	2201      	movs	r2, #1
 8014d64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014d66:	4b11      	ldr	r3, [pc, #68]	; (8014dac <vTaskStartScheduler+0xc8>)
 8014d68:	2200      	movs	r2, #0
 8014d6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014d6c:	f001 f9a8 	bl	80160c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014d70:	e00e      	b.n	8014d90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d78:	d10a      	bne.n	8014d90 <vTaskStartScheduler+0xac>
	__asm volatile
 8014d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d7e:	f383 8811 	msr	BASEPRI, r3
 8014d82:	f3bf 8f6f 	isb	sy
 8014d86:	f3bf 8f4f 	dsb	sy
 8014d8a:	60fb      	str	r3, [r7, #12]
}
 8014d8c:	bf00      	nop
 8014d8e:	e7fe      	b.n	8014d8e <vTaskStartScheduler+0xaa>
}
 8014d90:	bf00      	nop
 8014d92:	3718      	adds	r7, #24
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	08017500 	.word	0x08017500
 8014d9c:	08015531 	.word	0x08015531
 8014da0:	24002a0c 	.word	0x24002a0c
 8014da4:	24002a08 	.word	0x24002a08
 8014da8:	240029f4 	.word	0x240029f4
 8014dac:	240029ec 	.word	0x240029ec

08014db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014db0:	b480      	push	{r7}
 8014db2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014db4:	4b04      	ldr	r3, [pc, #16]	; (8014dc8 <vTaskSuspendAll+0x18>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	3301      	adds	r3, #1
 8014dba:	4a03      	ldr	r2, [pc, #12]	; (8014dc8 <vTaskSuspendAll+0x18>)
 8014dbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014dbe:	bf00      	nop
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc6:	4770      	bx	lr
 8014dc8:	24002a10 	.word	0x24002a10

08014dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014dda:	4b42      	ldr	r3, [pc, #264]	; (8014ee4 <xTaskResumeAll+0x118>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d10a      	bne.n	8014df8 <xTaskResumeAll+0x2c>
	__asm volatile
 8014de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de6:	f383 8811 	msr	BASEPRI, r3
 8014dea:	f3bf 8f6f 	isb	sy
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	603b      	str	r3, [r7, #0]
}
 8014df4:	bf00      	nop
 8014df6:	e7fe      	b.n	8014df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014df8:	f001 fa04 	bl	8016204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014dfc:	4b39      	ldr	r3, [pc, #228]	; (8014ee4 <xTaskResumeAll+0x118>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	3b01      	subs	r3, #1
 8014e02:	4a38      	ldr	r2, [pc, #224]	; (8014ee4 <xTaskResumeAll+0x118>)
 8014e04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e06:	4b37      	ldr	r3, [pc, #220]	; (8014ee4 <xTaskResumeAll+0x118>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d162      	bne.n	8014ed4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014e0e:	4b36      	ldr	r3, [pc, #216]	; (8014ee8 <xTaskResumeAll+0x11c>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d05e      	beq.n	8014ed4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e16:	e02f      	b.n	8014e78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e18:	4b34      	ldr	r3, [pc, #208]	; (8014eec <xTaskResumeAll+0x120>)
 8014e1a:	68db      	ldr	r3, [r3, #12]
 8014e1c:	68db      	ldr	r3, [r3, #12]
 8014e1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	3318      	adds	r3, #24
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7ff f871 	bl	8013f0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	3304      	adds	r3, #4
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7ff f86c 	bl	8013f0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e38:	4b2d      	ldr	r3, [pc, #180]	; (8014ef0 <xTaskResumeAll+0x124>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d903      	bls.n	8014e48 <xTaskResumeAll+0x7c>
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e44:	4a2a      	ldr	r2, [pc, #168]	; (8014ef0 <xTaskResumeAll+0x124>)
 8014e46:	6013      	str	r3, [r2, #0]
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	4413      	add	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	4a27      	ldr	r2, [pc, #156]	; (8014ef4 <xTaskResumeAll+0x128>)
 8014e56:	441a      	add	r2, r3
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	3304      	adds	r3, #4
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	4610      	mov	r0, r2
 8014e60:	f7fe fff7 	bl	8013e52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e68:	4b23      	ldr	r3, [pc, #140]	; (8014ef8 <xTaskResumeAll+0x12c>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d302      	bcc.n	8014e78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014e72:	4b22      	ldr	r3, [pc, #136]	; (8014efc <xTaskResumeAll+0x130>)
 8014e74:	2201      	movs	r2, #1
 8014e76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e78:	4b1c      	ldr	r3, [pc, #112]	; (8014eec <xTaskResumeAll+0x120>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d1cb      	bne.n	8014e18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d001      	beq.n	8014e8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014e86:	f000 fc09 	bl	801569c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014e8a:	4b1d      	ldr	r3, [pc, #116]	; (8014f00 <xTaskResumeAll+0x134>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d010      	beq.n	8014eb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014e96:	f000 f847 	bl	8014f28 <xTaskIncrementTick>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d002      	beq.n	8014ea6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014ea0:	4b16      	ldr	r3, [pc, #88]	; (8014efc <xTaskResumeAll+0x130>)
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d1f1      	bne.n	8014e96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014eb2:	4b13      	ldr	r3, [pc, #76]	; (8014f00 <xTaskResumeAll+0x134>)
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014eb8:	4b10      	ldr	r3, [pc, #64]	; (8014efc <xTaskResumeAll+0x130>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d009      	beq.n	8014ed4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014ec4:	4b0f      	ldr	r3, [pc, #60]	; (8014f04 <xTaskResumeAll+0x138>)
 8014ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eca:	601a      	str	r2, [r3, #0]
 8014ecc:	f3bf 8f4f 	dsb	sy
 8014ed0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014ed4:	f001 f9c6 	bl	8016264 <vPortExitCritical>

	return xAlreadyYielded;
 8014ed8:	68bb      	ldr	r3, [r7, #8]
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	24002a10 	.word	0x24002a10
 8014ee8:	240029e8 	.word	0x240029e8
 8014eec:	240029a8 	.word	0x240029a8
 8014ef0:	240029f0 	.word	0x240029f0
 8014ef4:	24002518 	.word	0x24002518
 8014ef8:	24002514 	.word	0x24002514
 8014efc:	240029fc 	.word	0x240029fc
 8014f00:	240029f8 	.word	0x240029f8
 8014f04:	e000ed04 	.word	0xe000ed04

08014f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b083      	sub	sp, #12
 8014f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014f0e:	4b05      	ldr	r3, [pc, #20]	; (8014f24 <xTaskGetTickCount+0x1c>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014f14:	687b      	ldr	r3, [r7, #4]
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	370c      	adds	r7, #12
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop
 8014f24:	240029ec 	.word	0x240029ec

08014f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b086      	sub	sp, #24
 8014f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f32:	4b53      	ldr	r3, [pc, #332]	; (8015080 <xTaskIncrementTick+0x158>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f040 8095 	bne.w	8015066 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014f3c:	4b51      	ldr	r3, [pc, #324]	; (8015084 <xTaskIncrementTick+0x15c>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	3301      	adds	r3, #1
 8014f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014f44:	4a4f      	ldr	r2, [pc, #316]	; (8015084 <xTaskIncrementTick+0x15c>)
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d120      	bne.n	8014f92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014f50:	4b4d      	ldr	r3, [pc, #308]	; (8015088 <xTaskIncrementTick+0x160>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d00a      	beq.n	8014f70 <xTaskIncrementTick+0x48>
	__asm volatile
 8014f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	603b      	str	r3, [r7, #0]
}
 8014f6c:	bf00      	nop
 8014f6e:	e7fe      	b.n	8014f6e <xTaskIncrementTick+0x46>
 8014f70:	4b45      	ldr	r3, [pc, #276]	; (8015088 <xTaskIncrementTick+0x160>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	60fb      	str	r3, [r7, #12]
 8014f76:	4b45      	ldr	r3, [pc, #276]	; (801508c <xTaskIncrementTick+0x164>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	4a43      	ldr	r2, [pc, #268]	; (8015088 <xTaskIncrementTick+0x160>)
 8014f7c:	6013      	str	r3, [r2, #0]
 8014f7e:	4a43      	ldr	r2, [pc, #268]	; (801508c <xTaskIncrementTick+0x164>)
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	6013      	str	r3, [r2, #0]
 8014f84:	4b42      	ldr	r3, [pc, #264]	; (8015090 <xTaskIncrementTick+0x168>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	4a41      	ldr	r2, [pc, #260]	; (8015090 <xTaskIncrementTick+0x168>)
 8014f8c:	6013      	str	r3, [r2, #0]
 8014f8e:	f000 fb85 	bl	801569c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014f92:	4b40      	ldr	r3, [pc, #256]	; (8015094 <xTaskIncrementTick+0x16c>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	693a      	ldr	r2, [r7, #16]
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d349      	bcc.n	8015030 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f9c:	4b3a      	ldr	r3, [pc, #232]	; (8015088 <xTaskIncrementTick+0x160>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d104      	bne.n	8014fb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fa6:	4b3b      	ldr	r3, [pc, #236]	; (8015094 <xTaskIncrementTick+0x16c>)
 8014fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014fac:	601a      	str	r2, [r3, #0]
					break;
 8014fae:	e03f      	b.n	8015030 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fb0:	4b35      	ldr	r3, [pc, #212]	; (8015088 <xTaskIncrementTick+0x160>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014fc0:	693a      	ldr	r2, [r7, #16]
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d203      	bcs.n	8014fd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014fc8:	4a32      	ldr	r2, [pc, #200]	; (8015094 <xTaskIncrementTick+0x16c>)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014fce:	e02f      	b.n	8015030 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	3304      	adds	r3, #4
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7fe ff99 	bl	8013f0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d004      	beq.n	8014fec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	3318      	adds	r3, #24
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7fe ff90 	bl	8013f0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff0:	4b29      	ldr	r3, [pc, #164]	; (8015098 <xTaskIncrementTick+0x170>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d903      	bls.n	8015000 <xTaskIncrementTick+0xd8>
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ffc:	4a26      	ldr	r2, [pc, #152]	; (8015098 <xTaskIncrementTick+0x170>)
 8014ffe:	6013      	str	r3, [r2, #0]
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015004:	4613      	mov	r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	4413      	add	r3, r2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	4a23      	ldr	r2, [pc, #140]	; (801509c <xTaskIncrementTick+0x174>)
 801500e:	441a      	add	r2, r3
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	3304      	adds	r3, #4
 8015014:	4619      	mov	r1, r3
 8015016:	4610      	mov	r0, r2
 8015018:	f7fe ff1b 	bl	8013e52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015020:	4b1f      	ldr	r3, [pc, #124]	; (80150a0 <xTaskIncrementTick+0x178>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015026:	429a      	cmp	r2, r3
 8015028:	d3b8      	bcc.n	8014f9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801502a:	2301      	movs	r3, #1
 801502c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801502e:	e7b5      	b.n	8014f9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015030:	4b1b      	ldr	r3, [pc, #108]	; (80150a0 <xTaskIncrementTick+0x178>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015036:	4919      	ldr	r1, [pc, #100]	; (801509c <xTaskIncrementTick+0x174>)
 8015038:	4613      	mov	r3, r2
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	4413      	add	r3, r2
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	440b      	add	r3, r1
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	2b01      	cmp	r3, #1
 8015046:	d901      	bls.n	801504c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015048:	2301      	movs	r3, #1
 801504a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801504c:	4b15      	ldr	r3, [pc, #84]	; (80150a4 <xTaskIncrementTick+0x17c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8015054:	f7eb fe88 	bl	8000d68 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015058:	4b13      	ldr	r3, [pc, #76]	; (80150a8 <xTaskIncrementTick+0x180>)
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d009      	beq.n	8015074 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8015060:	2301      	movs	r3, #1
 8015062:	617b      	str	r3, [r7, #20]
 8015064:	e006      	b.n	8015074 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015066:	4b0f      	ldr	r3, [pc, #60]	; (80150a4 <xTaskIncrementTick+0x17c>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	3301      	adds	r3, #1
 801506c:	4a0d      	ldr	r2, [pc, #52]	; (80150a4 <xTaskIncrementTick+0x17c>)
 801506e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015070:	f7eb fe7a 	bl	8000d68 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015074:	697b      	ldr	r3, [r7, #20]
}
 8015076:	4618      	mov	r0, r3
 8015078:	3718      	adds	r7, #24
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	24002a10 	.word	0x24002a10
 8015084:	240029ec 	.word	0x240029ec
 8015088:	240029a0 	.word	0x240029a0
 801508c:	240029a4 	.word	0x240029a4
 8015090:	24002a00 	.word	0x24002a00
 8015094:	24002a08 	.word	0x24002a08
 8015098:	240029f0 	.word	0x240029f0
 801509c:	24002518 	.word	0x24002518
 80150a0:	24002514 	.word	0x24002514
 80150a4:	240029f8 	.word	0x240029f8
 80150a8:	240029fc 	.word	0x240029fc

080150ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80150b2:	4b2f      	ldr	r3, [pc, #188]	; (8015170 <vTaskSwitchContext+0xc4>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d003      	beq.n	80150c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80150ba:	4b2e      	ldr	r3, [pc, #184]	; (8015174 <vTaskSwitchContext+0xc8>)
 80150bc:	2201      	movs	r2, #1
 80150be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80150c0:	e052      	b.n	8015168 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80150c2:	4b2c      	ldr	r3, [pc, #176]	; (8015174 <vTaskSwitchContext+0xc8>)
 80150c4:	2200      	movs	r2, #0
 80150c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80150c8:	4b2b      	ldr	r3, [pc, #172]	; (8015178 <vTaskSwitchContext+0xcc>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	4b2a      	ldr	r3, [pc, #168]	; (8015178 <vTaskSwitchContext+0xcc>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d808      	bhi.n	80150ea <vTaskSwitchContext+0x3e>
 80150d8:	4b27      	ldr	r3, [pc, #156]	; (8015178 <vTaskSwitchContext+0xcc>)
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	4b26      	ldr	r3, [pc, #152]	; (8015178 <vTaskSwitchContext+0xcc>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	3334      	adds	r3, #52	; 0x34
 80150e2:	4619      	mov	r1, r3
 80150e4:	4610      	mov	r0, r2
 80150e6:	f7eb fe4d 	bl	8000d84 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150ea:	4b24      	ldr	r3, [pc, #144]	; (801517c <vTaskSwitchContext+0xd0>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	60fb      	str	r3, [r7, #12]
 80150f0:	e010      	b.n	8015114 <vTaskSwitchContext+0x68>
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d10a      	bne.n	801510e <vTaskSwitchContext+0x62>
	__asm volatile
 80150f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150fc:	f383 8811 	msr	BASEPRI, r3
 8015100:	f3bf 8f6f 	isb	sy
 8015104:	f3bf 8f4f 	dsb	sy
 8015108:	607b      	str	r3, [r7, #4]
}
 801510a:	bf00      	nop
 801510c:	e7fe      	b.n	801510c <vTaskSwitchContext+0x60>
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	3b01      	subs	r3, #1
 8015112:	60fb      	str	r3, [r7, #12]
 8015114:	491a      	ldr	r1, [pc, #104]	; (8015180 <vTaskSwitchContext+0xd4>)
 8015116:	68fa      	ldr	r2, [r7, #12]
 8015118:	4613      	mov	r3, r2
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	4413      	add	r3, r2
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	440b      	add	r3, r1
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d0e4      	beq.n	80150f2 <vTaskSwitchContext+0x46>
 8015128:	68fa      	ldr	r2, [r7, #12]
 801512a:	4613      	mov	r3, r2
 801512c:	009b      	lsls	r3, r3, #2
 801512e:	4413      	add	r3, r2
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	4a13      	ldr	r2, [pc, #76]	; (8015180 <vTaskSwitchContext+0xd4>)
 8015134:	4413      	add	r3, r2
 8015136:	60bb      	str	r3, [r7, #8]
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	685a      	ldr	r2, [r3, #4]
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	605a      	str	r2, [r3, #4]
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	685a      	ldr	r2, [r3, #4]
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	3308      	adds	r3, #8
 801514a:	429a      	cmp	r2, r3
 801514c:	d104      	bne.n	8015158 <vTaskSwitchContext+0xac>
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	685a      	ldr	r2, [r3, #4]
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	605a      	str	r2, [r3, #4]
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	4a06      	ldr	r2, [pc, #24]	; (8015178 <vTaskSwitchContext+0xcc>)
 8015160:	6013      	str	r3, [r2, #0]
 8015162:	4a06      	ldr	r2, [pc, #24]	; (801517c <vTaskSwitchContext+0xd0>)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	6013      	str	r3, [r2, #0]
}
 8015168:	bf00      	nop
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	24002a10 	.word	0x24002a10
 8015174:	240029fc 	.word	0x240029fc
 8015178:	24002514 	.word	0x24002514
 801517c:	240029f0 	.word	0x240029f0
 8015180:	24002518 	.word	0x24002518

08015184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b084      	sub	sp, #16
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10a      	bne.n	80151aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	60fb      	str	r3, [r7, #12]
}
 80151a6:	bf00      	nop
 80151a8:	e7fe      	b.n	80151a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80151aa:	4b07      	ldr	r3, [pc, #28]	; (80151c8 <vTaskPlaceOnEventList+0x44>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	3318      	adds	r3, #24
 80151b0:	4619      	mov	r1, r3
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f7fe fe71 	bl	8013e9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80151b8:	2101      	movs	r1, #1
 80151ba:	6838      	ldr	r0, [r7, #0]
 80151bc:	f000 fb32 	bl	8015824 <prvAddCurrentTaskToDelayedList>
}
 80151c0:	bf00      	nop
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	24002514 	.word	0x24002514

080151cc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b086      	sub	sp, #24
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d10a      	bne.n	80151f4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80151de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e2:	f383 8811 	msr	BASEPRI, r3
 80151e6:	f3bf 8f6f 	isb	sy
 80151ea:	f3bf 8f4f 	dsb	sy
 80151ee:	617b      	str	r3, [r7, #20]
}
 80151f0:	bf00      	nop
 80151f2:	e7fe      	b.n	80151f2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80151f4:	4b11      	ldr	r3, [pc, #68]	; (801523c <vTaskPlaceOnUnorderedEventList+0x70>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d10a      	bne.n	8015212 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80151fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015200:	f383 8811 	msr	BASEPRI, r3
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	613b      	str	r3, [r7, #16]
}
 801520e:	bf00      	nop
 8015210:	e7fe      	b.n	8015210 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015212:	4b0b      	ldr	r3, [pc, #44]	; (8015240 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	68ba      	ldr	r2, [r7, #8]
 8015218:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801521c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801521e:	4b08      	ldr	r3, [pc, #32]	; (8015240 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	3318      	adds	r3, #24
 8015224:	4619      	mov	r1, r3
 8015226:	68f8      	ldr	r0, [r7, #12]
 8015228:	f7fe fe13 	bl	8013e52 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801522c:	2101      	movs	r1, #1
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 faf8 	bl	8015824 <prvAddCurrentTaskToDelayedList>
}
 8015234:	bf00      	nop
 8015236:	3718      	adds	r7, #24
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	24002a10 	.word	0x24002a10
 8015240:	24002514 	.word	0x24002514

08015244 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d10a      	bne.n	801526c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801525a:	f383 8811 	msr	BASEPRI, r3
 801525e:	f3bf 8f6f 	isb	sy
 8015262:	f3bf 8f4f 	dsb	sy
 8015266:	617b      	str	r3, [r7, #20]
}
 8015268:	bf00      	nop
 801526a:	e7fe      	b.n	801526a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801526c:	4b0a      	ldr	r3, [pc, #40]	; (8015298 <vTaskPlaceOnEventListRestricted+0x54>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	3318      	adds	r3, #24
 8015272:	4619      	mov	r1, r3
 8015274:	68f8      	ldr	r0, [r7, #12]
 8015276:	f7fe fdec 	bl	8013e52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d002      	beq.n	8015286 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8015280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015284:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015286:	6879      	ldr	r1, [r7, #4]
 8015288:	68b8      	ldr	r0, [r7, #8]
 801528a:	f000 facb 	bl	8015824 <prvAddCurrentTaskToDelayedList>
	}
 801528e:	bf00      	nop
 8015290:	3718      	adds	r7, #24
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	24002514 	.word	0x24002514

0801529c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b086      	sub	sp, #24
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	68db      	ldr	r3, [r3, #12]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d10a      	bne.n	80152c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80152b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b6:	f383 8811 	msr	BASEPRI, r3
 80152ba:	f3bf 8f6f 	isb	sy
 80152be:	f3bf 8f4f 	dsb	sy
 80152c2:	60fb      	str	r3, [r7, #12]
}
 80152c4:	bf00      	nop
 80152c6:	e7fe      	b.n	80152c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	3318      	adds	r3, #24
 80152cc:	4618      	mov	r0, r3
 80152ce:	f7fe fe1d 	bl	8013f0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80152d2:	4b1e      	ldr	r3, [pc, #120]	; (801534c <xTaskRemoveFromEventList+0xb0>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d11d      	bne.n	8015316 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	3304      	adds	r3, #4
 80152de:	4618      	mov	r0, r3
 80152e0:	f7fe fe14 	bl	8013f0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152e8:	4b19      	ldr	r3, [pc, #100]	; (8015350 <xTaskRemoveFromEventList+0xb4>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d903      	bls.n	80152f8 <xTaskRemoveFromEventList+0x5c>
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f4:	4a16      	ldr	r2, [pc, #88]	; (8015350 <xTaskRemoveFromEventList+0xb4>)
 80152f6:	6013      	str	r3, [r2, #0]
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152fc:	4613      	mov	r3, r2
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	4413      	add	r3, r2
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	4a13      	ldr	r2, [pc, #76]	; (8015354 <xTaskRemoveFromEventList+0xb8>)
 8015306:	441a      	add	r2, r3
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	3304      	adds	r3, #4
 801530c:	4619      	mov	r1, r3
 801530e:	4610      	mov	r0, r2
 8015310:	f7fe fd9f 	bl	8013e52 <vListInsertEnd>
 8015314:	e005      	b.n	8015322 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015316:	693b      	ldr	r3, [r7, #16]
 8015318:	3318      	adds	r3, #24
 801531a:	4619      	mov	r1, r3
 801531c:	480e      	ldr	r0, [pc, #56]	; (8015358 <xTaskRemoveFromEventList+0xbc>)
 801531e:	f7fe fd98 	bl	8013e52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015326:	4b0d      	ldr	r3, [pc, #52]	; (801535c <xTaskRemoveFromEventList+0xc0>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801532c:	429a      	cmp	r2, r3
 801532e:	d905      	bls.n	801533c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015330:	2301      	movs	r3, #1
 8015332:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015334:	4b0a      	ldr	r3, [pc, #40]	; (8015360 <xTaskRemoveFromEventList+0xc4>)
 8015336:	2201      	movs	r2, #1
 8015338:	601a      	str	r2, [r3, #0]
 801533a:	e001      	b.n	8015340 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801533c:	2300      	movs	r3, #0
 801533e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015340:	697b      	ldr	r3, [r7, #20]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3718      	adds	r7, #24
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop
 801534c:	24002a10 	.word	0x24002a10
 8015350:	240029f0 	.word	0x240029f0
 8015354:	24002518 	.word	0x24002518
 8015358:	240029a8 	.word	0x240029a8
 801535c:	24002514 	.word	0x24002514
 8015360:	240029fc 	.word	0x240029fc

08015364 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b086      	sub	sp, #24
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801536e:	4b29      	ldr	r3, [pc, #164]	; (8015414 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d10a      	bne.n	801538c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8015376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537a:	f383 8811 	msr	BASEPRI, r3
 801537e:	f3bf 8f6f 	isb	sy
 8015382:	f3bf 8f4f 	dsb	sy
 8015386:	613b      	str	r3, [r7, #16]
}
 8015388:	bf00      	nop
 801538a:	e7fe      	b.n	801538a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	68db      	ldr	r3, [r3, #12]
 801539a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d10a      	bne.n	80153b8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80153a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	60fb      	str	r3, [r7, #12]
}
 80153b4:	bf00      	nop
 80153b6:	e7fe      	b.n	80153b6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f7fe fda7 	bl	8013f0c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	3304      	adds	r3, #4
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fe fda2 	bl	8013f0c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153cc:	4b12      	ldr	r3, [pc, #72]	; (8015418 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	429a      	cmp	r2, r3
 80153d2:	d903      	bls.n	80153dc <vTaskRemoveFromUnorderedEventList+0x78>
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153d8:	4a0f      	ldr	r2, [pc, #60]	; (8015418 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80153da:	6013      	str	r3, [r2, #0]
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153e0:	4613      	mov	r3, r2
 80153e2:	009b      	lsls	r3, r3, #2
 80153e4:	4413      	add	r3, r2
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	4a0c      	ldr	r2, [pc, #48]	; (801541c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80153ea:	441a      	add	r2, r3
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	3304      	adds	r3, #4
 80153f0:	4619      	mov	r1, r3
 80153f2:	4610      	mov	r0, r2
 80153f4:	f7fe fd2d 	bl	8013e52 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153fc:	4b08      	ldr	r3, [pc, #32]	; (8015420 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015402:	429a      	cmp	r2, r3
 8015404:	d902      	bls.n	801540c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015406:	4b07      	ldr	r3, [pc, #28]	; (8015424 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015408:	2201      	movs	r2, #1
 801540a:	601a      	str	r2, [r3, #0]
	}
}
 801540c:	bf00      	nop
 801540e:	3718      	adds	r7, #24
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	24002a10 	.word	0x24002a10
 8015418:	240029f0 	.word	0x240029f0
 801541c:	24002518 	.word	0x24002518
 8015420:	24002514 	.word	0x24002514
 8015424:	240029fc 	.word	0x240029fc

08015428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015430:	4b06      	ldr	r3, [pc, #24]	; (801544c <vTaskInternalSetTimeOutState+0x24>)
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015438:	4b05      	ldr	r3, [pc, #20]	; (8015450 <vTaskInternalSetTimeOutState+0x28>)
 801543a:	681a      	ldr	r2, [r3, #0]
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	605a      	str	r2, [r3, #4]
}
 8015440:	bf00      	nop
 8015442:	370c      	adds	r7, #12
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr
 801544c:	24002a00 	.word	0x24002a00
 8015450:	240029ec 	.word	0x240029ec

08015454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b088      	sub	sp, #32
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d10a      	bne.n	801547a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015468:	f383 8811 	msr	BASEPRI, r3
 801546c:	f3bf 8f6f 	isb	sy
 8015470:	f3bf 8f4f 	dsb	sy
 8015474:	613b      	str	r3, [r7, #16]
}
 8015476:	bf00      	nop
 8015478:	e7fe      	b.n	8015478 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d10a      	bne.n	8015496 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8015480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015484:	f383 8811 	msr	BASEPRI, r3
 8015488:	f3bf 8f6f 	isb	sy
 801548c:	f3bf 8f4f 	dsb	sy
 8015490:	60fb      	str	r3, [r7, #12]
}
 8015492:	bf00      	nop
 8015494:	e7fe      	b.n	8015494 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015496:	f000 feb5 	bl	8016204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801549a:	4b1d      	ldr	r3, [pc, #116]	; (8015510 <xTaskCheckForTimeOut+0xbc>)
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	685b      	ldr	r3, [r3, #4]
 80154a4:	69ba      	ldr	r2, [r7, #24]
 80154a6:	1ad3      	subs	r3, r2, r3
 80154a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154b2:	d102      	bne.n	80154ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80154b4:	2300      	movs	r3, #0
 80154b6:	61fb      	str	r3, [r7, #28]
 80154b8:	e023      	b.n	8015502 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681a      	ldr	r2, [r3, #0]
 80154be:	4b15      	ldr	r3, [pc, #84]	; (8015514 <xTaskCheckForTimeOut+0xc0>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d007      	beq.n	80154d6 <xTaskCheckForTimeOut+0x82>
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	69ba      	ldr	r2, [r7, #24]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d302      	bcc.n	80154d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80154d0:	2301      	movs	r3, #1
 80154d2:	61fb      	str	r3, [r7, #28]
 80154d4:	e015      	b.n	8015502 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	697a      	ldr	r2, [r7, #20]
 80154dc:	429a      	cmp	r2, r3
 80154de:	d20b      	bcs.n	80154f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	1ad2      	subs	r2, r2, r3
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7ff ff9b 	bl	8015428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80154f2:	2300      	movs	r3, #0
 80154f4:	61fb      	str	r3, [r7, #28]
 80154f6:	e004      	b.n	8015502 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	2200      	movs	r2, #0
 80154fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80154fe:	2301      	movs	r3, #1
 8015500:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015502:	f000 feaf 	bl	8016264 <vPortExitCritical>

	return xReturn;
 8015506:	69fb      	ldr	r3, [r7, #28]
}
 8015508:	4618      	mov	r0, r3
 801550a:	3720      	adds	r7, #32
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}
 8015510:	240029ec 	.word	0x240029ec
 8015514:	24002a00 	.word	0x24002a00

08015518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015518:	b480      	push	{r7}
 801551a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801551c:	4b03      	ldr	r3, [pc, #12]	; (801552c <vTaskMissedYield+0x14>)
 801551e:	2201      	movs	r2, #1
 8015520:	601a      	str	r2, [r3, #0]
}
 8015522:	bf00      	nop
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr
 801552c:	240029fc 	.word	0x240029fc

08015530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015538:	f000 f852 	bl	80155e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801553c:	4b06      	ldr	r3, [pc, #24]	; (8015558 <prvIdleTask+0x28>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	2b01      	cmp	r3, #1
 8015542:	d9f9      	bls.n	8015538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015544:	4b05      	ldr	r3, [pc, #20]	; (801555c <prvIdleTask+0x2c>)
 8015546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801554a:	601a      	str	r2, [r3, #0]
 801554c:	f3bf 8f4f 	dsb	sy
 8015550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015554:	e7f0      	b.n	8015538 <prvIdleTask+0x8>
 8015556:	bf00      	nop
 8015558:	24002518 	.word	0x24002518
 801555c:	e000ed04 	.word	0xe000ed04

08015560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015566:	2300      	movs	r3, #0
 8015568:	607b      	str	r3, [r7, #4]
 801556a:	e00c      	b.n	8015586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	4613      	mov	r3, r2
 8015570:	009b      	lsls	r3, r3, #2
 8015572:	4413      	add	r3, r2
 8015574:	009b      	lsls	r3, r3, #2
 8015576:	4a12      	ldr	r2, [pc, #72]	; (80155c0 <prvInitialiseTaskLists+0x60>)
 8015578:	4413      	add	r3, r2
 801557a:	4618      	mov	r0, r3
 801557c:	f7fe fc3c 	bl	8013df8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	3301      	adds	r3, #1
 8015584:	607b      	str	r3, [r7, #4]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2b37      	cmp	r3, #55	; 0x37
 801558a:	d9ef      	bls.n	801556c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801558c:	480d      	ldr	r0, [pc, #52]	; (80155c4 <prvInitialiseTaskLists+0x64>)
 801558e:	f7fe fc33 	bl	8013df8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015592:	480d      	ldr	r0, [pc, #52]	; (80155c8 <prvInitialiseTaskLists+0x68>)
 8015594:	f7fe fc30 	bl	8013df8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015598:	480c      	ldr	r0, [pc, #48]	; (80155cc <prvInitialiseTaskLists+0x6c>)
 801559a:	f7fe fc2d 	bl	8013df8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801559e:	480c      	ldr	r0, [pc, #48]	; (80155d0 <prvInitialiseTaskLists+0x70>)
 80155a0:	f7fe fc2a 	bl	8013df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80155a4:	480b      	ldr	r0, [pc, #44]	; (80155d4 <prvInitialiseTaskLists+0x74>)
 80155a6:	f7fe fc27 	bl	8013df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80155aa:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <prvInitialiseTaskLists+0x78>)
 80155ac:	4a05      	ldr	r2, [pc, #20]	; (80155c4 <prvInitialiseTaskLists+0x64>)
 80155ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80155b0:	4b0a      	ldr	r3, [pc, #40]	; (80155dc <prvInitialiseTaskLists+0x7c>)
 80155b2:	4a05      	ldr	r2, [pc, #20]	; (80155c8 <prvInitialiseTaskLists+0x68>)
 80155b4:	601a      	str	r2, [r3, #0]
}
 80155b6:	bf00      	nop
 80155b8:	3708      	adds	r7, #8
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	24002518 	.word	0x24002518
 80155c4:	24002978 	.word	0x24002978
 80155c8:	2400298c 	.word	0x2400298c
 80155cc:	240029a8 	.word	0x240029a8
 80155d0:	240029bc 	.word	0x240029bc
 80155d4:	240029d4 	.word	0x240029d4
 80155d8:	240029a0 	.word	0x240029a0
 80155dc:	240029a4 	.word	0x240029a4

080155e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80155e6:	e019      	b.n	801561c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80155e8:	f000 fe0c 	bl	8016204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155ec:	4b10      	ldr	r3, [pc, #64]	; (8015630 <prvCheckTasksWaitingTermination+0x50>)
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fe fc87 	bl	8013f0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80155fe:	4b0d      	ldr	r3, [pc, #52]	; (8015634 <prvCheckTasksWaitingTermination+0x54>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	3b01      	subs	r3, #1
 8015604:	4a0b      	ldr	r2, [pc, #44]	; (8015634 <prvCheckTasksWaitingTermination+0x54>)
 8015606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015608:	4b0b      	ldr	r3, [pc, #44]	; (8015638 <prvCheckTasksWaitingTermination+0x58>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	3b01      	subs	r3, #1
 801560e:	4a0a      	ldr	r2, [pc, #40]	; (8015638 <prvCheckTasksWaitingTermination+0x58>)
 8015610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015612:	f000 fe27 	bl	8016264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f000 f810 	bl	801563c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801561c:	4b06      	ldr	r3, [pc, #24]	; (8015638 <prvCheckTasksWaitingTermination+0x58>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d1e1      	bne.n	80155e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015624:	bf00      	nop
 8015626:	bf00      	nop
 8015628:	3708      	adds	r7, #8
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	240029bc 	.word	0x240029bc
 8015634:	240029e8 	.word	0x240029e8
 8015638:	240029d0 	.word	0x240029d0

0801563c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801564a:	2b00      	cmp	r3, #0
 801564c:	d108      	bne.n	8015660 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015652:	4618      	mov	r0, r3
 8015654:	f000 ffc4 	bl	80165e0 <vPortFree>
				vPortFree( pxTCB );
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f000 ffc1 	bl	80165e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801565e:	e018      	b.n	8015692 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015666:	2b01      	cmp	r3, #1
 8015668:	d103      	bne.n	8015672 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 ffb8 	bl	80165e0 <vPortFree>
	}
 8015670:	e00f      	b.n	8015692 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015678:	2b02      	cmp	r3, #2
 801567a:	d00a      	beq.n	8015692 <prvDeleteTCB+0x56>
	__asm volatile
 801567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015680:	f383 8811 	msr	BASEPRI, r3
 8015684:	f3bf 8f6f 	isb	sy
 8015688:	f3bf 8f4f 	dsb	sy
 801568c:	60fb      	str	r3, [r7, #12]
}
 801568e:	bf00      	nop
 8015690:	e7fe      	b.n	8015690 <prvDeleteTCB+0x54>
	}
 8015692:	bf00      	nop
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}
	...

0801569c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801569c:	b480      	push	{r7}
 801569e:	b083      	sub	sp, #12
 80156a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80156a2:	4b0c      	ldr	r3, [pc, #48]	; (80156d4 <prvResetNextTaskUnblockTime+0x38>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d104      	bne.n	80156b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80156ac:	4b0a      	ldr	r3, [pc, #40]	; (80156d8 <prvResetNextTaskUnblockTime+0x3c>)
 80156ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80156b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80156b4:	e008      	b.n	80156c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156b6:	4b07      	ldr	r3, [pc, #28]	; (80156d4 <prvResetNextTaskUnblockTime+0x38>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	4a04      	ldr	r2, [pc, #16]	; (80156d8 <prvResetNextTaskUnblockTime+0x3c>)
 80156c6:	6013      	str	r3, [r2, #0]
}
 80156c8:	bf00      	nop
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr
 80156d4:	240029a0 	.word	0x240029a0
 80156d8:	24002a08 	.word	0x24002a08

080156dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80156dc:	b480      	push	{r7}
 80156de:	b083      	sub	sp, #12
 80156e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80156e2:	4b0b      	ldr	r3, [pc, #44]	; (8015710 <xTaskGetSchedulerState+0x34>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d102      	bne.n	80156f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80156ea:	2301      	movs	r3, #1
 80156ec:	607b      	str	r3, [r7, #4]
 80156ee:	e008      	b.n	8015702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80156f0:	4b08      	ldr	r3, [pc, #32]	; (8015714 <xTaskGetSchedulerState+0x38>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d102      	bne.n	80156fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80156f8:	2302      	movs	r3, #2
 80156fa:	607b      	str	r3, [r7, #4]
 80156fc:	e001      	b.n	8015702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80156fe:	2300      	movs	r3, #0
 8015700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015702:	687b      	ldr	r3, [r7, #4]
	}
 8015704:	4618      	mov	r0, r3
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr
 8015710:	240029f4 	.word	0x240029f4
 8015714:	24002a10 	.word	0x24002a10

08015718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015718:	b580      	push	{r7, lr}
 801571a:	b086      	sub	sp, #24
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015724:	2300      	movs	r3, #0
 8015726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d056      	beq.n	80157dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801572e:	4b2e      	ldr	r3, [pc, #184]	; (80157e8 <xTaskPriorityDisinherit+0xd0>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	693a      	ldr	r2, [r7, #16]
 8015734:	429a      	cmp	r2, r3
 8015736:	d00a      	beq.n	801574e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801573c:	f383 8811 	msr	BASEPRI, r3
 8015740:	f3bf 8f6f 	isb	sy
 8015744:	f3bf 8f4f 	dsb	sy
 8015748:	60fb      	str	r3, [r7, #12]
}
 801574a:	bf00      	nop
 801574c:	e7fe      	b.n	801574c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015752:	2b00      	cmp	r3, #0
 8015754:	d10a      	bne.n	801576c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575a:	f383 8811 	msr	BASEPRI, r3
 801575e:	f3bf 8f6f 	isb	sy
 8015762:	f3bf 8f4f 	dsb	sy
 8015766:	60bb      	str	r3, [r7, #8]
}
 8015768:	bf00      	nop
 801576a:	e7fe      	b.n	801576a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801576c:	693b      	ldr	r3, [r7, #16]
 801576e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015770:	1e5a      	subs	r2, r3, #1
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801577e:	429a      	cmp	r2, r3
 8015780:	d02c      	beq.n	80157dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015782:	693b      	ldr	r3, [r7, #16]
 8015784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015786:	2b00      	cmp	r3, #0
 8015788:	d128      	bne.n	80157dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801578a:	693b      	ldr	r3, [r7, #16]
 801578c:	3304      	adds	r3, #4
 801578e:	4618      	mov	r0, r3
 8015790:	f7fe fbbc 	bl	8013f0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80157a8:	693b      	ldr	r3, [r7, #16]
 80157aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157ac:	4b0f      	ldr	r3, [pc, #60]	; (80157ec <xTaskPriorityDisinherit+0xd4>)
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d903      	bls.n	80157bc <xTaskPriorityDisinherit+0xa4>
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157b8:	4a0c      	ldr	r2, [pc, #48]	; (80157ec <xTaskPriorityDisinherit+0xd4>)
 80157ba:	6013      	str	r3, [r2, #0]
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157c0:	4613      	mov	r3, r2
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	4413      	add	r3, r2
 80157c6:	009b      	lsls	r3, r3, #2
 80157c8:	4a09      	ldr	r2, [pc, #36]	; (80157f0 <xTaskPriorityDisinherit+0xd8>)
 80157ca:	441a      	add	r2, r3
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	3304      	adds	r3, #4
 80157d0:	4619      	mov	r1, r3
 80157d2:	4610      	mov	r0, r2
 80157d4:	f7fe fb3d 	bl	8013e52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80157d8:	2301      	movs	r3, #1
 80157da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80157dc:	697b      	ldr	r3, [r7, #20]
	}
 80157de:	4618      	mov	r0, r3
 80157e0:	3718      	adds	r7, #24
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	24002514 	.word	0x24002514
 80157ec:	240029f0 	.word	0x240029f0
 80157f0:	24002518 	.word	0x24002518

080157f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80157f4:	b480      	push	{r7}
 80157f6:	b083      	sub	sp, #12
 80157f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80157fa:	4b09      	ldr	r3, [pc, #36]	; (8015820 <uxTaskResetEventItemValue+0x2c>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	699b      	ldr	r3, [r3, #24]
 8015800:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015802:	4b07      	ldr	r3, [pc, #28]	; (8015820 <uxTaskResetEventItemValue+0x2c>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015808:	4b05      	ldr	r3, [pc, #20]	; (8015820 <uxTaskResetEventItemValue+0x2c>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015810:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015812:	687b      	ldr	r3, [r7, #4]
}
 8015814:	4618      	mov	r0, r3
 8015816:	370c      	adds	r7, #12
 8015818:	46bd      	mov	sp, r7
 801581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581e:	4770      	bx	lr
 8015820:	24002514 	.word	0x24002514

08015824 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801582e:	4b21      	ldr	r3, [pc, #132]	; (80158b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015834:	4b20      	ldr	r3, [pc, #128]	; (80158b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	3304      	adds	r3, #4
 801583a:	4618      	mov	r0, r3
 801583c:	f7fe fb66 	bl	8013f0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015846:	d10a      	bne.n	801585e <prvAddCurrentTaskToDelayedList+0x3a>
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d007      	beq.n	801585e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801584e:	4b1a      	ldr	r3, [pc, #104]	; (80158b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	3304      	adds	r3, #4
 8015854:	4619      	mov	r1, r3
 8015856:	4819      	ldr	r0, [pc, #100]	; (80158bc <prvAddCurrentTaskToDelayedList+0x98>)
 8015858:	f7fe fafb 	bl	8013e52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801585c:	e026      	b.n	80158ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801585e:	68fa      	ldr	r2, [r7, #12]
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4413      	add	r3, r2
 8015864:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015866:	4b14      	ldr	r3, [pc, #80]	; (80158b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	68ba      	ldr	r2, [r7, #8]
 801586c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	429a      	cmp	r2, r3
 8015874:	d209      	bcs.n	801588a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015876:	4b12      	ldr	r3, [pc, #72]	; (80158c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	4b0f      	ldr	r3, [pc, #60]	; (80158b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	3304      	adds	r3, #4
 8015880:	4619      	mov	r1, r3
 8015882:	4610      	mov	r0, r2
 8015884:	f7fe fb09 	bl	8013e9a <vListInsert>
}
 8015888:	e010      	b.n	80158ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801588a:	4b0e      	ldr	r3, [pc, #56]	; (80158c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801588c:	681a      	ldr	r2, [r3, #0]
 801588e:	4b0a      	ldr	r3, [pc, #40]	; (80158b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	3304      	adds	r3, #4
 8015894:	4619      	mov	r1, r3
 8015896:	4610      	mov	r0, r2
 8015898:	f7fe faff 	bl	8013e9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801589c:	4b0a      	ldr	r3, [pc, #40]	; (80158c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	68ba      	ldr	r2, [r7, #8]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d202      	bcs.n	80158ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80158a6:	4a08      	ldr	r2, [pc, #32]	; (80158c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	6013      	str	r3, [r2, #0]
}
 80158ac:	bf00      	nop
 80158ae:	3710      	adds	r7, #16
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	240029ec 	.word	0x240029ec
 80158b8:	24002514 	.word	0x24002514
 80158bc:	240029d4 	.word	0x240029d4
 80158c0:	240029a4 	.word	0x240029a4
 80158c4:	240029a0 	.word	0x240029a0
 80158c8:	24002a08 	.word	0x24002a08

080158cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b08a      	sub	sp, #40	; 0x28
 80158d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80158d2:	2300      	movs	r3, #0
 80158d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80158d6:	f000 fb07 	bl	8015ee8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80158da:	4b1c      	ldr	r3, [pc, #112]	; (801594c <xTimerCreateTimerTask+0x80>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d021      	beq.n	8015926 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80158e2:	2300      	movs	r3, #0
 80158e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80158e6:	2300      	movs	r3, #0
 80158e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80158ea:	1d3a      	adds	r2, r7, #4
 80158ec:	f107 0108 	add.w	r1, r7, #8
 80158f0:	f107 030c 	add.w	r3, r7, #12
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7fd fff9 	bl	80138ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80158fa:	6879      	ldr	r1, [r7, #4]
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	68fa      	ldr	r2, [r7, #12]
 8015900:	9202      	str	r2, [sp, #8]
 8015902:	9301      	str	r3, [sp, #4]
 8015904:	2302      	movs	r3, #2
 8015906:	9300      	str	r3, [sp, #0]
 8015908:	2300      	movs	r3, #0
 801590a:	460a      	mov	r2, r1
 801590c:	4910      	ldr	r1, [pc, #64]	; (8015950 <xTimerCreateTimerTask+0x84>)
 801590e:	4811      	ldr	r0, [pc, #68]	; (8015954 <xTimerCreateTimerTask+0x88>)
 8015910:	f7ff f812 	bl	8014938 <xTaskCreateStatic>
 8015914:	4603      	mov	r3, r0
 8015916:	4a10      	ldr	r2, [pc, #64]	; (8015958 <xTimerCreateTimerTask+0x8c>)
 8015918:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801591a:	4b0f      	ldr	r3, [pc, #60]	; (8015958 <xTimerCreateTimerTask+0x8c>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d001      	beq.n	8015926 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015922:	2301      	movs	r3, #1
 8015924:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10a      	bne.n	8015942 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015930:	f383 8811 	msr	BASEPRI, r3
 8015934:	f3bf 8f6f 	isb	sy
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	613b      	str	r3, [r7, #16]
}
 801593e:	bf00      	nop
 8015940:	e7fe      	b.n	8015940 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015942:	697b      	ldr	r3, [r7, #20]
}
 8015944:	4618      	mov	r0, r3
 8015946:	3718      	adds	r7, #24
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}
 801594c:	24002a44 	.word	0x24002a44
 8015950:	08017508 	.word	0x08017508
 8015954:	08015a91 	.word	0x08015a91
 8015958:	24002a48 	.word	0x24002a48

0801595c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b08a      	sub	sp, #40	; 0x28
 8015960:	af00      	add	r7, sp, #0
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	60b9      	str	r1, [r7, #8]
 8015966:	607a      	str	r2, [r7, #4]
 8015968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801596a:	2300      	movs	r3, #0
 801596c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d10a      	bne.n	801598a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015978:	f383 8811 	msr	BASEPRI, r3
 801597c:	f3bf 8f6f 	isb	sy
 8015980:	f3bf 8f4f 	dsb	sy
 8015984:	623b      	str	r3, [r7, #32]
}
 8015986:	bf00      	nop
 8015988:	e7fe      	b.n	8015988 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801598a:	4b1a      	ldr	r3, [pc, #104]	; (80159f4 <xTimerGenericCommand+0x98>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d02a      	beq.n	80159e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	2b05      	cmp	r3, #5
 80159a2:	dc18      	bgt.n	80159d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80159a4:	f7ff fe9a 	bl	80156dc <xTaskGetSchedulerState>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b02      	cmp	r3, #2
 80159ac:	d109      	bne.n	80159c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80159ae:	4b11      	ldr	r3, [pc, #68]	; (80159f4 <xTimerGenericCommand+0x98>)
 80159b0:	6818      	ldr	r0, [r3, #0]
 80159b2:	f107 0110 	add.w	r1, r7, #16
 80159b6:	2300      	movs	r3, #0
 80159b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159ba:	f7fe fbd5 	bl	8014168 <xQueueGenericSend>
 80159be:	6278      	str	r0, [r7, #36]	; 0x24
 80159c0:	e012      	b.n	80159e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80159c2:	4b0c      	ldr	r3, [pc, #48]	; (80159f4 <xTimerGenericCommand+0x98>)
 80159c4:	6818      	ldr	r0, [r3, #0]
 80159c6:	f107 0110 	add.w	r1, r7, #16
 80159ca:	2300      	movs	r3, #0
 80159cc:	2200      	movs	r2, #0
 80159ce:	f7fe fbcb 	bl	8014168 <xQueueGenericSend>
 80159d2:	6278      	str	r0, [r7, #36]	; 0x24
 80159d4:	e008      	b.n	80159e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80159d6:	4b07      	ldr	r3, [pc, #28]	; (80159f4 <xTimerGenericCommand+0x98>)
 80159d8:	6818      	ldr	r0, [r3, #0]
 80159da:	f107 0110 	add.w	r1, r7, #16
 80159de:	2300      	movs	r3, #0
 80159e0:	683a      	ldr	r2, [r7, #0]
 80159e2:	f7fe fcbf 	bl	8014364 <xQueueGenericSendFromISR>
 80159e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80159e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3728      	adds	r7, #40	; 0x28
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	24002a44 	.word	0x24002a44

080159f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b088      	sub	sp, #32
 80159fc:	af02      	add	r7, sp, #8
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a02:	4b22      	ldr	r3, [pc, #136]	; (8015a8c <prvProcessExpiredTimer+0x94>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	3304      	adds	r3, #4
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7fe fa7b 	bl	8013f0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a1c:	f003 0304 	and.w	r3, r3, #4
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d022      	beq.n	8015a6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	699a      	ldr	r2, [r3, #24]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	18d1      	adds	r1, r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	683a      	ldr	r2, [r7, #0]
 8015a30:	6978      	ldr	r0, [r7, #20]
 8015a32:	f000 f8d1 	bl	8015bd8 <prvInsertTimerInActiveList>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d01f      	beq.n	8015a7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	2300      	movs	r3, #0
 8015a42:	687a      	ldr	r2, [r7, #4]
 8015a44:	2100      	movs	r1, #0
 8015a46:	6978      	ldr	r0, [r7, #20]
 8015a48:	f7ff ff88 	bl	801595c <xTimerGenericCommand>
 8015a4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d113      	bne.n	8015a7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a58:	f383 8811 	msr	BASEPRI, r3
 8015a5c:	f3bf 8f6f 	isb	sy
 8015a60:	f3bf 8f4f 	dsb	sy
 8015a64:	60fb      	str	r3, [r7, #12]
}
 8015a66:	bf00      	nop
 8015a68:	e7fe      	b.n	8015a68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a70:	f023 0301 	bic.w	r3, r3, #1
 8015a74:	b2da      	uxtb	r2, r3
 8015a76:	697b      	ldr	r3, [r7, #20]
 8015a78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	6a1b      	ldr	r3, [r3, #32]
 8015a80:	6978      	ldr	r0, [r7, #20]
 8015a82:	4798      	blx	r3
}
 8015a84:	bf00      	nop
 8015a86:	3718      	adds	r7, #24
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	24002a3c 	.word	0x24002a3c

08015a90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b084      	sub	sp, #16
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015a98:	f107 0308 	add.w	r3, r7, #8
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f000 f857 	bl	8015b50 <prvGetNextExpireTime>
 8015aa2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	4619      	mov	r1, r3
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f000 f803 	bl	8015ab4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015aae:	f000 f8d5 	bl	8015c5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015ab2:	e7f1      	b.n	8015a98 <prvTimerTask+0x8>

08015ab4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b084      	sub	sp, #16
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015abe:	f7ff f977 	bl	8014db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ac2:	f107 0308 	add.w	r3, r7, #8
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f000 f866 	bl	8015b98 <prvSampleTimeNow>
 8015acc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d130      	bne.n	8015b36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d10a      	bne.n	8015af0 <prvProcessTimerOrBlockTask+0x3c>
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d806      	bhi.n	8015af0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015ae2:	f7ff f973 	bl	8014dcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015ae6:	68f9      	ldr	r1, [r7, #12]
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f7ff ff85 	bl	80159f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015aee:	e024      	b.n	8015b3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d008      	beq.n	8015b08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015af6:	4b13      	ldr	r3, [pc, #76]	; (8015b44 <prvProcessTimerOrBlockTask+0x90>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d101      	bne.n	8015b04 <prvProcessTimerOrBlockTask+0x50>
 8015b00:	2301      	movs	r3, #1
 8015b02:	e000      	b.n	8015b06 <prvProcessTimerOrBlockTask+0x52>
 8015b04:	2300      	movs	r3, #0
 8015b06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015b08:	4b0f      	ldr	r3, [pc, #60]	; (8015b48 <prvProcessTimerOrBlockTask+0x94>)
 8015b0a:	6818      	ldr	r0, [r3, #0]
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	1ad3      	subs	r3, r2, r3
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	4619      	mov	r1, r3
 8015b16:	f7fe fedb 	bl	80148d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015b1a:	f7ff f957 	bl	8014dcc <xTaskResumeAll>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10a      	bne.n	8015b3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015b24:	4b09      	ldr	r3, [pc, #36]	; (8015b4c <prvProcessTimerOrBlockTask+0x98>)
 8015b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b2a:	601a      	str	r2, [r3, #0]
 8015b2c:	f3bf 8f4f 	dsb	sy
 8015b30:	f3bf 8f6f 	isb	sy
}
 8015b34:	e001      	b.n	8015b3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015b36:	f7ff f949 	bl	8014dcc <xTaskResumeAll>
}
 8015b3a:	bf00      	nop
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	24002a40 	.word	0x24002a40
 8015b48:	24002a44 	.word	0x24002a44
 8015b4c:	e000ed04 	.word	0xe000ed04

08015b50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015b50:	b480      	push	{r7}
 8015b52:	b085      	sub	sp, #20
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015b58:	4b0e      	ldr	r3, [pc, #56]	; (8015b94 <prvGetNextExpireTime+0x44>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d101      	bne.n	8015b66 <prvGetNextExpireTime+0x16>
 8015b62:	2201      	movs	r2, #1
 8015b64:	e000      	b.n	8015b68 <prvGetNextExpireTime+0x18>
 8015b66:	2200      	movs	r2, #0
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d105      	bne.n	8015b80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015b74:	4b07      	ldr	r3, [pc, #28]	; (8015b94 <prvGetNextExpireTime+0x44>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	60fb      	str	r3, [r7, #12]
 8015b7e:	e001      	b.n	8015b84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015b80:	2300      	movs	r3, #0
 8015b82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015b84:	68fb      	ldr	r3, [r7, #12]
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3714      	adds	r7, #20
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b90:	4770      	bx	lr
 8015b92:	bf00      	nop
 8015b94:	24002a3c 	.word	0x24002a3c

08015b98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015ba0:	f7ff f9b2 	bl	8014f08 <xTaskGetTickCount>
 8015ba4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015ba6:	4b0b      	ldr	r3, [pc, #44]	; (8015bd4 <prvSampleTimeNow+0x3c>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	68fa      	ldr	r2, [r7, #12]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d205      	bcs.n	8015bbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015bb0:	f000 f936 	bl	8015e20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	601a      	str	r2, [r3, #0]
 8015bba:	e002      	b.n	8015bc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015bc2:	4a04      	ldr	r2, [pc, #16]	; (8015bd4 <prvSampleTimeNow+0x3c>)
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3710      	adds	r7, #16
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	24002a4c 	.word	0x24002a4c

08015bd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b086      	sub	sp, #24
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	607a      	str	r2, [r7, #4]
 8015be4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015be6:	2300      	movs	r3, #0
 8015be8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	68ba      	ldr	r2, [r7, #8]
 8015bee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	68fa      	ldr	r2, [r7, #12]
 8015bf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015bf6:	68ba      	ldr	r2, [r7, #8]
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	d812      	bhi.n	8015c24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	1ad2      	subs	r2, r2, r3
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	699b      	ldr	r3, [r3, #24]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d302      	bcc.n	8015c12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	617b      	str	r3, [r7, #20]
 8015c10:	e01b      	b.n	8015c4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015c12:	4b10      	ldr	r3, [pc, #64]	; (8015c54 <prvInsertTimerInActiveList+0x7c>)
 8015c14:	681a      	ldr	r2, [r3, #0]
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	3304      	adds	r3, #4
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	4610      	mov	r0, r2
 8015c1e:	f7fe f93c 	bl	8013e9a <vListInsert>
 8015c22:	e012      	b.n	8015c4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015c24:	687a      	ldr	r2, [r7, #4]
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d206      	bcs.n	8015c3a <prvInsertTimerInActiveList+0x62>
 8015c2c:	68ba      	ldr	r2, [r7, #8]
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d302      	bcc.n	8015c3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015c34:	2301      	movs	r3, #1
 8015c36:	617b      	str	r3, [r7, #20]
 8015c38:	e007      	b.n	8015c4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015c3a:	4b07      	ldr	r3, [pc, #28]	; (8015c58 <prvInsertTimerInActiveList+0x80>)
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	3304      	adds	r3, #4
 8015c42:	4619      	mov	r1, r3
 8015c44:	4610      	mov	r0, r2
 8015c46:	f7fe f928 	bl	8013e9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015c4a:	697b      	ldr	r3, [r7, #20]
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3718      	adds	r7, #24
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	24002a40 	.word	0x24002a40
 8015c58:	24002a3c 	.word	0x24002a3c

08015c5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b08e      	sub	sp, #56	; 0x38
 8015c60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015c62:	e0ca      	b.n	8015dfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	da18      	bge.n	8015c9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015c6a:	1d3b      	adds	r3, r7, #4
 8015c6c:	3304      	adds	r3, #4
 8015c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d10a      	bne.n	8015c8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7a:	f383 8811 	msr	BASEPRI, r3
 8015c7e:	f3bf 8f6f 	isb	sy
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	61fb      	str	r3, [r7, #28]
}
 8015c88:	bf00      	nop
 8015c8a:	e7fe      	b.n	8015c8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c92:	6850      	ldr	r0, [r2, #4]
 8015c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c96:	6892      	ldr	r2, [r2, #8]
 8015c98:	4611      	mov	r1, r2
 8015c9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	f2c0 80aa 	blt.w	8015df8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015caa:	695b      	ldr	r3, [r3, #20]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d004      	beq.n	8015cba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb2:	3304      	adds	r3, #4
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7fe f929 	bl	8013f0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015cba:	463b      	mov	r3, r7
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7ff ff6b 	bl	8015b98 <prvSampleTimeNow>
 8015cc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2b09      	cmp	r3, #9
 8015cc8:	f200 8097 	bhi.w	8015dfa <prvProcessReceivedCommands+0x19e>
 8015ccc:	a201      	add	r2, pc, #4	; (adr r2, 8015cd4 <prvProcessReceivedCommands+0x78>)
 8015cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cd2:	bf00      	nop
 8015cd4:	08015cfd 	.word	0x08015cfd
 8015cd8:	08015cfd 	.word	0x08015cfd
 8015cdc:	08015cfd 	.word	0x08015cfd
 8015ce0:	08015d71 	.word	0x08015d71
 8015ce4:	08015d85 	.word	0x08015d85
 8015ce8:	08015dcf 	.word	0x08015dcf
 8015cec:	08015cfd 	.word	0x08015cfd
 8015cf0:	08015cfd 	.word	0x08015cfd
 8015cf4:	08015d71 	.word	0x08015d71
 8015cf8:	08015d85 	.word	0x08015d85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d02:	f043 0301 	orr.w	r3, r3, #1
 8015d06:	b2da      	uxtb	r2, r3
 8015d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d12:	699b      	ldr	r3, [r3, #24]
 8015d14:	18d1      	adds	r1, r2, r3
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d1c:	f7ff ff5c 	bl	8015bd8 <prvInsertTimerInActiveList>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d069      	beq.n	8015dfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d28:	6a1b      	ldr	r3, [r3, #32]
 8015d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d34:	f003 0304 	and.w	r3, r3, #4
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d05e      	beq.n	8015dfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015d3c:	68ba      	ldr	r2, [r7, #8]
 8015d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d40:	699b      	ldr	r3, [r3, #24]
 8015d42:	441a      	add	r2, r3
 8015d44:	2300      	movs	r3, #0
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	2300      	movs	r3, #0
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d4e:	f7ff fe05 	bl	801595c <xTimerGenericCommand>
 8015d52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015d54:	6a3b      	ldr	r3, [r7, #32]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d14f      	bne.n	8015dfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5e:	f383 8811 	msr	BASEPRI, r3
 8015d62:	f3bf 8f6f 	isb	sy
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	61bb      	str	r3, [r7, #24]
}
 8015d6c:	bf00      	nop
 8015d6e:	e7fe      	b.n	8015d6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d76:	f023 0301 	bic.w	r3, r3, #1
 8015d7a:	b2da      	uxtb	r2, r3
 8015d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015d82:	e03a      	b.n	8015dfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d8a:	f043 0301 	orr.w	r3, r3, #1
 8015d8e:	b2da      	uxtb	r2, r3
 8015d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015d96:	68ba      	ldr	r2, [r7, #8]
 8015d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9e:	699b      	ldr	r3, [r3, #24]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d10a      	bne.n	8015dba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da8:	f383 8811 	msr	BASEPRI, r3
 8015dac:	f3bf 8f6f 	isb	sy
 8015db0:	f3bf 8f4f 	dsb	sy
 8015db4:	617b      	str	r3, [r7, #20]
}
 8015db6:	bf00      	nop
 8015db8:	e7fe      	b.n	8015db8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dbc:	699a      	ldr	r2, [r3, #24]
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	18d1      	adds	r1, r2, r3
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dc8:	f7ff ff06 	bl	8015bd8 <prvInsertTimerInActiveList>
					break;
 8015dcc:	e015      	b.n	8015dfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015dd4:	f003 0302 	and.w	r3, r3, #2
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d103      	bne.n	8015de4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dde:	f000 fbff 	bl	80165e0 <vPortFree>
 8015de2:	e00a      	b.n	8015dfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015dea:	f023 0301 	bic.w	r3, r3, #1
 8015dee:	b2da      	uxtb	r2, r3
 8015df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015df6:	e000      	b.n	8015dfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015df8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015dfa:	4b08      	ldr	r3, [pc, #32]	; (8015e1c <prvProcessReceivedCommands+0x1c0>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	1d39      	adds	r1, r7, #4
 8015e00:	2200      	movs	r2, #0
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7fe fb4a 	bl	801449c <xQueueReceive>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	f47f af2a 	bne.w	8015c64 <prvProcessReceivedCommands+0x8>
	}
}
 8015e10:	bf00      	nop
 8015e12:	bf00      	nop
 8015e14:	3730      	adds	r7, #48	; 0x30
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	24002a44 	.word	0x24002a44

08015e20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b088      	sub	sp, #32
 8015e24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015e26:	e048      	b.n	8015eba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015e28:	4b2d      	ldr	r3, [pc, #180]	; (8015ee0 <prvSwitchTimerLists+0xc0>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68db      	ldr	r3, [r3, #12]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e32:	4b2b      	ldr	r3, [pc, #172]	; (8015ee0 <prvSwitchTimerLists+0xc0>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	68db      	ldr	r3, [r3, #12]
 8015e38:	68db      	ldr	r3, [r3, #12]
 8015e3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	3304      	adds	r3, #4
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7fe f863 	bl	8013f0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	6a1b      	ldr	r3, [r3, #32]
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e54:	f003 0304 	and.w	r3, r3, #4
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d02e      	beq.n	8015eba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	699b      	ldr	r3, [r3, #24]
 8015e60:	693a      	ldr	r2, [r7, #16]
 8015e62:	4413      	add	r3, r2
 8015e64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015e66:	68ba      	ldr	r2, [r7, #8]
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d90e      	bls.n	8015e8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	68ba      	ldr	r2, [r7, #8]
 8015e72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	68fa      	ldr	r2, [r7, #12]
 8015e78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015e7a:	4b19      	ldr	r3, [pc, #100]	; (8015ee0 <prvSwitchTimerLists+0xc0>)
 8015e7c:	681a      	ldr	r2, [r3, #0]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	3304      	adds	r3, #4
 8015e82:	4619      	mov	r1, r3
 8015e84:	4610      	mov	r0, r2
 8015e86:	f7fe f808 	bl	8013e9a <vListInsert>
 8015e8a:	e016      	b.n	8015eba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	2300      	movs	r3, #0
 8015e92:	693a      	ldr	r2, [r7, #16]
 8015e94:	2100      	movs	r1, #0
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f7ff fd60 	bl	801595c <xTimerGenericCommand>
 8015e9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d10a      	bne.n	8015eba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ea8:	f383 8811 	msr	BASEPRI, r3
 8015eac:	f3bf 8f6f 	isb	sy
 8015eb0:	f3bf 8f4f 	dsb	sy
 8015eb4:	603b      	str	r3, [r7, #0]
}
 8015eb6:	bf00      	nop
 8015eb8:	e7fe      	b.n	8015eb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015eba:	4b09      	ldr	r3, [pc, #36]	; (8015ee0 <prvSwitchTimerLists+0xc0>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d1b1      	bne.n	8015e28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015ec4:	4b06      	ldr	r3, [pc, #24]	; (8015ee0 <prvSwitchTimerLists+0xc0>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015eca:	4b06      	ldr	r3, [pc, #24]	; (8015ee4 <prvSwitchTimerLists+0xc4>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a04      	ldr	r2, [pc, #16]	; (8015ee0 <prvSwitchTimerLists+0xc0>)
 8015ed0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015ed2:	4a04      	ldr	r2, [pc, #16]	; (8015ee4 <prvSwitchTimerLists+0xc4>)
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	6013      	str	r3, [r2, #0]
}
 8015ed8:	bf00      	nop
 8015eda:	3718      	adds	r7, #24
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}
 8015ee0:	24002a3c 	.word	0x24002a3c
 8015ee4:	24002a40 	.word	0x24002a40

08015ee8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015eee:	f000 f989 	bl	8016204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015ef2:	4b15      	ldr	r3, [pc, #84]	; (8015f48 <prvCheckForValidListAndQueue+0x60>)
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d120      	bne.n	8015f3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015efa:	4814      	ldr	r0, [pc, #80]	; (8015f4c <prvCheckForValidListAndQueue+0x64>)
 8015efc:	f7fd ff7c 	bl	8013df8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015f00:	4813      	ldr	r0, [pc, #76]	; (8015f50 <prvCheckForValidListAndQueue+0x68>)
 8015f02:	f7fd ff79 	bl	8013df8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015f06:	4b13      	ldr	r3, [pc, #76]	; (8015f54 <prvCheckForValidListAndQueue+0x6c>)
 8015f08:	4a10      	ldr	r2, [pc, #64]	; (8015f4c <prvCheckForValidListAndQueue+0x64>)
 8015f0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015f0c:	4b12      	ldr	r3, [pc, #72]	; (8015f58 <prvCheckForValidListAndQueue+0x70>)
 8015f0e:	4a10      	ldr	r2, [pc, #64]	; (8015f50 <prvCheckForValidListAndQueue+0x68>)
 8015f10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015f12:	2300      	movs	r3, #0
 8015f14:	9300      	str	r3, [sp, #0]
 8015f16:	4b11      	ldr	r3, [pc, #68]	; (8015f5c <prvCheckForValidListAndQueue+0x74>)
 8015f18:	4a11      	ldr	r2, [pc, #68]	; (8015f60 <prvCheckForValidListAndQueue+0x78>)
 8015f1a:	2110      	movs	r1, #16
 8015f1c:	200a      	movs	r0, #10
 8015f1e:	f7fe f887 	bl	8014030 <xQueueGenericCreateStatic>
 8015f22:	4603      	mov	r3, r0
 8015f24:	4a08      	ldr	r2, [pc, #32]	; (8015f48 <prvCheckForValidListAndQueue+0x60>)
 8015f26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015f28:	4b07      	ldr	r3, [pc, #28]	; (8015f48 <prvCheckForValidListAndQueue+0x60>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d005      	beq.n	8015f3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015f30:	4b05      	ldr	r3, [pc, #20]	; (8015f48 <prvCheckForValidListAndQueue+0x60>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	490b      	ldr	r1, [pc, #44]	; (8015f64 <prvCheckForValidListAndQueue+0x7c>)
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7fe fca0 	bl	801487c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015f3c:	f000 f992 	bl	8016264 <vPortExitCritical>
}
 8015f40:	bf00      	nop
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
 8015f46:	bf00      	nop
 8015f48:	24002a44 	.word	0x24002a44
 8015f4c:	24002a14 	.word	0x24002a14
 8015f50:	24002a28 	.word	0x24002a28
 8015f54:	24002a3c 	.word	0x24002a3c
 8015f58:	24002a40 	.word	0x24002a40
 8015f5c:	24002af0 	.word	0x24002af0
 8015f60:	24002a50 	.word	0x24002a50
 8015f64:	08017510 	.word	0x08017510

08015f68 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	; 0x28
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015f76:	f06f 0301 	mvn.w	r3, #1
 8015f7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015f88:	4b06      	ldr	r3, [pc, #24]	; (8015fa4 <xTimerPendFunctionCallFromISR+0x3c>)
 8015f8a:	6818      	ldr	r0, [r3, #0]
 8015f8c:	f107 0114 	add.w	r1, r7, #20
 8015f90:	2300      	movs	r3, #0
 8015f92:	683a      	ldr	r2, [r7, #0]
 8015f94:	f7fe f9e6 	bl	8014364 <xQueueGenericSendFromISR>
 8015f98:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3728      	adds	r7, #40	; 0x28
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	24002a44 	.word	0x24002a44

08015fa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	3b04      	subs	r3, #4
 8015fb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	3b04      	subs	r3, #4
 8015fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	f023 0201 	bic.w	r2, r3, #1
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	3b04      	subs	r3, #4
 8015fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015fd8:	4a0c      	ldr	r2, [pc, #48]	; (801600c <pxPortInitialiseStack+0x64>)
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	3b14      	subs	r3, #20
 8015fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015fe4:	687a      	ldr	r2, [r7, #4]
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	3b04      	subs	r3, #4
 8015fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	f06f 0202 	mvn.w	r2, #2
 8015ff6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	3b20      	subs	r3, #32
 8015ffc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
}
 8016000:	4618      	mov	r0, r3
 8016002:	3714      	adds	r7, #20
 8016004:	46bd      	mov	sp, r7
 8016006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600a:	4770      	bx	lr
 801600c:	08016011 	.word	0x08016011

08016010 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016010:	b480      	push	{r7}
 8016012:	b085      	sub	sp, #20
 8016014:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016016:	2300      	movs	r3, #0
 8016018:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801601a:	4b12      	ldr	r3, [pc, #72]	; (8016064 <prvTaskExitError+0x54>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016022:	d00a      	beq.n	801603a <prvTaskExitError+0x2a>
	__asm volatile
 8016024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016028:	f383 8811 	msr	BASEPRI, r3
 801602c:	f3bf 8f6f 	isb	sy
 8016030:	f3bf 8f4f 	dsb	sy
 8016034:	60fb      	str	r3, [r7, #12]
}
 8016036:	bf00      	nop
 8016038:	e7fe      	b.n	8016038 <prvTaskExitError+0x28>
	__asm volatile
 801603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801603e:	f383 8811 	msr	BASEPRI, r3
 8016042:	f3bf 8f6f 	isb	sy
 8016046:	f3bf 8f4f 	dsb	sy
 801604a:	60bb      	str	r3, [r7, #8]
}
 801604c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801604e:	bf00      	nop
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d0fc      	beq.n	8016050 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016056:	bf00      	nop
 8016058:	bf00      	nop
 801605a:	3714      	adds	r7, #20
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr
 8016064:	24000094 	.word	0x24000094
	...

08016070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016070:	4b07      	ldr	r3, [pc, #28]	; (8016090 <pxCurrentTCBConst2>)
 8016072:	6819      	ldr	r1, [r3, #0]
 8016074:	6808      	ldr	r0, [r1, #0]
 8016076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801607a:	f380 8809 	msr	PSP, r0
 801607e:	f3bf 8f6f 	isb	sy
 8016082:	f04f 0000 	mov.w	r0, #0
 8016086:	f380 8811 	msr	BASEPRI, r0
 801608a:	4770      	bx	lr
 801608c:	f3af 8000 	nop.w

08016090 <pxCurrentTCBConst2>:
 8016090:	24002514 	.word	0x24002514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016094:	bf00      	nop
 8016096:	bf00      	nop

08016098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016098:	4808      	ldr	r0, [pc, #32]	; (80160bc <prvPortStartFirstTask+0x24>)
 801609a:	6800      	ldr	r0, [r0, #0]
 801609c:	6800      	ldr	r0, [r0, #0]
 801609e:	f380 8808 	msr	MSP, r0
 80160a2:	f04f 0000 	mov.w	r0, #0
 80160a6:	f380 8814 	msr	CONTROL, r0
 80160aa:	b662      	cpsie	i
 80160ac:	b661      	cpsie	f
 80160ae:	f3bf 8f4f 	dsb	sy
 80160b2:	f3bf 8f6f 	isb	sy
 80160b6:	df00      	svc	0
 80160b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80160ba:	bf00      	nop
 80160bc:	e000ed08 	.word	0xe000ed08

080160c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b086      	sub	sp, #24
 80160c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80160c6:	4b46      	ldr	r3, [pc, #280]	; (80161e0 <xPortStartScheduler+0x120>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4a46      	ldr	r2, [pc, #280]	; (80161e4 <xPortStartScheduler+0x124>)
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d10a      	bne.n	80160e6 <xPortStartScheduler+0x26>
	__asm volatile
 80160d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160d4:	f383 8811 	msr	BASEPRI, r3
 80160d8:	f3bf 8f6f 	isb	sy
 80160dc:	f3bf 8f4f 	dsb	sy
 80160e0:	613b      	str	r3, [r7, #16]
}
 80160e2:	bf00      	nop
 80160e4:	e7fe      	b.n	80160e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80160e6:	4b3e      	ldr	r3, [pc, #248]	; (80161e0 <xPortStartScheduler+0x120>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	4a3f      	ldr	r2, [pc, #252]	; (80161e8 <xPortStartScheduler+0x128>)
 80160ec:	4293      	cmp	r3, r2
 80160ee:	d10a      	bne.n	8016106 <xPortStartScheduler+0x46>
	__asm volatile
 80160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f4:	f383 8811 	msr	BASEPRI, r3
 80160f8:	f3bf 8f6f 	isb	sy
 80160fc:	f3bf 8f4f 	dsb	sy
 8016100:	60fb      	str	r3, [r7, #12]
}
 8016102:	bf00      	nop
 8016104:	e7fe      	b.n	8016104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016106:	4b39      	ldr	r3, [pc, #228]	; (80161ec <xPortStartScheduler+0x12c>)
 8016108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	b2db      	uxtb	r3, r3
 8016110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	22ff      	movs	r2, #255	; 0xff
 8016116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016118:	697b      	ldr	r3, [r7, #20]
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	b2db      	uxtb	r3, r3
 801611e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016120:	78fb      	ldrb	r3, [r7, #3]
 8016122:	b2db      	uxtb	r3, r3
 8016124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016128:	b2da      	uxtb	r2, r3
 801612a:	4b31      	ldr	r3, [pc, #196]	; (80161f0 <xPortStartScheduler+0x130>)
 801612c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801612e:	4b31      	ldr	r3, [pc, #196]	; (80161f4 <xPortStartScheduler+0x134>)
 8016130:	2207      	movs	r2, #7
 8016132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016134:	e009      	b.n	801614a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016136:	4b2f      	ldr	r3, [pc, #188]	; (80161f4 <xPortStartScheduler+0x134>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	3b01      	subs	r3, #1
 801613c:	4a2d      	ldr	r2, [pc, #180]	; (80161f4 <xPortStartScheduler+0x134>)
 801613e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016140:	78fb      	ldrb	r3, [r7, #3]
 8016142:	b2db      	uxtb	r3, r3
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	b2db      	uxtb	r3, r3
 8016148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801614a:	78fb      	ldrb	r3, [r7, #3]
 801614c:	b2db      	uxtb	r3, r3
 801614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016152:	2b80      	cmp	r3, #128	; 0x80
 8016154:	d0ef      	beq.n	8016136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016156:	4b27      	ldr	r3, [pc, #156]	; (80161f4 <xPortStartScheduler+0x134>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	f1c3 0307 	rsb	r3, r3, #7
 801615e:	2b04      	cmp	r3, #4
 8016160:	d00a      	beq.n	8016178 <xPortStartScheduler+0xb8>
	__asm volatile
 8016162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016166:	f383 8811 	msr	BASEPRI, r3
 801616a:	f3bf 8f6f 	isb	sy
 801616e:	f3bf 8f4f 	dsb	sy
 8016172:	60bb      	str	r3, [r7, #8]
}
 8016174:	bf00      	nop
 8016176:	e7fe      	b.n	8016176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016178:	4b1e      	ldr	r3, [pc, #120]	; (80161f4 <xPortStartScheduler+0x134>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	021b      	lsls	r3, r3, #8
 801617e:	4a1d      	ldr	r2, [pc, #116]	; (80161f4 <xPortStartScheduler+0x134>)
 8016180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016182:	4b1c      	ldr	r3, [pc, #112]	; (80161f4 <xPortStartScheduler+0x134>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801618a:	4a1a      	ldr	r2, [pc, #104]	; (80161f4 <xPortStartScheduler+0x134>)
 801618c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	b2da      	uxtb	r2, r3
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016196:	4b18      	ldr	r3, [pc, #96]	; (80161f8 <xPortStartScheduler+0x138>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	4a17      	ldr	r2, [pc, #92]	; (80161f8 <xPortStartScheduler+0x138>)
 801619c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80161a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80161a2:	4b15      	ldr	r3, [pc, #84]	; (80161f8 <xPortStartScheduler+0x138>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	4a14      	ldr	r2, [pc, #80]	; (80161f8 <xPortStartScheduler+0x138>)
 80161a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80161ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80161ae:	f000 f8dd 	bl	801636c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80161b2:	4b12      	ldr	r3, [pc, #72]	; (80161fc <xPortStartScheduler+0x13c>)
 80161b4:	2200      	movs	r2, #0
 80161b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80161b8:	f000 f8fc 	bl	80163b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80161bc:	4b10      	ldr	r3, [pc, #64]	; (8016200 <xPortStartScheduler+0x140>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4a0f      	ldr	r2, [pc, #60]	; (8016200 <xPortStartScheduler+0x140>)
 80161c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80161c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80161c8:	f7ff ff66 	bl	8016098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80161cc:	f7fe ff6e 	bl	80150ac <vTaskSwitchContext>
	prvTaskExitError();
 80161d0:	f7ff ff1e 	bl	8016010 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80161d4:	2300      	movs	r3, #0
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3718      	adds	r7, #24
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	e000ed00 	.word	0xe000ed00
 80161e4:	410fc271 	.word	0x410fc271
 80161e8:	410fc270 	.word	0x410fc270
 80161ec:	e000e400 	.word	0xe000e400
 80161f0:	24002b40 	.word	0x24002b40
 80161f4:	24002b44 	.word	0x24002b44
 80161f8:	e000ed20 	.word	0xe000ed20
 80161fc:	24000094 	.word	0x24000094
 8016200:	e000ef34 	.word	0xe000ef34

08016204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
	__asm volatile
 801620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801620e:	f383 8811 	msr	BASEPRI, r3
 8016212:	f3bf 8f6f 	isb	sy
 8016216:	f3bf 8f4f 	dsb	sy
 801621a:	607b      	str	r3, [r7, #4]
}
 801621c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801621e:	4b0f      	ldr	r3, [pc, #60]	; (801625c <vPortEnterCritical+0x58>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	3301      	adds	r3, #1
 8016224:	4a0d      	ldr	r2, [pc, #52]	; (801625c <vPortEnterCritical+0x58>)
 8016226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016228:	4b0c      	ldr	r3, [pc, #48]	; (801625c <vPortEnterCritical+0x58>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	2b01      	cmp	r3, #1
 801622e:	d10f      	bne.n	8016250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016230:	4b0b      	ldr	r3, [pc, #44]	; (8016260 <vPortEnterCritical+0x5c>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	b2db      	uxtb	r3, r3
 8016236:	2b00      	cmp	r3, #0
 8016238:	d00a      	beq.n	8016250 <vPortEnterCritical+0x4c>
	__asm volatile
 801623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623e:	f383 8811 	msr	BASEPRI, r3
 8016242:	f3bf 8f6f 	isb	sy
 8016246:	f3bf 8f4f 	dsb	sy
 801624a:	603b      	str	r3, [r7, #0]
}
 801624c:	bf00      	nop
 801624e:	e7fe      	b.n	801624e <vPortEnterCritical+0x4a>
	}
}
 8016250:	bf00      	nop
 8016252:	370c      	adds	r7, #12
 8016254:	46bd      	mov	sp, r7
 8016256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625a:	4770      	bx	lr
 801625c:	24000094 	.word	0x24000094
 8016260:	e000ed04 	.word	0xe000ed04

08016264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016264:	b480      	push	{r7}
 8016266:	b083      	sub	sp, #12
 8016268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801626a:	4b12      	ldr	r3, [pc, #72]	; (80162b4 <vPortExitCritical+0x50>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d10a      	bne.n	8016288 <vPortExitCritical+0x24>
	__asm volatile
 8016272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016276:	f383 8811 	msr	BASEPRI, r3
 801627a:	f3bf 8f6f 	isb	sy
 801627e:	f3bf 8f4f 	dsb	sy
 8016282:	607b      	str	r3, [r7, #4]
}
 8016284:	bf00      	nop
 8016286:	e7fe      	b.n	8016286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016288:	4b0a      	ldr	r3, [pc, #40]	; (80162b4 <vPortExitCritical+0x50>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	3b01      	subs	r3, #1
 801628e:	4a09      	ldr	r2, [pc, #36]	; (80162b4 <vPortExitCritical+0x50>)
 8016290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016292:	4b08      	ldr	r3, [pc, #32]	; (80162b4 <vPortExitCritical+0x50>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d105      	bne.n	80162a6 <vPortExitCritical+0x42>
 801629a:	2300      	movs	r3, #0
 801629c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	f383 8811 	msr	BASEPRI, r3
}
 80162a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80162a6:	bf00      	nop
 80162a8:	370c      	adds	r7, #12
 80162aa:	46bd      	mov	sp, r7
 80162ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b0:	4770      	bx	lr
 80162b2:	bf00      	nop
 80162b4:	24000094 	.word	0x24000094
	...

080162c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80162c0:	f3ef 8009 	mrs	r0, PSP
 80162c4:	f3bf 8f6f 	isb	sy
 80162c8:	4b15      	ldr	r3, [pc, #84]	; (8016320 <pxCurrentTCBConst>)
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	f01e 0f10 	tst.w	lr, #16
 80162d0:	bf08      	it	eq
 80162d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80162d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162da:	6010      	str	r0, [r2, #0]
 80162dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80162e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80162e4:	f380 8811 	msr	BASEPRI, r0
 80162e8:	f3bf 8f4f 	dsb	sy
 80162ec:	f3bf 8f6f 	isb	sy
 80162f0:	f7fe fedc 	bl	80150ac <vTaskSwitchContext>
 80162f4:	f04f 0000 	mov.w	r0, #0
 80162f8:	f380 8811 	msr	BASEPRI, r0
 80162fc:	bc09      	pop	{r0, r3}
 80162fe:	6819      	ldr	r1, [r3, #0]
 8016300:	6808      	ldr	r0, [r1, #0]
 8016302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016306:	f01e 0f10 	tst.w	lr, #16
 801630a:	bf08      	it	eq
 801630c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016310:	f380 8809 	msr	PSP, r0
 8016314:	f3bf 8f6f 	isb	sy
 8016318:	4770      	bx	lr
 801631a:	bf00      	nop
 801631c:	f3af 8000 	nop.w

08016320 <pxCurrentTCBConst>:
 8016320:	24002514 	.word	0x24002514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016324:	bf00      	nop
 8016326:	bf00      	nop

08016328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
	__asm volatile
 801632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016332:	f383 8811 	msr	BASEPRI, r3
 8016336:	f3bf 8f6f 	isb	sy
 801633a:	f3bf 8f4f 	dsb	sy
 801633e:	607b      	str	r3, [r7, #4]
}
 8016340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016342:	f7fe fdf1 	bl	8014f28 <xTaskIncrementTick>
 8016346:	4603      	mov	r3, r0
 8016348:	2b00      	cmp	r3, #0
 801634a:	d003      	beq.n	8016354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801634c:	4b06      	ldr	r3, [pc, #24]	; (8016368 <xPortSysTickHandler+0x40>)
 801634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016352:	601a      	str	r2, [r3, #0]
 8016354:	2300      	movs	r3, #0
 8016356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	f383 8811 	msr	BASEPRI, r3
}
 801635e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016360:	bf00      	nop
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	e000ed04 	.word	0xe000ed04

0801636c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801636c:	b480      	push	{r7}
 801636e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016370:	4b0b      	ldr	r3, [pc, #44]	; (80163a0 <vPortSetupTimerInterrupt+0x34>)
 8016372:	2200      	movs	r2, #0
 8016374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016376:	4b0b      	ldr	r3, [pc, #44]	; (80163a4 <vPortSetupTimerInterrupt+0x38>)
 8016378:	2200      	movs	r2, #0
 801637a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801637c:	4b0a      	ldr	r3, [pc, #40]	; (80163a8 <vPortSetupTimerInterrupt+0x3c>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	4a0a      	ldr	r2, [pc, #40]	; (80163ac <vPortSetupTimerInterrupt+0x40>)
 8016382:	fba2 2303 	umull	r2, r3, r2, r3
 8016386:	099b      	lsrs	r3, r3, #6
 8016388:	4a09      	ldr	r2, [pc, #36]	; (80163b0 <vPortSetupTimerInterrupt+0x44>)
 801638a:	3b01      	subs	r3, #1
 801638c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801638e:	4b04      	ldr	r3, [pc, #16]	; (80163a0 <vPortSetupTimerInterrupt+0x34>)
 8016390:	2207      	movs	r2, #7
 8016392:	601a      	str	r2, [r3, #0]
}
 8016394:	bf00      	nop
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr
 801639e:	bf00      	nop
 80163a0:	e000e010 	.word	0xe000e010
 80163a4:	e000e018 	.word	0xe000e018
 80163a8:	24000084 	.word	0x24000084
 80163ac:	10624dd3 	.word	0x10624dd3
 80163b0:	e000e014 	.word	0xe000e014

080163b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80163b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80163c4 <vPortEnableVFP+0x10>
 80163b8:	6801      	ldr	r1, [r0, #0]
 80163ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80163be:	6001      	str	r1, [r0, #0]
 80163c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80163c2:	bf00      	nop
 80163c4:	e000ed88 	.word	0xe000ed88

080163c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80163ce:	f3ef 8305 	mrs	r3, IPSR
 80163d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2b0f      	cmp	r3, #15
 80163d8:	d914      	bls.n	8016404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80163da:	4a17      	ldr	r2, [pc, #92]	; (8016438 <vPortValidateInterruptPriority+0x70>)
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	4413      	add	r3, r2
 80163e0:	781b      	ldrb	r3, [r3, #0]
 80163e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80163e4:	4b15      	ldr	r3, [pc, #84]	; (801643c <vPortValidateInterruptPriority+0x74>)
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	7afa      	ldrb	r2, [r7, #11]
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d20a      	bcs.n	8016404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80163ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f2:	f383 8811 	msr	BASEPRI, r3
 80163f6:	f3bf 8f6f 	isb	sy
 80163fa:	f3bf 8f4f 	dsb	sy
 80163fe:	607b      	str	r3, [r7, #4]
}
 8016400:	bf00      	nop
 8016402:	e7fe      	b.n	8016402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016404:	4b0e      	ldr	r3, [pc, #56]	; (8016440 <vPortValidateInterruptPriority+0x78>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801640c:	4b0d      	ldr	r3, [pc, #52]	; (8016444 <vPortValidateInterruptPriority+0x7c>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	429a      	cmp	r2, r3
 8016412:	d90a      	bls.n	801642a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016418:	f383 8811 	msr	BASEPRI, r3
 801641c:	f3bf 8f6f 	isb	sy
 8016420:	f3bf 8f4f 	dsb	sy
 8016424:	603b      	str	r3, [r7, #0]
}
 8016426:	bf00      	nop
 8016428:	e7fe      	b.n	8016428 <vPortValidateInterruptPriority+0x60>
	}
 801642a:	bf00      	nop
 801642c:	3714      	adds	r7, #20
 801642e:	46bd      	mov	sp, r7
 8016430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop
 8016438:	e000e3f0 	.word	0xe000e3f0
 801643c:	24002b40 	.word	0x24002b40
 8016440:	e000ed0c 	.word	0xe000ed0c
 8016444:	24002b44 	.word	0x24002b44

08016448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b08a      	sub	sp, #40	; 0x28
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016450:	2300      	movs	r3, #0
 8016452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016454:	f7fe fcac 	bl	8014db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016458:	4b5b      	ldr	r3, [pc, #364]	; (80165c8 <pvPortMalloc+0x180>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d101      	bne.n	8016464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016460:	f000 f920 	bl	80166a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016464:	4b59      	ldr	r3, [pc, #356]	; (80165cc <pvPortMalloc+0x184>)
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	4013      	ands	r3, r2
 801646c:	2b00      	cmp	r3, #0
 801646e:	f040 8093 	bne.w	8016598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d01d      	beq.n	80164b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016478:	2208      	movs	r2, #8
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	4413      	add	r3, r2
 801647e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f003 0307 	and.w	r3, r3, #7
 8016486:	2b00      	cmp	r3, #0
 8016488:	d014      	beq.n	80164b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f023 0307 	bic.w	r3, r3, #7
 8016490:	3308      	adds	r3, #8
 8016492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f003 0307 	and.w	r3, r3, #7
 801649a:	2b00      	cmp	r3, #0
 801649c:	d00a      	beq.n	80164b4 <pvPortMalloc+0x6c>
	__asm volatile
 801649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a2:	f383 8811 	msr	BASEPRI, r3
 80164a6:	f3bf 8f6f 	isb	sy
 80164aa:	f3bf 8f4f 	dsb	sy
 80164ae:	617b      	str	r3, [r7, #20]
}
 80164b0:	bf00      	nop
 80164b2:	e7fe      	b.n	80164b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d06e      	beq.n	8016598 <pvPortMalloc+0x150>
 80164ba:	4b45      	ldr	r3, [pc, #276]	; (80165d0 <pvPortMalloc+0x188>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d869      	bhi.n	8016598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80164c4:	4b43      	ldr	r3, [pc, #268]	; (80165d4 <pvPortMalloc+0x18c>)
 80164c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80164c8:	4b42      	ldr	r3, [pc, #264]	; (80165d4 <pvPortMalloc+0x18c>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80164ce:	e004      	b.n	80164da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80164d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80164d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80164da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d903      	bls.n	80164ec <pvPortMalloc+0xa4>
 80164e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d1f1      	bne.n	80164d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80164ec:	4b36      	ldr	r3, [pc, #216]	; (80165c8 <pvPortMalloc+0x180>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d050      	beq.n	8016598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80164f6:	6a3b      	ldr	r3, [r7, #32]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	2208      	movs	r2, #8
 80164fc:	4413      	add	r3, r2
 80164fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	6a3b      	ldr	r3, [r7, #32]
 8016506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650a:	685a      	ldr	r2, [r3, #4]
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	1ad2      	subs	r2, r2, r3
 8016510:	2308      	movs	r3, #8
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	429a      	cmp	r2, r3
 8016516:	d91f      	bls.n	8016558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	4413      	add	r3, r2
 801651e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	f003 0307 	and.w	r3, r3, #7
 8016526:	2b00      	cmp	r3, #0
 8016528:	d00a      	beq.n	8016540 <pvPortMalloc+0xf8>
	__asm volatile
 801652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801652e:	f383 8811 	msr	BASEPRI, r3
 8016532:	f3bf 8f6f 	isb	sy
 8016536:	f3bf 8f4f 	dsb	sy
 801653a:	613b      	str	r3, [r7, #16]
}
 801653c:	bf00      	nop
 801653e:	e7fe      	b.n	801653e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	685a      	ldr	r2, [r3, #4]
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	1ad2      	subs	r2, r2, r3
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016552:	69b8      	ldr	r0, [r7, #24]
 8016554:	f000 f908 	bl	8016768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016558:	4b1d      	ldr	r3, [pc, #116]	; (80165d0 <pvPortMalloc+0x188>)
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	1ad3      	subs	r3, r2, r3
 8016562:	4a1b      	ldr	r2, [pc, #108]	; (80165d0 <pvPortMalloc+0x188>)
 8016564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016566:	4b1a      	ldr	r3, [pc, #104]	; (80165d0 <pvPortMalloc+0x188>)
 8016568:	681a      	ldr	r2, [r3, #0]
 801656a:	4b1b      	ldr	r3, [pc, #108]	; (80165d8 <pvPortMalloc+0x190>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	429a      	cmp	r2, r3
 8016570:	d203      	bcs.n	801657a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016572:	4b17      	ldr	r3, [pc, #92]	; (80165d0 <pvPortMalloc+0x188>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	4a18      	ldr	r2, [pc, #96]	; (80165d8 <pvPortMalloc+0x190>)
 8016578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657c:	685a      	ldr	r2, [r3, #4]
 801657e:	4b13      	ldr	r3, [pc, #76]	; (80165cc <pvPortMalloc+0x184>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	431a      	orrs	r2, r3
 8016584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658a:	2200      	movs	r2, #0
 801658c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801658e:	4b13      	ldr	r3, [pc, #76]	; (80165dc <pvPortMalloc+0x194>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	3301      	adds	r3, #1
 8016594:	4a11      	ldr	r2, [pc, #68]	; (80165dc <pvPortMalloc+0x194>)
 8016596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016598:	f7fe fc18 	bl	8014dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801659c:	69fb      	ldr	r3, [r7, #28]
 801659e:	f003 0307 	and.w	r3, r3, #7
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d00a      	beq.n	80165bc <pvPortMalloc+0x174>
	__asm volatile
 80165a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165aa:	f383 8811 	msr	BASEPRI, r3
 80165ae:	f3bf 8f6f 	isb	sy
 80165b2:	f3bf 8f4f 	dsb	sy
 80165b6:	60fb      	str	r3, [r7, #12]
}
 80165b8:	bf00      	nop
 80165ba:	e7fe      	b.n	80165ba <pvPortMalloc+0x172>
	return pvReturn;
 80165bc:	69fb      	ldr	r3, [r7, #28]
}
 80165be:	4618      	mov	r0, r3
 80165c0:	3728      	adds	r7, #40	; 0x28
 80165c2:	46bd      	mov	sp, r7
 80165c4:	bd80      	pop	{r7, pc}
 80165c6:	bf00      	nop
 80165c8:	24006750 	.word	0x24006750
 80165cc:	24006764 	.word	0x24006764
 80165d0:	24006754 	.word	0x24006754
 80165d4:	24006748 	.word	0x24006748
 80165d8:	24006758 	.word	0x24006758
 80165dc:	2400675c 	.word	0x2400675c

080165e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b086      	sub	sp, #24
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d04d      	beq.n	801668e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80165f2:	2308      	movs	r3, #8
 80165f4:	425b      	negs	r3, r3
 80165f6:	697a      	ldr	r2, [r7, #20]
 80165f8:	4413      	add	r3, r2
 80165fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	685a      	ldr	r2, [r3, #4]
 8016604:	4b24      	ldr	r3, [pc, #144]	; (8016698 <vPortFree+0xb8>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	4013      	ands	r3, r2
 801660a:	2b00      	cmp	r3, #0
 801660c:	d10a      	bne.n	8016624 <vPortFree+0x44>
	__asm volatile
 801660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016612:	f383 8811 	msr	BASEPRI, r3
 8016616:	f3bf 8f6f 	isb	sy
 801661a:	f3bf 8f4f 	dsb	sy
 801661e:	60fb      	str	r3, [r7, #12]
}
 8016620:	bf00      	nop
 8016622:	e7fe      	b.n	8016622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d00a      	beq.n	8016642 <vPortFree+0x62>
	__asm volatile
 801662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016630:	f383 8811 	msr	BASEPRI, r3
 8016634:	f3bf 8f6f 	isb	sy
 8016638:	f3bf 8f4f 	dsb	sy
 801663c:	60bb      	str	r3, [r7, #8]
}
 801663e:	bf00      	nop
 8016640:	e7fe      	b.n	8016640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	685a      	ldr	r2, [r3, #4]
 8016646:	4b14      	ldr	r3, [pc, #80]	; (8016698 <vPortFree+0xb8>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	4013      	ands	r3, r2
 801664c:	2b00      	cmp	r3, #0
 801664e:	d01e      	beq.n	801668e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d11a      	bne.n	801668e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016658:	693b      	ldr	r3, [r7, #16]
 801665a:	685a      	ldr	r2, [r3, #4]
 801665c:	4b0e      	ldr	r3, [pc, #56]	; (8016698 <vPortFree+0xb8>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	43db      	mvns	r3, r3
 8016662:	401a      	ands	r2, r3
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016668:	f7fe fba2 	bl	8014db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	685a      	ldr	r2, [r3, #4]
 8016670:	4b0a      	ldr	r3, [pc, #40]	; (801669c <vPortFree+0xbc>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4413      	add	r3, r2
 8016676:	4a09      	ldr	r2, [pc, #36]	; (801669c <vPortFree+0xbc>)
 8016678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801667a:	6938      	ldr	r0, [r7, #16]
 801667c:	f000 f874 	bl	8016768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016680:	4b07      	ldr	r3, [pc, #28]	; (80166a0 <vPortFree+0xc0>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	3301      	adds	r3, #1
 8016686:	4a06      	ldr	r2, [pc, #24]	; (80166a0 <vPortFree+0xc0>)
 8016688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801668a:	f7fe fb9f 	bl	8014dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801668e:	bf00      	nop
 8016690:	3718      	adds	r7, #24
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	24006764 	.word	0x24006764
 801669c:	24006754 	.word	0x24006754
 80166a0:	24006760 	.word	0x24006760

080166a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b085      	sub	sp, #20
 80166a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80166aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80166ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80166b0:	4b27      	ldr	r3, [pc, #156]	; (8016750 <prvHeapInit+0xac>)
 80166b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	f003 0307 	and.w	r3, r3, #7
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d00c      	beq.n	80166d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	3307      	adds	r3, #7
 80166c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f023 0307 	bic.w	r3, r3, #7
 80166ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80166cc:	68ba      	ldr	r2, [r7, #8]
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	1ad3      	subs	r3, r2, r3
 80166d2:	4a1f      	ldr	r2, [pc, #124]	; (8016750 <prvHeapInit+0xac>)
 80166d4:	4413      	add	r3, r2
 80166d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80166dc:	4a1d      	ldr	r2, [pc, #116]	; (8016754 <prvHeapInit+0xb0>)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80166e2:	4b1c      	ldr	r3, [pc, #112]	; (8016754 <prvHeapInit+0xb0>)
 80166e4:	2200      	movs	r2, #0
 80166e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	68ba      	ldr	r2, [r7, #8]
 80166ec:	4413      	add	r3, r2
 80166ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80166f0:	2208      	movs	r2, #8
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	1a9b      	subs	r3, r3, r2
 80166f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	f023 0307 	bic.w	r3, r3, #7
 80166fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	4a15      	ldr	r2, [pc, #84]	; (8016758 <prvHeapInit+0xb4>)
 8016704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016706:	4b14      	ldr	r3, [pc, #80]	; (8016758 <prvHeapInit+0xb4>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2200      	movs	r2, #0
 801670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801670e:	4b12      	ldr	r3, [pc, #72]	; (8016758 <prvHeapInit+0xb4>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2200      	movs	r2, #0
 8016714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	68fa      	ldr	r2, [r7, #12]
 801671e:	1ad2      	subs	r2, r2, r3
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016724:	4b0c      	ldr	r3, [pc, #48]	; (8016758 <prvHeapInit+0xb4>)
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	683b      	ldr	r3, [r7, #0]
 801672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	4a0a      	ldr	r2, [pc, #40]	; (801675c <prvHeapInit+0xb8>)
 8016732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	4a09      	ldr	r2, [pc, #36]	; (8016760 <prvHeapInit+0xbc>)
 801673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801673c:	4b09      	ldr	r3, [pc, #36]	; (8016764 <prvHeapInit+0xc0>)
 801673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016742:	601a      	str	r2, [r3, #0]
}
 8016744:	bf00      	nop
 8016746:	3714      	adds	r7, #20
 8016748:	46bd      	mov	sp, r7
 801674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674e:	4770      	bx	lr
 8016750:	24002b48 	.word	0x24002b48
 8016754:	24006748 	.word	0x24006748
 8016758:	24006750 	.word	0x24006750
 801675c:	24006758 	.word	0x24006758
 8016760:	24006754 	.word	0x24006754
 8016764:	24006764 	.word	0x24006764

08016768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016768:	b480      	push	{r7}
 801676a:	b085      	sub	sp, #20
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016770:	4b28      	ldr	r3, [pc, #160]	; (8016814 <prvInsertBlockIntoFreeList+0xac>)
 8016772:	60fb      	str	r3, [r7, #12]
 8016774:	e002      	b.n	801677c <prvInsertBlockIntoFreeList+0x14>
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	60fb      	str	r3, [r7, #12]
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	687a      	ldr	r2, [r7, #4]
 8016782:	429a      	cmp	r2, r3
 8016784:	d8f7      	bhi.n	8016776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	68ba      	ldr	r2, [r7, #8]
 8016790:	4413      	add	r3, r2
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	429a      	cmp	r2, r3
 8016796:	d108      	bne.n	80167aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	685a      	ldr	r2, [r3, #4]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	685b      	ldr	r3, [r3, #4]
 80167a0:	441a      	add	r2, r3
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	68ba      	ldr	r2, [r7, #8]
 80167b4:	441a      	add	r2, r3
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d118      	bne.n	80167f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	4b15      	ldr	r3, [pc, #84]	; (8016818 <prvInsertBlockIntoFreeList+0xb0>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	429a      	cmp	r2, r3
 80167c8:	d00d      	beq.n	80167e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	685a      	ldr	r2, [r3, #4]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	685b      	ldr	r3, [r3, #4]
 80167d4:	441a      	add	r2, r3
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	681a      	ldr	r2, [r3, #0]
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	601a      	str	r2, [r3, #0]
 80167e4:	e008      	b.n	80167f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80167e6:	4b0c      	ldr	r3, [pc, #48]	; (8016818 <prvInsertBlockIntoFreeList+0xb0>)
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	601a      	str	r2, [r3, #0]
 80167ee:	e003      	b.n	80167f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681a      	ldr	r2, [r3, #0]
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80167f8:	68fa      	ldr	r2, [r7, #12]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d002      	beq.n	8016806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016806:	bf00      	nop
 8016808:	3714      	adds	r7, #20
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr
 8016812:	bf00      	nop
 8016814:	24006748 	.word	0x24006748
 8016818:	24006750 	.word	0x24006750

0801681c <__errno>:
 801681c:	4b01      	ldr	r3, [pc, #4]	; (8016824 <__errno+0x8>)
 801681e:	6818      	ldr	r0, [r3, #0]
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	24000098 	.word	0x24000098

08016828 <__libc_init_array>:
 8016828:	b570      	push	{r4, r5, r6, lr}
 801682a:	4d0d      	ldr	r5, [pc, #52]	; (8016860 <__libc_init_array+0x38>)
 801682c:	4c0d      	ldr	r4, [pc, #52]	; (8016864 <__libc_init_array+0x3c>)
 801682e:	1b64      	subs	r4, r4, r5
 8016830:	10a4      	asrs	r4, r4, #2
 8016832:	2600      	movs	r6, #0
 8016834:	42a6      	cmp	r6, r4
 8016836:	d109      	bne.n	801684c <__libc_init_array+0x24>
 8016838:	4d0b      	ldr	r5, [pc, #44]	; (8016868 <__libc_init_array+0x40>)
 801683a:	4c0c      	ldr	r4, [pc, #48]	; (801686c <__libc_init_array+0x44>)
 801683c:	f000 fd2c 	bl	8017298 <_init>
 8016840:	1b64      	subs	r4, r4, r5
 8016842:	10a4      	asrs	r4, r4, #2
 8016844:	2600      	movs	r6, #0
 8016846:	42a6      	cmp	r6, r4
 8016848:	d105      	bne.n	8016856 <__libc_init_array+0x2e>
 801684a:	bd70      	pop	{r4, r5, r6, pc}
 801684c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016850:	4798      	blx	r3
 8016852:	3601      	adds	r6, #1
 8016854:	e7ee      	b.n	8016834 <__libc_init_array+0xc>
 8016856:	f855 3b04 	ldr.w	r3, [r5], #4
 801685a:	4798      	blx	r3
 801685c:	3601      	adds	r6, #1
 801685e:	e7f2      	b.n	8016846 <__libc_init_array+0x1e>
 8016860:	08017750 	.word	0x08017750
 8016864:	08017750 	.word	0x08017750
 8016868:	08017750 	.word	0x08017750
 801686c:	08017754 	.word	0x08017754

08016870 <memcpy>:
 8016870:	440a      	add	r2, r1
 8016872:	4291      	cmp	r1, r2
 8016874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016878:	d100      	bne.n	801687c <memcpy+0xc>
 801687a:	4770      	bx	lr
 801687c:	b510      	push	{r4, lr}
 801687e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016886:	4291      	cmp	r1, r2
 8016888:	d1f9      	bne.n	801687e <memcpy+0xe>
 801688a:	bd10      	pop	{r4, pc}

0801688c <memset>:
 801688c:	4402      	add	r2, r0
 801688e:	4603      	mov	r3, r0
 8016890:	4293      	cmp	r3, r2
 8016892:	d100      	bne.n	8016896 <memset+0xa>
 8016894:	4770      	bx	lr
 8016896:	f803 1b01 	strb.w	r1, [r3], #1
 801689a:	e7f9      	b.n	8016890 <memset+0x4>

0801689c <_puts_r>:
 801689c:	b570      	push	{r4, r5, r6, lr}
 801689e:	460e      	mov	r6, r1
 80168a0:	4605      	mov	r5, r0
 80168a2:	b118      	cbz	r0, 80168ac <_puts_r+0x10>
 80168a4:	6983      	ldr	r3, [r0, #24]
 80168a6:	b90b      	cbnz	r3, 80168ac <_puts_r+0x10>
 80168a8:	f000 fa48 	bl	8016d3c <__sinit>
 80168ac:	69ab      	ldr	r3, [r5, #24]
 80168ae:	68ac      	ldr	r4, [r5, #8]
 80168b0:	b913      	cbnz	r3, 80168b8 <_puts_r+0x1c>
 80168b2:	4628      	mov	r0, r5
 80168b4:	f000 fa42 	bl	8016d3c <__sinit>
 80168b8:	4b2c      	ldr	r3, [pc, #176]	; (801696c <_puts_r+0xd0>)
 80168ba:	429c      	cmp	r4, r3
 80168bc:	d120      	bne.n	8016900 <_puts_r+0x64>
 80168be:	686c      	ldr	r4, [r5, #4]
 80168c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168c2:	07db      	lsls	r3, r3, #31
 80168c4:	d405      	bmi.n	80168d2 <_puts_r+0x36>
 80168c6:	89a3      	ldrh	r3, [r4, #12]
 80168c8:	0598      	lsls	r0, r3, #22
 80168ca:	d402      	bmi.n	80168d2 <_puts_r+0x36>
 80168cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168ce:	f000 fad3 	bl	8016e78 <__retarget_lock_acquire_recursive>
 80168d2:	89a3      	ldrh	r3, [r4, #12]
 80168d4:	0719      	lsls	r1, r3, #28
 80168d6:	d51d      	bpl.n	8016914 <_puts_r+0x78>
 80168d8:	6923      	ldr	r3, [r4, #16]
 80168da:	b1db      	cbz	r3, 8016914 <_puts_r+0x78>
 80168dc:	3e01      	subs	r6, #1
 80168de:	68a3      	ldr	r3, [r4, #8]
 80168e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168e4:	3b01      	subs	r3, #1
 80168e6:	60a3      	str	r3, [r4, #8]
 80168e8:	bb39      	cbnz	r1, 801693a <_puts_r+0x9e>
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	da38      	bge.n	8016960 <_puts_r+0xc4>
 80168ee:	4622      	mov	r2, r4
 80168f0:	210a      	movs	r1, #10
 80168f2:	4628      	mov	r0, r5
 80168f4:	f000 f848 	bl	8016988 <__swbuf_r>
 80168f8:	3001      	adds	r0, #1
 80168fa:	d011      	beq.n	8016920 <_puts_r+0x84>
 80168fc:	250a      	movs	r5, #10
 80168fe:	e011      	b.n	8016924 <_puts_r+0x88>
 8016900:	4b1b      	ldr	r3, [pc, #108]	; (8016970 <_puts_r+0xd4>)
 8016902:	429c      	cmp	r4, r3
 8016904:	d101      	bne.n	801690a <_puts_r+0x6e>
 8016906:	68ac      	ldr	r4, [r5, #8]
 8016908:	e7da      	b.n	80168c0 <_puts_r+0x24>
 801690a:	4b1a      	ldr	r3, [pc, #104]	; (8016974 <_puts_r+0xd8>)
 801690c:	429c      	cmp	r4, r3
 801690e:	bf08      	it	eq
 8016910:	68ec      	ldreq	r4, [r5, #12]
 8016912:	e7d5      	b.n	80168c0 <_puts_r+0x24>
 8016914:	4621      	mov	r1, r4
 8016916:	4628      	mov	r0, r5
 8016918:	f000 f888 	bl	8016a2c <__swsetup_r>
 801691c:	2800      	cmp	r0, #0
 801691e:	d0dd      	beq.n	80168dc <_puts_r+0x40>
 8016920:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016926:	07da      	lsls	r2, r3, #31
 8016928:	d405      	bmi.n	8016936 <_puts_r+0x9a>
 801692a:	89a3      	ldrh	r3, [r4, #12]
 801692c:	059b      	lsls	r3, r3, #22
 801692e:	d402      	bmi.n	8016936 <_puts_r+0x9a>
 8016930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016932:	f000 faa2 	bl	8016e7a <__retarget_lock_release_recursive>
 8016936:	4628      	mov	r0, r5
 8016938:	bd70      	pop	{r4, r5, r6, pc}
 801693a:	2b00      	cmp	r3, #0
 801693c:	da04      	bge.n	8016948 <_puts_r+0xac>
 801693e:	69a2      	ldr	r2, [r4, #24]
 8016940:	429a      	cmp	r2, r3
 8016942:	dc06      	bgt.n	8016952 <_puts_r+0xb6>
 8016944:	290a      	cmp	r1, #10
 8016946:	d004      	beq.n	8016952 <_puts_r+0xb6>
 8016948:	6823      	ldr	r3, [r4, #0]
 801694a:	1c5a      	adds	r2, r3, #1
 801694c:	6022      	str	r2, [r4, #0]
 801694e:	7019      	strb	r1, [r3, #0]
 8016950:	e7c5      	b.n	80168de <_puts_r+0x42>
 8016952:	4622      	mov	r2, r4
 8016954:	4628      	mov	r0, r5
 8016956:	f000 f817 	bl	8016988 <__swbuf_r>
 801695a:	3001      	adds	r0, #1
 801695c:	d1bf      	bne.n	80168de <_puts_r+0x42>
 801695e:	e7df      	b.n	8016920 <_puts_r+0x84>
 8016960:	6823      	ldr	r3, [r4, #0]
 8016962:	250a      	movs	r5, #10
 8016964:	1c5a      	adds	r2, r3, #1
 8016966:	6022      	str	r2, [r4, #0]
 8016968:	701d      	strb	r5, [r3, #0]
 801696a:	e7db      	b.n	8016924 <_puts_r+0x88>
 801696c:	08017708 	.word	0x08017708
 8016970:	08017728 	.word	0x08017728
 8016974:	080176e8 	.word	0x080176e8

08016978 <puts>:
 8016978:	4b02      	ldr	r3, [pc, #8]	; (8016984 <puts+0xc>)
 801697a:	4601      	mov	r1, r0
 801697c:	6818      	ldr	r0, [r3, #0]
 801697e:	f7ff bf8d 	b.w	801689c <_puts_r>
 8016982:	bf00      	nop
 8016984:	24000098 	.word	0x24000098

08016988 <__swbuf_r>:
 8016988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801698a:	460e      	mov	r6, r1
 801698c:	4614      	mov	r4, r2
 801698e:	4605      	mov	r5, r0
 8016990:	b118      	cbz	r0, 801699a <__swbuf_r+0x12>
 8016992:	6983      	ldr	r3, [r0, #24]
 8016994:	b90b      	cbnz	r3, 801699a <__swbuf_r+0x12>
 8016996:	f000 f9d1 	bl	8016d3c <__sinit>
 801699a:	4b21      	ldr	r3, [pc, #132]	; (8016a20 <__swbuf_r+0x98>)
 801699c:	429c      	cmp	r4, r3
 801699e:	d12b      	bne.n	80169f8 <__swbuf_r+0x70>
 80169a0:	686c      	ldr	r4, [r5, #4]
 80169a2:	69a3      	ldr	r3, [r4, #24]
 80169a4:	60a3      	str	r3, [r4, #8]
 80169a6:	89a3      	ldrh	r3, [r4, #12]
 80169a8:	071a      	lsls	r2, r3, #28
 80169aa:	d52f      	bpl.n	8016a0c <__swbuf_r+0x84>
 80169ac:	6923      	ldr	r3, [r4, #16]
 80169ae:	b36b      	cbz	r3, 8016a0c <__swbuf_r+0x84>
 80169b0:	6923      	ldr	r3, [r4, #16]
 80169b2:	6820      	ldr	r0, [r4, #0]
 80169b4:	1ac0      	subs	r0, r0, r3
 80169b6:	6963      	ldr	r3, [r4, #20]
 80169b8:	b2f6      	uxtb	r6, r6
 80169ba:	4283      	cmp	r3, r0
 80169bc:	4637      	mov	r7, r6
 80169be:	dc04      	bgt.n	80169ca <__swbuf_r+0x42>
 80169c0:	4621      	mov	r1, r4
 80169c2:	4628      	mov	r0, r5
 80169c4:	f000 f926 	bl	8016c14 <_fflush_r>
 80169c8:	bb30      	cbnz	r0, 8016a18 <__swbuf_r+0x90>
 80169ca:	68a3      	ldr	r3, [r4, #8]
 80169cc:	3b01      	subs	r3, #1
 80169ce:	60a3      	str	r3, [r4, #8]
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	1c5a      	adds	r2, r3, #1
 80169d4:	6022      	str	r2, [r4, #0]
 80169d6:	701e      	strb	r6, [r3, #0]
 80169d8:	6963      	ldr	r3, [r4, #20]
 80169da:	3001      	adds	r0, #1
 80169dc:	4283      	cmp	r3, r0
 80169de:	d004      	beq.n	80169ea <__swbuf_r+0x62>
 80169e0:	89a3      	ldrh	r3, [r4, #12]
 80169e2:	07db      	lsls	r3, r3, #31
 80169e4:	d506      	bpl.n	80169f4 <__swbuf_r+0x6c>
 80169e6:	2e0a      	cmp	r6, #10
 80169e8:	d104      	bne.n	80169f4 <__swbuf_r+0x6c>
 80169ea:	4621      	mov	r1, r4
 80169ec:	4628      	mov	r0, r5
 80169ee:	f000 f911 	bl	8016c14 <_fflush_r>
 80169f2:	b988      	cbnz	r0, 8016a18 <__swbuf_r+0x90>
 80169f4:	4638      	mov	r0, r7
 80169f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169f8:	4b0a      	ldr	r3, [pc, #40]	; (8016a24 <__swbuf_r+0x9c>)
 80169fa:	429c      	cmp	r4, r3
 80169fc:	d101      	bne.n	8016a02 <__swbuf_r+0x7a>
 80169fe:	68ac      	ldr	r4, [r5, #8]
 8016a00:	e7cf      	b.n	80169a2 <__swbuf_r+0x1a>
 8016a02:	4b09      	ldr	r3, [pc, #36]	; (8016a28 <__swbuf_r+0xa0>)
 8016a04:	429c      	cmp	r4, r3
 8016a06:	bf08      	it	eq
 8016a08:	68ec      	ldreq	r4, [r5, #12]
 8016a0a:	e7ca      	b.n	80169a2 <__swbuf_r+0x1a>
 8016a0c:	4621      	mov	r1, r4
 8016a0e:	4628      	mov	r0, r5
 8016a10:	f000 f80c 	bl	8016a2c <__swsetup_r>
 8016a14:	2800      	cmp	r0, #0
 8016a16:	d0cb      	beq.n	80169b0 <__swbuf_r+0x28>
 8016a18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016a1c:	e7ea      	b.n	80169f4 <__swbuf_r+0x6c>
 8016a1e:	bf00      	nop
 8016a20:	08017708 	.word	0x08017708
 8016a24:	08017728 	.word	0x08017728
 8016a28:	080176e8 	.word	0x080176e8

08016a2c <__swsetup_r>:
 8016a2c:	4b32      	ldr	r3, [pc, #200]	; (8016af8 <__swsetup_r+0xcc>)
 8016a2e:	b570      	push	{r4, r5, r6, lr}
 8016a30:	681d      	ldr	r5, [r3, #0]
 8016a32:	4606      	mov	r6, r0
 8016a34:	460c      	mov	r4, r1
 8016a36:	b125      	cbz	r5, 8016a42 <__swsetup_r+0x16>
 8016a38:	69ab      	ldr	r3, [r5, #24]
 8016a3a:	b913      	cbnz	r3, 8016a42 <__swsetup_r+0x16>
 8016a3c:	4628      	mov	r0, r5
 8016a3e:	f000 f97d 	bl	8016d3c <__sinit>
 8016a42:	4b2e      	ldr	r3, [pc, #184]	; (8016afc <__swsetup_r+0xd0>)
 8016a44:	429c      	cmp	r4, r3
 8016a46:	d10f      	bne.n	8016a68 <__swsetup_r+0x3c>
 8016a48:	686c      	ldr	r4, [r5, #4]
 8016a4a:	89a3      	ldrh	r3, [r4, #12]
 8016a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a50:	0719      	lsls	r1, r3, #28
 8016a52:	d42c      	bmi.n	8016aae <__swsetup_r+0x82>
 8016a54:	06dd      	lsls	r5, r3, #27
 8016a56:	d411      	bmi.n	8016a7c <__swsetup_r+0x50>
 8016a58:	2309      	movs	r3, #9
 8016a5a:	6033      	str	r3, [r6, #0]
 8016a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a60:	81a3      	strh	r3, [r4, #12]
 8016a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a66:	e03e      	b.n	8016ae6 <__swsetup_r+0xba>
 8016a68:	4b25      	ldr	r3, [pc, #148]	; (8016b00 <__swsetup_r+0xd4>)
 8016a6a:	429c      	cmp	r4, r3
 8016a6c:	d101      	bne.n	8016a72 <__swsetup_r+0x46>
 8016a6e:	68ac      	ldr	r4, [r5, #8]
 8016a70:	e7eb      	b.n	8016a4a <__swsetup_r+0x1e>
 8016a72:	4b24      	ldr	r3, [pc, #144]	; (8016b04 <__swsetup_r+0xd8>)
 8016a74:	429c      	cmp	r4, r3
 8016a76:	bf08      	it	eq
 8016a78:	68ec      	ldreq	r4, [r5, #12]
 8016a7a:	e7e6      	b.n	8016a4a <__swsetup_r+0x1e>
 8016a7c:	0758      	lsls	r0, r3, #29
 8016a7e:	d512      	bpl.n	8016aa6 <__swsetup_r+0x7a>
 8016a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a82:	b141      	cbz	r1, 8016a96 <__swsetup_r+0x6a>
 8016a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a88:	4299      	cmp	r1, r3
 8016a8a:	d002      	beq.n	8016a92 <__swsetup_r+0x66>
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f000 fa5b 	bl	8016f48 <_free_r>
 8016a92:	2300      	movs	r3, #0
 8016a94:	6363      	str	r3, [r4, #52]	; 0x34
 8016a96:	89a3      	ldrh	r3, [r4, #12]
 8016a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016a9c:	81a3      	strh	r3, [r4, #12]
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	6063      	str	r3, [r4, #4]
 8016aa2:	6923      	ldr	r3, [r4, #16]
 8016aa4:	6023      	str	r3, [r4, #0]
 8016aa6:	89a3      	ldrh	r3, [r4, #12]
 8016aa8:	f043 0308 	orr.w	r3, r3, #8
 8016aac:	81a3      	strh	r3, [r4, #12]
 8016aae:	6923      	ldr	r3, [r4, #16]
 8016ab0:	b94b      	cbnz	r3, 8016ac6 <__swsetup_r+0x9a>
 8016ab2:	89a3      	ldrh	r3, [r4, #12]
 8016ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016abc:	d003      	beq.n	8016ac6 <__swsetup_r+0x9a>
 8016abe:	4621      	mov	r1, r4
 8016ac0:	4630      	mov	r0, r6
 8016ac2:	f000 fa01 	bl	8016ec8 <__smakebuf_r>
 8016ac6:	89a0      	ldrh	r0, [r4, #12]
 8016ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016acc:	f010 0301 	ands.w	r3, r0, #1
 8016ad0:	d00a      	beq.n	8016ae8 <__swsetup_r+0xbc>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	60a3      	str	r3, [r4, #8]
 8016ad6:	6963      	ldr	r3, [r4, #20]
 8016ad8:	425b      	negs	r3, r3
 8016ada:	61a3      	str	r3, [r4, #24]
 8016adc:	6923      	ldr	r3, [r4, #16]
 8016ade:	b943      	cbnz	r3, 8016af2 <__swsetup_r+0xc6>
 8016ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ae4:	d1ba      	bne.n	8016a5c <__swsetup_r+0x30>
 8016ae6:	bd70      	pop	{r4, r5, r6, pc}
 8016ae8:	0781      	lsls	r1, r0, #30
 8016aea:	bf58      	it	pl
 8016aec:	6963      	ldrpl	r3, [r4, #20]
 8016aee:	60a3      	str	r3, [r4, #8]
 8016af0:	e7f4      	b.n	8016adc <__swsetup_r+0xb0>
 8016af2:	2000      	movs	r0, #0
 8016af4:	e7f7      	b.n	8016ae6 <__swsetup_r+0xba>
 8016af6:	bf00      	nop
 8016af8:	24000098 	.word	0x24000098
 8016afc:	08017708 	.word	0x08017708
 8016b00:	08017728 	.word	0x08017728
 8016b04:	080176e8 	.word	0x080176e8

08016b08 <__sflush_r>:
 8016b08:	898a      	ldrh	r2, [r1, #12]
 8016b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b0e:	4605      	mov	r5, r0
 8016b10:	0710      	lsls	r0, r2, #28
 8016b12:	460c      	mov	r4, r1
 8016b14:	d458      	bmi.n	8016bc8 <__sflush_r+0xc0>
 8016b16:	684b      	ldr	r3, [r1, #4]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	dc05      	bgt.n	8016b28 <__sflush_r+0x20>
 8016b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	dc02      	bgt.n	8016b28 <__sflush_r+0x20>
 8016b22:	2000      	movs	r0, #0
 8016b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b2a:	2e00      	cmp	r6, #0
 8016b2c:	d0f9      	beq.n	8016b22 <__sflush_r+0x1a>
 8016b2e:	2300      	movs	r3, #0
 8016b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016b34:	682f      	ldr	r7, [r5, #0]
 8016b36:	602b      	str	r3, [r5, #0]
 8016b38:	d032      	beq.n	8016ba0 <__sflush_r+0x98>
 8016b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016b3c:	89a3      	ldrh	r3, [r4, #12]
 8016b3e:	075a      	lsls	r2, r3, #29
 8016b40:	d505      	bpl.n	8016b4e <__sflush_r+0x46>
 8016b42:	6863      	ldr	r3, [r4, #4]
 8016b44:	1ac0      	subs	r0, r0, r3
 8016b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b48:	b10b      	cbz	r3, 8016b4e <__sflush_r+0x46>
 8016b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b4c:	1ac0      	subs	r0, r0, r3
 8016b4e:	2300      	movs	r3, #0
 8016b50:	4602      	mov	r2, r0
 8016b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b54:	6a21      	ldr	r1, [r4, #32]
 8016b56:	4628      	mov	r0, r5
 8016b58:	47b0      	blx	r6
 8016b5a:	1c43      	adds	r3, r0, #1
 8016b5c:	89a3      	ldrh	r3, [r4, #12]
 8016b5e:	d106      	bne.n	8016b6e <__sflush_r+0x66>
 8016b60:	6829      	ldr	r1, [r5, #0]
 8016b62:	291d      	cmp	r1, #29
 8016b64:	d82c      	bhi.n	8016bc0 <__sflush_r+0xb8>
 8016b66:	4a2a      	ldr	r2, [pc, #168]	; (8016c10 <__sflush_r+0x108>)
 8016b68:	40ca      	lsrs	r2, r1
 8016b6a:	07d6      	lsls	r6, r2, #31
 8016b6c:	d528      	bpl.n	8016bc0 <__sflush_r+0xb8>
 8016b6e:	2200      	movs	r2, #0
 8016b70:	6062      	str	r2, [r4, #4]
 8016b72:	04d9      	lsls	r1, r3, #19
 8016b74:	6922      	ldr	r2, [r4, #16]
 8016b76:	6022      	str	r2, [r4, #0]
 8016b78:	d504      	bpl.n	8016b84 <__sflush_r+0x7c>
 8016b7a:	1c42      	adds	r2, r0, #1
 8016b7c:	d101      	bne.n	8016b82 <__sflush_r+0x7a>
 8016b7e:	682b      	ldr	r3, [r5, #0]
 8016b80:	b903      	cbnz	r3, 8016b84 <__sflush_r+0x7c>
 8016b82:	6560      	str	r0, [r4, #84]	; 0x54
 8016b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b86:	602f      	str	r7, [r5, #0]
 8016b88:	2900      	cmp	r1, #0
 8016b8a:	d0ca      	beq.n	8016b22 <__sflush_r+0x1a>
 8016b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b90:	4299      	cmp	r1, r3
 8016b92:	d002      	beq.n	8016b9a <__sflush_r+0x92>
 8016b94:	4628      	mov	r0, r5
 8016b96:	f000 f9d7 	bl	8016f48 <_free_r>
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8016b9e:	e7c1      	b.n	8016b24 <__sflush_r+0x1c>
 8016ba0:	6a21      	ldr	r1, [r4, #32]
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	4628      	mov	r0, r5
 8016ba6:	47b0      	blx	r6
 8016ba8:	1c41      	adds	r1, r0, #1
 8016baa:	d1c7      	bne.n	8016b3c <__sflush_r+0x34>
 8016bac:	682b      	ldr	r3, [r5, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d0c4      	beq.n	8016b3c <__sflush_r+0x34>
 8016bb2:	2b1d      	cmp	r3, #29
 8016bb4:	d001      	beq.n	8016bba <__sflush_r+0xb2>
 8016bb6:	2b16      	cmp	r3, #22
 8016bb8:	d101      	bne.n	8016bbe <__sflush_r+0xb6>
 8016bba:	602f      	str	r7, [r5, #0]
 8016bbc:	e7b1      	b.n	8016b22 <__sflush_r+0x1a>
 8016bbe:	89a3      	ldrh	r3, [r4, #12]
 8016bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bc4:	81a3      	strh	r3, [r4, #12]
 8016bc6:	e7ad      	b.n	8016b24 <__sflush_r+0x1c>
 8016bc8:	690f      	ldr	r7, [r1, #16]
 8016bca:	2f00      	cmp	r7, #0
 8016bcc:	d0a9      	beq.n	8016b22 <__sflush_r+0x1a>
 8016bce:	0793      	lsls	r3, r2, #30
 8016bd0:	680e      	ldr	r6, [r1, #0]
 8016bd2:	bf08      	it	eq
 8016bd4:	694b      	ldreq	r3, [r1, #20]
 8016bd6:	600f      	str	r7, [r1, #0]
 8016bd8:	bf18      	it	ne
 8016bda:	2300      	movne	r3, #0
 8016bdc:	eba6 0807 	sub.w	r8, r6, r7
 8016be0:	608b      	str	r3, [r1, #8]
 8016be2:	f1b8 0f00 	cmp.w	r8, #0
 8016be6:	dd9c      	ble.n	8016b22 <__sflush_r+0x1a>
 8016be8:	6a21      	ldr	r1, [r4, #32]
 8016bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016bec:	4643      	mov	r3, r8
 8016bee:	463a      	mov	r2, r7
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	47b0      	blx	r6
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	dc06      	bgt.n	8016c06 <__sflush_r+0xfe>
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bfe:	81a3      	strh	r3, [r4, #12]
 8016c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c04:	e78e      	b.n	8016b24 <__sflush_r+0x1c>
 8016c06:	4407      	add	r7, r0
 8016c08:	eba8 0800 	sub.w	r8, r8, r0
 8016c0c:	e7e9      	b.n	8016be2 <__sflush_r+0xda>
 8016c0e:	bf00      	nop
 8016c10:	20400001 	.word	0x20400001

08016c14 <_fflush_r>:
 8016c14:	b538      	push	{r3, r4, r5, lr}
 8016c16:	690b      	ldr	r3, [r1, #16]
 8016c18:	4605      	mov	r5, r0
 8016c1a:	460c      	mov	r4, r1
 8016c1c:	b913      	cbnz	r3, 8016c24 <_fflush_r+0x10>
 8016c1e:	2500      	movs	r5, #0
 8016c20:	4628      	mov	r0, r5
 8016c22:	bd38      	pop	{r3, r4, r5, pc}
 8016c24:	b118      	cbz	r0, 8016c2e <_fflush_r+0x1a>
 8016c26:	6983      	ldr	r3, [r0, #24]
 8016c28:	b90b      	cbnz	r3, 8016c2e <_fflush_r+0x1a>
 8016c2a:	f000 f887 	bl	8016d3c <__sinit>
 8016c2e:	4b14      	ldr	r3, [pc, #80]	; (8016c80 <_fflush_r+0x6c>)
 8016c30:	429c      	cmp	r4, r3
 8016c32:	d11b      	bne.n	8016c6c <_fflush_r+0x58>
 8016c34:	686c      	ldr	r4, [r5, #4]
 8016c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d0ef      	beq.n	8016c1e <_fflush_r+0xa>
 8016c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c40:	07d0      	lsls	r0, r2, #31
 8016c42:	d404      	bmi.n	8016c4e <_fflush_r+0x3a>
 8016c44:	0599      	lsls	r1, r3, #22
 8016c46:	d402      	bmi.n	8016c4e <_fflush_r+0x3a>
 8016c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c4a:	f000 f915 	bl	8016e78 <__retarget_lock_acquire_recursive>
 8016c4e:	4628      	mov	r0, r5
 8016c50:	4621      	mov	r1, r4
 8016c52:	f7ff ff59 	bl	8016b08 <__sflush_r>
 8016c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c58:	07da      	lsls	r2, r3, #31
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	d4e0      	bmi.n	8016c20 <_fflush_r+0xc>
 8016c5e:	89a3      	ldrh	r3, [r4, #12]
 8016c60:	059b      	lsls	r3, r3, #22
 8016c62:	d4dd      	bmi.n	8016c20 <_fflush_r+0xc>
 8016c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c66:	f000 f908 	bl	8016e7a <__retarget_lock_release_recursive>
 8016c6a:	e7d9      	b.n	8016c20 <_fflush_r+0xc>
 8016c6c:	4b05      	ldr	r3, [pc, #20]	; (8016c84 <_fflush_r+0x70>)
 8016c6e:	429c      	cmp	r4, r3
 8016c70:	d101      	bne.n	8016c76 <_fflush_r+0x62>
 8016c72:	68ac      	ldr	r4, [r5, #8]
 8016c74:	e7df      	b.n	8016c36 <_fflush_r+0x22>
 8016c76:	4b04      	ldr	r3, [pc, #16]	; (8016c88 <_fflush_r+0x74>)
 8016c78:	429c      	cmp	r4, r3
 8016c7a:	bf08      	it	eq
 8016c7c:	68ec      	ldreq	r4, [r5, #12]
 8016c7e:	e7da      	b.n	8016c36 <_fflush_r+0x22>
 8016c80:	08017708 	.word	0x08017708
 8016c84:	08017728 	.word	0x08017728
 8016c88:	080176e8 	.word	0x080176e8

08016c8c <std>:
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	4604      	mov	r4, r0
 8016c92:	e9c0 3300 	strd	r3, r3, [r0]
 8016c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c9a:	6083      	str	r3, [r0, #8]
 8016c9c:	8181      	strh	r1, [r0, #12]
 8016c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8016ca0:	81c2      	strh	r2, [r0, #14]
 8016ca2:	6183      	str	r3, [r0, #24]
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	2208      	movs	r2, #8
 8016ca8:	305c      	adds	r0, #92	; 0x5c
 8016caa:	f7ff fdef 	bl	801688c <memset>
 8016cae:	4b05      	ldr	r3, [pc, #20]	; (8016cc4 <std+0x38>)
 8016cb0:	6263      	str	r3, [r4, #36]	; 0x24
 8016cb2:	4b05      	ldr	r3, [pc, #20]	; (8016cc8 <std+0x3c>)
 8016cb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016cb6:	4b05      	ldr	r3, [pc, #20]	; (8016ccc <std+0x40>)
 8016cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016cba:	4b05      	ldr	r3, [pc, #20]	; (8016cd0 <std+0x44>)
 8016cbc:	6224      	str	r4, [r4, #32]
 8016cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8016cc0:	bd10      	pop	{r4, pc}
 8016cc2:	bf00      	nop
 8016cc4:	08017129 	.word	0x08017129
 8016cc8:	0801714b 	.word	0x0801714b
 8016ccc:	08017183 	.word	0x08017183
 8016cd0:	080171a7 	.word	0x080171a7

08016cd4 <_cleanup_r>:
 8016cd4:	4901      	ldr	r1, [pc, #4]	; (8016cdc <_cleanup_r+0x8>)
 8016cd6:	f000 b8af 	b.w	8016e38 <_fwalk_reent>
 8016cda:	bf00      	nop
 8016cdc:	08016c15 	.word	0x08016c15

08016ce0 <__sfmoreglue>:
 8016ce0:	b570      	push	{r4, r5, r6, lr}
 8016ce2:	2268      	movs	r2, #104	; 0x68
 8016ce4:	1e4d      	subs	r5, r1, #1
 8016ce6:	4355      	muls	r5, r2
 8016ce8:	460e      	mov	r6, r1
 8016cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016cee:	f000 f997 	bl	8017020 <_malloc_r>
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	b140      	cbz	r0, 8016d08 <__sfmoreglue+0x28>
 8016cf6:	2100      	movs	r1, #0
 8016cf8:	e9c0 1600 	strd	r1, r6, [r0]
 8016cfc:	300c      	adds	r0, #12
 8016cfe:	60a0      	str	r0, [r4, #8]
 8016d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d04:	f7ff fdc2 	bl	801688c <memset>
 8016d08:	4620      	mov	r0, r4
 8016d0a:	bd70      	pop	{r4, r5, r6, pc}

08016d0c <__sfp_lock_acquire>:
 8016d0c:	4801      	ldr	r0, [pc, #4]	; (8016d14 <__sfp_lock_acquire+0x8>)
 8016d0e:	f000 b8b3 	b.w	8016e78 <__retarget_lock_acquire_recursive>
 8016d12:	bf00      	nop
 8016d14:	24006769 	.word	0x24006769

08016d18 <__sfp_lock_release>:
 8016d18:	4801      	ldr	r0, [pc, #4]	; (8016d20 <__sfp_lock_release+0x8>)
 8016d1a:	f000 b8ae 	b.w	8016e7a <__retarget_lock_release_recursive>
 8016d1e:	bf00      	nop
 8016d20:	24006769 	.word	0x24006769

08016d24 <__sinit_lock_acquire>:
 8016d24:	4801      	ldr	r0, [pc, #4]	; (8016d2c <__sinit_lock_acquire+0x8>)
 8016d26:	f000 b8a7 	b.w	8016e78 <__retarget_lock_acquire_recursive>
 8016d2a:	bf00      	nop
 8016d2c:	2400676a 	.word	0x2400676a

08016d30 <__sinit_lock_release>:
 8016d30:	4801      	ldr	r0, [pc, #4]	; (8016d38 <__sinit_lock_release+0x8>)
 8016d32:	f000 b8a2 	b.w	8016e7a <__retarget_lock_release_recursive>
 8016d36:	bf00      	nop
 8016d38:	2400676a 	.word	0x2400676a

08016d3c <__sinit>:
 8016d3c:	b510      	push	{r4, lr}
 8016d3e:	4604      	mov	r4, r0
 8016d40:	f7ff fff0 	bl	8016d24 <__sinit_lock_acquire>
 8016d44:	69a3      	ldr	r3, [r4, #24]
 8016d46:	b11b      	cbz	r3, 8016d50 <__sinit+0x14>
 8016d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d4c:	f7ff bff0 	b.w	8016d30 <__sinit_lock_release>
 8016d50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d54:	6523      	str	r3, [r4, #80]	; 0x50
 8016d56:	4b13      	ldr	r3, [pc, #76]	; (8016da4 <__sinit+0x68>)
 8016d58:	4a13      	ldr	r2, [pc, #76]	; (8016da8 <__sinit+0x6c>)
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016d5e:	42a3      	cmp	r3, r4
 8016d60:	bf04      	itt	eq
 8016d62:	2301      	moveq	r3, #1
 8016d64:	61a3      	streq	r3, [r4, #24]
 8016d66:	4620      	mov	r0, r4
 8016d68:	f000 f820 	bl	8016dac <__sfp>
 8016d6c:	6060      	str	r0, [r4, #4]
 8016d6e:	4620      	mov	r0, r4
 8016d70:	f000 f81c 	bl	8016dac <__sfp>
 8016d74:	60a0      	str	r0, [r4, #8]
 8016d76:	4620      	mov	r0, r4
 8016d78:	f000 f818 	bl	8016dac <__sfp>
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	60e0      	str	r0, [r4, #12]
 8016d80:	2104      	movs	r1, #4
 8016d82:	6860      	ldr	r0, [r4, #4]
 8016d84:	f7ff ff82 	bl	8016c8c <std>
 8016d88:	68a0      	ldr	r0, [r4, #8]
 8016d8a:	2201      	movs	r2, #1
 8016d8c:	2109      	movs	r1, #9
 8016d8e:	f7ff ff7d 	bl	8016c8c <std>
 8016d92:	68e0      	ldr	r0, [r4, #12]
 8016d94:	2202      	movs	r2, #2
 8016d96:	2112      	movs	r1, #18
 8016d98:	f7ff ff78 	bl	8016c8c <std>
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	61a3      	str	r3, [r4, #24]
 8016da0:	e7d2      	b.n	8016d48 <__sinit+0xc>
 8016da2:	bf00      	nop
 8016da4:	080176e4 	.word	0x080176e4
 8016da8:	08016cd5 	.word	0x08016cd5

08016dac <__sfp>:
 8016dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dae:	4607      	mov	r7, r0
 8016db0:	f7ff ffac 	bl	8016d0c <__sfp_lock_acquire>
 8016db4:	4b1e      	ldr	r3, [pc, #120]	; (8016e30 <__sfp+0x84>)
 8016db6:	681e      	ldr	r6, [r3, #0]
 8016db8:	69b3      	ldr	r3, [r6, #24]
 8016dba:	b913      	cbnz	r3, 8016dc2 <__sfp+0x16>
 8016dbc:	4630      	mov	r0, r6
 8016dbe:	f7ff ffbd 	bl	8016d3c <__sinit>
 8016dc2:	3648      	adds	r6, #72	; 0x48
 8016dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016dc8:	3b01      	subs	r3, #1
 8016dca:	d503      	bpl.n	8016dd4 <__sfp+0x28>
 8016dcc:	6833      	ldr	r3, [r6, #0]
 8016dce:	b30b      	cbz	r3, 8016e14 <__sfp+0x68>
 8016dd0:	6836      	ldr	r6, [r6, #0]
 8016dd2:	e7f7      	b.n	8016dc4 <__sfp+0x18>
 8016dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016dd8:	b9d5      	cbnz	r5, 8016e10 <__sfp+0x64>
 8016dda:	4b16      	ldr	r3, [pc, #88]	; (8016e34 <__sfp+0x88>)
 8016ddc:	60e3      	str	r3, [r4, #12]
 8016dde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016de2:	6665      	str	r5, [r4, #100]	; 0x64
 8016de4:	f000 f847 	bl	8016e76 <__retarget_lock_init_recursive>
 8016de8:	f7ff ff96 	bl	8016d18 <__sfp_lock_release>
 8016dec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016df0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016df4:	6025      	str	r5, [r4, #0]
 8016df6:	61a5      	str	r5, [r4, #24]
 8016df8:	2208      	movs	r2, #8
 8016dfa:	4629      	mov	r1, r5
 8016dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e00:	f7ff fd44 	bl	801688c <memset>
 8016e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e10:	3468      	adds	r4, #104	; 0x68
 8016e12:	e7d9      	b.n	8016dc8 <__sfp+0x1c>
 8016e14:	2104      	movs	r1, #4
 8016e16:	4638      	mov	r0, r7
 8016e18:	f7ff ff62 	bl	8016ce0 <__sfmoreglue>
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	6030      	str	r0, [r6, #0]
 8016e20:	2800      	cmp	r0, #0
 8016e22:	d1d5      	bne.n	8016dd0 <__sfp+0x24>
 8016e24:	f7ff ff78 	bl	8016d18 <__sfp_lock_release>
 8016e28:	230c      	movs	r3, #12
 8016e2a:	603b      	str	r3, [r7, #0]
 8016e2c:	e7ee      	b.n	8016e0c <__sfp+0x60>
 8016e2e:	bf00      	nop
 8016e30:	080176e4 	.word	0x080176e4
 8016e34:	ffff0001 	.word	0xffff0001

08016e38 <_fwalk_reent>:
 8016e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e3c:	4606      	mov	r6, r0
 8016e3e:	4688      	mov	r8, r1
 8016e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e44:	2700      	movs	r7, #0
 8016e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8016e4e:	d505      	bpl.n	8016e5c <_fwalk_reent+0x24>
 8016e50:	6824      	ldr	r4, [r4, #0]
 8016e52:	2c00      	cmp	r4, #0
 8016e54:	d1f7      	bne.n	8016e46 <_fwalk_reent+0xe>
 8016e56:	4638      	mov	r0, r7
 8016e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e5c:	89ab      	ldrh	r3, [r5, #12]
 8016e5e:	2b01      	cmp	r3, #1
 8016e60:	d907      	bls.n	8016e72 <_fwalk_reent+0x3a>
 8016e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e66:	3301      	adds	r3, #1
 8016e68:	d003      	beq.n	8016e72 <_fwalk_reent+0x3a>
 8016e6a:	4629      	mov	r1, r5
 8016e6c:	4630      	mov	r0, r6
 8016e6e:	47c0      	blx	r8
 8016e70:	4307      	orrs	r7, r0
 8016e72:	3568      	adds	r5, #104	; 0x68
 8016e74:	e7e9      	b.n	8016e4a <_fwalk_reent+0x12>

08016e76 <__retarget_lock_init_recursive>:
 8016e76:	4770      	bx	lr

08016e78 <__retarget_lock_acquire_recursive>:
 8016e78:	4770      	bx	lr

08016e7a <__retarget_lock_release_recursive>:
 8016e7a:	4770      	bx	lr

08016e7c <__swhatbuf_r>:
 8016e7c:	b570      	push	{r4, r5, r6, lr}
 8016e7e:	460e      	mov	r6, r1
 8016e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e84:	2900      	cmp	r1, #0
 8016e86:	b096      	sub	sp, #88	; 0x58
 8016e88:	4614      	mov	r4, r2
 8016e8a:	461d      	mov	r5, r3
 8016e8c:	da08      	bge.n	8016ea0 <__swhatbuf_r+0x24>
 8016e8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016e92:	2200      	movs	r2, #0
 8016e94:	602a      	str	r2, [r5, #0]
 8016e96:	061a      	lsls	r2, r3, #24
 8016e98:	d410      	bmi.n	8016ebc <__swhatbuf_r+0x40>
 8016e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016e9e:	e00e      	b.n	8016ebe <__swhatbuf_r+0x42>
 8016ea0:	466a      	mov	r2, sp
 8016ea2:	f000 f9a7 	bl	80171f4 <_fstat_r>
 8016ea6:	2800      	cmp	r0, #0
 8016ea8:	dbf1      	blt.n	8016e8e <__swhatbuf_r+0x12>
 8016eaa:	9a01      	ldr	r2, [sp, #4]
 8016eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016eb4:	425a      	negs	r2, r3
 8016eb6:	415a      	adcs	r2, r3
 8016eb8:	602a      	str	r2, [r5, #0]
 8016eba:	e7ee      	b.n	8016e9a <__swhatbuf_r+0x1e>
 8016ebc:	2340      	movs	r3, #64	; 0x40
 8016ebe:	2000      	movs	r0, #0
 8016ec0:	6023      	str	r3, [r4, #0]
 8016ec2:	b016      	add	sp, #88	; 0x58
 8016ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ec8 <__smakebuf_r>:
 8016ec8:	898b      	ldrh	r3, [r1, #12]
 8016eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ecc:	079d      	lsls	r5, r3, #30
 8016ece:	4606      	mov	r6, r0
 8016ed0:	460c      	mov	r4, r1
 8016ed2:	d507      	bpl.n	8016ee4 <__smakebuf_r+0x1c>
 8016ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016ed8:	6023      	str	r3, [r4, #0]
 8016eda:	6123      	str	r3, [r4, #16]
 8016edc:	2301      	movs	r3, #1
 8016ede:	6163      	str	r3, [r4, #20]
 8016ee0:	b002      	add	sp, #8
 8016ee2:	bd70      	pop	{r4, r5, r6, pc}
 8016ee4:	ab01      	add	r3, sp, #4
 8016ee6:	466a      	mov	r2, sp
 8016ee8:	f7ff ffc8 	bl	8016e7c <__swhatbuf_r>
 8016eec:	9900      	ldr	r1, [sp, #0]
 8016eee:	4605      	mov	r5, r0
 8016ef0:	4630      	mov	r0, r6
 8016ef2:	f000 f895 	bl	8017020 <_malloc_r>
 8016ef6:	b948      	cbnz	r0, 8016f0c <__smakebuf_r+0x44>
 8016ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016efc:	059a      	lsls	r2, r3, #22
 8016efe:	d4ef      	bmi.n	8016ee0 <__smakebuf_r+0x18>
 8016f00:	f023 0303 	bic.w	r3, r3, #3
 8016f04:	f043 0302 	orr.w	r3, r3, #2
 8016f08:	81a3      	strh	r3, [r4, #12]
 8016f0a:	e7e3      	b.n	8016ed4 <__smakebuf_r+0xc>
 8016f0c:	4b0d      	ldr	r3, [pc, #52]	; (8016f44 <__smakebuf_r+0x7c>)
 8016f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f10:	89a3      	ldrh	r3, [r4, #12]
 8016f12:	6020      	str	r0, [r4, #0]
 8016f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f18:	81a3      	strh	r3, [r4, #12]
 8016f1a:	9b00      	ldr	r3, [sp, #0]
 8016f1c:	6163      	str	r3, [r4, #20]
 8016f1e:	9b01      	ldr	r3, [sp, #4]
 8016f20:	6120      	str	r0, [r4, #16]
 8016f22:	b15b      	cbz	r3, 8016f3c <__smakebuf_r+0x74>
 8016f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f28:	4630      	mov	r0, r6
 8016f2a:	f000 f975 	bl	8017218 <_isatty_r>
 8016f2e:	b128      	cbz	r0, 8016f3c <__smakebuf_r+0x74>
 8016f30:	89a3      	ldrh	r3, [r4, #12]
 8016f32:	f023 0303 	bic.w	r3, r3, #3
 8016f36:	f043 0301 	orr.w	r3, r3, #1
 8016f3a:	81a3      	strh	r3, [r4, #12]
 8016f3c:	89a0      	ldrh	r0, [r4, #12]
 8016f3e:	4305      	orrs	r5, r0
 8016f40:	81a5      	strh	r5, [r4, #12]
 8016f42:	e7cd      	b.n	8016ee0 <__smakebuf_r+0x18>
 8016f44:	08016cd5 	.word	0x08016cd5

08016f48 <_free_r>:
 8016f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f4a:	2900      	cmp	r1, #0
 8016f4c:	d044      	beq.n	8016fd8 <_free_r+0x90>
 8016f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f52:	9001      	str	r0, [sp, #4]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	f1a1 0404 	sub.w	r4, r1, #4
 8016f5a:	bfb8      	it	lt
 8016f5c:	18e4      	addlt	r4, r4, r3
 8016f5e:	f000 f97d 	bl	801725c <__malloc_lock>
 8016f62:	4a1e      	ldr	r2, [pc, #120]	; (8016fdc <_free_r+0x94>)
 8016f64:	9801      	ldr	r0, [sp, #4]
 8016f66:	6813      	ldr	r3, [r2, #0]
 8016f68:	b933      	cbnz	r3, 8016f78 <_free_r+0x30>
 8016f6a:	6063      	str	r3, [r4, #4]
 8016f6c:	6014      	str	r4, [r2, #0]
 8016f6e:	b003      	add	sp, #12
 8016f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f74:	f000 b978 	b.w	8017268 <__malloc_unlock>
 8016f78:	42a3      	cmp	r3, r4
 8016f7a:	d908      	bls.n	8016f8e <_free_r+0x46>
 8016f7c:	6825      	ldr	r5, [r4, #0]
 8016f7e:	1961      	adds	r1, r4, r5
 8016f80:	428b      	cmp	r3, r1
 8016f82:	bf01      	itttt	eq
 8016f84:	6819      	ldreq	r1, [r3, #0]
 8016f86:	685b      	ldreq	r3, [r3, #4]
 8016f88:	1949      	addeq	r1, r1, r5
 8016f8a:	6021      	streq	r1, [r4, #0]
 8016f8c:	e7ed      	b.n	8016f6a <_free_r+0x22>
 8016f8e:	461a      	mov	r2, r3
 8016f90:	685b      	ldr	r3, [r3, #4]
 8016f92:	b10b      	cbz	r3, 8016f98 <_free_r+0x50>
 8016f94:	42a3      	cmp	r3, r4
 8016f96:	d9fa      	bls.n	8016f8e <_free_r+0x46>
 8016f98:	6811      	ldr	r1, [r2, #0]
 8016f9a:	1855      	adds	r5, r2, r1
 8016f9c:	42a5      	cmp	r5, r4
 8016f9e:	d10b      	bne.n	8016fb8 <_free_r+0x70>
 8016fa0:	6824      	ldr	r4, [r4, #0]
 8016fa2:	4421      	add	r1, r4
 8016fa4:	1854      	adds	r4, r2, r1
 8016fa6:	42a3      	cmp	r3, r4
 8016fa8:	6011      	str	r1, [r2, #0]
 8016faa:	d1e0      	bne.n	8016f6e <_free_r+0x26>
 8016fac:	681c      	ldr	r4, [r3, #0]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	6053      	str	r3, [r2, #4]
 8016fb2:	4421      	add	r1, r4
 8016fb4:	6011      	str	r1, [r2, #0]
 8016fb6:	e7da      	b.n	8016f6e <_free_r+0x26>
 8016fb8:	d902      	bls.n	8016fc0 <_free_r+0x78>
 8016fba:	230c      	movs	r3, #12
 8016fbc:	6003      	str	r3, [r0, #0]
 8016fbe:	e7d6      	b.n	8016f6e <_free_r+0x26>
 8016fc0:	6825      	ldr	r5, [r4, #0]
 8016fc2:	1961      	adds	r1, r4, r5
 8016fc4:	428b      	cmp	r3, r1
 8016fc6:	bf04      	itt	eq
 8016fc8:	6819      	ldreq	r1, [r3, #0]
 8016fca:	685b      	ldreq	r3, [r3, #4]
 8016fcc:	6063      	str	r3, [r4, #4]
 8016fce:	bf04      	itt	eq
 8016fd0:	1949      	addeq	r1, r1, r5
 8016fd2:	6021      	streq	r1, [r4, #0]
 8016fd4:	6054      	str	r4, [r2, #4]
 8016fd6:	e7ca      	b.n	8016f6e <_free_r+0x26>
 8016fd8:	b003      	add	sp, #12
 8016fda:	bd30      	pop	{r4, r5, pc}
 8016fdc:	2400676c 	.word	0x2400676c

08016fe0 <sbrk_aligned>:
 8016fe0:	b570      	push	{r4, r5, r6, lr}
 8016fe2:	4e0e      	ldr	r6, [pc, #56]	; (801701c <sbrk_aligned+0x3c>)
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	6831      	ldr	r1, [r6, #0]
 8016fe8:	4605      	mov	r5, r0
 8016fea:	b911      	cbnz	r1, 8016ff2 <sbrk_aligned+0x12>
 8016fec:	f000 f88c 	bl	8017108 <_sbrk_r>
 8016ff0:	6030      	str	r0, [r6, #0]
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f000 f887 	bl	8017108 <_sbrk_r>
 8016ffa:	1c43      	adds	r3, r0, #1
 8016ffc:	d00a      	beq.n	8017014 <sbrk_aligned+0x34>
 8016ffe:	1cc4      	adds	r4, r0, #3
 8017000:	f024 0403 	bic.w	r4, r4, #3
 8017004:	42a0      	cmp	r0, r4
 8017006:	d007      	beq.n	8017018 <sbrk_aligned+0x38>
 8017008:	1a21      	subs	r1, r4, r0
 801700a:	4628      	mov	r0, r5
 801700c:	f000 f87c 	bl	8017108 <_sbrk_r>
 8017010:	3001      	adds	r0, #1
 8017012:	d101      	bne.n	8017018 <sbrk_aligned+0x38>
 8017014:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017018:	4620      	mov	r0, r4
 801701a:	bd70      	pop	{r4, r5, r6, pc}
 801701c:	24006770 	.word	0x24006770

08017020 <_malloc_r>:
 8017020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017024:	1ccd      	adds	r5, r1, #3
 8017026:	f025 0503 	bic.w	r5, r5, #3
 801702a:	3508      	adds	r5, #8
 801702c:	2d0c      	cmp	r5, #12
 801702e:	bf38      	it	cc
 8017030:	250c      	movcc	r5, #12
 8017032:	2d00      	cmp	r5, #0
 8017034:	4607      	mov	r7, r0
 8017036:	db01      	blt.n	801703c <_malloc_r+0x1c>
 8017038:	42a9      	cmp	r1, r5
 801703a:	d905      	bls.n	8017048 <_malloc_r+0x28>
 801703c:	230c      	movs	r3, #12
 801703e:	603b      	str	r3, [r7, #0]
 8017040:	2600      	movs	r6, #0
 8017042:	4630      	mov	r0, r6
 8017044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017048:	4e2e      	ldr	r6, [pc, #184]	; (8017104 <_malloc_r+0xe4>)
 801704a:	f000 f907 	bl	801725c <__malloc_lock>
 801704e:	6833      	ldr	r3, [r6, #0]
 8017050:	461c      	mov	r4, r3
 8017052:	bb34      	cbnz	r4, 80170a2 <_malloc_r+0x82>
 8017054:	4629      	mov	r1, r5
 8017056:	4638      	mov	r0, r7
 8017058:	f7ff ffc2 	bl	8016fe0 <sbrk_aligned>
 801705c:	1c43      	adds	r3, r0, #1
 801705e:	4604      	mov	r4, r0
 8017060:	d14d      	bne.n	80170fe <_malloc_r+0xde>
 8017062:	6834      	ldr	r4, [r6, #0]
 8017064:	4626      	mov	r6, r4
 8017066:	2e00      	cmp	r6, #0
 8017068:	d140      	bne.n	80170ec <_malloc_r+0xcc>
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	4631      	mov	r1, r6
 801706e:	4638      	mov	r0, r7
 8017070:	eb04 0803 	add.w	r8, r4, r3
 8017074:	f000 f848 	bl	8017108 <_sbrk_r>
 8017078:	4580      	cmp	r8, r0
 801707a:	d13a      	bne.n	80170f2 <_malloc_r+0xd2>
 801707c:	6821      	ldr	r1, [r4, #0]
 801707e:	3503      	adds	r5, #3
 8017080:	1a6d      	subs	r5, r5, r1
 8017082:	f025 0503 	bic.w	r5, r5, #3
 8017086:	3508      	adds	r5, #8
 8017088:	2d0c      	cmp	r5, #12
 801708a:	bf38      	it	cc
 801708c:	250c      	movcc	r5, #12
 801708e:	4629      	mov	r1, r5
 8017090:	4638      	mov	r0, r7
 8017092:	f7ff ffa5 	bl	8016fe0 <sbrk_aligned>
 8017096:	3001      	adds	r0, #1
 8017098:	d02b      	beq.n	80170f2 <_malloc_r+0xd2>
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	442b      	add	r3, r5
 801709e:	6023      	str	r3, [r4, #0]
 80170a0:	e00e      	b.n	80170c0 <_malloc_r+0xa0>
 80170a2:	6822      	ldr	r2, [r4, #0]
 80170a4:	1b52      	subs	r2, r2, r5
 80170a6:	d41e      	bmi.n	80170e6 <_malloc_r+0xc6>
 80170a8:	2a0b      	cmp	r2, #11
 80170aa:	d916      	bls.n	80170da <_malloc_r+0xba>
 80170ac:	1961      	adds	r1, r4, r5
 80170ae:	42a3      	cmp	r3, r4
 80170b0:	6025      	str	r5, [r4, #0]
 80170b2:	bf18      	it	ne
 80170b4:	6059      	strne	r1, [r3, #4]
 80170b6:	6863      	ldr	r3, [r4, #4]
 80170b8:	bf08      	it	eq
 80170ba:	6031      	streq	r1, [r6, #0]
 80170bc:	5162      	str	r2, [r4, r5]
 80170be:	604b      	str	r3, [r1, #4]
 80170c0:	4638      	mov	r0, r7
 80170c2:	f104 060b 	add.w	r6, r4, #11
 80170c6:	f000 f8cf 	bl	8017268 <__malloc_unlock>
 80170ca:	f026 0607 	bic.w	r6, r6, #7
 80170ce:	1d23      	adds	r3, r4, #4
 80170d0:	1af2      	subs	r2, r6, r3
 80170d2:	d0b6      	beq.n	8017042 <_malloc_r+0x22>
 80170d4:	1b9b      	subs	r3, r3, r6
 80170d6:	50a3      	str	r3, [r4, r2]
 80170d8:	e7b3      	b.n	8017042 <_malloc_r+0x22>
 80170da:	6862      	ldr	r2, [r4, #4]
 80170dc:	42a3      	cmp	r3, r4
 80170de:	bf0c      	ite	eq
 80170e0:	6032      	streq	r2, [r6, #0]
 80170e2:	605a      	strne	r2, [r3, #4]
 80170e4:	e7ec      	b.n	80170c0 <_malloc_r+0xa0>
 80170e6:	4623      	mov	r3, r4
 80170e8:	6864      	ldr	r4, [r4, #4]
 80170ea:	e7b2      	b.n	8017052 <_malloc_r+0x32>
 80170ec:	4634      	mov	r4, r6
 80170ee:	6876      	ldr	r6, [r6, #4]
 80170f0:	e7b9      	b.n	8017066 <_malloc_r+0x46>
 80170f2:	230c      	movs	r3, #12
 80170f4:	603b      	str	r3, [r7, #0]
 80170f6:	4638      	mov	r0, r7
 80170f8:	f000 f8b6 	bl	8017268 <__malloc_unlock>
 80170fc:	e7a1      	b.n	8017042 <_malloc_r+0x22>
 80170fe:	6025      	str	r5, [r4, #0]
 8017100:	e7de      	b.n	80170c0 <_malloc_r+0xa0>
 8017102:	bf00      	nop
 8017104:	2400676c 	.word	0x2400676c

08017108 <_sbrk_r>:
 8017108:	b538      	push	{r3, r4, r5, lr}
 801710a:	4d06      	ldr	r5, [pc, #24]	; (8017124 <_sbrk_r+0x1c>)
 801710c:	2300      	movs	r3, #0
 801710e:	4604      	mov	r4, r0
 8017110:	4608      	mov	r0, r1
 8017112:	602b      	str	r3, [r5, #0]
 8017114:	f7eb ffe0 	bl	80030d8 <_sbrk>
 8017118:	1c43      	adds	r3, r0, #1
 801711a:	d102      	bne.n	8017122 <_sbrk_r+0x1a>
 801711c:	682b      	ldr	r3, [r5, #0]
 801711e:	b103      	cbz	r3, 8017122 <_sbrk_r+0x1a>
 8017120:	6023      	str	r3, [r4, #0]
 8017122:	bd38      	pop	{r3, r4, r5, pc}
 8017124:	24006774 	.word	0x24006774

08017128 <__sread>:
 8017128:	b510      	push	{r4, lr}
 801712a:	460c      	mov	r4, r1
 801712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017130:	f000 f8a0 	bl	8017274 <_read_r>
 8017134:	2800      	cmp	r0, #0
 8017136:	bfab      	itete	ge
 8017138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801713a:	89a3      	ldrhlt	r3, [r4, #12]
 801713c:	181b      	addge	r3, r3, r0
 801713e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017142:	bfac      	ite	ge
 8017144:	6563      	strge	r3, [r4, #84]	; 0x54
 8017146:	81a3      	strhlt	r3, [r4, #12]
 8017148:	bd10      	pop	{r4, pc}

0801714a <__swrite>:
 801714a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801714e:	461f      	mov	r7, r3
 8017150:	898b      	ldrh	r3, [r1, #12]
 8017152:	05db      	lsls	r3, r3, #23
 8017154:	4605      	mov	r5, r0
 8017156:	460c      	mov	r4, r1
 8017158:	4616      	mov	r6, r2
 801715a:	d505      	bpl.n	8017168 <__swrite+0x1e>
 801715c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017160:	2302      	movs	r3, #2
 8017162:	2200      	movs	r2, #0
 8017164:	f000 f868 	bl	8017238 <_lseek_r>
 8017168:	89a3      	ldrh	r3, [r4, #12]
 801716a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801716e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017172:	81a3      	strh	r3, [r4, #12]
 8017174:	4632      	mov	r2, r6
 8017176:	463b      	mov	r3, r7
 8017178:	4628      	mov	r0, r5
 801717a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801717e:	f000 b817 	b.w	80171b0 <_write_r>

08017182 <__sseek>:
 8017182:	b510      	push	{r4, lr}
 8017184:	460c      	mov	r4, r1
 8017186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801718a:	f000 f855 	bl	8017238 <_lseek_r>
 801718e:	1c43      	adds	r3, r0, #1
 8017190:	89a3      	ldrh	r3, [r4, #12]
 8017192:	bf15      	itete	ne
 8017194:	6560      	strne	r0, [r4, #84]	; 0x54
 8017196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801719a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801719e:	81a3      	strheq	r3, [r4, #12]
 80171a0:	bf18      	it	ne
 80171a2:	81a3      	strhne	r3, [r4, #12]
 80171a4:	bd10      	pop	{r4, pc}

080171a6 <__sclose>:
 80171a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171aa:	f000 b813 	b.w	80171d4 <_close_r>
	...

080171b0 <_write_r>:
 80171b0:	b538      	push	{r3, r4, r5, lr}
 80171b2:	4d07      	ldr	r5, [pc, #28]	; (80171d0 <_write_r+0x20>)
 80171b4:	4604      	mov	r4, r0
 80171b6:	4608      	mov	r0, r1
 80171b8:	4611      	mov	r1, r2
 80171ba:	2200      	movs	r2, #0
 80171bc:	602a      	str	r2, [r5, #0]
 80171be:	461a      	mov	r2, r3
 80171c0:	f7eb ff39 	bl	8003036 <_write>
 80171c4:	1c43      	adds	r3, r0, #1
 80171c6:	d102      	bne.n	80171ce <_write_r+0x1e>
 80171c8:	682b      	ldr	r3, [r5, #0]
 80171ca:	b103      	cbz	r3, 80171ce <_write_r+0x1e>
 80171cc:	6023      	str	r3, [r4, #0]
 80171ce:	bd38      	pop	{r3, r4, r5, pc}
 80171d0:	24006774 	.word	0x24006774

080171d4 <_close_r>:
 80171d4:	b538      	push	{r3, r4, r5, lr}
 80171d6:	4d06      	ldr	r5, [pc, #24]	; (80171f0 <_close_r+0x1c>)
 80171d8:	2300      	movs	r3, #0
 80171da:	4604      	mov	r4, r0
 80171dc:	4608      	mov	r0, r1
 80171de:	602b      	str	r3, [r5, #0]
 80171e0:	f7eb ff45 	bl	800306e <_close>
 80171e4:	1c43      	adds	r3, r0, #1
 80171e6:	d102      	bne.n	80171ee <_close_r+0x1a>
 80171e8:	682b      	ldr	r3, [r5, #0]
 80171ea:	b103      	cbz	r3, 80171ee <_close_r+0x1a>
 80171ec:	6023      	str	r3, [r4, #0]
 80171ee:	bd38      	pop	{r3, r4, r5, pc}
 80171f0:	24006774 	.word	0x24006774

080171f4 <_fstat_r>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4d07      	ldr	r5, [pc, #28]	; (8017214 <_fstat_r+0x20>)
 80171f8:	2300      	movs	r3, #0
 80171fa:	4604      	mov	r4, r0
 80171fc:	4608      	mov	r0, r1
 80171fe:	4611      	mov	r1, r2
 8017200:	602b      	str	r3, [r5, #0]
 8017202:	f7eb ff40 	bl	8003086 <_fstat>
 8017206:	1c43      	adds	r3, r0, #1
 8017208:	d102      	bne.n	8017210 <_fstat_r+0x1c>
 801720a:	682b      	ldr	r3, [r5, #0]
 801720c:	b103      	cbz	r3, 8017210 <_fstat_r+0x1c>
 801720e:	6023      	str	r3, [r4, #0]
 8017210:	bd38      	pop	{r3, r4, r5, pc}
 8017212:	bf00      	nop
 8017214:	24006774 	.word	0x24006774

08017218 <_isatty_r>:
 8017218:	b538      	push	{r3, r4, r5, lr}
 801721a:	4d06      	ldr	r5, [pc, #24]	; (8017234 <_isatty_r+0x1c>)
 801721c:	2300      	movs	r3, #0
 801721e:	4604      	mov	r4, r0
 8017220:	4608      	mov	r0, r1
 8017222:	602b      	str	r3, [r5, #0]
 8017224:	f7eb ff3f 	bl	80030a6 <_isatty>
 8017228:	1c43      	adds	r3, r0, #1
 801722a:	d102      	bne.n	8017232 <_isatty_r+0x1a>
 801722c:	682b      	ldr	r3, [r5, #0]
 801722e:	b103      	cbz	r3, 8017232 <_isatty_r+0x1a>
 8017230:	6023      	str	r3, [r4, #0]
 8017232:	bd38      	pop	{r3, r4, r5, pc}
 8017234:	24006774 	.word	0x24006774

08017238 <_lseek_r>:
 8017238:	b538      	push	{r3, r4, r5, lr}
 801723a:	4d07      	ldr	r5, [pc, #28]	; (8017258 <_lseek_r+0x20>)
 801723c:	4604      	mov	r4, r0
 801723e:	4608      	mov	r0, r1
 8017240:	4611      	mov	r1, r2
 8017242:	2200      	movs	r2, #0
 8017244:	602a      	str	r2, [r5, #0]
 8017246:	461a      	mov	r2, r3
 8017248:	f7eb ff38 	bl	80030bc <_lseek>
 801724c:	1c43      	adds	r3, r0, #1
 801724e:	d102      	bne.n	8017256 <_lseek_r+0x1e>
 8017250:	682b      	ldr	r3, [r5, #0]
 8017252:	b103      	cbz	r3, 8017256 <_lseek_r+0x1e>
 8017254:	6023      	str	r3, [r4, #0]
 8017256:	bd38      	pop	{r3, r4, r5, pc}
 8017258:	24006774 	.word	0x24006774

0801725c <__malloc_lock>:
 801725c:	4801      	ldr	r0, [pc, #4]	; (8017264 <__malloc_lock+0x8>)
 801725e:	f7ff be0b 	b.w	8016e78 <__retarget_lock_acquire_recursive>
 8017262:	bf00      	nop
 8017264:	24006768 	.word	0x24006768

08017268 <__malloc_unlock>:
 8017268:	4801      	ldr	r0, [pc, #4]	; (8017270 <__malloc_unlock+0x8>)
 801726a:	f7ff be06 	b.w	8016e7a <__retarget_lock_release_recursive>
 801726e:	bf00      	nop
 8017270:	24006768 	.word	0x24006768

08017274 <_read_r>:
 8017274:	b538      	push	{r3, r4, r5, lr}
 8017276:	4d07      	ldr	r5, [pc, #28]	; (8017294 <_read_r+0x20>)
 8017278:	4604      	mov	r4, r0
 801727a:	4608      	mov	r0, r1
 801727c:	4611      	mov	r1, r2
 801727e:	2200      	movs	r2, #0
 8017280:	602a      	str	r2, [r5, #0]
 8017282:	461a      	mov	r2, r3
 8017284:	f7eb feba 	bl	8002ffc <_read>
 8017288:	1c43      	adds	r3, r0, #1
 801728a:	d102      	bne.n	8017292 <_read_r+0x1e>
 801728c:	682b      	ldr	r3, [r5, #0]
 801728e:	b103      	cbz	r3, 8017292 <_read_r+0x1e>
 8017290:	6023      	str	r3, [r4, #0]
 8017292:	bd38      	pop	{r3, r4, r5, pc}
 8017294:	24006774 	.word	0x24006774

08017298 <_init>:
 8017298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801729a:	bf00      	nop
 801729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801729e:	bc08      	pop	{r3}
 80172a0:	469e      	mov	lr, r3
 80172a2:	4770      	bx	lr

080172a4 <_fini>:
 80172a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172a6:	bf00      	nop
 80172a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172aa:	bc08      	pop	{r3}
 80172ac:	469e      	mov	lr, r3
 80172ae:	4770      	bx	lr
