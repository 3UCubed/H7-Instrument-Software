
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c020  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c2c0  0800c2c0  0001c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5c8  0800c5c8  0001c5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c5d4  0800c5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800c5d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bc4  24000078  0800c650  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004c3c  0800c650  00024c3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000231b9  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004072  00000000  00000000  0004325f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a40  00000000  00000000  000472d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c8  00000000  00000000  00048d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000058f2  00000000  00000000  0004a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020918  00000000  00000000  0004fed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001714c9  00000000  00000000  000707ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e1cb3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075a8  00000000  00000000  001e1d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c2a8 	.word	0x0800c2a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800c2a8 	.word	0x0800c2a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 f982 	bl	8008904 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f008 f977 	bl	8008904 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f008 f96c 	bl	8008904 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f00b f9aa 	bl	800b988 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000094 	.word	0x24000094
 8000640:	24000220 	.word	0x24000220
 8000644:	240000e0 	.word	0x240000e0
 8000648:	2400012c 	.word	0x2400012c
 800064c:	0800c2f0 	.word	0x0800c2f0

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f005 fca1 	bl	8005fa4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f00b f939 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f00b f935 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f00b f931 	bl	800b988 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f00b f92d 	bl	800b988 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f00b f929 	bl	800b988 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f00b f925 	bl	800b988 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f00b f921 	bl	800b988 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f00b f91d 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f00b f919 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f00b f915 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f00b f911 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f00b f90d 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f00b f909 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f00b f905 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f00b f901 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f00b f8fd 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f00b f8f9 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f00b f8f5 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f00b f8f1 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f00b f8ed 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f00b f8e9 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f00b f8e5 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f00b f8e1 	bl	800b988 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f00b f8dd 	bl	800b988 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f00b f8d9 	bl	800b988 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f00b f8d5 	bl	800b988 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f00b f8d1 	bl	800b988 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f00b f8cd 	bl	800b988 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f00b f8c9 	bl	800b988 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f00b f8c5 	bl	800b988 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000224 	.word	0x24000224
 800080c:	24000178 	.word	0x24000178
 8000810:	0800c308 	.word	0x0800c308
 8000814:	0800c310 	.word	0x0800c310
 8000818:	0800c31c 	.word	0x0800c31c
 800081c:	0800c324 	.word	0x0800c324
 8000820:	0800c330 	.word	0x0800c330
 8000824:	0800c344 	.word	0x0800c344
 8000828:	0800c350 	.word	0x0800c350
 800082c:	0800c35c 	.word	0x0800c35c
 8000830:	0800c368 	.word	0x0800c368
 8000834:	0800c374 	.word	0x0800c374
 8000838:	0800c380 	.word	0x0800c380
 800083c:	0800c390 	.word	0x0800c390
 8000840:	0800c39c 	.word	0x0800c39c
 8000844:	0800c3a8 	.word	0x0800c3a8
 8000848:	0800c3b8 	.word	0x0800c3b8
 800084c:	0800c3c8 	.word	0x0800c3c8
 8000850:	0800c3d4 	.word	0x0800c3d4
 8000854:	0800c3e0 	.word	0x0800c3e0
 8000858:	0800c3ec 	.word	0x0800c3ec
 800085c:	0800c3f8 	.word	0x0800c3f8
 8000860:	0800c404 	.word	0x0800c404
 8000864:	0800c410 	.word	0x0800c410
 8000868:	0800c41c 	.word	0x0800c41c
 800086c:	0800c42c 	.word	0x0800c42c
 8000870:	0800c43c 	.word	0x0800c43c
 8000874:	0800c444 	.word	0x0800c444
 8000878:	0800c44c 	.word	0x0800c44c
 800087c:	0800c454 	.word	0x0800c454
 8000880:	0800c460 	.word	0x0800c460
 8000884:	0800c468 	.word	0x0800c468

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fdf2 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f866 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 fa0a 	bl	8000cac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000898:	f000 f8cc 	bl	8000a34 <MX_TIM1_Init>
  MX_TIM2_Init();
 800089c:	f000 f91e 	bl	8000adc <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a0:	f000 f96a 	bl	8000b78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 f9b6 	bl	8000c14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008a8:	2100      	movs	r1, #0
 80008aa:	481c      	ldr	r0, [pc, #112]	; (800091c <main+0x94>)
 80008ac:	f004 fd9c 	bl	80053e8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008b0:	2100      	movs	r1, #0
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <main+0x98>)
 80008b4:	f004 fd98 	bl	80053e8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008b8:	2100      	movs	r1, #0
 80008ba:	481a      	ldr	r0, [pc, #104]	; (8000924 <main+0x9c>)
 80008bc:	f004 fd94 	bl	80053e8 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c0:	f007 ff04 	bl	80086cc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008c4:	4a18      	ldr	r2, [pc, #96]	; (8000928 <main+0xa0>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <main+0xa4>)
 80008ca:	f007 ff49 	bl	8008760 <osThreadNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <main+0xa8>)
 80008d2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <main+0xac>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <main+0xb0>)
 80008da:	f007 ff41 	bl	8008760 <osThreadNew>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <main+0xb4>)
 80008e2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <main+0xb8>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4816      	ldr	r0, [pc, #88]	; (8000944 <main+0xbc>)
 80008ea:	f007 ff39 	bl	8008760 <osThreadNew>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <main+0xc0>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <main+0xc4>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <main+0xc8>)
 80008fa:	f007 ff31 	bl	8008760 <osThreadNew>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <main+0xcc>)
 8000902:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 8000904:	2000      	movs	r0, #0
 8000906:	f007 ffbd 	bl	8008884 <osEventFlagsNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a12      	ldr	r2, [pc, #72]	; (8000958 <main+0xd0>)
 800090e:	6013      	str	r3, [r2, #0]
  printf("Starting kernal...\n");
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <main+0xd4>)
 8000912:	f00b f839 	bl	800b988 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000916:	f007 fefd 	bl	8008714 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800091a:	e7fe      	b.n	800091a <main+0x92>
 800091c:	24000094 	.word	0x24000094
 8000920:	240000e0 	.word	0x240000e0
 8000924:	2400012c 	.word	0x2400012c
 8000928:	0800c49c 	.word	0x0800c49c
 800092c:	08000ce1 	.word	0x08000ce1
 8000930:	2400020c 	.word	0x2400020c
 8000934:	0800c4c0 	.word	0x0800c4c0
 8000938:	08000d11 	.word	0x08000d11
 800093c:	24000210 	.word	0x24000210
 8000940:	0800c4e4 	.word	0x0800c4e4
 8000944:	08000d41 	.word	0x08000d41
 8000948:	24000214 	.word	0x24000214
 800094c:	0800c508 	.word	0x0800c508
 8000950:	08000d71 	.word	0x08000d71
 8000954:	24000218 	.word	0x24000218
 8000958:	24000220 	.word	0x24000220
 800095c:	0800c470 	.word	0x0800c470

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	; 0x70
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	224c      	movs	r2, #76	; 0x4c
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f00a ff94 	bl	800b89c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2220      	movs	r2, #32
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f00a ff8e 	bl	800b89c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000980:	2002      	movs	r0, #2
 8000982:	f001 fdd3 	bl	800252c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xcc>)
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <SystemClock_Config+0xcc>)
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClock_Config+0xcc>)
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <SystemClock_Config+0xd0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <SystemClock_Config+0xd0>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <SystemClock_Config+0xd0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009bc:	bf00      	nop
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <SystemClock_Config+0xd0>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ca:	d1f8      	bne.n	80009be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fddd 	bl	80025a0 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009ec:	f000 f9e0 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	233f      	movs	r3, #63	; 0x3f
 80009f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2101      	movs	r1, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fa1d 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a20:	f000 f9c6 	bl	8000db0 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3770      	adds	r7, #112	; 0x70
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <MX_TIM1_Init+0xa4>)
 8000a56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a5a:	227f      	movs	r2, #127	; 0x7f
 8000a5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a66:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7e:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a80:	f004 fbe2 	bl	8005248 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a8a:	f000 f991 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000a9c:	f004 ff06 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000aa6:	f000 f983 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_TIM1_Init+0xa0>)
 8000abc:	f005 f976 	bl	8005dac <HAL_TIMEx_MasterConfigSynchronization>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ac6:	f000 f973 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000094 	.word	0x24000094
 8000ad8:	40010000 	.word	0x40010000

08000adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b04:	223f      	movs	r2, #63	; 0x3f
 8000b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b10:	f640 4234 	movw	r2, #3124	; 0xc34
 8000b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b22:	4814      	ldr	r0, [pc, #80]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b24:	f004 fb90 	bl	8005248 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b2e:	f000 f93f 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b40:	f004 feb4 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b4a:	f000 f931 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_TIM2_Init+0x98>)
 8000b5c:	f005 f926 	bl	8005dac <HAL_TIMEx_MasterConfigSynchronization>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b66:	f000 f923 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	240000e0 	.word	0x240000e0

08000b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000b98:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <MX_TIM3_Init+0x98>)
 8000b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000b9e:	223f      	movs	r2, #63	; 0x3f
 8000ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000baa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000bbe:	f004 fb43 	bl	8005248 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bc8:	f000 f8f2 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000bda:	f004 fe67 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000be4:	f000 f8e4 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_TIM3_Init+0x94>)
 8000bf6:	f005 f8d9 	bl	8005dac <HAL_TIMEx_MasterConfigSynchronization>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f8d6 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2400012c 	.word	0x2400012c
 8000c10:	40000400 	.word	0x40000400

08000c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MX_USART1_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c20:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c5e:	f005 f951 	bl	8005f04 <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f8a2 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c70:	f007 fc1d 	bl	80084ae <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f899 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c82:	f007 fc52 	bl	800852a <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f890 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c92:	f007 fbd3 	bl	800843c <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f888 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000178 	.word	0x24000178
 8000ca8:	40011000 	.word	0x40011000

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_GPIO_Init+0x30>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <MX_GPIO_Init+0x30>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_GPIO_Init+0x30>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <PMT_init+0x28>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	f007 fe4a 	bl	800898c <osEventFlagsWait>
	    //sample_pmt(pmt_data);
		pmt_seq++;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <PMT_init+0x2c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <PMT_init+0x2c>)
 8000d02:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000d04:	e7f0      	b.n	8000ce8 <PMT_init+0x8>
 8000d06:	bf00      	nop
 8000d08:	24000220 	.word	0x24000220
 8000d0c:	2400021c 	.word	0x2400021c

08000d10 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <ERPA_init+0x28>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d20:	2200      	movs	r2, #0
 8000d22:	2102      	movs	r1, #2
 8000d24:	f007 fe32 	bl	800898c <osEventFlagsWait>
		erpa_seq++;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <ERPA_init+0x2c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <ERPA_init+0x2c>)
 8000d32:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000d34:	e7f0      	b.n	8000d18 <ERPA_init+0x8>
 8000d36:	bf00      	nop
 8000d38:	24000220 	.word	0x24000220
 8000d3c:	2400021d 	.word	0x2400021d

08000d40 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HK_init+0x28>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	f007 fe1a 	bl	800898c <osEventFlagsWait>
		hk_seq++;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HK_init+0x2c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HK_init+0x2c>)
 8000d62:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000d64:	e7f0      	b.n	8000d48 <HK_init+0x8>
 8000d66:	bf00      	nop
 8000d68:	24000220 	.word	0x24000220
 8000d6c:	2400021e 	.word	0x2400021e

08000d70 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4902      	ldr	r1, [pc, #8]	; (8000d84 <UART_RX_init+0x14>)
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <UART_RX_init+0x18>)
 8000d7e:	f005 f911 	bl	8005fa4 <HAL_UART_Receive_IT>
 8000d82:	e7f9      	b.n	8000d78 <UART_RX_init+0x8>
 8000d84:	24000224 	.word	0x24000224
 8000d88:	24000178 	.word	0x24000178

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f000 fba5 	bl	80014ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40001000 	.word	0x40001000

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x38>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_MspInit+0x38>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_MspInit+0x38>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	210f      	movs	r1, #15
 8000de4:	f06f 0001 	mvn.w	r0, #1
 8000de8:	f000 fc64 	bl	80016b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	58024400 	.word	0x58024400

08000df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a37      	ldr	r2, [pc, #220]	; (8000ee4 <HAL_TIM_Base_MspInit+0xec>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12f      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e0a:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e10:	4a35      	ldr	r2, [pc, #212]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e1a:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	2018      	movs	r0, #24
 8000e2e:	f000 fc41 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000e32:	2018      	movs	r0, #24
 8000e34:	f000 fc58 	bl	80016e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	2019      	movs	r0, #25
 8000e3e:	f000 fc39 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e42:	2019      	movs	r0, #25
 8000e44:	f000 fc50 	bl	80016e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	201a      	movs	r0, #26
 8000e4e:	f000 fc31 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000e52:	201a      	movs	r0, #26
 8000e54:	f000 fc48 	bl	80016e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	201b      	movs	r0, #27
 8000e5e:	f000 fc29 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e62:	201b      	movs	r0, #27
 8000e64:	f000 fc40 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e68:	e038      	b.n	8000edc <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e72:	d117      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	201c      	movs	r0, #28
 8000e98:	f000 fc0c 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9c:	201c      	movs	r0, #28
 8000e9e:	f000 fc23 	bl	80016e8 <HAL_NVIC_EnableIRQ>
}
 8000ea2:	e01b      	b.n	8000edc <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_TIM_Base_MspInit+0xf4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d116      	bne.n	8000edc <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0xf0>)
 8000ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2105      	movs	r1, #5
 8000ed0:	201d      	movs	r0, #29
 8000ed2:	f000 fbef 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ed6:	201d      	movs	r0, #29
 8000ed8:	f000 fc06 	bl	80016e8 <HAL_NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	40000400 	.word	0x40000400

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ba      	sub	sp, #232	; 0xe8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	22c0      	movs	r2, #192	; 0xc0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00a fcc3 	bl	800b89c <memset>
  if(huart->Instance==USART1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <HAL_UART_MspInit+0xd8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d14e      	bne.n	8000fbe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f20:	f04f 0201 	mov.w	r2, #1
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fb5a 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f42:	f7ff ff35 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_UART_MspInit+0xe0>)
 8000faa:	f001 f90f 	bl	80021cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	2025      	movs	r0, #37	; 0x25
 8000fb4:	f000 fb7e 	bl	80016b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb8:	2025      	movs	r0, #37	; 0x25
 8000fba:	f000 fb95 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37e8      	adds	r7, #232	; 0xe8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020000 	.word	0x58020000

08000fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b090      	sub	sp, #64	; 0x40
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d827      	bhi.n	8001032 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	2036      	movs	r0, #54	; 0x36
 8000fe8:	f000 fb64 	bl	80016b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fec:	2036      	movs	r0, #54	; 0x36
 8000fee:	f000 fb7b 	bl	80016e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ff2:	4a29      	ldr	r2, [pc, #164]	; (8001098 <HAL_InitTick+0xc4>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_InitTick+0xc8>)
 8000ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_InitTick+0xc8>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_InitTick+0xc8>)
 800100a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001016:	f107 0210 	add.w	r2, r7, #16
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f002 faa3 	bl	800356c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102c:	2b00      	cmp	r3, #0
 800102e:	d106      	bne.n	800103e <HAL_InitTick+0x6a>
 8001030:	e001      	b.n	8001036 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e02b      	b.n	800108e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001036:	f002 fa6d 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 800103a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800103c:	e004      	b.n	8001048 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103e:	f002 fa69 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <HAL_InitTick+0xcc>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_InitTick+0xd0>)
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_InitTick+0xd4>)
 800105a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_InitTick+0xd0>)
 800105e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_InitTick+0xd0>)
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_InitTick+0xd0>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_InitTick+0xd0>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <HAL_InitTick+0xd0>)
 8001078:	f004 f8e6 	bl	8005248 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d104      	bne.n	800108c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <HAL_InitTick+0xd0>)
 8001084:	f004 f938 	bl	80052f8 <HAL_TIM_Base_Start_IT>
 8001088:	4603      	mov	r3, r0
 800108a:	e000      	b.n	800108e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3740      	adds	r7, #64	; 0x40
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	24000008 	.word	0x24000008
 800109c:	58024400 	.word	0x58024400
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	24000288 	.word	0x24000288
 80010a8:	40001000 	.word	0x40001000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <TIM1_BRK_IRQHandler+0x10>)
 80010de:	f004 fadd 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	24000094 	.word	0x24000094

080010ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM1_UP_IRQHandler+0x10>)
 80010f2:	f004 fad3 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000094 	.word	0x24000094

08001100 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001106:	f004 fac9 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000094 	.word	0x24000094

08001114 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM1_CC_IRQHandler+0x10>)
 800111a:	f004 fabf 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	24000094 	.word	0x24000094

08001128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM2_IRQHandler+0x10>)
 800112e:	f004 fab5 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	240000e0 	.word	0x240000e0

0800113c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM3_IRQHandler+0x10>)
 8001142:	f004 faab 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2400012c 	.word	0x2400012c

08001150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <USART1_IRQHandler+0x10>)
 8001156:	f004 ff71 	bl	800603c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	24000178 	.word	0x24000178

08001164 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <TIM6_DAC_IRQHandler+0x10>)
 800116a:	f004 fa97 	bl	800569c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	24000288 	.word	0x24000288

08001178 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <ITM_SendChar+0x48>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <ITM_SendChar+0x48>)
 8001188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800118c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <ITM_SendChar+0x4c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <ITM_SendChar+0x4c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800119a:	bf00      	nop
 800119c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f8      	beq.n	800119c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80011aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	6013      	str	r3, [r2, #0]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000edfc 	.word	0xe000edfc
 80011c4:	e0000e00 	.word	0xe0000e00

080011c8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00a      	b.n	80011f0 <_read+0x28>
		*ptr++ = __io_getchar();
 80011da:	f3af 8000 	nop.w
 80011de:	4601      	mov	r1, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf0      	blt.n	80011da <_read+0x12>
	}

	return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e009      	b.n	8001228 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffab 	bl	8001178 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf1      	blt.n	8001214 <_write+0x12>
	}
	return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_close>:

int _close(int file) {
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	605a      	str	r2, [r3, #4]
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_isatty>:

int _isatty(int file) {
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
		errno = ENOMEM;
 80012d4:	f00a faaa 	bl	800b82c <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	24080000 	.word	0x24080000
 8001304:	00000400 	.word	0x00000400
 8001308:	240002d4 	.word	0x240002d4
 800130c:	24004c40 	.word	0x24004c40

08001310 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <SystemInit+0xe4>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a36      	ldr	r2, [pc, #216]	; (80013f4 <SystemInit+0xe4>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <SystemInit+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	2b06      	cmp	r3, #6
 800132e:	d807      	bhi.n	8001340 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <SystemInit+0xe8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 030f 	bic.w	r3, r3, #15
 8001338:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <SystemInit+0xe8>)
 800133a:	f043 0307 	orr.w	r3, r3, #7
 800133e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <SystemInit+0xec>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <SystemInit+0xec>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <SystemInit+0xec>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <SystemInit+0xec>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4929      	ldr	r1, [pc, #164]	; (80013fc <SystemInit+0xec>)
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <SystemInit+0xf0>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <SystemInit+0xe8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <SystemInit+0xe8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 030f 	bic.w	r3, r3, #15
 8001372:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <SystemInit+0xe8>)
 8001374:	f043 0307 	orr.w	r3, r3, #7
 8001378:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <SystemInit+0xec>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <SystemInit+0xec>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <SystemInit+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <SystemInit+0xec>)
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <SystemInit+0xf4>)
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <SystemInit+0xec>)
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <SystemInit+0xf8>)
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <SystemInit+0xec>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <SystemInit+0xfc>)
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <SystemInit+0xec>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <SystemInit+0xec>)
 80013a6:	4a19      	ldr	r2, [pc, #100]	; (800140c <SystemInit+0xfc>)
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <SystemInit+0xec>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <SystemInit+0xec>)
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <SystemInit+0xfc>)
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <SystemInit+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <SystemInit+0xec>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <SystemInit+0xec>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <SystemInit+0xec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <SystemInit+0x100>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <SystemInit+0x104>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013da:	d202      	bcs.n	80013e2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <SystemInit+0x108>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <SystemInit+0x10c>)
 80013e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	52002000 	.word	0x52002000
 80013fc:	58024400 	.word	0x58024400
 8001400:	eaf6ed7f 	.word	0xeaf6ed7f
 8001404:	02020200 	.word	0x02020200
 8001408:	01ff0000 	.word	0x01ff0000
 800140c:	01010280 	.word	0x01010280
 8001410:	5c001000 	.word	0x5c001000
 8001414:	ffff0000 	.word	0xffff0000
 8001418:	51008108 	.word	0x51008108
 800141c:	52004000 	.word	0x52004000

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001424:	f7ff ff74 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	; (8001460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	; (800146c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f00a f9f3 	bl	800b838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff fa19 	bl	8000888 <main>
  bx  lr
 8001456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001458:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800145c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001460:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001464:	0800c5d8 	.word	0x0800c5d8
  ldr r2, =_sbss
 8001468:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800146c:	24004c3c 	.word	0x24004c3c

08001470 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC3_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147a:	2003      	movs	r0, #3
 800147c:	f000 f90f 	bl	800169e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001480:	f001 fe9e 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_Init+0x68>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	4913      	ldr	r1, [pc, #76]	; (80014e0 <HAL_Init+0x6c>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_Init+0x68>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_Init+0x6c>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_Init+0x70>)
 80014b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_Init+0x74>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014be:	200f      	movs	r0, #15
 80014c0:	f7ff fd88 	bl	8000fd4 <HAL_InitTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e002      	b.n	80014d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ce:	f7ff fc75 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	58024400 	.word	0x58024400
 80014e0:	0800c52c 	.word	0x0800c52c
 80014e4:	24000004 	.word	0x24000004
 80014e8:	24000000 	.word	0x24000000

080014ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_IncTick+0x20>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x24>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_IncTick+0x24>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2400000c 	.word	0x2400000c
 8001510:	240002d8 	.word	0x240002d8

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	240002d8 	.word	0x240002d8

0800152c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetREVID+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0c1b      	lsrs	r3, r3, #16
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	5c001000 	.word	0x5c001000

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <__NVIC_SetPriorityGrouping+0x40>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	4313      	orrs	r3, r2
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x40>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	05fa0000 	.word	0x05fa0000

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff4c 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff63 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb3 	bl	8001638 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff82 	bl	80015e4 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff56 	bl	80015a8 <__NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ff02 	bl	8001514 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e2dc      	b.n	8001cd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d008      	beq.n	800173a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e2cd      	b.n	8001cd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a76      	ldr	r2, [pc, #472]	; (8001918 <HAL_DMA_Abort+0x214>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d04a      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a74      	ldr	r2, [pc, #464]	; (800191c <HAL_DMA_Abort+0x218>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d045      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a73      	ldr	r2, [pc, #460]	; (8001920 <HAL_DMA_Abort+0x21c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d040      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a71      	ldr	r2, [pc, #452]	; (8001924 <HAL_DMA_Abort+0x220>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d03b      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a70      	ldr	r2, [pc, #448]	; (8001928 <HAL_DMA_Abort+0x224>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d036      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_DMA_Abort+0x228>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d031      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6d      	ldr	r2, [pc, #436]	; (8001930 <HAL_DMA_Abort+0x22c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d02c      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6b      	ldr	r2, [pc, #428]	; (8001934 <HAL_DMA_Abort+0x230>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d027      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6a      	ldr	r2, [pc, #424]	; (8001938 <HAL_DMA_Abort+0x234>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a68      	ldr	r2, [pc, #416]	; (800193c <HAL_DMA_Abort+0x238>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01d      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a67      	ldr	r2, [pc, #412]	; (8001940 <HAL_DMA_Abort+0x23c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d018      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_DMA_Abort+0x240>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a64      	ldr	r2, [pc, #400]	; (8001948 <HAL_DMA_Abort+0x244>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00e      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a62      	ldr	r2, [pc, #392]	; (800194c <HAL_DMA_Abort+0x248>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d009      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a61      	ldr	r2, [pc, #388]	; (8001950 <HAL_DMA_Abort+0x24c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d004      	beq.n	80017da <HAL_DMA_Abort+0xd6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a5f      	ldr	r2, [pc, #380]	; (8001954 <HAL_DMA_Abort+0x250>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_DMA_Abort+0xda>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_DMA_Abort+0xdc>
 80017de:	2300      	movs	r3, #0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 021e 	bic.w	r2, r2, #30
 80017f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001802:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e00a      	b.n	8001822 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 020e 	bic.w	r2, r2, #14
 800181a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3c      	ldr	r2, [pc, #240]	; (8001918 <HAL_DMA_Abort+0x214>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d072      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_DMA_Abort+0x218>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d06d      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a39      	ldr	r2, [pc, #228]	; (8001920 <HAL_DMA_Abort+0x21c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d068      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_DMA_Abort+0x220>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d063      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a36      	ldr	r2, [pc, #216]	; (8001928 <HAL_DMA_Abort+0x224>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d05e      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_DMA_Abort+0x228>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d059      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a33      	ldr	r2, [pc, #204]	; (8001930 <HAL_DMA_Abort+0x22c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d054      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_DMA_Abort+0x230>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d04f      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_DMA_Abort+0x234>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d04a      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <HAL_DMA_Abort+0x238>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d045      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_DMA_Abort+0x23c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d040      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <HAL_DMA_Abort+0x240>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d03b      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_DMA_Abort+0x244>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d036      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_DMA_Abort+0x248>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d031      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_DMA_Abort+0x24c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d02c      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_DMA_Abort+0x250>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d027      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_DMA_Abort+0x254>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d022      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_DMA_Abort+0x258>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01d      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_DMA_Abort+0x25c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d018      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <HAL_DMA_Abort+0x260>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_DMA_Abort+0x264>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00e      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_DMA_Abort+0x268>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d009      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <HAL_DMA_Abort+0x26c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d004      	beq.n	8001912 <HAL_DMA_Abort+0x20e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_DMA_Abort+0x270>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d132      	bne.n	8001978 <HAL_DMA_Abort+0x274>
 8001912:	2301      	movs	r3, #1
 8001914:	e031      	b.n	800197a <HAL_DMA_Abort+0x276>
 8001916:	bf00      	nop
 8001918:	40020010 	.word	0x40020010
 800191c:	40020028 	.word	0x40020028
 8001920:	40020040 	.word	0x40020040
 8001924:	40020058 	.word	0x40020058
 8001928:	40020070 	.word	0x40020070
 800192c:	40020088 	.word	0x40020088
 8001930:	400200a0 	.word	0x400200a0
 8001934:	400200b8 	.word	0x400200b8
 8001938:	40020410 	.word	0x40020410
 800193c:	40020428 	.word	0x40020428
 8001940:	40020440 	.word	0x40020440
 8001944:	40020458 	.word	0x40020458
 8001948:	40020470 	.word	0x40020470
 800194c:	40020488 	.word	0x40020488
 8001950:	400204a0 	.word	0x400204a0
 8001954:	400204b8 	.word	0x400204b8
 8001958:	58025408 	.word	0x58025408
 800195c:	5802541c 	.word	0x5802541c
 8001960:	58025430 	.word	0x58025430
 8001964:	58025444 	.word	0x58025444
 8001968:	58025458 	.word	0x58025458
 800196c:	5802546c 	.word	0x5802546c
 8001970:	58025480 	.word	0x58025480
 8001974:	58025494 	.word	0x58025494
 8001978:	2300      	movs	r3, #0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800198c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6d      	ldr	r2, [pc, #436]	; (8001b48 <HAL_DMA_Abort+0x444>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d04a      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <HAL_DMA_Abort+0x448>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d045      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6a      	ldr	r2, [pc, #424]	; (8001b50 <HAL_DMA_Abort+0x44c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d040      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a68      	ldr	r2, [pc, #416]	; (8001b54 <HAL_DMA_Abort+0x450>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d03b      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_DMA_Abort+0x454>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d036      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a65      	ldr	r2, [pc, #404]	; (8001b5c <HAL_DMA_Abort+0x458>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d031      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a64      	ldr	r2, [pc, #400]	; (8001b60 <HAL_DMA_Abort+0x45c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d02c      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a62      	ldr	r2, [pc, #392]	; (8001b64 <HAL_DMA_Abort+0x460>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d027      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a61      	ldr	r2, [pc, #388]	; (8001b68 <HAL_DMA_Abort+0x464>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5f      	ldr	r2, [pc, #380]	; (8001b6c <HAL_DMA_Abort+0x468>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01d      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <HAL_DMA_Abort+0x46c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d018      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5c      	ldr	r2, [pc, #368]	; (8001b74 <HAL_DMA_Abort+0x470>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_DMA_Abort+0x474>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a59      	ldr	r2, [pc, #356]	; (8001b7c <HAL_DMA_Abort+0x478>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d009      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_DMA_Abort+0x47c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_DMA_Abort+0x32a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_DMA_Abort+0x480>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <HAL_DMA_Abort+0x33c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e007      	b.n	8001a50 <HAL_DMA_Abort+0x34c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a50:	e013      	b.n	8001a7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a52:	f7ff fd5f 	bl	8001514 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d90c      	bls.n	8001a7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e12d      	b.n	8001cd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1e5      	bne.n	8001a52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_DMA_Abort+0x444>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d04a      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <HAL_DMA_Abort+0x448>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d045      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_DMA_Abort+0x44c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d040      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_DMA_Abort+0x450>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d03b      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_DMA_Abort+0x454>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d036      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_DMA_Abort+0x458>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d031      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_DMA_Abort+0x45c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d02c      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_DMA_Abort+0x460>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d027      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_DMA_Abort+0x464>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_DMA_Abort+0x468>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01d      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <HAL_DMA_Abort+0x46c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_DMA_Abort+0x470>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_DMA_Abort+0x474>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00e      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_DMA_Abort+0x478>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_DMA_Abort+0x47c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_Abort+0x422>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_DMA_Abort+0x480>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_Abort+0x426>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_Abort+0x428>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d02b      	beq.n	8001b88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	223f      	movs	r2, #63	; 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	e02a      	b.n	8001b9e <HAL_DMA_Abort+0x49a>
 8001b48:	40020010 	.word	0x40020010
 8001b4c:	40020028 	.word	0x40020028
 8001b50:	40020040 	.word	0x40020040
 8001b54:	40020058 	.word	0x40020058
 8001b58:	40020070 	.word	0x40020070
 8001b5c:	40020088 	.word	0x40020088
 8001b60:	400200a0 	.word	0x400200a0
 8001b64:	400200b8 	.word	0x400200b8
 8001b68:	40020410 	.word	0x40020410
 8001b6c:	40020428 	.word	0x40020428
 8001b70:	40020440 	.word	0x40020440
 8001b74:	40020458 	.word	0x40020458
 8001b78:	40020470 	.word	0x40020470
 8001b7c:	40020488 	.word	0x40020488
 8001b80:	400204a0 	.word	0x400204a0
 8001b84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2201      	movs	r2, #1
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a4f      	ldr	r2, [pc, #316]	; (8001ce0 <HAL_DMA_Abort+0x5dc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d072      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <HAL_DMA_Abort+0x5e0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d06d      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a4c      	ldr	r2, [pc, #304]	; (8001ce8 <HAL_DMA_Abort+0x5e4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d068      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <HAL_DMA_Abort+0x5e8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d063      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_DMA_Abort+0x5ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d05e      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a47      	ldr	r2, [pc, #284]	; (8001cf4 <HAL_DMA_Abort+0x5f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d059      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <HAL_DMA_Abort+0x5f4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d054      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_DMA_Abort+0x5f8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d04f      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a43      	ldr	r2, [pc, #268]	; (8001d00 <HAL_DMA_Abort+0x5fc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d04a      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <HAL_DMA_Abort+0x600>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d045      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <HAL_DMA_Abort+0x604>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d040      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a3e      	ldr	r2, [pc, #248]	; (8001d0c <HAL_DMA_Abort+0x608>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d03b      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <HAL_DMA_Abort+0x60c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d036      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3b      	ldr	r2, [pc, #236]	; (8001d14 <HAL_DMA_Abort+0x610>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d031      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <HAL_DMA_Abort+0x614>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d02c      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a38      	ldr	r2, [pc, #224]	; (8001d1c <HAL_DMA_Abort+0x618>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d027      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a37      	ldr	r2, [pc, #220]	; (8001d20 <HAL_DMA_Abort+0x61c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d022      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <HAL_DMA_Abort+0x620>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01d      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_DMA_Abort+0x624>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d018      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <HAL_DMA_Abort+0x628>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <HAL_DMA_Abort+0x62c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00e      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2f      	ldr	r2, [pc, #188]	; (8001d34 <HAL_DMA_Abort+0x630>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d009      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2e      	ldr	r2, [pc, #184]	; (8001d38 <HAL_DMA_Abort+0x634>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_Abort+0x58a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <HAL_DMA_Abort+0x638>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_DMA_Abort+0x58e>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_DMA_Abort+0x590>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ca0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001cc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40020010 	.word	0x40020010
 8001ce4:	40020028 	.word	0x40020028
 8001ce8:	40020040 	.word	0x40020040
 8001cec:	40020058 	.word	0x40020058
 8001cf0:	40020070 	.word	0x40020070
 8001cf4:	40020088 	.word	0x40020088
 8001cf8:	400200a0 	.word	0x400200a0
 8001cfc:	400200b8 	.word	0x400200b8
 8001d00:	40020410 	.word	0x40020410
 8001d04:	40020428 	.word	0x40020428
 8001d08:	40020440 	.word	0x40020440
 8001d0c:	40020458 	.word	0x40020458
 8001d10:	40020470 	.word	0x40020470
 8001d14:	40020488 	.word	0x40020488
 8001d18:	400204a0 	.word	0x400204a0
 8001d1c:	400204b8 	.word	0x400204b8
 8001d20:	58025408 	.word	0x58025408
 8001d24:	5802541c 	.word	0x5802541c
 8001d28:	58025430 	.word	0x58025430
 8001d2c:	58025444 	.word	0x58025444
 8001d30:	58025458 	.word	0x58025458
 8001d34:	5802546c 	.word	0x5802546c
 8001d38:	58025480 	.word	0x58025480
 8001d3c:	58025494 	.word	0x58025494

08001d40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e237      	b.n	80021c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d004      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e22c      	b.n	80021c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a5c      	ldr	r2, [pc, #368]	; (8001ee0 <HAL_DMA_Abort_IT+0x1a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d04a      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_DMA_Abort_IT+0x1a4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d045      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a59      	ldr	r2, [pc, #356]	; (8001ee8 <HAL_DMA_Abort_IT+0x1a8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d040      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_DMA_Abort_IT+0x1ac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d03b      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_DMA_Abort_IT+0x1b0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d036      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_DMA_Abort_IT+0x1b4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d031      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a53      	ldr	r2, [pc, #332]	; (8001ef8 <HAL_DMA_Abort_IT+0x1b8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02c      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_DMA_Abort_IT+0x1bc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d027      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <HAL_DMA_Abort_IT+0x1c0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_DMA_Abort_IT+0x1c4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d01d      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	; (8001f08 <HAL_DMA_Abort_IT+0x1c8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_DMA_Abort_IT+0x1cc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_DMA_Abort_IT+0x1d0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_DMA_Abort_IT+0x1d4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a47      	ldr	r2, [pc, #284]	; (8001f18 <HAL_DMA_Abort_IT+0x1d8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xc8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <HAL_DMA_Abort_IT+0x1dc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_DMA_Abort_IT+0xcc>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_DMA_Abort_IT+0xce>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8086 	beq.w	8001f20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <HAL_DMA_Abort_IT+0x1a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04a      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <HAL_DMA_Abort_IT+0x1a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d045      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <HAL_DMA_Abort_IT+0x1a8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d040      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <HAL_DMA_Abort_IT+0x1ac>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d03b      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_DMA_Abort_IT+0x1b0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d036      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_DMA_Abort_IT+0x1b4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <HAL_DMA_Abort_IT+0x1b8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02c      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_DMA_Abort_IT+0x1bc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d027      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_DMA_Abort_IT+0x1c0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_DMA_Abort_IT+0x1c4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d01d      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_DMA_Abort_IT+0x1c8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_DMA_Abort_IT+0x1cc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_DMA_Abort_IT+0x1d0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_DMA_Abort_IT+0x1d4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <HAL_DMA_Abort_IT+0x1d8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x17c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_DMA_Abort_IT+0x1dc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d108      	bne.n	8001ece <HAL_DMA_Abort_IT+0x18e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e178      	b.n	80021c0 <HAL_DMA_Abort_IT+0x480>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e16f      	b.n	80021c0 <HAL_DMA_Abort_IT+0x480>
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	40020040 	.word	0x40020040
 8001eec:	40020058 	.word	0x40020058
 8001ef0:	40020070 	.word	0x40020070
 8001ef4:	40020088 	.word	0x40020088
 8001ef8:	400200a0 	.word	0x400200a0
 8001efc:	400200b8 	.word	0x400200b8
 8001f00:	40020410 	.word	0x40020410
 8001f04:	40020428 	.word	0x40020428
 8001f08:	40020440 	.word	0x40020440
 8001f0c:	40020458 	.word	0x40020458
 8001f10:	40020470 	.word	0x40020470
 8001f14:	40020488 	.word	0x40020488
 8001f18:	400204a0 	.word	0x400204a0
 8001f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 020e 	bic.w	r2, r2, #14
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6c      	ldr	r2, [pc, #432]	; (80020e8 <HAL_DMA_Abort_IT+0x3a8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d04a      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6b      	ldr	r2, [pc, #428]	; (80020ec <HAL_DMA_Abort_IT+0x3ac>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d045      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_DMA_Abort_IT+0x3b0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d040      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <HAL_DMA_Abort_IT+0x3b4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d03b      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_DMA_Abort_IT+0x3b8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d036      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_DMA_Abort_IT+0x3bc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d031      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_DMA_Abort_IT+0x3c0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02c      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_DMA_Abort_IT+0x3c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d027      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_DMA_Abort_IT+0x3c8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d022      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	; (800210c <HAL_DMA_Abort_IT+0x3cc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d01d      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5d      	ldr	r2, [pc, #372]	; (8002110 <HAL_DMA_Abort_IT+0x3d0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d018      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_DMA_Abort_IT+0x3d4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <HAL_DMA_Abort_IT+0x3d8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00e      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a59      	ldr	r2, [pc, #356]	; (800211c <HAL_DMA_Abort_IT+0x3dc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a57      	ldr	r2, [pc, #348]	; (8002120 <HAL_DMA_Abort_IT+0x3e0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x290>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_DMA_Abort_IT+0x3e4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <HAL_DMA_Abort_IT+0x2a2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e007      	b.n	8001ff2 <HAL_DMA_Abort_IT+0x2b2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3c      	ldr	r2, [pc, #240]	; (80020e8 <HAL_DMA_Abort_IT+0x3a8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d072      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <HAL_DMA_Abort_IT+0x3ac>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d06d      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a39      	ldr	r2, [pc, #228]	; (80020f0 <HAL_DMA_Abort_IT+0x3b0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d068      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d063      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d05e      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_DMA_Abort_IT+0x3bc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d059      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_DMA_Abort_IT+0x3c0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d054      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a31      	ldr	r2, [pc, #196]	; (8002104 <HAL_DMA_Abort_IT+0x3c4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d04f      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a30      	ldr	r2, [pc, #192]	; (8002108 <HAL_DMA_Abort_IT+0x3c8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d04a      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2e      	ldr	r2, [pc, #184]	; (800210c <HAL_DMA_Abort_IT+0x3cc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d045      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2d      	ldr	r2, [pc, #180]	; (8002110 <HAL_DMA_Abort_IT+0x3d0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d040      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2b      	ldr	r2, [pc, #172]	; (8002114 <HAL_DMA_Abort_IT+0x3d4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d03b      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <HAL_DMA_Abort_IT+0x3d8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d036      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_DMA_Abort_IT+0x3dc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d031      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_DMA_Abort_IT+0x3e0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d02c      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a25      	ldr	r2, [pc, #148]	; (8002124 <HAL_DMA_Abort_IT+0x3e4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d027      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a24      	ldr	r2, [pc, #144]	; (8002128 <HAL_DMA_Abort_IT+0x3e8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <HAL_DMA_Abort_IT+0x3ec>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a21      	ldr	r2, [pc, #132]	; (8002130 <HAL_DMA_Abort_IT+0x3f0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_DMA_Abort_IT+0x3f4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <HAL_DMA_Abort_IT+0x3f8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_DMA_Abort_IT+0x3fc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_DMA_Abort_IT+0x400>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x3a2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	; (8002144 <HAL_DMA_Abort_IT+0x404>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d132      	bne.n	8002148 <HAL_DMA_Abort_IT+0x408>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e031      	b.n	800214a <HAL_DMA_Abort_IT+0x40a>
 80020e6:	bf00      	nop
 80020e8:	40020010 	.word	0x40020010
 80020ec:	40020028 	.word	0x40020028
 80020f0:	40020040 	.word	0x40020040
 80020f4:	40020058 	.word	0x40020058
 80020f8:	40020070 	.word	0x40020070
 80020fc:	40020088 	.word	0x40020088
 8002100:	400200a0 	.word	0x400200a0
 8002104:	400200b8 	.word	0x400200b8
 8002108:	40020410 	.word	0x40020410
 800210c:	40020428 	.word	0x40020428
 8002110:	40020440 	.word	0x40020440
 8002114:	40020458 	.word	0x40020458
 8002118:	40020470 	.word	0x40020470
 800211c:	40020488 	.word	0x40020488
 8002120:	400204a0 	.word	0x400204a0
 8002124:	400204b8 	.word	0x400204b8
 8002128:	58025408 	.word	0x58025408
 800212c:	5802541c 	.word	0x5802541c
 8002130:	58025430 	.word	0x58025430
 8002134:	58025444 	.word	0x58025444
 8002138:	58025458 	.word	0x58025458
 800213c:	5802546c 	.word	0x5802546c
 8002140:	58025480 	.word	0x58025480
 8002144:	58025494 	.word	0x58025494
 8002148:	2300      	movs	r3, #0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	2201      	movs	r2, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800217c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002194:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800219e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021da:	4b89      	ldr	r3, [pc, #548]	; (8002400 <HAL_GPIO_Init+0x234>)
 80021dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021de:	e194      	b.n	800250a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8186 	beq.w	8002504 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d005      	beq.n	8002210 <HAL_GPIO_Init+0x44>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d130      	bne.n	8002272 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002246:	2201      	movs	r2, #1
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 0201 	and.w	r2, r3, #1
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b03      	cmp	r3, #3
 800227c:	d017      	beq.n	80022ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d123      	bne.n	8002302 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	69b9      	ldr	r1, [r7, #24]
 80022fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0203 	and.w	r2, r3, #3
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80e0 	beq.w	8002504 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_GPIO_Init+0x238>)
 8002346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800234a:	4a2e      	ldr	r2, [pc, #184]	; (8002404 <HAL_GPIO_Init+0x238>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_GPIO_Init+0x238>)
 8002356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_GPIO_Init+0x23c>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a20      	ldr	r2, [pc, #128]	; (800240c <HAL_GPIO_Init+0x240>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d052      	beq.n	8002434 <HAL_GPIO_Init+0x268>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_GPIO_Init+0x244>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_GPIO_Init+0x22e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <HAL_GPIO_Init+0x248>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <HAL_GPIO_Init+0x22a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_GPIO_Init+0x24c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x226>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_GPIO_Init+0x250>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_GPIO_Init+0x254>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <HAL_GPIO_Init+0x258>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x21a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_GPIO_Init+0x25c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x216>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_GPIO_Init+0x260>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x212>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_GPIO_Init+0x264>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x20e>
 80023d6:	2309      	movs	r3, #9
 80023d8:	e02d      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023da:	230a      	movs	r3, #10
 80023dc:	e02b      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023de:	2308      	movs	r3, #8
 80023e0:	e029      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e027      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023e6:	2306      	movs	r3, #6
 80023e8:	e025      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023ea:	2305      	movs	r3, #5
 80023ec:	e023      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023ee:	2304      	movs	r3, #4
 80023f0:	e021      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e01f      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e01d      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e01b      	b.n	8002436 <HAL_GPIO_Init+0x26a>
 80023fe:	bf00      	nop
 8002400:	58000080 	.word	0x58000080
 8002404:	58024400 	.word	0x58024400
 8002408:	58000400 	.word	0x58000400
 800240c:	58020000 	.word	0x58020000
 8002410:	58020400 	.word	0x58020400
 8002414:	58020800 	.word	0x58020800
 8002418:	58020c00 	.word	0x58020c00
 800241c:	58021000 	.word	0x58021000
 8002420:	58021400 	.word	0x58021400
 8002424:	58021800 	.word	0x58021800
 8002428:	58021c00 	.word	0x58021c00
 800242c:	58022000 	.word	0x58022000
 8002430:	58022400 	.word	0x58022400
 8002434:	2300      	movs	r3, #0
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002446:	4938      	ldr	r1, [pc, #224]	; (8002528 <HAL_GPIO_Init+0x35c>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800247a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	3301      	adds	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f ae63 	bne.w	80021e0 <HAL_GPIO_Init+0x14>
  }
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3724      	adds	r7, #36	; 0x24
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	58000400 	.word	0x58000400

0800252c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_PWREx_ConfigSupply+0x70>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d00a      	beq.n	8002556 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_PWREx_ConfigSupply+0x70>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e01f      	b.n	8002592 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e01d      	b.n	8002592 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_PWREx_ConfigSupply+0x70>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 0207 	bic.w	r2, r3, #7
 800255e:	490f      	ldr	r1, [pc, #60]	; (800259c <HAL_PWREx_ConfigSupply+0x70>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4313      	orrs	r3, r2
 8002564:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002566:	f7fe ffd5 	bl	8001514 <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800256c:	e009      	b.n	8002582 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800256e:	f7fe ffd1 	bl	8001514 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257c:	d901      	bls.n	8002582 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_PWREx_ConfigSupply+0x70>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258e:	d1ee      	bne.n	800256e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	58024800 	.word	0x58024800

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f000 bc48 	b.w	8002e44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8088 	beq.w	80026d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b99      	ldr	r3, [pc, #612]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025cc:	4b96      	ldr	r3, [pc, #600]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d007      	beq.n	80025e8 <HAL_RCC_OscConfig+0x48>
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	2b18      	cmp	r3, #24
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0x62>
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d06d      	beq.n	80026d0 <HAL_RCC_OscConfig+0x130>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d169      	bne.n	80026d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f000 bc21 	b.w	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x7a>
 800260c:	4b86      	ldr	r3, [pc, #536]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a85      	ldr	r2, [pc, #532]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x9c>
 8002622:	4b81      	ldr	r3, [pc, #516]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a80      	ldr	r2, [pc, #512]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7d      	ldr	r2, [pc, #500]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0xc0>
 8002646:	4b78      	ldr	r3, [pc, #480]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a77      	ldr	r2, [pc, #476]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b75      	ldr	r3, [pc, #468]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a74      	ldr	r2, [pc, #464]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 8002660:	4b71      	ldr	r3, [pc, #452]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a70      	ldr	r2, [pc, #448]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b6e      	ldr	r3, [pc, #440]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6d      	ldr	r2, [pc, #436]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe ff48 	bl	8001514 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe ff44 	bl	8001514 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e3d4      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xe8>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe ff34 	bl	8001514 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe ff30 	bl	8001514 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e3c0      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026c2:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x110>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80ca 	beq.w	8002874 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e0:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ea:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_RCC_OscConfig+0x166>
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b18      	cmp	r3, #24
 80026fa:	d156      	bne.n	80027aa <HAL_RCC_OscConfig+0x20a>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d151      	bne.n	80027aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002706:	4b48      	ldr	r3, [pc, #288]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x17e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e392      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800271e:	4b42      	ldr	r3, [pc, #264]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0219 	bic.w	r2, r3, #25
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	493f      	ldr	r1, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fef0 	bl	8001514 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe feec 	bl	8001514 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e37c      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	f7fe fee9 	bl	800152c <HAL_GetREVID>
 800275a:	4603      	mov	r3, r0
 800275c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002760:	4293      	cmp	r3, r2
 8002762:	d817      	bhi.n	8002794 <HAL_RCC_OscConfig+0x1f4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d108      	bne.n	800277e <HAL_RCC_OscConfig+0x1de>
 800276c:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002774:	4a2c      	ldr	r2, [pc, #176]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277c:	e07a      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	031b      	lsls	r3, r3, #12
 800278c:	4926      	ldr	r1, [pc, #152]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002792:	e06f      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4921      	ldr	r1, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a8:	e064      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d047      	beq.n	8002842 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0219 	bic.w	r2, r3, #25
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	491a      	ldr	r1, [pc, #104]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fea6 	bl	8001514 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fea2 	bl	8001514 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e332      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	f7fe fe9f 	bl	800152c <HAL_GetREVID>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d819      	bhi.n	800282c <HAL_RCC_OscConfig+0x28c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d108      	bne.n	8002812 <HAL_RCC_OscConfig+0x272>
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280e:	6053      	str	r3, [r2, #4]
 8002810:	e030      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	031b      	lsls	r3, r3, #12
 8002820:	4901      	ldr	r1, [pc, #4]	; (8002828 <HAL_RCC_OscConfig+0x288>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
 8002826:	e025      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
 8002828:	58024400 	.word	0x58024400
 800282c:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	4997      	ldr	r1, [pc, #604]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
 8002840:	e018      	b.n	8002874 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002842:	4b95      	ldr	r3, [pc, #596]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a94      	ldr	r2, [pc, #592]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fe61 	bl	8001514 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe fe5d 	bl	8001514 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e2ed      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002868:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a9 	beq.w	80029d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002882:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800288a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800288c:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d007      	beq.n	80028a8 <HAL_RCC_OscConfig+0x308>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b18      	cmp	r3, #24
 800289c:	d13a      	bne.n	8002914 <HAL_RCC_OscConfig+0x374>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d135      	bne.n	8002914 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_OscConfig+0x320>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e2c1      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c0:	f7fe fe34 	bl	800152c <HAL_GetREVID>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d817      	bhi.n	80028fe <HAL_RCC_OscConfig+0x35e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_OscConfig+0x348>
 80028d6:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028de:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e6:	e075      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e8:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	069b      	lsls	r3, r3, #26
 80028f6:	4968      	ldr	r1, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fc:	e06a      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fe:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	4962      	ldr	r1, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002912:	e05f      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d042      	beq.n	80029a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800291c:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fdf4 	bl	8001514 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002930:	f7fe fdf0 	bl	8001514 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e280      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294e:	f7fe fded 	bl	800152c <HAL_GetREVID>
 8002952:	4603      	mov	r3, r0
 8002954:	f241 0203 	movw	r2, #4099	; 0x1003
 8002958:	4293      	cmp	r3, r2
 800295a:	d817      	bhi.n	800298c <HAL_RCC_OscConfig+0x3ec>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	2b20      	cmp	r3, #32
 8002962:	d108      	bne.n	8002976 <HAL_RCC_OscConfig+0x3d6>
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800296c:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800296e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002972:	6053      	str	r3, [r2, #4]
 8002974:	e02e      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	069b      	lsls	r3, r3, #26
 8002984:	4944      	ldr	r1, [pc, #272]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
 800298a:	e023      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	493f      	ldr	r1, [pc, #252]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fdb1 	bl	8001514 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029b6:	f7fe fdad 	bl	8001514 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e23d      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029c8:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d036      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d019      	beq.n	8002a1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fd8e 	bl	8001514 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fe fd8a 	bl	8001514 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e21a      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x45c>
 8002a1a:	e018      	b.n	8002a4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fd74 	bl	8001514 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe fd70 	bl	8001514 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e200      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d039      	beq.n	8002ace <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fd51 	bl	8001514 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a76:	f7fe fd4d 	bl	8001514 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1dd      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4d6>
 8002a94:	e01b      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a9c:	4b9b      	ldr	r3, [pc, #620]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a9a      	ldr	r2, [pc, #616]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fd34 	bl	8001514 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab0:	f7fe fd30 	bl	8001514 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1c0      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac2:	4b92      	ldr	r3, [pc, #584]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8081 	beq.w	8002bde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002adc:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCC_OscConfig+0x770>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a8b      	ldr	r2, [pc, #556]	; (8002d10 <HAL_RCC_OscConfig+0x770>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fd14 	bl	8001514 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe fd10 	bl	8001514 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1a0      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b02:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_RCC_OscConfig+0x770>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x584>
 8002b16:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a7c      	ldr	r2, [pc, #496]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	e02d      	b.n	8002b80 <HAL_RCC_OscConfig+0x5e0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5a6>
 8002b2c:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a76      	ldr	r2, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a73      	ldr	r2, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x5e0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c8>
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a6e      	ldr	r2, [pc, #440]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a6b      	ldr	r2, [pc, #428]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x5e0>
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a67      	ldr	r2, [pc, #412]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b65      	ldr	r3, [pc, #404]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fcc4 	bl	8001514 <HAL_GetTick>
 8002b8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe fcc0 	bl	8001514 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e14e      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba6:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x5f0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fcae 	bl	8001514 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fcaa 	bl	8001514 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e138      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd2:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 812d 	beq.w	8002e42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002be8:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bf0:	2b18      	cmp	r3, #24
 8002bf2:	f000 80bd 	beq.w	8002d70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 809e 	bne.w	8002d3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a41      	ldr	r2, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fc82 	bl	8001514 <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fc7e 	bl	8001514 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e10e      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c26:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c36:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <HAL_RCC_OscConfig+0x774>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	4931      	ldr	r1, [pc, #196]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	628b      	str	r3, [r1, #40]	; 0x28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	3b01      	subs	r3, #1
 8002c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	3b01      	subs	r3, #1
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	3b01      	subs	r3, #1
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c7c:	4923      	ldr	r1, [pc, #140]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_OscConfig+0x778>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c9a:	00d2      	lsls	r2, r2, #3
 8002c9c:	491b      	ldr	r1, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	f023 020c 	bic.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4917      	ldr	r1, [pc, #92]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	f023 0202 	bic.w	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	4912      	ldr	r1, [pc, #72]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4a10      	ldr	r2, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fc07 	bl	8001514 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d08:	e011      	b.n	8002d2e <HAL_RCC_OscConfig+0x78e>
 8002d0a:	bf00      	nop
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	58024800 	.word	0x58024800
 8002d14:	fffffc0c 	.word	0xfffffc0c
 8002d18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fbfa 	bl	8001514 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e08a      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x77c>
 8002d3a:	e082      	b.n	8002e42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fbe4 	bl	8001514 <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fbe0 	bl	8001514 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e070      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x7b0>
 8002d6e:	e068      	b.n	8002e42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d76:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d031      	beq.n	8002de8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d12a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d122      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d11a      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	0a5b      	lsrs	r3, r3, #9
 8002db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d111      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d108      	bne.n	8002de8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	0e1b      	lsrs	r3, r3, #24
 8002dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e02b      	b.n	8002e44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d01f      	beq.n	8002e42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e0e:	f7fe fb81 	bl	8001514 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e14:	bf00      	nop
 8002e16:	f7fe fb7d 	bl	8001514 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d0f9      	beq.n	8002e16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_RCC_OscConfig+0x8b0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e2e:	00d2      	lsls	r2, r2, #3
 8002e30:	4906      	ldr	r1, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3730      	adds	r7, #48	; 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	ffff0007 	.word	0xffff0007

08002e54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e19c      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b87      	ldr	r3, [pc, #540]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	4985      	ldr	r1, [pc, #532]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b83      	ldr	r3, [pc, #524]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e184      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	4b7b      	ldr	r3, [pc, #492]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb4:	4b78      	ldr	r3, [pc, #480]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4975      	ldr	r1, [pc, #468]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d908      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	496a      	ldr	r1, [pc, #424]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d908      	bls.n	8002f22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	495e      	ldr	r1, [pc, #376]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d908      	bls.n	8002f50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3e:	4b56      	ldr	r3, [pc, #344]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4953      	ldr	r1, [pc, #332]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d908      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f023 020f 	bic.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4947      	ldr	r1, [pc, #284]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d055      	beq.n	8003036 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f8a:	4b43      	ldr	r3, [pc, #268]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4940      	ldr	r1, [pc, #256]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d121      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0f6      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0ea      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0de      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0d6      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f023 0207 	bic.w	r2, r3, #7
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fe fa85 	bl	8001514 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	e00a      	b.n	8003024 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fe fa81 	bl	8001514 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0be      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	429a      	cmp	r2, r3
 8003034:	d1eb      	bne.n	800300e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	429a      	cmp	r2, r3
 8003050:	d208      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f023 020f 	bic.w	r2, r3, #15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	490e      	ldr	r1, [pc, #56]	; (8003098 <HAL_RCC_ClockConfig+0x244>)
 8003060:	4313      	orrs	r3, r2
 8003062:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d214      	bcs.n	800309c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 020f 	bic.w	r2, r3, #15
 800307a:	4906      	ldr	r1, [pc, #24]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <HAL_RCC_ClockConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e086      	b.n	80031a2 <HAL_RCC_ClockConfig+0x34e>
 8003094:	52002000 	.word	0x52002000
 8003098:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d010      	beq.n	80030ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d208      	bcs.n	80030ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	4939      	ldr	r1, [pc, #228]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d208      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	492e      	ldr	r1, [pc, #184]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003110:	429a      	cmp	r2, r3
 8003112:	d208      	bcs.n	8003126 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4922      	ldr	r1, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003122:	4313      	orrs	r3, r2
 8003124:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d010      	beq.n	8003154 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800313e:	429a      	cmp	r2, r3
 8003140:	d208      	bcs.n	8003154 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4917      	ldr	r1, [pc, #92]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003150:	4313      	orrs	r3, r2
 8003152:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003154:	f000 f834 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	4912      	ldr	r1, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x35c>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCC_ClockConfig+0x358>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <HAL_RCC_ClockConfig+0x35c>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x360>)
 800318a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x364>)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x368>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd ff1c 	bl	8000fd4 <HAL_InitTick>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400
 80031b0:	0800c52c 	.word	0x0800c52c
 80031b4:	24000004 	.word	0x24000004
 80031b8:	24000000 	.word	0x24000000
 80031bc:	24000008 	.word	0x24000008

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c6:	4bb3      	ldr	r3, [pc, #716]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	f200 8155 	bhi.w	800347e <HAL_RCC_GetSysClockFreq+0x2be>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003241 	.word	0x08003241
 80031e0:	0800347f 	.word	0x0800347f
 80031e4:	0800347f 	.word	0x0800347f
 80031e8:	0800347f 	.word	0x0800347f
 80031ec:	0800347f 	.word	0x0800347f
 80031f0:	0800347f 	.word	0x0800347f
 80031f4:	0800347f 	.word	0x0800347f
 80031f8:	0800347f 	.word	0x0800347f
 80031fc:	08003267 	.word	0x08003267
 8003200:	0800347f 	.word	0x0800347f
 8003204:	0800347f 	.word	0x0800347f
 8003208:	0800347f 	.word	0x0800347f
 800320c:	0800347f 	.word	0x0800347f
 8003210:	0800347f 	.word	0x0800347f
 8003214:	0800347f 	.word	0x0800347f
 8003218:	0800347f 	.word	0x0800347f
 800321c:	0800326d 	.word	0x0800326d
 8003220:	0800347f 	.word	0x0800347f
 8003224:	0800347f 	.word	0x0800347f
 8003228:	0800347f 	.word	0x0800347f
 800322c:	0800347f 	.word	0x0800347f
 8003230:	0800347f 	.word	0x0800347f
 8003234:	0800347f 	.word	0x0800347f
 8003238:	0800347f 	.word	0x0800347f
 800323c:	08003273 	.word	0x08003273
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003240:	4b94      	ldr	r3, [pc, #592]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800324c:	4b91      	ldr	r3, [pc, #580]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	4a90      	ldr	r2, [pc, #576]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800325e:	e111      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003260:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003262:	61bb      	str	r3, [r7, #24]
      break;
 8003264:	e10e      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003266:	4b8d      	ldr	r3, [pc, #564]	; (800349c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003268:	61bb      	str	r3, [r7, #24]
      break;
 800326a:	e10b      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800326c:	4b8c      	ldr	r3, [pc, #560]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800326e:	61bb      	str	r3, [r7, #24]
      break;
 8003270:	e108      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003272:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800327c:	4b85      	ldr	r3, [pc, #532]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003286:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003288:	4b82      	ldr	r3, [pc, #520]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003292:	4b80      	ldr	r3, [pc, #512]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	08db      	lsrs	r3, r3, #3
 8003298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80e1 	beq.w	8003478 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	f000 8083 	beq.w	80033c4 <HAL_RCC_GetSysClockFreq+0x204>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	f200 80a1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x248>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x114>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d056      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032d2:	e099      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d4:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02d      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032e0:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	08db      	lsrs	r3, r3, #3
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	4a6b      	ldr	r2, [pc, #428]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330a:	4b62      	ldr	r3, [pc, #392]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331a:	ed97 6a02 	vldr	s12, [r7, #8]
 800331e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800332e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800333a:	e087      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003362:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800337e:	e065      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b40      	ldr	r3, [pc, #256]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033c2:	e043      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d6:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003406:	e021      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 6a02 	vldr	s12, [r7, #8]
 800342e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800344a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	0a5b      	lsrs	r3, r3, #9
 8003452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003456:	3301      	adds	r3, #1
 8003458:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003464:	edd7 6a07 	vldr	s13, [r7, #28]
 8003468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003470:	ee17 3a90 	vmov	r3, s15
 8003474:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003480:	61bb      	str	r3, [r7, #24]
      break;
 8003482:	bf00      	nop
  }

  return sysclockfreq;
 8003484:	69bb      	ldr	r3, [r7, #24]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	58024400 	.word	0x58024400
 8003498:	03d09000 	.word	0x03d09000
 800349c:	003d0900 	.word	0x003d0900
 80034a0:	017d7840 	.word	0x017d7840
 80034a4:	46000000 	.word	0x46000000
 80034a8:	4c742400 	.word	0x4c742400
 80034ac:	4a742400 	.word	0x4a742400
 80034b0:	4bbebc20 	.word	0x4bbebc20

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ba:	f7ff fe81 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_GetHCLKFreq+0x50>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	490f      	ldr	r1, [pc, #60]	; (8003508 <HAL_RCC_GetHCLKFreq+0x54>)
 80034cc:	5ccb      	ldrb	r3, [r1, r3]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_RCC_GetHCLKFreq+0x50>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_GetHCLKFreq+0x54>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_RCC_GetHCLKFreq+0x58>)
 80034f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <HAL_RCC_GetHCLKFreq+0x58>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	58024400 	.word	0x58024400
 8003508:	0800c52c 	.word	0x0800c52c
 800350c:	24000004 	.word	0x24000004
 8003510:	24000000 	.word	0x24000000

08003514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003518:	f7ff ffcc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 800351c:	4602      	mov	r2, r0
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCC_GetPCLK1Freq+0x28>)
 800352a:	5ccb      	ldrb	r3, [r1, r3]
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	58024400 	.word	0x58024400
 800353c:	0800c52c 	.word	0x0800c52c

08003540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003544:	f7ff ffb6 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	58024400 	.word	0x58024400
 8003568:	0800c52c 	.word	0x0800c52c

0800356c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	223f      	movs	r2, #63	; 0x3f
 800357a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f003 0207 	and.w	r2, r3, #7
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_RCC_GetClockConfig+0x7c>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_GetClockConfig+0x80>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	58024400 	.word	0x58024400
 80035ec:	52002000 	.word	0x52002000

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b0ca      	sub	sp, #296	; 0x128
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003602:	2300      	movs	r3, #0
 8003604:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003614:	2500      	movs	r5, #0
 8003616:	ea54 0305 	orrs.w	r3, r4, r5
 800361a:	d049      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003622:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003626:	d02f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800362c:	d828      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800362e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003632:	d01a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003638:	d822      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800363e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003642:	d007      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003644:	e01c      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003646:	4bb8      	ldr	r3, [pc, #736]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4ab7      	ldr	r2, [pc, #732]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003652:	e01a      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003658:	3308      	adds	r3, #8
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fc8f 	bl	8004f80 <RCCEx_PLL2_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366e:	3328      	adds	r3, #40	; 0x28
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fd36 	bl	80050e4 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003692:	4ba5      	ldr	r3, [pc, #660]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a0:	4aa1      	ldr	r2, [pc, #644]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	6513      	str	r3, [r2, #80]	; 0x50
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80036bc:	f04f 0900 	mov.w	r9, #0
 80036c0:	ea58 0309 	orrs.w	r3, r8, r9
 80036c4:	d047      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d82a      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036ed 	.word	0x080036ed
 80036dc:	080036fb 	.word	0x080036fb
 80036e0:	08003711 	.word	0x08003711
 80036e4:	0800372f 	.word	0x0800372f
 80036e8:	0800372f 	.word	0x0800372f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a8d      	ldr	r2, [pc, #564]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f8:	e01a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fe:	3308      	adds	r3, #8
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fc3c 	bl	8004f80 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800370e:	e00f      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003714:	3328      	adds	r3, #40	; 0x28
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fce3 	bl	80050e4 <RCCEx_PLL3_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800372e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003738:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	f023 0107 	bic.w	r1, r3, #7
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4a78      	ldr	r2, [pc, #480]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6513      	str	r3, [r2, #80]	; 0x50
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003762:	f04f 0b00 	mov.w	fp, #0
 8003766:	ea5a 030b 	orrs.w	r3, sl, fp
 800376a:	d04c      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003776:	d030      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377c:	d829      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800377e:	2bc0      	cmp	r3, #192	; 0xc0
 8003780:	d02d      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003782:	2bc0      	cmp	r3, #192	; 0xc0
 8003784:	d825      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d018      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	d821      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d007      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003796:	e01c      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a62      	ldr	r2, [pc, #392]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037a4:	e01c      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037aa:	3308      	adds	r3, #8
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fbe6 	bl	8004f80 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037ba:	e011      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	3328      	adds	r3, #40	; 0x28
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 fc8d 	bl	80050e4 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	4a4c      	ldr	r2, [pc, #304]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	; 0x50
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003812:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800381c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d053      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800382e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003832:	d035      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003838:	d82e      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800383a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800383e:	d031      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003840:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003844:	d828      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384a:	d01a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003850:	d822      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800385a:	d007      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800385c:	e01c      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385e:	4b32      	ldr	r3, [pc, #200]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	4a31      	ldr	r2, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800386a:	e01c      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003870:	3308      	adds	r3, #8
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fb83 	bl	8004f80 <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003880:	e011      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	3328      	adds	r3, #40	; 0x28
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 fc2a 	bl	80050e4 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003896:	e006      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800389e:	e002      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6593      	str	r3, [r2, #88]	; 0x58
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80038da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80038e8:	460b      	mov	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	d056      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fa:	d038      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003900:	d831      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003902:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003906:	d034      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003908:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800390c:	d82b      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800390e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003912:	d01d      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003918:	d825      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800391e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003924:	e01f      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4ba2      	ldr	r3, [pc, #648]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4aa1      	ldr	r2, [pc, #644]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003938:	e01c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393e:	3308      	adds	r3, #8
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fb1c 	bl	8004f80 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003954:	3328      	adds	r3, #40	; 0x28
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fbc3 	bl	80050e4 <RCCEx_PLL3_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800397c:	4b8e      	ldr	r3, [pc, #568]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003988:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800398c:	4a8a      	ldr	r2, [pc, #552]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398e:	430b      	orrs	r3, r1
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
 8003992:	e003      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80039a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80039b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d03a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	2b30      	cmp	r3, #48	; 0x30
 80039c4:	d01f      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039c6:	2b30      	cmp	r3, #48	; 0x30
 80039c8:	d819      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d00c      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d815      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d019      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d111      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039da:	4b77      	ldr	r3, [pc, #476]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	4a76      	ldr	r2, [pc, #472]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039e6:	e011      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ec:	3308      	adds	r3, #8
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fac5 	bl	8004f80 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a14:	4b68      	ldr	r3, [pc, #416]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	4a65      	ldr	r2, [pc, #404]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a28:	e003      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d051      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a5c:	d035      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a62:	d82e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a68:	d031      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a6e:	d828      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a74:	d01a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7a:	d822      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a84:	d007      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a86:	e01c      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fa6e 	bl	8004f80 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aaa:	e011      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab0:	3328      	adds	r3, #40	; 0x28
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fb15 	bl	80050e4 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ad8:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003adc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6513      	str	r3, [r2, #80]	; 0x50
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003b10:	460b      	mov	r3, r1
 8003b12:	4313      	orrs	r3, r2
 8003b14:	d056      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d033      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b26:	d82c      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b2c:	d02f      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b32:	d826      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b38:	d02b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b3e:	d820      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b44:	d012      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b4a:	d81a      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d115      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 fa0e 	bl	8004f80 <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b6a:	e015      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b70:	3328      	adds	r3, #40	; 0x28
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 fab5 	bl	80050e4 <RCCEx_PLL3_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b80:	e00a      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e004      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bae:	4a02      	ldr	r2, [pc, #8]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6513      	str	r3, [r2, #80]	; 0x50
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bb6:	bf00      	nop
 8003bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d055      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf0:	d033      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf6:	d82c      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d02f      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d826      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c08:	d02b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c0e:	d820      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c14:	d012      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1a:	d81a      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d022      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c24:	d115      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f9a6 	bl	8004f80 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e015      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	3328      	adds	r3, #40	; 0x28
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fa4d 	bl	80050e4 <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c50:	e00a      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e004      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c70:	4ba3      	ldr	r3, [pc, #652]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c80:	4a9f      	ldr	r2, [pc, #636]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
 8003c86:	e003      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003caa:	460b      	mov	r3, r1
 8003cac:	4313      	orrs	r3, r2
 8003cae:	d037      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cba:	d00e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc0:	d816      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cca:	d111      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ccc:	4b8c      	ldr	r3, [pc, #560]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4a8b      	ldr	r2, [pc, #556]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cd8:	e00f      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cde:	3308      	adds	r3, #8
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f94c 	bl	8004f80 <RCCEx_PLL2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cee:	e004      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d02:	4b7f      	ldr	r3, [pc, #508]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	4a7b      	ldr	r2, [pc, #492]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6513      	str	r3, [r2, #80]	; 0x50
 8003d16:	e003      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d30:	2300      	movs	r3, #0
 8003d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d039      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d81c      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d61 	.word	0x08003d61
 8003d58:	08003d6f 	.word	0x08003d6f
 8003d5c:	08003d8d 	.word	0x08003d8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4b67      	ldr	r3, [pc, #412]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4a66      	ldr	r2, [pc, #408]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d6c:	e00f      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d72:	3308      	adds	r3, #8
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 f902 	bl	8004f80 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d96:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	f023 0103 	bic.w	r1, r3, #3
 8003d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da4:	4a56      	ldr	r2, [pc, #344]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f000 809f 	beq.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd6:	4b4b      	ldr	r3, [pc, #300]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4a      	ldr	r2, [pc, #296]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de2:	f7fd fb97 	bl	8001514 <HAL_GetTick>
 8003de6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dea:	e00b      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd fb92 	bl	8001514 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	; 0x64
 8003dfa:	d903      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e02:	e005      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e04:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ed      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d179      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e18:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e24:	4053      	eors	r3, r2
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d015      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e2e:	4b34      	ldr	r3, [pc, #208]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e52:	4a2b      	ldr	r2, [pc, #172]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e66:	d118      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fb54 	bl	8001514 <HAL_GetTick>
 8003e6c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e70:	e00d      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fd fb4f 	bl	8001514 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e7c:	1ad2      	subs	r2, r2, r3
 8003e7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003e8c:	e005      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0eb      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d129      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ec4:	091a      	lsrs	r2, r3, #4
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6113      	str	r3, [r2, #16]
 8003ed0:	e005      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003edc:	6113      	str	r3, [r2, #16]
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eee:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef4:	e00e      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003efa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003efe:	e009      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f00:	58024400 	.word	0x58024400
 8003f04:	58024800 	.word	0x58024800
 8003f08:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 0301 	and.w	r3, r2, #1
 8003f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f000 8089 	beq.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3c:	2b28      	cmp	r3, #40	; 0x28
 8003f3e:	d86b      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08004021 	.word	0x08004021
 8003f4c:	08004019 	.word	0x08004019
 8003f50:	08004019 	.word	0x08004019
 8003f54:	08004019 	.word	0x08004019
 8003f58:	08004019 	.word	0x08004019
 8003f5c:	08004019 	.word	0x08004019
 8003f60:	08004019 	.word	0x08004019
 8003f64:	08004019 	.word	0x08004019
 8003f68:	08003fed 	.word	0x08003fed
 8003f6c:	08004019 	.word	0x08004019
 8003f70:	08004019 	.word	0x08004019
 8003f74:	08004019 	.word	0x08004019
 8003f78:	08004019 	.word	0x08004019
 8003f7c:	08004019 	.word	0x08004019
 8003f80:	08004019 	.word	0x08004019
 8003f84:	08004019 	.word	0x08004019
 8003f88:	08004003 	.word	0x08004003
 8003f8c:	08004019 	.word	0x08004019
 8003f90:	08004019 	.word	0x08004019
 8003f94:	08004019 	.word	0x08004019
 8003f98:	08004019 	.word	0x08004019
 8003f9c:	08004019 	.word	0x08004019
 8003fa0:	08004019 	.word	0x08004019
 8003fa4:	08004019 	.word	0x08004019
 8003fa8:	08004021 	.word	0x08004021
 8003fac:	08004019 	.word	0x08004019
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	08004019 	.word	0x08004019
 8003fbc:	08004019 	.word	0x08004019
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004019 	.word	0x08004019
 8003fd0:	08004019 	.word	0x08004019
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	08004019 	.word	0x08004019
 8003fdc:	08004019 	.word	0x08004019
 8003fe0:	08004019 	.word	0x08004019
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004021 	.word	0x08004021
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 ffc3 	bl	8004f80 <RCCEx_PLL2_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004006:	3328      	adds	r3, #40	; 0x28
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f001 f86a 	bl	80050e4 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800402a:	4bbf      	ldr	r3, [pc, #764]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004038:	4abb      	ldr	r2, [pc, #748]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6553      	str	r3, [r2, #84]	; 0x54
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 0302 	and.w	r3, r2, #2
 8004054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800405e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d041      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406e:	2b05      	cmp	r3, #5
 8004070:	d824      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040c5 	.word	0x080040c5
 800407c:	08004091 	.word	0x08004091
 8004080:	080040a7 	.word	0x080040a7
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040c5 	.word	0x080040c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004094:	3308      	adds	r3, #8
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ff71 	bl	8004f80 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	3328      	adds	r3, #40	; 0x28
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f818 	bl	80050e4 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040ce:	4b96      	ldr	r3, [pc, #600]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f023 0107 	bic.w	r1, r3, #7
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	4a92      	ldr	r2, [pc, #584]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040de:	430b      	orrs	r3, r1
 80040e0:	6553      	str	r3, [r2, #84]	; 0x54
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0304 	and.w	r3, r2, #4
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004102:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	d044      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004114:	2b05      	cmp	r3, #5
 8004116:	d825      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	0800416d 	.word	0x0800416d
 8004124:	08004139 	.word	0x08004139
 8004128:	0800414f 	.word	0x0800414f
 800412c:	0800416d 	.word	0x0800416d
 8004130:	0800416d 	.word	0x0800416d
 8004134:	0800416d 	.word	0x0800416d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413c:	3308      	adds	r3, #8
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 ff1d 	bl	8004f80 <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800414c:	e00f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004152:	3328      	adds	r3, #40	; 0x28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f000 ffc4 	bl	80050e4 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004176:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	f023 0107 	bic.w	r1, r3, #7
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	4a68      	ldr	r2, [pc, #416]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6593      	str	r3, [r2, #88]	; 0x58
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f002 0320 	and.w	r3, r2, #32
 80041a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d055      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c2:	d033      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c8:	d82c      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d02f      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d826      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041da:	d02b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041e0:	d820      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e6:	d012      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ec:	d81a      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d022      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f6:	d115      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fc:	3308      	adds	r3, #8
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 febd 	bl	8004f80 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800420c:	e015      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004212:	3328      	adds	r3, #40	; 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 ff64 	bl	80050e4 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004222:	e00a      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800422a:	e006      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800422c:	bf00      	nop
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004230:	bf00      	nop
 8004232:	e002      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	4a35      	ldr	r2, [pc, #212]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6553      	str	r3, [r2, #84]	; 0x54
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800425e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800426e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004278:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d058      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800428a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800428e:	d033      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004290:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004294:	d82c      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a0:	d826      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a6:	d02b      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ac:	d820      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b2:	d012      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b8:	d81a      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d022      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c2:	d115      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c8:	3308      	adds	r3, #8
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fe57 	bl	8004f80 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042d8:	e015      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042de:	3328      	adds	r3, #40	; 0x28
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fefe 	bl	80050e4 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042ee:	e00a      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042f6:	e006      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042f8:	bf00      	nop
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10e      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431e:	4a02      	ldr	r2, [pc, #8]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004320:	430b      	orrs	r3, r1
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004326:	bf00      	nop
 8004328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004330:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800434a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d055      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800435c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004360:	d033      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004362:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004366:	d82c      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d02f      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004372:	d826      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004374:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004378:	d02b      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800437a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800437e:	d820      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004384:	d012      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438a:	d81a      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d022      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	d115      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439a:	3308      	adds	r3, #8
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fdee 	bl	8004f80 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043aa:	e015      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	3328      	adds	r3, #40	; 0x28
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fe95 	bl	80050e4 <RCCEx_PLL3_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043c0:	e00a      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043e0:	4ba1      	ldr	r3, [pc, #644]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043f0:	4a9d      	ldr	r2, [pc, #628]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 0308 	and.w	r3, r2, #8
 800440c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004416:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800441a:	460b      	mov	r3, r1
 800441c:	4313      	orrs	r3, r2
 800441e:	d01e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	d10c      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fe54 	bl	80050e4 <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004448:	4b87      	ldr	r3, [pc, #540]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004458:	4a83      	ldr	r2, [pc, #524]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f002 0310 	and.w	r3, r2, #16
 800446a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800446e:	2300      	movs	r3, #0
 8004470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004474:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d01e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004490:	3328      	adds	r3, #40	; 0x28
 8004492:	2102      	movs	r1, #2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fe25 	bl	80050e4 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044a6:	4b70      	ldr	r3, [pc, #448]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b6:	4a6c      	ldr	r2, [pc, #432]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d03e      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e8:	d022      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ee:	d81b      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d00b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80044fa:	e015      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	3308      	adds	r3, #8
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fd3b 	bl	8004f80 <RCCEx_PLL2_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004510:	e00f      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	3328      	adds	r3, #40	; 0x28
 8004518:	2102      	movs	r1, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fde2 	bl	80050e4 <RCCEx_PLL3_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004526:	e004      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800452e:	e000      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800453a:	4b4b      	ldr	r3, [pc, #300]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800454a:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6593      	str	r3, [r2, #88]	; 0x58
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004566:	67bb      	str	r3, [r7, #120]	; 0x78
 8004568:	2300      	movs	r3, #0
 800456a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800456c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d03b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004582:	d01f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004588:	d818      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800458a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004594:	d007      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004596:	e011      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a32      	ldr	r2, [pc, #200]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800459e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045a4:	e00f      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	3328      	adds	r3, #40	; 0x28
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fd98 	bl	80050e4 <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045ba:	e004      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045c2:	e000      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ce:	4b26      	ldr	r3, [pc, #152]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	4a22      	ldr	r2, [pc, #136]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6553      	str	r3, [r2, #84]	; 0x54
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045fa:	673b      	str	r3, [r7, #112]	; 0x70
 80045fc:	2300      	movs	r3, #0
 80045fe:	677b      	str	r3, [r7, #116]	; 0x74
 8004600:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004604:	460b      	mov	r3, r1
 8004606:	4313      	orrs	r3, r2
 8004608:	d034      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d007      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004628:	e00e      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800462e:	3308      	adds	r3, #8
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fca4 	bl	8004f80 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800463e:	e003      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465e:	4a02      	ldr	r2, [pc, #8]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004660:	430b      	orrs	r3, r1
 8004662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004680:	66bb      	str	r3, [r7, #104]	; 0x68
 8004682:	2300      	movs	r3, #0
 8004684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004686:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d00c      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004694:	3328      	adds	r3, #40	; 0x28
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fd23 	bl	80050e4 <RCCEx_PLL3_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80046b6:	663b      	str	r3, [r7, #96]	; 0x60
 80046b8:	2300      	movs	r3, #0
 80046ba:	667b      	str	r3, [r7, #100]	; 0x64
 80046bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d038      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d2:	d018      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d8:	d811      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046de:	d014      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e4:	d80b      	bhi.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d106      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f0:	4bc3      	ldr	r3, [pc, #780]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4ac2      	ldr	r2, [pc, #776]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004704:	e004      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800470e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004718:	4bb9      	ldr	r3, [pc, #740]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004728:	4ab5      	ldr	r2, [pc, #724]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472a:	430b      	orrs	r3, r1
 800472c:	6553      	str	r3, [r2, #84]	; 0x54
 800472e:	e003      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004744:	65bb      	str	r3, [r7, #88]	; 0x58
 8004746:	2300      	movs	r3, #0
 8004748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800474a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004754:	4baa      	ldr	r3, [pc, #680]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004762:	4aa7      	ldr	r2, [pc, #668]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004764:	430b      	orrs	r3, r1
 8004766:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004774:	653b      	str	r3, [r7, #80]	; 0x50
 8004776:	2300      	movs	r3, #0
 8004778:	657b      	str	r3, [r7, #84]	; 0x54
 800477a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004784:	4b9e      	ldr	r3, [pc, #632]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004790:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004794:	4a9a      	ldr	r2, [pc, #616]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004796:	430b      	orrs	r3, r1
 8004798:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80047a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a8:	2300      	movs	r3, #0
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047b6:	4b92      	ldr	r3, [pc, #584]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c4:	4a8e      	ldr	r2, [pc, #568]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80047d6:	643b      	str	r3, [r7, #64]	; 0x40
 80047d8:	2300      	movs	r3, #0
 80047da:	647b      	str	r3, [r7, #68]	; 0x44
 80047dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047e6:	4b86      	ldr	r3, [pc, #536]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	4a85      	ldr	r2, [pc, #532]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047f0:	6113      	str	r3, [r2, #16]
 80047f2:	4b83      	ldr	r3, [pc, #524]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f4:	6919      	ldr	r1, [r3, #16]
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047fe:	4a80      	ldr	r2, [pc, #512]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004800:	430b      	orrs	r3, r1
 8004802:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
 8004812:	2300      	movs	r3, #0
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004816:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004820:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	4a74      	ldr	r2, [pc, #464]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004830:	430b      	orrs	r3, r1
 8004832:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
 8004842:	2300      	movs	r3, #0
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
 8004846:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004850:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004860:	4a67      	ldr	r2, [pc, #412]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004862:	430b      	orrs	r3, r1
 8004864:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	2100      	movs	r1, #0
 8004870:	62b9      	str	r1, [r7, #40]	; 0x28
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004878:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800487c:	460b      	mov	r3, r1
 800487e:	4313      	orrs	r3, r2
 8004880:	d011      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004886:	3308      	adds	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb78 	bl	8004f80 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	2100      	movs	r1, #0
 80048b0:	6239      	str	r1, [r7, #32]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
 80048b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c6:	3308      	adds	r3, #8
 80048c8:	2101      	movs	r1, #1
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb58 	bl	8004f80 <RCCEx_PLL2_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	2100      	movs	r1, #0
 80048f0:	61b9      	str	r1, [r7, #24]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d011      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004906:	3308      	adds	r3, #8
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb38 	bl	8004f80 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	2100      	movs	r1, #0
 8004930:	6139      	str	r1, [r7, #16]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800493c:	460b      	mov	r3, r1
 800493e:	4313      	orrs	r3, r2
 8004940:	d011      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004946:	3328      	adds	r3, #40	; 0x28
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fbca 	bl	80050e4 <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	2100      	movs	r1, #0
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d011      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	3328      	adds	r3, #40	; 0x28
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fbaa 	bl	80050e4 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	2100      	movs	r1, #0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	607b      	str	r3, [r7, #4]
 80049b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049bc:	460b      	mov	r3, r1
 80049be:	4313      	orrs	r3, r2
 80049c0:	d011      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	3328      	adds	r3, #40	; 0x28
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb8a 	bl	80050e4 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80049e6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80049fa:	46bd      	mov	sp, r7
 80049fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a00:	58024400 	.word	0x58024400

08004a04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a08:	f7fe fd54 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	091b      	lsrs	r3, r3, #4
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	0800c52c 	.word	0x0800c52c

08004a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	; 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a38:	4ba1      	ldr	r3, [pc, #644]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a42:	4b9f      	ldr	r3, [pc, #636]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	0b1b      	lsrs	r3, r3, #12
 8004a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a4e:	4b9c      	ldr	r3, [pc, #624]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a5a:	4b99      	ldr	r3, [pc, #612]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8111 	beq.w	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	f000 8083 	beq.w	8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	f200 80a1 	bhi.w	8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d056      	beq.n	8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a9a:	e099      	b.n	8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02d      	beq.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aa8:	4b85      	ldr	r3, [pc, #532]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	4a84      	ldr	r2, [pc, #528]	; (8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b02:	e087      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b6a      	ldr	r3, [pc, #424]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b46:	e065      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8a:	e043      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9e:	4b48      	ldr	r3, [pc, #288]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bce:	e021      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c14:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	0a5b      	lsrs	r3, r3, #9
 8004c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c42:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	ee17 2a90 	vmov	r2, s15
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c96:	ee17 2a90 	vmov	r2, s15
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	03d09000 	.word	0x03d09000
 8004cc8:	46000000 	.word	0x46000000
 8004ccc:	4c742400 	.word	0x4c742400
 8004cd0:	4a742400 	.word	0x4a742400
 8004cd4:	4bbebc20 	.word	0x4bbebc20

08004cd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	; 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ce0:	4ba1      	ldr	r3, [pc, #644]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004cea:	4b9f      	ldr	r3, [pc, #636]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	0d1b      	lsrs	r3, r3, #20
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004cf6:	4b9c      	ldr	r3, [pc, #624]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d02:	4b99      	ldr	r3, [pc, #612]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8111 	beq.w	8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f000 8083 	beq.w	8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	f200 80a1 	bhi.w	8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d056      	beq.n	8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d42:	e099      	b.n	8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d44:	4b88      	ldr	r3, [pc, #544]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02d      	beq.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	08db      	lsrs	r3, r3, #3
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	4a84      	ldr	r2, [pc, #528]	; (8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7a:	4b7b      	ldr	r3, [pc, #492]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004daa:	e087      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dee:	e065      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e02:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e32:	e043      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e46:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e76:	e021      	b.n	8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8a:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ebc:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	0a5b      	lsrs	r3, r3, #9
 8004ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee2:	ee17 2a90 	vmov	r2, s15
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004eea:	4b1f      	ldr	r3, [pc, #124]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	0c1b      	lsrs	r3, r3, #16
 8004ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f10:	ee17 2a90 	vmov	r2, s15
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3e:	ee17 2a90 	vmov	r2, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f46:	e008      	b.n	8004f5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
}
 8004f5a:	bf00      	nop
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	03d09000 	.word	0x03d09000
 8004f70:	46000000 	.word	0x46000000
 8004f74:	4c742400 	.word	0x4c742400
 8004f78:	4a742400 	.word	0x4a742400
 8004f7c:	4bbebc20 	.word	0x4bbebc20

08004f80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f8e:	4b53      	ldr	r3, [pc, #332]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d101      	bne.n	8004f9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e099      	b.n	80050d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f9e:	4b4f      	ldr	r3, [pc, #316]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a4e      	ldr	r2, [pc, #312]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004faa:	f7fc fab3 	bl	8001514 <HAL_GetTick>
 8004fae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fb2:	f7fc faaf 	bl	8001514 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e086      	b.n	80050d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fc4:	4b45      	ldr	r3, [pc, #276]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fd0:	4b42      	ldr	r3, [pc, #264]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	493f      	ldr	r1, [pc, #252]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	628b      	str	r3, [r1, #40]	; 0x28
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	025b      	lsls	r3, r3, #9
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	3b01      	subs	r3, #1
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005014:	4931      	ldr	r1, [pc, #196]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	492d      	ldr	r1, [pc, #180]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005028:	4313      	orrs	r3, r2
 800502a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800502c:	4b2b      	ldr	r3, [pc, #172]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	f023 0220 	bic.w	r2, r3, #32
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	4928      	ldr	r1, [pc, #160]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800503e:	4b27      	ldr	r3, [pc, #156]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a26      	ldr	r2, [pc, #152]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005044:	f023 0310 	bic.w	r3, r3, #16
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 800504c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <RCCEx_PLL2_Config+0x160>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	69d2      	ldr	r2, [r2, #28]
 8005056:	00d2      	lsls	r2, r2, #3
 8005058:	4920      	ldr	r1, [pc, #128]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 800505a:	4313      	orrs	r3, r2
 800505c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800505e:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005064:	f043 0310 	orr.w	r3, r3, #16
 8005068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800507a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800507c:	e00f      	b.n	800509e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005084:	4b15      	ldr	r3, [pc, #84]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 800508a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005090:	e005      	b.n	800509e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	4a11      	ldr	r2, [pc, #68]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 8005098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800509c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050aa:	f7fc fa33 	bl	8001514 <HAL_GetTick>
 80050ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050b2:	f7fc fa2f 	bl	8001514 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e006      	b.n	80050d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <RCCEx_PLL2_Config+0x15c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	58024400 	.word	0x58024400
 80050e0:	ffff0007 	.word	0xffff0007

080050e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050f2:	4b53      	ldr	r3, [pc, #332]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d101      	bne.n	8005102 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e099      	b.n	8005236 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005102:	4b4f      	ldr	r3, [pc, #316]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a4e      	ldr	r2, [pc, #312]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510e:	f7fc fa01 	bl	8001514 <HAL_GetTick>
 8005112:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005114:	e008      	b.n	8005128 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005116:	f7fc f9fd 	bl	8001514 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e086      	b.n	8005236 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005128:	4b45      	ldr	r3, [pc, #276]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	051b      	lsls	r3, r3, #20
 8005142:	493f      	ldr	r1, [pc, #252]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	628b      	str	r3, [r1, #40]	; 0x28
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	3b01      	subs	r3, #1
 800514e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	3b01      	subs	r3, #1
 8005158:	025b      	lsls	r3, r3, #9
 800515a:	b29b      	uxth	r3, r3
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	3b01      	subs	r3, #1
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	3b01      	subs	r3, #1
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005178:	4931      	ldr	r1, [pc, #196]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800517e:	4b30      	ldr	r3, [pc, #192]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	492d      	ldr	r1, [pc, #180]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 800518c:	4313      	orrs	r3, r2
 800518e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	4928      	ldr	r1, [pc, #160]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051a2:	4b27      	ldr	r3, [pc, #156]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a26      	ldr	r2, [pc, #152]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <RCCEx_PLL3_Config+0x160>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	69d2      	ldr	r2, [r2, #28]
 80051ba:	00d2      	lsls	r2, r2, #3
 80051bc:	4920      	ldr	r1, [pc, #128]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a19      	ldr	r2, [pc, #100]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051e0:	e00f      	b.n	8005202 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051e8:	4b15      	ldr	r3, [pc, #84]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051f4:	e005      	b.n	8005202 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051f6:	4b12      	ldr	r3, [pc, #72]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	4a11      	ldr	r2, [pc, #68]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005200:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a0e      	ldr	r2, [pc, #56]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fc f981 	bl	8001514 <HAL_GetTick>
 8005212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005214:	e008      	b.n	8005228 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005216:	f7fc f97d 	bl	8001514 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e006      	b.n	8005236 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <RCCEx_PLL3_Config+0x15c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	ffff0007 	.word	0xffff0007

08005248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e049      	b.n	80052ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb fdc2 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 fc26 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e054      	b.n	80053ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a26      	ldr	r2, [pc, #152]	; (80053c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d022      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533a:	d01d      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <HAL_TIM_Base_Start_IT+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d115      	bne.n	80053a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005380:	4013      	ands	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d015      	beq.n	80053b6 <HAL_TIM_Base_Start_IT+0xbe>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d011      	beq.n	80053b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a2:	e008      	b.n	80053b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e000      	b.n	80053b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40001800 	.word	0x40001800
 80053e0:	40014000 	.word	0x40014000
 80053e4:	00010007 	.word	0x00010007

080053e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_OC_Start_IT+0x28>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e03c      	b.n	800548a <HAL_TIM_OC_Start_IT+0xa2>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d109      	bne.n	800542a <HAL_TIM_OC_Start_IT+0x42>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e02f      	b.n	800548a <HAL_TIM_OC_Start_IT+0xa2>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d109      	bne.n	8005444 <HAL_TIM_OC_Start_IT+0x5c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	e022      	b.n	800548a <HAL_TIM_OC_Start_IT+0xa2>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b0c      	cmp	r3, #12
 8005448:	d109      	bne.n	800545e <HAL_TIM_OC_Start_IT+0x76>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	bf14      	ite	ne
 8005456:	2301      	movne	r3, #1
 8005458:	2300      	moveq	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	e015      	b.n	800548a <HAL_TIM_OC_Start_IT+0xa2>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b10      	cmp	r3, #16
 8005462:	d109      	bne.n	8005478 <HAL_TIM_OC_Start_IT+0x90>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e008      	b.n	800548a <HAL_TIM_OC_Start_IT+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0ec      	b.n	800566c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_OC_Start_IT+0xba>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a0:	e023      	b.n	80054ea <HAL_TIM_OC_Start_IT+0x102>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_OC_Start_IT+0xca>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b0:	e01b      	b.n	80054ea <HAL_TIM_OC_Start_IT+0x102>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_OC_Start_IT+0xda>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c0:	e013      	b.n	80054ea <HAL_TIM_OC_Start_IT+0x102>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b0c      	cmp	r3, #12
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_OC_Start_IT+0xea>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d0:	e00b      	b.n	80054ea <HAL_TIM_OC_Start_IT+0x102>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_OC_Start_IT+0xfa>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e0:	e003      	b.n	80054ea <HAL_TIM_OC_Start_IT+0x102>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d841      	bhi.n	8005574 <HAL_TIM_OC_Start_IT+0x18c>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_TIM_OC_Start_IT+0x110>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005575 	.word	0x08005575
 8005500:	08005575 	.word	0x08005575
 8005504:	08005575 	.word	0x08005575
 8005508:	0800553f 	.word	0x0800553f
 800550c:	08005575 	.word	0x08005575
 8005510:	08005575 	.word	0x08005575
 8005514:	08005575 	.word	0x08005575
 8005518:	08005551 	.word	0x08005551
 800551c:	08005575 	.word	0x08005575
 8005520:	08005575 	.word	0x08005575
 8005524:	08005575 	.word	0x08005575
 8005528:	08005563 	.word	0x08005563
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0202 	orr.w	r2, r2, #2
 800553a:	60da      	str	r2, [r3, #12]
      break;
 800553c:	e01d      	b.n	800557a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0204 	orr.w	r2, r2, #4
 800554c:	60da      	str	r2, [r3, #12]
      break;
 800554e:	e014      	b.n	800557a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0208 	orr.w	r2, r2, #8
 800555e:	60da      	str	r2, [r3, #12]
      break;
 8005560:	e00b      	b.n	800557a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0210 	orr.w	r2, r2, #16
 8005570:	60da      	str	r2, [r3, #12]
      break;
 8005572:	e002      	b.n	800557a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	bf00      	nop
  }

  if (status == HAL_OK)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d174      	bne.n	800566a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2201      	movs	r2, #1
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fbe9 	bl	8005d60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a38      	ldr	r2, [pc, #224]	; (8005674 <HAL_TIM_OC_Start_IT+0x28c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_OC_Start_IT+0x1d8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a36      	ldr	r2, [pc, #216]	; (8005678 <HAL_TIM_OC_Start_IT+0x290>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_OC_Start_IT+0x1d8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a35      	ldr	r2, [pc, #212]	; (800567c <HAL_TIM_OC_Start_IT+0x294>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_OC_Start_IT+0x1d8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a33      	ldr	r2, [pc, #204]	; (8005680 <HAL_TIM_OC_Start_IT+0x298>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_OC_Start_IT+0x1d8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a32      	ldr	r2, [pc, #200]	; (8005684 <HAL_TIM_OC_Start_IT+0x29c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <HAL_TIM_OC_Start_IT+0x1dc>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_TIM_OC_Start_IT+0x1de>
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a25      	ldr	r2, [pc, #148]	; (8005674 <HAL_TIM_OC_Start_IT+0x28c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d022      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ec:	d01d      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a25      	ldr	r2, [pc, #148]	; (8005688 <HAL_TIM_OC_Start_IT+0x2a0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a23      	ldr	r2, [pc, #140]	; (800568c <HAL_TIM_OC_Start_IT+0x2a4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a22      	ldr	r2, [pc, #136]	; (8005690 <HAL_TIM_OC_Start_IT+0x2a8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a19      	ldr	r2, [pc, #100]	; (8005678 <HAL_TIM_OC_Start_IT+0x290>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <HAL_TIM_OC_Start_IT+0x2ac>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_OC_Start_IT+0x242>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_TIM_OC_Start_IT+0x294>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d115      	bne.n	8005656 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_TIM_OC_Start_IT+0x2b0>)
 8005632:	4013      	ands	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d015      	beq.n	8005668 <HAL_TIM_OC_Start_IT+0x280>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d011      	beq.n	8005668 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005654:	e008      	b.n	8005668 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e000      	b.n	800566a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40010000 	.word	0x40010000
 8005678:	40010400 	.word	0x40010400
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400
 8005684:	40014800 	.word	0x40014800
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40001800 	.word	0x40001800
 8005698:	00010007 	.word	0x00010007

0800569c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d020      	beq.n	8005700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01b      	beq.n	8005700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0202 	mvn.w	r2, #2
 80056d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f9d8 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 80056ec:	e005      	b.n	80056fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fa ff78 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9db 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d020      	beq.n	800574c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0204 	mvn.w	r2, #4
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f9b2 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fa ff52 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f9b5 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d020      	beq.n	8005798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0208 	mvn.w	r2, #8
 8005768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2204      	movs	r2, #4
 800576e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f98c 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fa ff2c 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f98f 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d020      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0210 	mvn.w	r2, #16
 80057b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2208      	movs	r2, #8
 80057ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f966 	bl	8005a9c <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fa ff06 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f969 	bl	8005ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0201 	mvn.w	r2, #1
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fb fac2 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800582e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fb53 	bl	8005edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb4b 	bl	8005ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00c      	beq.n	800587e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f923 	bl	8005ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00c      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f06f 0220 	mvn.w	r2, #32
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb13 	bl	8005ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0dc      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x1d6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4b6a      	ldr	r3, [pc, #424]	; (8005a8c <HAL_TIM_ConfigClockSource+0x1e0>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a64      	ldr	r2, [pc, #400]	; (8005a90 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f000 80a9 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005904:	4a62      	ldr	r2, [pc, #392]	; (8005a90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f200 80ae 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800590c:	4a61      	ldr	r2, [pc, #388]	; (8005a94 <HAL_TIM_ConfigClockSource+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	f000 80a1 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005914:	4a5f      	ldr	r2, [pc, #380]	; (8005a94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	f200 80a6 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800591c:	4a5e      	ldr	r2, [pc, #376]	; (8005a98 <HAL_TIM_ConfigClockSource+0x1ec>)
 800591e:	4293      	cmp	r3, r2
 8005920:	f000 8099 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005924:	4a5c      	ldr	r2, [pc, #368]	; (8005a98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005926:	4293      	cmp	r3, r2
 8005928:	f200 809e 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800592c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005930:	f000 8091 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005934:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005938:	f200 8096 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800593c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005940:	f000 8089 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005948:	f200 808e 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800594c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005950:	d03e      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0x124>
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005956:	f200 8087 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	f000 8086 	beq.w	8005a6e <HAL_TIM_ConfigClockSource+0x1c2>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d87f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005968:	2b70      	cmp	r3, #112	; 0x70
 800596a:	d01a      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xf6>
 800596c:	2b70      	cmp	r3, #112	; 0x70
 800596e:	d87b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005970:	2b60      	cmp	r3, #96	; 0x60
 8005972:	d050      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x16a>
 8005974:	2b60      	cmp	r3, #96	; 0x60
 8005976:	d877      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005978:	2b50      	cmp	r3, #80	; 0x50
 800597a:	d03c      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x14a>
 800597c:	2b50      	cmp	r3, #80	; 0x50
 800597e:	d873      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d058      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x18a>
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d86f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d064      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d86b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d060      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d867      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05c      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 800599c:	2b10      	cmp	r3, #16
 800599e:	d05a      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x1aa>
 80059a0:	e062      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f000 f9b5 	bl	8005d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	609a      	str	r2, [r3, #8]
      break;
 80059ce:	e04f      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6899      	ldr	r1, [r3, #8]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f000 f99e 	bl	8005d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f2:	609a      	str	r2, [r3, #8]
      break;
 80059f4:	e03c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 f90e 	bl	8005c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2150      	movs	r1, #80	; 0x50
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f968 	bl	8005ce4 <TIM_ITRx_SetConfig>
      break;
 8005a14:	e02c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 f92d 	bl	8005c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2160      	movs	r1, #96	; 0x60
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f958 	bl	8005ce4 <TIM_ITRx_SetConfig>
      break;
 8005a34:	e01c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 f8ee 	bl	8005c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2140      	movs	r1, #64	; 0x40
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f948 	bl	8005ce4 <TIM_ITRx_SetConfig>
      break;
 8005a54:	e00c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f000 f93f 	bl	8005ce4 <TIM_ITRx_SetConfig>
      break;
 8005a66:	e003      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	ffceff88 	.word	0xffceff88
 8005a90:	00100040 	.word	0x00100040
 8005a94:	00100030 	.word	0x00100030
 8005a98:	00100020 	.word	0x00100020

08005a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a46      	ldr	r2, [pc, #280]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a43      	ldr	r2, [pc, #268]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a42      	ldr	r2, [pc, #264]	; (8005c0c <TIM_Base_SetConfig+0x134>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a41      	ldr	r2, [pc, #260]	; (8005c10 <TIM_Base_SetConfig+0x138>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a40      	ldr	r2, [pc, #256]	; (8005c14 <TIM_Base_SetConfig+0x13c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a35      	ldr	r2, [pc, #212]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01f      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d01b      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a32      	ldr	r2, [pc, #200]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d017      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a31      	ldr	r2, [pc, #196]	; (8005c0c <TIM_Base_SetConfig+0x134>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a30      	ldr	r2, [pc, #192]	; (8005c10 <TIM_Base_SetConfig+0x138>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	; (8005c14 <TIM_Base_SetConfig+0x13c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2e      	ldr	r2, [pc, #184]	; (8005c18 <TIM_Base_SetConfig+0x140>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2d      	ldr	r2, [pc, #180]	; (8005c1c <TIM_Base_SetConfig+0x144>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <TIM_Base_SetConfig+0x148>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00f      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <TIM_Base_SetConfig+0x13c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_Base_SetConfig+0x140>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <TIM_Base_SetConfig+0x144>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a15      	ldr	r2, [pc, #84]	; (8005c20 <TIM_Base_SetConfig+0x148>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d103      	bne.n	8005bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d105      	bne.n	8005bf6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40010400 	.word	0x40010400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 030a 	bic.w	r3, r3, #10
 8005c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f023 0210 	bic.w	r2, r3, #16
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <TIM_ITRx_SetConfig+0x38>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f043 0307 	orr.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	609a      	str	r2, [r3, #8]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	ffcfff8f 	.word	0xffcfff8f

08005d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	2201      	movs	r2, #1
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1a      	ldr	r2, [r3, #32]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1a      	ldr	r2, [r3, #32]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e06d      	b.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a30      	ldr	r2, [pc, #192]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2f      	ldr	r2, [pc, #188]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d108      	bne.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a20      	ldr	r2, [pc, #128]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d022      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e36:	d01d      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a16      	ldr	r2, [pc, #88]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d10c      	bne.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40001800 	.word	0x40001800
 8005ec4:	40014000 	.word	0x40014000

08005ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e042      	b.n	8005f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fa ffe1 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	; 0x24
 8005f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 f9b6 	bl	80072c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fc4b 	bl	80067f0 <UART_SetConfig>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e01b      	b.n	8005f9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fa35 	bl	8007404 <UART_CheckIdleState>
 8005f9a:	4603      	mov	r3, r0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d137      	bne.n	800602c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Receive_IT+0x24>
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e030      	b.n	800602e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a18      	ldr	r2, [pc, #96]	; (8006038 <HAL_UART_Receive_IT+0x94>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01f      	beq.n	800601c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d018      	beq.n	800601c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	69f9      	ldr	r1, [r7, #28]
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	61bb      	str	r3, [r7, #24]
   return(result);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	461a      	mov	r2, r3
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fb06 	bl	8007634 <UART_Start_Receive_IT>
 8006028:	4603      	mov	r3, r0
 800602a:	e000      	b.n	800602e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800602c:	2302      	movs	r3, #2
  }
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	58000c00 	.word	0x58000c00

0800603c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b0ba      	sub	sp, #232	; 0xe8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006066:	f640 030f 	movw	r3, #2063	; 0x80f
 800606a:	4013      	ands	r3, r2
 800606c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d11b      	bne.n	80060b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8377 	beq.w	8006794 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
      }
      return;
 80060ae:	e371      	b.n	8006794 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8123 	beq.w	8006300 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80060be:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <HAL_UART_IRQHandler+0x2b8>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060ca:	4b8b      	ldr	r3, [pc, #556]	; (80062f8 <HAL_UART_IRQHandler+0x2bc>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8116 	beq.w	8006300 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d011      	beq.n	8006104 <HAL_UART_IRQHandler+0xc8>
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f043 0201 	orr.w	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d011      	beq.n	8006134 <HAL_UART_IRQHandler+0xf8>
 8006110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2202      	movs	r2, #2
 8006122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612a:	f043 0204 	orr.w	r2, r3, #4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d011      	beq.n	8006164 <HAL_UART_IRQHandler+0x128>
 8006140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2204      	movs	r2, #4
 8006152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f043 0202 	orr.w	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d105      	bne.n	8006188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800617c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006180:	4b5c      	ldr	r3, [pc, #368]	; (80062f4 <HAL_UART_IRQHandler+0x2b8>)
 8006182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2208      	movs	r2, #8
 800618e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f043 0208 	orr.w	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d012      	beq.n	80061d2 <HAL_UART_IRQHandler+0x196>
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f043 0220 	orr.w	r2, r3, #32
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 82dd 	beq.w	8006798 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d013      	beq.n	8006212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d105      	bne.n	8006202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d005      	beq.n	8006236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800622a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800622e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006232:	2b00      	cmp	r3, #0
 8006234:	d054      	beq.n	80062e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fb1e 	bl	8007878 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d146      	bne.n	80062d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800627a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800628e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1d9      	bne.n	800624a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d017      	beq.n	80062d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_UART_IRQHandler+0x2c0>)
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fb fd45 	bl	8001d40 <HAL_DMA_Abort_IT>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d019      	beq.n	80062f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80062ca:	4610      	mov	r0, r2
 80062cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ce:	e00f      	b.n	80062f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fa77 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d6:	e00b      	b.n	80062f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fa73 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062de:	e007      	b.n	80062f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa6f 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80062ee:	e253      	b.n	8006798 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	bf00      	nop
    return;
 80062f2:	e251      	b.n	8006798 <HAL_UART_IRQHandler+0x75c>
 80062f4:	10000001 	.word	0x10000001
 80062f8:	04000120 	.word	0x04000120
 80062fc:	08007945 	.word	0x08007945

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006304:	2b01      	cmp	r3, #1
 8006306:	f040 81e7 	bne.w	80066d8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 81e0 	beq.w	80066d8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 81d9 	beq.w	80066d8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2210      	movs	r2, #16
 800632c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	f040 8151 	bne.w	80065e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a96      	ldr	r2, [pc, #600]	; (80065a0 <HAL_UART_IRQHandler+0x564>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d068      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a93      	ldr	r2, [pc, #588]	; (80065a4 <HAL_UART_IRQHandler+0x568>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d061      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a91      	ldr	r2, [pc, #580]	; (80065a8 <HAL_UART_IRQHandler+0x56c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d05a      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a8e      	ldr	r2, [pc, #568]	; (80065ac <HAL_UART_IRQHandler+0x570>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d053      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a8c      	ldr	r2, [pc, #560]	; (80065b0 <HAL_UART_IRQHandler+0x574>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d04c      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a89      	ldr	r2, [pc, #548]	; (80065b4 <HAL_UART_IRQHandler+0x578>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d045      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a87      	ldr	r2, [pc, #540]	; (80065b8 <HAL_UART_IRQHandler+0x57c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d03e      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a84      	ldr	r2, [pc, #528]	; (80065bc <HAL_UART_IRQHandler+0x580>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d037      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a82      	ldr	r2, [pc, #520]	; (80065c0 <HAL_UART_IRQHandler+0x584>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d030      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7f      	ldr	r2, [pc, #508]	; (80065c4 <HAL_UART_IRQHandler+0x588>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d029      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7d      	ldr	r2, [pc, #500]	; (80065c8 <HAL_UART_IRQHandler+0x58c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7a      	ldr	r2, [pc, #488]	; (80065cc <HAL_UART_IRQHandler+0x590>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01b      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a78      	ldr	r2, [pc, #480]	; (80065d0 <HAL_UART_IRQHandler+0x594>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d014      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a75      	ldr	r2, [pc, #468]	; (80065d4 <HAL_UART_IRQHandler+0x598>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00d      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a73      	ldr	r2, [pc, #460]	; (80065d8 <HAL_UART_IRQHandler+0x59c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d006      	beq.n	800641e <HAL_UART_IRQHandler+0x3e2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a70      	ldr	r2, [pc, #448]	; (80065dc <HAL_UART_IRQHandler+0x5a0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d106      	bne.n	800642c <HAL_UART_IRQHandler+0x3f0>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	b29b      	uxth	r3, r3
 800642a:	e005      	b.n	8006438 <HAL_UART_IRQHandler+0x3fc>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	b29b      	uxth	r3, r3
 8006438:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800643c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 81ab 	beq.w	800679c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800644c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006450:	429a      	cmp	r2, r3
 8006452:	f080 81a3 	bcs.w	800679c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800645c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646c:	f000 8087 	beq.w	800657e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800648c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800649a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800649e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1da      	bne.n	8006470 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3308      	adds	r3, #8
 80064c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e1      	bne.n	80064ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800650c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800651a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800651c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e3      	bne.n	80064f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800654a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654c:	f023 0310 	bic.w	r3, r3, #16
 8006550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800655e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006560:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800656c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e4      	bne.n	800653c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006578:	4618      	mov	r0, r3
 800657a:	f7fb f8c3 	bl	8001704 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006590:	b29b      	uxth	r3, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	b29b      	uxth	r3, r3
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f91d 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800659e:	e0fd      	b.n	800679c <HAL_UART_IRQHandler+0x760>
 80065a0:	40020010 	.word	0x40020010
 80065a4:	40020028 	.word	0x40020028
 80065a8:	40020040 	.word	0x40020040
 80065ac:	40020058 	.word	0x40020058
 80065b0:	40020070 	.word	0x40020070
 80065b4:	40020088 	.word	0x40020088
 80065b8:	400200a0 	.word	0x400200a0
 80065bc:	400200b8 	.word	0x400200b8
 80065c0:	40020410 	.word	0x40020410
 80065c4:	40020428 	.word	0x40020428
 80065c8:	40020440 	.word	0x40020440
 80065cc:	40020458 	.word	0x40020458
 80065d0:	40020470 	.word	0x40020470
 80065d4:	40020488 	.word	0x40020488
 80065d8:	400204a0 	.word	0x400204a0
 80065dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80cf 	beq.w	80067a0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80ca 	beq.w	80067a0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e4      	bne.n	800660c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	623b      	str	r3, [r7, #32]
   return(result);
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	4b55      	ldr	r3, [pc, #340]	; (80067ac <HAL_UART_IRQHandler+0x770>)
 8006656:	4013      	ands	r3, r2
 8006658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006666:	633a      	str	r2, [r7, #48]	; 0x30
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800666c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e3      	bne.n	8006642 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	60fb      	str	r3, [r7, #12]
   return(result);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	69b9      	ldr	r1, [r7, #24]
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	617b      	str	r3, [r7, #20]
   return(result);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e4      	bne.n	800668e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f881 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d6:	e063      	b.n	80067a0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <HAL_UART_IRQHandler+0x6c6>
 80066e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fe80 	bl	8008400 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006700:	e051      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d014      	beq.n	8006738 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d008      	beq.n	8006738 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800672a:	2b00      	cmp	r3, #0
 800672c:	d03a      	beq.n	80067a4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
    }
    return;
 8006736:	e035      	b.n	80067a4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <HAL_UART_IRQHandler+0x71c>
 8006744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f90d 	bl	8007970 <UART_EndTransmit_IT>
    return;
 8006756:	e026      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d009      	beq.n	8006778 <HAL_UART_IRQHandler+0x73c>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 fe59 	bl	8008428 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006776:	e016      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_UART_IRQHandler+0x76a>
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006788:	2b00      	cmp	r3, #0
 800678a:	da0c      	bge.n	80067a6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fe41 	bl	8008414 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006792:	e008      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006794:	bf00      	nop
 8006796:	e006      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
    return;
 8006798:	bf00      	nop
 800679a:	e004      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800679c:	bf00      	nop
 800679e:	e002      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
      return;
 80067a0:	bf00      	nop
 80067a2:	e000      	b.n	80067a6 <HAL_UART_IRQHandler+0x76a>
    return;
 80067a4:	bf00      	nop
  }
}
 80067a6:	37e8      	adds	r7, #232	; 0xe8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	effffffe 	.word	0xeffffffe

080067b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067f4:	b092      	sub	sp, #72	; 0x48
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	431a      	orrs	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	4313      	orrs	r3, r2
 8006816:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4bbe      	ldr	r3, [pc, #760]	; (8006b18 <UART_SetConfig+0x328>)
 8006820:	4013      	ands	r3, r2
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006828:	430b      	orrs	r3, r1
 800682a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4ab3      	ldr	r2, [pc, #716]	; (8006b1c <UART_SetConfig+0x32c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d004      	beq.n	800685c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006858:	4313      	orrs	r3, r2
 800685a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	4baf      	ldr	r3, [pc, #700]	; (8006b20 <UART_SetConfig+0x330>)
 8006864:	4013      	ands	r3, r2
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800686c:	430b      	orrs	r3, r1
 800686e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	f023 010f 	bic.w	r1, r3, #15
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4aa6      	ldr	r2, [pc, #664]	; (8006b24 <UART_SetConfig+0x334>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d177      	bne.n	8006980 <UART_SetConfig+0x190>
 8006890:	4ba5      	ldr	r3, [pc, #660]	; (8006b28 <UART_SetConfig+0x338>)
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006898:	2b28      	cmp	r3, #40	; 0x28
 800689a:	d86d      	bhi.n	8006978 <UART_SetConfig+0x188>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0xb4>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	08006949 	.word	0x08006949
 80068a8:	08006979 	.word	0x08006979
 80068ac:	08006979 	.word	0x08006979
 80068b0:	08006979 	.word	0x08006979
 80068b4:	08006979 	.word	0x08006979
 80068b8:	08006979 	.word	0x08006979
 80068bc:	08006979 	.word	0x08006979
 80068c0:	08006979 	.word	0x08006979
 80068c4:	08006951 	.word	0x08006951
 80068c8:	08006979 	.word	0x08006979
 80068cc:	08006979 	.word	0x08006979
 80068d0:	08006979 	.word	0x08006979
 80068d4:	08006979 	.word	0x08006979
 80068d8:	08006979 	.word	0x08006979
 80068dc:	08006979 	.word	0x08006979
 80068e0:	08006979 	.word	0x08006979
 80068e4:	08006959 	.word	0x08006959
 80068e8:	08006979 	.word	0x08006979
 80068ec:	08006979 	.word	0x08006979
 80068f0:	08006979 	.word	0x08006979
 80068f4:	08006979 	.word	0x08006979
 80068f8:	08006979 	.word	0x08006979
 80068fc:	08006979 	.word	0x08006979
 8006900:	08006979 	.word	0x08006979
 8006904:	08006961 	.word	0x08006961
 8006908:	08006979 	.word	0x08006979
 800690c:	08006979 	.word	0x08006979
 8006910:	08006979 	.word	0x08006979
 8006914:	08006979 	.word	0x08006979
 8006918:	08006979 	.word	0x08006979
 800691c:	08006979 	.word	0x08006979
 8006920:	08006979 	.word	0x08006979
 8006924:	08006969 	.word	0x08006969
 8006928:	08006979 	.word	0x08006979
 800692c:	08006979 	.word	0x08006979
 8006930:	08006979 	.word	0x08006979
 8006934:	08006979 	.word	0x08006979
 8006938:	08006979 	.word	0x08006979
 800693c:	08006979 	.word	0x08006979
 8006940:	08006979 	.word	0x08006979
 8006944:	08006971 	.word	0x08006971
 8006948:	2301      	movs	r3, #1
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e222      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006950:	2304      	movs	r3, #4
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e21e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006958:	2308      	movs	r3, #8
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e21a      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006960:	2310      	movs	r3, #16
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006966:	e216      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006968:	2320      	movs	r3, #32
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696e:	e212      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006970:	2340      	movs	r3, #64	; 0x40
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006976:	e20e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697e:	e20a      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a69      	ldr	r2, [pc, #420]	; (8006b2c <UART_SetConfig+0x33c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d130      	bne.n	80069ec <UART_SetConfig+0x1fc>
 800698a:	4b67      	ldr	r3, [pc, #412]	; (8006b28 <UART_SetConfig+0x338>)
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b05      	cmp	r3, #5
 8006994:	d826      	bhi.n	80069e4 <UART_SetConfig+0x1f4>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0x1ac>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069b5 	.word	0x080069b5
 80069a0:	080069bd 	.word	0x080069bd
 80069a4:	080069c5 	.word	0x080069c5
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069dd 	.word	0x080069dd
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ba:	e1ec      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069bc:	2304      	movs	r3, #4
 80069be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c2:	e1e8      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069c4:	2308      	movs	r3, #8
 80069c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ca:	e1e4      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069cc:	2310      	movs	r3, #16
 80069ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d2:	e1e0      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069d4:	2320      	movs	r3, #32
 80069d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069da:	e1dc      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069dc:	2340      	movs	r3, #64	; 0x40
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e2:	e1d8      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069e4:	2380      	movs	r3, #128	; 0x80
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ea:	e1d4      	b.n	8006d96 <UART_SetConfig+0x5a6>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a4f      	ldr	r2, [pc, #316]	; (8006b30 <UART_SetConfig+0x340>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d130      	bne.n	8006a58 <UART_SetConfig+0x268>
 80069f6:	4b4c      	ldr	r3, [pc, #304]	; (8006b28 <UART_SetConfig+0x338>)
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d826      	bhi.n	8006a50 <UART_SetConfig+0x260>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x218>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a21 	.word	0x08006a21
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a31 	.word	0x08006a31
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a49 	.word	0x08006a49
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a26:	e1b6      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2e:	e1b2      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a36:	e1ae      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3e:	e1aa      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a40:	2320      	movs	r3, #32
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a46:	e1a6      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4e:	e1a2      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a50:	2380      	movs	r3, #128	; 0x80
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a56:	e19e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a35      	ldr	r2, [pc, #212]	; (8006b34 <UART_SetConfig+0x344>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d130      	bne.n	8006ac4 <UART_SetConfig+0x2d4>
 8006a62:	4b31      	ldr	r3, [pc, #196]	; (8006b28 <UART_SetConfig+0x338>)
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d826      	bhi.n	8006abc <UART_SetConfig+0x2cc>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <UART_SetConfig+0x284>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006a8d 	.word	0x08006a8d
 8006a78:	08006a95 	.word	0x08006a95
 8006a7c:	08006a9d 	.word	0x08006a9d
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006aad 	.word	0x08006aad
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a92:	e180      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9a:	e17c      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa2:	e178      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aaa:	e174      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006aac:	2320      	movs	r3, #32
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab2:	e170      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aba:	e16c      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac2:	e168      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <UART_SetConfig+0x348>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d142      	bne.n	8006b54 <UART_SetConfig+0x364>
 8006ace:	4b16      	ldr	r3, [pc, #88]	; (8006b28 <UART_SetConfig+0x338>)
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d838      	bhi.n	8006b4c <UART_SetConfig+0x35c>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0x2f0>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af9 	.word	0x08006af9
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b3d 	.word	0x08006b3d
 8006af4:	08006b45 	.word	0x08006b45
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e14a      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e146      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e142      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e13e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b18:	cfff69f3 	.word	0xcfff69f3
 8006b1c:	58000c00 	.word	0x58000c00
 8006b20:	11fff4ff 	.word	0x11fff4ff
 8006b24:	40011000 	.word	0x40011000
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	40004400 	.word	0x40004400
 8006b30:	40004800 	.word	0x40004800
 8006b34:	40004c00 	.word	0x40004c00
 8006b38:	40005000 	.word	0x40005000
 8006b3c:	2320      	movs	r3, #32
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b42:	e128      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4a:	e124      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b52:	e120      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4acb      	ldr	r2, [pc, #812]	; (8006e88 <UART_SetConfig+0x698>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d176      	bne.n	8006c4c <UART_SetConfig+0x45c>
 8006b5e:	4bcb      	ldr	r3, [pc, #812]	; (8006e8c <UART_SetConfig+0x69c>)
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b66:	2b28      	cmp	r3, #40	; 0x28
 8006b68:	d86c      	bhi.n	8006c44 <UART_SetConfig+0x454>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <UART_SetConfig+0x380>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006c15 	.word	0x08006c15
 8006b74:	08006c45 	.word	0x08006c45
 8006b78:	08006c45 	.word	0x08006c45
 8006b7c:	08006c45 	.word	0x08006c45
 8006b80:	08006c45 	.word	0x08006c45
 8006b84:	08006c45 	.word	0x08006c45
 8006b88:	08006c45 	.word	0x08006c45
 8006b8c:	08006c45 	.word	0x08006c45
 8006b90:	08006c1d 	.word	0x08006c1d
 8006b94:	08006c45 	.word	0x08006c45
 8006b98:	08006c45 	.word	0x08006c45
 8006b9c:	08006c45 	.word	0x08006c45
 8006ba0:	08006c45 	.word	0x08006c45
 8006ba4:	08006c45 	.word	0x08006c45
 8006ba8:	08006c45 	.word	0x08006c45
 8006bac:	08006c45 	.word	0x08006c45
 8006bb0:	08006c25 	.word	0x08006c25
 8006bb4:	08006c45 	.word	0x08006c45
 8006bb8:	08006c45 	.word	0x08006c45
 8006bbc:	08006c45 	.word	0x08006c45
 8006bc0:	08006c45 	.word	0x08006c45
 8006bc4:	08006c45 	.word	0x08006c45
 8006bc8:	08006c45 	.word	0x08006c45
 8006bcc:	08006c45 	.word	0x08006c45
 8006bd0:	08006c2d 	.word	0x08006c2d
 8006bd4:	08006c45 	.word	0x08006c45
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006c45 	.word	0x08006c45
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006c45 	.word	0x08006c45
 8006be8:	08006c45 	.word	0x08006c45
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c35 	.word	0x08006c35
 8006bf4:	08006c45 	.word	0x08006c45
 8006bf8:	08006c45 	.word	0x08006c45
 8006bfc:	08006c45 	.word	0x08006c45
 8006c00:	08006c45 	.word	0x08006c45
 8006c04:	08006c45 	.word	0x08006c45
 8006c08:	08006c45 	.word	0x08006c45
 8006c0c:	08006c45 	.word	0x08006c45
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e0bc      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e0b8      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2a:	e0b4      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c32:	e0b0      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c34:	2320      	movs	r3, #32
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3a:	e0ac      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c42:	e0a8      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e0a4      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a8f      	ldr	r2, [pc, #572]	; (8006e90 <UART_SetConfig+0x6a0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d130      	bne.n	8006cb8 <UART_SetConfig+0x4c8>
 8006c56:	4b8d      	ldr	r3, [pc, #564]	; (8006e8c <UART_SetConfig+0x69c>)
 8006c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d826      	bhi.n	8006cb0 <UART_SetConfig+0x4c0>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0x478>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	08006c91 	.word	0x08006c91
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006ca1 	.word	0x08006ca1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e086      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e082      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e07e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e07a      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e076      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e072      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb6:	e06e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a75      	ldr	r2, [pc, #468]	; (8006e94 <UART_SetConfig+0x6a4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d130      	bne.n	8006d24 <UART_SetConfig+0x534>
 8006cc2:	4b72      	ldr	r3, [pc, #456]	; (8006e8c <UART_SetConfig+0x69c>)
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d826      	bhi.n	8006d1c <UART_SetConfig+0x52c>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0x4e4>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ced 	.word	0x08006ced
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d15 	.word	0x08006d15
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e050      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e04c      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e048      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e044      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e040      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e03c      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d1c:	2380      	movs	r3, #128	; 0x80
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d22:	e038      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a5b      	ldr	r2, [pc, #364]	; (8006e98 <UART_SetConfig+0x6a8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d130      	bne.n	8006d90 <UART_SetConfig+0x5a0>
 8006d2e:	4b57      	ldr	r3, [pc, #348]	; (8006e8c <UART_SetConfig+0x69c>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d826      	bhi.n	8006d88 <UART_SetConfig+0x598>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <UART_SetConfig+0x550>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d59 	.word	0x08006d59
 8006d44:	08006d61 	.word	0x08006d61
 8006d48:	08006d69 	.word	0x08006d69
 8006d4c:	08006d71 	.word	0x08006d71
 8006d50:	08006d79 	.word	0x08006d79
 8006d54:	08006d81 	.word	0x08006d81
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e01a      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e016      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e012      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e00e      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d78:	2320      	movs	r3, #32
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e00a      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d80:	2340      	movs	r3, #64	; 0x40
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e006      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8e:	e002      	b.n	8006d96 <UART_SetConfig+0x5a6>
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3f      	ldr	r2, [pc, #252]	; (8006e98 <UART_SetConfig+0x6a8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	f040 80f8 	bne.w	8006f92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006da2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	dc46      	bgt.n	8006e38 <UART_SetConfig+0x648>
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	f2c0 8082 	blt.w	8006eb4 <UART_SetConfig+0x6c4>
 8006db0:	3b02      	subs	r3, #2
 8006db2:	2b1e      	cmp	r3, #30
 8006db4:	d87e      	bhi.n	8006eb4 <UART_SetConfig+0x6c4>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <UART_SetConfig+0x5cc>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e3f 	.word	0x08006e3f
 8006dc0:	08006eb5 	.word	0x08006eb5
 8006dc4:	08006e47 	.word	0x08006e47
 8006dc8:	08006eb5 	.word	0x08006eb5
 8006dcc:	08006eb5 	.word	0x08006eb5
 8006dd0:	08006eb5 	.word	0x08006eb5
 8006dd4:	08006e57 	.word	0x08006e57
 8006dd8:	08006eb5 	.word	0x08006eb5
 8006ddc:	08006eb5 	.word	0x08006eb5
 8006de0:	08006eb5 	.word	0x08006eb5
 8006de4:	08006eb5 	.word	0x08006eb5
 8006de8:	08006eb5 	.word	0x08006eb5
 8006dec:	08006eb5 	.word	0x08006eb5
 8006df0:	08006eb5 	.word	0x08006eb5
 8006df4:	08006e67 	.word	0x08006e67
 8006df8:	08006eb5 	.word	0x08006eb5
 8006dfc:	08006eb5 	.word	0x08006eb5
 8006e00:	08006eb5 	.word	0x08006eb5
 8006e04:	08006eb5 	.word	0x08006eb5
 8006e08:	08006eb5 	.word	0x08006eb5
 8006e0c:	08006eb5 	.word	0x08006eb5
 8006e10:	08006eb5 	.word	0x08006eb5
 8006e14:	08006eb5 	.word	0x08006eb5
 8006e18:	08006eb5 	.word	0x08006eb5
 8006e1c:	08006eb5 	.word	0x08006eb5
 8006e20:	08006eb5 	.word	0x08006eb5
 8006e24:	08006eb5 	.word	0x08006eb5
 8006e28:	08006eb5 	.word	0x08006eb5
 8006e2c:	08006eb5 	.word	0x08006eb5
 8006e30:	08006eb5 	.word	0x08006eb5
 8006e34:	08006ea7 	.word	0x08006ea7
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d037      	beq.n	8006eac <UART_SetConfig+0x6bc>
 8006e3c:	e03a      	b.n	8006eb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e3e:	f7fd fde1 	bl	8004a04 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e44:	e03c      	b.n	8006ec0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fd fdf0 	bl	8004a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e54:	e034      	b.n	8006ec0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e56:	f107 0318 	add.w	r3, r7, #24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd ff3c 	bl	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e64:	e02c      	b.n	8006ec0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <UART_SetConfig+0x69c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d016      	beq.n	8006ea0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <UART_SetConfig+0x69c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <UART_SetConfig+0x6ac>)
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e84:	e01c      	b.n	8006ec0 <UART_SetConfig+0x6d0>
 8006e86:	bf00      	nop
 8006e88:	40011400 	.word	0x40011400
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	40007800 	.word	0x40007800
 8006e94:	40007c00 	.word	0x40007c00
 8006e98:	58000c00 	.word	0x58000c00
 8006e9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ea0:	4b9d      	ldr	r3, [pc, #628]	; (8007118 <UART_SetConfig+0x928>)
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea4:	e00c      	b.n	8006ec0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ea6:	4b9d      	ldr	r3, [pc, #628]	; (800711c <UART_SetConfig+0x92c>)
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eaa:	e009      	b.n	8006ec0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb2:	e005      	b.n	8006ec0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ebe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 81de 	beq.w	8007284 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	4a94      	ldr	r2, [pc, #592]	; (8007120 <UART_SetConfig+0x930>)
 8006ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d305      	bcc.n	8006ef8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006efe:	e1c1      	b.n	8007284 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f02:	2200      	movs	r2, #0
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	60fa      	str	r2, [r7, #12]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	4a84      	ldr	r2, [pc, #528]	; (8007120 <UART_SetConfig+0x930>)
 8006f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2200      	movs	r2, #0
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f22:	f7f9 f9dd 	bl	80002e0 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	020b      	lsls	r3, r1, #8
 8006f38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f3c:	0202      	lsls	r2, r0, #8
 8006f3e:	6979      	ldr	r1, [r7, #20]
 8006f40:	6849      	ldr	r1, [r1, #4]
 8006f42:	0849      	lsrs	r1, r1, #1
 8006f44:	2000      	movs	r0, #0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4605      	mov	r5, r0
 8006f4a:	eb12 0804 	adds.w	r8, r2, r4
 8006f4e:	eb43 0905 	adc.w	r9, r3, r5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	469a      	mov	sl, r3
 8006f5a:	4693      	mov	fp, r2
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	465b      	mov	r3, fp
 8006f60:	4640      	mov	r0, r8
 8006f62:	4649      	mov	r1, r9
 8006f64:	f7f9 f9bc 	bl	80002e0 <__aeabi_uldivmod>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d308      	bcc.n	8006f8a <UART_SetConfig+0x79a>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f7e:	d204      	bcs.n	8006f8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f86:	60da      	str	r2, [r3, #12]
 8006f88:	e17c      	b.n	8007284 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f90:	e178      	b.n	8007284 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9a:	f040 80c5 	bne.w	8007128 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	dc48      	bgt.n	8007038 <UART_SetConfig+0x848>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	db7b      	blt.n	80070a2 <UART_SetConfig+0x8b2>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d879      	bhi.n	80070a2 <UART_SetConfig+0x8b2>
 8006fae:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <UART_SetConfig+0x7c4>)
 8006fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb4:	0800703f 	.word	0x0800703f
 8006fb8:	08007047 	.word	0x08007047
 8006fbc:	080070a3 	.word	0x080070a3
 8006fc0:	080070a3 	.word	0x080070a3
 8006fc4:	0800704f 	.word	0x0800704f
 8006fc8:	080070a3 	.word	0x080070a3
 8006fcc:	080070a3 	.word	0x080070a3
 8006fd0:	080070a3 	.word	0x080070a3
 8006fd4:	0800705f 	.word	0x0800705f
 8006fd8:	080070a3 	.word	0x080070a3
 8006fdc:	080070a3 	.word	0x080070a3
 8006fe0:	080070a3 	.word	0x080070a3
 8006fe4:	080070a3 	.word	0x080070a3
 8006fe8:	080070a3 	.word	0x080070a3
 8006fec:	080070a3 	.word	0x080070a3
 8006ff0:	080070a3 	.word	0x080070a3
 8006ff4:	0800706f 	.word	0x0800706f
 8006ff8:	080070a3 	.word	0x080070a3
 8006ffc:	080070a3 	.word	0x080070a3
 8007000:	080070a3 	.word	0x080070a3
 8007004:	080070a3 	.word	0x080070a3
 8007008:	080070a3 	.word	0x080070a3
 800700c:	080070a3 	.word	0x080070a3
 8007010:	080070a3 	.word	0x080070a3
 8007014:	080070a3 	.word	0x080070a3
 8007018:	080070a3 	.word	0x080070a3
 800701c:	080070a3 	.word	0x080070a3
 8007020:	080070a3 	.word	0x080070a3
 8007024:	080070a3 	.word	0x080070a3
 8007028:	080070a3 	.word	0x080070a3
 800702c:	080070a3 	.word	0x080070a3
 8007030:	080070a3 	.word	0x080070a3
 8007034:	08007095 	.word	0x08007095
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d02e      	beq.n	800709a <UART_SetConfig+0x8aa>
 800703c:	e031      	b.n	80070a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703e:	f7fc fa69 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 8007042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007044:	e033      	b.n	80070ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007046:	f7fc fa7b 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 800704a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800704c:	e02f      	b.n	80070ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd fcec 	bl	8004a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800705c:	e027      	b.n	80070ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800705e:	f107 0318 	add.w	r3, r7, #24
 8007062:	4618      	mov	r0, r3
 8007064:	f7fd fe38 	bl	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800706c:	e01f      	b.n	80070ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706e:	4b2d      	ldr	r3, [pc, #180]	; (8007124 <UART_SetConfig+0x934>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d009      	beq.n	800708e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800707a:	4b2a      	ldr	r3, [pc, #168]	; (8007124 <UART_SetConfig+0x934>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	08db      	lsrs	r3, r3, #3
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	4a24      	ldr	r2, [pc, #144]	; (8007118 <UART_SetConfig+0x928>)
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800708c:	e00f      	b.n	80070ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <UART_SetConfig+0x928>)
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007092:	e00c      	b.n	80070ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007094:	4b21      	ldr	r3, [pc, #132]	; (800711c <UART_SetConfig+0x92c>)
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007098:	e009      	b.n	80070ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070a0:	e005      	b.n	80070ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80070ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80e7 	beq.w	8007284 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	4a19      	ldr	r2, [pc, #100]	; (8007120 <UART_SetConfig+0x930>)
 80070bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	005a      	lsls	r2, r3, #1
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	441a      	add	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	2b0f      	cmp	r3, #15
 80070e0:	d916      	bls.n	8007110 <UART_SetConfig+0x920>
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d212      	bcs.n	8007110 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f023 030f 	bic.w	r3, r3, #15
 80070f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b29a      	uxth	r2, r3
 8007100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007102:	4313      	orrs	r3, r2
 8007104:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e0b9      	b.n	8007284 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007116:	e0b5      	b.n	8007284 <UART_SetConfig+0xa94>
 8007118:	03d09000 	.word	0x03d09000
 800711c:	003d0900 	.word	0x003d0900
 8007120:	0800c53c 	.word	0x0800c53c
 8007124:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007128:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800712c:	2b20      	cmp	r3, #32
 800712e:	dc49      	bgt.n	80071c4 <UART_SetConfig+0x9d4>
 8007130:	2b00      	cmp	r3, #0
 8007132:	db7c      	blt.n	800722e <UART_SetConfig+0xa3e>
 8007134:	2b20      	cmp	r3, #32
 8007136:	d87a      	bhi.n	800722e <UART_SetConfig+0xa3e>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <UART_SetConfig+0x950>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	080071cb 	.word	0x080071cb
 8007144:	080071d3 	.word	0x080071d3
 8007148:	0800722f 	.word	0x0800722f
 800714c:	0800722f 	.word	0x0800722f
 8007150:	080071db 	.word	0x080071db
 8007154:	0800722f 	.word	0x0800722f
 8007158:	0800722f 	.word	0x0800722f
 800715c:	0800722f 	.word	0x0800722f
 8007160:	080071eb 	.word	0x080071eb
 8007164:	0800722f 	.word	0x0800722f
 8007168:	0800722f 	.word	0x0800722f
 800716c:	0800722f 	.word	0x0800722f
 8007170:	0800722f 	.word	0x0800722f
 8007174:	0800722f 	.word	0x0800722f
 8007178:	0800722f 	.word	0x0800722f
 800717c:	0800722f 	.word	0x0800722f
 8007180:	080071fb 	.word	0x080071fb
 8007184:	0800722f 	.word	0x0800722f
 8007188:	0800722f 	.word	0x0800722f
 800718c:	0800722f 	.word	0x0800722f
 8007190:	0800722f 	.word	0x0800722f
 8007194:	0800722f 	.word	0x0800722f
 8007198:	0800722f 	.word	0x0800722f
 800719c:	0800722f 	.word	0x0800722f
 80071a0:	0800722f 	.word	0x0800722f
 80071a4:	0800722f 	.word	0x0800722f
 80071a8:	0800722f 	.word	0x0800722f
 80071ac:	0800722f 	.word	0x0800722f
 80071b0:	0800722f 	.word	0x0800722f
 80071b4:	0800722f 	.word	0x0800722f
 80071b8:	0800722f 	.word	0x0800722f
 80071bc:	0800722f 	.word	0x0800722f
 80071c0:	08007221 	.word	0x08007221
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d02e      	beq.n	8007226 <UART_SetConfig+0xa36>
 80071c8:	e031      	b.n	800722e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ca:	f7fc f9a3 	bl	8003514 <HAL_RCC_GetPCLK1Freq>
 80071ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071d0:	e033      	b.n	800723a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d2:	f7fc f9b5 	bl	8003540 <HAL_RCC_GetPCLK2Freq>
 80071d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071d8:	e02f      	b.n	800723a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd fc26 	bl	8004a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e8:	e027      	b.n	800723a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ea:	f107 0318 	add.w	r3, r7, #24
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fd fd72 	bl	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f8:	e01f      	b.n	800723a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071fa:	4b2d      	ldr	r3, [pc, #180]	; (80072b0 <UART_SetConfig+0xac0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007206:	4b2a      	ldr	r3, [pc, #168]	; (80072b0 <UART_SetConfig+0xac0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	4a28      	ldr	r2, [pc, #160]	; (80072b4 <UART_SetConfig+0xac4>)
 8007212:	fa22 f303 	lsr.w	r3, r2, r3
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007218:	e00f      	b.n	800723a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800721a:	4b26      	ldr	r3, [pc, #152]	; (80072b4 <UART_SetConfig+0xac4>)
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721e:	e00c      	b.n	800723a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <UART_SetConfig+0xac8>)
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007224:	e009      	b.n	800723a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800722c:	e005      	b.n	800723a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007238:	bf00      	nop
    }

    if (pclk != 0U)
 800723a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d021      	beq.n	8007284 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	4a1d      	ldr	r2, [pc, #116]	; (80072bc <UART_SetConfig+0xacc>)
 8007246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724a:	461a      	mov	r2, r3
 800724c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	441a      	add	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d909      	bls.n	800727e <UART_SetConfig+0xa8e>
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d205      	bcs.n	800727e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	b29a      	uxth	r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60da      	str	r2, [r3, #12]
 800727c:	e002      	b.n	8007284 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2201      	movs	r2, #1
 8007288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2201      	movs	r2, #1
 8007290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80072a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3748      	adds	r7, #72	; 0x48
 80072a8:	46bd      	mov	sp, r7
 80072aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ae:	bf00      	nop
 80072b0:	58024400 	.word	0x58024400
 80072b4:	03d09000 	.word	0x03d09000
 80072b8:	003d0900 	.word	0x003d0900
 80072bc:	0800c53c 	.word	0x0800c53c

080072c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01a      	beq.n	80073d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073be:	d10a      	bne.n	80073d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	605a      	str	r2, [r3, #4]
  }
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b098      	sub	sp, #96	; 0x60
 8007408:	af02      	add	r7, sp, #8
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007414:	f7fa f87e 	bl	8001514 <HAL_GetTick>
 8007418:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b08      	cmp	r3, #8
 8007426:	d12f      	bne.n	8007488 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007430:	2200      	movs	r2, #0
 8007432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f88e 	bl	8007558 <UART_WaitOnFlagUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d022      	beq.n	8007488 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007456:	653b      	str	r3, [r7, #80]	; 0x50
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007460:	647b      	str	r3, [r7, #68]	; 0x44
 8007462:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e063      	b.n	8007550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0304 	and.w	r3, r3, #4
 8007492:	2b04      	cmp	r3, #4
 8007494:	d149      	bne.n	800752a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007496:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800749e:	2200      	movs	r2, #0
 80074a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f857 	bl	8007558 <UART_WaitOnFlagUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d03c      	beq.n	800752a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	623b      	str	r3, [r7, #32]
   return(result);
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ce:	633b      	str	r3, [r7, #48]	; 0x30
 80074d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e6      	bne.n	80074b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007502:	61fa      	str	r2, [r7, #28]
 8007504:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	69b9      	ldr	r1, [r7, #24]
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	617b      	str	r3, [r7, #20]
   return(result);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e012      	b.n	8007550 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3758      	adds	r7, #88	; 0x58
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007568:	e04f      	b.n	800760a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007570:	d04b      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007572:	f7f9 ffcf 	bl	8001514 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <UART_WaitOnFlagUntilTimeout+0x30>
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e04e      	b.n	800762a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d037      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0xb2>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d034      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0xb2>
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d031      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d110      	bne.n	80075d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2208      	movs	r2, #8
 80075ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f95b 	bl	8007878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2208      	movs	r2, #8
 80075c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e029      	b.n	800762a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e4:	d111      	bne.n	800760a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f941 	bl	8007878 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e00f      	b.n	800762a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	4013      	ands	r3, r2
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	429a      	cmp	r2, r3
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	429a      	cmp	r2, r3
 8007626:	d0a0      	beq.n	800756a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007634:	b480      	push	{r7}
 8007636:	b0a3      	sub	sp, #140	; 0x8c
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007666:	d10e      	bne.n	8007686 <UART_Start_Receive_IT+0x52>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <UART_Start_Receive_IT+0x48>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800767a:	e02d      	b.n	80076d8 <UART_Start_Receive_IT+0xa4>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	22ff      	movs	r2, #255	; 0xff
 8007680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007684:	e028      	b.n	80076d8 <UART_Start_Receive_IT+0xa4>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10d      	bne.n	80076aa <UART_Start_Receive_IT+0x76>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d104      	bne.n	80076a0 <UART_Start_Receive_IT+0x6c>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	22ff      	movs	r2, #255	; 0xff
 800769a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800769e:	e01b      	b.n	80076d8 <UART_Start_Receive_IT+0xa4>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	227f      	movs	r2, #127	; 0x7f
 80076a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076a8:	e016      	b.n	80076d8 <UART_Start_Receive_IT+0xa4>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b2:	d10d      	bne.n	80076d0 <UART_Start_Receive_IT+0x9c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <UART_Start_Receive_IT+0x92>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	227f      	movs	r2, #127	; 0x7f
 80076c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076c4:	e008      	b.n	80076d8 <UART_Start_Receive_IT+0xa4>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	223f      	movs	r2, #63	; 0x3f
 80076ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80076ce:	e003      	b.n	80076d8 <UART_Start_Receive_IT+0xa4>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2222      	movs	r2, #34	; 0x22
 80076e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80076f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800770c:	673a      	str	r2, [r7, #112]	; 0x70
 800770e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007712:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800771a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e3      	bne.n	80076e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007728:	d14f      	bne.n	80077ca <UART_Start_Receive_IT+0x196>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	429a      	cmp	r2, r3
 8007734:	d349      	bcc.n	80077ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773e:	d107      	bne.n	8007750 <UART_Start_Receive_IT+0x11c>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a47      	ldr	r2, [pc, #284]	; (8007868 <UART_Start_Receive_IT+0x234>)
 800774c:	675a      	str	r2, [r3, #116]	; 0x74
 800774e:	e002      	b.n	8007756 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a46      	ldr	r2, [pc, #280]	; (800786c <UART_Start_Receive_IT+0x238>)
 8007754:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01a      	beq.n	8007794 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800776c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007782:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007786:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800778e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e4      	bne.n	800775e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80077b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <UART_Start_Receive_IT+0x160>
 80077c8:	e046      	b.n	8007858 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d2:	d107      	bne.n	80077e4 <UART_Start_Receive_IT+0x1b0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a24      	ldr	r2, [pc, #144]	; (8007870 <UART_Start_Receive_IT+0x23c>)
 80077e0:	675a      	str	r2, [r3, #116]	; 0x74
 80077e2:	e002      	b.n	80077ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4a23      	ldr	r2, [pc, #140]	; (8007874 <UART_Start_Receive_IT+0x240>)
 80077e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d019      	beq.n	8007826 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007806:	677b      	str	r3, [r7, #116]	; 0x74
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
 8007812:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_Start_Receive_IT+0x1be>
 8007824:	e018      	b.n	8007858 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	613b      	str	r3, [r7, #16]
   return(result);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f043 0320 	orr.w	r3, r3, #32
 800783a:	67bb      	str	r3, [r7, #120]	; 0x78
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007844:	623b      	str	r3, [r7, #32]
 8007846:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	69f9      	ldr	r1, [r7, #28]
 800784a:	6a3a      	ldr	r2, [r7, #32]
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	61bb      	str	r3, [r7, #24]
   return(result);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e6      	bne.n	8007826 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	378c      	adds	r7, #140	; 0x8c
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	08008099 	.word	0x08008099
 800786c:	08007d39 	.word	0x08007d39
 8007870:	08007b81 	.word	0x08007b81
 8007874:	080079c9 	.word	0x080079c9

08007878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b095      	sub	sp, #84	; 0x54
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789e:	643b      	str	r3, [r7, #64]	; 0x40
 80078a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <UART_EndRxTransfer+0xc8>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d118      	bne.n	8007920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f023 0310 	bic.w	r3, r3, #16
 8007902:	647b      	str	r3, [r7, #68]	; 0x44
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790c:	61bb      	str	r3, [r7, #24]
 800790e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	613b      	str	r3, [r7, #16]
   return(result);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e6      	bne.n	80078ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007934:	bf00      	nop
 8007936:	3754      	adds	r7, #84	; 0x54
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	effffffe 	.word	0xeffffffe

08007944 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7fe ff2e 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007968:	bf00      	nop
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	60bb      	str	r3, [r7, #8]
   return(result);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	61bb      	str	r3, [r7, #24]
 8007998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6979      	ldr	r1, [r7, #20]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	613b      	str	r3, [r7, #16]
   return(result);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e6      	bne.n	8007978 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fe fef9 	bl	80067b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079be:	bf00      	nop
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b09c      	sub	sp, #112	; 0x70
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e0:	2b22      	cmp	r3, #34	; 0x22
 80079e2:	f040 80be 	bne.w	8007b62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80079f4:	b2d9      	uxtb	r1, r3
 80079f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	400a      	ands	r2, r1
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f040 80a1 	bne.w	8007b72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e6      	bne.n	8007a30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3308      	adds	r3, #8
 8007a68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	667b      	str	r3, [r7, #100]	; 0x64
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a82:	647a      	str	r2, [r7, #68]	; 0x44
 8007a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a33      	ldr	r2, [pc, #204]	; (8007b7c <UART_RxISR_8BIT+0x1b4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d01f      	beq.n	8007af4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e6      	bne.n	8007ac2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d12e      	bne.n	8007b5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0310 	bic.w	r3, r3, #16
 8007b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b20:	61fb      	str	r3, [r7, #28]
 8007b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	69b9      	ldr	r1, [r7, #24]
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d103      	bne.n	8007b4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2210      	movs	r2, #16
 8007b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fe fe40 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b58:	e00b      	b.n	8007b72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7f8 fd78 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8007b60:	e007      	b.n	8007b72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699a      	ldr	r2, [r3, #24]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0208 	orr.w	r2, r2, #8
 8007b70:	619a      	str	r2, [r3, #24]
}
 8007b72:	bf00      	nop
 8007b74:	3770      	adds	r7, #112	; 0x70
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	58000c00 	.word	0x58000c00

08007b80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b09c      	sub	sp, #112	; 0x70
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b8e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b98:	2b22      	cmp	r3, #34	; 0x22
 8007b9a:	f040 80be 	bne.w	8007d1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	1c9a      	adds	r2, r3, #2
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 80a1 	bne.w	8007d2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c06:	657b      	str	r3, [r7, #84]	; 0x54
 8007c08:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	663b      	str	r3, [r7, #96]	; 0x60
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c3a:	643a      	str	r2, [r7, #64]	; 0x40
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e5      	bne.n	8007c1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a33      	ldr	r2, [pc, #204]	; (8007d34 <UART_RxISR_16BIT+0x1b4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d01f      	beq.n	8007cac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d018      	beq.n	8007cac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e6      	bne.n	8007c7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d12e      	bne.n	8007d12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f023 0310 	bic.w	r3, r3, #16
 8007cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6979      	ldr	r1, [r7, #20]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e6      	bne.n	8007cba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d103      	bne.n	8007d02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2210      	movs	r2, #16
 8007d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fe fd64 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d10:	e00b      	b.n	8007d2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7f8 fc9c 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8007d18:	e007      	b.n	8007d2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699a      	ldr	r2, [r3, #24]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0208 	orr.w	r2, r2, #8
 8007d28:	619a      	str	r2, [r3, #24]
}
 8007d2a:	bf00      	nop
 8007d2c:	3770      	adds	r7, #112	; 0x70
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	58000c00 	.word	0x58000c00

08007d38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b0ac      	sub	sp, #176	; 0xb0
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d46:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d6e:	2b22      	cmp	r3, #34	; 0x22
 8007d70:	f040 8180 	bne.w	8008074 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007d7a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d7e:	e123      	b.n	8007fc8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007d8e:	b2d9      	uxtb	r1, r3
 8007d90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9a:	400a      	ands	r2, r1
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d053      	beq.n	8007e7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d011      	beq.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2201      	movs	r2, #1
 8007df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	f043 0201 	orr.w	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d011      	beq.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e28:	f043 0204 	orr.w	r2, r3, #4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e58:	f043 0202 	orr.w	r2, r3, #2
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fe fca9 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f040 80a0 	bne.w	8007fc8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007eac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007eb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e4      	bne.n	8007e88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ed0:	4b6e      	ldr	r3, [pc, #440]	; (800808c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3308      	adds	r3, #8
 8007ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ee2:	66ba      	str	r2, [r7, #104]	; 0x68
 8007ee4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007ee8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e3      	bne.n	8007ebe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a60      	ldr	r2, [pc, #384]	; (8008090 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d021      	beq.n	8007f58 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d01a      	beq.n	8007f58 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f44:	657b      	str	r3, [r7, #84]	; 0x54
 8007f46:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e4      	bne.n	8007f22 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d130      	bne.n	8007fc2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f88:	643b      	str	r3, [r7, #64]	; 0x40
 8007f8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f003 0310 	and.w	r3, r3, #16
 8007fa6:	2b10      	cmp	r3, #16
 8007fa8:	d103      	bne.n	8007fb2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fe fc0c 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
 8007fc0:	e002      	b.n	8007fc8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7f8 fb44 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fc8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f47f aed1 	bne.w	8007d80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fe4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fe8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d049      	beq.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ff6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d242      	bcs.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3308      	adds	r3, #8
 8008004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	61fb      	str	r3, [r7, #28]
   return(result);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e3      	bne.n	8007ffe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a16      	ldr	r2, [pc, #88]	; (8008094 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800803a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	60bb      	str	r3, [r7, #8]
   return(result);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f043 0320 	orr.w	r3, r3, #32
 8008050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6979      	ldr	r1, [r7, #20]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	613b      	str	r3, [r7, #16]
   return(result);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e4      	bne.n	800803c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008072:	e007      	b.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699a      	ldr	r2, [r3, #24]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0208 	orr.w	r2, r2, #8
 8008082:	619a      	str	r2, [r3, #24]
}
 8008084:	bf00      	nop
 8008086:	37b0      	adds	r7, #176	; 0xb0
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	effffffe 	.word	0xeffffffe
 8008090:	58000c00 	.word	0x58000c00
 8008094:	080079c9 	.word	0x080079c9

08008098 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b0ae      	sub	sp, #184	; 0xb8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ce:	2b22      	cmp	r3, #34	; 0x22
 80080d0:	f040 8184 	bne.w	80083dc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080de:	e127      	b.n	8008330 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80080f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80080f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80080fa:	4013      	ands	r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800812a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	2b00      	cmp	r3, #0
 8008134:	d053      	beq.n	80081de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d011      	beq.n	8008166 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2201      	movs	r2, #1
 8008154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815c:	f043 0201 	orr.w	r2, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2202      	movs	r2, #2
 8008184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818c:	f043 0204 	orr.w	r2, r3, #4
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800819a:	f003 0304 	and.w	r3, r3, #4
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d011      	beq.n	80081c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80081a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2204      	movs	r2, #4
 80081b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f043 0202 	orr.w	r2, r3, #2
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fe faf7 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 80a2 	bne.w	8008330 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800820e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008212:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e2      	bne.n	80081ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3308      	adds	r3, #8
 800822c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008236:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008238:	4b6e      	ldr	r3, [pc, #440]	; (80083f4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800823a:	4013      	ands	r3, r2
 800823c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3308      	adds	r3, #8
 8008246:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800824a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800824c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e3      	bne.n	8008226 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2220      	movs	r2, #32
 8008262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a60      	ldr	r2, [pc, #384]	; (80083f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d021      	beq.n	80082c0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01a      	beq.n	80082c0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800829e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80082ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e4      	bne.n	800828a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d130      	bne.n	800832a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	f023 0310 	bic.w	r3, r3, #16
 80082e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082f0:	647b      	str	r3, [r7, #68]	; 0x44
 80082f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e4      	bne.n	80082ce <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	2b10      	cmp	r3, #16
 8008310:	d103      	bne.n	800831a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2210      	movs	r2, #16
 8008318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fe fa58 	bl	80067d8 <HAL_UARTEx_RxEventCallback>
 8008328:	e002      	b.n	8008330 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7f8 f990 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008330:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008334:	2b00      	cmp	r3, #0
 8008336:	d006      	beq.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	2b00      	cmp	r3, #0
 8008342:	f47f aecd 	bne.w	80080e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800834c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008350:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008354:	2b00      	cmp	r3, #0
 8008356:	d049      	beq.n	80083ec <UART_RxISR_16BIT_FIFOEN+0x354>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800835e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008362:	429a      	cmp	r2, r3
 8008364:	d242      	bcs.n	80083ec <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3308      	adds	r3, #8
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	623b      	str	r3, [r7, #32]
   return(result);
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800837c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800838a:	633a      	str	r2, [r7, #48]	; 0x30
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e3      	bne.n	8008366 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a16      	ldr	r2, [pc, #88]	; (80083fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80083a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f043 0320 	orr.w	r3, r3, #32
 80083b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083c6:	61fb      	str	r3, [r7, #28]
 80083c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	69b9      	ldr	r1, [r7, #24]
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	617b      	str	r3, [r7, #20]
   return(result);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e4      	bne.n	80083a4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083da:	e007      	b.n	80083ec <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	699a      	ldr	r2, [r3, #24]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f042 0208 	orr.w	r2, r2, #8
 80083ea:	619a      	str	r2, [r3, #24]
}
 80083ec:	bf00      	nop
 80083ee:	37b8      	adds	r7, #184	; 0xb8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	effffffe 	.word	0xeffffffe
 80083f8:	58000c00 	.word	0x58000c00
 80083fc:	08007b81 	.word	0x08007b81

08008400 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_UARTEx_DisableFifoMode+0x16>
 800844e:	2302      	movs	r3, #2
 8008450:	e027      	b.n	80084a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2224      	movs	r2, #36	; 0x24
 800845e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0201 	bic.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e02d      	b.n	8008522 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2224      	movs	r2, #36	; 0x24
 80084d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f850 	bl	80085a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800853e:	2302      	movs	r3, #2
 8008540:	e02d      	b.n	800859e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2224      	movs	r2, #36	; 0x24
 800854e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0201 	bic.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f812 	bl	80085a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085c8:	e031      	b.n	800862e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ca:	2310      	movs	r3, #16
 80085cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ce:	2310      	movs	r3, #16
 80085d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	0e5b      	lsrs	r3, r3, #25
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	0f5b      	lsrs	r3, r3, #29
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 0307 	and.w	r3, r3, #7
 80085f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	7b3a      	ldrb	r2, [r7, #12]
 80085f6:	4911      	ldr	r1, [pc, #68]	; (800863c <UARTEx_SetNbDataToProcess+0x94>)
 80085f8:	5c8a      	ldrb	r2, [r1, r2]
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085fe:	7b3a      	ldrb	r2, [r7, #12]
 8008600:	490f      	ldr	r1, [pc, #60]	; (8008640 <UARTEx_SetNbDataToProcess+0x98>)
 8008602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008604:	fb93 f3f2 	sdiv	r3, r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	7b7a      	ldrb	r2, [r7, #13]
 8008614:	4909      	ldr	r1, [pc, #36]	; (800863c <UARTEx_SetNbDataToProcess+0x94>)
 8008616:	5c8a      	ldrb	r2, [r1, r2]
 8008618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800861c:	7b7a      	ldrb	r2, [r7, #13]
 800861e:	4908      	ldr	r1, [pc, #32]	; (8008640 <UARTEx_SetNbDataToProcess+0x98>)
 8008620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008622:	fb93 f3f2 	sdiv	r3, r3, r2
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	0800c554 	.word	0x0800c554
 8008640:	0800c55c 	.word	0x0800c55c

08008644 <__NVIC_SetPriority>:
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008654:	2b00      	cmp	r3, #0
 8008656:	db0a      	blt.n	800866e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	490c      	ldr	r1, [pc, #48]	; (8008690 <__NVIC_SetPriority+0x4c>)
 800865e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008662:	0112      	lsls	r2, r2, #4
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	440b      	add	r3, r1
 8008668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800866c:	e00a      	b.n	8008684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	b2da      	uxtb	r2, r3
 8008672:	4908      	ldr	r1, [pc, #32]	; (8008694 <__NVIC_SetPriority+0x50>)
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	3b04      	subs	r3, #4
 800867c:	0112      	lsls	r2, r2, #4
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	440b      	add	r3, r1
 8008682:	761a      	strb	r2, [r3, #24]
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	e000e100 	.word	0xe000e100
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <SysTick_Handler+0x1c>)
 800869e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80086a0:	f002 f824 	bl	800a6ec <xTaskGetSchedulerState>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d001      	beq.n	80086ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80086aa:	f002 fe45 	bl	800b338 <xPortSysTickHandler>
  }
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	e000e010 	.word	0xe000e010

080086b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80086bc:	2100      	movs	r1, #0
 80086be:	f06f 0004 	mvn.w	r0, #4
 80086c2:	f7ff ffbf 	bl	8008644 <__NVIC_SetPriority>
#endif
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086d2:	f3ef 8305 	mrs	r3, IPSR
 80086d6:	603b      	str	r3, [r7, #0]
  return(result);
 80086d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80086de:	f06f 0305 	mvn.w	r3, #5
 80086e2:	607b      	str	r3, [r7, #4]
 80086e4:	e00c      	b.n	8008700 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086e6:	4b0a      	ldr	r3, [pc, #40]	; (8008710 <osKernelInitialize+0x44>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d105      	bne.n	80086fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <osKernelInitialize+0x44>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	607b      	str	r3, [r7, #4]
 80086f8:	e002      	b.n	8008700 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80086fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008700:	687b      	ldr	r3, [r7, #4]
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	240002dc 	.word	0x240002dc

08008714 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800871a:	f3ef 8305 	mrs	r3, IPSR
 800871e:	603b      	str	r3, [r7, #0]
  return(result);
 8008720:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008726:	f06f 0305 	mvn.w	r3, #5
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	e010      	b.n	8008750 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <osKernelStart+0x48>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d109      	bne.n	800874a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008736:	f7ff ffbf 	bl	80086b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800873a:	4b08      	ldr	r3, [pc, #32]	; (800875c <osKernelStart+0x48>)
 800873c:	2202      	movs	r2, #2
 800873e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008740:	f001 faee 	bl	8009d20 <vTaskStartScheduler>
      stat = osOK;
 8008744:	2300      	movs	r3, #0
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e002      	b.n	8008750 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800874a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800874e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008750:	687b      	ldr	r3, [r7, #4]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	240002dc 	.word	0x240002dc

08008760 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b08e      	sub	sp, #56	; 0x38
 8008764:	af04      	add	r7, sp, #16
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008770:	f3ef 8305 	mrs	r3, IPSR
 8008774:	617b      	str	r3, [r7, #20]
  return(result);
 8008776:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008778:	2b00      	cmp	r3, #0
 800877a:	d17e      	bne.n	800887a <osThreadNew+0x11a>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d07b      	beq.n	800887a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008782:	2380      	movs	r3, #128	; 0x80
 8008784:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008786:	2318      	movs	r3, #24
 8008788:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800878e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008792:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d045      	beq.n	8008826 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <osThreadNew+0x48>
        name = attr->name;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d008      	beq.n	80087ce <osThreadNew+0x6e>
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	2b38      	cmp	r3, #56	; 0x38
 80087c0:	d805      	bhi.n	80087ce <osThreadNew+0x6e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <osThreadNew+0x72>
        return (NULL);
 80087ce:	2300      	movs	r3, #0
 80087d0:	e054      	b.n	800887c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	089b      	lsrs	r3, r3, #2
 80087e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00e      	beq.n	8008808 <osThreadNew+0xa8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	2b5b      	cmp	r3, #91	; 0x5b
 80087f0:	d90a      	bls.n	8008808 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d006      	beq.n	8008808 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <osThreadNew+0xa8>
        mem = 1;
 8008802:	2301      	movs	r3, #1
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	e010      	b.n	800882a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10c      	bne.n	800882a <osThreadNew+0xca>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d108      	bne.n	800882a <osThreadNew+0xca>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <osThreadNew+0xca>
          mem = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	61bb      	str	r3, [r7, #24]
 8008824:	e001      	b.n	800882a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d110      	bne.n	8008852 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008838:	9202      	str	r2, [sp, #8]
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6a3a      	ldr	r2, [r7, #32]
 8008844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f001 f8c8 	bl	80099dc <xTaskCreateStatic>
 800884c:	4603      	mov	r3, r0
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	e013      	b.n	800887a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d110      	bne.n	800887a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	b29a      	uxth	r2, r3
 800885c:	f107 0310 	add.w	r3, r7, #16
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f001 f913 	bl	8009a96 <xTaskCreate>
 8008870:	4603      	mov	r3, r0
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <osThreadNew+0x11a>
            hTask = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800887a:	693b      	ldr	r3, [r7, #16]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3728      	adds	r7, #40	; 0x28
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800888c:	2300      	movs	r3, #0
 800888e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008890:	f3ef 8305 	mrs	r3, IPSR
 8008894:	60fb      	str	r3, [r7, #12]
  return(result);
 8008896:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008898:	2b00      	cmp	r3, #0
 800889a:	d12d      	bne.n	80088f8 <osEventFlagsNew+0x74>
    mem = -1;
 800889c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088a0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d015      	beq.n	80088d4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d006      	beq.n	80088be <osEventFlagsNew+0x3a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b1f      	cmp	r3, #31
 80088b6:	d902      	bls.n	80088be <osEventFlagsNew+0x3a>
        mem = 1;
 80088b8:	2301      	movs	r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	e00c      	b.n	80088d8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d108      	bne.n	80088d8 <osEventFlagsNew+0x54>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <osEventFlagsNew+0x54>
          mem = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	e001      	b.n	80088d8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d106      	bne.n	80088ec <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f8ec 	bl	8008ac0 <xEventGroupCreateStatic>
 80088e8:	6178      	str	r0, [r7, #20]
 80088ea:	e005      	b.n	80088f8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80088f2:	f000 f91c 	bl	8008b2e <xEventGroupCreate>
 80088f6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80088f8:	697b      	ldr	r3, [r7, #20]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <osEventFlagsSet+0x1e>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008922:	f06f 0303 	mvn.w	r3, #3
 8008926:	617b      	str	r3, [r7, #20]
 8008928:	e028      	b.n	800897c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800892a:	f3ef 8305 	mrs	r3, IPSR
 800892e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008930:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01d      	beq.n	8008972 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	461a      	mov	r2, r3
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6938      	ldr	r0, [r7, #16]
 8008944:	f000 fa96 	bl	8008e74 <xEventGroupSetBitsFromISR>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800894e:	f06f 0302 	mvn.w	r3, #2
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	e012      	b.n	800897c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00d      	beq.n	800897c <osEventFlagsSet+0x78>
 8008960:	4b09      	ldr	r3, [pc, #36]	; (8008988 <osEventFlagsSet+0x84>)
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	e004      	b.n	800897c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6938      	ldr	r0, [r7, #16]
 8008976:	f000 f9c3 	bl	8008d00 <xEventGroupSetBits>
 800897a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800897c:	697b      	ldr	r3, [r7, #20]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	; 0x30
 8008990:	af02      	add	r7, sp, #8
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d004      	beq.n	80089ae <osEventFlagsWait+0x22>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80089ae:	f06f 0303 	mvn.w	r3, #3
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e04b      	b.n	8008a4e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b6:	f3ef 8305 	mrs	r3, IPSR
 80089ba:	617b      	str	r3, [r7, #20]
  return(result);
 80089bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80089c2:	f06f 0305 	mvn.w	r3, #5
 80089c6:	61fb      	str	r3, [r7, #28]
 80089c8:	e041      	b.n	8008a4e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80089d4:	2301      	movs	r3, #1
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
 80089d8:	e001      	b.n	80089de <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	623b      	str	r3, [r7, #32]
 80089ec:	e001      	b.n	80089f2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80089ee:	2301      	movs	r3, #1
 80089f0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	6a3a      	ldr	r2, [r7, #32]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	69b8      	ldr	r0, [r7, #24]
 80089fe:	f000 f8b1 	bl	8008b64 <xEventGroupWaitBits>
 8008a02:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d010      	beq.n	8008a30 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d019      	beq.n	8008a4e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8008a20:	f06f 0301 	mvn.w	r3, #1
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	e012      	b.n	8008a4e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008a28:	f06f 0302 	mvn.w	r3, #2
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	e00e      	b.n	8008a4e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4013      	ands	r3, r2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d109      	bne.n	8008a4e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8008a40:	f06f 0301 	mvn.w	r3, #1
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	e002      	b.n	8008a4e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008a48:	f06f 0302 	mvn.w	r3, #2
 8008a4c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8008a4e:	69fb      	ldr	r3, [r7, #28]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3728      	adds	r7, #40	; 0x28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a07      	ldr	r2, [pc, #28]	; (8008a84 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	4a06      	ldr	r2, [pc, #24]	; (8008a88 <vApplicationGetIdleTaskMemory+0x30>)
 8008a6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2280      	movs	r2, #128	; 0x80
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	240002e0 	.word	0x240002e0
 8008a88:	2400033c 	.word	0x2400033c

08008a8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4a07      	ldr	r2, [pc, #28]	; (8008ab8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	4a06      	ldr	r2, [pc, #24]	; (8008abc <vApplicationGetTimerTaskMemory+0x30>)
 8008aa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008aaa:	601a      	str	r2, [r3, #0]
}
 8008aac:	bf00      	nop
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	2400053c 	.word	0x2400053c
 8008abc:	24000598 	.word	0x24000598

08008ac0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d00a      	beq.n	8008b04 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	60fb      	str	r3, [r7, #12]
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f9bf 	bl	8008e9c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2201      	movs	r2, #1
 8008b22:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008b24:	697b      	ldr	r3, [r7, #20]
	}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008b34:	2020      	movs	r0, #32
 8008b36:	f002 fc8f 	bl	800b458 <pvPortMalloc>
 8008b3a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f9a5 	bl	8008e9c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008b58:	687b      	ldr	r3, [r7, #4]
	}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b090      	sub	sp, #64	; 0x40
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <xEventGroupWaitBits+0x36>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	623b      	str	r3, [r7, #32]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00a      	beq.n	8008bba <xEventGroupWaitBits+0x56>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	61fb      	str	r3, [r7, #28]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	61bb      	str	r3, [r7, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bd6:	f001 fd89 	bl	800a6ec <xTaskGetSchedulerState>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <xEventGroupWaitBits+0x82>
 8008be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <xEventGroupWaitBits+0x86>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <xEventGroupWaitBits+0x88>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	617b      	str	r3, [r7, #20]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8008c06:	f001 f8f1 	bl	8009dec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c16:	f000 f90b 	bl	8008e30 <prvTestWaitCondition>
 8008c1a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00e      	beq.n	8008c40 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d028      	beq.n	8008c82 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	43db      	mvns	r3, r3
 8008c38:	401a      	ands	r2, r3
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	e020      	b.n	8008c82 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008c4e:	e018      	b.n	8008c82 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c5c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d003      	beq.n	8008c6c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c6a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	1d18      	adds	r0, r3, #4
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	4313      	orrs	r3, r2
 8008c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f001 faaf 	bl	800a1dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008c82:	f001 f8c1 	bl	8009e08 <xTaskResumeAll>
 8008c86:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d031      	beq.n	8008cf2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d107      	bne.n	8008ca4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008c94:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <xEventGroupWaitBits+0x198>)
 8008c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008ca4:	f001 fdae 	bl	800a804 <uxTaskResetEventItemValue>
 8008ca8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d11a      	bne.n	8008cea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8008cb4:	f002 faae 	bl	800b214 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008cc4:	f000 f8b4 	bl	8008e30 <prvTestWaitCondition>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d006      	beq.n	8008ce2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	43db      	mvns	r3, r3
 8008cdc:	401a      	ands	r2, r3
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008ce6:	f002 fac5 	bl	800b274 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3740      	adds	r7, #64	; 0x40
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08e      	sub	sp, #56	; 0x38
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <xEventGroupSetBits+0x32>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	613b      	str	r3, [r7, #16]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <xEventGroupSetBits+0x52>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	60fb      	str	r3, [r7, #12]
}
 8008d4e:	bf00      	nop
 8008d50:	e7fe      	b.n	8008d50 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	3304      	adds	r3, #4
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008d5e:	f001 f845 	bl	8009dec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008d74:	e03c      	b.n	8008df0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d8c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d94:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d108      	bne.n	8008db2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db0:	e008      	b.n	8008dc4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	4013      	ands	r3, r2
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d101      	bne.n	8008dc4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d010      	beq.n	8008dec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008de4:	4619      	mov	r1, r3
 8008de6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008de8:	f001 fac4 	bl	800a374 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d1be      	bne.n	8008d76 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	43db      	mvns	r3, r3
 8008e00:	401a      	ands	r2, r3
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008e06:	f000 ffff 	bl	8009e08 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	681b      	ldr	r3, [r3, #0]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3738      	adds	r7, #56	; 0x38
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff ff6c 	bl	8008d00 <xEventGroupSetBits>
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d107      	bne.n	8008e56 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	e007      	b.n	8008e66 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d101      	bne.n	8008e66 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008e62:	2301      	movs	r3, #1
 8008e64:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008e66:	697b      	ldr	r3, [r7, #20]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	4804      	ldr	r0, [pc, #16]	; (8008e98 <xEventGroupSetBitsFromISR+0x24>)
 8008e88:	f002 f876 	bl	800af78 <xTimerPendFunctionCallFromISR>
 8008e8c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008e8e:	697b      	ldr	r3, [r7, #20]
	}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	08008e17 	.word	0x08008e17

08008e9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f103 0208 	add.w	r2, r3, #8
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f103 0208 	add.w	r2, r3, #8
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f103 0208 	add.w	r2, r3, #8
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
}
 8008f32:	bf00      	nop
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f54:	d103      	bne.n	8008f5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e00c      	b.n	8008f78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3308      	adds	r3, #8
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e002      	b.n	8008f6c <vListInsert+0x2e>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d2f6      	bcs.n	8008f66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	601a      	str	r2, [r3, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6892      	ldr	r2, [r2, #8]
 8008fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	6852      	ldr	r2, [r2, #4]
 8008fd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d103      	bne.n	8008fe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	1e5a      	subs	r2, r3, #1
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <xQueueGenericReset+0x2a>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	60bb      	str	r3, [r7, #8]
}
 800902a:	bf00      	nop
 800902c:	e7fe      	b.n	800902c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800902e:	f002 f8f1 	bl	800b214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903a:	68f9      	ldr	r1, [r7, #12]
 800903c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	441a      	add	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	22ff      	movs	r2, #255	; 0xff
 800907a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d114      	bne.n	80090ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01a      	beq.n	80090c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3310      	adds	r3, #16
 8009090:	4618      	mov	r0, r3
 8009092:	f001 f90b 	bl	800a2ac <xTaskRemoveFromEventList>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d012      	beq.n	80090c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800909c:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <xQueueGenericReset+0xcc>)
 800909e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	e009      	b.n	80090c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3310      	adds	r3, #16
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fef2 	bl	8008e9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff feed 	bl	8008e9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090c2:	f002 f8d7 	bl	800b274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090c6:	2301      	movs	r3, #1
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08e      	sub	sp, #56	; 0x38
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <xQueueGenericCreateStatic+0x52>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <xQueueGenericCreateStatic+0x56>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <xQueueGenericCreateStatic+0x58>
 800912a:	2300      	movs	r3, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	623b      	str	r3, [r7, #32]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <xQueueGenericCreateStatic+0x7e>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <xQueueGenericCreateStatic+0x82>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericCreateStatic+0x84>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	61fb      	str	r3, [r7, #28]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009172:	2350      	movs	r3, #80	; 0x50
 8009174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b50      	cmp	r3, #80	; 0x50
 800917a:	d00a      	beq.n	8009192 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	61bb      	str	r3, [r7, #24]
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009192:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00d      	beq.n	80091ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	4613      	mov	r3, r2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f805 	bl	80091c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091bc:	4618      	mov	r0, r3
 80091be:	3730      	adds	r7, #48	; 0x30
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	e002      	b.n	80091e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091f2:	2101      	movs	r1, #1
 80091f4:	69b8      	ldr	r0, [r7, #24]
 80091f6:	f7ff ff05 	bl	8009004 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009202:	bf00      	nop
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08e      	sub	sp, #56	; 0x38
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800921a:	2300      	movs	r3, #0
 800921c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <xQueueGenericSend+0x32>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d103      	bne.n	800924c <xQueueGenericSend+0x40>
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <xQueueGenericSend+0x44>
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <xQueueGenericSend+0x46>
 8009250:	2300      	movs	r3, #0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10a      	bne.n	800926c <xQueueGenericSend+0x60>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009268:	bf00      	nop
 800926a:	e7fe      	b.n	800926a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d103      	bne.n	800927a <xQueueGenericSend+0x6e>
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <xQueueGenericSend+0x72>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <xQueueGenericSend+0x74>
 800927e:	2300      	movs	r3, #0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <xQueueGenericSend+0x8e>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	623b      	str	r3, [r7, #32]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800929a:	f001 fa27 	bl	800a6ec <xTaskGetSchedulerState>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <xQueueGenericSend+0x9e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <xQueueGenericSend+0xa2>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <xQueueGenericSend+0xa4>
 80092ae:	2300      	movs	r3, #0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <xQueueGenericSend+0xbe>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	61fb      	str	r3, [r7, #28]
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092ca:	f001 ffa3 	bl	800b214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d302      	bcc.n	80092e0 <xQueueGenericSend+0xd4>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d129      	bne.n	8009334 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092e6:	f000 fa0b 	bl	8009700 <prvCopyDataToQueue>
 80092ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d010      	beq.n	8009316 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	3324      	adds	r3, #36	; 0x24
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 ffd7 	bl	800a2ac <xTaskRemoveFromEventList>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d013      	beq.n	800932c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009304:	4b3f      	ldr	r3, [pc, #252]	; (8009404 <xQueueGenericSend+0x1f8>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	e00a      	b.n	800932c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800931c:	4b39      	ldr	r3, [pc, #228]	; (8009404 <xQueueGenericSend+0x1f8>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800932c:	f001 ffa2 	bl	800b274 <vPortExitCritical>
				return pdPASS;
 8009330:	2301      	movs	r3, #1
 8009332:	e063      	b.n	80093fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800933a:	f001 ff9b 	bl	800b274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800933e:	2300      	movs	r3, #0
 8009340:	e05c      	b.n	80093fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009348:	f107 0314 	add.w	r3, r7, #20
 800934c:	4618      	mov	r0, r3
 800934e:	f001 f873 	bl	800a438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009356:	f001 ff8d 	bl	800b274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800935a:	f000 fd47 	bl	8009dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800935e:	f001 ff59 	bl	800b214 <vPortEnterCritical>
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009368:	b25b      	sxtb	r3, r3
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800936e:	d103      	bne.n	8009378 <xQueueGenericSend+0x16c>
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800937e:	b25b      	sxtb	r3, r3
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009384:	d103      	bne.n	800938e <xQueueGenericSend+0x182>
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800938e:	f001 ff71 	bl	800b274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009392:	1d3a      	adds	r2, r7, #4
 8009394:	f107 0314 	add.w	r3, r7, #20
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f862 	bl	800a464 <xTaskCheckForTimeOut>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d124      	bne.n	80093f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093a8:	f000 faa2 	bl	80098f0 <prvIsQueueFull>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d018      	beq.n	80093e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	3310      	adds	r3, #16
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 feea 	bl	800a194 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c2:	f000 fa2d 	bl	8009820 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093c6:	f000 fd1f 	bl	8009e08 <xTaskResumeAll>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f47f af7c 	bne.w	80092ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <xQueueGenericSend+0x1f8>)
 80093d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	e772      	b.n	80092ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093e6:	f000 fa1b 	bl	8009820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093ea:	f000 fd0d 	bl	8009e08 <xTaskResumeAll>
 80093ee:	e76c      	b.n	80092ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f2:	f000 fa15 	bl	8009820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093f6:	f000 fd07 	bl	8009e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3738      	adds	r7, #56	; 0x38
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b090      	sub	sp, #64	; 0x40
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d103      	bne.n	8009444 <xQueueGenericSendFromISR+0x3c>
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xQueueGenericSendFromISR+0x40>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <xQueueGenericSendFromISR+0x42>
 8009448:	2300      	movs	r3, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d103      	bne.n	8009472 <xQueueGenericSendFromISR+0x6a>
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <xQueueGenericSendFromISR+0x6e>
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <xQueueGenericSendFromISR+0x70>
 8009476:	2300      	movs	r3, #0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	623b      	str	r3, [r7, #32]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009492:	f001 ffa1 	bl	800b3d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009496:	f3ef 8211 	mrs	r2, BASEPRI
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	61fa      	str	r2, [r7, #28]
 80094ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d302      	bcc.n	80094c4 <xQueueGenericSendFromISR+0xbc>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d12f      	bne.n	8009524 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094da:	f000 f911 	bl	8009700 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e6:	d112      	bne.n	800950e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d016      	beq.n	800951e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	3324      	adds	r3, #36	; 0x24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fed9 	bl	800a2ac <xTaskRemoveFromEventList>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00e      	beq.n	800951e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e007      	b.n	800951e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800950e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009512:	3301      	adds	r3, #1
 8009514:	b2db      	uxtb	r3, r3
 8009516:	b25a      	sxtb	r2, r3
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800951e:	2301      	movs	r3, #1
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009522:	e001      	b.n	8009528 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009524:	2300      	movs	r3, #0
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009532:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009536:	4618      	mov	r0, r3
 8009538:	3740      	adds	r7, #64	; 0x40
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08c      	sub	sp, #48	; 0x30
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800954c:	2300      	movs	r3, #0
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <xQueueReceive+0x30>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	623b      	str	r3, [r7, #32]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <xQueueReceive+0x3e>
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <xQueueReceive+0x42>
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <xQueueReceive+0x44>
 8009582:	2300      	movs	r3, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xQueueReceive+0x5e>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	61fb      	str	r3, [r7, #28]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800959e:	f001 f8a5 	bl	800a6ec <xTaskGetSchedulerState>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <xQueueReceive+0x6e>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <xQueueReceive+0x72>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <xQueueReceive+0x74>
 80095b2:	2300      	movs	r3, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <xQueueReceive+0x8e>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	61bb      	str	r3, [r7, #24]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095ce:	f001 fe21 	bl	800b214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01f      	beq.n	800961e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e2:	f000 f8f7 	bl	80097d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	1e5a      	subs	r2, r3, #1
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00f      	beq.n	8009616 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	3310      	adds	r3, #16
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fe56 	bl	800a2ac <xTaskRemoveFromEventList>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d007      	beq.n	8009616 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009606:	4b3d      	ldr	r3, [pc, #244]	; (80096fc <xQueueReceive+0x1bc>)
 8009608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009616:	f001 fe2d 	bl	800b274 <vPortExitCritical>
				return pdPASS;
 800961a:	2301      	movs	r3, #1
 800961c:	e069      	b.n	80096f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009624:	f001 fe26 	bl	800b274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009628:	2300      	movs	r3, #0
 800962a:	e062      	b.n	80096f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009632:	f107 0310 	add.w	r3, r7, #16
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fefe 	bl	800a438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800963c:	2301      	movs	r3, #1
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009640:	f001 fe18 	bl	800b274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009644:	f000 fbd2 	bl	8009dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009648:	f001 fde4 	bl	800b214 <vPortEnterCritical>
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009652:	b25b      	sxtb	r3, r3
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009658:	d103      	bne.n	8009662 <xQueueReceive+0x122>
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009668:	b25b      	sxtb	r3, r3
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966e:	d103      	bne.n	8009678 <xQueueReceive+0x138>
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009678:	f001 fdfc 	bl	800b274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800967c:	1d3a      	adds	r2, r7, #4
 800967e:	f107 0310 	add.w	r3, r7, #16
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f000 feed 	bl	800a464 <xTaskCheckForTimeOut>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d123      	bne.n	80096d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009692:	f000 f917 	bl	80098c4 <prvIsQueueEmpty>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d017      	beq.n	80096cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	3324      	adds	r3, #36	; 0x24
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fd75 	bl	800a194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ac:	f000 f8b8 	bl	8009820 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096b0:	f000 fbaa 	bl	8009e08 <xTaskResumeAll>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d189      	bne.n	80095ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096ba:	4b10      	ldr	r3, [pc, #64]	; (80096fc <xQueueReceive+0x1bc>)
 80096bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	e780      	b.n	80095ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ce:	f000 f8a7 	bl	8009820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096d2:	f000 fb99 	bl	8009e08 <xTaskResumeAll>
 80096d6:	e77a      	b.n	80095ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096da:	f000 f8a1 	bl	8009820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096de:	f000 fb93 	bl	8009e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e4:	f000 f8ee 	bl	80098c4 <prvIsQueueEmpty>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f43f af6f 	beq.w	80095ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3730      	adds	r7, #48	; 0x30
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	e000ed04 	.word	0xe000ed04

08009700 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009714:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10d      	bne.n	800973a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d14d      	bne.n	80097c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fffc 	bl	800a728 <xTaskPriorityDisinherit>
 8009730:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	e043      	b.n	80097c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d119      	bne.n	8009774 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6858      	ldr	r0, [r3, #4]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	461a      	mov	r2, r3
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	f002 f898 	bl	800b880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	441a      	add	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	429a      	cmp	r2, r3
 8009768:	d32b      	bcc.n	80097c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	605a      	str	r2, [r3, #4]
 8009772:	e026      	b.n	80097c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	68d8      	ldr	r0, [r3, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	461a      	mov	r2, r3
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	f002 f87e 	bl	800b880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	425b      	negs	r3, r3
 800978e:	441a      	add	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d207      	bcs.n	80097b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	425b      	negs	r3, r3
 80097aa:	441a      	add	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d105      	bne.n	80097c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3b01      	subs	r3, #1
 80097c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097ca:	697b      	ldr	r3, [r7, #20]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d018      	beq.n	8009818 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	441a      	add	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d303      	bcc.n	8009808 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68d9      	ldr	r1, [r3, #12]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	461a      	mov	r2, r3
 8009812:	6838      	ldr	r0, [r7, #0]
 8009814:	f002 f834 	bl	800b880 <memcpy>
	}
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009828:	f001 fcf4 	bl	800b214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009832:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009834:	e011      	b.n	800985a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	2b00      	cmp	r3, #0
 800983c:	d012      	beq.n	8009864 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3324      	adds	r3, #36	; 0x24
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fd32 	bl	800a2ac <xTaskRemoveFromEventList>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800984e:	f000 fe6b 	bl	800a528 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	3b01      	subs	r3, #1
 8009856:	b2db      	uxtb	r3, r3
 8009858:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800985a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800985e:	2b00      	cmp	r3, #0
 8009860:	dce9      	bgt.n	8009836 <prvUnlockQueue+0x16>
 8009862:	e000      	b.n	8009866 <prvUnlockQueue+0x46>
					break;
 8009864:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	22ff      	movs	r2, #255	; 0xff
 800986a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800986e:	f001 fd01 	bl	800b274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009872:	f001 fccf 	bl	800b214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800987c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800987e:	e011      	b.n	80098a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d012      	beq.n	80098ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3310      	adds	r3, #16
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fd0d 	bl	800a2ac <xTaskRemoveFromEventList>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009898:	f000 fe46 	bl	800a528 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	3b01      	subs	r3, #1
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dce9      	bgt.n	8009880 <prvUnlockQueue+0x60>
 80098ac:	e000      	b.n	80098b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	22ff      	movs	r2, #255	; 0xff
 80098b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098b8:	f001 fcdc 	bl	800b274 <vPortExitCritical>
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098cc:	f001 fca2 	bl	800b214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d102      	bne.n	80098de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80098d8:	2301      	movs	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	e001      	b.n	80098e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098e2:	f001 fcc7 	bl	800b274 <vPortExitCritical>

	return xReturn;
 80098e6:	68fb      	ldr	r3, [r7, #12]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098f8:	f001 fc8c 	bl	800b214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009904:	429a      	cmp	r2, r3
 8009906:	d102      	bne.n	800990e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009908:	2301      	movs	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	e001      	b.n	8009912 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009912:	f001 fcaf 	bl	800b274 <vPortExitCritical>

	return xReturn;
 8009916:	68fb      	ldr	r3, [r7, #12]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e014      	b.n	800995a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009930:	4a0f      	ldr	r2, [pc, #60]	; (8009970 <vQueueAddToRegistry+0x50>)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10b      	bne.n	8009954 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800993c:	490c      	ldr	r1, [pc, #48]	; (8009970 <vQueueAddToRegistry+0x50>)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009946:	4a0a      	ldr	r2, [pc, #40]	; (8009970 <vQueueAddToRegistry+0x50>)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	4413      	add	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009952:	e006      	b.n	8009962 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b07      	cmp	r3, #7
 800995e:	d9e7      	bls.n	8009930 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009960:	bf00      	nop
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	24000998 	.word	0x24000998

08009974 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009984:	f001 fc46 	bl	800b214 <vPortEnterCritical>
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800998e:	b25b      	sxtb	r3, r3
 8009990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009994:	d103      	bne.n	800999e <vQueueWaitForMessageRestricted+0x2a>
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099a4:	b25b      	sxtb	r3, r3
 80099a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099aa:	d103      	bne.n	80099b4 <vQueueWaitForMessageRestricted+0x40>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099b4:	f001 fc5e 	bl	800b274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3324      	adds	r3, #36	; 0x24
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 fc43 	bl	800a254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099ce:	6978      	ldr	r0, [r7, #20]
 80099d0:	f7ff ff26 	bl	8009820 <prvUnlockQueue>
	}
 80099d4:	bf00      	nop
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b08e      	sub	sp, #56	; 0x38
 80099e0:	af04      	add	r7, sp, #16
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <xTaskCreateStatic+0x2a>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	623b      	str	r3, [r7, #32]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	61fb      	str	r3, [r7, #28]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a22:	235c      	movs	r3, #92	; 0x5c
 8009a24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b5c      	cmp	r3, #92	; 0x5c
 8009a2a:	d00a      	beq.n	8009a42 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	61bb      	str	r3, [r7, #24]
}
 8009a3e:	bf00      	nop
 8009a40:	e7fe      	b.n	8009a40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01e      	beq.n	8009a88 <xTaskCreateStatic+0xac>
 8009a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d01b      	beq.n	8009a88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a62:	2300      	movs	r3, #0
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	9302      	str	r3, [sp, #8]
 8009a6a:	f107 0314 	add.w	r3, r7, #20
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 f850 	bl	8009b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a82:	f000 f8dd 	bl	8009c40 <prvAddNewTaskToReadyList>
 8009a86:	e001      	b.n	8009a8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a8c:	697b      	ldr	r3, [r7, #20]
	}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3728      	adds	r7, #40	; 0x28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b08c      	sub	sp, #48	; 0x30
 8009a9a:	af04      	add	r7, sp, #16
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	603b      	str	r3, [r7, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f001 fcd4 	bl	800b458 <pvPortMalloc>
 8009ab0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00e      	beq.n	8009ad6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ab8:	205c      	movs	r0, #92	; 0x5c
 8009aba:	f001 fccd 	bl	800b458 <pvPortMalloc>
 8009abe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	631a      	str	r2, [r3, #48]	; 0x30
 8009acc:	e005      	b.n	8009ada <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f001 fd8e 	bl	800b5f0 <vPortFree>
 8009ad4:	e001      	b.n	8009ada <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d017      	beq.n	8009b10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ae8:	88fa      	ldrh	r2, [r7, #6]
 8009aea:	2300      	movs	r3, #0
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 f80e 	bl	8009b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b04:	69f8      	ldr	r0, [r7, #28]
 8009b06:	f000 f89b 	bl	8009c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	61bb      	str	r3, [r7, #24]
 8009b0e:	e002      	b.n	8009b16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b16:	69bb      	ldr	r3, [r7, #24]
	}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	461a      	mov	r2, r3
 8009b38:	21a5      	movs	r1, #165	; 0xa5
 8009b3a:	f001 feaf 	bl	800b89c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009b48:	440b      	add	r3, r1
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00a      	beq.n	8009b78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	617b      	str	r3, [r7, #20]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d01f      	beq.n	8009bbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]
 8009b82:	e012      	b.n	8009baa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	7819      	ldrb	r1, [r3, #0]
 8009b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	3334      	adds	r3, #52	; 0x34
 8009b94:	460a      	mov	r2, r1
 8009b96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d006      	beq.n	8009bb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	61fb      	str	r3, [r7, #28]
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	2b0f      	cmp	r3, #15
 8009bae:	d9e9      	bls.n	8009b84 <prvInitialiseNewTask+0x64>
 8009bb0:	e000      	b.n	8009bb4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009bb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bbc:	e003      	b.n	8009bc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	2b37      	cmp	r3, #55	; 0x37
 8009bca:	d901      	bls.n	8009bd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bcc:	2337      	movs	r3, #55	; 0x37
 8009bce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	2200      	movs	r2, #0
 8009be0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	3304      	adds	r3, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff f978 	bl	8008edc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff f973 	bl	8008edc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	2200      	movs	r2, #0
 8009c10:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	68f9      	ldr	r1, [r7, #12]
 8009c1e:	69b8      	ldr	r0, [r7, #24]
 8009c20:	f001 f9ca 	bl	800afb8 <pxPortInitialiseStack>
 8009c24:	4602      	mov	r2, r0
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c36:	bf00      	nop
 8009c38:	3720      	adds	r7, #32
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c48:	f001 fae4 	bl	800b214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c4c:	4b2d      	ldr	r3, [pc, #180]	; (8009d04 <prvAddNewTaskToReadyList+0xc4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3301      	adds	r3, #1
 8009c52:	4a2c      	ldr	r2, [pc, #176]	; (8009d04 <prvAddNewTaskToReadyList+0xc4>)
 8009c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c56:	4b2c      	ldr	r3, [pc, #176]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c5e:	4a2a      	ldr	r2, [pc, #168]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c64:	4b27      	ldr	r3, [pc, #156]	; (8009d04 <prvAddNewTaskToReadyList+0xc4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d110      	bne.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c6c:	f000 fc80 	bl	800a570 <prvInitialiseTaskLists>
 8009c70:	e00d      	b.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c72:	4b26      	ldr	r3, [pc, #152]	; (8009d0c <prvAddNewTaskToReadyList+0xcc>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d109      	bne.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c7a:	4b23      	ldr	r3, [pc, #140]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d802      	bhi.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c8e:	4b20      	ldr	r3, [pc, #128]	; (8009d10 <prvAddNewTaskToReadyList+0xd0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a1e      	ldr	r2, [pc, #120]	; (8009d10 <prvAddNewTaskToReadyList+0xd0>)
 8009c96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c98:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <prvAddNewTaskToReadyList+0xd0>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <prvAddNewTaskToReadyList+0xd4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d903      	bls.n	8009cb4 <prvAddNewTaskToReadyList+0x74>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a18      	ldr	r2, [pc, #96]	; (8009d14 <prvAddNewTaskToReadyList+0xd4>)
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <prvAddNewTaskToReadyList+0xd8>)
 8009cc2:	441a      	add	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7ff f913 	bl	8008ef6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009cd0:	f001 fad0 	bl	800b274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <prvAddNewTaskToReadyList+0xcc>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00e      	beq.n	8009cfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d207      	bcs.n	8009cfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <prvAddNewTaskToReadyList+0xdc>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	24000eac 	.word	0x24000eac
 8009d08:	240009d8 	.word	0x240009d8
 8009d0c:	24000eb8 	.word	0x24000eb8
 8009d10:	24000ec8 	.word	0x24000ec8
 8009d14:	24000eb4 	.word	0x24000eb4
 8009d18:	240009dc 	.word	0x240009dc
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d2e:	463a      	mov	r2, r7
 8009d30:	1d39      	adds	r1, r7, #4
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fe8e 	bl	8008a58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	9202      	str	r2, [sp, #8]
 8009d44:	9301      	str	r3, [sp, #4]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	460a      	mov	r2, r1
 8009d4e:	4921      	ldr	r1, [pc, #132]	; (8009dd4 <vTaskStartScheduler+0xb4>)
 8009d50:	4821      	ldr	r0, [pc, #132]	; (8009dd8 <vTaskStartScheduler+0xb8>)
 8009d52:	f7ff fe43 	bl	80099dc <xTaskCreateStatic>
 8009d56:	4603      	mov	r3, r0
 8009d58:	4a20      	ldr	r2, [pc, #128]	; (8009ddc <vTaskStartScheduler+0xbc>)
 8009d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d5c:	4b1f      	ldr	r3, [pc, #124]	; (8009ddc <vTaskStartScheduler+0xbc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d64:	2301      	movs	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	e001      	b.n	8009d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d102      	bne.n	8009d7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d74:	f000 fdb2 	bl	800a8dc <xTimerCreateTimerTask>
 8009d78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d116      	bne.n	8009dae <vTaskStartScheduler+0x8e>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	613b      	str	r3, [r7, #16]
}
 8009d92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d94:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <vTaskStartScheduler+0xc0>)
 8009d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d9c:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <vTaskStartScheduler+0xc4>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <vTaskStartScheduler+0xc8>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009da8:	f001 f992 	bl	800b0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dac:	e00e      	b.n	8009dcc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009db4:	d10a      	bne.n	8009dcc <vTaskStartScheduler+0xac>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60fb      	str	r3, [r7, #12]
}
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <vTaskStartScheduler+0xaa>
}
 8009dcc:	bf00      	nop
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	0800c484 	.word	0x0800c484
 8009dd8:	0800a541 	.word	0x0800a541
 8009ddc:	24000ed0 	.word	0x24000ed0
 8009de0:	24000ecc 	.word	0x24000ecc
 8009de4:	24000eb8 	.word	0x24000eb8
 8009de8:	24000eb0 	.word	0x24000eb0

08009dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009df0:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <vTaskSuspendAll+0x18>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	4a03      	ldr	r2, [pc, #12]	; (8009e04 <vTaskSuspendAll+0x18>)
 8009df8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009dfa:	bf00      	nop
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	24000ed4 	.word	0x24000ed4

08009e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e16:	4b42      	ldr	r3, [pc, #264]	; (8009f20 <xTaskResumeAll+0x118>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	603b      	str	r3, [r7, #0]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e34:	f001 f9ee 	bl	800b214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e38:	4b39      	ldr	r3, [pc, #228]	; (8009f20 <xTaskResumeAll+0x118>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	4a38      	ldr	r2, [pc, #224]	; (8009f20 <xTaskResumeAll+0x118>)
 8009e40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e42:	4b37      	ldr	r3, [pc, #220]	; (8009f20 <xTaskResumeAll+0x118>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d162      	bne.n	8009f10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e4a:	4b36      	ldr	r3, [pc, #216]	; (8009f24 <xTaskResumeAll+0x11c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d05e      	beq.n	8009f10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e52:	e02f      	b.n	8009eb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e54:	4b34      	ldr	r3, [pc, #208]	; (8009f28 <xTaskResumeAll+0x120>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3318      	adds	r3, #24
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff f8a5 	bl	8008fb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff f8a0 	bl	8008fb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4b2d      	ldr	r3, [pc, #180]	; (8009f2c <xTaskResumeAll+0x124>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d903      	bls.n	8009e84 <xTaskResumeAll+0x7c>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	4a2a      	ldr	r2, [pc, #168]	; (8009f2c <xTaskResumeAll+0x124>)
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4a27      	ldr	r2, [pc, #156]	; (8009f30 <xTaskResumeAll+0x128>)
 8009e92:	441a      	add	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f7ff f82b 	bl	8008ef6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4b23      	ldr	r3, [pc, #140]	; (8009f34 <xTaskResumeAll+0x12c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d302      	bcc.n	8009eb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009eae:	4b22      	ldr	r3, [pc, #136]	; (8009f38 <xTaskResumeAll+0x130>)
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009eb4:	4b1c      	ldr	r3, [pc, #112]	; (8009f28 <xTaskResumeAll+0x120>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1cb      	bne.n	8009e54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ec2:	f000 fbf3 	bl	800a6ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ec6:	4b1d      	ldr	r3, [pc, #116]	; (8009f3c <xTaskResumeAll+0x134>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d010      	beq.n	8009ef4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ed2:	f000 f847 	bl	8009f64 <xTaskIncrementTick>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009edc:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <xTaskResumeAll+0x130>)
 8009ede:	2201      	movs	r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1f1      	bne.n	8009ed2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009eee:	4b13      	ldr	r3, [pc, #76]	; (8009f3c <xTaskResumeAll+0x134>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <xTaskResumeAll+0x130>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d009      	beq.n	8009f10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009efc:	2301      	movs	r3, #1
 8009efe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <xTaskResumeAll+0x138>)
 8009f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f10:	f001 f9b0 	bl	800b274 <vPortExitCritical>

	return xAlreadyYielded;
 8009f14:	68bb      	ldr	r3, [r7, #8]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	24000ed4 	.word	0x24000ed4
 8009f24:	24000eac 	.word	0x24000eac
 8009f28:	24000e6c 	.word	0x24000e6c
 8009f2c:	24000eb4 	.word	0x24000eb4
 8009f30:	240009dc 	.word	0x240009dc
 8009f34:	240009d8 	.word	0x240009d8
 8009f38:	24000ec0 	.word	0x24000ec0
 8009f3c:	24000ebc 	.word	0x24000ebc
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <xTaskGetTickCount+0x1c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f50:	687b      	ldr	r3, [r7, #4]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	24000eb0 	.word	0x24000eb0

08009f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f6e:	4b4f      	ldr	r3, [pc, #316]	; (800a0ac <xTaskIncrementTick+0x148>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f040 808f 	bne.w	800a096 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f78:	4b4d      	ldr	r3, [pc, #308]	; (800a0b0 <xTaskIncrementTick+0x14c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f80:	4a4b      	ldr	r2, [pc, #300]	; (800a0b0 <xTaskIncrementTick+0x14c>)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d120      	bne.n	8009fce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f8c:	4b49      	ldr	r3, [pc, #292]	; (800a0b4 <xTaskIncrementTick+0x150>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <xTaskIncrementTick+0x48>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	603b      	str	r3, [r7, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	e7fe      	b.n	8009faa <xTaskIncrementTick+0x46>
 8009fac:	4b41      	ldr	r3, [pc, #260]	; (800a0b4 <xTaskIncrementTick+0x150>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	4b41      	ldr	r3, [pc, #260]	; (800a0b8 <xTaskIncrementTick+0x154>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a3f      	ldr	r2, [pc, #252]	; (800a0b4 <xTaskIncrementTick+0x150>)
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	4a3f      	ldr	r2, [pc, #252]	; (800a0b8 <xTaskIncrementTick+0x154>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	4b3e      	ldr	r3, [pc, #248]	; (800a0bc <xTaskIncrementTick+0x158>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a3d      	ldr	r2, [pc, #244]	; (800a0bc <xTaskIncrementTick+0x158>)
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	f000 fb6f 	bl	800a6ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fce:	4b3c      	ldr	r3, [pc, #240]	; (800a0c0 <xTaskIncrementTick+0x15c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d349      	bcc.n	800a06c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fd8:	4b36      	ldr	r3, [pc, #216]	; (800a0b4 <xTaskIncrementTick+0x150>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d104      	bne.n	8009fec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe2:	4b37      	ldr	r3, [pc, #220]	; (800a0c0 <xTaskIncrementTick+0x15c>)
 8009fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fe8:	601a      	str	r2, [r3, #0]
					break;
 8009fea:	e03f      	b.n	800a06c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fec:	4b31      	ldr	r3, [pc, #196]	; (800a0b4 <xTaskIncrementTick+0x150>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	429a      	cmp	r2, r3
 800a002:	d203      	bcs.n	800a00c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a004:	4a2e      	ldr	r2, [pc, #184]	; (800a0c0 <xTaskIncrementTick+0x15c>)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a00a:	e02f      	b.n	800a06c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3304      	adds	r3, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe ffcd 	bl	8008fb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	3318      	adds	r3, #24
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe ffc4 	bl	8008fb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02c:	4b25      	ldr	r3, [pc, #148]	; (800a0c4 <xTaskIncrementTick+0x160>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d903      	bls.n	800a03c <xTaskIncrementTick+0xd8>
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	4a22      	ldr	r2, [pc, #136]	; (800a0c4 <xTaskIncrementTick+0x160>)
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4a1f      	ldr	r2, [pc, #124]	; (800a0c8 <xTaskIncrementTick+0x164>)
 800a04a:	441a      	add	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	3304      	adds	r3, #4
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	f7fe ff4f 	bl	8008ef6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05c:	4b1b      	ldr	r3, [pc, #108]	; (800a0cc <xTaskIncrementTick+0x168>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	429a      	cmp	r2, r3
 800a064:	d3b8      	bcc.n	8009fd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a06a:	e7b5      	b.n	8009fd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a06c:	4b17      	ldr	r3, [pc, #92]	; (800a0cc <xTaskIncrementTick+0x168>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a072:	4915      	ldr	r1, [pc, #84]	; (800a0c8 <xTaskIncrementTick+0x164>)
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d901      	bls.n	800a088 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a088:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <xTaskIncrementTick+0x16c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a090:	2301      	movs	r3, #1
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	e004      	b.n	800a0a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a096:	4b0f      	ldr	r3, [pc, #60]	; (800a0d4 <xTaskIncrementTick+0x170>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3301      	adds	r3, #1
 800a09c:	4a0d      	ldr	r2, [pc, #52]	; (800a0d4 <xTaskIncrementTick+0x170>)
 800a09e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0a0:	697b      	ldr	r3, [r7, #20]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	24000ed4 	.word	0x24000ed4
 800a0b0:	24000eb0 	.word	0x24000eb0
 800a0b4:	24000e64 	.word	0x24000e64
 800a0b8:	24000e68 	.word	0x24000e68
 800a0bc:	24000ec4 	.word	0x24000ec4
 800a0c0:	24000ecc 	.word	0x24000ecc
 800a0c4:	24000eb4 	.word	0x24000eb4
 800a0c8:	240009dc 	.word	0x240009dc
 800a0cc:	240009d8 	.word	0x240009d8
 800a0d0:	24000ec0 	.word	0x24000ec0
 800a0d4:	24000ebc 	.word	0x24000ebc

0800a0d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0de:	4b28      	ldr	r3, [pc, #160]	; (800a180 <vTaskSwitchContext+0xa8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0e6:	4b27      	ldr	r3, [pc, #156]	; (800a184 <vTaskSwitchContext+0xac>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0ec:	e041      	b.n	800a172 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a0ee:	4b25      	ldr	r3, [pc, #148]	; (800a184 <vTaskSwitchContext+0xac>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f4:	4b24      	ldr	r3, [pc, #144]	; (800a188 <vTaskSwitchContext+0xb0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	e010      	b.n	800a11e <vTaskSwitchContext+0x46>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <vTaskSwitchContext+0x40>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	607b      	str	r3, [r7, #4]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <vTaskSwitchContext+0x3e>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	491b      	ldr	r1, [pc, #108]	; (800a18c <vTaskSwitchContext+0xb4>)
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0e4      	beq.n	800a0fc <vTaskSwitchContext+0x24>
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4a13      	ldr	r2, [pc, #76]	; (800a18c <vTaskSwitchContext+0xb4>)
 800a13e:	4413      	add	r3, r2
 800a140:	60bb      	str	r3, [r7, #8]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	605a      	str	r2, [r3, #4]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	3308      	adds	r3, #8
 800a154:	429a      	cmp	r2, r3
 800a156:	d104      	bne.n	800a162 <vTaskSwitchContext+0x8a>
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	4a09      	ldr	r2, [pc, #36]	; (800a190 <vTaskSwitchContext+0xb8>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	4a06      	ldr	r2, [pc, #24]	; (800a188 <vTaskSwitchContext+0xb0>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6013      	str	r3, [r2, #0]
}
 800a172:	bf00      	nop
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	24000ed4 	.word	0x24000ed4
 800a184:	24000ec0 	.word	0x24000ec0
 800a188:	24000eb4 	.word	0x24000eb4
 800a18c:	240009dc 	.word	0x240009dc
 800a190:	240009d8 	.word	0x240009d8

0800a194 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10a      	bne.n	800a1ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	60fb      	str	r3, [r7, #12]
}
 800a1b6:	bf00      	nop
 800a1b8:	e7fe      	b.n	800a1b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ba:	4b07      	ldr	r3, [pc, #28]	; (800a1d8 <vTaskPlaceOnEventList+0x44>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3318      	adds	r3, #24
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7fe febb 	bl	8008f3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	6838      	ldr	r0, [r7, #0]
 800a1cc:	f000 fb32 	bl	800a834 <prvAddCurrentTaskToDelayedList>
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	240009d8 	.word	0x240009d8

0800a1dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10a      	bne.n	800a204 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	617b      	str	r3, [r7, #20]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a204:	4b11      	ldr	r3, [pc, #68]	; (800a24c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	613b      	str	r3, [r7, #16]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a222:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a22c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3318      	adds	r3, #24
 800a234:	4619      	mov	r1, r3
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f7fe fe5d 	bl	8008ef6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a23c:	2101      	movs	r1, #1
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 faf8 	bl	800a834 <prvAddCurrentTaskToDelayedList>
}
 800a244:	bf00      	nop
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	24000ed4 	.word	0x24000ed4
 800a250:	240009d8 	.word	0x240009d8

0800a254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	617b      	str	r3, [r7, #20]
}
 800a278:	bf00      	nop
 800a27a:	e7fe      	b.n	800a27a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3318      	adds	r3, #24
 800a282:	4619      	mov	r1, r3
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7fe fe36 	bl	8008ef6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a294:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	68b8      	ldr	r0, [r7, #8]
 800a29a:	f000 facb 	bl	800a834 <prvAddCurrentTaskToDelayedList>
	}
 800a29e:	bf00      	nop
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	240009d8 	.word	0x240009d8

0800a2ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	60fb      	str	r3, [r7, #12]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	3318      	adds	r3, #24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe fe67 	bl	8008fb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2e2:	4b1e      	ldr	r3, [pc, #120]	; (800a35c <xTaskRemoveFromEventList+0xb0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d11d      	bne.n	800a326 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fe fe5e 	bl	8008fb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f8:	4b19      	ldr	r3, [pc, #100]	; (800a360 <xTaskRemoveFromEventList+0xb4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d903      	bls.n	800a308 <xTaskRemoveFromEventList+0x5c>
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a16      	ldr	r2, [pc, #88]	; (800a360 <xTaskRemoveFromEventList+0xb4>)
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4a13      	ldr	r2, [pc, #76]	; (800a364 <xTaskRemoveFromEventList+0xb8>)
 800a316:	441a      	add	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	3304      	adds	r3, #4
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fe fde9 	bl	8008ef6 <vListInsertEnd>
 800a324:	e005      	b.n	800a332 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3318      	adds	r3, #24
 800a32a:	4619      	mov	r1, r3
 800a32c:	480e      	ldr	r0, [pc, #56]	; (800a368 <xTaskRemoveFromEventList+0xbc>)
 800a32e:	f7fe fde2 	bl	8008ef6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a336:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <xTaskRemoveFromEventList+0xc0>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d905      	bls.n	800a34c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a340:	2301      	movs	r3, #1
 800a342:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a344:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <xTaskRemoveFromEventList+0xc4>)
 800a346:	2201      	movs	r2, #1
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	e001      	b.n	800a350 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a34c:	2300      	movs	r3, #0
 800a34e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a350:	697b      	ldr	r3, [r7, #20]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	24000ed4 	.word	0x24000ed4
 800a360:	24000eb4 	.word	0x24000eb4
 800a364:	240009dc 	.word	0x240009dc
 800a368:	24000e6c 	.word	0x24000e6c
 800a36c:	240009d8 	.word	0x240009d8
 800a370:	24000ec0 	.word	0x24000ec0

0800a374 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a37e:	4b29      	ldr	r3, [pc, #164]	; (800a424 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	613b      	str	r3, [r7, #16]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	60fb      	str	r3, [r7, #12]
}
 800a3c4:	bf00      	nop
 800a3c6:	e7fe      	b.n	800a3c6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7fe fdf1 	bl	8008fb0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fdec 	bl	8008fb0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	4b12      	ldr	r3, [pc, #72]	; (800a428 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d903      	bls.n	800a3ec <vTaskRemoveFromUnorderedEventList+0x78>
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	4a0f      	ldr	r2, [pc, #60]	; (800a428 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4a0c      	ldr	r2, [pc, #48]	; (800a42c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a3fa:	441a      	add	r2, r3
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f7fe fd77 	bl	8008ef6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	429a      	cmp	r2, r3
 800a414:	d902      	bls.n	800a41c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a416:	4b07      	ldr	r3, [pc, #28]	; (800a434 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a418:	2201      	movs	r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
	}
}
 800a41c:	bf00      	nop
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	24000ed4 	.word	0x24000ed4
 800a428:	24000eb4 	.word	0x24000eb4
 800a42c:	240009dc 	.word	0x240009dc
 800a430:	240009d8 	.word	0x240009d8
 800a434:	24000ec0 	.word	0x24000ec0

0800a438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <vTaskInternalSetTimeOutState+0x24>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a448:	4b05      	ldr	r3, [pc, #20]	; (800a460 <vTaskInternalSetTimeOutState+0x28>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	605a      	str	r2, [r3, #4]
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	24000ec4 	.word	0x24000ec4
 800a460:	24000eb0 	.word	0x24000eb0

0800a464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60fb      	str	r3, [r7, #12]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a4a6:	f000 feb5 	bl	800b214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4aa:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <xTaskCheckForTimeOut+0xbc>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4c2:	d102      	bne.n	800a4ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	e023      	b.n	800a512 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	4b15      	ldr	r3, [pc, #84]	; (800a524 <xTaskCheckForTimeOut+0xc0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d007      	beq.n	800a4e6 <xTaskCheckForTimeOut+0x82>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d302      	bcc.n	800a4e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e015      	b.n	800a512 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d20b      	bcs.n	800a508 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff ff9b 	bl	800a438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a502:	2300      	movs	r3, #0
 800a504:	61fb      	str	r3, [r7, #28]
 800a506:	e004      	b.n	800a512 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a50e:	2301      	movs	r3, #1
 800a510:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a512:	f000 feaf 	bl	800b274 <vPortExitCritical>

	return xReturn;
 800a516:	69fb      	ldr	r3, [r7, #28]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	24000eb0 	.word	0x24000eb0
 800a524:	24000ec4 	.word	0x24000ec4

0800a528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <vTaskMissedYield+0x14>)
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]
}
 800a532:	bf00      	nop
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	24000ec0 	.word	0x24000ec0

0800a540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a548:	f000 f852 	bl	800a5f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <prvIdleTask+0x28>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d9f9      	bls.n	800a548 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <prvIdleTask+0x2c>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a564:	e7f0      	b.n	800a548 <prvIdleTask+0x8>
 800a566:	bf00      	nop
 800a568:	240009dc 	.word	0x240009dc
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a576:	2300      	movs	r3, #0
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	e00c      	b.n	800a596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4a12      	ldr	r2, [pc, #72]	; (800a5d0 <prvInitialiseTaskLists+0x60>)
 800a588:	4413      	add	r3, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fe fc86 	bl	8008e9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3301      	adds	r3, #1
 800a594:	607b      	str	r3, [r7, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b37      	cmp	r3, #55	; 0x37
 800a59a:	d9ef      	bls.n	800a57c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a59c:	480d      	ldr	r0, [pc, #52]	; (800a5d4 <prvInitialiseTaskLists+0x64>)
 800a59e:	f7fe fc7d 	bl	8008e9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5a2:	480d      	ldr	r0, [pc, #52]	; (800a5d8 <prvInitialiseTaskLists+0x68>)
 800a5a4:	f7fe fc7a 	bl	8008e9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5a8:	480c      	ldr	r0, [pc, #48]	; (800a5dc <prvInitialiseTaskLists+0x6c>)
 800a5aa:	f7fe fc77 	bl	8008e9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ae:	480c      	ldr	r0, [pc, #48]	; (800a5e0 <prvInitialiseTaskLists+0x70>)
 800a5b0:	f7fe fc74 	bl	8008e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5b4:	480b      	ldr	r0, [pc, #44]	; (800a5e4 <prvInitialiseTaskLists+0x74>)
 800a5b6:	f7fe fc71 	bl	8008e9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <prvInitialiseTaskLists+0x78>)
 800a5bc:	4a05      	ldr	r2, [pc, #20]	; (800a5d4 <prvInitialiseTaskLists+0x64>)
 800a5be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <prvInitialiseTaskLists+0x7c>)
 800a5c2:	4a05      	ldr	r2, [pc, #20]	; (800a5d8 <prvInitialiseTaskLists+0x68>)
 800a5c4:	601a      	str	r2, [r3, #0]
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	240009dc 	.word	0x240009dc
 800a5d4:	24000e3c 	.word	0x24000e3c
 800a5d8:	24000e50 	.word	0x24000e50
 800a5dc:	24000e6c 	.word	0x24000e6c
 800a5e0:	24000e80 	.word	0x24000e80
 800a5e4:	24000e98 	.word	0x24000e98
 800a5e8:	24000e64 	.word	0x24000e64
 800a5ec:	24000e68 	.word	0x24000e68

0800a5f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5f6:	e019      	b.n	800a62c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5f8:	f000 fe0c 	bl	800b214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5fc:	4b10      	ldr	r3, [pc, #64]	; (800a640 <prvCheckTasksWaitingTermination+0x50>)
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3304      	adds	r3, #4
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe fcd1 	bl	8008fb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <prvCheckTasksWaitingTermination+0x54>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3b01      	subs	r3, #1
 800a614:	4a0b      	ldr	r2, [pc, #44]	; (800a644 <prvCheckTasksWaitingTermination+0x54>)
 800a616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a618:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <prvCheckTasksWaitingTermination+0x58>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a0a      	ldr	r2, [pc, #40]	; (800a648 <prvCheckTasksWaitingTermination+0x58>)
 800a620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a622:	f000 fe27 	bl	800b274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f810 	bl	800a64c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <prvCheckTasksWaitingTermination+0x58>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e1      	bne.n	800a5f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	24000e80 	.word	0x24000e80
 800a644:	24000eac 	.word	0x24000eac
 800a648:	24000e94 	.word	0x24000e94

0800a64c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d108      	bne.n	800a670 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	4618      	mov	r0, r3
 800a664:	f000 ffc4 	bl	800b5f0 <vPortFree>
				vPortFree( pxTCB );
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 ffc1 	bl	800b5f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a66e:	e018      	b.n	800a6a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a676:	2b01      	cmp	r3, #1
 800a678:	d103      	bne.n	800a682 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 ffb8 	bl	800b5f0 <vPortFree>
	}
 800a680:	e00f      	b.n	800a6a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d00a      	beq.n	800a6a2 <prvDeleteTCB+0x56>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60fb      	str	r3, [r7, #12]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <prvDeleteTCB+0x54>
	}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <prvResetNextTaskUnblockTime+0x38>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6bc:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <prvResetNextTaskUnblockTime+0x3c>)
 800a6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6c4:	e008      	b.n	800a6d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c6:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <prvResetNextTaskUnblockTime+0x38>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4a04      	ldr	r2, [pc, #16]	; (800a6e8 <prvResetNextTaskUnblockTime+0x3c>)
 800a6d6:	6013      	str	r3, [r2, #0]
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	24000e64 	.word	0x24000e64
 800a6e8:	24000ecc 	.word	0x24000ecc

0800a6ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6f2:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <xTaskGetSchedulerState+0x34>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	607b      	str	r3, [r7, #4]
 800a6fe:	e008      	b.n	800a712 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a700:	4b08      	ldr	r3, [pc, #32]	; (800a724 <xTaskGetSchedulerState+0x38>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d102      	bne.n	800a70e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a708:	2302      	movs	r3, #2
 800a70a:	607b      	str	r3, [r7, #4]
 800a70c:	e001      	b.n	800a712 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a70e:	2300      	movs	r3, #0
 800a710:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a712:	687b      	ldr	r3, [r7, #4]
	}
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	24000eb8 	.word	0x24000eb8
 800a724:	24000ed4 	.word	0x24000ed4

0800a728 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d056      	beq.n	800a7ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a73e:	4b2e      	ldr	r3, [pc, #184]	; (800a7f8 <xTaskPriorityDisinherit+0xd0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	429a      	cmp	r2, r3
 800a746:	d00a      	beq.n	800a75e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	60fb      	str	r3, [r7, #12]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10a      	bne.n	800a77c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	60bb      	str	r3, [r7, #8]
}
 800a778:	bf00      	nop
 800a77a:	e7fe      	b.n	800a77a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a780:	1e5a      	subs	r2, r3, #1
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78e:	429a      	cmp	r2, r3
 800a790:	d02c      	beq.n	800a7ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a796:	2b00      	cmp	r3, #0
 800a798:	d128      	bne.n	800a7ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fc06 	bl	8008fb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <xTaskPriorityDisinherit+0xd4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d903      	bls.n	800a7cc <xTaskPriorityDisinherit+0xa4>
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	4a0c      	ldr	r2, [pc, #48]	; (800a7fc <xTaskPriorityDisinherit+0xd4>)
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <xTaskPriorityDisinherit+0xd8>)
 800a7da:	441a      	add	r2, r3
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7fe fb87 	bl	8008ef6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7ec:	697b      	ldr	r3, [r7, #20]
	}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	240009d8 	.word	0x240009d8
 800a7fc:	24000eb4 	.word	0x24000eb4
 800a800:	240009dc 	.word	0x240009dc

0800a804 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <uxTaskResetEventItemValue+0x2c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <uxTaskResetEventItemValue+0x2c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <uxTaskResetEventItemValue+0x2c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a820:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a822:	687b      	ldr	r3, [r7, #4]
}
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	240009d8 	.word	0x240009d8

0800a834 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a83e:	4b21      	ldr	r3, [pc, #132]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a844:	4b20      	ldr	r3, [pc, #128]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fbb0 	bl	8008fb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a856:	d10a      	bne.n	800a86e <prvAddCurrentTaskToDelayedList+0x3a>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d007      	beq.n	800a86e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a85e:	4b1a      	ldr	r3, [pc, #104]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3304      	adds	r3, #4
 800a864:	4619      	mov	r1, r3
 800a866:	4819      	ldr	r0, [pc, #100]	; (800a8cc <prvAddCurrentTaskToDelayedList+0x98>)
 800a868:	f7fe fb45 	bl	8008ef6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a86c:	e026      	b.n	800a8bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	429a      	cmp	r2, r3
 800a884:	d209      	bcs.n	800a89a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a886:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3304      	adds	r3, #4
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	f7fe fb53 	bl	8008f3e <vListInsert>
}
 800a898:	e010      	b.n	800a8bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a89a:	4b0e      	ldr	r3, [pc, #56]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f7fe fb49 	bl	8008f3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d202      	bcs.n	800a8bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8b6:	4a08      	ldr	r2, [pc, #32]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6013      	str	r3, [r2, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	24000eb0 	.word	0x24000eb0
 800a8c8:	240009d8 	.word	0x240009d8
 800a8cc:	24000e98 	.word	0x24000e98
 800a8d0:	24000e68 	.word	0x24000e68
 800a8d4:	24000e64 	.word	0x24000e64
 800a8d8:	24000ecc 	.word	0x24000ecc

0800a8dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	; 0x28
 800a8e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8e6:	f000 fb07 	bl	800aef8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8ea:	4b1c      	ldr	r3, [pc, #112]	; (800a95c <xTimerCreateTimerTask+0x80>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d021      	beq.n	800a936 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8fa:	1d3a      	adds	r2, r7, #4
 800a8fc:	f107 0108 	add.w	r1, r7, #8
 800a900:	f107 030c 	add.w	r3, r7, #12
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe f8c1 	bl	8008a8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	9202      	str	r2, [sp, #8]
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	2302      	movs	r3, #2
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	460a      	mov	r2, r1
 800a91c:	4910      	ldr	r1, [pc, #64]	; (800a960 <xTimerCreateTimerTask+0x84>)
 800a91e:	4811      	ldr	r0, [pc, #68]	; (800a964 <xTimerCreateTimerTask+0x88>)
 800a920:	f7ff f85c 	bl	80099dc <xTaskCreateStatic>
 800a924:	4603      	mov	r3, r0
 800a926:	4a10      	ldr	r2, [pc, #64]	; (800a968 <xTimerCreateTimerTask+0x8c>)
 800a928:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a92a:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <xTimerCreateTimerTask+0x8c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a932:	2301      	movs	r3, #1
 800a934:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10a      	bne.n	800a952 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	613b      	str	r3, [r7, #16]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a952:	697b      	ldr	r3, [r7, #20]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	24000f08 	.word	0x24000f08
 800a960:	0800c48c 	.word	0x0800c48c
 800a964:	0800aaa1 	.word	0x0800aaa1
 800a968:	24000f0c 	.word	0x24000f0c

0800a96c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	; 0x28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	623b      	str	r3, [r7, #32]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a99a:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <xTimerGenericCommand+0x98>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d02a      	beq.n	800a9f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	dc18      	bgt.n	800a9e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9b4:	f7ff fe9a 	bl	800a6ec <xTaskGetSchedulerState>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d109      	bne.n	800a9d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9be:	4b11      	ldr	r3, [pc, #68]	; (800aa04 <xTimerGenericCommand+0x98>)
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f107 0110 	add.w	r1, r7, #16
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9ca:	f7fe fc1f 	bl	800920c <xQueueGenericSend>
 800a9ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a9d0:	e012      	b.n	800a9f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	; (800aa04 <xTimerGenericCommand+0x98>)
 800a9d4:	6818      	ldr	r0, [r3, #0]
 800a9d6:	f107 0110 	add.w	r1, r7, #16
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f7fe fc15 	bl	800920c <xQueueGenericSend>
 800a9e2:	6278      	str	r0, [r7, #36]	; 0x24
 800a9e4:	e008      	b.n	800a9f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9e6:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <xTimerGenericCommand+0x98>)
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	f107 0110 	add.w	r1, r7, #16
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	f7fe fd09 	bl	8009408 <xQueueGenericSendFromISR>
 800a9f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3728      	adds	r7, #40	; 0x28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	24000f08 	.word	0x24000f08

0800aa08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa12:	4b22      	ldr	r3, [pc, #136]	; (800aa9c <prvProcessExpiredTimer+0x94>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fac5 	bl	8008fb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d022      	beq.n	800aa7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	699a      	ldr	r2, [r3, #24]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	18d1      	adds	r1, r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	6978      	ldr	r0, [r7, #20]
 800aa42:	f000 f8d1 	bl	800abe8 <prvInsertTimerInActiveList>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d01f      	beq.n	800aa8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	2300      	movs	r3, #0
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	2100      	movs	r1, #0
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f7ff ff88 	bl	800a96c <xTimerGenericCommand>
 800aa5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d113      	bne.n	800aa8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	60fb      	str	r3, [r7, #12]
}
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa80:	f023 0301 	bic.w	r3, r3, #1
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	4798      	blx	r3
}
 800aa94:	bf00      	nop
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	24000f00 	.word	0x24000f00

0800aaa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaa8:	f107 0308 	add.w	r3, r7, #8
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f857 	bl	800ab60 <prvGetNextExpireTime>
 800aab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	4619      	mov	r1, r3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f803 	bl	800aac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aabe:	f000 f8d5 	bl	800ac6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aac2:	e7f1      	b.n	800aaa8 <prvTimerTask+0x8>

0800aac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aace:	f7ff f98d 	bl	8009dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 f866 	bl	800aba8 <prvSampleTimeNow>
 800aadc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d130      	bne.n	800ab46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <prvProcessTimerOrBlockTask+0x3c>
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d806      	bhi.n	800ab00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaf2:	f7ff f989 	bl	8009e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aaf6:	68f9      	ldr	r1, [r7, #12]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff ff85 	bl	800aa08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aafe:	e024      	b.n	800ab4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d008      	beq.n	800ab18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab06:	4b13      	ldr	r3, [pc, #76]	; (800ab54 <prvProcessTimerOrBlockTask+0x90>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d101      	bne.n	800ab14 <prvProcessTimerOrBlockTask+0x50>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <prvProcessTimerOrBlockTask+0x52>
 800ab14:	2300      	movs	r3, #0
 800ab16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab18:	4b0f      	ldr	r3, [pc, #60]	; (800ab58 <prvProcessTimerOrBlockTask+0x94>)
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	4619      	mov	r1, r3
 800ab26:	f7fe ff25 	bl	8009974 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab2a:	f7ff f96d 	bl	8009e08 <xTaskResumeAll>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab34:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <prvProcessTimerOrBlockTask+0x98>)
 800ab36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	f3bf 8f6f 	isb	sy
}
 800ab44:	e001      	b.n	800ab4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab46:	f7ff f95f 	bl	8009e08 <xTaskResumeAll>
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	24000f04 	.word	0x24000f04
 800ab58:	24000f08 	.word	0x24000f08
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab68:	4b0e      	ldr	r3, [pc, #56]	; (800aba4 <prvGetNextExpireTime+0x44>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <prvGetNextExpireTime+0x16>
 800ab72:	2201      	movs	r2, #1
 800ab74:	e000      	b.n	800ab78 <prvGetNextExpireTime+0x18>
 800ab76:	2200      	movs	r2, #0
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d105      	bne.n	800ab90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab84:	4b07      	ldr	r3, [pc, #28]	; (800aba4 <prvGetNextExpireTime+0x44>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	e001      	b.n	800ab94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab94:	68fb      	ldr	r3, [r7, #12]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	24000f00 	.word	0x24000f00

0800aba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abb0:	f7ff f9c8 	bl	8009f44 <xTaskGetTickCount>
 800abb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <prvSampleTimeNow+0x3c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d205      	bcs.n	800abcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abc0:	f000 f936 	bl	800ae30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	e002      	b.n	800abd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abd2:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <prvSampleTimeNow+0x3c>)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abd8:	68fb      	ldr	r3, [r7, #12]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	24000f10 	.word	0x24000f10

0800abe8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d812      	bhi.n	800ac34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	1ad2      	subs	r2, r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d302      	bcc.n	800ac22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e01b      	b.n	800ac5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac22:	4b10      	ldr	r3, [pc, #64]	; (800ac64 <prvInsertTimerInActiveList+0x7c>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7fe f986 	bl	8008f3e <vListInsert>
 800ac32:	e012      	b.n	800ac5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d206      	bcs.n	800ac4a <prvInsertTimerInActiveList+0x62>
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d302      	bcc.n	800ac4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac44:	2301      	movs	r3, #1
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	e007      	b.n	800ac5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac4a:	4b07      	ldr	r3, [pc, #28]	; (800ac68 <prvInsertTimerInActiveList+0x80>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4619      	mov	r1, r3
 800ac54:	4610      	mov	r0, r2
 800ac56:	f7fe f972 	bl	8008f3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac5a:	697b      	ldr	r3, [r7, #20]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	24000f04 	.word	0x24000f04
 800ac68:	24000f00 	.word	0x24000f00

0800ac6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08e      	sub	sp, #56	; 0x38
 800ac70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac72:	e0ca      	b.n	800ae0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	da18      	bge.n	800acac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac7a:	1d3b      	adds	r3, r7, #4
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	61fb      	str	r3, [r7, #28]
}
 800ac98:	bf00      	nop
 800ac9a:	e7fe      	b.n	800ac9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca2:	6850      	ldr	r0, [r2, #4]
 800aca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca6:	6892      	ldr	r2, [r2, #8]
 800aca8:	4611      	mov	r1, r2
 800acaa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f2c0 80aa 	blt.w	800ae08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d004      	beq.n	800acca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	3304      	adds	r3, #4
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe f973 	bl	8008fb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acca:	463b      	mov	r3, r7
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff ff6b 	bl	800aba8 <prvSampleTimeNow>
 800acd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b09      	cmp	r3, #9
 800acd8:	f200 8097 	bhi.w	800ae0a <prvProcessReceivedCommands+0x19e>
 800acdc:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <prvProcessReceivedCommands+0x78>)
 800acde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace2:	bf00      	nop
 800ace4:	0800ad0d 	.word	0x0800ad0d
 800ace8:	0800ad0d 	.word	0x0800ad0d
 800acec:	0800ad0d 	.word	0x0800ad0d
 800acf0:	0800ad81 	.word	0x0800ad81
 800acf4:	0800ad95 	.word	0x0800ad95
 800acf8:	0800addf 	.word	0x0800addf
 800acfc:	0800ad0d 	.word	0x0800ad0d
 800ad00:	0800ad0d 	.word	0x0800ad0d
 800ad04:	0800ad81 	.word	0x0800ad81
 800ad08:	0800ad95 	.word	0x0800ad95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad12:	f043 0301 	orr.w	r3, r3, #1
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	18d1      	adds	r1, r2, r3
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2c:	f7ff ff5c 	bl	800abe8 <prvInsertTimerInActiveList>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d069      	beq.n	800ae0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d05e      	beq.n	800ae0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	441a      	add	r2, r3
 800ad54:	2300      	movs	r3, #0
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad5e:	f7ff fe05 	bl	800a96c <xTimerGenericCommand>
 800ad62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d14f      	bne.n	800ae0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	61bb      	str	r3, [r7, #24]
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad86:	f023 0301 	bic.w	r3, r3, #1
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad92:	e03a      	b.n	800ae0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad9a:	f043 0301 	orr.w	r3, r3, #1
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10a      	bne.n	800adca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	617b      	str	r3, [r7, #20]
}
 800adc6:	bf00      	nop
 800adc8:	e7fe      	b.n	800adc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	699a      	ldr	r2, [r3, #24]
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	18d1      	adds	r1, r2, r3
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add8:	f7ff ff06 	bl	800abe8 <prvInsertTimerInActiveList>
					break;
 800addc:	e015      	b.n	800ae0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800adec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adee:	f000 fbff 	bl	800b5f0 <vPortFree>
 800adf2:	e00a      	b.n	800ae0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adfa:	f023 0301 	bic.w	r3, r3, #1
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae06:	e000      	b.n	800ae0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ae08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae0a:	4b08      	ldr	r3, [pc, #32]	; (800ae2c <prvProcessReceivedCommands+0x1c0>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	1d39      	adds	r1, r7, #4
 800ae10:	2200      	movs	r2, #0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe fb94 	bl	8009540 <xQueueReceive>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f47f af2a 	bne.w	800ac74 <prvProcessReceivedCommands+0x8>
	}
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	3730      	adds	r7, #48	; 0x30
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	24000f08 	.word	0x24000f08

0800ae30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae36:	e048      	b.n	800aeca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae38:	4b2d      	ldr	r3, [pc, #180]	; (800aef0 <prvSwitchTimerLists+0xc0>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae42:	4b2b      	ldr	r3, [pc, #172]	; (800aef0 <prvSwitchTimerLists+0xc0>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe f8ad 	bl	8008fb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d02e      	beq.n	800aeca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	4413      	add	r3, r2
 800ae74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d90e      	bls.n	800ae9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae8a:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <prvSwitchTimerLists+0xc0>)
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f7fe f852 	bl	8008f3e <vListInsert>
 800ae9a:	e016      	b.n	800aeca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	2300      	movs	r3, #0
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	2100      	movs	r1, #0
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fd60 	bl	800a96c <xTimerGenericCommand>
 800aeac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10a      	bne.n	800aeca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	603b      	str	r3, [r7, #0]
}
 800aec6:	bf00      	nop
 800aec8:	e7fe      	b.n	800aec8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aeca:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <prvSwitchTimerLists+0xc0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1b1      	bne.n	800ae38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <prvSwitchTimerLists+0xc0>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aeda:	4b06      	ldr	r3, [pc, #24]	; (800aef4 <prvSwitchTimerLists+0xc4>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a04      	ldr	r2, [pc, #16]	; (800aef0 <prvSwitchTimerLists+0xc0>)
 800aee0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aee2:	4a04      	ldr	r2, [pc, #16]	; (800aef4 <prvSwitchTimerLists+0xc4>)
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	6013      	str	r3, [r2, #0]
}
 800aee8:	bf00      	nop
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	24000f00 	.word	0x24000f00
 800aef4:	24000f04 	.word	0x24000f04

0800aef8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aefe:	f000 f989 	bl	800b214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <prvCheckForValidListAndQueue+0x60>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d120      	bne.n	800af4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af0a:	4814      	ldr	r0, [pc, #80]	; (800af5c <prvCheckForValidListAndQueue+0x64>)
 800af0c:	f7fd ffc6 	bl	8008e9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af10:	4813      	ldr	r0, [pc, #76]	; (800af60 <prvCheckForValidListAndQueue+0x68>)
 800af12:	f7fd ffc3 	bl	8008e9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af16:	4b13      	ldr	r3, [pc, #76]	; (800af64 <prvCheckForValidListAndQueue+0x6c>)
 800af18:	4a10      	ldr	r2, [pc, #64]	; (800af5c <prvCheckForValidListAndQueue+0x64>)
 800af1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af1c:	4b12      	ldr	r3, [pc, #72]	; (800af68 <prvCheckForValidListAndQueue+0x70>)
 800af1e:	4a10      	ldr	r2, [pc, #64]	; (800af60 <prvCheckForValidListAndQueue+0x68>)
 800af20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af22:	2300      	movs	r3, #0
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	4b11      	ldr	r3, [pc, #68]	; (800af6c <prvCheckForValidListAndQueue+0x74>)
 800af28:	4a11      	ldr	r2, [pc, #68]	; (800af70 <prvCheckForValidListAndQueue+0x78>)
 800af2a:	2110      	movs	r1, #16
 800af2c:	200a      	movs	r0, #10
 800af2e:	f7fe f8d1 	bl	80090d4 <xQueueGenericCreateStatic>
 800af32:	4603      	mov	r3, r0
 800af34:	4a08      	ldr	r2, [pc, #32]	; (800af58 <prvCheckForValidListAndQueue+0x60>)
 800af36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af38:	4b07      	ldr	r3, [pc, #28]	; (800af58 <prvCheckForValidListAndQueue+0x60>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d005      	beq.n	800af4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af40:	4b05      	ldr	r3, [pc, #20]	; (800af58 <prvCheckForValidListAndQueue+0x60>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	490b      	ldr	r1, [pc, #44]	; (800af74 <prvCheckForValidListAndQueue+0x7c>)
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fcea 	bl	8009920 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af4c:	f000 f992 	bl	800b274 <vPortExitCritical>
}
 800af50:	bf00      	nop
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	24000f08 	.word	0x24000f08
 800af5c:	24000ed8 	.word	0x24000ed8
 800af60:	24000eec 	.word	0x24000eec
 800af64:	24000f00 	.word	0x24000f00
 800af68:	24000f04 	.word	0x24000f04
 800af6c:	24000fb4 	.word	0x24000fb4
 800af70:	24000f14 	.word	0x24000f14
 800af74:	0800c494 	.word	0x0800c494

0800af78 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08a      	sub	sp, #40	; 0x28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800af86:	f06f 0301 	mvn.w	r3, #1
 800af8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af98:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <xTimerPendFunctionCallFromISR+0x3c>)
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	f107 0114 	add.w	r1, r7, #20
 800afa0:	2300      	movs	r3, #0
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	f7fe fa30 	bl	8009408 <xQueueGenericSendFromISR>
 800afa8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800afac:	4618      	mov	r0, r3
 800afae:	3728      	adds	r7, #40	; 0x28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	24000f08 	.word	0x24000f08

0800afb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3b04      	subs	r3, #4
 800afc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800afd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3b04      	subs	r3, #4
 800afd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f023 0201 	bic.w	r2, r3, #1
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3b04      	subs	r3, #4
 800afe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afe8:	4a0c      	ldr	r2, [pc, #48]	; (800b01c <pxPortInitialiseStack+0x64>)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3b14      	subs	r3, #20
 800aff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3b04      	subs	r3, #4
 800affe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f06f 0202 	mvn.w	r2, #2
 800b006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3b20      	subs	r3, #32
 800b00c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b00e:	68fb      	ldr	r3, [r7, #12]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	0800b021 	.word	0x0800b021

0800b020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b02a:	4b12      	ldr	r3, [pc, #72]	; (800b074 <prvTaskExitError+0x54>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b032:	d00a      	beq.n	800b04a <prvTaskExitError+0x2a>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	60fb      	str	r3, [r7, #12]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <prvTaskExitError+0x28>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	60bb      	str	r3, [r7, #8]
}
 800b05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b05e:	bf00      	nop
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d0fc      	beq.n	800b060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b066:	bf00      	nop
 800b068:	bf00      	nop
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	24000010 	.word	0x24000010
	...

0800b080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b080:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <pxCurrentTCBConst2>)
 800b082:	6819      	ldr	r1, [r3, #0]
 800b084:	6808      	ldr	r0, [r1, #0]
 800b086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08a:	f380 8809 	msr	PSP, r0
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f04f 0000 	mov.w	r0, #0
 800b096:	f380 8811 	msr	BASEPRI, r0
 800b09a:	4770      	bx	lr
 800b09c:	f3af 8000 	nop.w

0800b0a0 <pxCurrentTCBConst2>:
 800b0a0:	240009d8 	.word	0x240009d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop

0800b0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0a8:	4808      	ldr	r0, [pc, #32]	; (800b0cc <prvPortStartFirstTask+0x24>)
 800b0aa:	6800      	ldr	r0, [r0, #0]
 800b0ac:	6800      	ldr	r0, [r0, #0]
 800b0ae:	f380 8808 	msr	MSP, r0
 800b0b2:	f04f 0000 	mov.w	r0, #0
 800b0b6:	f380 8814 	msr	CONTROL, r0
 800b0ba:	b662      	cpsie	i
 800b0bc:	b661      	cpsie	f
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	df00      	svc	0
 800b0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0ca:	bf00      	nop
 800b0cc:	e000ed08 	.word	0xe000ed08

0800b0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0d6:	4b46      	ldr	r3, [pc, #280]	; (800b1f0 <xPortStartScheduler+0x120>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a46      	ldr	r2, [pc, #280]	; (800b1f4 <xPortStartScheduler+0x124>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d10a      	bne.n	800b0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	613b      	str	r3, [r7, #16]
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0f6:	4b3e      	ldr	r3, [pc, #248]	; (800b1f0 <xPortStartScheduler+0x120>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a3f      	ldr	r2, [pc, #252]	; (800b1f8 <xPortStartScheduler+0x128>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d10a      	bne.n	800b116 <xPortStartScheduler+0x46>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	60fb      	str	r3, [r7, #12]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b116:	4b39      	ldr	r3, [pc, #228]	; (800b1fc <xPortStartScheduler+0x12c>)
 800b118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	22ff      	movs	r2, #255	; 0xff
 800b126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	4b31      	ldr	r3, [pc, #196]	; (800b200 <xPortStartScheduler+0x130>)
 800b13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b13e:	4b31      	ldr	r3, [pc, #196]	; (800b204 <xPortStartScheduler+0x134>)
 800b140:	2207      	movs	r2, #7
 800b142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b144:	e009      	b.n	800b15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b146:	4b2f      	ldr	r3, [pc, #188]	; (800b204 <xPortStartScheduler+0x134>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	4a2d      	ldr	r2, [pc, #180]	; (800b204 <xPortStartScheduler+0x134>)
 800b14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	005b      	lsls	r3, r3, #1
 800b156:	b2db      	uxtb	r3, r3
 800b158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b15a:	78fb      	ldrb	r3, [r7, #3]
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b162:	2b80      	cmp	r3, #128	; 0x80
 800b164:	d0ef      	beq.n	800b146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b166:	4b27      	ldr	r3, [pc, #156]	; (800b204 <xPortStartScheduler+0x134>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f1c3 0307 	rsb	r3, r3, #7
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d00a      	beq.n	800b188 <xPortStartScheduler+0xb8>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	60bb      	str	r3, [r7, #8]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b188:	4b1e      	ldr	r3, [pc, #120]	; (800b204 <xPortStartScheduler+0x134>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	4a1d      	ldr	r2, [pc, #116]	; (800b204 <xPortStartScheduler+0x134>)
 800b190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b192:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <xPortStartScheduler+0x134>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b19a:	4a1a      	ldr	r2, [pc, #104]	; (800b204 <xPortStartScheduler+0x134>)
 800b19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1a6:	4b18      	ldr	r3, [pc, #96]	; (800b208 <xPortStartScheduler+0x138>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a17      	ldr	r2, [pc, #92]	; (800b208 <xPortStartScheduler+0x138>)
 800b1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <xPortStartScheduler+0x138>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a14      	ldr	r2, [pc, #80]	; (800b208 <xPortStartScheduler+0x138>)
 800b1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1be:	f000 f8dd 	bl	800b37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1c2:	4b12      	ldr	r3, [pc, #72]	; (800b20c <xPortStartScheduler+0x13c>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1c8:	f000 f8fc 	bl	800b3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1cc:	4b10      	ldr	r3, [pc, #64]	; (800b210 <xPortStartScheduler+0x140>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a0f      	ldr	r2, [pc, #60]	; (800b210 <xPortStartScheduler+0x140>)
 800b1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1d8:	f7ff ff66 	bl	800b0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1dc:	f7fe ff7c 	bl	800a0d8 <vTaskSwitchContext>
	prvTaskExitError();
 800b1e0:	f7ff ff1e 	bl	800b020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	e000ed00 	.word	0xe000ed00
 800b1f4:	410fc271 	.word	0x410fc271
 800b1f8:	410fc270 	.word	0x410fc270
 800b1fc:	e000e400 	.word	0xe000e400
 800b200:	24001004 	.word	0x24001004
 800b204:	24001008 	.word	0x24001008
 800b208:	e000ed20 	.word	0xe000ed20
 800b20c:	24000010 	.word	0x24000010
 800b210:	e000ef34 	.word	0xe000ef34

0800b214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	607b      	str	r3, [r7, #4]
}
 800b22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b22e:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <vPortEnterCritical+0x58>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	4a0d      	ldr	r2, [pc, #52]	; (800b26c <vPortEnterCritical+0x58>)
 800b236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b238:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <vPortEnterCritical+0x58>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d10f      	bne.n	800b260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <vPortEnterCritical+0x5c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <vPortEnterCritical+0x4c>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	603b      	str	r3, [r7, #0]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <vPortEnterCritical+0x4a>
	}
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	24000010 	.word	0x24000010
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b27a:	4b12      	ldr	r3, [pc, #72]	; (800b2c4 <vPortExitCritical+0x50>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10a      	bne.n	800b298 <vPortExitCritical+0x24>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	607b      	str	r3, [r7, #4]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b298:	4b0a      	ldr	r3, [pc, #40]	; (800b2c4 <vPortExitCritical+0x50>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	4a09      	ldr	r2, [pc, #36]	; (800b2c4 <vPortExitCritical+0x50>)
 800b2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2a2:	4b08      	ldr	r3, [pc, #32]	; (800b2c4 <vPortExitCritical+0x50>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <vPortExitCritical+0x42>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	f383 8811 	msr	BASEPRI, r3
}
 800b2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2b6:	bf00      	nop
 800b2b8:	370c      	adds	r7, #12
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	24000010 	.word	0x24000010
	...

0800b2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2d0:	f3ef 8009 	mrs	r0, PSP
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	4b15      	ldr	r3, [pc, #84]	; (800b330 <pxCurrentTCBConst>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	f01e 0f10 	tst.w	lr, #16
 800b2e0:	bf08      	it	eq
 800b2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ea:	6010      	str	r0, [r2, #0]
 800b2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b2f4:	f380 8811 	msr	BASEPRI, r0
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f7fe feea 	bl	800a0d8 <vTaskSwitchContext>
 800b304:	f04f 0000 	mov.w	r0, #0
 800b308:	f380 8811 	msr	BASEPRI, r0
 800b30c:	bc09      	pop	{r0, r3}
 800b30e:	6819      	ldr	r1, [r3, #0]
 800b310:	6808      	ldr	r0, [r1, #0]
 800b312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b316:	f01e 0f10 	tst.w	lr, #16
 800b31a:	bf08      	it	eq
 800b31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b320:	f380 8809 	msr	PSP, r0
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	f3af 8000 	nop.w

0800b330 <pxCurrentTCBConst>:
 800b330:	240009d8 	.word	0x240009d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b334:	bf00      	nop
 800b336:	bf00      	nop

0800b338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	607b      	str	r3, [r7, #4]
}
 800b350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b352:	f7fe fe07 	bl	8009f64 <xTaskIncrementTick>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b35c:	4b06      	ldr	r3, [pc, #24]	; (800b378 <xPortSysTickHandler+0x40>)
 800b35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	2300      	movs	r3, #0
 800b366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	f383 8811 	msr	BASEPRI, r3
}
 800b36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b380:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <vPortSetupTimerInterrupt+0x34>)
 800b382:	2200      	movs	r2, #0
 800b384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b386:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <vPortSetupTimerInterrupt+0x38>)
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b38c:	4b0a      	ldr	r3, [pc, #40]	; (800b3b8 <vPortSetupTimerInterrupt+0x3c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <vPortSetupTimerInterrupt+0x40>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	099b      	lsrs	r3, r3, #6
 800b398:	4a09      	ldr	r2, [pc, #36]	; (800b3c0 <vPortSetupTimerInterrupt+0x44>)
 800b39a:	3b01      	subs	r3, #1
 800b39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b39e:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <vPortSetupTimerInterrupt+0x34>)
 800b3a0:	2207      	movs	r2, #7
 800b3a2:	601a      	str	r2, [r3, #0]
}
 800b3a4:	bf00      	nop
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	e000e010 	.word	0xe000e010
 800b3b4:	e000e018 	.word	0xe000e018
 800b3b8:	24000000 	.word	0x24000000
 800b3bc:	10624dd3 	.word	0x10624dd3
 800b3c0:	e000e014 	.word	0xe000e014

0800b3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3d4 <vPortEnableVFP+0x10>
 800b3c8:	6801      	ldr	r1, [r0, #0]
 800b3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3ce:	6001      	str	r1, [r0, #0]
 800b3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3d2:	bf00      	nop
 800b3d4:	e000ed88 	.word	0xe000ed88

0800b3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3de:	f3ef 8305 	mrs	r3, IPSR
 800b3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b0f      	cmp	r3, #15
 800b3e8:	d914      	bls.n	800b414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3ea:	4a17      	ldr	r2, [pc, #92]	; (800b448 <vPortValidateInterruptPriority+0x70>)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3f4:	4b15      	ldr	r3, [pc, #84]	; (800b44c <vPortValidateInterruptPriority+0x74>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	7afa      	ldrb	r2, [r7, #11]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d20a      	bcs.n	800b414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	607b      	str	r3, [r7, #4]
}
 800b410:	bf00      	nop
 800b412:	e7fe      	b.n	800b412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b414:	4b0e      	ldr	r3, [pc, #56]	; (800b450 <vPortValidateInterruptPriority+0x78>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <vPortValidateInterruptPriority+0x7c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	429a      	cmp	r2, r3
 800b422:	d90a      	bls.n	800b43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	603b      	str	r3, [r7, #0]
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <vPortValidateInterruptPriority+0x60>
	}
 800b43a:	bf00      	nop
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	e000e3f0 	.word	0xe000e3f0
 800b44c:	24001004 	.word	0x24001004
 800b450:	e000ed0c 	.word	0xe000ed0c
 800b454:	24001008 	.word	0x24001008

0800b458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	; 0x28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b460:	2300      	movs	r3, #0
 800b462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b464:	f7fe fcc2 	bl	8009dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b468:	4b5b      	ldr	r3, [pc, #364]	; (800b5d8 <pvPortMalloc+0x180>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b470:	f000 f920 	bl	800b6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b474:	4b59      	ldr	r3, [pc, #356]	; (800b5dc <pvPortMalloc+0x184>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4013      	ands	r3, r2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f040 8093 	bne.w	800b5a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d01d      	beq.n	800b4c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b488:	2208      	movs	r2, #8
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4413      	add	r3, r2
 800b48e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f003 0307 	and.w	r3, r3, #7
 800b496:	2b00      	cmp	r3, #0
 800b498:	d014      	beq.n	800b4c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f023 0307 	bic.w	r3, r3, #7
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00a      	beq.n	800b4c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	617b      	str	r3, [r7, #20]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d06e      	beq.n	800b5a8 <pvPortMalloc+0x150>
 800b4ca:	4b45      	ldr	r3, [pc, #276]	; (800b5e0 <pvPortMalloc+0x188>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d869      	bhi.n	800b5a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4d4:	4b43      	ldr	r3, [pc, #268]	; (800b5e4 <pvPortMalloc+0x18c>)
 800b4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4d8:	4b42      	ldr	r3, [pc, #264]	; (800b5e4 <pvPortMalloc+0x18c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4de:	e004      	b.n	800b4ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d903      	bls.n	800b4fc <pvPortMalloc+0xa4>
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1f1      	bne.n	800b4e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4fc:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <pvPortMalloc+0x180>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b502:	429a      	cmp	r2, r3
 800b504:	d050      	beq.n	800b5a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2208      	movs	r2, #8
 800b50c:	4413      	add	r3, r2
 800b50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	1ad2      	subs	r2, r2, r3
 800b520:	2308      	movs	r3, #8
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	429a      	cmp	r2, r3
 800b526:	d91f      	bls.n	800b568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4413      	add	r3, r2
 800b52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f003 0307 	and.w	r3, r3, #7
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00a      	beq.n	800b550 <pvPortMalloc+0xf8>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	613b      	str	r3, [r7, #16]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	1ad2      	subs	r2, r2, r3
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b562:	69b8      	ldr	r0, [r7, #24]
 800b564:	f000 f908 	bl	800b778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b568:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <pvPortMalloc+0x188>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	4a1b      	ldr	r2, [pc, #108]	; (800b5e0 <pvPortMalloc+0x188>)
 800b574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b576:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <pvPortMalloc+0x188>)
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	4b1b      	ldr	r3, [pc, #108]	; (800b5e8 <pvPortMalloc+0x190>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d203      	bcs.n	800b58a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b582:	4b17      	ldr	r3, [pc, #92]	; (800b5e0 <pvPortMalloc+0x188>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a18      	ldr	r2, [pc, #96]	; (800b5e8 <pvPortMalloc+0x190>)
 800b588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <pvPortMalloc+0x184>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	431a      	orrs	r2, r3
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b59e:	4b13      	ldr	r3, [pc, #76]	; (800b5ec <pvPortMalloc+0x194>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	4a11      	ldr	r2, [pc, #68]	; (800b5ec <pvPortMalloc+0x194>)
 800b5a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5a8:	f7fe fc2e 	bl	8009e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	f003 0307 	and.w	r3, r3, #7
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00a      	beq.n	800b5cc <pvPortMalloc+0x174>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60fb      	str	r3, [r7, #12]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <pvPortMalloc+0x172>
	return pvReturn;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3728      	adds	r7, #40	; 0x28
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	24004c14 	.word	0x24004c14
 800b5dc:	24004c28 	.word	0x24004c28
 800b5e0:	24004c18 	.word	0x24004c18
 800b5e4:	24004c0c 	.word	0x24004c0c
 800b5e8:	24004c1c 	.word	0x24004c1c
 800b5ec:	24004c20 	.word	0x24004c20

0800b5f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d04d      	beq.n	800b69e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b602:	2308      	movs	r3, #8
 800b604:	425b      	negs	r3, r3
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	4413      	add	r3, r2
 800b60a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	4b24      	ldr	r3, [pc, #144]	; (800b6a8 <vPortFree+0xb8>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4013      	ands	r3, r2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10a      	bne.n	800b634 <vPortFree+0x44>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	60fb      	str	r3, [r7, #12]
}
 800b630:	bf00      	nop
 800b632:	e7fe      	b.n	800b632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00a      	beq.n	800b652 <vPortFree+0x62>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	60bb      	str	r3, [r7, #8]
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	4b14      	ldr	r3, [pc, #80]	; (800b6a8 <vPortFree+0xb8>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d01e      	beq.n	800b69e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d11a      	bne.n	800b69e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	4b0e      	ldr	r3, [pc, #56]	; (800b6a8 <vPortFree+0xb8>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	43db      	mvns	r3, r3
 800b672:	401a      	ands	r2, r3
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b678:	f7fe fbb8 	bl	8009dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <vPortFree+0xbc>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4413      	add	r3, r2
 800b686:	4a09      	ldr	r2, [pc, #36]	; (800b6ac <vPortFree+0xbc>)
 800b688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b68a:	6938      	ldr	r0, [r7, #16]
 800b68c:	f000 f874 	bl	800b778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b690:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <vPortFree+0xc0>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	4a06      	ldr	r2, [pc, #24]	; (800b6b0 <vPortFree+0xc0>)
 800b698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b69a:	f7fe fbb5 	bl	8009e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b69e:	bf00      	nop
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	24004c28 	.word	0x24004c28
 800b6ac:	24004c18 	.word	0x24004c18
 800b6b0:	24004c24 	.word	0x24004c24

0800b6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6c0:	4b27      	ldr	r3, [pc, #156]	; (800b760 <prvHeapInit+0xac>)
 800b6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00c      	beq.n	800b6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3307      	adds	r3, #7
 800b6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f023 0307 	bic.w	r3, r3, #7
 800b6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	4a1f      	ldr	r2, [pc, #124]	; (800b760 <prvHeapInit+0xac>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6ec:	4a1d      	ldr	r2, [pc, #116]	; (800b764 <prvHeapInit+0xb0>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6f2:	4b1c      	ldr	r3, [pc, #112]	; (800b764 <prvHeapInit+0xb0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b700:	2208      	movs	r2, #8
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	1a9b      	subs	r3, r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 0307 	bic.w	r3, r3, #7
 800b70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4a15      	ldr	r2, [pc, #84]	; (800b768 <prvHeapInit+0xb4>)
 800b714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b716:	4b14      	ldr	r3, [pc, #80]	; (800b768 <prvHeapInit+0xb4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2200      	movs	r2, #0
 800b71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b71e:	4b12      	ldr	r3, [pc, #72]	; (800b768 <prvHeapInit+0xb4>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b734:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <prvHeapInit+0xb4>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	4a0a      	ldr	r2, [pc, #40]	; (800b76c <prvHeapInit+0xb8>)
 800b742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	4a09      	ldr	r2, [pc, #36]	; (800b770 <prvHeapInit+0xbc>)
 800b74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b74c:	4b09      	ldr	r3, [pc, #36]	; (800b774 <prvHeapInit+0xc0>)
 800b74e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b752:	601a      	str	r2, [r3, #0]
}
 800b754:	bf00      	nop
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	2400100c 	.word	0x2400100c
 800b764:	24004c0c 	.word	0x24004c0c
 800b768:	24004c14 	.word	0x24004c14
 800b76c:	24004c1c 	.word	0x24004c1c
 800b770:	24004c18 	.word	0x24004c18
 800b774:	24004c28 	.word	0x24004c28

0800b778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b780:	4b28      	ldr	r3, [pc, #160]	; (800b824 <prvInsertBlockIntoFreeList+0xac>)
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e002      	b.n	800b78c <prvInsertBlockIntoFreeList+0x14>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d8f7      	bhi.n	800b786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d108      	bne.n	800b7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	441a      	add	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	441a      	add	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d118      	bne.n	800b800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <prvInsertBlockIntoFreeList+0xb0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d00d      	beq.n	800b7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	441a      	add	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	601a      	str	r2, [r3, #0]
 800b7f4:	e008      	b.n	800b808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7f6:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	e003      	b.n	800b808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d002      	beq.n	800b816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b816:	bf00      	nop
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	24004c0c 	.word	0x24004c0c
 800b828:	24004c14 	.word	0x24004c14

0800b82c <__errno>:
 800b82c:	4b01      	ldr	r3, [pc, #4]	; (800b834 <__errno+0x8>)
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	24000014 	.word	0x24000014

0800b838 <__libc_init_array>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	4d0d      	ldr	r5, [pc, #52]	; (800b870 <__libc_init_array+0x38>)
 800b83c:	4c0d      	ldr	r4, [pc, #52]	; (800b874 <__libc_init_array+0x3c>)
 800b83e:	1b64      	subs	r4, r4, r5
 800b840:	10a4      	asrs	r4, r4, #2
 800b842:	2600      	movs	r6, #0
 800b844:	42a6      	cmp	r6, r4
 800b846:	d109      	bne.n	800b85c <__libc_init_array+0x24>
 800b848:	4d0b      	ldr	r5, [pc, #44]	; (800b878 <__libc_init_array+0x40>)
 800b84a:	4c0c      	ldr	r4, [pc, #48]	; (800b87c <__libc_init_array+0x44>)
 800b84c:	f000 fd2c 	bl	800c2a8 <_init>
 800b850:	1b64      	subs	r4, r4, r5
 800b852:	10a4      	asrs	r4, r4, #2
 800b854:	2600      	movs	r6, #0
 800b856:	42a6      	cmp	r6, r4
 800b858:	d105      	bne.n	800b866 <__libc_init_array+0x2e>
 800b85a:	bd70      	pop	{r4, r5, r6, pc}
 800b85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b860:	4798      	blx	r3
 800b862:	3601      	adds	r6, #1
 800b864:	e7ee      	b.n	800b844 <__libc_init_array+0xc>
 800b866:	f855 3b04 	ldr.w	r3, [r5], #4
 800b86a:	4798      	blx	r3
 800b86c:	3601      	adds	r6, #1
 800b86e:	e7f2      	b.n	800b856 <__libc_init_array+0x1e>
 800b870:	0800c5d0 	.word	0x0800c5d0
 800b874:	0800c5d0 	.word	0x0800c5d0
 800b878:	0800c5d0 	.word	0x0800c5d0
 800b87c:	0800c5d4 	.word	0x0800c5d4

0800b880 <memcpy>:
 800b880:	440a      	add	r2, r1
 800b882:	4291      	cmp	r1, r2
 800b884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b888:	d100      	bne.n	800b88c <memcpy+0xc>
 800b88a:	4770      	bx	lr
 800b88c:	b510      	push	{r4, lr}
 800b88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b892:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b896:	4291      	cmp	r1, r2
 800b898:	d1f9      	bne.n	800b88e <memcpy+0xe>
 800b89a:	bd10      	pop	{r4, pc}

0800b89c <memset>:
 800b89c:	4402      	add	r2, r0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d100      	bne.n	800b8a6 <memset+0xa>
 800b8a4:	4770      	bx	lr
 800b8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b8aa:	e7f9      	b.n	800b8a0 <memset+0x4>

0800b8ac <_puts_r>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	460e      	mov	r6, r1
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	b118      	cbz	r0, 800b8bc <_puts_r+0x10>
 800b8b4:	6983      	ldr	r3, [r0, #24]
 800b8b6:	b90b      	cbnz	r3, 800b8bc <_puts_r+0x10>
 800b8b8:	f000 fa48 	bl	800bd4c <__sinit>
 800b8bc:	69ab      	ldr	r3, [r5, #24]
 800b8be:	68ac      	ldr	r4, [r5, #8]
 800b8c0:	b913      	cbnz	r3, 800b8c8 <_puts_r+0x1c>
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	f000 fa42 	bl	800bd4c <__sinit>
 800b8c8:	4b2c      	ldr	r3, [pc, #176]	; (800b97c <_puts_r+0xd0>)
 800b8ca:	429c      	cmp	r4, r3
 800b8cc:	d120      	bne.n	800b910 <_puts_r+0x64>
 800b8ce:	686c      	ldr	r4, [r5, #4]
 800b8d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8d2:	07db      	lsls	r3, r3, #31
 800b8d4:	d405      	bmi.n	800b8e2 <_puts_r+0x36>
 800b8d6:	89a3      	ldrh	r3, [r4, #12]
 800b8d8:	0598      	lsls	r0, r3, #22
 800b8da:	d402      	bmi.n	800b8e2 <_puts_r+0x36>
 800b8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8de:	f000 fad3 	bl	800be88 <__retarget_lock_acquire_recursive>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	0719      	lsls	r1, r3, #28
 800b8e6:	d51d      	bpl.n	800b924 <_puts_r+0x78>
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	b1db      	cbz	r3, 800b924 <_puts_r+0x78>
 800b8ec:	3e01      	subs	r6, #1
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	60a3      	str	r3, [r4, #8]
 800b8f8:	bb39      	cbnz	r1, 800b94a <_puts_r+0x9e>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	da38      	bge.n	800b970 <_puts_r+0xc4>
 800b8fe:	4622      	mov	r2, r4
 800b900:	210a      	movs	r1, #10
 800b902:	4628      	mov	r0, r5
 800b904:	f000 f848 	bl	800b998 <__swbuf_r>
 800b908:	3001      	adds	r0, #1
 800b90a:	d011      	beq.n	800b930 <_puts_r+0x84>
 800b90c:	250a      	movs	r5, #10
 800b90e:	e011      	b.n	800b934 <_puts_r+0x88>
 800b910:	4b1b      	ldr	r3, [pc, #108]	; (800b980 <_puts_r+0xd4>)
 800b912:	429c      	cmp	r4, r3
 800b914:	d101      	bne.n	800b91a <_puts_r+0x6e>
 800b916:	68ac      	ldr	r4, [r5, #8]
 800b918:	e7da      	b.n	800b8d0 <_puts_r+0x24>
 800b91a:	4b1a      	ldr	r3, [pc, #104]	; (800b984 <_puts_r+0xd8>)
 800b91c:	429c      	cmp	r4, r3
 800b91e:	bf08      	it	eq
 800b920:	68ec      	ldreq	r4, [r5, #12]
 800b922:	e7d5      	b.n	800b8d0 <_puts_r+0x24>
 800b924:	4621      	mov	r1, r4
 800b926:	4628      	mov	r0, r5
 800b928:	f000 f888 	bl	800ba3c <__swsetup_r>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d0dd      	beq.n	800b8ec <_puts_r+0x40>
 800b930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b936:	07da      	lsls	r2, r3, #31
 800b938:	d405      	bmi.n	800b946 <_puts_r+0x9a>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	059b      	lsls	r3, r3, #22
 800b93e:	d402      	bmi.n	800b946 <_puts_r+0x9a>
 800b940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b942:	f000 faa2 	bl	800be8a <__retarget_lock_release_recursive>
 800b946:	4628      	mov	r0, r5
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	da04      	bge.n	800b958 <_puts_r+0xac>
 800b94e:	69a2      	ldr	r2, [r4, #24]
 800b950:	429a      	cmp	r2, r3
 800b952:	dc06      	bgt.n	800b962 <_puts_r+0xb6>
 800b954:	290a      	cmp	r1, #10
 800b956:	d004      	beq.n	800b962 <_puts_r+0xb6>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	6022      	str	r2, [r4, #0]
 800b95e:	7019      	strb	r1, [r3, #0]
 800b960:	e7c5      	b.n	800b8ee <_puts_r+0x42>
 800b962:	4622      	mov	r2, r4
 800b964:	4628      	mov	r0, r5
 800b966:	f000 f817 	bl	800b998 <__swbuf_r>
 800b96a:	3001      	adds	r0, #1
 800b96c:	d1bf      	bne.n	800b8ee <_puts_r+0x42>
 800b96e:	e7df      	b.n	800b930 <_puts_r+0x84>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	250a      	movs	r5, #10
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	6022      	str	r2, [r4, #0]
 800b978:	701d      	strb	r5, [r3, #0]
 800b97a:	e7db      	b.n	800b934 <_puts_r+0x88>
 800b97c:	0800c588 	.word	0x0800c588
 800b980:	0800c5a8 	.word	0x0800c5a8
 800b984:	0800c568 	.word	0x0800c568

0800b988 <puts>:
 800b988:	4b02      	ldr	r3, [pc, #8]	; (800b994 <puts+0xc>)
 800b98a:	4601      	mov	r1, r0
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	f7ff bf8d 	b.w	800b8ac <_puts_r>
 800b992:	bf00      	nop
 800b994:	24000014 	.word	0x24000014

0800b998 <__swbuf_r>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	460e      	mov	r6, r1
 800b99c:	4614      	mov	r4, r2
 800b99e:	4605      	mov	r5, r0
 800b9a0:	b118      	cbz	r0, 800b9aa <__swbuf_r+0x12>
 800b9a2:	6983      	ldr	r3, [r0, #24]
 800b9a4:	b90b      	cbnz	r3, 800b9aa <__swbuf_r+0x12>
 800b9a6:	f000 f9d1 	bl	800bd4c <__sinit>
 800b9aa:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <__swbuf_r+0x98>)
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	d12b      	bne.n	800ba08 <__swbuf_r+0x70>
 800b9b0:	686c      	ldr	r4, [r5, #4]
 800b9b2:	69a3      	ldr	r3, [r4, #24]
 800b9b4:	60a3      	str	r3, [r4, #8]
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	071a      	lsls	r2, r3, #28
 800b9ba:	d52f      	bpl.n	800ba1c <__swbuf_r+0x84>
 800b9bc:	6923      	ldr	r3, [r4, #16]
 800b9be:	b36b      	cbz	r3, 800ba1c <__swbuf_r+0x84>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	6820      	ldr	r0, [r4, #0]
 800b9c4:	1ac0      	subs	r0, r0, r3
 800b9c6:	6963      	ldr	r3, [r4, #20]
 800b9c8:	b2f6      	uxtb	r6, r6
 800b9ca:	4283      	cmp	r3, r0
 800b9cc:	4637      	mov	r7, r6
 800b9ce:	dc04      	bgt.n	800b9da <__swbuf_r+0x42>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 f926 	bl	800bc24 <_fflush_r>
 800b9d8:	bb30      	cbnz	r0, 800ba28 <__swbuf_r+0x90>
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	60a3      	str	r3, [r4, #8]
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	6022      	str	r2, [r4, #0]
 800b9e6:	701e      	strb	r6, [r3, #0]
 800b9e8:	6963      	ldr	r3, [r4, #20]
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	4283      	cmp	r3, r0
 800b9ee:	d004      	beq.n	800b9fa <__swbuf_r+0x62>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	07db      	lsls	r3, r3, #31
 800b9f4:	d506      	bpl.n	800ba04 <__swbuf_r+0x6c>
 800b9f6:	2e0a      	cmp	r6, #10
 800b9f8:	d104      	bne.n	800ba04 <__swbuf_r+0x6c>
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f000 f911 	bl	800bc24 <_fflush_r>
 800ba02:	b988      	cbnz	r0, 800ba28 <__swbuf_r+0x90>
 800ba04:	4638      	mov	r0, r7
 800ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba08:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <__swbuf_r+0x9c>)
 800ba0a:	429c      	cmp	r4, r3
 800ba0c:	d101      	bne.n	800ba12 <__swbuf_r+0x7a>
 800ba0e:	68ac      	ldr	r4, [r5, #8]
 800ba10:	e7cf      	b.n	800b9b2 <__swbuf_r+0x1a>
 800ba12:	4b09      	ldr	r3, [pc, #36]	; (800ba38 <__swbuf_r+0xa0>)
 800ba14:	429c      	cmp	r4, r3
 800ba16:	bf08      	it	eq
 800ba18:	68ec      	ldreq	r4, [r5, #12]
 800ba1a:	e7ca      	b.n	800b9b2 <__swbuf_r+0x1a>
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4628      	mov	r0, r5
 800ba20:	f000 f80c 	bl	800ba3c <__swsetup_r>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d0cb      	beq.n	800b9c0 <__swbuf_r+0x28>
 800ba28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ba2c:	e7ea      	b.n	800ba04 <__swbuf_r+0x6c>
 800ba2e:	bf00      	nop
 800ba30:	0800c588 	.word	0x0800c588
 800ba34:	0800c5a8 	.word	0x0800c5a8
 800ba38:	0800c568 	.word	0x0800c568

0800ba3c <__swsetup_r>:
 800ba3c:	4b32      	ldr	r3, [pc, #200]	; (800bb08 <__swsetup_r+0xcc>)
 800ba3e:	b570      	push	{r4, r5, r6, lr}
 800ba40:	681d      	ldr	r5, [r3, #0]
 800ba42:	4606      	mov	r6, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	b125      	cbz	r5, 800ba52 <__swsetup_r+0x16>
 800ba48:	69ab      	ldr	r3, [r5, #24]
 800ba4a:	b913      	cbnz	r3, 800ba52 <__swsetup_r+0x16>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f000 f97d 	bl	800bd4c <__sinit>
 800ba52:	4b2e      	ldr	r3, [pc, #184]	; (800bb0c <__swsetup_r+0xd0>)
 800ba54:	429c      	cmp	r4, r3
 800ba56:	d10f      	bne.n	800ba78 <__swsetup_r+0x3c>
 800ba58:	686c      	ldr	r4, [r5, #4]
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba60:	0719      	lsls	r1, r3, #28
 800ba62:	d42c      	bmi.n	800babe <__swsetup_r+0x82>
 800ba64:	06dd      	lsls	r5, r3, #27
 800ba66:	d411      	bmi.n	800ba8c <__swsetup_r+0x50>
 800ba68:	2309      	movs	r3, #9
 800ba6a:	6033      	str	r3, [r6, #0]
 800ba6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba70:	81a3      	strh	r3, [r4, #12]
 800ba72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba76:	e03e      	b.n	800baf6 <__swsetup_r+0xba>
 800ba78:	4b25      	ldr	r3, [pc, #148]	; (800bb10 <__swsetup_r+0xd4>)
 800ba7a:	429c      	cmp	r4, r3
 800ba7c:	d101      	bne.n	800ba82 <__swsetup_r+0x46>
 800ba7e:	68ac      	ldr	r4, [r5, #8]
 800ba80:	e7eb      	b.n	800ba5a <__swsetup_r+0x1e>
 800ba82:	4b24      	ldr	r3, [pc, #144]	; (800bb14 <__swsetup_r+0xd8>)
 800ba84:	429c      	cmp	r4, r3
 800ba86:	bf08      	it	eq
 800ba88:	68ec      	ldreq	r4, [r5, #12]
 800ba8a:	e7e6      	b.n	800ba5a <__swsetup_r+0x1e>
 800ba8c:	0758      	lsls	r0, r3, #29
 800ba8e:	d512      	bpl.n	800bab6 <__swsetup_r+0x7a>
 800ba90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba92:	b141      	cbz	r1, 800baa6 <__swsetup_r+0x6a>
 800ba94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba98:	4299      	cmp	r1, r3
 800ba9a:	d002      	beq.n	800baa2 <__swsetup_r+0x66>
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f000 fa5b 	bl	800bf58 <_free_r>
 800baa2:	2300      	movs	r3, #0
 800baa4:	6363      	str	r3, [r4, #52]	; 0x34
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800baac:	81a3      	strh	r3, [r4, #12]
 800baae:	2300      	movs	r3, #0
 800bab0:	6063      	str	r3, [r4, #4]
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f043 0308 	orr.w	r3, r3, #8
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	6923      	ldr	r3, [r4, #16]
 800bac0:	b94b      	cbnz	r3, 800bad6 <__swsetup_r+0x9a>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bacc:	d003      	beq.n	800bad6 <__swsetup_r+0x9a>
 800bace:	4621      	mov	r1, r4
 800bad0:	4630      	mov	r0, r6
 800bad2:	f000 fa01 	bl	800bed8 <__smakebuf_r>
 800bad6:	89a0      	ldrh	r0, [r4, #12]
 800bad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800badc:	f010 0301 	ands.w	r3, r0, #1
 800bae0:	d00a      	beq.n	800baf8 <__swsetup_r+0xbc>
 800bae2:	2300      	movs	r3, #0
 800bae4:	60a3      	str	r3, [r4, #8]
 800bae6:	6963      	ldr	r3, [r4, #20]
 800bae8:	425b      	negs	r3, r3
 800baea:	61a3      	str	r3, [r4, #24]
 800baec:	6923      	ldr	r3, [r4, #16]
 800baee:	b943      	cbnz	r3, 800bb02 <__swsetup_r+0xc6>
 800baf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baf4:	d1ba      	bne.n	800ba6c <__swsetup_r+0x30>
 800baf6:	bd70      	pop	{r4, r5, r6, pc}
 800baf8:	0781      	lsls	r1, r0, #30
 800bafa:	bf58      	it	pl
 800bafc:	6963      	ldrpl	r3, [r4, #20]
 800bafe:	60a3      	str	r3, [r4, #8]
 800bb00:	e7f4      	b.n	800baec <__swsetup_r+0xb0>
 800bb02:	2000      	movs	r0, #0
 800bb04:	e7f7      	b.n	800baf6 <__swsetup_r+0xba>
 800bb06:	bf00      	nop
 800bb08:	24000014 	.word	0x24000014
 800bb0c:	0800c588 	.word	0x0800c588
 800bb10:	0800c5a8 	.word	0x0800c5a8
 800bb14:	0800c568 	.word	0x0800c568

0800bb18 <__sflush_r>:
 800bb18:	898a      	ldrh	r2, [r1, #12]
 800bb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1e:	4605      	mov	r5, r0
 800bb20:	0710      	lsls	r0, r2, #28
 800bb22:	460c      	mov	r4, r1
 800bb24:	d458      	bmi.n	800bbd8 <__sflush_r+0xc0>
 800bb26:	684b      	ldr	r3, [r1, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dc05      	bgt.n	800bb38 <__sflush_r+0x20>
 800bb2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	dc02      	bgt.n	800bb38 <__sflush_r+0x20>
 800bb32:	2000      	movs	r0, #0
 800bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	d0f9      	beq.n	800bb32 <__sflush_r+0x1a>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb44:	682f      	ldr	r7, [r5, #0]
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	d032      	beq.n	800bbb0 <__sflush_r+0x98>
 800bb4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	075a      	lsls	r2, r3, #29
 800bb50:	d505      	bpl.n	800bb5e <__sflush_r+0x46>
 800bb52:	6863      	ldr	r3, [r4, #4]
 800bb54:	1ac0      	subs	r0, r0, r3
 800bb56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb58:	b10b      	cbz	r3, 800bb5e <__sflush_r+0x46>
 800bb5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb5c:	1ac0      	subs	r0, r0, r3
 800bb5e:	2300      	movs	r3, #0
 800bb60:	4602      	mov	r2, r0
 800bb62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb64:	6a21      	ldr	r1, [r4, #32]
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b0      	blx	r6
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	d106      	bne.n	800bb7e <__sflush_r+0x66>
 800bb70:	6829      	ldr	r1, [r5, #0]
 800bb72:	291d      	cmp	r1, #29
 800bb74:	d82c      	bhi.n	800bbd0 <__sflush_r+0xb8>
 800bb76:	4a2a      	ldr	r2, [pc, #168]	; (800bc20 <__sflush_r+0x108>)
 800bb78:	40ca      	lsrs	r2, r1
 800bb7a:	07d6      	lsls	r6, r2, #31
 800bb7c:	d528      	bpl.n	800bbd0 <__sflush_r+0xb8>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6062      	str	r2, [r4, #4]
 800bb82:	04d9      	lsls	r1, r3, #19
 800bb84:	6922      	ldr	r2, [r4, #16]
 800bb86:	6022      	str	r2, [r4, #0]
 800bb88:	d504      	bpl.n	800bb94 <__sflush_r+0x7c>
 800bb8a:	1c42      	adds	r2, r0, #1
 800bb8c:	d101      	bne.n	800bb92 <__sflush_r+0x7a>
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	b903      	cbnz	r3, 800bb94 <__sflush_r+0x7c>
 800bb92:	6560      	str	r0, [r4, #84]	; 0x54
 800bb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb96:	602f      	str	r7, [r5, #0]
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	d0ca      	beq.n	800bb32 <__sflush_r+0x1a>
 800bb9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba0:	4299      	cmp	r1, r3
 800bba2:	d002      	beq.n	800bbaa <__sflush_r+0x92>
 800bba4:	4628      	mov	r0, r5
 800bba6:	f000 f9d7 	bl	800bf58 <_free_r>
 800bbaa:	2000      	movs	r0, #0
 800bbac:	6360      	str	r0, [r4, #52]	; 0x34
 800bbae:	e7c1      	b.n	800bb34 <__sflush_r+0x1c>
 800bbb0:	6a21      	ldr	r1, [r4, #32]
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	47b0      	blx	r6
 800bbb8:	1c41      	adds	r1, r0, #1
 800bbba:	d1c7      	bne.n	800bb4c <__sflush_r+0x34>
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0c4      	beq.n	800bb4c <__sflush_r+0x34>
 800bbc2:	2b1d      	cmp	r3, #29
 800bbc4:	d001      	beq.n	800bbca <__sflush_r+0xb2>
 800bbc6:	2b16      	cmp	r3, #22
 800bbc8:	d101      	bne.n	800bbce <__sflush_r+0xb6>
 800bbca:	602f      	str	r7, [r5, #0]
 800bbcc:	e7b1      	b.n	800bb32 <__sflush_r+0x1a>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	e7ad      	b.n	800bb34 <__sflush_r+0x1c>
 800bbd8:	690f      	ldr	r7, [r1, #16]
 800bbda:	2f00      	cmp	r7, #0
 800bbdc:	d0a9      	beq.n	800bb32 <__sflush_r+0x1a>
 800bbde:	0793      	lsls	r3, r2, #30
 800bbe0:	680e      	ldr	r6, [r1, #0]
 800bbe2:	bf08      	it	eq
 800bbe4:	694b      	ldreq	r3, [r1, #20]
 800bbe6:	600f      	str	r7, [r1, #0]
 800bbe8:	bf18      	it	ne
 800bbea:	2300      	movne	r3, #0
 800bbec:	eba6 0807 	sub.w	r8, r6, r7
 800bbf0:	608b      	str	r3, [r1, #8]
 800bbf2:	f1b8 0f00 	cmp.w	r8, #0
 800bbf6:	dd9c      	ble.n	800bb32 <__sflush_r+0x1a>
 800bbf8:	6a21      	ldr	r1, [r4, #32]
 800bbfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbfc:	4643      	mov	r3, r8
 800bbfe:	463a      	mov	r2, r7
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b0      	blx	r6
 800bc04:	2800      	cmp	r0, #0
 800bc06:	dc06      	bgt.n	800bc16 <__sflush_r+0xfe>
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc14:	e78e      	b.n	800bb34 <__sflush_r+0x1c>
 800bc16:	4407      	add	r7, r0
 800bc18:	eba8 0800 	sub.w	r8, r8, r0
 800bc1c:	e7e9      	b.n	800bbf2 <__sflush_r+0xda>
 800bc1e:	bf00      	nop
 800bc20:	20400001 	.word	0x20400001

0800bc24 <_fflush_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	690b      	ldr	r3, [r1, #16]
 800bc28:	4605      	mov	r5, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	b913      	cbnz	r3, 800bc34 <_fflush_r+0x10>
 800bc2e:	2500      	movs	r5, #0
 800bc30:	4628      	mov	r0, r5
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	b118      	cbz	r0, 800bc3e <_fflush_r+0x1a>
 800bc36:	6983      	ldr	r3, [r0, #24]
 800bc38:	b90b      	cbnz	r3, 800bc3e <_fflush_r+0x1a>
 800bc3a:	f000 f887 	bl	800bd4c <__sinit>
 800bc3e:	4b14      	ldr	r3, [pc, #80]	; (800bc90 <_fflush_r+0x6c>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d11b      	bne.n	800bc7c <_fflush_r+0x58>
 800bc44:	686c      	ldr	r4, [r5, #4]
 800bc46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0ef      	beq.n	800bc2e <_fflush_r+0xa>
 800bc4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc50:	07d0      	lsls	r0, r2, #31
 800bc52:	d404      	bmi.n	800bc5e <_fflush_r+0x3a>
 800bc54:	0599      	lsls	r1, r3, #22
 800bc56:	d402      	bmi.n	800bc5e <_fflush_r+0x3a>
 800bc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc5a:	f000 f915 	bl	800be88 <__retarget_lock_acquire_recursive>
 800bc5e:	4628      	mov	r0, r5
 800bc60:	4621      	mov	r1, r4
 800bc62:	f7ff ff59 	bl	800bb18 <__sflush_r>
 800bc66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc68:	07da      	lsls	r2, r3, #31
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	d4e0      	bmi.n	800bc30 <_fflush_r+0xc>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	059b      	lsls	r3, r3, #22
 800bc72:	d4dd      	bmi.n	800bc30 <_fflush_r+0xc>
 800bc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc76:	f000 f908 	bl	800be8a <__retarget_lock_release_recursive>
 800bc7a:	e7d9      	b.n	800bc30 <_fflush_r+0xc>
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <_fflush_r+0x70>)
 800bc7e:	429c      	cmp	r4, r3
 800bc80:	d101      	bne.n	800bc86 <_fflush_r+0x62>
 800bc82:	68ac      	ldr	r4, [r5, #8]
 800bc84:	e7df      	b.n	800bc46 <_fflush_r+0x22>
 800bc86:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <_fflush_r+0x74>)
 800bc88:	429c      	cmp	r4, r3
 800bc8a:	bf08      	it	eq
 800bc8c:	68ec      	ldreq	r4, [r5, #12]
 800bc8e:	e7da      	b.n	800bc46 <_fflush_r+0x22>
 800bc90:	0800c588 	.word	0x0800c588
 800bc94:	0800c5a8 	.word	0x0800c5a8
 800bc98:	0800c568 	.word	0x0800c568

0800bc9c <std>:
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	b510      	push	{r4, lr}
 800bca0:	4604      	mov	r4, r0
 800bca2:	e9c0 3300 	strd	r3, r3, [r0]
 800bca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcaa:	6083      	str	r3, [r0, #8]
 800bcac:	8181      	strh	r1, [r0, #12]
 800bcae:	6643      	str	r3, [r0, #100]	; 0x64
 800bcb0:	81c2      	strh	r2, [r0, #14]
 800bcb2:	6183      	str	r3, [r0, #24]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	2208      	movs	r2, #8
 800bcb8:	305c      	adds	r0, #92	; 0x5c
 800bcba:	f7ff fdef 	bl	800b89c <memset>
 800bcbe:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <std+0x38>)
 800bcc0:	6263      	str	r3, [r4, #36]	; 0x24
 800bcc2:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <std+0x3c>)
 800bcc4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcc6:	4b05      	ldr	r3, [pc, #20]	; (800bcdc <std+0x40>)
 800bcc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcca:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <std+0x44>)
 800bccc:	6224      	str	r4, [r4, #32]
 800bcce:	6323      	str	r3, [r4, #48]	; 0x30
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	bf00      	nop
 800bcd4:	0800c139 	.word	0x0800c139
 800bcd8:	0800c15b 	.word	0x0800c15b
 800bcdc:	0800c193 	.word	0x0800c193
 800bce0:	0800c1b7 	.word	0x0800c1b7

0800bce4 <_cleanup_r>:
 800bce4:	4901      	ldr	r1, [pc, #4]	; (800bcec <_cleanup_r+0x8>)
 800bce6:	f000 b8af 	b.w	800be48 <_fwalk_reent>
 800bcea:	bf00      	nop
 800bcec:	0800bc25 	.word	0x0800bc25

0800bcf0 <__sfmoreglue>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	2268      	movs	r2, #104	; 0x68
 800bcf4:	1e4d      	subs	r5, r1, #1
 800bcf6:	4355      	muls	r5, r2
 800bcf8:	460e      	mov	r6, r1
 800bcfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcfe:	f000 f997 	bl	800c030 <_malloc_r>
 800bd02:	4604      	mov	r4, r0
 800bd04:	b140      	cbz	r0, 800bd18 <__sfmoreglue+0x28>
 800bd06:	2100      	movs	r1, #0
 800bd08:	e9c0 1600 	strd	r1, r6, [r0]
 800bd0c:	300c      	adds	r0, #12
 800bd0e:	60a0      	str	r0, [r4, #8]
 800bd10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd14:	f7ff fdc2 	bl	800b89c <memset>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}

0800bd1c <__sfp_lock_acquire>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__sfp_lock_acquire+0x8>)
 800bd1e:	f000 b8b3 	b.w	800be88 <__retarget_lock_acquire_recursive>
 800bd22:	bf00      	nop
 800bd24:	24004c2d 	.word	0x24004c2d

0800bd28 <__sfp_lock_release>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__sfp_lock_release+0x8>)
 800bd2a:	f000 b8ae 	b.w	800be8a <__retarget_lock_release_recursive>
 800bd2e:	bf00      	nop
 800bd30:	24004c2d 	.word	0x24004c2d

0800bd34 <__sinit_lock_acquire>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sinit_lock_acquire+0x8>)
 800bd36:	f000 b8a7 	b.w	800be88 <__retarget_lock_acquire_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	24004c2e 	.word	0x24004c2e

0800bd40 <__sinit_lock_release>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__sinit_lock_release+0x8>)
 800bd42:	f000 b8a2 	b.w	800be8a <__retarget_lock_release_recursive>
 800bd46:	bf00      	nop
 800bd48:	24004c2e 	.word	0x24004c2e

0800bd4c <__sinit>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f7ff fff0 	bl	800bd34 <__sinit_lock_acquire>
 800bd54:	69a3      	ldr	r3, [r4, #24]
 800bd56:	b11b      	cbz	r3, 800bd60 <__sinit+0x14>
 800bd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd5c:	f7ff bff0 	b.w	800bd40 <__sinit_lock_release>
 800bd60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd64:	6523      	str	r3, [r4, #80]	; 0x50
 800bd66:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <__sinit+0x68>)
 800bd68:	4a13      	ldr	r2, [pc, #76]	; (800bdb8 <__sinit+0x6c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd6e:	42a3      	cmp	r3, r4
 800bd70:	bf04      	itt	eq
 800bd72:	2301      	moveq	r3, #1
 800bd74:	61a3      	streq	r3, [r4, #24]
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 f820 	bl	800bdbc <__sfp>
 800bd7c:	6060      	str	r0, [r4, #4]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 f81c 	bl	800bdbc <__sfp>
 800bd84:	60a0      	str	r0, [r4, #8]
 800bd86:	4620      	mov	r0, r4
 800bd88:	f000 f818 	bl	800bdbc <__sfp>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	60e0      	str	r0, [r4, #12]
 800bd90:	2104      	movs	r1, #4
 800bd92:	6860      	ldr	r0, [r4, #4]
 800bd94:	f7ff ff82 	bl	800bc9c <std>
 800bd98:	68a0      	ldr	r0, [r4, #8]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	2109      	movs	r1, #9
 800bd9e:	f7ff ff7d 	bl	800bc9c <std>
 800bda2:	68e0      	ldr	r0, [r4, #12]
 800bda4:	2202      	movs	r2, #2
 800bda6:	2112      	movs	r1, #18
 800bda8:	f7ff ff78 	bl	800bc9c <std>
 800bdac:	2301      	movs	r3, #1
 800bdae:	61a3      	str	r3, [r4, #24]
 800bdb0:	e7d2      	b.n	800bd58 <__sinit+0xc>
 800bdb2:	bf00      	nop
 800bdb4:	0800c564 	.word	0x0800c564
 800bdb8:	0800bce5 	.word	0x0800bce5

0800bdbc <__sfp>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	4607      	mov	r7, r0
 800bdc0:	f7ff ffac 	bl	800bd1c <__sfp_lock_acquire>
 800bdc4:	4b1e      	ldr	r3, [pc, #120]	; (800be40 <__sfp+0x84>)
 800bdc6:	681e      	ldr	r6, [r3, #0]
 800bdc8:	69b3      	ldr	r3, [r6, #24]
 800bdca:	b913      	cbnz	r3, 800bdd2 <__sfp+0x16>
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f7ff ffbd 	bl	800bd4c <__sinit>
 800bdd2:	3648      	adds	r6, #72	; 0x48
 800bdd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	d503      	bpl.n	800bde4 <__sfp+0x28>
 800bddc:	6833      	ldr	r3, [r6, #0]
 800bdde:	b30b      	cbz	r3, 800be24 <__sfp+0x68>
 800bde0:	6836      	ldr	r6, [r6, #0]
 800bde2:	e7f7      	b.n	800bdd4 <__sfp+0x18>
 800bde4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bde8:	b9d5      	cbnz	r5, 800be20 <__sfp+0x64>
 800bdea:	4b16      	ldr	r3, [pc, #88]	; (800be44 <__sfp+0x88>)
 800bdec:	60e3      	str	r3, [r4, #12]
 800bdee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdf2:	6665      	str	r5, [r4, #100]	; 0x64
 800bdf4:	f000 f847 	bl	800be86 <__retarget_lock_init_recursive>
 800bdf8:	f7ff ff96 	bl	800bd28 <__sfp_lock_release>
 800bdfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be04:	6025      	str	r5, [r4, #0]
 800be06:	61a5      	str	r5, [r4, #24]
 800be08:	2208      	movs	r2, #8
 800be0a:	4629      	mov	r1, r5
 800be0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be10:	f7ff fd44 	bl	800b89c <memset>
 800be14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be1c:	4620      	mov	r0, r4
 800be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be20:	3468      	adds	r4, #104	; 0x68
 800be22:	e7d9      	b.n	800bdd8 <__sfp+0x1c>
 800be24:	2104      	movs	r1, #4
 800be26:	4638      	mov	r0, r7
 800be28:	f7ff ff62 	bl	800bcf0 <__sfmoreglue>
 800be2c:	4604      	mov	r4, r0
 800be2e:	6030      	str	r0, [r6, #0]
 800be30:	2800      	cmp	r0, #0
 800be32:	d1d5      	bne.n	800bde0 <__sfp+0x24>
 800be34:	f7ff ff78 	bl	800bd28 <__sfp_lock_release>
 800be38:	230c      	movs	r3, #12
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	e7ee      	b.n	800be1c <__sfp+0x60>
 800be3e:	bf00      	nop
 800be40:	0800c564 	.word	0x0800c564
 800be44:	ffff0001 	.word	0xffff0001

0800be48 <_fwalk_reent>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	4606      	mov	r6, r0
 800be4e:	4688      	mov	r8, r1
 800be50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be54:	2700      	movs	r7, #0
 800be56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be5a:	f1b9 0901 	subs.w	r9, r9, #1
 800be5e:	d505      	bpl.n	800be6c <_fwalk_reent+0x24>
 800be60:	6824      	ldr	r4, [r4, #0]
 800be62:	2c00      	cmp	r4, #0
 800be64:	d1f7      	bne.n	800be56 <_fwalk_reent+0xe>
 800be66:	4638      	mov	r0, r7
 800be68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6c:	89ab      	ldrh	r3, [r5, #12]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d907      	bls.n	800be82 <_fwalk_reent+0x3a>
 800be72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be76:	3301      	adds	r3, #1
 800be78:	d003      	beq.n	800be82 <_fwalk_reent+0x3a>
 800be7a:	4629      	mov	r1, r5
 800be7c:	4630      	mov	r0, r6
 800be7e:	47c0      	blx	r8
 800be80:	4307      	orrs	r7, r0
 800be82:	3568      	adds	r5, #104	; 0x68
 800be84:	e7e9      	b.n	800be5a <_fwalk_reent+0x12>

0800be86 <__retarget_lock_init_recursive>:
 800be86:	4770      	bx	lr

0800be88 <__retarget_lock_acquire_recursive>:
 800be88:	4770      	bx	lr

0800be8a <__retarget_lock_release_recursive>:
 800be8a:	4770      	bx	lr

0800be8c <__swhatbuf_r>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	460e      	mov	r6, r1
 800be90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be94:	2900      	cmp	r1, #0
 800be96:	b096      	sub	sp, #88	; 0x58
 800be98:	4614      	mov	r4, r2
 800be9a:	461d      	mov	r5, r3
 800be9c:	da08      	bge.n	800beb0 <__swhatbuf_r+0x24>
 800be9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	602a      	str	r2, [r5, #0]
 800bea6:	061a      	lsls	r2, r3, #24
 800bea8:	d410      	bmi.n	800becc <__swhatbuf_r+0x40>
 800beaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beae:	e00e      	b.n	800bece <__swhatbuf_r+0x42>
 800beb0:	466a      	mov	r2, sp
 800beb2:	f000 f9a7 	bl	800c204 <_fstat_r>
 800beb6:	2800      	cmp	r0, #0
 800beb8:	dbf1      	blt.n	800be9e <__swhatbuf_r+0x12>
 800beba:	9a01      	ldr	r2, [sp, #4]
 800bebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bec4:	425a      	negs	r2, r3
 800bec6:	415a      	adcs	r2, r3
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	e7ee      	b.n	800beaa <__swhatbuf_r+0x1e>
 800becc:	2340      	movs	r3, #64	; 0x40
 800bece:	2000      	movs	r0, #0
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	b016      	add	sp, #88	; 0x58
 800bed4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bed8 <__smakebuf_r>:
 800bed8:	898b      	ldrh	r3, [r1, #12]
 800beda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bedc:	079d      	lsls	r5, r3, #30
 800bede:	4606      	mov	r6, r0
 800bee0:	460c      	mov	r4, r1
 800bee2:	d507      	bpl.n	800bef4 <__smakebuf_r+0x1c>
 800bee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	6123      	str	r3, [r4, #16]
 800beec:	2301      	movs	r3, #1
 800beee:	6163      	str	r3, [r4, #20]
 800bef0:	b002      	add	sp, #8
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	ab01      	add	r3, sp, #4
 800bef6:	466a      	mov	r2, sp
 800bef8:	f7ff ffc8 	bl	800be8c <__swhatbuf_r>
 800befc:	9900      	ldr	r1, [sp, #0]
 800befe:	4605      	mov	r5, r0
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f895 	bl	800c030 <_malloc_r>
 800bf06:	b948      	cbnz	r0, 800bf1c <__smakebuf_r+0x44>
 800bf08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf0c:	059a      	lsls	r2, r3, #22
 800bf0e:	d4ef      	bmi.n	800bef0 <__smakebuf_r+0x18>
 800bf10:	f023 0303 	bic.w	r3, r3, #3
 800bf14:	f043 0302 	orr.w	r3, r3, #2
 800bf18:	81a3      	strh	r3, [r4, #12]
 800bf1a:	e7e3      	b.n	800bee4 <__smakebuf_r+0xc>
 800bf1c:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <__smakebuf_r+0x7c>)
 800bf1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	6020      	str	r0, [r4, #0]
 800bf24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf28:	81a3      	strh	r3, [r4, #12]
 800bf2a:	9b00      	ldr	r3, [sp, #0]
 800bf2c:	6163      	str	r3, [r4, #20]
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	6120      	str	r0, [r4, #16]
 800bf32:	b15b      	cbz	r3, 800bf4c <__smakebuf_r+0x74>
 800bf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 f975 	bl	800c228 <_isatty_r>
 800bf3e:	b128      	cbz	r0, 800bf4c <__smakebuf_r+0x74>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	89a0      	ldrh	r0, [r4, #12]
 800bf4e:	4305      	orrs	r5, r0
 800bf50:	81a5      	strh	r5, [r4, #12]
 800bf52:	e7cd      	b.n	800bef0 <__smakebuf_r+0x18>
 800bf54:	0800bce5 	.word	0x0800bce5

0800bf58 <_free_r>:
 800bf58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf5a:	2900      	cmp	r1, #0
 800bf5c:	d044      	beq.n	800bfe8 <_free_r+0x90>
 800bf5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf62:	9001      	str	r0, [sp, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f1a1 0404 	sub.w	r4, r1, #4
 800bf6a:	bfb8      	it	lt
 800bf6c:	18e4      	addlt	r4, r4, r3
 800bf6e:	f000 f97d 	bl	800c26c <__malloc_lock>
 800bf72:	4a1e      	ldr	r2, [pc, #120]	; (800bfec <_free_r+0x94>)
 800bf74:	9801      	ldr	r0, [sp, #4]
 800bf76:	6813      	ldr	r3, [r2, #0]
 800bf78:	b933      	cbnz	r3, 800bf88 <_free_r+0x30>
 800bf7a:	6063      	str	r3, [r4, #4]
 800bf7c:	6014      	str	r4, [r2, #0]
 800bf7e:	b003      	add	sp, #12
 800bf80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf84:	f000 b978 	b.w	800c278 <__malloc_unlock>
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d908      	bls.n	800bf9e <_free_r+0x46>
 800bf8c:	6825      	ldr	r5, [r4, #0]
 800bf8e:	1961      	adds	r1, r4, r5
 800bf90:	428b      	cmp	r3, r1
 800bf92:	bf01      	itttt	eq
 800bf94:	6819      	ldreq	r1, [r3, #0]
 800bf96:	685b      	ldreq	r3, [r3, #4]
 800bf98:	1949      	addeq	r1, r1, r5
 800bf9a:	6021      	streq	r1, [r4, #0]
 800bf9c:	e7ed      	b.n	800bf7a <_free_r+0x22>
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	b10b      	cbz	r3, 800bfa8 <_free_r+0x50>
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	d9fa      	bls.n	800bf9e <_free_r+0x46>
 800bfa8:	6811      	ldr	r1, [r2, #0]
 800bfaa:	1855      	adds	r5, r2, r1
 800bfac:	42a5      	cmp	r5, r4
 800bfae:	d10b      	bne.n	800bfc8 <_free_r+0x70>
 800bfb0:	6824      	ldr	r4, [r4, #0]
 800bfb2:	4421      	add	r1, r4
 800bfb4:	1854      	adds	r4, r2, r1
 800bfb6:	42a3      	cmp	r3, r4
 800bfb8:	6011      	str	r1, [r2, #0]
 800bfba:	d1e0      	bne.n	800bf7e <_free_r+0x26>
 800bfbc:	681c      	ldr	r4, [r3, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	6053      	str	r3, [r2, #4]
 800bfc2:	4421      	add	r1, r4
 800bfc4:	6011      	str	r1, [r2, #0]
 800bfc6:	e7da      	b.n	800bf7e <_free_r+0x26>
 800bfc8:	d902      	bls.n	800bfd0 <_free_r+0x78>
 800bfca:	230c      	movs	r3, #12
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	e7d6      	b.n	800bf7e <_free_r+0x26>
 800bfd0:	6825      	ldr	r5, [r4, #0]
 800bfd2:	1961      	adds	r1, r4, r5
 800bfd4:	428b      	cmp	r3, r1
 800bfd6:	bf04      	itt	eq
 800bfd8:	6819      	ldreq	r1, [r3, #0]
 800bfda:	685b      	ldreq	r3, [r3, #4]
 800bfdc:	6063      	str	r3, [r4, #4]
 800bfde:	bf04      	itt	eq
 800bfe0:	1949      	addeq	r1, r1, r5
 800bfe2:	6021      	streq	r1, [r4, #0]
 800bfe4:	6054      	str	r4, [r2, #4]
 800bfe6:	e7ca      	b.n	800bf7e <_free_r+0x26>
 800bfe8:	b003      	add	sp, #12
 800bfea:	bd30      	pop	{r4, r5, pc}
 800bfec:	24004c30 	.word	0x24004c30

0800bff0 <sbrk_aligned>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4e0e      	ldr	r6, [pc, #56]	; (800c02c <sbrk_aligned+0x3c>)
 800bff4:	460c      	mov	r4, r1
 800bff6:	6831      	ldr	r1, [r6, #0]
 800bff8:	4605      	mov	r5, r0
 800bffa:	b911      	cbnz	r1, 800c002 <sbrk_aligned+0x12>
 800bffc:	f000 f88c 	bl	800c118 <_sbrk_r>
 800c000:	6030      	str	r0, [r6, #0]
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f887 	bl	800c118 <_sbrk_r>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d00a      	beq.n	800c024 <sbrk_aligned+0x34>
 800c00e:	1cc4      	adds	r4, r0, #3
 800c010:	f024 0403 	bic.w	r4, r4, #3
 800c014:	42a0      	cmp	r0, r4
 800c016:	d007      	beq.n	800c028 <sbrk_aligned+0x38>
 800c018:	1a21      	subs	r1, r4, r0
 800c01a:	4628      	mov	r0, r5
 800c01c:	f000 f87c 	bl	800c118 <_sbrk_r>
 800c020:	3001      	adds	r0, #1
 800c022:	d101      	bne.n	800c028 <sbrk_aligned+0x38>
 800c024:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c028:	4620      	mov	r0, r4
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	24004c34 	.word	0x24004c34

0800c030 <_malloc_r>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	1ccd      	adds	r5, r1, #3
 800c036:	f025 0503 	bic.w	r5, r5, #3
 800c03a:	3508      	adds	r5, #8
 800c03c:	2d0c      	cmp	r5, #12
 800c03e:	bf38      	it	cc
 800c040:	250c      	movcc	r5, #12
 800c042:	2d00      	cmp	r5, #0
 800c044:	4607      	mov	r7, r0
 800c046:	db01      	blt.n	800c04c <_malloc_r+0x1c>
 800c048:	42a9      	cmp	r1, r5
 800c04a:	d905      	bls.n	800c058 <_malloc_r+0x28>
 800c04c:	230c      	movs	r3, #12
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	2600      	movs	r6, #0
 800c052:	4630      	mov	r0, r6
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	4e2e      	ldr	r6, [pc, #184]	; (800c114 <_malloc_r+0xe4>)
 800c05a:	f000 f907 	bl	800c26c <__malloc_lock>
 800c05e:	6833      	ldr	r3, [r6, #0]
 800c060:	461c      	mov	r4, r3
 800c062:	bb34      	cbnz	r4, 800c0b2 <_malloc_r+0x82>
 800c064:	4629      	mov	r1, r5
 800c066:	4638      	mov	r0, r7
 800c068:	f7ff ffc2 	bl	800bff0 <sbrk_aligned>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	4604      	mov	r4, r0
 800c070:	d14d      	bne.n	800c10e <_malloc_r+0xde>
 800c072:	6834      	ldr	r4, [r6, #0]
 800c074:	4626      	mov	r6, r4
 800c076:	2e00      	cmp	r6, #0
 800c078:	d140      	bne.n	800c0fc <_malloc_r+0xcc>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	4631      	mov	r1, r6
 800c07e:	4638      	mov	r0, r7
 800c080:	eb04 0803 	add.w	r8, r4, r3
 800c084:	f000 f848 	bl	800c118 <_sbrk_r>
 800c088:	4580      	cmp	r8, r0
 800c08a:	d13a      	bne.n	800c102 <_malloc_r+0xd2>
 800c08c:	6821      	ldr	r1, [r4, #0]
 800c08e:	3503      	adds	r5, #3
 800c090:	1a6d      	subs	r5, r5, r1
 800c092:	f025 0503 	bic.w	r5, r5, #3
 800c096:	3508      	adds	r5, #8
 800c098:	2d0c      	cmp	r5, #12
 800c09a:	bf38      	it	cc
 800c09c:	250c      	movcc	r5, #12
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ffa5 	bl	800bff0 <sbrk_aligned>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d02b      	beq.n	800c102 <_malloc_r+0xd2>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	442b      	add	r3, r5
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	e00e      	b.n	800c0d0 <_malloc_r+0xa0>
 800c0b2:	6822      	ldr	r2, [r4, #0]
 800c0b4:	1b52      	subs	r2, r2, r5
 800c0b6:	d41e      	bmi.n	800c0f6 <_malloc_r+0xc6>
 800c0b8:	2a0b      	cmp	r2, #11
 800c0ba:	d916      	bls.n	800c0ea <_malloc_r+0xba>
 800c0bc:	1961      	adds	r1, r4, r5
 800c0be:	42a3      	cmp	r3, r4
 800c0c0:	6025      	str	r5, [r4, #0]
 800c0c2:	bf18      	it	ne
 800c0c4:	6059      	strne	r1, [r3, #4]
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	bf08      	it	eq
 800c0ca:	6031      	streq	r1, [r6, #0]
 800c0cc:	5162      	str	r2, [r4, r5]
 800c0ce:	604b      	str	r3, [r1, #4]
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f104 060b 	add.w	r6, r4, #11
 800c0d6:	f000 f8cf 	bl	800c278 <__malloc_unlock>
 800c0da:	f026 0607 	bic.w	r6, r6, #7
 800c0de:	1d23      	adds	r3, r4, #4
 800c0e0:	1af2      	subs	r2, r6, r3
 800c0e2:	d0b6      	beq.n	800c052 <_malloc_r+0x22>
 800c0e4:	1b9b      	subs	r3, r3, r6
 800c0e6:	50a3      	str	r3, [r4, r2]
 800c0e8:	e7b3      	b.n	800c052 <_malloc_r+0x22>
 800c0ea:	6862      	ldr	r2, [r4, #4]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	bf0c      	ite	eq
 800c0f0:	6032      	streq	r2, [r6, #0]
 800c0f2:	605a      	strne	r2, [r3, #4]
 800c0f4:	e7ec      	b.n	800c0d0 <_malloc_r+0xa0>
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	6864      	ldr	r4, [r4, #4]
 800c0fa:	e7b2      	b.n	800c062 <_malloc_r+0x32>
 800c0fc:	4634      	mov	r4, r6
 800c0fe:	6876      	ldr	r6, [r6, #4]
 800c100:	e7b9      	b.n	800c076 <_malloc_r+0x46>
 800c102:	230c      	movs	r3, #12
 800c104:	603b      	str	r3, [r7, #0]
 800c106:	4638      	mov	r0, r7
 800c108:	f000 f8b6 	bl	800c278 <__malloc_unlock>
 800c10c:	e7a1      	b.n	800c052 <_malloc_r+0x22>
 800c10e:	6025      	str	r5, [r4, #0]
 800c110:	e7de      	b.n	800c0d0 <_malloc_r+0xa0>
 800c112:	bf00      	nop
 800c114:	24004c30 	.word	0x24004c30

0800c118 <_sbrk_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_sbrk_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f5 f8be 	bl	80012a4 <_sbrk>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_sbrk_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_sbrk_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	24004c38 	.word	0x24004c38

0800c138 <__sread>:
 800c138:	b510      	push	{r4, lr}
 800c13a:	460c      	mov	r4, r1
 800c13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c140:	f000 f8a0 	bl	800c284 <_read_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	bfab      	itete	ge
 800c148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c14a:	89a3      	ldrhlt	r3, [r4, #12]
 800c14c:	181b      	addge	r3, r3, r0
 800c14e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c152:	bfac      	ite	ge
 800c154:	6563      	strge	r3, [r4, #84]	; 0x54
 800c156:	81a3      	strhlt	r3, [r4, #12]
 800c158:	bd10      	pop	{r4, pc}

0800c15a <__swrite>:
 800c15a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15e:	461f      	mov	r7, r3
 800c160:	898b      	ldrh	r3, [r1, #12]
 800c162:	05db      	lsls	r3, r3, #23
 800c164:	4605      	mov	r5, r0
 800c166:	460c      	mov	r4, r1
 800c168:	4616      	mov	r6, r2
 800c16a:	d505      	bpl.n	800c178 <__swrite+0x1e>
 800c16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c170:	2302      	movs	r3, #2
 800c172:	2200      	movs	r2, #0
 800c174:	f000 f868 	bl	800c248 <_lseek_r>
 800c178:	89a3      	ldrh	r3, [r4, #12]
 800c17a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c17e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	4632      	mov	r2, r6
 800c186:	463b      	mov	r3, r7
 800c188:	4628      	mov	r0, r5
 800c18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c18e:	f000 b817 	b.w	800c1c0 <_write_r>

0800c192 <__sseek>:
 800c192:	b510      	push	{r4, lr}
 800c194:	460c      	mov	r4, r1
 800c196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19a:	f000 f855 	bl	800c248 <_lseek_r>
 800c19e:	1c43      	adds	r3, r0, #1
 800c1a0:	89a3      	ldrh	r3, [r4, #12]
 800c1a2:	bf15      	itete	ne
 800c1a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1ae:	81a3      	strheq	r3, [r4, #12]
 800c1b0:	bf18      	it	ne
 800c1b2:	81a3      	strhne	r3, [r4, #12]
 800c1b4:	bd10      	pop	{r4, pc}

0800c1b6 <__sclose>:
 800c1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ba:	f000 b813 	b.w	800c1e4 <_close_r>
	...

0800c1c0 <_write_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d07      	ldr	r5, [pc, #28]	; (800c1e0 <_write_r+0x20>)
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	602a      	str	r2, [r5, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f7f5 f817 	bl	8001202 <_write>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_write_r+0x1e>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_write_r+0x1e>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	24004c38 	.word	0x24004c38

0800c1e4 <_close_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d06      	ldr	r5, [pc, #24]	; (800c200 <_close_r+0x1c>)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	4608      	mov	r0, r1
 800c1ee:	602b      	str	r3, [r5, #0]
 800c1f0:	f7f5 f823 	bl	800123a <_close>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_close_r+0x1a>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_close_r+0x1a>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	24004c38 	.word	0x24004c38

0800c204 <_fstat_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4d07      	ldr	r5, [pc, #28]	; (800c224 <_fstat_r+0x20>)
 800c208:	2300      	movs	r3, #0
 800c20a:	4604      	mov	r4, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	4611      	mov	r1, r2
 800c210:	602b      	str	r3, [r5, #0]
 800c212:	f7f5 f81e 	bl	8001252 <_fstat>
 800c216:	1c43      	adds	r3, r0, #1
 800c218:	d102      	bne.n	800c220 <_fstat_r+0x1c>
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	b103      	cbz	r3, 800c220 <_fstat_r+0x1c>
 800c21e:	6023      	str	r3, [r4, #0]
 800c220:	bd38      	pop	{r3, r4, r5, pc}
 800c222:	bf00      	nop
 800c224:	24004c38 	.word	0x24004c38

0800c228 <_isatty_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4d06      	ldr	r5, [pc, #24]	; (800c244 <_isatty_r+0x1c>)
 800c22c:	2300      	movs	r3, #0
 800c22e:	4604      	mov	r4, r0
 800c230:	4608      	mov	r0, r1
 800c232:	602b      	str	r3, [r5, #0]
 800c234:	f7f5 f81d 	bl	8001272 <_isatty>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_isatty_r+0x1a>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_isatty_r+0x1a>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	24004c38 	.word	0x24004c38

0800c248 <_lseek_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d07      	ldr	r5, [pc, #28]	; (800c268 <_lseek_r+0x20>)
 800c24c:	4604      	mov	r4, r0
 800c24e:	4608      	mov	r0, r1
 800c250:	4611      	mov	r1, r2
 800c252:	2200      	movs	r2, #0
 800c254:	602a      	str	r2, [r5, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	f7f5 f816 	bl	8001288 <_lseek>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d102      	bne.n	800c266 <_lseek_r+0x1e>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	b103      	cbz	r3, 800c266 <_lseek_r+0x1e>
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	24004c38 	.word	0x24004c38

0800c26c <__malloc_lock>:
 800c26c:	4801      	ldr	r0, [pc, #4]	; (800c274 <__malloc_lock+0x8>)
 800c26e:	f7ff be0b 	b.w	800be88 <__retarget_lock_acquire_recursive>
 800c272:	bf00      	nop
 800c274:	24004c2c 	.word	0x24004c2c

0800c278 <__malloc_unlock>:
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <__malloc_unlock+0x8>)
 800c27a:	f7ff be06 	b.w	800be8a <__retarget_lock_release_recursive>
 800c27e:	bf00      	nop
 800c280:	24004c2c 	.word	0x24004c2c

0800c284 <_read_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	; (800c2a4 <_read_r+0x20>)
 800c288:	4604      	mov	r4, r0
 800c28a:	4608      	mov	r0, r1
 800c28c:	4611      	mov	r1, r2
 800c28e:	2200      	movs	r2, #0
 800c290:	602a      	str	r2, [r5, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	f7f4 ff98 	bl	80011c8 <_read>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_read_r+0x1e>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_read_r+0x1e>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	24004c38 	.word	0x24004c38

0800c2a8 <_init>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr

0800c2b4 <_fini>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	bf00      	nop
 800c2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ba:	bc08      	pop	{r3}
 800c2bc:	469e      	mov	lr, r3
 800c2be:	4770      	bx	lr
