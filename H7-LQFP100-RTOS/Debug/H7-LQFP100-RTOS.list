
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017230  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080174d0  080174d0  000274d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017904  08017904  00027904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801790c  0801790c  0002790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017910  08017910  00027910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017914  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005970  24000120  08017a1c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a90  08017a1c  00035a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ad3  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  00069300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000323b1  00000000  00000000  000ae0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194c15  00000000  00000000  000e048f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002750a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0c8  00000000  00000000  002750f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080174b8 	.word	0x080174b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080174b8 	.word	0x080174b8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c44 	.word	0x24000c44

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fe58 	bl	80132cc <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fe4d 	bl	80132cc <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fe42 	bl	80132cc <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fe37 	bl	80132cc <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 fb79 	bl	8016d58 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c64 	.word	0x24000c64
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	0801753c 	.word	0x0801753c

08000688 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fe8f 	bl	80103b8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 8454 	bhi.w	8000f50 <HAL_UART_RxCpltCallback+0x8c8>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a8b 	.word	0x08000a8b
 80006b8:	08000b4d 	.word	0x08000b4d
 80006bc:	08000b83 	.word	0x08000b83
 80006c0:	08000bb7 	.word	0x08000bb7
 80006c4:	08000bed 	.word	0x08000bed
 80006c8:	08000c25 	.word	0x08000c25
 80006cc:	08000c5d 	.word	0x08000c5d
 80006d0:	08000c93 	.word	0x08000c93
 80006d4:	08000cc5 	.word	0x08000cc5
 80006d8:	08000cfd 	.word	0x08000cfd
 80006dc:	08000d3b 	.word	0x08000d3b
 80006e0:	08000e31 	.word	0x08000e31
 80006e4:	08000e83 	.word	0x08000e83
 80006e8:	08000ee5 	.word	0x08000ee5
 80006ec:	08000f0d 	.word	0x08000f0d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000b31 	.word	0x08000b31
 80006fc:	08000b69 	.word	0x08000b69
 8000700:	08000b9d 	.word	0x08000b9d
 8000704:	08000bd1 	.word	0x08000bd1
 8000708:	08000c09 	.word	0x08000c09
 800070c:	08000c41 	.word	0x08000c41
 8000710:	08000c79 	.word	0x08000c79
 8000714:	08000cad 	.word	0x08000cad
 8000718:	08000cd5 	.word	0x08000cd5
 800071c:	08000d13 	.word	0x08000d13
 8000720:	08000d51 	.word	0x08000d51
 8000724:	08000e47 	.word	0x08000e47
 8000728:	08000ebd 	.word	0x08000ebd
 800072c:	08000f51 	.word	0x08000f51
 8000730:	08000f51 	.word	0x08000f51
 8000734:	08000f51 	.word	0x08000f51
 8000738:	08000f51 	.word	0x08000f51
 800073c:	08000f51 	.word	0x08000f51
 8000740:	08000f51 	.word	0x08000f51
 8000744:	08000f51 	.word	0x08000f51
 8000748:	08000f51 	.word	0x08000f51
 800074c:	08000f51 	.word	0x08000f51
 8000750:	08000f51 	.word	0x08000f51
 8000754:	08000f51 	.word	0x08000f51
 8000758:	08000f51 	.word	0x08000f51
 800075c:	08000f51 	.word	0x08000f51
 8000760:	08000f51 	.word	0x08000f51
 8000764:	08000f51 	.word	0x08000f51
 8000768:	08000f51 	.word	0x08000f51
 800076c:	08000f51 	.word	0x08000f51
 8000770:	08000f51 	.word	0x08000f51
 8000774:	08000f51 	.word	0x08000f51
 8000778:	08000f51 	.word	0x08000f51
 800077c:	08000f51 	.word	0x08000f51
 8000780:	08000f51 	.word	0x08000f51
 8000784:	08000f51 	.word	0x08000f51
 8000788:	08000f51 	.word	0x08000f51
 800078c:	08000f51 	.word	0x08000f51
 8000790:	08000f51 	.word	0x08000f51
 8000794:	08000f51 	.word	0x08000f51
 8000798:	08000f51 	.word	0x08000f51
 800079c:	08000f51 	.word	0x08000f51
 80007a0:	08000f51 	.word	0x08000f51
 80007a4:	08000f51 	.word	0x08000f51
 80007a8:	08000f51 	.word	0x08000f51
 80007ac:	08000f51 	.word	0x08000f51
 80007b0:	08000f51 	.word	0x08000f51
 80007b4:	08000f51 	.word	0x08000f51
 80007b8:	08000f51 	.word	0x08000f51
 80007bc:	08000f51 	.word	0x08000f51
 80007c0:	08000f51 	.word	0x08000f51
 80007c4:	08000f51 	.word	0x08000f51
 80007c8:	08000f51 	.word	0x08000f51
 80007cc:	08000f51 	.word	0x08000f51
 80007d0:	08000f51 	.word	0x08000f51
 80007d4:	08000f51 	.word	0x08000f51
 80007d8:	08000f51 	.word	0x08000f51
 80007dc:	08000f51 	.word	0x08000f51
 80007e0:	08000f51 	.word	0x08000f51
 80007e4:	08000f51 	.word	0x08000f51
 80007e8:	08000f51 	.word	0x08000f51
 80007ec:	08000f51 	.word	0x08000f51
 80007f0:	08000f51 	.word	0x08000f51
 80007f4:	08000f51 	.word	0x08000f51
 80007f8:	08000f51 	.word	0x08000f51
 80007fc:	08000f51 	.word	0x08000f51
 8000800:	08000f51 	.word	0x08000f51
 8000804:	08000f51 	.word	0x08000f51
 8000808:	08000f51 	.word	0x08000f51
 800080c:	08000f51 	.word	0x08000f51
 8000810:	08000f51 	.word	0x08000f51
 8000814:	08000f51 	.word	0x08000f51
 8000818:	08000f51 	.word	0x08000f51
 800081c:	08000f51 	.word	0x08000f51
 8000820:	08000f51 	.word	0x08000f51
 8000824:	08000f51 	.word	0x08000f51
 8000828:	08000f51 	.word	0x08000f51
 800082c:	08000f51 	.word	0x08000f51
 8000830:	08000f51 	.word	0x08000f51
 8000834:	08000f51 	.word	0x08000f51
 8000838:	08000f51 	.word	0x08000f51
 800083c:	08000f51 	.word	0x08000f51
 8000840:	08000f51 	.word	0x08000f51
 8000844:	08000f51 	.word	0x08000f51
 8000848:	08000f51 	.word	0x08000f51
 800084c:	08000f51 	.word	0x08000f51
 8000850:	08000f51 	.word	0x08000f51
 8000854:	08000f51 	.word	0x08000f51
 8000858:	08000f51 	.word	0x08000f51
 800085c:	08000f51 	.word	0x08000f51
 8000860:	08000f51 	.word	0x08000f51
 8000864:	08000f51 	.word	0x08000f51
 8000868:	08000f51 	.word	0x08000f51
 800086c:	08000f51 	.word	0x08000f51
 8000870:	08000f51 	.word	0x08000f51
 8000874:	08000f51 	.word	0x08000f51
 8000878:	08000f51 	.word	0x08000f51
 800087c:	08000f51 	.word	0x08000f51
 8000880:	08000f51 	.word	0x08000f51
 8000884:	08000f51 	.word	0x08000f51
 8000888:	08000f51 	.word	0x08000f51
 800088c:	08000f51 	.word	0x08000f51
 8000890:	08000f51 	.word	0x08000f51
 8000894:	08000f51 	.word	0x08000f51
 8000898:	08000f51 	.word	0x08000f51
 800089c:	08000f51 	.word	0x08000f51
 80008a0:	08000f51 	.word	0x08000f51
 80008a4:	08000f51 	.word	0x08000f51
 80008a8:	08000f51 	.word	0x08000f51
 80008ac:	08000f51 	.word	0x08000f51
 80008b0:	08000f51 	.word	0x08000f51
 80008b4:	08000f51 	.word	0x08000f51
 80008b8:	08000f51 	.word	0x08000f51
 80008bc:	08000f51 	.word	0x08000f51
 80008c0:	08000f51 	.word	0x08000f51
 80008c4:	08000f51 	.word	0x08000f51
 80008c8:	08000f51 	.word	0x08000f51
 80008cc:	08000f51 	.word	0x08000f51
 80008d0:	08000f51 	.word	0x08000f51
 80008d4:	08000f51 	.word	0x08000f51
 80008d8:	08000f51 	.word	0x08000f51
 80008dc:	08000f51 	.word	0x08000f51
 80008e0:	08000f51 	.word	0x08000f51
 80008e4:	08000f51 	.word	0x08000f51
 80008e8:	08000f51 	.word	0x08000f51
 80008ec:	08000f51 	.word	0x08000f51
 80008f0:	08000f51 	.word	0x08000f51
 80008f4:	08000f51 	.word	0x08000f51
 80008f8:	08000f51 	.word	0x08000f51
 80008fc:	08000f51 	.word	0x08000f51
 8000900:	08000f51 	.word	0x08000f51
 8000904:	08000f51 	.word	0x08000f51
 8000908:	08000f51 	.word	0x08000f51
 800090c:	08000f51 	.word	0x08000f51
 8000910:	08000f51 	.word	0x08000f51
 8000914:	08000f51 	.word	0x08000f51
 8000918:	08000f51 	.word	0x08000f51
 800091c:	08000f51 	.word	0x08000f51
 8000920:	08000f51 	.word	0x08000f51
 8000924:	08000f51 	.word	0x08000f51
 8000928:	08000f51 	.word	0x08000f51
 800092c:	08000f51 	.word	0x08000f51
 8000930:	08000f51 	.word	0x08000f51
 8000934:	08000f51 	.word	0x08000f51
 8000938:	08000f51 	.word	0x08000f51
 800093c:	08000f51 	.word	0x08000f51
 8000940:	08000f51 	.word	0x08000f51
 8000944:	08000f51 	.word	0x08000f51
 8000948:	08000f51 	.word	0x08000f51
 800094c:	08000f51 	.word	0x08000f51
 8000950:	08000f51 	.word	0x08000f51
 8000954:	08000f51 	.word	0x08000f51
 8000958:	08000f51 	.word	0x08000f51
 800095c:	08000f51 	.word	0x08000f51
 8000960:	08000f51 	.word	0x08000f51
 8000964:	08000f51 	.word	0x08000f51
 8000968:	08000f51 	.word	0x08000f51
 800096c:	08000f45 	.word	0x08000f45
 8000970:	08000f51 	.word	0x08000f51
 8000974:	08000f51 	.word	0x08000f51
 8000978:	08000f51 	.word	0x08000f51
 800097c:	08000f51 	.word	0x08000f51
 8000980:	08000f51 	.word	0x08000f51
 8000984:	08000f51 	.word	0x08000f51
 8000988:	08000f51 	.word	0x08000f51
 800098c:	08000f51 	.word	0x08000f51
 8000990:	08000f51 	.word	0x08000f51
 8000994:	08000f51 	.word	0x08000f51
 8000998:	08000f51 	.word	0x08000f51
 800099c:	08000f51 	.word	0x08000f51
 80009a0:	08000f51 	.word	0x08000f51
 80009a4:	08000f51 	.word	0x08000f51
 80009a8:	08000f51 	.word	0x08000f51
 80009ac:	08000f4b 	.word	0x08000f4b
 80009b0:	08000f51 	.word	0x08000f51
 80009b4:	08000f51 	.word	0x08000f51
 80009b8:	08000f51 	.word	0x08000f51
 80009bc:	08000f51 	.word	0x08000f51
 80009c0:	08000f51 	.word	0x08000f51
 80009c4:	08000f51 	.word	0x08000f51
 80009c8:	08000f51 	.word	0x08000f51
 80009cc:	08000f51 	.word	0x08000f51
 80009d0:	08000f51 	.word	0x08000f51
 80009d4:	08000f51 	.word	0x08000f51
 80009d8:	08000f51 	.word	0x08000f51
 80009dc:	08000f51 	.word	0x08000f51
 80009e0:	08000f51 	.word	0x08000f51
 80009e4:	08000f51 	.word	0x08000f51
 80009e8:	08000f51 	.word	0x08000f51
 80009ec:	08000f51 	.word	0x08000f51
 80009f0:	08000f33 	.word	0x08000f33
 80009f4:	08000f51 	.word	0x08000f51
 80009f8:	08000f51 	.word	0x08000f51
 80009fc:	08000f51 	.word	0x08000f51
 8000a00:	08000f51 	.word	0x08000f51
 8000a04:	08000f51 	.word	0x08000f51
 8000a08:	08000f51 	.word	0x08000f51
 8000a0c:	08000f51 	.word	0x08000f51
 8000a10:	08000f51 	.word	0x08000f51
 8000a14:	08000f51 	.word	0x08000f51
 8000a18:	08000f51 	.word	0x08000f51
 8000a1c:	08000f51 	.word	0x08000f51
 8000a20:	08000f51 	.word	0x08000f51
 8000a24:	08000f51 	.word	0x08000f51
 8000a28:	08000f51 	.word	0x08000f51
 8000a2c:	08000f51 	.word	0x08000f51
 8000a30:	08000f21 	.word	0x08000f21
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f016 f98f 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fbd5 	bl	80091f0 <HAL_GPIO_WritePin>
		break;
 8000a46:	e28e      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f016 f985 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fbcb 	bl	80091f0 <HAL_GPIO_WritePin>
		break;
 8000a5a:	e284      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
 8000a5c:	24000c68 	.word	0x24000c68
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08017554 	.word	0x08017554
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	0801755c 	.word	0x0801755c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48c1      	ldr	r0, [pc, #772]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a72:	f016 f971 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bc1      	ldr	r3, [pc, #772]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fbb7 	bl	80091f0 <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a82:	4bbf      	ldr	r3, [pc, #764]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		break;
 8000a88:	e26d      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a8a:	48be      	ldr	r0, [pc, #760]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000a8c:	f016 f964 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a90:	4bba      	ldr	r3, [pc, #744]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a92:	2120      	movs	r1, #32
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fbaa 	bl	80091f0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a9c:	4bb7      	ldr	r3, [pc, #732]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 fba4 	bl	80091f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa8:	4bb7      	ldr	r3, [pc, #732]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fb9d 	bl	80091f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	2200      	movs	r2, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fb96 	bl	80091f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ac4:	4bb0      	ldr	r3, [pc, #704]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2200      	movs	r2, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f008 fb8f 	bl	80091f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ad2:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 fb89 	bl	80091f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ade:	4baa      	ldr	r3, [pc, #680]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fb83 	bl	80091f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aea:	4ba7      	ldr	r3, [pc, #668]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fb7c 	bl	80091f0 <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000af8:	4ba1      	ldr	r3, [pc, #644]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000afe:	4ba3      	ldr	r3, [pc, #652]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000b0a:	4ba2      	ldr	r3, [pc, #648]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b1c:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b22:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b28:	4b9f      	ldr	r3, [pc, #636]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

		break;
 8000b2e:	e21a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b30:	489e      	ldr	r0, [pc, #632]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000b32:	f016 f911 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fb56 	bl	80091f0 <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b44:	4b91      	ldr	r3, [pc, #580]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e20c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b4c:	4898      	ldr	r0, [pc, #608]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000b4e:	f016 f903 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b52:	4b8d      	ldr	r3, [pc, #564]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f008 fb48 	bl	80091f0 <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b60:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		break;
 8000b66:	e1fe      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b68:	4892      	ldr	r0, [pc, #584]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000b6a:	f016 f8f5 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f008 fb3b 	bl	80091f0 <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b7a:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		break;
 8000b80:	e1f1      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b82:	488d      	ldr	r0, [pc, #564]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000b84:	f016 f8e8 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b88:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 fb2e 	bl	80091f0 <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b94:	4b7e      	ldr	r3, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e1e4      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000b9e:	f016 f8db 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fb21 	bl	80091f0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000bae:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
		break;
 8000bb4:	e1d7      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bb6:	4882      	ldr	r0, [pc, #520]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000bb8:	f016 f8ce 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bbc:	4b72      	ldr	r3, [pc, #456]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f008 fb14 	bl	80091f0 <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bc8:	4b72      	ldr	r3, [pc, #456]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
		break;
 8000bce:	e1ca      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd0:	487c      	ldr	r0, [pc, #496]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000bd2:	f016 f8c1 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bd6:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fb06 	bl	80091f0 <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e1bc      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000bee:	f016 f8b3 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 faf8 	bl	80091f0 <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000c00:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		break;
 8000c06:	e1ae      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c08:	4870      	ldr	r0, [pc, #448]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c0a:	f016 f8a5 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	2201      	movs	r2, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 faea 	bl	80091f0 <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e1a0      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c24:	486a      	ldr	r0, [pc, #424]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c26:	f016 f897 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c2a:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	2200      	movs	r2, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fadc 	bl	80091f0 <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e192      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c40:	4864      	ldr	r0, [pc, #400]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c42:	f016 f889 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f008 face 	bl	80091f0 <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e184      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c5c:	485e      	ldr	r0, [pc, #376]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000c5e:	f016 f87b 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f008 fac0 	bl	80091f0 <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c70:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]

		break;
 8000c76:	e176      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c78:	4858      	ldr	r0, [pc, #352]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000c7a:	f016 f86d 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f008 fab3 	bl	80091f0 <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
		break;
 8000c90:	e169      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c92:	4853      	ldr	r0, [pc, #332]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000c94:	f016 f860 	bl	8016d58 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 faa6 	bl	80091f0 <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e15c      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cae:	f016 f853 	bl	8016d58 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cbe:	f004 fefb 	bl	8005ab8 <HAL_DAC_Start_DMA>
		break;
 8000cc2:	e150      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000cc6:	f016 f847 	bl	8016d58 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f004 ffb3 	bl	8005c38 <HAL_DAC_Stop_DMA>
		break;
 8000cd2:	e148      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cd6:	f016 f83f 	bl	8016d58 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cda:	210c      	movs	r1, #12
 8000cdc:	4846      	ldr	r0, [pc, #280]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000cde:	f00d fe8b 	bl	800e9f8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f012 faef 	bl	80132cc <osEventFlagsSet>
		ERPA_ON = 1;
 8000cee:	4b44      	ldr	r3, [pc, #272]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <HAL_UART_RxCpltCallback+0x77c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
		break;
 8000cfa:	e134      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <HAL_UART_RxCpltCallback+0x780>)
 8000cfe:	f016 f82b 	bl	8016d58 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000d02:	210c      	movs	r1, #12
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <HAL_UART_RxCpltCallback+0x770>)
 8000d06:	f00d ffd1 	bl	800ecac <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	; (8000e00 <HAL_UART_RxCpltCallback+0x778>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
		break;
 8000d10:	e129      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000d12:	483e      	ldr	r0, [pc, #248]	; (8000e0c <HAL_UART_RxCpltCallback+0x784>)
 8000d14:	f016 f820 	bl	8016d58 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	483d      	ldr	r0, [pc, #244]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d1c:	f00d fe6c 	bl	800e9f8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 fad0 	bl	80132cc <osEventFlagsSet>
		PMT_ON = 1;
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_UART_RxCpltCallback+0x790>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
		break;
 8000d38:	e115      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d3a:	4838      	ldr	r0, [pc, #224]	; (8000e1c <HAL_UART_RxCpltCallback+0x794>)
 8000d3c:	f016 f80c 	bl	8016d58 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <HAL_UART_RxCpltCallback+0x788>)
 8000d44:	f00d ffb2 	bl	800ecac <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_UART_RxCpltCallback+0x78c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		break;
 8000d4e:	e10a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <HAL_UART_RxCpltCallback+0x798>)
 8000d52:	f016 f801 	bl	8016d58 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	4832      	ldr	r0, [pc, #200]	; (8000e24 <HAL_UART_RxCpltCallback+0x79c>)
 8000d5a:	f00d fe4d 	bl	800e9f8 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_UART_RxCpltCallback+0x774>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2104      	movs	r1, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f012 fab1 	bl	80132cc <osEventFlagsSet>
		HK_ON = 1;
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_UART_RxCpltCallback+0x7a0>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_UART_RxCpltCallback+0x7a4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
		break;
 8000d76:	e0f6      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
 8000d78:	08017568 	.word	0x08017568
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	24000c1c 	.word	0x24000c1c
 8000d84:	08017574 	.word	0x08017574
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	24000c1d 	.word	0x24000c1d
 8000d90:	24000c1e 	.word	0x24000c1e
 8000d94:	24000c1f 	.word	0x24000c1f
 8000d98:	24000c20 	.word	0x24000c20
 8000d9c:	24000c21 	.word	0x24000c21
 8000da0:	24000c22 	.word	0x24000c22
 8000da4:	24000c23 	.word	0x24000c23
 8000da8:	24000c24 	.word	0x24000c24
 8000dac:	08017580 	.word	0x08017580
 8000db0:	0801758c 	.word	0x0801758c
 8000db4:	0801759c 	.word	0x0801759c
 8000db8:	080175a8 	.word	0x080175a8
 8000dbc:	080175b4 	.word	0x080175b4
 8000dc0:	080175c0 	.word	0x080175c0
 8000dc4:	080175d0 	.word	0x080175d0
 8000dc8:	080175dc 	.word	0x080175dc
 8000dcc:	080175e8 	.word	0x080175e8
 8000dd0:	080175f4 	.word	0x080175f4
 8000dd4:	08017600 	.word	0x08017600
 8000dd8:	08017610 	.word	0x08017610
 8000ddc:	08017620 	.word	0x08017620
 8000de0:	0801762c 	.word	0x0801762c
 8000de4:	0801763c 	.word	0x0801763c
 8000de8:	24000010 	.word	0x24000010
 8000dec:	240002f4 	.word	0x240002f4
 8000df0:	0801764c 	.word	0x0801764c
 8000df4:	0801765c 	.word	0x0801765c
 8000df8:	24000554 	.word	0x24000554
 8000dfc:	24000c64 	.word	0x24000c64
 8000e00:	24000c5f 	.word	0x24000c5f
 8000e04:	24000c58 	.word	0x24000c58
 8000e08:	08017664 	.word	0x08017664
 8000e0c:	08017670 	.word	0x08017670
 8000e10:	24000508 	.word	0x24000508
 8000e14:	24000c5e 	.word	0x24000c5e
 8000e18:	24000c54 	.word	0x24000c54
 8000e1c:	08017678 	.word	0x08017678
 8000e20:	08017680 	.word	0x08017680
 8000e24:	240005a0 	.word	0x240005a0
 8000e28:	24000c60 	.word	0x24000c60
 8000e2c:	24000c5c 	.word	0x24000c5c
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000e30:	484f      	ldr	r0, [pc, #316]	; (8000f70 <HAL_UART_RxCpltCallback+0x8e8>)
 8000e32:	f015 ff91 	bl	8016d58 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	484e      	ldr	r0, [pc, #312]	; (8000f74 <HAL_UART_RxCpltCallback+0x8ec>)
 8000e3a:	f00d ff37 	bl	800ecac <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000e3e:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		break;
 8000e44:	e08f      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e46:	484d      	ldr	r0, [pc, #308]	; (8000f7c <HAL_UART_RxCpltCallback+0x8f4>)
 8000e48:	f015 ff86 	bl	8016d58 <puts>
		if (step < 17) {
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	f200 8081 	bhi.w	8000f58 <HAL_UART_RxCpltCallback+0x8d0>
			step += 2;
 8000e56:	4b4a      	ldr	r3, [pc, #296]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e62:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	4845      	ldr	r0, [pc, #276]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e74:	f004 ff83 	bl	8005d7e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4843      	ldr	r0, [pc, #268]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000e7c:	f004 fdc4 	bl	8005a08 <HAL_DAC_Start>
		}
		break;
 8000e80:	e06a      	b.n	8000f58 <HAL_UART_RxCpltCallback+0x8d0>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e82:	4842      	ldr	r0, [pc, #264]	; (8000f8c <HAL_UART_RxCpltCallback+0x904>)
 8000e84:	f015 ff68 	bl	8016d58 <puts>
		if (step > 3) {
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d965      	bls.n	8000f5c <HAL_UART_RxCpltCallback+0x8d4>
			step -= 2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3b02      	subs	r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e9a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_UART_RxCpltCallback+0x8f8>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <HAL_UART_RxCpltCallback+0x8fc>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000eae:	f004 ff66 	bl	8005d7e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4834      	ldr	r0, [pc, #208]	; (8000f88 <HAL_UART_RxCpltCallback+0x900>)
 8000eb6:	f004 fda7 	bl	8005a08 <HAL_DAC_Start>
		}
		break;
 8000eba:	e04f      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x8d4>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ebc:	4834      	ldr	r0, [pc, #208]	; (8000f90 <HAL_UART_RxCpltCallback+0x908>)
 8000ebe:	f015 ff4b 	bl	8016d58 <puts>
		if (cadence <= 50000) {
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d848      	bhi.n	8000f60 <HAL_UART_RxCpltCallback+0x8d8>
			cadence *= 2;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ed6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ee2:	e03d      	b.n	8000f60 <HAL_UART_RxCpltCallback+0x8d8>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000ee4:	482c      	ldr	r0, [pc, #176]	; (8000f98 <HAL_UART_RxCpltCallback+0x910>)
 8000ee6:	f015 ff37 	bl	8016d58 <puts>
		if (cadence >= 6250) {
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d936      	bls.n	8000f64 <HAL_UART_RxCpltCallback+0x8dc>
			cadence /= 2;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000efe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_UART_RxCpltCallback+0x90c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000f0a:	e02b      	b.n	8000f64 <HAL_UART_RxCpltCallback+0x8dc>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000f0c:	4823      	ldr	r0, [pc, #140]	; (8000f9c <HAL_UART_RxCpltCallback+0x914>)
 8000f0e:	f015 ff23 	bl	8016d58 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_UART_RxCpltCallback+0x918>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2116      	movs	r1, #22
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f012 f9d7 	bl	80132cc <osEventFlagsSet>
		break;
 8000f1e:	e022      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <HAL_UART_RxCpltCallback+0x91c>)
 8000f22:	f015 ff19 	bl	8016d58 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_UART_RxCpltCallback+0x920>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f013 ff74 	bl	8014e18 <xTaskResumeFromISR>
		break;
 8000f30:	e019      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f32:	481e      	ldr	r0, [pc, #120]	; (8000fac <HAL_UART_RxCpltCallback+0x924>)
 8000f34:	f015 ff10 	bl	8016d58 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_UART_RxCpltCallback+0x928>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f013 ff6b 	bl	8014e18 <xTaskResumeFromISR>
		break;
 8000f42:	e010      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xAF: {
		sync();
 8000f44:	f001 fa2a 	bl	800239c <sync>
		break;
 8000f48:	e00d      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	case 0xBF: {
		enter_flight_mode();
 8000f4a:	f001 f8ef 	bl	800212c <enter_flight_mode>
		break;
 8000f4e:	e00a      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
	}
	default: {
		printf("Unknown Command\n");
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <HAL_UART_RxCpltCallback+0x92c>)
 8000f52:	f015 ff01 	bl	8016d58 <puts>
		break;
 8000f56:	e006      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f58:	bf00      	nop
 8000f5a:	e004      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f5c:	bf00      	nop
 8000f5e:	e002      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <HAL_UART_RxCpltCallback+0x8de>
		break;
 8000f64:	bf00      	nop
	}
	}
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08017688 	.word	0x08017688
 8000f74:	240005a0 	.word	0x240005a0
 8000f78:	24000c60 	.word	0x24000c60
 8000f7c:	08017690 	.word	0x08017690
 8000f80:	2400000c 	.word	0x2400000c
 8000f84:	24000010 	.word	0x24000010
 8000f88:	240002f4 	.word	0x240002f4
 8000f8c:	08017698 	.word	0x08017698
 8000f90:	080176a4 	.word	0x080176a4
 8000f94:	24000008 	.word	0x24000008
 8000f98:	080176b0 	.word	0x080176b0
 8000f9c:	080176bc 	.word	0x080176bc
 8000fa0:	24000c64 	.word	0x24000c64
 8000fa4:	080176cc 	.word	0x080176cc
 8000fa8:	24000750 	.word	0x24000750
 8000fac:	080176d8 	.word	0x080176d8
 8000fb0:	240009b0 	.word	0x240009b0
 8000fb4:	080176e4 	.word	0x080176e4

08000fb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fbc:	f002 ff90 	bl	8003ee0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc0:	f000 f8ac 	bl	800111c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000fc4:	f000 f92a 	bl	800121c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fc8:	f000 feee 	bl	8001da8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000fcc:	f000 feb4 	bl	8001d38 <MX_DMA_Init>
	MX_TIM3_Init();
 8000fd0:	f000 fdac 	bl	8001b2c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000fd4:	f000 fe48 	bl	8001c68 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000fd8:	f000 fb36 	bl	8001648 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000fdc:	f000 fc2c 	bl	8001838 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000fe0:	f000 fd2e 	bl	8001a40 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000fe4:	f000 fc80 	bl	80018e8 <MX_TIM1_Init>
	MX_ADC3_Init();
 8000fe8:	f000 fa6a 	bl	80014c0 <MX_ADC3_Init>
	MX_ADC1_Init();
 8000fec:	f000 f946 	bl	800127c <MX_ADC1_Init>
	MX_DAC1_Init();
 8000ff0:	f000 faf8 	bl	80015e4 <MX_DAC1_Init>
	MX_SPI1_Init();
 8000ff4:	f000 fbc8 	bl	8001788 <MX_SPI1_Init>
	MX_RTC_Init();
 8000ff8:	f000 fb68 	bl	80016cc <MX_RTC_Init>
	MX_TIM4_Init();
 8000ffc:	f000 fde6 	bl	8001bcc <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001000:	f011 ffec 	bl	8012fdc <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8001004:	2200      	movs	r2, #0
 8001006:	2108      	movs	r1, #8
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	f012 fa5c 	bl	80134c6 <osMessageQueueNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <main+0xf8>)
 8001012:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PMT_task */
	PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <main+0xfc>)
 8001016:	2100      	movs	r1, #0
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0x100>)
 800101a:	f012 f829 	bl	8013070 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <main+0x104>)
 8001022:	6013      	str	r3, [r2, #0]

	/* creation of ERPA_task */
	ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <main+0x108>)
 8001026:	2100      	movs	r1, #0
 8001028:	4826      	ldr	r0, [pc, #152]	; (80010c4 <main+0x10c>)
 800102a:	f012 f821 	bl	8013070 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <main+0x110>)
 8001032:	6013      	str	r3, [r2, #0]

	/* creation of HK_task */
	HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8001034:	4a25      	ldr	r2, [pc, #148]	; (80010cc <main+0x114>)
 8001036:	2100      	movs	r1, #0
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <main+0x118>)
 800103a:	f012 f819 	bl	8013070 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x11c>)
 8001042:	6013      	str	r3, [r2, #0]

	/* creation of GPIO_on_task */
	GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL,
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <main+0x120>)
 8001046:	2100      	movs	r1, #0
 8001048:	4824      	ldr	r0, [pc, #144]	; (80010dc <main+0x124>)
 800104a:	f012 f811 	bl	8013070 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <main+0x128>)
 8001052:	6013      	str	r3, [r2, #0]
			&GPIO_on_task_attributes);

	/* creation of GPIO_off_task */
	GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL,
 8001054:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <main+0x12c>)
 8001056:	2100      	movs	r1, #0
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <main+0x130>)
 800105a:	f012 f809 	bl	8013070 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <main+0x134>)
 8001062:	6013      	str	r3, [r2, #0]
			&GPIO_off_task_attributes);

	/* creation of UART_TX_task */
	UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL,
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <main+0x138>)
 8001066:	2100      	movs	r1, #0
 8001068:	4822      	ldr	r0, [pc, #136]	; (80010f4 <main+0x13c>)
 800106a:	f012 f801 	bl	8013070 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <main+0x140>)
 8001072:	6013      	str	r3, [r2, #0]
			&UART_TX_task_attributes);

	/* creation of Voltage_Monitor */
	Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL,
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <main+0x144>)
 8001076:	2100      	movs	r1, #0
 8001078:	4821      	ldr	r0, [pc, #132]	; (8001100 <main+0x148>)
 800107a:	f011 fff9 	bl	8013070 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <main+0x14c>)
 8001082:	6013      	str	r3, [r2, #0]
			&Voltage_Monitor_attributes);

	/* creation of FLAG_task */
	FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <main+0x150>)
 8001086:	2100      	movs	r1, #0
 8001088:	4820      	ldr	r0, [pc, #128]	; (800110c <main+0x154>)
 800108a:	f011 fff1 	bl	8013070 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <main+0x158>)
 8001092:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8001094:	2000      	movs	r0, #0
 8001096:	f012 f8d9 	bl	801324c <osEventFlagsNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <main+0x15c>)
 800109e:	6013      	str	r3, [r2, #0]
	system_setup();
 80010a0:	f001 f9e6 	bl	8002470 <system_setup>
	printf("Starting kernal...\n");
 80010a4:	481c      	ldr	r0, [pc, #112]	; (8001118 <main+0x160>)
 80010a6:	f015 fe57 	bl	8016d58 <puts>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80010aa:	f011 ffbb 	bl	8013024 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010ae:	e7fe      	b.n	80010ae <main+0xf6>
 80010b0:	24000c48 	.word	0x24000c48
 80010b4:	08017740 	.word	0x08017740
 80010b8:	08002c35 	.word	0x08002c35
 80010bc:	24000744 	.word	0x24000744
 80010c0:	08017764 	.word	0x08017764
 80010c4:	08002c79 	.word	0x08002c79
 80010c8:	24000748 	.word	0x24000748
 80010cc:	08017788 	.word	0x08017788
 80010d0:	08002cb9 	.word	0x08002cb9
 80010d4:	2400074c 	.word	0x2400074c
 80010d8:	080177ac 	.word	0x080177ac
 80010dc:	08002cfd 	.word	0x08002cfd
 80010e0:	24000750 	.word	0x24000750
 80010e4:	080177d0 	.word	0x080177d0
 80010e8:	08002da5 	.word	0x08002da5
 80010ec:	240009b0 	.word	0x240009b0
 80010f0:	080177f4 	.word	0x080177f4
 80010f4:	08002e4d 	.word	0x08002e4d
 80010f8:	24000c10 	.word	0x24000c10
 80010fc:	08017818 	.word	0x08017818
 8001100:	08002f05 	.word	0x08002f05
 8001104:	24000c14 	.word	0x24000c14
 8001108:	0801783c 	.word	0x0801783c
 800110c:	08002ffd 	.word	0x08002ffd
 8001110:	24000c18 	.word	0x24000c18
 8001114:	24000c64 	.word	0x24000c64
 8001118:	080176f4 	.word	0x080176f4

0800111c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	; 0x70
 8001120:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	224c      	movs	r2, #76	; 0x4c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f015 fcbe 	bl	8016aac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2220      	movs	r2, #32
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f015 fcb8 	bl	8016aac <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800113c:	2002      	movs	r0, #2
 800113e:	f008 feb9 	bl	8009eb4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <SystemClock_Config+0xf8>)
 8001148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <SystemClock_Config+0xf8>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <SystemClock_Config+0xf8>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <SystemClock_Config+0xfc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001164:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <SystemClock_Config+0xfc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001178:	bf00      	nop
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SystemClock_Config+0xfc>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001186:	d1f8      	bne.n	800117a <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001188:	2303      	movs	r3, #3
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001192:	2309      	movs	r3, #9
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	2302      	movs	r3, #2
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 32;
 80011a6:	2320      	movs	r3, #32
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ae:	2304      	movs	r3, #4
 80011b0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011b6:	2308      	movs	r3, #8
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 feae 	bl	8009f28 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xba>
		Error_Handler();
 80011d2:	f001 ff43 	bl	800305c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011d6:	233f      	movs	r3, #63	; 0x3f
 80011d8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2303      	movs	r3, #3
 80011dc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 faee 	bl	800a7dc <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xee>
		Error_Handler();
 8001206:	f001 ff29 	bl	800305c <Error_Handler>
	}
}
 800120a:	bf00      	nop
 800120c:	3770      	adds	r7, #112	; 0x70
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58000400 	.word	0x58000400
 8001218:	58024800 	.word	0x58024800

0800121c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b0      	sub	sp, #192	; 0xc0
 8001220:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001222:	463b      	mov	r3, r7
 8001224:	22c0      	movs	r2, #192	; 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f015 fc3f 	bl	8016aac <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 32;
 800123e:	2320      	movs	r3, #32
 8001240:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001242:	2308      	movs	r3, #8
 8001244:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001260:	463b      	mov	r3, r7
 8001262:	4618      	mov	r0, r3
 8001264:	f009 fe88 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <PeriphCommonClock_Config+0x56>
		Error_Handler();
 800126e:	f001 fef5 	bl	800305c <Error_Handler>
	}
}
 8001272:	bf00      	nop
 8001274:	37c0      	adds	r7, #192	; 0xc0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <MX_ADC1_Init+0x210>)
 80012a2:	4a7b      	ldr	r2, [pc, #492]	; (8001490 <MX_ADC1_Init+0x214>)
 80012a4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <MX_ADC1_Init+0x210>)
 80012a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ac:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ae:	4b77      	ldr	r3, [pc, #476]	; (800148c <MX_ADC1_Init+0x210>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <MX_ADC1_Init+0x210>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <MX_ADC1_Init+0x210>)
 80012bc:	2204      	movs	r2, #4
 80012be:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c0:	4b72      	ldr	r3, [pc, #456]	; (800148c <MX_ADC1_Init+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <MX_ADC1_Init+0x210>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 11;
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <MX_ADC1_Init+0x210>)
 80012ce:	220b      	movs	r2, #11
 80012d0:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <MX_ADC1_Init+0x210>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <MX_ADC1_Init+0x210>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <MX_ADC1_Init+0x210>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <MX_ADC1_Init+0x210>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <MX_ADC1_Init+0x210>)
 80012ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <MX_ADC1_Init+0x210>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80012f8:	4b64      	ldr	r3, [pc, #400]	; (800148c <MX_ADC1_Init+0x210>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001300:	4862      	ldr	r0, [pc, #392]	; (800148c <MX_ADC1_Init+0x210>)
 8001302:	f003 f879 	bl	80043f8 <HAL_ADC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x94>
		Error_Handler();
 800130c:	f001 fea6 	bl	800305c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	485c      	ldr	r0, [pc, #368]	; (800148c <MX_ADC1_Init+0x210>)
 800131c:	f004 f994 	bl	8005648 <HAL_ADCEx_MultiModeConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0xae>
		Error_Handler();
 8001326:	f001 fe99 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <MX_ADC1_Init+0x218>)
 800132c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800132e:	2306      	movs	r3, #6
 8001330:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001332:	2307      	movs	r3, #7
 8001334:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001336:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800133a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133c:	2304      	movs	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	484f      	ldr	r0, [pc, #316]	; (800148c <MX_ADC1_Init+0x210>)
 800134e:	f003 fad7 	bl	8004900 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0xe0>
		Error_Handler();
 8001358:	f001 fe80 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800135c:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <MX_ADC1_Init+0x21c>)
 800135e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001360:	230c      	movs	r3, #12
 8001362:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4848      	ldr	r0, [pc, #288]	; (800148c <MX_ADC1_Init+0x210>)
 800136a:	f003 fac9 	bl	8004900 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0xfc>
		Error_Handler();
 8001374:	f001 fe72 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <MX_ADC1_Init+0x220>)
 800137a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800137c:	2312      	movs	r3, #18
 800137e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4841      	ldr	r0, [pc, #260]	; (800148c <MX_ADC1_Init+0x210>)
 8001386:	f003 fabb 	bl	8004900 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x118>
		Error_Handler();
 8001390:	f001 fe64 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001394:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <MX_ADC1_Init+0x224>)
 8001396:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001398:	2318      	movs	r3, #24
 800139a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <MX_ADC1_Init+0x210>)
 80013a2:	f003 faad 	bl	8004900 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x134>
		Error_Handler();
 80013ac:	f001 fe56 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_ADC1_Init+0x228>)
 80013b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4833      	ldr	r0, [pc, #204]	; (800148c <MX_ADC1_Init+0x210>)
 80013c0:	f003 fa9e 	bl	8004900 <HAL_ADC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x152>
		Error_Handler();
 80013ca:	f001 fe47 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <MX_ADC1_Init+0x22c>)
 80013d0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 80013d2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013d6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	482b      	ldr	r0, [pc, #172]	; (800148c <MX_ADC1_Init+0x210>)
 80013de:	f003 fa8f 	bl	8004900 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0x170>
		Error_Handler();
 80013e8:	f001 fe38 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <MX_ADC1_Init+0x230>)
 80013ee:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 80013f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013f4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4824      	ldr	r0, [pc, #144]	; (800148c <MX_ADC1_Init+0x210>)
 80013fc:	f003 fa80 	bl	8004900 <HAL_ADC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC1_Init+0x18e>
		Error_Handler();
 8001406:	f001 fe29 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800140a:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <MX_ADC1_Init+0x234>)
 800140c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 800140e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001412:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <MX_ADC1_Init+0x210>)
 800141a:	f003 fa71 	bl	8004900 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x1ac>
		Error_Handler();
 8001424:	f001 fe1a 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_ADC1_Init+0x238>)
 800142a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800142c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001430:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_ADC1_Init+0x210>)
 8001438:	f003 fa62 	bl	8004900 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0x1ca>
		Error_Handler();
 8001442:	f001 fe0b 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_ADC1_Init+0x23c>)
 8001448:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_ADC1_Init+0x210>)
 8001456:	f003 fa53 	bl	8004900 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x1e8>
		Error_Handler();
 8001460:	f001 fdfc 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_ADC1_Init+0x240>)
 8001466:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_11;
 8001468:	f240 2306 	movw	r3, #518	; 0x206
 800146c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_ADC1_Init+0x210>)
 8001474:	f003 fa44 	bl	8004900 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x206>
		Error_Handler();
 800147e:	f001 fded 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400013c 	.word	0x2400013c
 8001490:	40022000 	.word	0x40022000
 8001494:	0c900008 	.word	0x0c900008
 8001498:	10c00010 	.word	0x10c00010
 800149c:	14f00020 	.word	0x14f00020
 80014a0:	1d500080 	.word	0x1d500080
 80014a4:	21800100 	.word	0x21800100
 80014a8:	25b00200 	.word	0x25b00200
 80014ac:	2a000400 	.word	0x2a000400
 80014b0:	2e300800 	.word	0x2e300800
 80014b4:	3ac04000 	.word	0x3ac04000
 80014b8:	3ef08000 	.word	0x3ef08000
 80014bc:	47520000 	.word	0x47520000

080014c0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80014d8:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014da:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <MX_ADC3_Init+0x114>)
 80014dc:	601a      	str	r2, [r3, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80014f0:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 4;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <MX_ADC3_Init+0x110>)
 80014fe:	2204      	movs	r2, #4
 8001500:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_ADC3_Init+0x110>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001516:	2203      	movs	r2, #3
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_ADC3_Init+0x110>)
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC3_Init+0x110>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001530:	4827      	ldr	r0, [pc, #156]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001532:	f002 ff61 	bl	80043f8 <HAL_ADC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ADC3_Init+0x80>
		Error_Handler();
 800153c:	f001 fd8e 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_ADC3_Init+0x118>)
 8001542:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001544:	2306      	movs	r3, #6
 8001546:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001548:	2307      	movs	r3, #7
 800154a:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001550:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001552:	2304      	movs	r3, #4
 8001554:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	481b      	ldr	r0, [pc, #108]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001564:	f003 f9cc 	bl	8004900 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0xb2>
		Error_Handler();
 800156e:	f001 fd75 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_ADC3_Init+0x11c>)
 8001574:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001576:	230c      	movs	r3, #12
 8001578:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_ADC3_Init+0x110>)
 8001580:	f003 f9be 	bl	8004900 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC3_Init+0xce>
		Error_Handler();
 800158a:	f001 fd67 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800158e:	2301      	movs	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001592:	2312      	movs	r3, #18
 8001594:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC3_Init+0x110>)
 800159c:	f003 f9b0 	bl	8004900 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC3_Init+0xea>
		Error_Handler();
 80015a6:	f001 fd59 	bl	800305c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_ADC3_Init+0x120>)
 80015ac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80015ae:	2318      	movs	r3, #24
 80015b0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC3_Init+0x110>)
 80015b8:	f003 f9a2 	bl	8004900 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC3_Init+0x106>
		Error_Handler();
 80015c2:	f001 fd4b 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	240001a0 	.word	0x240001a0
 80015d4:	58026000 	.word	0x58026000
 80015d8:	cb840000 	.word	0xcb840000
 80015dc:	cfb80000 	.word	0xcfb80000
 80015e0:	04300002 	.word	0x04300002

080015e4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2224      	movs	r2, #36	; 0x24
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f015 fa5b 	bl	8016aac <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_DAC1_Init+0x60>)
 80015fa:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <MX_DAC1_Init+0x5c>)
 80015fe:	f004 f9e1 	bl	80059c4 <HAL_DAC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_DAC1_Init+0x28>
		Error_Handler();
 8001608:	f001 fd28 	bl	800305c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001610:	230a      	movs	r3, #10
 8001612:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_DAC1_Init+0x5c>)
 8001628:	f004 fbfc 	bl	8005e24 <HAL_DAC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_DAC1_Init+0x52>
		Error_Handler();
 8001632:	f001 fd13 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	240002f4 	.word	0x240002f4
 8001644:	40007400 	.word	0x40007400

08001648 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001650:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0020081F;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <MX_I2C1_Init+0x80>)
 8001656:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_I2C1_Init+0x78>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C1_Init+0x78>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_I2C1_Init+0x78>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001684:	f007 fdce 	bl	8009224 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800168e:	f001 fce5 	bl	800305c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001692:	2100      	movs	r1, #0
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001696:	f008 fb15 	bl	8009cc4 <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80016a0:	f001 fcdc 	bl	800305c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016a4:	2100      	movs	r1, #0
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x78>)
 80016a8:	f008 fb57 	bl	8009d5a <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80016b2:	f001 fcd3 	bl	800305c <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f008 fb9c 	bl	8009df4 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000380 	.word	0x24000380
 80016c4:	40005400 	.word	0x40005400
 80016c8:	0020081f 	.word	0x0020081f

080016cc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80016e0:	2300      	movs	r3, #0
 80016e2:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_RTC_Init+0xb4>)
 80016e6:	4a27      	ldr	r2, [pc, #156]	; (8001784 <MX_RTC_Init+0xb8>)
 80016e8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <MX_RTC_Init+0xb4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 100 - 1;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_RTC_Init+0xb4>)
 80016f2:	2263      	movs	r2, #99	; 0x63
 80016f4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 10000 - 1;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_RTC_Init+0xb4>)
 80016f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80016fc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_RTC_Init+0xb4>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_RTC_Init+0xb4>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_RTC_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_RTC_Init+0xb4>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001716:	481a      	ldr	r0, [pc, #104]	; (8001780 <MX_RTC_Init+0xb4>)
 8001718:	f00c f92c 	bl	800d974 <HAL_RTC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_RTC_Init+0x5a>
		Error_Handler();
 8001722:	f001 fc9b 	bl	800305c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001726:	2300      	movs	r3, #0
 8001728:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800172a:	2300      	movs	r3, #0
 800172c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800172e:	2300      	movs	r3, #0
 8001730:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <MX_RTC_Init+0xb4>)
 8001742:	f00c f999 	bl	800da78 <HAL_RTC_SetTime>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_RTC_Init+0x84>
		Error_Handler();
 800174c:	f001 fc86 	bl	800305c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001750:	2301      	movs	r3, #1
 8001752:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001754:	2301      	movs	r3, #1
 8001756:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001758:	2301      	movs	r3, #1
 800175a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 800175c:	2300      	movs	r3, #0
 800175e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001760:	463b      	mov	r3, r7
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_RTC_Init+0xb4>)
 8001768:	f00c fa80 	bl	800dc6c <HAL_RTC_SetDate>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0xaa>
		Error_Handler();
 8001772:	f001 fc73 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240003d4 	.word	0x240003d4
 8001784:	58004000 	.word	0x58004000

08001788 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <MX_SPI1_Init+0xa8>)
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <MX_SPI1_Init+0xac>)
 8001790:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001798:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_SPI1_Init+0xa8>)
 800179c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017a0:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017a4:	220f      	movs	r2, #15
 80017a6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ba:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017be:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017c2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_SPI1_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_SPI1_Init+0xa8>)
 800180a:	2200      	movs	r2, #0
 800180c:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_SPI1_Init+0xa8>)
 8001816:	2200      	movs	r2, #0
 8001818:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_SPI1_Init+0xa8>)
 800181c:	f00c fbcc 	bl	800dfb8 <HAL_SPI_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_SPI1_Init+0xa2>
		Error_Handler();
 8001826:	f001 fc19 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240003f8 	.word	0x240003f8
 8001834:	40013000 	.word	0x40013000

08001838 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <MX_SPI2_Init+0xac>)
 8001840:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001844:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001848:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800184c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001850:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001854:	220f      	movs	r2, #15
 8001856:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001866:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800186a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800186e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001872:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800188e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_SPI2_Init+0xa8>)
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_SPI2_Init+0xa8>)
 800189c:	2200      	movs	r2, #0
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_SPI2_Init+0xa8>)
 80018cc:	f00c fb74 	bl	800dfb8 <HAL_SPI_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_SPI2_Init+0xa2>
		Error_Handler();
 80018d6:	f001 fbc1 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24000480 	.word	0x24000480
 80018e4:	40003800 	.word	0x40003800

080018e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	; 0x68
 80018ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	222c      	movs	r2, #44	; 0x2c
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f015 f8c2 	bl	8016aac <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <MX_TIM1_Init+0x150>)
 800192a:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <MX_TIM1_Init+0x154>)
 800192c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 50 - 1;
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001930:	2231      	movs	r2, #49	; 0x31
 8001932:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62500 - 1;
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_TIM1_Init+0x150>)
 800193c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001940:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <MX_TIM1_Init+0x150>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001954:	4838      	ldr	r0, [pc, #224]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001956:	f00c ff80 	bl	800e85a <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001960:	f001 fb7c 	bl	800305c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800196a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800196e:	4619      	mov	r1, r3
 8001970:	4831      	ldr	r0, [pc, #196]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001972:	f00d fcfb 	bl	800f36c <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x98>
		Error_Handler();
 800197c:	f001 fb6e 	bl	800305c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001980:	482d      	ldr	r0, [pc, #180]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001982:	f00d fa77 	bl	800ee74 <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800198c:	f001 fb66 	bl	800305c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800199c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019a0:	4619      	mov	r1, r3
 80019a2:	4825      	ldr	r0, [pc, #148]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019a4:	f00e fa38 	bl	800fe18 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80019ae:	f001 fb55 	bl	800305c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2360      	movs	r3, #96	; 0x60
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80019ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	4818      	ldr	r0, [pc, #96]	; (8001a38 <MX_TIM1_Init+0x150>)
 80019d8:	f00d fbb4 	bl	800f144 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 80019e2:	f001 fb3b 	bl	800305c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4807      	ldr	r0, [pc, #28]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a1c:	f00e fa8a 	bl	800ff34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001a26:	f001 fb19 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <MX_TIM1_Init+0x150>)
 8001a2c:	f001 fec6 	bl	80037bc <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3768      	adds	r7, #104	; 0x68
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000508 	.word	0x24000508
 8001a3c:	40010000 	.word	0x40010000

08001a40 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a78:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50 - 1;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a7c:	2231      	movs	r2, #49	; 0x31
 8001a7e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3125 - 1;
 8001a86:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a88:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a8c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a9a:	4823      	ldr	r0, [pc, #140]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001a9c:	f00c fedd 	bl	800e85a <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001aa6:	f001 fad9 	bl	800305c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481c      	ldr	r0, [pc, #112]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ab8:	f00d fc58 	bl	800f36c <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x86>
		Error_Handler();
 8001ac2:	f001 facb 	bl	800305c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ac8:	f00d f9d4 	bl	800ee74 <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM2_Init+0x96>
		Error_Handler();
 8001ad2:	f001 fac3 	bl	800305c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001ae6:	f00e f997 	bl	800fe18 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001af0:	f001 fab4 	bl	800305c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	; 0x60
 8001af6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8001b04:	463b      	mov	r3, r7
 8001b06:	220c      	movs	r2, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b0c:	f00d fb1a 	bl	800f144 <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8001b16:	f001 faa1 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM2_Init+0xe8>)
 8001b1c:	f001 fe4e 	bl	80037bc <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	; 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	24000554 	.word	0x24000554

08001b2c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b4c:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <MX_TIM3_Init+0x9c>)
 8001b4e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000 - 1;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b52:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b56:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b60:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b64:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b72:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b74:	f00c fe71 	bl	800e85a <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x56>
		Error_Handler();
 8001b7e:	f001 fa6d 	bl	800305c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001b90:	f00d fbec 	bl	800f36c <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x72>
		Error_Handler();
 8001b9a:	f001 fa5f 	bl	800305c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_TIM3_Init+0x98>)
 8001bac:	f00e f934 	bl	800fe18 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001bb6:	f001 fa51 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	240005a0 	.word	0x240005a0
 8001bc8:	40000400 	.word	0x40000400

08001bcc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <MX_TIM4_Init+0x98>)
 8001bee:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100 - 1;
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bf2:	2263      	movs	r2, #99	; 0x63
 8001bf4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 50000 - 1;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001bfe:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c02:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001c10:	4813      	ldr	r0, [pc, #76]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c12:	f00c fe22 	bl	800e85a <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM4_Init+0x54>
		Error_Handler();
 8001c1c:	f001 fa1e 	bl	800305c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c2e:	f00d fb9d 	bl	800f36c <HAL_TIM_ConfigClockSource>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM4_Init+0x70>
		Error_Handler();
 8001c38:	f001 fa10 	bl	800305c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_TIM4_Init+0x94>)
 8001c4a:	f00e f8e5 	bl	800fe18 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001c54:	f001 fa02 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	240005ec 	.word	0x240005ec
 8001c64:	40000800 	.word	0x40000800

08001c68 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c6c:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <MX_USART1_UART_Init+0xcc>)
 8001c70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c74:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001c78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001cb0:	481f      	ldr	r0, [pc, #124]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cb2:	f00e f9db 	bl	801006c <HAL_UART_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001cbc:	f001 f9ce 	bl	800305c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	481b      	ldr	r0, [pc, #108]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cc4:	f011 f87b 	bl	8012dbe <HAL_UARTEx_SetTxFifoThreshold>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001cce:	f001 f9c5 	bl	800305c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cd6:	f011 f8b0 	bl	8012e3a <HAL_UARTEx_SetRxFifoThreshold>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001ce0:	f001 f9bc 	bl	800305c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001ce6:	f011 f831 	bl	8012d4c <HAL_UARTEx_DisableFifoMode>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001cf0:	f001 f9b4 	bl	800305c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001cf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001cfa:	f011 f89e 	bl	8012e3a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d00:	f010 ffe9 	bl	8012cd6 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d06:	f010 ffb3 	bl	8012c70 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d18:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <MX_USART1_UART_Init+0xc8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d28:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
	/* USER CODE END USART1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	24000638 	.word	0x24000638
 8001d34:	40011000 	.word	0x40011000

08001d38 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_DMA_Init+0x6c>)
 8001d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <MX_DMA_Init+0x6c>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_DMA_Init+0x6c>)
 8001d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2105      	movs	r1, #5
 8001d60:	200b      	movs	r0, #11
 8001d62:	f003 fe07 	bl	8005974 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d66:	200b      	movs	r0, #11
 8001d68:	f003 fe1e 	bl	80059a8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2105      	movs	r1, #5
 8001d70:	200c      	movs	r0, #12
 8001d72:	f003 fdff 	bl	8005974 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d76:	200c      	movs	r0, #12
 8001d78:	f003 fe16 	bl	80059a8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2105      	movs	r1, #5
 8001d80:	200d      	movs	r0, #13
 8001d82:	f003 fdf7 	bl	8005974 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d86:	200d      	movs	r0, #13
 8001d88:	f003 fe0e 	bl	80059a8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2105      	movs	r1, #5
 8001d90:	2010      	movs	r0, #16
 8001d92:	f003 fdef 	bl	8005974 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f003 fe06 	bl	80059a8 <HAL_NVIC_EnableIRQ>

}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58024400 	.word	0x58024400

08001da8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b34      	ldr	r3, [pc, #208]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ddc:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <MX_GPIO_Init+0xe8>)
 8001e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001e3c:	4815      	ldr	r0, [pc, #84]	; (8001e94 <MX_GPIO_Init+0xec>)
 8001e3e:	f007 f9d7 	bl	80091f0 <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6,
 8001e42:	2200      	movs	r2, #0
 8001e44:	2164      	movs	r1, #100	; 0x64
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <MX_GPIO_Init+0xf0>)
 8001e48:	f007 f9d2 	bl	80091f0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001e4c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001e50:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <MX_GPIO_Init+0xec>)
 8001e66:	f006 fffb 	bl	8008e60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_GPIO_Init+0xf0>)
 8001e82:	f006 ffed 	bl	8008e60 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58020800 	.word	0x58020800
 8001e98:	58020400 	.word	0x58020400

08001e9c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	f107 0208 	add.w	r2, r7, #8
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4817      	ldr	r0, [pc, #92]	; (8001f18 <poll_i2c_sensor+0x7c>)
 8001ebc:	f007 fa4e 	bl	800935c <HAL_I2C_Master_Transmit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ec4:	7b7b      	ldrb	r3, [r7, #13]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001eca:	4814      	ldr	r0, [pc, #80]	; (8001f1c <poll_i2c_sensor+0x80>)
 8001ecc:	f014 ff44 	bl	8016d58 <puts>
 8001ed0:	e01c      	b.n	8001f0c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	b299      	uxth	r1, r3
 8001ed6:	f107 0208 	add.w	r2, r7, #8
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	480d      	ldr	r0, [pc, #52]	; (8001f18 <poll_i2c_sensor+0x7c>)
 8001ee4:	f007 fb52 	bl	800958c <HAL_I2C_Master_Receive>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <poll_i2c_sensor+0x84>)
 8001ef4:	f014 ff30 	bl	8016d58 <puts>
 8001ef8:	e008      	b.n	8001f0c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001efa:	7a3b      	ldrb	r3, [r7, #8]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001f00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f04:	7a7a      	ldrb	r2, [r7, #9]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	10db      	asrs	r3, r3, #3
 8001f0a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001f0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	24000380 	.word	0x24000380
 8001f1c:	08017708 	.word	0x08017708
 8001f20:	08017718 	.word	0x08017718

08001f24 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001f2c:	f107 010c 	add.w	r1, r7, #12
 8001f30:	2301      	movs	r3, #1
 8001f32:	2201      	movs	r2, #1
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <receive_pmt_spi+0x44>)
 8001f36:	f00c f963 	bl	800e200 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
 8001f40:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <receive_pmt_spi+0x44>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <receive_pmt_spi+0x44>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f50:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7bba      	ldrb	r2, [r7, #14]
 8001f56:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	240003f8 	.word	0x240003f8

08001f6c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001f74:	f107 010c 	add.w	r1, r7, #12
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <receive_erpa_spi+0x44>)
 8001f7e:	f00c f93f 	bl	800e200 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
 8001f88:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <receive_erpa_spi+0x44>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <receive_erpa_spi+0x44>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f98:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7bba      	ldrb	r2, [r7, #14]
 8001f9e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	701a      	strb	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	24000480 	.word	0x24000480

08001fb4 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <receive_erpa_adc+0x20>)
 8001fbe:	885b      	ldrh	r3, [r3, #2]
 8001fc0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	89fa      	ldrh	r2, [r7, #14]
 8001fc6:	801a      	strh	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	24000cc0 	.word	0x24000cc0

08001fd8 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001fe0:	2390      	movs	r3, #144	; 0x90
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff5a 	bl	8001e9c <poll_i2c_sensor>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001fec:	2394      	movs	r3, #148	; 0x94
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff54 	bl	8001e9c <poll_i2c_sensor>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ff8:	2392      	movs	r3, #146	; 0x92
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff4e 	bl	8001e9c <poll_i2c_sensor>
 8002000:	4603      	mov	r3, r0
 8002002:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002004:	2396      	movs	r3, #150	; 0x96
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff48 	bl	8001e9c <poll_i2c_sensor>
 800200c:	4603      	mov	r3, r0
 800200e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	89fa      	ldrh	r2, [r7, #14]
 8002014:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3302      	adds	r3, #2
 800201a:	89ba      	ldrh	r2, [r7, #12]
 800201c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	897a      	ldrh	r2, [r7, #10]
 8002024:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3306      	adds	r3, #6
 800202a:	893a      	ldrh	r2, [r7, #8]
 800202c:	801a      	strh	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002042:	8a9b      	ldrh	r3, [r3, #20]
 8002044:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002048:	8a1b      	ldrh	r3, [r3, #16]
 800204a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <receive_hk_adc1+0xa0>)
 800204e:	899b      	ldrh	r3, [r3, #12]
 8002050:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002054:	8a5b      	ldrh	r3, [r3, #18]
 8002056:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <receive_hk_adc1+0xa0>)
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002060:	88db      	ldrh	r3, [r3, #6]
 8002062:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002066:	89db      	ldrh	r3, [r3, #14]
 8002068:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <receive_hk_adc1+0xa0>)
 800206c:	891b      	ldrh	r3, [r3, #8]
 800206e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <receive_hk_adc1+0xa0>)
 8002078:	895b      	ldrh	r3, [r3, #10]
 800207a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8bfa      	ldrh	r2, [r7, #30]
 8002080:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3302      	adds	r3, #2
 8002086:	8bba      	ldrh	r2, [r7, #28]
 8002088:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	8b7a      	ldrh	r2, [r7, #26]
 8002090:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3306      	adds	r3, #6
 8002096:	8b3a      	ldrh	r2, [r7, #24]
 8002098:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3308      	adds	r3, #8
 800209e:	8afa      	ldrh	r2, [r7, #22]
 80020a0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	330a      	adds	r3, #10
 80020a6:	8aba      	ldrh	r2, [r7, #20]
 80020a8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	330c      	adds	r3, #12
 80020ae:	8a7a      	ldrh	r2, [r7, #18]
 80020b0:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	330e      	adds	r3, #14
 80020b6:	8a3a      	ldrh	r2, [r7, #16]
 80020b8:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3310      	adds	r3, #16
 80020be:	89fa      	ldrh	r2, [r7, #14]
 80020c0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3312      	adds	r3, #18
 80020c6:	89ba      	ldrh	r2, [r7, #12]
 80020c8:	801a      	strh	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	24000cc0 	.word	0x24000cc0

080020dc <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <receive_hk_adc3+0x4c>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <receive_hk_adc3+0x4c>)
 80020ec:	885b      	ldrh	r3, [r3, #2]
 80020ee:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <receive_hk_adc3+0x4c>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <receive_hk_adc3+0x4c>)
 80020f8:	88db      	ldrh	r3, [r3, #6]
 80020fa:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3302      	adds	r3, #2
 8002106:	89ba      	ldrh	r2, [r7, #12]
 8002108:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	897a      	ldrh	r2, [r7, #10]
 8002110:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3306      	adds	r3, #6
 8002116:	893a      	ldrh	r2, [r7, #8]
 8002118:	801a      	strh	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	24000ce0 	.word	0x24000ce0

0800212c <enter_flight_mode>:
 *
 * This function resumes the GPIO task, enables voltage rails, starts the DAC
 * in DMA mode, and starts various timers for packet transmission. It also sets
 * the relevant status flags.
 */
void enter_flight_mode() {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af02      	add	r7, sp, #8
	xTaskResumeFromISR(GPIO_on_taskHandle);										// Auto Init
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <enter_flight_mode+0x90>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f012 fe6e 	bl	8014e18 <xTaskResumeFromISR>
	HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);				// Enable n200v
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <enter_flight_mode+0x94>)
 800213e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002142:	2201      	movs	r2, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f007 f853 	bl	80091f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);				// Enable n800v
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <enter_flight_mode+0x98>)
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	2201      	movs	r2, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f007 f84d 	bl	80091f0 <HAL_GPIO_WritePin>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);		// Enable auto sweep (doesn't start until ERPA timer is started)
 8002156:	2300      	movs	r3, #0
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2320      	movs	r3, #32
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <enter_flight_mode+0x9c>)
 800215e:	2100      	movs	r1, #0
 8002160:	481a      	ldr	r0, [pc, #104]	; (80021cc <enter_flight_mode+0xa0>)
 8002162:	f003 fca9 	bl	8005ab8 <HAL_DAC_Start_DMA>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);									// ERPA packet on
 8002166:	210c      	movs	r1, #12
 8002168:	4819      	ldr	r0, [pc, #100]	; (80021d0 <enter_flight_mode+0xa4>)
 800216a:	f00c fc45 	bl	800e9f8 <HAL_TIM_OC_Start_IT>
	ERPA_ON = 1;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <enter_flight_mode+0xa8>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <enter_flight_mode+0xac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f011 f8a6 	bl	80132cc <osEventFlagsSet>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);									// PMT packet on
 8002180:	2100      	movs	r1, #0
 8002182:	4816      	ldr	r0, [pc, #88]	; (80021dc <enter_flight_mode+0xb0>)
 8002184:	f00c fc38 	bl	800e9f8 <HAL_TIM_OC_Start_IT>
	PMT_ON = 1;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <enter_flight_mode+0xb4>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, PMT_FLAG_ID);
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <enter_flight_mode+0xac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2101      	movs	r1, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f011 f899 	bl	80132cc <osEventFlagsSet>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);									// HK packet on
 800219a:	2100      	movs	r1, #0
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <enter_flight_mode+0xb8>)
 800219e:	f00c fc2b 	bl	800e9f8 <HAL_TIM_OC_Start_IT>
	HK_ON = 1;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <enter_flight_mode+0xbc>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
	osEventFlagsSet(event_flags, HK_FLAG_ID);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <enter_flight_mode+0xac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2104      	movs	r1, #4
 80021ae:	4618      	mov	r0, r3
 80021b0:	f011 f88c 	bl	80132cc <osEventFlagsSet>

}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	24000750 	.word	0x24000750
 80021c0:	58020800 	.word	0x58020800
 80021c4:	58020400 	.word	0x58020400
 80021c8:	24000010 	.word	0x24000010
 80021cc:	240002f4 	.word	0x240002f4
 80021d0:	24000554 	.word	0x24000554
 80021d4:	24000c5f 	.word	0x24000c5f
 80021d8:	24000c64 	.word	0x24000c64
 80021dc:	24000508 	.word	0x24000508
 80021e0:	24000c5e 	.word	0x24000c5e
 80021e4:	240005a0 	.word	0x240005a0
 80021e8:	24000c60 	.word	0x24000c60

080021ec <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <get_current_step+0xc0>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04a      	beq.n	8002298 <get_current_step+0xac>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002208:	da48      	bge.n	800229c <get_current_step+0xb0>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002210:	4293      	cmp	r3, r2
 8002212:	d03f      	beq.n	8002294 <get_current_step+0xa8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f640 628b 	movw	r2, #3723	; 0xe8b
 800221a:	4293      	cmp	r3, r2
 800221c:	dc3e      	bgt.n	800229c <get_current_step+0xb0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002224:	4293      	cmp	r3, r2
 8002226:	d033      	beq.n	8002290 <get_current_step+0xa4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800222e:	da35      	bge.n	800229c <get_current_step+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002236:	4293      	cmp	r3, r2
 8002238:	d028      	beq.n	800228c <get_current_step+0xa0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002240:	4293      	cmp	r3, r2
 8002242:	dc2b      	bgt.n	800229c <get_current_step+0xb0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f240 7245 	movw	r2, #1861	; 0x745
 800224a:	4293      	cmp	r3, r2
 800224c:	d01c      	beq.n	8002288 <get_current_step+0x9c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f240 7245 	movw	r2, #1861	; 0x745
 8002254:	4293      	cmp	r3, r2
 8002256:	dc21      	bgt.n	800229c <get_current_step+0xb0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800225e:	4293      	cmp	r3, r2
 8002260:	d010      	beq.n	8002284 <get_current_step+0x98>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002268:	4293      	cmp	r3, r2
 800226a:	dc17      	bgt.n	800229c <get_current_step+0xb0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <get_current_step+0x90>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002278:	d002      	beq.n	8002280 <get_current_step+0x94>
 800227a:	e00f      	b.n	800229c <get_current_step+0xb0>
	case 0:
		return 0;
 800227c:	2300      	movs	r3, #0
 800227e:	e00e      	b.n	800229e <get_current_step+0xb2>
	case 620:
		return 1;
 8002280:	2301      	movs	r3, #1
 8002282:	e00c      	b.n	800229e <get_current_step+0xb2>
	case 1241:
		return 2;
 8002284:	2302      	movs	r3, #2
 8002286:	e00a      	b.n	800229e <get_current_step+0xb2>
	case 1861:
		return 3;
 8002288:	2303      	movs	r3, #3
 800228a:	e008      	b.n	800229e <get_current_step+0xb2>
	case 2482:
		return 4;
 800228c:	2304      	movs	r3, #4
 800228e:	e006      	b.n	800229e <get_current_step+0xb2>
	case 3103:
		return 5;
 8002290:	2305      	movs	r3, #5
 8002292:	e004      	b.n	800229e <get_current_step+0xb2>
	case 3723:
		return 6;
 8002294:	2306      	movs	r3, #6
 8002296:	e002      	b.n	800229e <get_current_step+0xb2>
	case 4095:
		return 7;
 8002298:	2307      	movs	r3, #7
 800229a:	e000      	b.n	800229e <get_current_step+0xb2>
	default:
		return -1;
 800229c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007400 	.word	0x40007400

080022b0 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 80022b4:	f000 f898 	bl	80023e8 <send_ACK>

	vTaskSuspendAll();
 80022b8:	f012 fe86 	bl	8014fc8 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80022bc:	2101      	movs	r1, #1
 80022be:	2001      	movs	r0, #1
 80022c0:	f007 fdbc 	bl	8009e3c <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	xTaskResumeAll();
 80022c4:	f012 fe8e 	bl	8014fe4 <xTaskResumeAll>
	SystemClock_Config();
 80022c8:	f7fe ff28 	bl	800111c <SystemClock_Config>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	789b      	ldrb	r3, [r3, #2]
 80022e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	78db      	ldrb	r3, [r3, #3]
 80022ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	795b      	ldrb	r3, [r3, #5]
 80022fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	799b      	ldrb	r3, [r3, #6]
 8002304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3307      	adds	r3, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	b21a      	sxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3308      	adds	r3, #8
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b21b      	sxth	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b21b      	sxth	r3, r3
 800231e:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8002320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8002328:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800232c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8002330:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8002338:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800233c:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 800233e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002342:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8002344:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002348:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800234a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800234c:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	2200      	movs	r2, #0
 8002354:	4619      	mov	r1, r3
 8002356:	4810      	ldr	r0, [pc, #64]	; (8002398 <calibrateRTC+0xc8>)
 8002358:	f00b fc88 	bl	800dc6c <HAL_RTC_SetDate>
 800235c:	4603      	mov	r3, r0
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8002362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <calibrateRTC+0x9e>
		Error_Handler();
 800236a:	f000 fe77 	bl	800305c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4808      	ldr	r0, [pc, #32]	; (8002398 <calibrateRTC+0xc8>)
 8002378:	f00b fb7e 	bl	800da78 <HAL_RTC_SetTime>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8002382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <calibrateRTC+0xbe>
		Error_Handler();
 800238a:	f000 fe67 	bl	800305c <Error_Handler>
	}
}
 800238e:	bf00      	nop
 8002390:	3730      	adds	r7, #48	; 0x30
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	240003d4 	.word	0x240003d4

0800239c <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	send_ACK();
 80023a2:	f000 f821 	bl	80023e8 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <sync+0x44>)
 80023a8:	f00e f8d2 	bl	8010550 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80023ac:	2364      	movs	r3, #100	; 0x64
 80023ae:	2209      	movs	r2, #9
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <sync+0x48>)
 80023b2:	480b      	ldr	r0, [pc, #44]	; (80023e0 <sync+0x44>)
 80023b4:	f00d ff38 	bl	8010228 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <sync+0x48>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2bff      	cmp	r3, #255	; 0xff
 80023c2:	d1f3      	bne.n	80023ac <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <sync+0x48>)
 80023c6:	f7ff ff83 	bl	80022d0 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80023ca:	2201      	movs	r2, #1
 80023cc:	4905      	ldr	r1, [pc, #20]	; (80023e4 <sync+0x48>)
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <sync+0x44>)
 80023d0:	f00d fff2 	bl	80103b8 <HAL_UART_Receive_IT>

	send_ACK();
 80023d4:	f000 f808 	bl	80023e8 <send_ACK>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	24000638 	.word	0x24000638
 80023e4:	24000c68 	.word	0x24000c68

080023e8 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <send_ACK+0x1c>)
 80023ee:	22ff      	movs	r2, #255	; 0xff
 80023f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80023f2:	2364      	movs	r3, #100	; 0x64
 80023f4:	2201      	movs	r2, #1
 80023f6:	4903      	ldr	r1, [pc, #12]	; (8002404 <send_ACK+0x1c>)
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <send_ACK+0x20>)
 80023fa:	f00d fe87 	bl	801010c <HAL_UART_Transmit>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	24000ce8 	.word	0x24000ce8
 8002408:	24000638 	.word	0x24000638

0800240c <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_UART_TxCpltCallback+0x1c>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	24000000 	.word	0x24000000

0800242c <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	4618      	mov	r0, r3
 800243e:	f014 fb17 	bl	8016a70 <malloc>
 8002442:	4603      	mov	r3, r0
 8002444:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f014 fb1f 	bl	8016a90 <memcpy>
	packet.size = size;
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	461a      	mov	r2, r3
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002462:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002474:	2100      	movs	r1, #0
 8002476:	481d      	ldr	r0, [pc, #116]	; (80024ec <system_setup+0x7c>)
 8002478:	f00c fabe 	bl	800e9f8 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 800247c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002480:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002486:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800248a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800248e:	4818      	ldr	r0, [pc, #96]	; (80024f0 <system_setup+0x80>)
 8002490:	f003 f876 	bl	8005580 <HAL_ADCEx_Calibration_Start>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800249a:	f000 fddf 	bl	800305c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800249e:	220b      	movs	r2, #11
 80024a0:	4914      	ldr	r1, [pc, #80]	; (80024f4 <system_setup+0x84>)
 80024a2:	4813      	ldr	r0, [pc, #76]	; (80024f0 <system_setup+0x80>)
 80024a4:	f002 f94a 	bl	800473c <HAL_ADC_Start_DMA>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80024ae:	f000 fdd5 	bl	800305c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80024b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ba:	480f      	ldr	r0, [pc, #60]	; (80024f8 <system_setup+0x88>)
 80024bc:	f003 f860 	bl	8005580 <HAL_ADCEx_Calibration_Start>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80024c6:	f000 fdc9 	bl	800305c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80024ca:	2204      	movs	r2, #4
 80024cc:	490b      	ldr	r1, [pc, #44]	; (80024fc <system_setup+0x8c>)
 80024ce:	480a      	ldr	r0, [pc, #40]	; (80024f8 <system_setup+0x88>)
 80024d0:	f002 f934 	bl	800473c <HAL_ADC_Start_DMA>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80024da:	f000 fdbf 	bl	800305c <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80024de:	2201      	movs	r2, #1
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <system_setup+0x90>)
 80024e2:	4808      	ldr	r0, [pc, #32]	; (8002504 <system_setup+0x94>)
 80024e4:	f00d ff68 	bl	80103b8 <HAL_UART_Receive_IT>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	240005ec 	.word	0x240005ec
 80024f0:	2400013c 	.word	0x2400013c
 80024f4:	24000cc0 	.word	0x24000cc0
 80024f8:	240001a0 	.word	0x240001a0
 80024fc:	24000ce0 	.word	0x24000ce0
 8002500:	24000c68 	.word	0x24000c68
 8002504:	24000638 	.word	0x24000638

08002508 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8002514:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <get_uptime+0x88>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <get_uptime+0x8c>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <get_uptime+0x88>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	429a      	cmp	r2, r3
 8002528:	d005      	beq.n	8002536 <get_uptime+0x2e>
		ms = uptime_millis;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <get_uptime+0x88>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <get_uptime+0x8c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800253c:	fb03 f202 	mul.w	r2, r3, r2
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <get_uptime+0x8c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	3301      	adds	r3, #1
 8002546:	4914      	ldr	r1, [pc, #80]	; (8002598 <get_uptime+0x90>)
 8002548:	fba1 1303 	umull	r1, r3, r1, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	6939      	ldr	r1, [r7, #16]
 8002550:	fbb1 f3f3 	udiv	r3, r1, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	0e1b      	lsrs	r3, r3, #24
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	0c1a      	lsrs	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0a1a      	lsrs	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3302      	adds	r3, #2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3303      	adds	r3, #3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	24000c44 	.word	0x24000c44
 8002594:	e000e010 	.word	0xe000e010
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	2200      	movs	r2, #0
 80025aa:	4619      	mov	r1, r3
 80025ac:	4821      	ldr	r0, [pc, #132]	; (8002634 <getTimestamp+0x98>)
 80025ae:	f00b fb01 	bl	800dbb4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2200      	movs	r2, #0
 80025b8:	4619      	mov	r1, r3
 80025ba:	481e      	ldr	r0, [pc, #120]	; (8002634 <getTimestamp+0x98>)
 80025bc:	f00b fbde 	bl	800dd7c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2264      	movs	r2, #100	; 0x64
 80025c4:	fb03 f202 	mul.w	r2, r3, r2
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <getTimestamp+0x9c>)
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	7b7a      	ldrb	r2, [r7, #13]
 80025da:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3302      	adds	r3, #2
 80025e0:	7bba      	ldrb	r2, [r7, #14]
 80025e2:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3303      	adds	r3, #3
 80025e8:	7c3a      	ldrb	r2, [r7, #16]
 80025ea:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	7c7a      	ldrb	r2, [r7, #17]
 80025f2:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3305      	adds	r3, #5
 80025f8:	7cba      	ldrb	r2, [r7, #18]
 80025fa:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	0e1a      	lsrs	r2, r3, #24
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3306      	adds	r3, #6
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	0c1a      	lsrs	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3307      	adds	r3, #7
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	0a1a      	lsrs	r2, r3, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3308      	adds	r3, #8
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3309      	adds	r3, #9
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	; 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	240003d4 	.word	0x240003d4
 8002638:	000f4240 	.word	0x000f4240

0800263c <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002642:	bf00      	nop
 8002644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002648:	4833      	ldr	r0, [pc, #204]	; (8002718 <sample_pmt+0xdc>)
 800264a:	f006 fdb9 	bl	80091c0 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f7      	bne.n	8002644 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 8002654:	200a      	movs	r0, #10
 8002656:	f014 fa0b 	bl	8016a70 <malloc>
 800265a:	4603      	mov	r3, r0
 800265c:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800265e:	2002      	movs	r0, #2
 8002660:	f014 fa06 	bl	8016a70 <malloc>
 8002664:	4603      	mov	r3, r0
 8002666:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002668:	2004      	movs	r0, #4
 800266a:	f014 fa01 	bl	8016a70 <malloc>
 800266e:	4603      	mov	r3, r0
 8002670:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff48 	bl	8002508 <get_uptime>

	receive_pmt_spi(pmt_spi);
 8002678:	6938      	ldr	r0, [r7, #16]
 800267a:	f7ff fc53 	bl	8001f24 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	22bb      	movs	r2, #187	; 0xbb
 8002682:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	22bb      	movs	r2, #187	; 0xbb
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <sample_pmt+0xe0>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	b29a      	uxth	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3302      	adds	r3, #2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <sample_pmt+0xe0>)
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3303      	adds	r3, #3
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3304      	adds	r3, #4
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	7812      	ldrb	r2, [r2, #0]
 80026b0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3305      	adds	r3, #5
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	7852      	ldrb	r2, [r2, #1]
 80026ba:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3306      	adds	r3, #6
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3307      	adds	r3, #7
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	7852      	ldrb	r2, [r2, #1]
 80026ce:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3308      	adds	r3, #8
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	7892      	ldrb	r2, [r2, #2]
 80026d8:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3309      	adds	r3, #9
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	78d2      	ldrb	r2, [r2, #3]
 80026e2:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	220a      	movs	r2, #10
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fe9e 	bl	800242c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <sample_pmt+0xe4>)
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	1d39      	adds	r1, r7, #4
 80026f6:	2300      	movs	r3, #0
 80026f8:	2200      	movs	r2, #0
 80026fa:	f010 ff57 	bl	80135ac <osMessageQueuePut>
	free(buffer);
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f014 f9be 	bl	8016a80 <free>
	free(pmt_spi);
 8002704:	6938      	ldr	r0, [r7, #16]
 8002706:	f014 f9bb 	bl	8016a80 <free>
	free(uptime);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f014 f9b8 	bl	8016a80 <free>
}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58020000 	.word	0x58020000
 800271c:	24000c54 	.word	0x24000c54
 8002720:	24000c48 	.word	0x24000c48

08002724 <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 800272a:	bf00      	nop
 800272c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002730:	4848      	ldr	r0, [pc, #288]	; (8002854 <sample_erpa+0x130>)
 8002732:	f006 fd45 	bl	80091c0 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f7      	bne.n	800272c <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800273c:	200e      	movs	r0, #14
 800273e:	f014 f997 	bl	8016a70 <malloc>
 8002742:	4603      	mov	r3, r0
 8002744:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002746:	2002      	movs	r0, #2
 8002748:	f014 f992 	bl	8016a70 <malloc>
 800274c:	4603      	mov	r3, r0
 800274e:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002750:	2002      	movs	r0, #2
 8002752:	f014 f98d 	bl	8016a70 <malloc>
 8002756:	4603      	mov	r3, r0
 8002758:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800275a:	2004      	movs	r0, #4
 800275c:	f014 f988 	bl	8016a70 <malloc>
 8002760:	4603      	mov	r3, r0
 8002762:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002764:	23ff      	movs	r3, #255	; 0xff
 8002766:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002768:	6938      	ldr	r0, [r7, #16]
 800276a:	f7ff fecd 	bl	8002508 <get_uptime>
	sweep_step = get_current_step();
 800276e:	f7ff fd3d 	bl	80021ec <get_current_step>
 8002772:	4603      	mov	r3, r0
 8002774:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 8002776:	69b8      	ldr	r0, [r7, #24]
 8002778:	f7ff fbf8 	bl	8001f6c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800277c:	6978      	ldr	r0, [r7, #20]
 800277e:	f7ff fc19 	bl	8001fb4 <receive_erpa_adc>


	buffer[0] = ERPA_SYNC;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	22aa      	movs	r2, #170	; 0xaa
 8002786:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	3301      	adds	r3, #1
 800278c:	22aa      	movs	r2, #170	; 0xaa
 800278e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002790:	4b31      	ldr	r3, [pc, #196]	; (8002858 <sample_erpa+0x134>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0c1a      	lsrs	r2, r3, #16
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3302      	adds	r3, #2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <sample_erpa+0x134>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0a1a      	lsrs	r2, r3, #8
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3303      	adds	r3, #3
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <sample_erpa+0x134>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3304      	adds	r3, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	3305      	adds	r3, #5
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3306      	adds	r3, #6
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	881a      	ldrh	r2, [r3, #0]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3307      	adds	r3, #7
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3308      	adds	r3, #8
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3309      	adds	r3, #9
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	7852      	ldrb	r2, [r2, #1]
 80027ee:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	330a      	adds	r3, #10
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	330b      	adds	r3, #11
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	7852      	ldrb	r2, [r2, #1]
 8002802:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	330c      	adds	r3, #12
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	7892      	ldrb	r2, [r2, #2]
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	330d      	adds	r3, #13
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	78d2      	ldrb	r2, [r2, #3]
 8002816:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	220e      	movs	r2, #14
 800281c:	69f9      	ldr	r1, [r7, #28]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fe04 	bl	800242c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <sample_erpa+0x138>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	1d39      	adds	r1, r7, #4
 800282a:	2300      	movs	r3, #0
 800282c:	2200      	movs	r2, #0
 800282e:	f010 febd 	bl	80135ac <osMessageQueuePut>
	free(buffer);
 8002832:	69f8      	ldr	r0, [r7, #28]
 8002834:	f014 f924 	bl	8016a80 <free>
	free(erpa_spi);
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	f014 f921 	bl	8016a80 <free>
	free(erpa_adc);
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f014 f91e 	bl	8016a80 <free>
	free(uptime);
 8002844:	6938      	ldr	r0, [r7, #16]
 8002846:	f014 f91b 	bl	8016a80 <free>
}
 800284a:	bf00      	nop
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	58020400 	.word	0x58020400
 8002858:	24000c58 	.word	0x24000c58
 800285c:	24000c48 	.word	0x24000c48

08002860 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002866:	2032      	movs	r0, #50	; 0x32
 8002868:	f014 f902 	bl	8016a70 <malloc>
 800286c:	4603      	mov	r3, r0
 800286e:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002870:	2008      	movs	r0, #8
 8002872:	f014 f8fd 	bl	8016a70 <malloc>
 8002876:	4603      	mov	r3, r0
 8002878:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800287a:	200a      	movs	r0, #10
 800287c:	f014 f8f8 	bl	8016a70 <malloc>
 8002880:	4603      	mov	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fe89 	bl	800259c <getTimestamp>


	if (TEMPERATURE_COUNTER > 999) {
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <sample_hk+0x78>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002892:	db25      	blt.n	80028e0 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002894:	6938      	ldr	r0, [r7, #16]
 8002896:	f7ff fb9f 	bl	8001fd8 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <sample_hk+0x7c>)
 80028a4:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3302      	adds	r3, #2
 80028aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <sample_hk+0x7c>)
 80028b2:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	3304      	adds	r3, #4
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <sample_hk+0x7c>)
 80028c0:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	3306      	adds	r3, #6
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <sample_hk+0x7c>)
 80028ce:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80028d0:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <sample_hk+0x78>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e01f      	b.n	8002918 <sample_hk+0xb8>
 80028d8:	24000004 	.word	0x24000004
 80028dc:	24000cec 	.word	0x24000cec
	} else {
		TEMPERATURE_COUNTER++;
 80028e0:	4b9f      	ldr	r3, [pc, #636]	; (8002b60 <sample_hk+0x300>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a9e      	ldr	r2, [pc, #632]	; (8002b60 <sample_hk+0x300>)
 80028e8:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80028ea:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <sample_hk+0x304>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80028f4:	4b9b      	ldr	r3, [pc, #620]	; (8002b64 <sample_hk+0x304>)
 80028f6:	885a      	ldrh	r2, [r3, #2]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	3302      	adds	r3, #2
 80028fc:	b212      	sxth	r2, r2
 80028fe:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002900:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <sample_hk+0x304>)
 8002902:	889a      	ldrh	r2, [r3, #4]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	3304      	adds	r3, #4
 8002908:	b212      	sxth	r2, r2
 800290a:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 800290c:	4b95      	ldr	r3, [pc, #596]	; (8002b64 <sample_hk+0x304>)
 800290e:	88da      	ldrh	r2, [r3, #6]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	3306      	adds	r3, #6
 8002914:	b212      	sxth	r2, r2
 8002916:	801a      	strh	r2, [r3, #0]
	}

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	22cc      	movs	r2, #204	; 0xcc
 800291c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3301      	adds	r3, #1
 8002922:	22cc      	movs	r2, #204	; 0xcc
 8002924:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002926:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <sample_hk+0x308>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29a      	uxth	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3302      	adds	r3, #2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002936:	4b8c      	ldr	r3, [pc, #560]	; (8002b68 <sample_hk+0x308>)
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3303      	adds	r3, #3
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002942:	4b8a      	ldr	r3, [pc, #552]	; (8002b6c <sample_hk+0x30c>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3304      	adds	r3, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002952:	4b86      	ldr	r3, [pc, #536]	; (8002b6c <sample_hk+0x30c>)
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3305      	adds	r3, #5
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800295e:	4b84      	ldr	r3, [pc, #528]	; (8002b70 <sample_hk+0x310>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3306      	adds	r3, #6
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800296e:	4b80      	ldr	r3, [pc, #512]	; (8002b70 <sample_hk+0x310>)
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3307      	adds	r3, #7
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	121a      	asrs	r2, r3, #8
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3308      	adds	r3, #8
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3309      	adds	r3, #9
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3302      	adds	r3, #2
 800299c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a0:	121a      	asrs	r2, r3, #8
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	330a      	adds	r3, #10
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	3302      	adds	r3, #2
 80029ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	330b      	adds	r3, #11
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3304      	adds	r3, #4
 80029be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c2:	121a      	asrs	r2, r3, #8
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	330c      	adds	r3, #12
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	3304      	adds	r3, #4
 80029d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	330d      	adds	r3, #13
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	3306      	adds	r3, #6
 80029e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e4:	121a      	asrs	r2, r3, #8
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	330e      	adds	r3, #14
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	3306      	adds	r3, #6
 80029f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	330f      	adds	r3, #15
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <sample_hk+0x314>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3310      	adds	r3, #16
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002a0e:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <sample_hk+0x314>)
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3311      	adds	r3, #17
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002a1a:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <sample_hk+0x318>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3312      	adds	r3, #18
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002a2a:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <sample_hk+0x318>)
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3313      	adds	r3, #19
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002a36:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <sample_hk+0x31c>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3314      	adds	r3, #20
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002a46:	4b4d      	ldr	r3, [pc, #308]	; (8002b7c <sample_hk+0x31c>)
 8002a48:	881a      	ldrh	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3315      	adds	r3, #21
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <sample_hk+0x320>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3316      	adds	r3, #22
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <sample_hk+0x320>)
 8002a64:	881a      	ldrh	r2, [r3, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3317      	adds	r3, #23
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002a6e:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <sample_hk+0x324>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3318      	adds	r3, #24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <sample_hk+0x324>)
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3319      	adds	r3, #25
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <sample_hk+0x328>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	331a      	adds	r3, #26
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <sample_hk+0x328>)
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	331b      	adds	r3, #27
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <sample_hk+0x32c>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	331c      	adds	r3, #28
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002ab6:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <sample_hk+0x32c>)
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	331d      	adds	r3, #29
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <sample_hk+0x330>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	331e      	adds	r3, #30
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <sample_hk+0x330>)
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	331f      	adds	r3, #31
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <sample_hk+0x334>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3320      	adds	r3, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <sample_hk+0x334>)
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3321      	adds	r3, #33	; 0x21
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <sample_hk+0x338>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3322      	adds	r3, #34	; 0x22
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <sample_hk+0x338>)
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3323      	adds	r3, #35	; 0x23
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <sample_hk+0x33c>)
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <sample_hk+0x33c>)
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3325      	adds	r3, #37	; 0x25
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <sample_hk+0x340>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3326      	adds	r3, #38	; 0x26
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <sample_hk+0x340>)
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3327      	adds	r3, #39	; 0x27
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

	buffer[40] = timestamp[0];
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	3328      	adds	r3, #40	; 0x28
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3329      	adds	r3, #41	; 0x29
 8002b5c:	e022      	b.n	8002ba4 <sample_hk+0x344>
 8002b5e:	bf00      	nop
 8002b60:	24000004 	.word	0x24000004
 8002b64:	24000cec 	.word	0x24000cec
 8002b68:	24000c5c 	.word	0x24000c5c
 8002b6c:	24000c26 	.word	0x24000c26
 8002b70:	24000c28 	.word	0x24000c28
 8002b74:	24000c2a 	.word	0x24000c2a
 8002b78:	24000c2c 	.word	0x24000c2c
 8002b7c:	24000c2e 	.word	0x24000c2e
 8002b80:	24000c30 	.word	0x24000c30
 8002b84:	24000c32 	.word	0x24000c32
 8002b88:	24000c34 	.word	0x24000c34
 8002b8c:	24000c36 	.word	0x24000c36
 8002b90:	24000c38 	.word	0x24000c38
 8002b94:	24000c3a 	.word	0x24000c3a
 8002b98:	24000c3c 	.word	0x24000c3c
 8002b9c:	24000c3e 	.word	0x24000c3e
 8002ba0:	24000c40 	.word	0x24000c40
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	7852      	ldrb	r2, [r2, #1]
 8002ba8:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	332a      	adds	r3, #42	; 0x2a
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	7892      	ldrb	r2, [r2, #2]
 8002bb2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	332b      	adds	r3, #43	; 0x2b
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	78d2      	ldrb	r2, [r2, #3]
 8002bbc:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	332c      	adds	r3, #44	; 0x2c
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	7912      	ldrb	r2, [r2, #4]
 8002bc6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	332d      	adds	r3, #45	; 0x2d
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	7952      	ldrb	r2, [r2, #5]
 8002bd0:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	332e      	adds	r3, #46	; 0x2e
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	7992      	ldrb	r2, [r2, #6]
 8002bda:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	332f      	adds	r3, #47	; 0x2f
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	79d2      	ldrb	r2, [r2, #7]
 8002be4:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3330      	adds	r3, #48	; 0x30
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	7a12      	ldrb	r2, [r2, #8]
 8002bee:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3331      	adds	r3, #49	; 0x31
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	7a52      	ldrb	r2, [r2, #9]
 8002bf8:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2232      	movs	r2, #50	; 0x32
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fc13 	bl	800242c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <sample_hk+0x3d0>)
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	1d39      	adds	r1, r7, #4
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f010 fccc 	bl	80135ac <osMessageQueuePut>

	free(buffer);
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f013 ff33 	bl	8016a80 <free>
	free(hk_i2c);
 8002c1a:	6938      	ldr	r0, [r7, #16]
 8002c1c:	f013 ff30 	bl	8016a80 <free>
	free(timestamp);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f013 ff2d 	bl	8016a80 <free>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	24000c48 	.word	0x24000c48

08002c34 <PMT_init>:
 * @brief  Function implementing the PMT_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <PMT_init+0x38>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c44:	2200      	movs	r2, #0
 8002c46:	2101      	movs	r1, #1
 8002c48:	f010 fbd7 	bl	80133fa <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <PMT_init+0x3c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <PMT_init+0x30>
			sample_pmt();
 8002c54:	f7ff fcf2 	bl	800263c <sample_pmt>
			pmt_seq++;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <PMT_init+0x40>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <PMT_init+0x40>)
 8002c62:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002c64:	f010 fa96 	bl	8013194 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002c68:	e7e8      	b.n	8002c3c <PMT_init+0x8>
 8002c6a:	bf00      	nop
 8002c6c:	24000c64 	.word	0x24000c64
 8002c70:	24000c5e 	.word	0x24000c5e
 8002c74:	24000c54 	.word	0x24000c54

08002c78 <ERPA_init>:
 * @brief Function implementing the ERPA_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <ERPA_init+0x34>)
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	f010 fbb5 	bl	80133fa <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <ERPA_init+0x38>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <ERPA_init+0x2e>
			sample_erpa();
 8002c98:	f7ff fd44 	bl	8002724 <sample_erpa>
			erpa_seq++;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <ERPA_init+0x3c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <ERPA_init+0x3c>)
 8002ca4:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002ca6:	f010 fa75 	bl	8013194 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002caa:	e7e9      	b.n	8002c80 <ERPA_init+0x8>
 8002cac:	24000c64 	.word	0x24000c64
 8002cb0:	24000c5f 	.word	0x24000c5f
 8002cb4:	24000c58 	.word	0x24000c58

08002cb8 <HK_init>:
 * @brief Function implementing the HK_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HK_init+0x38>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2104      	movs	r1, #4
 8002ccc:	f010 fb95 	bl	80133fa <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HK_init+0x3c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HK_init+0x30>
			sample_hk();
 8002cd8:	f7ff fdc2 	bl	8002860 <sample_hk>
			hk_seq++;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HK_init+0x40>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <HK_init+0x40>)
 8002ce6:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002ce8:	f010 fa54 	bl	8013194 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002cec:	e7e8      	b.n	8002cc0 <HK_init+0x8>
 8002cee:	bf00      	nop
 8002cf0:	24000c64 	.word	0x24000c64
 8002cf4:	24000c60 	.word	0x24000c60
 8002cf8:	24000c5c 	.word	0x24000c5c

08002cfc <GPIO_on_init>:
 * @brief Function implementing the GPIO_on_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <GPIO_on_init+0x9c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f010 fa63 	bl	80131d4 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <GPIO_on_init+0xa0>)
 8002d10:	2104      	movs	r1, #4
 8002d12:	2201      	movs	r2, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f006 fa6b 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d1a:	2064      	movs	r0, #100	; 0x64
 8002d1c:	f010 fa7b 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <GPIO_on_init+0xa0>)
 8002d22:	2120      	movs	r1, #32
 8002d24:	2201      	movs	r2, #1
 8002d26:	4618      	mov	r0, r3
 8002d28:	f006 fa62 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d2c:	2064      	movs	r0, #100	; 0x64
 8002d2e:	f010 fa72 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <GPIO_on_init+0xa4>)
 8002d34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f006 fa58 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d40:	2064      	movs	r0, #100	; 0x64
 8002d42:	f010 fa68 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <GPIO_on_init+0xa4>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f006 fa4f 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d52:	2064      	movs	r0, #100	; 0x64
 8002d54:	f010 fa5f 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <GPIO_on_init+0xa4>)
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f006 fa46 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d64:	2064      	movs	r0, #100	; 0x64
 8002d66:	f010 fa56 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <GPIO_on_init+0xa4>)
 8002d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d70:	2201      	movs	r2, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f006 fa3c 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002d78:	2064      	movs	r0, #100	; 0x64
 8002d7a:	f010 fa4c 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <GPIO_on_init+0xa4>)
 8002d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d84:	2201      	movs	r2, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f006 fa32 	bl	80091f0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <GPIO_on_init+0x9c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f010 fa1f 	bl	80131d4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002d96:	e7ba      	b.n	8002d0e <GPIO_on_init+0x12>
 8002d98:	24000750 	.word	0x24000750
 8002d9c:	58020400 	.word	0x58020400
 8002da0:	58020800 	.word	0x58020800

08002da4 <GPIO_off_init>:
 * @brief Function implementing the GPIO_off_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <GPIO_off_init+0x9c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f010 fa0f 	bl	80131d4 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <GPIO_off_init+0xa0>)
 8002db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 fa16 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dc4:	2064      	movs	r0, #100	; 0x64
 8002dc6:	f010 fa26 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <GPIO_off_init+0xa0>)
 8002dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f006 fa0c 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dd8:	2064      	movs	r0, #100	; 0x64
 8002dda:	f010 fa1c 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <GPIO_off_init+0xa0>)
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	2200      	movs	r2, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f006 fa03 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dea:	2064      	movs	r0, #100	; 0x64
 8002dec:	f010 fa13 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <GPIO_off_init+0xa0>)
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	2200      	movs	r2, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 f9fa 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002dfc:	2064      	movs	r0, #100	; 0x64
 8002dfe:	f010 fa0a 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <GPIO_off_init+0xa0>)
 8002e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f006 f9f0 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e10:	2064      	movs	r0, #100	; 0x64
 8002e12:	f010 fa00 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <GPIO_off_init+0xa4>)
 8002e18:	2120      	movs	r1, #32
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f006 f9e7 	bl	80091f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002e22:	2064      	movs	r0, #100	; 0x64
 8002e24:	f010 f9f7 	bl	8013216 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <GPIO_off_init+0xa4>)
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f006 f9de 	bl	80091f0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <GPIO_off_init+0x9c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f010 f9cb 	bl	80131d4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002e3e:	e7ba      	b.n	8002db6 <GPIO_off_init+0x12>
 8002e40:	240009b0 	.word	0x240009b0
 8002e44:	58020800 	.word	0x58020800
 8002e48:	58020400 	.word	0x58020400

08002e4c <UART_TX_init>:
 * and transmitting data as long as the task is running.
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <UART_TX_init+0xa4>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e64:	2200      	movs	r2, #0
 8002e66:	4923      	ldr	r1, [pc, #140]	; (8002ef4 <UART_TX_init+0xa8>)
 8002e68:	f010 fc00 	bl	801366c <osMessageQueueGet>
 8002e6c:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d121      	bne.n	8002eb8 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <UART_TX_init+0xa8>)
 8002e76:	889b      	ldrh	r3, [r3, #4]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e82:	d219      	bcs.n	8002eb8 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <UART_TX_init+0xac>)
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <UART_TX_init+0xa8>)
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <UART_TX_init+0xa8>)
 8002e90:	8892      	ldrh	r2, [r2, #4]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f013 fdfc 	bl	8016a90 <memcpy>
					free(msg.array);
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <UART_TX_init+0xa8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f013 fdef 	bl	8016a80 <free>
					total_size += msg.size;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <UART_TX_init+0xa8>)
 8002ea4:	889b      	ldrh	r3, [r3, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d803      	bhi.n	8002ec0 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ce      	beq.n	8002e5c <UART_TX_init+0x10>
 8002ebe:	e000      	b.n	8002ec2 <UART_TX_init+0x76>
						break;
 8002ec0:	bf00      	nop

		if (total_size > 0) {
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <UART_TX_init+0xac>)
 8002ed0:	480a      	ldr	r0, [pc, #40]	; (8002efc <UART_TX_init+0xb0>)
 8002ed2:	f00d fabd 	bl	8010450 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002ed6:	e001      	b.n	8002edc <UART_TX_init+0x90>
				osThreadYield();
 8002ed8:	f010 f95c 	bl	8013194 <osThreadYield>
			while (tx_flag == 0) {
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <UART_TX_init+0xb4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f9      	beq.n	8002ed8 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <UART_TX_init+0xb4>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002eea:	f010 f953 	bl	8013194 <osThreadYield>
		total_size = 0;
 8002eee:	e7b3      	b.n	8002e58 <UART_TX_init+0xc>
 8002ef0:	24000c48 	.word	0x24000c48
 8002ef4:	24000c4c 	.word	0x24000c4c
 8002ef8:	24000cf4 	.word	0x24000cf4
 8002efc:	24000638 	.word	0x24000638
 8002f00:	24000000 	.word	0x24000000

08002f04 <Voltage_Monitor_init>:
 * @brief Function implementing the Voltage_Monitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <Voltage_Monitor_init+0xbc>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f14:	2200      	movs	r2, #0
 8002f16:	2108      	movs	r1, #8
 8002f18:	f010 fa6f 	bl	80133fa <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002f1c:	2014      	movs	r0, #20
 8002f1e:	f013 fda7 	bl	8016a70 <malloc>
 8002f22:	4603      	mov	r3, r0
 8002f24:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002f26:	2008      	movs	r0, #8
 8002f28:	f013 fda2 	bl	8016a70 <malloc>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff f881 	bl	8002038 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002f36:	68b8      	ldr	r0, [r7, #8]
 8002f38:	f7ff f8d0 	bl	80020dc <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	885a      	ldrh	r2, [r3, #2]
 8002f40:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <Voltage_Monitor_init+0xc0>)
 8002f42:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <Voltage_Monitor_init+0xc4>)
 8002f4a:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <Voltage_Monitor_init+0xc8>)
 8002f52:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	885a      	ldrh	r2, [r3, #2]
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <Voltage_Monitor_init+0xcc>)
 8002f5a:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	889a      	ldrh	r2, [r3, #4]
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <Voltage_Monitor_init+0xd0>)
 8002f62:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	88da      	ldrh	r2, [r3, #6]
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <Voltage_Monitor_init+0xd4>)
 8002f6a:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	899a      	ldrh	r2, [r3, #12]
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <Voltage_Monitor_init+0xd8>)
 8002f72:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88da      	ldrh	r2, [r3, #6]
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <Voltage_Monitor_init+0xdc>)
 8002f7a:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	889a      	ldrh	r2, [r3, #4]
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <Voltage_Monitor_init+0xe0>)
 8002f82:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	89da      	ldrh	r2, [r3, #14]
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <Voltage_Monitor_init+0xe4>)
 8002f8a:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8a1a      	ldrh	r2, [r3, #16]
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <Voltage_Monitor_init+0xe8>)
 8002f92:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	891a      	ldrh	r2, [r3, #8]
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <Voltage_Monitor_init+0xec>)
 8002f9a:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	895a      	ldrh	r2, [r3, #10]
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <Voltage_Monitor_init+0xf0>)
 8002fa2:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8a5a      	ldrh	r2, [r3, #18]
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <Voltage_Monitor_init+0xf4>)
 8002faa:	801a      	strh	r2, [r3, #0]
//			if (!in_range(_n800v, 3018, 3336)) {
//				error_protocol(RAIL_n800v);
//			}
//		}

		free(hk_adc1);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f013 fd67 	bl	8016a80 <free>
		free(hk_adc3);
 8002fb2:	68b8      	ldr	r0, [r7, #8]
 8002fb4:	f013 fd64 	bl	8016a80 <free>

		osThreadYield();
 8002fb8:	f010 f8ec 	bl	8013194 <osThreadYield>
	for (;;) {
 8002fbc:	e7a6      	b.n	8002f0c <Voltage_Monitor_init+0x8>
 8002fbe:	bf00      	nop
 8002fc0:	24000c64 	.word	0x24000c64
 8002fc4:	24000c26 	.word	0x24000c26
 8002fc8:	24000c28 	.word	0x24000c28
 8002fcc:	24000c2a 	.word	0x24000c2a
 8002fd0:	24000c2c 	.word	0x24000c2c
 8002fd4:	24000c2e 	.word	0x24000c2e
 8002fd8:	24000c30 	.word	0x24000c30
 8002fdc:	24000c32 	.word	0x24000c32
 8002fe0:	24000c34 	.word	0x24000c34
 8002fe4:	24000c36 	.word	0x24000c36
 8002fe8:	24000c38 	.word	0x24000c38
 8002fec:	24000c3a 	.word	0x24000c3a
 8002ff0:	24000c3c 	.word	0x24000c3c
 8002ff4:	24000c3e 	.word	0x24000c3e
 8002ff8:	24000c40 	.word	0x24000c40

08002ffc <FLAG_init>:
 * @brief Function implementing the FLAG_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <FLAG_init+0x38>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f010 f9d5 	bl	80133b8 <osEventFlagsGet>
 800300e:	4603      	mov	r3, r0
 8003010:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0316 	and.w	r3, r3, #22
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <FLAG_init+0x38>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2116      	movs	r1, #22
 8003022:	4618      	mov	r0, r3
 8003024:	f010 f996 	bl	8013354 <osEventFlagsClear>
			enter_stop();
 8003028:	f7ff f942 	bl	80022b0 <enter_stop>
		}
		osDelay(1);
 800302c:	2001      	movs	r0, #1
 800302e:	f010 f8f2 	bl	8013216 <osDelay>
	for (;;) {
 8003032:	e7e7      	b.n	8003004 <FLAG_init+0x8>
 8003034:	24000c64 	.word	0x24000c64

08003038 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800304a:	f000 ff85 	bl	8003f58 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40001000 	.word	0x40001000

0800305c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
}
 8003062:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003064:	e7fe      	b.n	8003064 <Error_Handler+0x8>
	...

08003068 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_MspInit+0x38>)
 8003070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_MspInit+0x38>)
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_MspInit+0x38>)
 8003080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	210f      	movs	r1, #15
 8003090:	f06f 0001 	mvn.w	r0, #1
 8003094:	f002 fc6e 	bl	8005974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	58024400 	.word	0x58024400

080030a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08e      	sub	sp, #56	; 0x38
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7b      	ldr	r2, [pc, #492]	; (80032b0 <HAL_ADC_MspInit+0x20c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f040 8091 	bne.w	80031ea <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030c8:	4b7a      	ldr	r3, [pc, #488]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80030ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030ce:	4a79      	ldr	r2, [pc, #484]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80030d0:	f043 0320 	orr.w	r3, r3, #32
 80030d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80030da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e6:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80030e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ec:	4a71      	ldr	r2, [pc, #452]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f6:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80030f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003104:	4b6b      	ldr	r3, [pc, #428]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310a:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003114:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003122:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003128:	4a62      	ldr	r2, [pc, #392]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003132:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003140:	2333      	movs	r3, #51	; 0x33
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003144:	2303      	movs	r3, #3
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003150:	4619      	mov	r1, r3
 8003152:	4859      	ldr	r0, [pc, #356]	; (80032b8 <HAL_ADC_MspInit+0x214>)
 8003154:	f005 fe84 	bl	8008e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8003158:	23ce      	movs	r3, #206	; 0xce
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315c:	2303      	movs	r3, #3
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003168:	4619      	mov	r1, r3
 800316a:	4854      	ldr	r0, [pc, #336]	; (80032bc <HAL_ADC_MspInit+0x218>)
 800316c:	f005 fe78 	bl	8008e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003170:	2303      	movs	r3, #3
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003174:	2303      	movs	r3, #3
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	484f      	ldr	r0, [pc, #316]	; (80032c0 <HAL_ADC_MspInit+0x21c>)
 8003184:	f005 fe6c 	bl	8008e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003188:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 800318a:	4a4f      	ldr	r2, [pc, #316]	; (80032c8 <HAL_ADC_MspInit+0x224>)
 800318c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 8003190:	2209      	movs	r2, #9
 8003192:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 800319c:	2200      	movs	r2, #0
 800319e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031c0:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031cc:	483d      	ldr	r0, [pc, #244]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031ce:	f002 ffff 	bl	80061d0 <HAL_DMA_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80031d8:	f7ff ff40 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a39      	ldr	r2, [pc, #228]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80031e2:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <HAL_ADC_MspInit+0x220>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80031e8:	e05e      	b.n	80032a8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_ADC_MspInit+0x228>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d159      	bne.n	80032a8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031f4:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80031f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fa:	4a2e      	ldr	r2, [pc, #184]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 80031fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003222:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_ADC_MspInit+0x210>)
 8003224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003230:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003234:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003238:	f000 feba 	bl	8003fb0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800323c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003240:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003244:	f000 feb4 	bl	8003fb0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 800324a:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_ADC_MspInit+0x230>)
 800324c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 8003250:	2273      	movs	r2, #115	; 0x73
 8003252:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 800325c:	2200      	movs	r2, #0
 800325e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 8003262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003266:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 800326a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800326e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 8003272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003276:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 800327a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800327e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 8003282:	2200      	movs	r2, #0
 8003284:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 8003288:	2200      	movs	r2, #0
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800328c:	4810      	ldr	r0, [pc, #64]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 800328e:	f002 ff9f 	bl	80061d0 <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003298:	f7ff fee0 	bl	800305c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 80032a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80032a2:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <HAL_ADC_MspInit+0x22c>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032a8:	bf00      	nop
 80032aa:	3738      	adds	r7, #56	; 0x38
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40022000 	.word	0x40022000
 80032b4:	58024400 	.word	0x58024400
 80032b8:	58020800 	.word	0x58020800
 80032bc:	58020000 	.word	0x58020000
 80032c0:	58020400 	.word	0x58020400
 80032c4:	24000204 	.word	0x24000204
 80032c8:	40020010 	.word	0x40020010
 80032cc:	58026000 	.word	0x58026000
 80032d0:	2400027c 	.word	0x2400027c
 80032d4:	40020028 	.word	0x40020028

080032d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a34      	ldr	r2, [pc, #208]	; (80033c8 <HAL_DAC_MspInit+0xf0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d161      	bne.n	80033be <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_DAC_MspInit+0xf4>)
 80032fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003300:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_DAC_MspInit+0xf4>)
 8003302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003306:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_DAC_MspInit+0xf4>)
 800330c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <HAL_DAC_MspInit+0xf4>)
 800331a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <HAL_DAC_MspInit+0xf4>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_DAC_MspInit+0xf4>)
 800332a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003336:	2310      	movs	r3, #16
 8003338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800333a:	2303      	movs	r3, #3
 800333c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 0314 	add.w	r3, r7, #20
 8003346:	4619      	mov	r1, r3
 8003348:	4821      	ldr	r0, [pc, #132]	; (80033d0 <HAL_DAC_MspInit+0xf8>)
 800334a:	f005 fd89 	bl	8008e60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800334e:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_DAC_MspInit+0x100>)
 8003352:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003356:	2243      	movs	r2, #67	; 0x43
 8003358:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003370:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003374:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003378:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800337c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003384:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 800338e:	2200      	movs	r2, #0
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003392:	4810      	ldr	r0, [pc, #64]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 8003394:	f002 ff1c 	bl	80061d0 <HAL_DMA_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800339e:	f7ff fe5d 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_DAC_MspInit+0xfc>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2105      	movs	r1, #5
 80033b2:	2036      	movs	r0, #54	; 0x36
 80033b4:	f002 fade 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033b8:	2036      	movs	r0, #54	; 0x36
 80033ba:	f002 faf5 	bl	80059a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80033be:	bf00      	nop
 80033c0:	3728      	adds	r7, #40	; 0x28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40007400 	.word	0x40007400
 80033cc:	58024400 	.word	0x58024400
 80033d0:	58020000 	.word	0x58020000
 80033d4:	24000308 	.word	0x24000308
 80033d8:	40020088 	.word	0x40020088

080033dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0ba      	sub	sp, #232	; 0xe8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	22c0      	movs	r2, #192	; 0xc0
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f013 fb55 	bl	8016aac <memset>
  if(hi2c->Instance==I2C1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_I2C_MspInit+0xc8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d146      	bne.n	800349a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800340c:	f04f 0208 	mov.w	r2, #8
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800341e:	f107 0310 	add.w	r3, r7, #16
 8003422:	4618      	mov	r0, r3
 8003424:	f007 fda8 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800342e:	f7ff fe15 	bl	800305c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_I2C_MspInit+0xcc>)
 8003434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <HAL_I2C_MspInit+0xcc>)
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_I2C_MspInit+0xcc>)
 8003444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003450:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003458:	2312      	movs	r3, #18
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800346a:	2304      	movs	r3, #4
 800346c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003470:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003474:	4619      	mov	r1, r3
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <HAL_I2C_MspInit+0xd0>)
 8003478:	f005 fcf2 	bl	8008e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_I2C_MspInit+0xcc>)
 800347e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_I2C_MspInit+0xcc>)
 8003484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003488:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_I2C_MspInit+0xcc>)
 800348e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800349a:	bf00      	nop
 800349c:	37e8      	adds	r7, #232	; 0xe8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40005400 	.word	0x40005400
 80034a8:	58024400 	.word	0x58024400
 80034ac:	58020400 	.word	0x58020400

080034b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b0b2      	sub	sp, #200	; 0xc8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034b8:	f107 0308 	add.w	r3, r7, #8
 80034bc:	22c0      	movs	r2, #192	; 0xc0
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f013 faf3 	bl	8016aac <memset>
  if(hrtc->Instance==RTC)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_RTC_MspInit+0x5c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d118      	bne.n	8003502 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RTC_MspInit+0x60>)
 80034de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	4618      	mov	r0, r3
 80034e8:	f007 fd46 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80034f2:	f7ff fdb3 	bl	800305c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RTC_MspInit+0x64>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a06      	ldr	r2, [pc, #24]	; (8003514 <HAL_RTC_MspInit+0x64>)
 80034fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003502:	bf00      	nop
 8003504:	37c8      	adds	r7, #200	; 0xc8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	58004000 	.word	0x58004000
 8003510:	00019300 	.word	0x00019300
 8003514:	58024400 	.word	0x58024400

08003518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0bc      	sub	sp, #240	; 0xf0
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003530:	f107 0318 	add.w	r3, r7, #24
 8003534:	22c0      	movs	r2, #192	; 0xc0
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f013 fab7 	bl	8016aac <memset>
  if(hspi->Instance==SPI1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4c      	ldr	r2, [pc, #304]	; (8003674 <HAL_SPI_MspInit+0x15c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d145      	bne.n	80035d4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003554:	2300      	movs	r3, #0
 8003556:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003558:	f107 0318 	add.w	r3, r7, #24
 800355c:	4618      	mov	r0, r3
 800355e:	f007 fd0b 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003568:	f7ff fd78 	bl	800305c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_SPI_MspInit+0x160>)
 800356e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003572:	4a41      	ldr	r2, [pc, #260]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003574:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003578:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800357c:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_SPI_MspInit+0x160>)
 800357e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_SPI_MspInit+0x160>)
 800358c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003590:	4a39      	ldr	r2, [pc, #228]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_SPI_MspInit+0x160>)
 800359c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80035a8:	2318      	movs	r3, #24
 80035aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035c0:	2305      	movs	r3, #5
 80035c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035ca:	4619      	mov	r1, r3
 80035cc:	482b      	ldr	r0, [pc, #172]	; (800367c <HAL_SPI_MspInit+0x164>)
 80035ce:	f005 fc47 	bl	8008e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035d2:	e04a      	b.n	800366a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a29      	ldr	r2, [pc, #164]	; (8003680 <HAL_SPI_MspInit+0x168>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d145      	bne.n	800366a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80035de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ee:	f107 0318 	add.w	r3, r7, #24
 80035f2:	4618      	mov	r0, r3
 80035f4:	f007 fcc0 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80035fe:	f7ff fd2d 	bl	800305c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_SPI_MspInit+0x160>)
 800360a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003626:	4a14      	ldr	r2, [pc, #80]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_SPI_MspInit+0x160>)
 8003632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800363e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003646:	2302      	movs	r3, #2
 8003648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003658:	2305      	movs	r3, #5
 800365a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003662:	4619      	mov	r1, r3
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <HAL_SPI_MspInit+0x164>)
 8003666:	f005 fbfb 	bl	8008e60 <HAL_GPIO_Init>
}
 800366a:	bf00      	nop
 800366c:	37f0      	adds	r7, #240	; 0xf0
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40013000 	.word	0x40013000
 8003678:	58024400 	.word	0x58024400
 800367c:	58020400 	.word	0x58020400
 8003680:	40003800 	.word	0x40003800

08003684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a46      	ldr	r2, [pc, #280]	; (80037ac <HAL_TIM_Base_MspInit+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12f      	bne.n	80036f6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800369c:	4a44      	ldr	r2, [pc, #272]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 80036a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80036b4:	2200      	movs	r2, #0
 80036b6:	2105      	movs	r1, #5
 80036b8:	2018      	movs	r0, #24
 80036ba:	f002 f95b 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80036be:	2018      	movs	r0, #24
 80036c0:	f002 f972 	bl	80059a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2105      	movs	r1, #5
 80036c8:	2019      	movs	r0, #25
 80036ca:	f002 f953 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80036ce:	2019      	movs	r0, #25
 80036d0:	f002 f96a 	bl	80059a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2105      	movs	r1, #5
 80036d8:	201a      	movs	r0, #26
 80036da:	f002 f94b 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80036de:	201a      	movs	r0, #26
 80036e0:	f002 f962 	bl	80059a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2105      	movs	r1, #5
 80036e8:	201b      	movs	r0, #27
 80036ea:	f002 f943 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80036ee:	201b      	movs	r0, #27
 80036f0:	f002 f95a 	bl	80059a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036f4:	e055      	b.n	80037a2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d117      	bne.n	8003730 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003706:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2105      	movs	r1, #5
 8003722:	201c      	movs	r0, #28
 8003724:	f002 f926 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003728:	201c      	movs	r0, #28
 800372a:	f002 f93d 	bl	80059a8 <HAL_NVIC_EnableIRQ>
}
 800372e:	e038      	b.n	80037a2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_TIM_Base_MspInit+0x130>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d117      	bne.n	800376a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 800373c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 800374c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2105      	movs	r1, #5
 800375c:	201d      	movs	r0, #29
 800375e:	f002 f909 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003762:	201d      	movs	r0, #29
 8003764:	f002 f920 	bl	80059a8 <HAL_NVIC_EnableIRQ>
}
 8003768:	e01b      	b.n	80037a2 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <HAL_TIM_Base_MspInit+0x134>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d116      	bne.n	80037a2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 800377c:	f043 0304 	orr.w	r3, r3, #4
 8003780:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2105      	movs	r1, #5
 8003796:	201e      	movs	r0, #30
 8003798:	f002 f8ec 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800379c:	201e      	movs	r0, #30
 800379e:	f002 f903 	bl	80059a8 <HAL_NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000
 80037b0:	58024400 	.word	0x58024400
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800

080037bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <HAL_TIM_MspPostInit+0xb8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d120      	bne.n	8003820 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_TIM_MspPostInit+0xbc>)
 80037e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e4:	4a24      	ldr	r2, [pc, #144]	; (8003878 <HAL_TIM_MspPostInit+0xbc>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_TIM_MspPostInit+0xbc>)
 80037f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800380e:	2301      	movs	r3, #1
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4619      	mov	r1, r3
 8003818:	4818      	ldr	r0, [pc, #96]	; (800387c <HAL_TIM_MspPostInit+0xc0>)
 800381a:	f005 fb21 	bl	8008e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800381e:	e024      	b.n	800386a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003828:	d11f      	bne.n	800386a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_TIM_MspPostInit+0xbc>)
 800382c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_TIM_MspPostInit+0xbc>)
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <HAL_TIM_MspPostInit+0xbc>)
 800383c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800384c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800385a:	2301      	movs	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	4619      	mov	r1, r3
 8003864:	4806      	ldr	r0, [pc, #24]	; (8003880 <HAL_TIM_MspPostInit+0xc4>)
 8003866:	f005 fafb 	bl	8008e60 <HAL_GPIO_Init>
}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	58024400 	.word	0x58024400
 800387c:	58020000 	.word	0x58020000
 8003880:	58020400 	.word	0x58020400

08003884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b0ba      	sub	sp, #232	; 0xe8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	22c0      	movs	r2, #192	; 0xc0
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f013 f901 	bl	8016aac <memset>
  if(huart->Instance==USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <HAL_UART_MspInit+0x130>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d17b      	bne.n	80039ac <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038b4:	f04f 0201 	mov.w	r2, #1
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80038c0:	2318      	movs	r3, #24
 80038c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	4618      	mov	r0, r3
 80038cc:	f007 fb54 	bl	800af78 <HAL_RCCEx_PeriphCLKConfig>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80038d6:	f7ff fbc1 	bl	800305c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_UART_MspInit+0x134>)
 80038dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e0:	4a35      	ldr	r2, [pc, #212]	; (80039b8 <HAL_UART_MspInit+0x134>)
 80038e2:	f043 0310 	orr.w	r3, r3, #16
 80038e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ea:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <HAL_UART_MspInit+0x134>)
 80038ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f8:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <HAL_UART_MspInit+0x134>)
 80038fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038fe:	4a2e      	ldr	r2, [pc, #184]	; (80039b8 <HAL_UART_MspInit+0x134>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_UART_MspInit+0x134>)
 800390a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003916:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800391a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003930:	2307      	movs	r3, #7
 8003932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003936:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800393a:	4619      	mov	r1, r3
 800393c:	481f      	ldr	r0, [pc, #124]	; (80039bc <HAL_UART_MspInit+0x138>)
 800393e:	f005 fa8f 	bl	8008e60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_UART_MspInit+0x140>)
 8003946:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 800394a:	222a      	movs	r2, #42	; 0x2a
 800394c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003950:	2240      	movs	r2, #64	; 0x40
 8003952:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 800395c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003960:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003970:	2200      	movs	r2, #0
 8003972:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003976:	2200      	movs	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 800397c:	2200      	movs	r2, #0
 800397e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003980:	480f      	ldr	r0, [pc, #60]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003982:	f002 fc25 	bl	80061d0 <HAL_DMA_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800398c:	f7ff fb66 	bl	800305c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_UART_MspInit+0x13c>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	2105      	movs	r1, #5
 80039a0:	2025      	movs	r0, #37	; 0x25
 80039a2:	f001 ffe7 	bl	8005974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039a6:	2025      	movs	r0, #37	; 0x25
 80039a8:	f001 fffe 	bl	80059a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039ac:	bf00      	nop
 80039ae:	37e8      	adds	r7, #232	; 0xe8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40011000 	.word	0x40011000
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58020000 	.word	0x58020000
 80039c0:	240006cc 	.word	0x240006cc
 80039c4:	40020040 	.word	0x40020040

080039c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b090      	sub	sp, #64	; 0x40
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	d827      	bhi.n	8003a26 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80039d6:	2200      	movs	r2, #0
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	2036      	movs	r0, #54	; 0x36
 80039dc:	f001 ffca 	bl	8005974 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039e0:	2036      	movs	r0, #54	; 0x36
 80039e2:	f001 ffe1 	bl	80059a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80039e6:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <HAL_InitTick+0xc4>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039ec:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <HAL_InitTick+0xc8>)
 80039ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039f2:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <HAL_InitTick+0xc8>)
 80039f4:	f043 0310 	orr.w	r3, r3, #16
 80039f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_InitTick+0xc8>)
 80039fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a0a:	f107 0210 	add.w	r2, r7, #16
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f007 fa6d 	bl	800aef4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_InitTick+0x6a>
 8003a24:	e001      	b.n	8003a2a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e02b      	b.n	8003a82 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f007 fa37 	bl	800ae9c <HAL_RCC_GetPCLK1Freq>
 8003a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003a30:	e004      	b.n	8003a3c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a32:	f007 fa33 	bl	800ae9c <HAL_RCC_GetPCLK1Freq>
 8003a36:	4603      	mov	r3, r0
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <HAL_InitTick+0xcc>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	3b01      	subs	r3, #1
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a4a:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_InitTick+0xd4>)
 8003a4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a6a:	480b      	ldr	r0, [pc, #44]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a6c:	f00a fef5 	bl	800e85a <HAL_TIM_Base_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a76:	4808      	ldr	r0, [pc, #32]	; (8003a98 <HAL_InitTick+0xd0>)
 8003a78:	f00a ff46 	bl	800e908 <HAL_TIM_Base_Start_IT>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	e000      	b.n	8003a82 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3740      	adds	r7, #64	; 0x40
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	24000098 	.word	0x24000098
 8003a90:	58024400 	.word	0x58024400
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	240010dc 	.word	0x240010dc
 8003a9c:	40001000 	.word	0x40001000

08003aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003aa4:	e7fe      	b.n	8003aa4 <NMI_Handler+0x4>

08003aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <HardFault_Handler+0x4>

08003aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <MemManage_Handler+0x4>

08003ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <BusFault_Handler+0x4>

08003ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <UsageFault_Handler+0x4>

08003abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <DMA1_Stream0_IRQHandler+0x10>)
 8003ad2:	f003 fea7 	bl	8007824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	24000204 	.word	0x24000204

08003ae0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003ae4:	4802      	ldr	r0, [pc, #8]	; (8003af0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ae6:	f003 fe9d 	bl	8007824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2400027c 	.word	0x2400027c

08003af4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <DMA1_Stream2_IRQHandler+0x10>)
 8003afa:	f003 fe93 	bl	8007824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	240006cc 	.word	0x240006cc

08003b08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003b0c:	4802      	ldr	r0, [pc, #8]	; (8003b18 <DMA1_Stream5_IRQHandler+0x10>)
 8003b0e:	f003 fe89 	bl	8007824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	24000308 	.word	0x24000308

08003b1c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b20:	4802      	ldr	r0, [pc, #8]	; (8003b2c <TIM1_BRK_IRQHandler+0x10>)
 8003b22:	f00b fa08 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	24000508 	.word	0x24000508

08003b30 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b34:	4802      	ldr	r0, [pc, #8]	; (8003b40 <TIM1_UP_IRQHandler+0x10>)
 8003b36:	f00b f9fe 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	24000508 	.word	0x24000508

08003b44 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b48:	4802      	ldr	r0, [pc, #8]	; (8003b54 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003b4a:	f00b f9f4 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	24000508 	.word	0x24000508

08003b58 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b5c:	4802      	ldr	r0, [pc, #8]	; (8003b68 <TIM1_CC_IRQHandler+0x10>)
 8003b5e:	f00b f9ea 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	24000508 	.word	0x24000508

08003b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b70:	4802      	ldr	r0, [pc, #8]	; (8003b7c <TIM2_IRQHandler+0x10>)
 8003b72:	f00b f9e0 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	24000554 	.word	0x24000554

08003b80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <TIM3_IRQHandler+0x10>)
 8003b86:	f00b f9d6 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	240005a0 	.word	0x240005a0

08003b94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <TIM4_IRQHandler+0x10>)
 8003b9a:	f00b f9cc 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	240005ec 	.word	0x240005ec

08003ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <USART1_IRQHandler+0x10>)
 8003bae:	f00c fd85 	bl	80106bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	24000638 	.word	0x24000638

08003bbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <TIM6_DAC_IRQHandler+0x20>)
 8003bc2:	791b      	ldrb	r3, [r3, #4]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003bca:	4804      	ldr	r0, [pc, #16]	; (8003bdc <TIM6_DAC_IRQHandler+0x20>)
 8003bcc:	f002 f881 	bl	8005cd2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003bd0:	4803      	ldr	r0, [pc, #12]	; (8003be0 <TIM6_DAC_IRQHandler+0x24>)
 8003bd2:	f00b f9b0 	bl	800ef36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	240002f4 	.word	0x240002f4
 8003be0:	240010dc 	.word	0x240010dc

08003be4 <ITM_SendChar>:
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <ITM_SendChar+0x48>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <ITM_SendChar+0x48>)
 8003bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <ITM_SendChar+0x4c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <ITM_SendChar+0x4c>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	bf00      	nop
 8003c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f8      	beq.n	8003c08 <ITM_SendChar+0x24>
 8003c16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000edfc 	.word	0xe000edfc
 8003c30:	e0000e00 	.word	0xe0000e00

08003c34 <_read>:
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e00a      	b.n	8003c5c <_read+0x28>
 8003c46:	f3af 8000 	nop.w
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	60ba      	str	r2, [r7, #8]
 8003c52:	b2ca      	uxtb	r2, r1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dbf0      	blt.n	8003c46 <_read+0x12>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_write>:
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e009      	b.n	8003c94 <_write+0x26>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	60ba      	str	r2, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ffab 	bl	8003be4 <ITM_SendChar>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dbf1      	blt.n	8003c80 <_write+0x12>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_close>:
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <_fstat>:
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_isatty>:
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_lseek>:
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	2300      	movs	r3, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <_sbrk>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <_sbrk+0x5c>)
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <_sbrk+0x60>)
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <_sbrk+0x22>
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_sbrk+0x64>)
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <_sbrk+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d207      	bcs.n	8003d50 <_sbrk+0x40>
 8003d40:	f012 fe6c 	bl	8016a1c <__errno>
 8003d44:	4603      	mov	r3, r0
 8003d46:	220c      	movs	r2, #12
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d4e:	e009      	b.n	8003d64 <_sbrk+0x54>
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_sbrk+0x64>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <_sbrk+0x64>)
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	24080000 	.word	0x24080000
 8003d70:	00000400 	.word	0x00000400
 8003d74:	24001128 	.word	0x24001128
 8003d78:	24005a90 	.word	0x24005a90

08003d7c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003d80:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <SystemInit+0xe4>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <SystemInit+0xe4>)
 8003d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003d90:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <SystemInit+0xe8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d807      	bhi.n	8003dac <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <SystemInit+0xe8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 030f 	bic.w	r3, r3, #15
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <SystemInit+0xe8>)
 8003da6:	f043 0307 	orr.w	r3, r3, #7
 8003daa:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <SystemInit+0xec>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <SystemInit+0xec>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003db8:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <SystemInit+0xec>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <SystemInit+0xec>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4929      	ldr	r1, [pc, #164]	; (8003e68 <SystemInit+0xec>)
 8003dc4:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <SystemInit+0xf0>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <SystemInit+0xe8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003dd6:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <SystemInit+0xe8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 030f 	bic.w	r3, r3, #15
 8003dde:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <SystemInit+0xe8>)
 8003de0:	f043 0307 	orr.w	r3, r3, #7
 8003de4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <SystemInit+0xec>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003dec:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <SystemInit+0xec>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <SystemInit+0xec>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <SystemInit+0xec>)
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <SystemInit+0xf4>)
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <SystemInit+0xec>)
 8003e00:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <SystemInit+0xf8>)
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <SystemInit+0xec>)
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <SystemInit+0xfc>)
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <SystemInit+0xec>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003e10:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <SystemInit+0xec>)
 8003e12:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <SystemInit+0xfc>)
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003e16:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <SystemInit+0xec>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <SystemInit+0xec>)
 8003e1e:	4a16      	ldr	r2, [pc, #88]	; (8003e78 <SystemInit+0xfc>)
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <SystemInit+0xec>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <SystemInit+0xec>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <SystemInit+0xec>)
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e32:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <SystemInit+0xec>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <SystemInit+0x100>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <SystemInit+0x104>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e46:	d202      	bcs.n	8003e4e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <SystemInit+0x108>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <SystemInit+0x10c>)
 8003e50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000ed00 	.word	0xe000ed00
 8003e64:	52002000 	.word	0x52002000
 8003e68:	58024400 	.word	0x58024400
 8003e6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e70:	02020200 	.word	0x02020200
 8003e74:	01ff0000 	.word	0x01ff0000
 8003e78:	01010280 	.word	0x01010280
 8003e7c:	5c001000 	.word	0x5c001000
 8003e80:	ffff0000 	.word	0xffff0000
 8003e84:	51008108 	.word	0x51008108
 8003e88:	52004000 	.word	0x52004000

08003e8c <Reset_Handler>:
 8003e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec4 <LoopFillZerobss+0xe>
 8003e90:	f7ff ff74 	bl	8003d7c <SystemInit>
 8003e94:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <LoopFillZerobss+0x12>)
 8003e96:	490d      	ldr	r1, [pc, #52]	; (8003ecc <LoopFillZerobss+0x16>)
 8003e98:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <LoopFillZerobss+0x1a>)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e002      	b.n	8003ea4 <LoopCopyDataInit>

08003e9e <CopyDataInit>:
 8003e9e:	58d4      	ldr	r4, [r2, r3]
 8003ea0:	50c4      	str	r4, [r0, r3]
 8003ea2:	3304      	adds	r3, #4

08003ea4 <LoopCopyDataInit>:
 8003ea4:	18c4      	adds	r4, r0, r3
 8003ea6:	428c      	cmp	r4, r1
 8003ea8:	d3f9      	bcc.n	8003e9e <CopyDataInit>
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <LoopFillZerobss+0x1e>)
 8003eac:	4c0a      	ldr	r4, [pc, #40]	; (8003ed8 <LoopFillZerobss+0x22>)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e001      	b.n	8003eb6 <LoopFillZerobss>

08003eb2 <FillZerobss>:
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	3204      	adds	r2, #4

08003eb6 <LoopFillZerobss>:
 8003eb6:	42a2      	cmp	r2, r4
 8003eb8:	d3fb      	bcc.n	8003eb2 <FillZerobss>
 8003eba:	f012 fdb5 	bl	8016a28 <__libc_init_array>
 8003ebe:	f7fd f87b 	bl	8000fb8 <main>
 8003ec2:	4770      	bx	lr
 8003ec4:	24080000 	.word	0x24080000
 8003ec8:	24000000 	.word	0x24000000
 8003ecc:	24000108 	.word	0x24000108
 8003ed0:	08017914 	.word	0x08017914
 8003ed4:	24000120 	.word	0x24000120
 8003ed8:	24005a90 	.word	0x24005a90

08003edc <ADC3_IRQHandler>:
 8003edc:	e7fe      	b.n	8003edc <ADC3_IRQHandler>
	...

08003ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee6:	2003      	movs	r0, #3
 8003ee8:	f001 fd39 	bl	800595e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eec:	f006 fe2c 	bl	800ab48 <HAL_RCC_GetSysClockFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_Init+0x68>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	4913      	ldr	r1, [pc, #76]	; (8003f4c <HAL_Init+0x6c>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_Init+0x68>)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <HAL_Init+0x6c>)
 8003f14:	5cd3      	ldrb	r3, [r2, r3]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	4a0b      	ldr	r2, [pc, #44]	; (8003f50 <HAL_Init+0x70>)
 8003f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f24:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <HAL_Init+0x74>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f2a:	2005      	movs	r0, #5
 8003f2c:	f7ff fd4c 	bl	80039c8 <HAL_InitTick>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e002      	b.n	8003f40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f3a:	f7ff f895 	bl	8003068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	08017860 	.word	0x08017860
 8003f50:	24000094 	.word	0x24000094
 8003f54:	24000090 	.word	0x24000090

08003f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_IncTick+0x20>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_IncTick+0x24>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_IncTick+0x24>)
 8003f6a:	6013      	str	r3, [r2, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	2400009c 	.word	0x2400009c
 8003f7c:	2400112c 	.word	0x2400112c

08003f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return uwTick;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_GetTick+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	2400112c 	.word	0x2400112c

08003f98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <HAL_GetREVID+0x14>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	5c001000 	.word	0x5c001000

08003fb0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	4904      	ldr	r1, [pc, #16]	; (8003fd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	58000400 	.word	0x58000400

08003fdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	430b      	orrs	r3, r1
 8004072:	431a      	orrs	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	611a      	str	r2, [r3, #16]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3360      	adds	r3, #96	; 0x60
 80040c6:	461a      	mov	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	431a      	orrs	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	601a      	str	r2, [r3, #0]
  }
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3330      	adds	r3, #48	; 0x30
 8004122:	461a      	mov	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	211f      	movs	r1, #31
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	401a      	ands	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	f003 011f 	and.w	r1, r3, #31
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f023 0203 	bic.w	r2, r3, #3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60da      	str	r2, [r3, #12]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3314      	adds	r3, #20
 80041a0:	461a      	mov	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	0e5b      	lsrs	r3, r3, #25
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	4413      	add	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	0d1b      	lsrs	r3, r3, #20
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2107      	movs	r1, #7
 80041be:	fa01 f303 	lsl.w	r3, r1, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	401a      	ands	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	0d1b      	lsrs	r3, r3, #20
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	fa01 f303 	lsl.w	r3, r1, r3
 80041d4:	431a      	orrs	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0318 	and.w	r3, r3, #24
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <LL_ADC_SetChannelSingleDiff+0x44>)
 800420c:	40d9      	lsrs	r1, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	400b      	ands	r3, r1
 8004212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004216:	431a      	orrs	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	000fffff 	.word	0x000fffff

08004230 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 031f 	and.w	r3, r3, #31
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <LL_ADC_DisableDeepPowerDown+0x20>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6093      	str	r3, [r2, #8]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	5fffffc0 	.word	0x5fffffc0

08004270 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004284:	d101      	bne.n	800428a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <LL_ADC_EnableInternalRegulator+0x24>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	6fffffc0 	.word	0x6fffffc0

080042c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042d4:	d101      	bne.n	80042da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <LL_ADC_Enable+0x24>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	7fffffc0 	.word	0x7fffffc0

08004310 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <LL_ADC_Disable+0x24>)
 800431e:	4013      	ands	r3, r2
 8004320:	f043 0202 	orr.w	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	7fffffc0 	.word	0x7fffffc0

08004338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <LL_ADC_IsEnabled+0x18>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <LL_ADC_IsEnabled+0x1a>
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d101      	bne.n	8004376 <LL_ADC_IsDisableOngoing+0x18>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <LL_ADC_IsDisableOngoing+0x1a>
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <LL_ADC_REG_StartConversion+0x24>)
 8004392:	4013      	ands	r3, r2
 8004394:	f043 0204 	orr.w	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	7fffffc0 	.word	0x7fffffc0

080043ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d101      	bne.n	80043c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d101      	bne.n	80043ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b089      	sub	sp, #36	; 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e18f      	b.n	8004732 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fe fe3f 	bl	80030a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff19 	bl	8004270 <LL_ADC_IsDeepPowerDownEnabled>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff feff 	bl	800424c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff34 	bl	80042c0 <LL_ADC_IsInternalRegulatorEnabled>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d114      	bne.n	8004488 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff18 	bl	8004298 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004468:	4b87      	ldr	r3, [pc, #540]	; (8004688 <HAL_ADC_Init+0x290>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	4a87      	ldr	r2, [pc, #540]	; (800468c <HAL_ADC_Init+0x294>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	3301      	adds	r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800447a:	e002      	b.n	8004482 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f9      	bne.n	800447c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff17 	bl	80042c0 <LL_ADC_IsInternalRegulatorEnabled>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff ff77 	bl	80043ac <LL_ADC_REG_IsConversionOngoing>
 80044be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 8129 	bne.w	8004720 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f040 8125 	bne.w	8004720 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044de:	f043 0202 	orr.w	r2, r3, #2
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff24 	bl	8004338 <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d136      	bne.n	8004564 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a65      	ldr	r2, [pc, #404]	; (8004690 <HAL_ADC_Init+0x298>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_ADC_Init+0x112>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a63      	ldr	r2, [pc, #396]	; (8004694 <HAL_ADC_Init+0x29c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10e      	bne.n	8004528 <HAL_ADC_Init+0x130>
 800450a:	4861      	ldr	r0, [pc, #388]	; (8004690 <HAL_ADC_Init+0x298>)
 800450c:	f7ff ff14 	bl	8004338 <LL_ADC_IsEnabled>
 8004510:	4604      	mov	r4, r0
 8004512:	4860      	ldr	r0, [pc, #384]	; (8004694 <HAL_ADC_Init+0x29c>)
 8004514:	f7ff ff10 	bl	8004338 <LL_ADC_IsEnabled>
 8004518:	4603      	mov	r3, r0
 800451a:	4323      	orrs	r3, r4
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e008      	b.n	800453a <HAL_ADC_Init+0x142>
 8004528:	485b      	ldr	r0, [pc, #364]	; (8004698 <HAL_ADC_Init+0x2a0>)
 800452a:	f7ff ff05 	bl	8004338 <LL_ADC_IsEnabled>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d012      	beq.n	8004564 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a53      	ldr	r2, [pc, #332]	; (8004690 <HAL_ADC_Init+0x298>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_ADC_Init+0x15a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a51      	ldr	r2, [pc, #324]	; (8004694 <HAL_ADC_Init+0x29c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_ADC_Init+0x15e>
 8004552:	4a52      	ldr	r2, [pc, #328]	; (800469c <HAL_ADC_Init+0x2a4>)
 8004554:	e000      	b.n	8004558 <HAL_ADC_Init+0x160>
 8004556:	4a52      	ldr	r2, [pc, #328]	; (80046a0 <HAL_ADC_Init+0x2a8>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f7ff fd3c 	bl	8003fdc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004564:	f7ff fd18 	bl	8003f98 <HAL_GetREVID>
 8004568:	4603      	mov	r3, r0
 800456a:	f241 0203 	movw	r2, #4099	; 0x1003
 800456e:	4293      	cmp	r3, r2
 8004570:	d914      	bls.n	800459c <HAL_ADC_Init+0x1a4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b10      	cmp	r3, #16
 8004578:	d110      	bne.n	800459c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7d5b      	ldrb	r3, [r3, #21]
 800457e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004584:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800458a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7f1b      	ldrb	r3, [r3, #28]
 8004590:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004592:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004594:	f043 030c 	orr.w	r3, r3, #12
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e00d      	b.n	80045b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7d5b      	ldrb	r3, [r3, #21]
 80045a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7f1b      	ldrb	r3, [r3, #28]
 80045b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7f1b      	ldrb	r3, [r3, #28]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	045b      	lsls	r3, r3, #17
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_ADC_Init+0x2ac>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	69b9      	ldr	r1, [r7, #24]
 80045fa:	430b      	orrs	r3, r1
 80045fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fed2 	bl	80043ac <LL_ADC_REG_IsConversionOngoing>
 8004608:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fedf 	bl	80043d2 <LL_ADC_INJ_IsConversionOngoing>
 8004614:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d15f      	bne.n	80046dc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d15c      	bne.n	80046dc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7d1b      	ldrb	r3, [r3, #20]
 8004626:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <HAL_ADC_Init+0x2b0>)
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	69b9      	ldr	r1, [r7, #24]
 8004640:	430b      	orrs	r3, r1
 8004642:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800464a:	2b01      	cmp	r3, #1
 800464c:	d130      	bne.n	80046b0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_ADC_Init+0x2b4>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004662:	3a01      	subs	r2, #1
 8004664:	0411      	lsls	r1, r2, #16
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004670:	4311      	orrs	r1, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004676:	430a      	orrs	r2, r1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	611a      	str	r2, [r3, #16]
 8004684:	e01c      	b.n	80046c0 <HAL_ADC_Init+0x2c8>
 8004686:	bf00      	nop
 8004688:	24000090 	.word	0x24000090
 800468c:	053e2d63 	.word	0x053e2d63
 8004690:	40022000 	.word	0x40022000
 8004694:	40022100 	.word	0x40022100
 8004698:	58026000 	.word	0x58026000
 800469c:	40022300 	.word	0x40022300
 80046a0:	58026300 	.word	0x58026300
 80046a4:	fff0c003 	.word	0xfff0c003
 80046a8:	ffffbffc 	.word	0xffffbffc
 80046ac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fdec 	bl	80052b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10c      	bne.n	80046fe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f023 010f 	bic.w	r1, r3, #15
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
 80046fc:	e007      	b.n	800470e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 020f 	bic.w	r2, r2, #15
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
 800471e:	e007      	b.n	8004730 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f043 0210 	orr.w	r2, r3, #16
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004730:	7ffb      	ldrb	r3, [r7, #31]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	bf00      	nop

0800473c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a55      	ldr	r2, [pc, #340]	; (80048a4 <HAL_ADC_Start_DMA+0x168>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_ADC_Start_DMA+0x20>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a54      	ldr	r2, [pc, #336]	; (80048a8 <HAL_ADC_Start_DMA+0x16c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_ADC_Start_DMA+0x24>
 800475c:	4b53      	ldr	r3, [pc, #332]	; (80048ac <HAL_ADC_Start_DMA+0x170>)
 800475e:	e000      	b.n	8004762 <HAL_ADC_Start_DMA+0x26>
 8004760:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_ADC_Start_DMA+0x174>)
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fd64 	bl	8004230 <LL_ADC_GetMultimode>
 8004768:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fe1c 	bl	80043ac <LL_ADC_REG_IsConversionOngoing>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 808c 	bne.w	8004894 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_ADC_Start_DMA+0x4e>
 8004786:	2302      	movs	r3, #2
 8004788:	e087      	b.n	800489a <HAL_ADC_Start_DMA+0x15e>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b05      	cmp	r3, #5
 800479c:	d002      	beq.n	80047a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	d170      	bne.n	8004886 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fc07 	bl	8004fb8 <ADC_Enable>
 80047aa:	4603      	mov	r3, r0
 80047ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d163      	bne.n	800487c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047b8:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <HAL_ADC_Start_DMA+0x178>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a37      	ldr	r2, [pc, #220]	; (80048a8 <HAL_ADC_Start_DMA+0x16c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d002      	beq.n	80047d4 <HAL_ADC_Start_DMA+0x98>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	e000      	b.n	80047d6 <HAL_ADC_Start_DMA+0x9a>
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_ADC_Start_DMA+0x168>)
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	4293      	cmp	r3, r2
 80047dc:	d002      	beq.n	80047e4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d006      	beq.n	800480a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f023 0206 	bic.w	r2, r3, #6
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	659a      	str	r2, [r3, #88]	; 0x58
 8004808:	e002      	b.n	8004810 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004814:	4a28      	ldr	r2, [pc, #160]	; (80048b8 <HAL_ADC_Start_DMA+0x17c>)
 8004816:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <HAL_ADC_Start_DMA+0x180>)
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_ADC_Start_DMA+0x184>)
 8004826:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	221c      	movs	r2, #28
 800482e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0210 	orr.w	r2, r2, #16
 8004846:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7ff fc89 	bl	800416a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3340      	adds	r3, #64	; 0x40
 8004862:	4619      	mov	r1, r3
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f002 f80e 	bl	8006888 <HAL_DMA_Start_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fd85 	bl	8004384 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800487a:	e00d      	b.n	8004898 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004884:	e008      	b.n	8004898 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004892:	e001      	b.n	8004898 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022100 	.word	0x40022100
 80048ac:	40022300 	.word	0x40022300
 80048b0:	58026300 	.word	0x58026300
 80048b4:	fffff0fe 	.word	0xfffff0fe
 80048b8:	0800518b 	.word	0x0800518b
 80048bc:	08005263 	.word	0x08005263
 80048c0:	0800527f 	.word	0x0800527f

080048c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b0a1      	sub	sp, #132	; 0x84
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a65      	ldr	r2, [pc, #404]	; (8004ab0 <HAL_ADC_ConfigChannel+0x1b0>)
 800491a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_ADC_ConfigChannel+0x2a>
 8004926:	2302      	movs	r3, #2
 8004928:	e32e      	b.n	8004f88 <HAL_ADC_ConfigChannel+0x688>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fd38 	bl	80043ac <LL_ADC_REG_IsConversionOngoing>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 8313 	bne.w	8004f6a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db2c      	blt.n	80049a6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004954:	2b00      	cmp	r3, #0
 8004956:	d108      	bne.n	800496a <HAL_ADC_ConfigChannel+0x6a>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	0e9b      	lsrs	r3, r3, #26
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2201      	movs	r2, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	e016      	b.n	8004998 <HAL_ADC_ConfigChannel+0x98>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800497c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004982:	2320      	movs	r3, #32
 8004984:	e003      	b.n	800498e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2201      	movs	r2, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	69d1      	ldr	r1, [r2, #28]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	430b      	orrs	r3, r1
 80049a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f7ff fbad 	bl	8004112 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fcf5 	bl	80043ac <LL_ADC_REG_IsConversionOngoing>
 80049c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fd02 	bl	80043d2 <LL_ADC_INJ_IsConversionOngoing>
 80049ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 80b8 	bne.w	8004b48 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 80b4 	bne.w	8004b48 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	461a      	mov	r2, r3
 80049ee:	f7ff fbcf 	bl	8004190 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_ADC_ConfigChannel+0x1b4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049fe:	d10b      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x118>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695a      	ldr	r2, [r3, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	e01d      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x154>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x13e>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	e00a      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x154>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6919      	ldr	r1, [r3, #16]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6c:	f7ff faea 	bl	8004044 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6919      	ldr	r1, [r3, #16]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	7e5b      	ldrb	r3, [r3, #25]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x186>
 8004a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a84:	e000      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x188>
 8004a86:	2300      	movs	r3, #0
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f7ff fb14 	bl	80040b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6919      	ldr	r1, [r3, #16]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	7e1b      	ldrb	r3, [r3, #24]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d102      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x1a4>
 8004a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa2:	e000      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x1a6>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7ff faec 	bl	8004084 <LL_ADC_SetDataRightShift>
 8004aac:	e04c      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x248>
 8004aae:	bf00      	nop
 8004ab0:	47ff0000 	.word	0x47ff0000
 8004ab4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	069b      	lsls	r3, r3, #26
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d107      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	069b      	lsls	r3, r3, #26
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d107      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004afe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	069b      	lsls	r3, r3, #26
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d107      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b22:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	069b      	lsls	r3, r3, #26
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b46:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fbf3 	bl	8004338 <LL_ADC_IsEnabled>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 8211 	bne.w	8004f7c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7ff fb3e 	bl	80041e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4aa1      	ldr	r2, [pc, #644]	; (8004df8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f040 812e 	bne.w	8004dd4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x2a0>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0e9b      	lsrs	r3, r3, #26
 8004b8e:	3301      	adds	r3, #1
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	bf94      	ite	ls
 8004b98:	2301      	movls	r3, #1
 8004b9a:	2300      	movhi	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e019      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x2d4>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba8:	fa93 f3a3 	rbit	r3, r3
 8004bac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	bf94      	ite	ls
 8004bce:	2301      	movls	r3, #1
 8004bd0:	2300      	movhi	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d079      	beq.n	8004ccc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x2f4>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	069b      	lsls	r3, r3, #26
 8004bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf2:	e015      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x320>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c04:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	e003      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c12:	fab3 f383 	clz	r3, r3
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3301      	adds	r3, #1
 8004c1a:	069b      	lsls	r3, r3, #26
 8004c1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x340>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	3301      	adds	r3, #1
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	e017      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x370>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	e003      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	ea42 0103 	orr.w	r1, r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x396>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	0e9b      	lsrs	r3, r3, #26
 8004c86:	3301      	adds	r3, #1
 8004c88:	f003 021f 	and.w	r2, r3, #31
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	051b      	lsls	r3, r3, #20
 8004c94:	e018      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x3c8>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	e003      	b.n	8004cba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f003 021f 	and.w	r2, r3, #31
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	e07e      	b.n	8004dca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d107      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x3e8>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	3301      	adds	r3, #1
 8004ce0:	069b      	lsls	r3, r3, #26
 8004ce2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ce6:	e015      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x414>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e003      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	069b      	lsls	r3, r3, #26
 8004d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x434>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e9b      	lsrs	r3, r3, #26
 8004d26:	3301      	adds	r3, #1
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d32:	e017      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x464>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	61bb      	str	r3, [r7, #24]
  return result;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	e003      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2101      	movs	r1, #1
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	ea42 0103 	orr.w	r1, r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10d      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x490>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	0e9b      	lsrs	r3, r3, #26
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	3b1e      	subs	r3, #30
 8004d88:	051b      	lsls	r3, r3, #20
 8004d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	e01b      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x4c8>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
  return result;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004da8:	2320      	movs	r3, #32
 8004daa:	e003      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3301      	adds	r3, #1
 8004db6:	f003 021f 	and.w	r2, r3, #31
 8004dba:	4613      	mov	r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3b1e      	subs	r3, #30
 8004dc2:	051b      	lsls	r3, r3, #20
 8004dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	6892      	ldr	r2, [r2, #8]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f7ff f9de 	bl	8004190 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f280 80cf 	bge.w	8004f7c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a06      	ldr	r2, [pc, #24]	; (8004dfc <HAL_ADC_ConfigChannel+0x4fc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_ADC_ConfigChannel+0x4f2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <HAL_ADC_ConfigChannel+0x500>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10a      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x508>
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_ADC_ConfigChannel+0x504>)
 8004df4:	e009      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x50a>
 8004df6:	bf00      	nop
 8004df8:	47ff0000 	.word	0x47ff0000
 8004dfc:	40022000 	.word	0x40022000
 8004e00:	40022100 	.word	0x40022100
 8004e04:	40022300 	.word	0x40022300
 8004e08:	4b61      	ldr	r3, [pc, #388]	; (8004f90 <HAL_ADC_ConfigChannel+0x690>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff f90c 	bl	8004028 <LL_ADC_GetCommonPathInternalCh>
 8004e10:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5f      	ldr	r2, [pc, #380]	; (8004f94 <HAL_ADC_ConfigChannel+0x694>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_ADC_ConfigChannel+0x526>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a5d      	ldr	r2, [pc, #372]	; (8004f98 <HAL_ADC_ConfigChannel+0x698>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10e      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x544>
 8004e26:	485b      	ldr	r0, [pc, #364]	; (8004f94 <HAL_ADC_ConfigChannel+0x694>)
 8004e28:	f7ff fa86 	bl	8004338 <LL_ADC_IsEnabled>
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	485a      	ldr	r0, [pc, #360]	; (8004f98 <HAL_ADC_ConfigChannel+0x698>)
 8004e30:	f7ff fa82 	bl	8004338 <LL_ADC_IsEnabled>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4323      	orrs	r3, r4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e008      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x556>
 8004e44:	4855      	ldr	r0, [pc, #340]	; (8004f9c <HAL_ADC_ConfigChannel+0x69c>)
 8004e46:	f7ff fa77 	bl	8004338 <LL_ADC_IsEnabled>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d07d      	beq.n	8004f56 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a50      	ldr	r2, [pc, #320]	; (8004fa0 <HAL_ADC_ConfigChannel+0x6a0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d130      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x5c6>
 8004e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d12b      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4a      	ldr	r2, [pc, #296]	; (8004f9c <HAL_ADC_ConfigChannel+0x69c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	f040 8081 	bne.w	8004f7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a45      	ldr	r2, [pc, #276]	; (8004f94 <HAL_ADC_ConfigChannel+0x694>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_ADC_ConfigChannel+0x58e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a43      	ldr	r2, [pc, #268]	; (8004f98 <HAL_ADC_ConfigChannel+0x698>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0x592>
 8004e8e:	4a45      	ldr	r2, [pc, #276]	; (8004fa4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004e90:	e000      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x594>
 8004e92:	4a3f      	ldr	r2, [pc, #252]	; (8004f90 <HAL_ADC_ConfigChannel+0x690>)
 8004e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7ff f8b0 	bl	8004002 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ea2:	4b41      	ldr	r3, [pc, #260]	; (8004fa8 <HAL_ADC_ConfigChannel+0x6a8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	4a40      	ldr	r2, [pc, #256]	; (8004fac <HAL_ADC_ConfigChannel+0x6ac>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004eb6:	e002      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f9      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ec4:	e05a      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a39      	ldr	r2, [pc, #228]	; (8004fb0 <HAL_ADC_ConfigChannel+0x6b0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d11e      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x60e>
 8004ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d119      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2f      	ldr	r2, [pc, #188]	; (8004f9c <HAL_ADC_ConfigChannel+0x69c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d14b      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2a      	ldr	r2, [pc, #168]	; (8004f94 <HAL_ADC_ConfigChannel+0x694>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_ADC_ConfigChannel+0x5f8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a29      	ldr	r2, [pc, #164]	; (8004f98 <HAL_ADC_ConfigChannel+0x698>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x5fc>
 8004ef8:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004efa:	e000      	b.n	8004efe <HAL_ADC_ConfigChannel+0x5fe>
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <HAL_ADC_ConfigChannel+0x690>)
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7ff f87b 	bl	8004002 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f0c:	e036      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d131      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
 8004f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12c      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <HAL_ADC_ConfigChannel+0x69c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d127      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_ADC_ConfigChannel+0x694>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_ADC_ConfigChannel+0x640>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <HAL_ADC_ConfigChannel+0x698>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x644>
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004f42:	e000      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x646>
 8004f44:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <HAL_ADC_ConfigChannel+0x690>)
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7ff f857 	bl	8004002 <LL_ADC_SetCommonPathInternalCh>
 8004f54:	e012      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f68:	e008      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3784      	adds	r7, #132	; 0x84
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	58026300 	.word	0x58026300
 8004f94:	40022000 	.word	0x40022000
 8004f98:	40022100 	.word	0x40022100
 8004f9c:	58026000 	.word	0x58026000
 8004fa0:	cb840000 	.word	0xcb840000
 8004fa4:	40022300 	.word	0x40022300
 8004fa8:	24000090 	.word	0x24000090
 8004fac:	053e2d63 	.word	0x053e2d63
 8004fb0:	c7520000 	.word	0xc7520000
 8004fb4:	cfb80000 	.word	0xcfb80000

08004fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff f9b7 	bl	8004338 <LL_ADC_IsEnabled>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d16e      	bne.n	80050ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b38      	ldr	r3, [pc, #224]	; (80050b8 <ADC_Enable+0x100>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	f043 0210 	orr.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e05a      	b.n	80050b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff f972 	bl	80042e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005004:	f7fe ffbc 	bl	8003f80 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <ADC_Enable+0x104>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <ADC_Enable+0x66>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <ADC_Enable+0x108>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <ADC_Enable+0x6a>
 800501e:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <ADC_Enable+0x10c>)
 8005020:	e000      	b.n	8005024 <ADC_Enable+0x6c>
 8005022:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <ADC_Enable+0x110>)
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff f903 	bl	8004230 <LL_ADC_GetMultimode>
 800502a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a23      	ldr	r2, [pc, #140]	; (80050c0 <ADC_Enable+0x108>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d002      	beq.n	800503c <ADC_Enable+0x84>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	e000      	b.n	800503e <ADC_Enable+0x86>
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <ADC_Enable+0x104>)
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	4293      	cmp	r3, r2
 8005044:	d02c      	beq.n	80050a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d130      	bne.n	80050ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800504c:	e028      	b.n	80050a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f970 	bl	8004338 <LL_ADC_IsEnabled>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f940 	bl	80042e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005068:	f7fe ff8a 	bl	8003f80 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d914      	bls.n	80050a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d00d      	beq.n	80050a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f043 0210 	orr.w	r2, r3, #16
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	f043 0201 	orr.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e007      	b.n	80050b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d1cf      	bne.n	800504e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	8000003f 	.word	0x8000003f
 80050bc:	40022000 	.word	0x40022000
 80050c0:	40022100 	.word	0x40022100
 80050c4:	40022300 	.word	0x40022300
 80050c8:	58026300 	.word	0x58026300

080050cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff f940 	bl	800435e <LL_ADC_IsDisableOngoing>
 80050de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff f927 	bl	8004338 <LL_ADC_IsEnabled>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d047      	beq.n	8005180 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d144      	bne.n	8005180 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030d 	and.w	r3, r3, #13
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10c      	bne.n	800511e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f901 	bl	8004310 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2203      	movs	r2, #3
 8005114:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005116:	f7fe ff33 	bl	8003f80 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800511c:	e029      	b.n	8005172 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e023      	b.n	8005182 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800513a:	f7fe ff21 	bl	8003f80 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d914      	bls.n	8005172 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f043 0210 	orr.w	r2, r3, #16
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e007      	b.n	8005182 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1dc      	bne.n	800513a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d14b      	bne.n	800523c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d021      	beq.n	8005202 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe ff92 	bl	80040ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d032      	beq.n	8005234 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d12b      	bne.n	8005234 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11f      	bne.n	8005234 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
 8005200:	e018      	b.n	8005234 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff fb45 	bl	80048c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800523a:	e00e      	b.n	800525a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fb4f 	bl	80048ec <HAL_ADC_ErrorCallback>
}
 800524e:	e004      	b.n	800525a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff fb31 	bl	80048d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fb21 	bl	80048ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7a      	ldr	r2, [pc, #488]	; (80054ac <ADC_ConfigureBoostMode+0x1f8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <ADC_ConfigureBoostMode+0x1c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a79      	ldr	r2, [pc, #484]	; (80054b0 <ADC_ConfigureBoostMode+0x1fc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d109      	bne.n	80052e4 <ADC_ConfigureBoostMode+0x30>
 80052d0:	4b78      	ldr	r3, [pc, #480]	; (80054b4 <ADC_ConfigureBoostMode+0x200>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e008      	b.n	80052f6 <ADC_ConfigureBoostMode+0x42>
 80052e4:	4b74      	ldr	r3, [pc, #464]	; (80054b8 <ADC_ConfigureBoostMode+0x204>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01c      	beq.n	8005334 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80052fa:	f005 fd9f 	bl	800ae3c <HAL_RCC_GetHCLKFreq>
 80052fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005308:	d010      	beq.n	800532c <ADC_ConfigureBoostMode+0x78>
 800530a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800530e:	d873      	bhi.n	80053f8 <ADC_ConfigureBoostMode+0x144>
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d002      	beq.n	800531c <ADC_ConfigureBoostMode+0x68>
 8005316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800531a:	d16d      	bne.n	80053f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	0c1b      	lsrs	r3, r3, #16
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	60fb      	str	r3, [r7, #12]
        break;
 800532a:	e068      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	60fb      	str	r3, [r7, #12]
        break;
 8005332:	e064      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005334:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	f007 f826 	bl	800c38c <HAL_RCCEx_GetPeriphCLKFreq>
 8005340:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800534a:	d051      	beq.n	80053f0 <ADC_ConfigureBoostMode+0x13c>
 800534c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005350:	d854      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 8005352:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005356:	d047      	beq.n	80053e8 <ADC_ConfigureBoostMode+0x134>
 8005358:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800535c:	d84e      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 800535e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005362:	d03d      	beq.n	80053e0 <ADC_ConfigureBoostMode+0x12c>
 8005364:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005368:	d848      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 800536a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800536e:	d033      	beq.n	80053d8 <ADC_ConfigureBoostMode+0x124>
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005374:	d842      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 8005376:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800537a:	d029      	beq.n	80053d0 <ADC_ConfigureBoostMode+0x11c>
 800537c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005380:	d83c      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 8005382:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005386:	d01a      	beq.n	80053be <ADC_ConfigureBoostMode+0x10a>
 8005388:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800538c:	d836      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 800538e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005392:	d014      	beq.n	80053be <ADC_ConfigureBoostMode+0x10a>
 8005394:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005398:	d830      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 800539a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800539e:	d00e      	beq.n	80053be <ADC_ConfigureBoostMode+0x10a>
 80053a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a4:	d82a      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 80053a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053aa:	d008      	beq.n	80053be <ADC_ConfigureBoostMode+0x10a>
 80053ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053b0:	d824      	bhi.n	80053fc <ADC_ConfigureBoostMode+0x148>
 80053b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053b6:	d002      	beq.n	80053be <ADC_ConfigureBoostMode+0x10a>
 80053b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053bc:	d11e      	bne.n	80053fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	0c9b      	lsrs	r3, r3, #18
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	60fb      	str	r3, [r7, #12]
        break;
 80053ce:	e016      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	60fb      	str	r3, [r7, #12]
        break;
 80053d6:	e012      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	60fb      	str	r3, [r7, #12]
        break;
 80053de:	e00e      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	60fb      	str	r3, [r7, #12]
        break;
 80053e6:	e00a      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	09db      	lsrs	r3, r3, #7
 80053ec:	60fb      	str	r3, [r7, #12]
        break;
 80053ee:	e006      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	60fb      	str	r3, [r7, #12]
        break;
 80053f6:	e002      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80053f8:	bf00      	nop
 80053fa:	e000      	b.n	80053fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80053fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80053fe:	f7fe fdcb 	bl	8003f98 <HAL_GetREVID>
 8005402:	4603      	mov	r3, r0
 8005404:	f241 0203 	movw	r2, #4099	; 0x1003
 8005408:	4293      	cmp	r3, r2
 800540a:	d815      	bhi.n	8005438 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <ADC_ConfigureBoostMode+0x208>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d908      	bls.n	8005426 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005422:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005424:	e03e      	b.n	80054a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005434:	609a      	str	r2, [r3, #8]
}
 8005436:	e035      	b.n	80054a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <ADC_ConfigureBoostMode+0x20c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d808      	bhi.n	8005458 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005454:	609a      	str	r2, [r3, #8]
}
 8005456:	e025      	b.n	80054a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <ADC_ConfigureBoostMode+0x210>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d80a      	bhi.n	8005476 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	e016      	b.n	80054a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <ADC_ConfigureBoostMode+0x214>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d80a      	bhi.n	8005494 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	609a      	str	r2, [r3, #8]
}
 8005492:	e007      	b.n	80054a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40022000 	.word	0x40022000
 80054b0:	40022100 	.word	0x40022100
 80054b4:	40022300 	.word	0x40022300
 80054b8:	58026300 	.word	0x58026300
 80054bc:	01312d00 	.word	0x01312d00
 80054c0:	005f5e10 	.word	0x005f5e10
 80054c4:	00bebc20 	.word	0x00bebc20
 80054c8:	017d7840 	.word	0x017d7840

080054cc <LL_ADC_IsEnabled>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <LL_ADC_IsEnabled+0x18>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <LL_ADC_IsEnabled+0x1a>
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <LL_ADC_StartCalibration>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <LL_ADC_StartCalibration+0x38>)
 8005506:	4013      	ands	r3, r2
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005514:	430a      	orrs	r2, r1
 8005516:	4313      	orrs	r3, r2
 8005518:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	3ffeffc0 	.word	0x3ffeffc0

08005530 <LL_ADC_IsCalibrationOnGoing>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005544:	d101      	bne.n	800554a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_ADC_REG_IsConversionOngoing>:
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d101      	bne.n	8005570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_ADCEx_Calibration_Start+0x1e>
 800559a:	2302      	movs	r3, #2
 800559c:	e04c      	b.n	8005638 <HAL_ADCEx_Calibration_Start+0xb8>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff fd90 	bl	80050cc <ADC_Disable>
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d135      	bne.n	8005622 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <HAL_ADCEx_Calibration_Start+0xc0>)
 80055bc:	4013      	ands	r3, r2
 80055be:	f043 0202 	orr.w	r2, r3, #2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ff90 	bl	80054f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80055d4:	e014      	b.n	8005600 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4a19      	ldr	r2, [pc, #100]	; (8005644 <HAL_ADCEx_Calibration_Start+0xc4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d30d      	bcc.n	8005600 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e8:	f023 0312 	bic.w	r3, r3, #18
 80055ec:	f043 0210 	orr.w	r2, r3, #16
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e01b      	b.n	8005638 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff93 	bl	8005530 <LL_ADC_IsCalibrationOnGoing>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e2      	bne.n	80055d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f023 0303 	bic.w	r3, r3, #3
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
 8005620:	e005      	b.n	800562e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005636:	7dfb      	ldrb	r3, [r7, #23]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	ffffeefd 	.word	0xffffeefd
 8005644:	25c3f800 	.word	0x25c3f800

08005648 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b09f      	sub	sp, #124	; 0x7c
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005662:	2302      	movs	r3, #2
 8005664:	e0be      	b.n	80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800566e:	2300      	movs	r3, #0
 8005670:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005672:	2300      	movs	r3, #0
 8005674:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a5c      	ldr	r2, [pc, #368]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d102      	bne.n	8005686 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005680:	4b5b      	ldr	r3, [pc, #364]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	e001      	b.n	800568a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e09d      	b.n	80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff ff54 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 80056b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff ff4e 	bl	8005558 <LL_ADC_REG_IsConversionOngoing>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d17f      	bne.n	80057c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80056c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d17c      	bne.n	80057c2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a47      	ldr	r2, [pc, #284]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a46      	ldr	r2, [pc, #280]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80056de:	e000      	b.n	80056e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80056e0:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80056e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d039      	beq.n	8005760 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3a      	ldr	r2, [pc, #232]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a38      	ldr	r2, [pc, #224]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10e      	bne.n	8005730 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005712:	4836      	ldr	r0, [pc, #216]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005714:	f7ff feda 	bl	80054cc <LL_ADC_IsEnabled>
 8005718:	4604      	mov	r4, r0
 800571a:	4835      	ldr	r0, [pc, #212]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800571c:	f7ff fed6 	bl	80054cc <LL_ADC_IsEnabled>
 8005720:	4603      	mov	r3, r0
 8005722:	4323      	orrs	r3, r4
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e008      	b.n	8005742 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005730:	4832      	ldr	r0, [pc, #200]	; (80057fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005732:	f7ff fecb 	bl	80054cc <LL_ADC_IsEnabled>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d047      	beq.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800574c:	4013      	ands	r3, r2
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	6811      	ldr	r1, [r2, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	430a      	orrs	r2, r1
 8005758:	431a      	orrs	r2, r3
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800575e:	e03a      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10e      	bne.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005780:	481a      	ldr	r0, [pc, #104]	; (80057ec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005782:	f7ff fea3 	bl	80054cc <LL_ADC_IsEnabled>
 8005786:	4604      	mov	r4, r0
 8005788:	4819      	ldr	r0, [pc, #100]	; (80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800578a:	f7ff fe9f 	bl	80054cc <LL_ADC_IsEnabled>
 800578e:	4603      	mov	r3, r0
 8005790:	4323      	orrs	r3, r4
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e008      	b.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800579e:	4817      	ldr	r0, [pc, #92]	; (80057fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80057a0:	f7ff fe94 	bl	80054cc <LL_ADC_IsEnabled>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bf0c      	ite	eq
 80057aa:	2301      	moveq	r3, #1
 80057ac:	2300      	movne	r3, #0
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d010      	beq.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057be:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c0:	e009      	b.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80057d4:	e000      	b.n	80057d8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057d6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057e0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	377c      	adds	r7, #124	; 0x7c
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd90      	pop	{r4, r7, pc}
 80057ec:	40022000 	.word	0x40022000
 80057f0:	40022100 	.word	0x40022100
 80057f4:	40022300 	.word	0x40022300
 80057f8:	58026300 	.word	0x58026300
 80057fc:	58026000 	.word	0x58026000
 8005800:	fffff0e0 	.word	0xfffff0e0

08005804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <__NVIC_SetPriorityGrouping+0x40>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005820:	4013      	ands	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <__NVIC_SetPriorityGrouping+0x44>)
 800582e:	4313      	orrs	r3, r2
 8005830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005832:	4a04      	ldr	r2, [pc, #16]	; (8005844 <__NVIC_SetPriorityGrouping+0x40>)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	60d3      	str	r3, [r2, #12]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	e000ed00 	.word	0xe000ed00
 8005848:	05fa0000 	.word	0x05fa0000

0800584c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <__NVIC_GetPriorityGrouping+0x18>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	0a1b      	lsrs	r3, r3, #8
 8005856:	f003 0307 	and.w	r3, r3, #7
}
 800585a:	4618      	mov	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005876:	2b00      	cmp	r3, #0
 8005878:	db0b      	blt.n	8005892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	f003 021f 	and.w	r2, r3, #31
 8005880:	4907      	ldr	r1, [pc, #28]	; (80058a0 <__NVIC_EnableIRQ+0x38>)
 8005882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2001      	movs	r0, #1
 800588a:	fa00 f202 	lsl.w	r2, r0, r2
 800588e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000e100 	.word	0xe000e100

080058a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	6039      	str	r1, [r7, #0]
 80058ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	db0a      	blt.n	80058ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	490c      	ldr	r1, [pc, #48]	; (80058f0 <__NVIC_SetPriority+0x4c>)
 80058be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c2:	0112      	lsls	r2, r2, #4
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	440b      	add	r3, r1
 80058c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058cc:	e00a      	b.n	80058e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	4908      	ldr	r1, [pc, #32]	; (80058f4 <__NVIC_SetPriority+0x50>)
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	3b04      	subs	r3, #4
 80058dc:	0112      	lsls	r2, r2, #4
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	440b      	add	r3, r1
 80058e2:	761a      	strb	r2, [r3, #24]
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	e000e100 	.word	0xe000e100
 80058f4:	e000ed00 	.word	0xe000ed00

080058f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f1c3 0307 	rsb	r3, r3, #7
 8005912:	2b04      	cmp	r3, #4
 8005914:	bf28      	it	cs
 8005916:	2304      	movcs	r3, #4
 8005918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3304      	adds	r3, #4
 800591e:	2b06      	cmp	r3, #6
 8005920:	d902      	bls.n	8005928 <NVIC_EncodePriority+0x30>
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3b03      	subs	r3, #3
 8005926:	e000      	b.n	800592a <NVIC_EncodePriority+0x32>
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800592c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43da      	mvns	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	401a      	ands	r2, r3
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	43d9      	mvns	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005950:	4313      	orrs	r3, r2
         );
}
 8005952:	4618      	mov	r0, r3
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff ff4c 	bl	8005804 <__NVIC_SetPriorityGrouping>
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005982:	f7ff ff63 	bl	800584c <__NVIC_GetPriorityGrouping>
 8005986:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	6978      	ldr	r0, [r7, #20]
 800598e:	f7ff ffb3 	bl	80058f8 <NVIC_EncodePriority>
 8005992:	4602      	mov	r2, r0
 8005994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff ff82 	bl	80058a4 <__NVIC_SetPriority>
}
 80059a0:	bf00      	nop
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff ff56 	bl	8005868 <__NVIC_EnableIRQ>
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e014      	b.n	8005a00 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd fc76 	bl	80032d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e046      	b.n	8005aaa <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	795b      	ldrb	r3, [r3, #5]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_DAC_Start+0x20>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e040      	b.n	8005aaa <HAL_DAC_Start+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10f      	bne.n	8005a72 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d11d      	bne.n	8005a9c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	605a      	str	r2, [r3, #4]
 8005a70:	e014      	b.n	8005a9c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2102      	movs	r1, #2
 8005a84:	fa01 f303 	lsl.w	r3, r1, r3
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d107      	bne.n	8005a9c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0202 	orr.w	r2, r2, #2
 8005a9a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0a2      	b.n	8005c16 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	795b      	ldrb	r3, [r3, #5]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_DAC_Start_DMA+0x24>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e09c      	b.n	8005c16 <HAL_DAC_Start_DMA+0x15e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d129      	bne.n	8005b42 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4a4b      	ldr	r2, [pc, #300]	; (8005c20 <HAL_DAC_Start_DMA+0x168>)
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_DAC_Start_DMA+0x16c>)
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	4a49      	ldr	r2, [pc, #292]	; (8005c28 <HAL_DAC_Start_DMA+0x170>)
 8005b04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b14:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_DAC_Start_DMA+0x6c>
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d005      	beq.n	8005b2e <HAL_DAC_Start_DMA+0x76>
 8005b22:	e009      	b.n	8005b38 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	613b      	str	r3, [r7, #16]
        break;
 8005b2c:	e033      	b.n	8005b96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	613b      	str	r3, [r7, #16]
        break;
 8005b36:	e02e      	b.n	8005b96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3310      	adds	r3, #16
 8005b3e:	613b      	str	r3, [r7, #16]
        break;
 8005b40:	e029      	b.n	8005b96 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4a39      	ldr	r2, [pc, #228]	; (8005c2c <HAL_DAC_Start_DMA+0x174>)
 8005b48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4a38      	ldr	r2, [pc, #224]	; (8005c30 <HAL_DAC_Start_DMA+0x178>)
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4a37      	ldr	r2, [pc, #220]	; (8005c34 <HAL_DAC_Start_DMA+0x17c>)
 8005b58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_DAC_Start_DMA+0xc0>
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d005      	beq.n	8005b82 <HAL_DAC_Start_DMA+0xca>
 8005b76:	e009      	b.n	8005b8c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	613b      	str	r3, [r7, #16]
        break;
 8005b80:	e009      	b.n	8005b96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3318      	adds	r3, #24
 8005b88:	613b      	str	r3, [r7, #16]
        break;
 8005b8a:	e004      	b.n	8005b96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	331c      	adds	r3, #28
 8005b92:	613b      	str	r3, [r7, #16]
        break;
 8005b94:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d111      	bne.n	8005bc0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005baa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6898      	ldr	r0, [r3, #8]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	f000 fe67 	bl	8006888 <HAL_DMA_Start_IT>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75fb      	strb	r3, [r7, #23]
 8005bbe:	e010      	b.n	8005be2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005bce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68d8      	ldr	r0, [r3, #12]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	f000 fe55 	bl	8006888 <HAL_DMA_Start_IT>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10c      	bne.n	8005c08 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e005      	b.n	8005c14 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	080060a9 	.word	0x080060a9
 8005c24:	080060cb 	.word	0x080060cb
 8005c28:	080060e7 	.word	0x080060e7
 8005c2c:	08006165 	.word	0x08006165
 8005c30:	08006187 	.word	0x08006187
 8005c34:	080061a3 	.word	0x080061a3

08005c38 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e03e      	b.n	8005cca <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43da      	mvns	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	400a      	ands	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2201      	movs	r2, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43da      	mvns	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	400a      	ands	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10d      	bne.n	8005ca8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f863 	bl	8006d5c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e00c      	b.n	8005cc2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 f855 	bl	8006d5c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005cc0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01d      	beq.n	8005d30 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f043 0201 	orr.w	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f86f 	bl	8005e0e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01d      	beq.n	8005d76 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d018      	beq.n	8005d76 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2204      	movs	r2, #4
 8005d48:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f043 0202 	orr.w	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d6e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f9ed 	bl	8006150 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b087      	sub	sp, #28
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e015      	b.n	8005dc6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d105      	bne.n	8005db2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	3308      	adds	r3, #8
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e004      	b.n	8005dbc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4413      	add	r3, r2
 8005db8:	3314      	adds	r3, #20
 8005dba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_DAC_ConfigChannel+0x1e>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e12a      	b.n	800609c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	795b      	ldrb	r3, [r3, #5]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_DAC_ConfigChannel+0x2e>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e124      	b.n	800609c <HAL_DAC_ConfigChannel+0x278>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d17a      	bne.n	8005f5c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005e66:	f7fe f88b 	bl	8003f80 <HAL_GetTick>
 8005e6a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13d      	bne.n	8005eee <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e72:	e018      	b.n	8005ea6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e74:	f7fe f884 	bl	8003f80 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d911      	bls.n	8005ea6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e88:	4b86      	ldr	r3, [pc, #536]	; (80060a4 <HAL_DAC_ConfigChannel+0x280>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f043 0208 	orr.w	r2, r3, #8
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0fa      	b.n	800609c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eac:	4b7d      	ldr	r3, [pc, #500]	; (80060a4 <HAL_DAC_ConfigChannel+0x280>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1df      	bne.n	8005e74 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	6992      	ldr	r2, [r2, #24]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8005ebe:	e020      	b.n	8005f02 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ec0:	f7fe f85e 	bl	8003f80 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d90f      	bls.n	8005eee <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	da0a      	bge.n	8005eee <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f043 0208 	orr.w	r2, r3, #8
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e0d6      	b.n	800609c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dbe3      	blt.n	8005ec0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	6992      	ldr	r2, [r2, #24]
 8005f00:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005f12:	fa01 f303 	lsl.w	r3, r1, r3
 8005f16:	43db      	mvns	r3, r3
 8005f18:	ea02 0103 	and.w	r1, r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	409a      	lsls	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	21ff      	movs	r1, #255	; 0xff
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	ea02 0103 	and.w	r1, r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	409a      	lsls	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d11d      	bne.n	8005fa0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	221f      	movs	r2, #31
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2207      	movs	r2, #7
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc8:	e00f      	b.n	8005fea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d102      	bne.n	8005fd8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd6:	e008      	b.n	8005fea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe4:	e001      	b.n	8005fea <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	43da      	mvns	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	400a      	ands	r2, r1
 8006030:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4313      	orrs	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6819      	ldr	r1, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	22c0      	movs	r2, #192	; 0xc0
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43da      	mvns	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	400a      	ands	r2, r1
 800608a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800609c:	4618      	mov	r0, r3
 800609e:	3728      	adds	r7, #40	; 0x28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20008000 	.word	0x20008000

080060a8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fe8b 	bl	8005dd2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	711a      	strb	r2, [r3, #4]
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fe84 	bl	8005de6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f043 0204 	orr.w	r2, r3, #4
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff fe7a 	bl	8005dfa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	711a      	strb	r2, [r3, #4]
}
 800610c:	bf00      	nop
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff ffce 	bl	8006114 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	711a      	strb	r2, [r3, #4]
}
 800617e:	bf00      	nop
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ffc7 	bl	8006128 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f043 0204 	orr.w	r2, r3, #4
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff ffbd 	bl	800613c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	711a      	strb	r2, [r3, #4]
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80061d8:	f7fd fed2 	bl	8003f80 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e316      	b.n	8006816 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a66      	ldr	r2, [pc, #408]	; (8006388 <HAL_DMA_Init+0x1b8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d04a      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a65      	ldr	r2, [pc, #404]	; (800638c <HAL_DMA_Init+0x1bc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d045      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a63      	ldr	r2, [pc, #396]	; (8006390 <HAL_DMA_Init+0x1c0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d040      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a62      	ldr	r2, [pc, #392]	; (8006394 <HAL_DMA_Init+0x1c4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d03b      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a60      	ldr	r2, [pc, #384]	; (8006398 <HAL_DMA_Init+0x1c8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d036      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a5f      	ldr	r2, [pc, #380]	; (800639c <HAL_DMA_Init+0x1cc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d031      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5d      	ldr	r2, [pc, #372]	; (80063a0 <HAL_DMA_Init+0x1d0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d02c      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a5c      	ldr	r2, [pc, #368]	; (80063a4 <HAL_DMA_Init+0x1d4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d027      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a5a      	ldr	r2, [pc, #360]	; (80063a8 <HAL_DMA_Init+0x1d8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d022      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a59      	ldr	r2, [pc, #356]	; (80063ac <HAL_DMA_Init+0x1dc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d01d      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a57      	ldr	r2, [pc, #348]	; (80063b0 <HAL_DMA_Init+0x1e0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d018      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a56      	ldr	r2, [pc, #344]	; (80063b4 <HAL_DMA_Init+0x1e4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a54      	ldr	r2, [pc, #336]	; (80063b8 <HAL_DMA_Init+0x1e8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00e      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a53      	ldr	r2, [pc, #332]	; (80063bc <HAL_DMA_Init+0x1ec>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d009      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a51      	ldr	r2, [pc, #324]	; (80063c0 <HAL_DMA_Init+0x1f0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_DMA_Init+0xb8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a50      	ldr	r2, [pc, #320]	; (80063c4 <HAL_DMA_Init+0x1f4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_DMA_Init+0xbc>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_DMA_Init+0xbe>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 813b 	beq.w	800650a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a37      	ldr	r2, [pc, #220]	; (8006388 <HAL_DMA_Init+0x1b8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d04a      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a36      	ldr	r2, [pc, #216]	; (800638c <HAL_DMA_Init+0x1bc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d045      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a34      	ldr	r2, [pc, #208]	; (8006390 <HAL_DMA_Init+0x1c0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d040      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a33      	ldr	r2, [pc, #204]	; (8006394 <HAL_DMA_Init+0x1c4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d03b      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a31      	ldr	r2, [pc, #196]	; (8006398 <HAL_DMA_Init+0x1c8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d036      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a30      	ldr	r2, [pc, #192]	; (800639c <HAL_DMA_Init+0x1cc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d031      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_DMA_Init+0x1d0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d02c      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_DMA_Init+0x1d4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d027      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_DMA_Init+0x1d8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d022      	beq.n	8006344 <HAL_DMA_Init+0x174>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <HAL_DMA_Init+0x1dc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d01d      	beq.n	8006344 <HAL_DMA_Init+0x174>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_Init+0x1e0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d018      	beq.n	8006344 <HAL_DMA_Init+0x174>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_DMA_Init+0x1e4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d013      	beq.n	8006344 <HAL_DMA_Init+0x174>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_Init+0x1e8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00e      	beq.n	8006344 <HAL_DMA_Init+0x174>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a24      	ldr	r2, [pc, #144]	; (80063bc <HAL_DMA_Init+0x1ec>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d009      	beq.n	8006344 <HAL_DMA_Init+0x174>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_Init+0x1f0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d004      	beq.n	8006344 <HAL_DMA_Init+0x174>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_DMA_Init+0x1f4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d108      	bne.n	8006356 <HAL_DMA_Init+0x186>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e007      	b.n	8006366 <HAL_DMA_Init+0x196>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006366:	e02f      	b.n	80063c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006368:	f7fd fe0a 	bl	8003f80 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b05      	cmp	r3, #5
 8006374:	d928      	bls.n	80063c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2203      	movs	r2, #3
 8006380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e246      	b.n	8006816 <HAL_DMA_Init+0x646>
 8006388:	40020010 	.word	0x40020010
 800638c:	40020028 	.word	0x40020028
 8006390:	40020040 	.word	0x40020040
 8006394:	40020058 	.word	0x40020058
 8006398:	40020070 	.word	0x40020070
 800639c:	40020088 	.word	0x40020088
 80063a0:	400200a0 	.word	0x400200a0
 80063a4:	400200b8 	.word	0x400200b8
 80063a8:	40020410 	.word	0x40020410
 80063ac:	40020428 	.word	0x40020428
 80063b0:	40020440 	.word	0x40020440
 80063b4:	40020458 	.word	0x40020458
 80063b8:	40020470 	.word	0x40020470
 80063bc:	40020488 	.word	0x40020488
 80063c0:	400204a0 	.word	0x400204a0
 80063c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1c8      	bne.n	8006368 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4b83      	ldr	r3, [pc, #524]	; (80065f0 <HAL_DMA_Init+0x420>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006406:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	2b04      	cmp	r3, #4
 800641a:	d107      	bne.n	800642c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	4313      	orrs	r3, r2
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800642c:	4b71      	ldr	r3, [pc, #452]	; (80065f4 <HAL_DMA_Init+0x424>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4b71      	ldr	r3, [pc, #452]	; (80065f8 <HAL_DMA_Init+0x428>)
 8006432:	4013      	ands	r3, r2
 8006434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006438:	d328      	bcc.n	800648c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b28      	cmp	r3, #40	; 0x28
 8006440:	d903      	bls.n	800644a <HAL_DMA_Init+0x27a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b2e      	cmp	r3, #46	; 0x2e
 8006448:	d917      	bls.n	800647a <HAL_DMA_Init+0x2aa>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b3e      	cmp	r3, #62	; 0x3e
 8006450:	d903      	bls.n	800645a <HAL_DMA_Init+0x28a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b42      	cmp	r3, #66	; 0x42
 8006458:	d90f      	bls.n	800647a <HAL_DMA_Init+0x2aa>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b46      	cmp	r3, #70	; 0x46
 8006460:	d903      	bls.n	800646a <HAL_DMA_Init+0x29a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b48      	cmp	r3, #72	; 0x48
 8006468:	d907      	bls.n	800647a <HAL_DMA_Init+0x2aa>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b4e      	cmp	r3, #78	; 0x4e
 8006470:	d905      	bls.n	800647e <HAL_DMA_Init+0x2ae>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b52      	cmp	r3, #82	; 0x52
 8006478:	d801      	bhi.n	800647e <HAL_DMA_Init+0x2ae>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_DMA_Init+0x2b0>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800648a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d117      	bne.n	80064e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00e      	beq.n	80064e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f002 fb3f 	bl	8008b4c <DMA_CheckFifoParam>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e197      	b.n	8006816 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f002 fa7a 	bl	80089e8 <DMA_CalcBaseAndBitshift>
 80064f4:	4603      	mov	r3, r0
 80064f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	223f      	movs	r2, #63	; 0x3f
 8006502:	409a      	lsls	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	609a      	str	r2, [r3, #8]
 8006508:	e0cd      	b.n	80066a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a3b      	ldr	r2, [pc, #236]	; (80065fc <HAL_DMA_Init+0x42c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_DMA_Init+0x38a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a39      	ldr	r2, [pc, #228]	; (8006600 <HAL_DMA_Init+0x430>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01d      	beq.n	800655a <HAL_DMA_Init+0x38a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a38      	ldr	r2, [pc, #224]	; (8006604 <HAL_DMA_Init+0x434>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_DMA_Init+0x38a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a36      	ldr	r2, [pc, #216]	; (8006608 <HAL_DMA_Init+0x438>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_DMA_Init+0x38a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a35      	ldr	r2, [pc, #212]	; (800660c <HAL_DMA_Init+0x43c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_DMA_Init+0x38a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a33      	ldr	r2, [pc, #204]	; (8006610 <HAL_DMA_Init+0x440>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_DMA_Init+0x38a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a32      	ldr	r2, [pc, #200]	; (8006614 <HAL_DMA_Init+0x444>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_DMA_Init+0x38a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a30      	ldr	r2, [pc, #192]	; (8006618 <HAL_DMA_Init+0x448>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <HAL_DMA_Init+0x38e>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_DMA_Init+0x390>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8097 	beq.w	8006694 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a24      	ldr	r2, [pc, #144]	; (80065fc <HAL_DMA_Init+0x42c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d021      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_DMA_Init+0x430>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01c      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a21      	ldr	r2, [pc, #132]	; (8006604 <HAL_DMA_Init+0x434>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d017      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <HAL_DMA_Init+0x438>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d012      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <HAL_DMA_Init+0x43c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00d      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_DMA_Init+0x440>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d008      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1b      	ldr	r2, [pc, #108]	; (8006614 <HAL_DMA_Init+0x444>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <HAL_DMA_Init+0x3e4>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a19      	ldr	r2, [pc, #100]	; (8006618 <HAL_DMA_Init+0x448>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_DMA_Init+0x44c>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d020      	beq.n	8006620 <HAL_DMA_Init+0x450>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d102      	bne.n	80065ec <HAL_DMA_Init+0x41c>
 80065e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065ea:	e01a      	b.n	8006622 <HAL_DMA_Init+0x452>
 80065ec:	2300      	movs	r3, #0
 80065ee:	e018      	b.n	8006622 <HAL_DMA_Init+0x452>
 80065f0:	fe10803f 	.word	0xfe10803f
 80065f4:	5c001000 	.word	0x5c001000
 80065f8:	ffff0000 	.word	0xffff0000
 80065fc:	58025408 	.word	0x58025408
 8006600:	5802541c 	.word	0x5802541c
 8006604:	58025430 	.word	0x58025430
 8006608:	58025444 	.word	0x58025444
 800660c:	58025458 	.word	0x58025458
 8006610:	5802546c 	.word	0x5802546c
 8006614:	58025480 	.word	0x58025480
 8006618:	58025494 	.word	0x58025494
 800661c:	fffe000f 	.word	0xfffe000f
 8006620:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68d2      	ldr	r2, [r2, #12]
 8006626:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006650:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	4b6e      	ldr	r3, [pc, #440]	; (8006820 <HAL_DMA_Init+0x650>)
 8006668:	4413      	add	r3, r2
 800666a:	4a6e      	ldr	r2, [pc, #440]	; (8006824 <HAL_DMA_Init+0x654>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	009a      	lsls	r2, r3, #2
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f002 f9b5 	bl	80089e8 <DMA_CalcBaseAndBitshift>
 800667e:	4603      	mov	r3, r0
 8006680:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2201      	movs	r2, #1
 800668c:	409a      	lsls	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	e008      	b.n	80066a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2240      	movs	r2, #64	; 0x40
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2203      	movs	r2, #3
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0b7      	b.n	8006816 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a5f      	ldr	r2, [pc, #380]	; (8006828 <HAL_DMA_Init+0x658>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d072      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a5d      	ldr	r2, [pc, #372]	; (800682c <HAL_DMA_Init+0x65c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d06d      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a5c      	ldr	r2, [pc, #368]	; (8006830 <HAL_DMA_Init+0x660>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d068      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5a      	ldr	r2, [pc, #360]	; (8006834 <HAL_DMA_Init+0x664>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d063      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a59      	ldr	r2, [pc, #356]	; (8006838 <HAL_DMA_Init+0x668>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d05e      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a57      	ldr	r2, [pc, #348]	; (800683c <HAL_DMA_Init+0x66c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d059      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a56      	ldr	r2, [pc, #344]	; (8006840 <HAL_DMA_Init+0x670>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d054      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a54      	ldr	r2, [pc, #336]	; (8006844 <HAL_DMA_Init+0x674>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d04f      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a53      	ldr	r2, [pc, #332]	; (8006848 <HAL_DMA_Init+0x678>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d04a      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a51      	ldr	r2, [pc, #324]	; (800684c <HAL_DMA_Init+0x67c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d045      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a50      	ldr	r2, [pc, #320]	; (8006850 <HAL_DMA_Init+0x680>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d040      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a4e      	ldr	r2, [pc, #312]	; (8006854 <HAL_DMA_Init+0x684>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a4d      	ldr	r2, [pc, #308]	; (8006858 <HAL_DMA_Init+0x688>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d036      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a4b      	ldr	r2, [pc, #300]	; (800685c <HAL_DMA_Init+0x68c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d031      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a4a      	ldr	r2, [pc, #296]	; (8006860 <HAL_DMA_Init+0x690>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d02c      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a48      	ldr	r2, [pc, #288]	; (8006864 <HAL_DMA_Init+0x694>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d027      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a47      	ldr	r2, [pc, #284]	; (8006868 <HAL_DMA_Init+0x698>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a45      	ldr	r2, [pc, #276]	; (800686c <HAL_DMA_Init+0x69c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a44      	ldr	r2, [pc, #272]	; (8006870 <HAL_DMA_Init+0x6a0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a42      	ldr	r2, [pc, #264]	; (8006874 <HAL_DMA_Init+0x6a4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a41      	ldr	r2, [pc, #260]	; (8006878 <HAL_DMA_Init+0x6a8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a3f      	ldr	r2, [pc, #252]	; (800687c <HAL_DMA_Init+0x6ac>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a3e      	ldr	r2, [pc, #248]	; (8006880 <HAL_DMA_Init+0x6b0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_Init+0x5c6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a3c      	ldr	r2, [pc, #240]	; (8006884 <HAL_DMA_Init+0x6b4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_DMA_Init+0x5ca>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_DMA_Init+0x5cc>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d032      	beq.n	8006806 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f002 fa4f 	bl	8008c44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b80      	cmp	r3, #128	; 0x80
 80067ac:	d102      	bne.n	80067b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d010      	beq.n	80067f4 <HAL_DMA_Init+0x624>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d80c      	bhi.n	80067f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f002 facc 	bl	8008d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	e008      	b.n	8006806 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	a7fdabf8 	.word	0xa7fdabf8
 8006824:	cccccccd 	.word	0xcccccccd
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
 8006868:	58025408 	.word	0x58025408
 800686c:	5802541c 	.word	0x5802541c
 8006870:	58025430 	.word	0x58025430
 8006874:	58025444 	.word	0x58025444
 8006878:	58025458 	.word	0x58025458
 800687c:	5802546c 	.word	0x5802546c
 8006880:	58025480 	.word	0x58025480
 8006884:	58025494 	.word	0x58025494

08006888 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e226      	b.n	8006cf2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_DMA_Start_IT+0x2a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e21f      	b.n	8006cf2 <HAL_DMA_Start_IT+0x46a>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	f040 820a 	bne.w	8006cdc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a68      	ldr	r2, [pc, #416]	; (8006a7c <HAL_DMA_Start_IT+0x1f4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d04a      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a66      	ldr	r2, [pc, #408]	; (8006a80 <HAL_DMA_Start_IT+0x1f8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d045      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a65      	ldr	r2, [pc, #404]	; (8006a84 <HAL_DMA_Start_IT+0x1fc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d040      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a63      	ldr	r2, [pc, #396]	; (8006a88 <HAL_DMA_Start_IT+0x200>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d03b      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a62      	ldr	r2, [pc, #392]	; (8006a8c <HAL_DMA_Start_IT+0x204>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d036      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a60      	ldr	r2, [pc, #384]	; (8006a90 <HAL_DMA_Start_IT+0x208>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d031      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a5f      	ldr	r2, [pc, #380]	; (8006a94 <HAL_DMA_Start_IT+0x20c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d02c      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a5d      	ldr	r2, [pc, #372]	; (8006a98 <HAL_DMA_Start_IT+0x210>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d027      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a5c      	ldr	r2, [pc, #368]	; (8006a9c <HAL_DMA_Start_IT+0x214>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a5a      	ldr	r2, [pc, #360]	; (8006aa0 <HAL_DMA_Start_IT+0x218>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a59      	ldr	r2, [pc, #356]	; (8006aa4 <HAL_DMA_Start_IT+0x21c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a57      	ldr	r2, [pc, #348]	; (8006aa8 <HAL_DMA_Start_IT+0x220>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a56      	ldr	r2, [pc, #344]	; (8006aac <HAL_DMA_Start_IT+0x224>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a54      	ldr	r2, [pc, #336]	; (8006ab0 <HAL_DMA_Start_IT+0x228>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a53      	ldr	r2, [pc, #332]	; (8006ab4 <HAL_DMA_Start_IT+0x22c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a51      	ldr	r2, [pc, #324]	; (8006ab8 <HAL_DMA_Start_IT+0x230>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d108      	bne.n	8006988 <HAL_DMA_Start_IT+0x100>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e007      	b.n	8006998 <HAL_DMA_Start_IT+0x110>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f001 fe76 	bl	8008690 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <HAL_DMA_Start_IT+0x1f4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d04a      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a33      	ldr	r2, [pc, #204]	; (8006a80 <HAL_DMA_Start_IT+0x1f8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d045      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <HAL_DMA_Start_IT+0x1fc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d040      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a30      	ldr	r2, [pc, #192]	; (8006a88 <HAL_DMA_Start_IT+0x200>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d03b      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2e      	ldr	r2, [pc, #184]	; (8006a8c <HAL_DMA_Start_IT+0x204>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d036      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a2d      	ldr	r2, [pc, #180]	; (8006a90 <HAL_DMA_Start_IT+0x208>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d031      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a2b      	ldr	r2, [pc, #172]	; (8006a94 <HAL_DMA_Start_IT+0x20c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d02c      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2a      	ldr	r2, [pc, #168]	; (8006a98 <HAL_DMA_Start_IT+0x210>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d027      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <HAL_DMA_Start_IT+0x214>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <HAL_DMA_Start_IT+0x218>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d01d      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <HAL_DMA_Start_IT+0x21c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <HAL_DMA_Start_IT+0x220>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <HAL_DMA_Start_IT+0x224>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <HAL_DMA_Start_IT+0x228>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <HAL_DMA_Start_IT+0x22c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <HAL_DMA_Start_IT+0x230>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_DMA_Start_IT+0x1c0>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_DMA_Start_IT+0x1c2>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d036      	beq.n	8006abc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f023 021e 	bic.w	r2, r3, #30
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0216 	orr.w	r2, r2, #22
 8006a60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d03e      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e035      	b.n	8006ae8 <HAL_DMA_Start_IT+0x260>
 8006a7c:	40020010 	.word	0x40020010
 8006a80:	40020028 	.word	0x40020028
 8006a84:	40020040 	.word	0x40020040
 8006a88:	40020058 	.word	0x40020058
 8006a8c:	40020070 	.word	0x40020070
 8006a90:	40020088 	.word	0x40020088
 8006a94:	400200a0 	.word	0x400200a0
 8006a98:	400200b8 	.word	0x400200b8
 8006a9c:	40020410 	.word	0x40020410
 8006aa0:	40020428 	.word	0x40020428
 8006aa4:	40020440 	.word	0x40020440
 8006aa8:	40020458 	.word	0x40020458
 8006aac:	40020470 	.word	0x40020470
 8006ab0:	40020488 	.word	0x40020488
 8006ab4:	400204a0 	.word	0x400204a0
 8006ab8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 020e 	bic.w	r2, r3, #14
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 020a 	orr.w	r2, r2, #10
 8006ace:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0204 	orr.w	r2, r2, #4
 8006ae6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a83      	ldr	r2, [pc, #524]	; (8006cfc <HAL_DMA_Start_IT+0x474>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d072      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a82      	ldr	r2, [pc, #520]	; (8006d00 <HAL_DMA_Start_IT+0x478>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d06d      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a80      	ldr	r2, [pc, #512]	; (8006d04 <HAL_DMA_Start_IT+0x47c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d068      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a7f      	ldr	r2, [pc, #508]	; (8006d08 <HAL_DMA_Start_IT+0x480>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d063      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a7d      	ldr	r2, [pc, #500]	; (8006d0c <HAL_DMA_Start_IT+0x484>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d05e      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a7c      	ldr	r2, [pc, #496]	; (8006d10 <HAL_DMA_Start_IT+0x488>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d059      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a7a      	ldr	r2, [pc, #488]	; (8006d14 <HAL_DMA_Start_IT+0x48c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d054      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a79      	ldr	r2, [pc, #484]	; (8006d18 <HAL_DMA_Start_IT+0x490>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04f      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a77      	ldr	r2, [pc, #476]	; (8006d1c <HAL_DMA_Start_IT+0x494>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d04a      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a76      	ldr	r2, [pc, #472]	; (8006d20 <HAL_DMA_Start_IT+0x498>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d045      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a74      	ldr	r2, [pc, #464]	; (8006d24 <HAL_DMA_Start_IT+0x49c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d040      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a73      	ldr	r2, [pc, #460]	; (8006d28 <HAL_DMA_Start_IT+0x4a0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d03b      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a71      	ldr	r2, [pc, #452]	; (8006d2c <HAL_DMA_Start_IT+0x4a4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d036      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a70      	ldr	r2, [pc, #448]	; (8006d30 <HAL_DMA_Start_IT+0x4a8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d031      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6e      	ldr	r2, [pc, #440]	; (8006d34 <HAL_DMA_Start_IT+0x4ac>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d02c      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a6d      	ldr	r2, [pc, #436]	; (8006d38 <HAL_DMA_Start_IT+0x4b0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d027      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a6b      	ldr	r2, [pc, #428]	; (8006d3c <HAL_DMA_Start_IT+0x4b4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d022      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a6a      	ldr	r2, [pc, #424]	; (8006d40 <HAL_DMA_Start_IT+0x4b8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01d      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a68      	ldr	r2, [pc, #416]	; (8006d44 <HAL_DMA_Start_IT+0x4bc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d018      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a67      	ldr	r2, [pc, #412]	; (8006d48 <HAL_DMA_Start_IT+0x4c0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a65      	ldr	r2, [pc, #404]	; (8006d4c <HAL_DMA_Start_IT+0x4c4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00e      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a64      	ldr	r2, [pc, #400]	; (8006d50 <HAL_DMA_Start_IT+0x4c8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a62      	ldr	r2, [pc, #392]	; (8006d54 <HAL_DMA_Start_IT+0x4cc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a61      	ldr	r2, [pc, #388]	; (8006d58 <HAL_DMA_Start_IT+0x4d0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d101      	bne.n	8006bdc <HAL_DMA_Start_IT+0x354>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <HAL_DMA_Start_IT+0x356>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01a      	beq.n	8006c18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a37      	ldr	r2, [pc, #220]	; (8006cfc <HAL_DMA_Start_IT+0x474>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d04a      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a36      	ldr	r2, [pc, #216]	; (8006d00 <HAL_DMA_Start_IT+0x478>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d045      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a34      	ldr	r2, [pc, #208]	; (8006d04 <HAL_DMA_Start_IT+0x47c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d040      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	; (8006d08 <HAL_DMA_Start_IT+0x480>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d03b      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a31      	ldr	r2, [pc, #196]	; (8006d0c <HAL_DMA_Start_IT+0x484>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d036      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a30      	ldr	r2, [pc, #192]	; (8006d10 <HAL_DMA_Start_IT+0x488>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d031      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2e      	ldr	r2, [pc, #184]	; (8006d14 <HAL_DMA_Start_IT+0x48c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d02c      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2d      	ldr	r2, [pc, #180]	; (8006d18 <HAL_DMA_Start_IT+0x490>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d027      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <HAL_DMA_Start_IT+0x494>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <HAL_DMA_Start_IT+0x498>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <HAL_DMA_Start_IT+0x49c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a27      	ldr	r2, [pc, #156]	; (8006d28 <HAL_DMA_Start_IT+0x4a0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a25      	ldr	r2, [pc, #148]	; (8006d2c <HAL_DMA_Start_IT+0x4a4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <HAL_DMA_Start_IT+0x4a8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a22      	ldr	r2, [pc, #136]	; (8006d34 <HAL_DMA_Start_IT+0x4ac>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_DMA_Start_IT+0x4b0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <HAL_DMA_Start_IT+0x442>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e012      	b.n	8006cf0 <HAL_DMA_Start_IT+0x468>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0201 	orr.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e009      	b.n	8006cf0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40020010 	.word	0x40020010
 8006d00:	40020028 	.word	0x40020028
 8006d04:	40020040 	.word	0x40020040
 8006d08:	40020058 	.word	0x40020058
 8006d0c:	40020070 	.word	0x40020070
 8006d10:	40020088 	.word	0x40020088
 8006d14:	400200a0 	.word	0x400200a0
 8006d18:	400200b8 	.word	0x400200b8
 8006d1c:	40020410 	.word	0x40020410
 8006d20:	40020428 	.word	0x40020428
 8006d24:	40020440 	.word	0x40020440
 8006d28:	40020458 	.word	0x40020458
 8006d2c:	40020470 	.word	0x40020470
 8006d30:	40020488 	.word	0x40020488
 8006d34:	400204a0 	.word	0x400204a0
 8006d38:	400204b8 	.word	0x400204b8
 8006d3c:	58025408 	.word	0x58025408
 8006d40:	5802541c 	.word	0x5802541c
 8006d44:	58025430 	.word	0x58025430
 8006d48:	58025444 	.word	0x58025444
 8006d4c:	58025458 	.word	0x58025458
 8006d50:	5802546c 	.word	0x5802546c
 8006d54:	58025480 	.word	0x58025480
 8006d58:	58025494 	.word	0x58025494

08006d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006d64:	f7fd f90c 	bl	8003f80 <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e2dc      	b.n	800732e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d008      	beq.n	8006d92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e2cd      	b.n	800732e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a76      	ldr	r2, [pc, #472]	; (8006f70 <HAL_DMA_Abort+0x214>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d04a      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a74      	ldr	r2, [pc, #464]	; (8006f74 <HAL_DMA_Abort+0x218>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d045      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a73      	ldr	r2, [pc, #460]	; (8006f78 <HAL_DMA_Abort+0x21c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d040      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a71      	ldr	r2, [pc, #452]	; (8006f7c <HAL_DMA_Abort+0x220>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d03b      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a70      	ldr	r2, [pc, #448]	; (8006f80 <HAL_DMA_Abort+0x224>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d036      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a6e      	ldr	r2, [pc, #440]	; (8006f84 <HAL_DMA_Abort+0x228>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d031      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a6d      	ldr	r2, [pc, #436]	; (8006f88 <HAL_DMA_Abort+0x22c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d02c      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a6b      	ldr	r2, [pc, #428]	; (8006f8c <HAL_DMA_Abort+0x230>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d027      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a6a      	ldr	r2, [pc, #424]	; (8006f90 <HAL_DMA_Abort+0x234>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a68      	ldr	r2, [pc, #416]	; (8006f94 <HAL_DMA_Abort+0x238>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a67      	ldr	r2, [pc, #412]	; (8006f98 <HAL_DMA_Abort+0x23c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a65      	ldr	r2, [pc, #404]	; (8006f9c <HAL_DMA_Abort+0x240>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a64      	ldr	r2, [pc, #400]	; (8006fa0 <HAL_DMA_Abort+0x244>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a62      	ldr	r2, [pc, #392]	; (8006fa4 <HAL_DMA_Abort+0x248>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a61      	ldr	r2, [pc, #388]	; (8006fa8 <HAL_DMA_Abort+0x24c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_DMA_Abort+0xd6>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a5f      	ldr	r2, [pc, #380]	; (8006fac <HAL_DMA_Abort+0x250>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d101      	bne.n	8006e36 <HAL_DMA_Abort+0xda>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <HAL_DMA_Abort+0xdc>
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d013      	beq.n	8006e64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 021e 	bic.w	r2, r2, #30
 8006e4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e00a      	b.n	8006e7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 020e 	bic.w	r2, r2, #14
 8006e72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a3c      	ldr	r2, [pc, #240]	; (8006f70 <HAL_DMA_Abort+0x214>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d072      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3a      	ldr	r2, [pc, #232]	; (8006f74 <HAL_DMA_Abort+0x218>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d06d      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a39      	ldr	r2, [pc, #228]	; (8006f78 <HAL_DMA_Abort+0x21c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d068      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a37      	ldr	r2, [pc, #220]	; (8006f7c <HAL_DMA_Abort+0x220>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d063      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a36      	ldr	r2, [pc, #216]	; (8006f80 <HAL_DMA_Abort+0x224>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d05e      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a34      	ldr	r2, [pc, #208]	; (8006f84 <HAL_DMA_Abort+0x228>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d059      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a33      	ldr	r2, [pc, #204]	; (8006f88 <HAL_DMA_Abort+0x22c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d054      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a31      	ldr	r2, [pc, #196]	; (8006f8c <HAL_DMA_Abort+0x230>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d04f      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_DMA_Abort+0x234>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d04a      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2e      	ldr	r2, [pc, #184]	; (8006f94 <HAL_DMA_Abort+0x238>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d045      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2d      	ldr	r2, [pc, #180]	; (8006f98 <HAL_DMA_Abort+0x23c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d040      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <HAL_DMA_Abort+0x240>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d03b      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2a      	ldr	r2, [pc, #168]	; (8006fa0 <HAL_DMA_Abort+0x244>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d036      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a28      	ldr	r2, [pc, #160]	; (8006fa4 <HAL_DMA_Abort+0x248>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d031      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <HAL_DMA_Abort+0x24c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d02c      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a25      	ldr	r2, [pc, #148]	; (8006fac <HAL_DMA_Abort+0x250>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d027      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <HAL_DMA_Abort+0x254>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d022      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a22      	ldr	r2, [pc, #136]	; (8006fb4 <HAL_DMA_Abort+0x258>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d01d      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_DMA_Abort+0x25c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d018      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <HAL_DMA_Abort+0x260>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <HAL_DMA_Abort+0x264>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00e      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1c      	ldr	r2, [pc, #112]	; (8006fc4 <HAL_DMA_Abort+0x268>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d009      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1b      	ldr	r2, [pc, #108]	; (8006fc8 <HAL_DMA_Abort+0x26c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d004      	beq.n	8006f6a <HAL_DMA_Abort+0x20e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a19      	ldr	r2, [pc, #100]	; (8006fcc <HAL_DMA_Abort+0x270>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d132      	bne.n	8006fd0 <HAL_DMA_Abort+0x274>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e031      	b.n	8006fd2 <HAL_DMA_Abort+0x276>
 8006f6e:	bf00      	nop
 8006f70:	40020010 	.word	0x40020010
 8006f74:	40020028 	.word	0x40020028
 8006f78:	40020040 	.word	0x40020040
 8006f7c:	40020058 	.word	0x40020058
 8006f80:	40020070 	.word	0x40020070
 8006f84:	40020088 	.word	0x40020088
 8006f88:	400200a0 	.word	0x400200a0
 8006f8c:	400200b8 	.word	0x400200b8
 8006f90:	40020410 	.word	0x40020410
 8006f94:	40020428 	.word	0x40020428
 8006f98:	40020440 	.word	0x40020440
 8006f9c:	40020458 	.word	0x40020458
 8006fa0:	40020470 	.word	0x40020470
 8006fa4:	40020488 	.word	0x40020488
 8006fa8:	400204a0 	.word	0x400204a0
 8006fac:	400204b8 	.word	0x400204b8
 8006fb0:	58025408 	.word	0x58025408
 8006fb4:	5802541c 	.word	0x5802541c
 8006fb8:	58025430 	.word	0x58025430
 8006fbc:	58025444 	.word	0x58025444
 8006fc0:	58025458 	.word	0x58025458
 8006fc4:	5802546c 	.word	0x5802546c
 8006fc8:	58025480 	.word	0x58025480
 8006fcc:	58025494 	.word	0x58025494
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fe4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6d      	ldr	r2, [pc, #436]	; (80071a0 <HAL_DMA_Abort+0x444>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d04a      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a6b      	ldr	r2, [pc, #428]	; (80071a4 <HAL_DMA_Abort+0x448>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d045      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a6a      	ldr	r2, [pc, #424]	; (80071a8 <HAL_DMA_Abort+0x44c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d040      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a68      	ldr	r2, [pc, #416]	; (80071ac <HAL_DMA_Abort+0x450>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d03b      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a67      	ldr	r2, [pc, #412]	; (80071b0 <HAL_DMA_Abort+0x454>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d036      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a65      	ldr	r2, [pc, #404]	; (80071b4 <HAL_DMA_Abort+0x458>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d031      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a64      	ldr	r2, [pc, #400]	; (80071b8 <HAL_DMA_Abort+0x45c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d02c      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a62      	ldr	r2, [pc, #392]	; (80071bc <HAL_DMA_Abort+0x460>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d027      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a61      	ldr	r2, [pc, #388]	; (80071c0 <HAL_DMA_Abort+0x464>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d022      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a5f      	ldr	r2, [pc, #380]	; (80071c4 <HAL_DMA_Abort+0x468>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01d      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a5e      	ldr	r2, [pc, #376]	; (80071c8 <HAL_DMA_Abort+0x46c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d018      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a5c      	ldr	r2, [pc, #368]	; (80071cc <HAL_DMA_Abort+0x470>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a5b      	ldr	r2, [pc, #364]	; (80071d0 <HAL_DMA_Abort+0x474>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a59      	ldr	r2, [pc, #356]	; (80071d4 <HAL_DMA_Abort+0x478>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a58      	ldr	r2, [pc, #352]	; (80071d8 <HAL_DMA_Abort+0x47c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_DMA_Abort+0x32a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a56      	ldr	r2, [pc, #344]	; (80071dc <HAL_DMA_Abort+0x480>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d108      	bne.n	8007098 <HAL_DMA_Abort+0x33c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e007      	b.n	80070a8 <HAL_DMA_Abort+0x34c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80070a8:	e013      	b.n	80070d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070aa:	f7fc ff69 	bl	8003f80 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	d90c      	bls.n	80070d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2203      	movs	r2, #3
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e12d      	b.n	800732e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a2f      	ldr	r2, [pc, #188]	; (80071a0 <HAL_DMA_Abort+0x444>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d04a      	beq.n	800717e <HAL_DMA_Abort+0x422>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <HAL_DMA_Abort+0x448>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d045      	beq.n	800717e <HAL_DMA_Abort+0x422>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2c      	ldr	r2, [pc, #176]	; (80071a8 <HAL_DMA_Abort+0x44c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d040      	beq.n	800717e <HAL_DMA_Abort+0x422>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <HAL_DMA_Abort+0x450>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d03b      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <HAL_DMA_Abort+0x454>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d036      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a27      	ldr	r2, [pc, #156]	; (80071b4 <HAL_DMA_Abort+0x458>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d031      	beq.n	800717e <HAL_DMA_Abort+0x422>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <HAL_DMA_Abort+0x45c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d02c      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a24      	ldr	r2, [pc, #144]	; (80071bc <HAL_DMA_Abort+0x460>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d027      	beq.n	800717e <HAL_DMA_Abort+0x422>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <HAL_DMA_Abort+0x464>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <HAL_DMA_Abort+0x468>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01d      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a20      	ldr	r2, [pc, #128]	; (80071c8 <HAL_DMA_Abort+0x46c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d018      	beq.n	800717e <HAL_DMA_Abort+0x422>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_DMA_Abort+0x470>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <HAL_DMA_Abort+0x474>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00e      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_DMA_Abort+0x478>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_DMA_Abort+0x422>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1a      	ldr	r2, [pc, #104]	; (80071d8 <HAL_DMA_Abort+0x47c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <HAL_DMA_Abort+0x422>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a18      	ldr	r2, [pc, #96]	; (80071dc <HAL_DMA_Abort+0x480>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d101      	bne.n	8007182 <HAL_DMA_Abort+0x426>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <HAL_DMA_Abort+0x428>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02b      	beq.n	80071e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	223f      	movs	r2, #63	; 0x3f
 8007198:	409a      	lsls	r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	e02a      	b.n	80071f6 <HAL_DMA_Abort+0x49a>
 80071a0:	40020010 	.word	0x40020010
 80071a4:	40020028 	.word	0x40020028
 80071a8:	40020040 	.word	0x40020040
 80071ac:	40020058 	.word	0x40020058
 80071b0:	40020070 	.word	0x40020070
 80071b4:	40020088 	.word	0x40020088
 80071b8:	400200a0 	.word	0x400200a0
 80071bc:	400200b8 	.word	0x400200b8
 80071c0:	40020410 	.word	0x40020410
 80071c4:	40020428 	.word	0x40020428
 80071c8:	40020440 	.word	0x40020440
 80071cc:	40020458 	.word	0x40020458
 80071d0:	40020470 	.word	0x40020470
 80071d4:	40020488 	.word	0x40020488
 80071d8:	400204a0 	.word	0x400204a0
 80071dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ea:	f003 031f 	and.w	r3, r3, #31
 80071ee:	2201      	movs	r2, #1
 80071f0:	409a      	lsls	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a4f      	ldr	r2, [pc, #316]	; (8007338 <HAL_DMA_Abort+0x5dc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d072      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a4d      	ldr	r2, [pc, #308]	; (800733c <HAL_DMA_Abort+0x5e0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d06d      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a4c      	ldr	r2, [pc, #304]	; (8007340 <HAL_DMA_Abort+0x5e4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d068      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a4a      	ldr	r2, [pc, #296]	; (8007344 <HAL_DMA_Abort+0x5e8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d063      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a49      	ldr	r2, [pc, #292]	; (8007348 <HAL_DMA_Abort+0x5ec>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d05e      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a47      	ldr	r2, [pc, #284]	; (800734c <HAL_DMA_Abort+0x5f0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d059      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a46      	ldr	r2, [pc, #280]	; (8007350 <HAL_DMA_Abort+0x5f4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d054      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a44      	ldr	r2, [pc, #272]	; (8007354 <HAL_DMA_Abort+0x5f8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d04f      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a43      	ldr	r2, [pc, #268]	; (8007358 <HAL_DMA_Abort+0x5fc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d04a      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a41      	ldr	r2, [pc, #260]	; (800735c <HAL_DMA_Abort+0x600>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d045      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a40      	ldr	r2, [pc, #256]	; (8007360 <HAL_DMA_Abort+0x604>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d040      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a3e      	ldr	r2, [pc, #248]	; (8007364 <HAL_DMA_Abort+0x608>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d03b      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a3d      	ldr	r2, [pc, #244]	; (8007368 <HAL_DMA_Abort+0x60c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d036      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a3b      	ldr	r2, [pc, #236]	; (800736c <HAL_DMA_Abort+0x610>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d031      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a3a      	ldr	r2, [pc, #232]	; (8007370 <HAL_DMA_Abort+0x614>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d02c      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a38      	ldr	r2, [pc, #224]	; (8007374 <HAL_DMA_Abort+0x618>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d027      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a37      	ldr	r2, [pc, #220]	; (8007378 <HAL_DMA_Abort+0x61c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d022      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a35      	ldr	r2, [pc, #212]	; (800737c <HAL_DMA_Abort+0x620>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01d      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a34      	ldr	r2, [pc, #208]	; (8007380 <HAL_DMA_Abort+0x624>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d018      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a32      	ldr	r2, [pc, #200]	; (8007384 <HAL_DMA_Abort+0x628>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a31      	ldr	r2, [pc, #196]	; (8007388 <HAL_DMA_Abort+0x62c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00e      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a2f      	ldr	r2, [pc, #188]	; (800738c <HAL_DMA_Abort+0x630>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d009      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a2e      	ldr	r2, [pc, #184]	; (8007390 <HAL_DMA_Abort+0x634>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d004      	beq.n	80072e6 <HAL_DMA_Abort+0x58a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a2c      	ldr	r2, [pc, #176]	; (8007394 <HAL_DMA_Abort+0x638>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d101      	bne.n	80072ea <HAL_DMA_Abort+0x58e>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <HAL_DMA_Abort+0x590>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d015      	beq.n	800731c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007310:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800731a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	40020010 	.word	0x40020010
 800733c:	40020028 	.word	0x40020028
 8007340:	40020040 	.word	0x40020040
 8007344:	40020058 	.word	0x40020058
 8007348:	40020070 	.word	0x40020070
 800734c:	40020088 	.word	0x40020088
 8007350:	400200a0 	.word	0x400200a0
 8007354:	400200b8 	.word	0x400200b8
 8007358:	40020410 	.word	0x40020410
 800735c:	40020428 	.word	0x40020428
 8007360:	40020440 	.word	0x40020440
 8007364:	40020458 	.word	0x40020458
 8007368:	40020470 	.word	0x40020470
 800736c:	40020488 	.word	0x40020488
 8007370:	400204a0 	.word	0x400204a0
 8007374:	400204b8 	.word	0x400204b8
 8007378:	58025408 	.word	0x58025408
 800737c:	5802541c 	.word	0x5802541c
 8007380:	58025430 	.word	0x58025430
 8007384:	58025444 	.word	0x58025444
 8007388:	58025458 	.word	0x58025458
 800738c:	5802546c 	.word	0x5802546c
 8007390:	58025480 	.word	0x58025480
 8007394:	58025494 	.word	0x58025494

08007398 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e237      	b.n	800781a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d004      	beq.n	80073c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2280      	movs	r2, #128	; 0x80
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e22c      	b.n	800781a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a5c      	ldr	r2, [pc, #368]	; (8007538 <HAL_DMA_Abort_IT+0x1a0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d04a      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a5b      	ldr	r2, [pc, #364]	; (800753c <HAL_DMA_Abort_IT+0x1a4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d045      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a59      	ldr	r2, [pc, #356]	; (8007540 <HAL_DMA_Abort_IT+0x1a8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d040      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a58      	ldr	r2, [pc, #352]	; (8007544 <HAL_DMA_Abort_IT+0x1ac>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d03b      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a56      	ldr	r2, [pc, #344]	; (8007548 <HAL_DMA_Abort_IT+0x1b0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d036      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a55      	ldr	r2, [pc, #340]	; (800754c <HAL_DMA_Abort_IT+0x1b4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d031      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a53      	ldr	r2, [pc, #332]	; (8007550 <HAL_DMA_Abort_IT+0x1b8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d02c      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a52      	ldr	r2, [pc, #328]	; (8007554 <HAL_DMA_Abort_IT+0x1bc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d027      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a50      	ldr	r2, [pc, #320]	; (8007558 <HAL_DMA_Abort_IT+0x1c0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d022      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a4f      	ldr	r2, [pc, #316]	; (800755c <HAL_DMA_Abort_IT+0x1c4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d01d      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a4d      	ldr	r2, [pc, #308]	; (8007560 <HAL_DMA_Abort_IT+0x1c8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d018      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a4c      	ldr	r2, [pc, #304]	; (8007564 <HAL_DMA_Abort_IT+0x1cc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d013      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a4a      	ldr	r2, [pc, #296]	; (8007568 <HAL_DMA_Abort_IT+0x1d0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00e      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a49      	ldr	r2, [pc, #292]	; (800756c <HAL_DMA_Abort_IT+0x1d4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d009      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a47      	ldr	r2, [pc, #284]	; (8007570 <HAL_DMA_Abort_IT+0x1d8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <HAL_DMA_Abort_IT+0xc8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a46      	ldr	r2, [pc, #280]	; (8007574 <HAL_DMA_Abort_IT+0x1dc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d101      	bne.n	8007464 <HAL_DMA_Abort_IT+0xcc>
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <HAL_DMA_Abort_IT+0xce>
 8007464:	2300      	movs	r3, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 8086 	beq.w	8007578 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2204      	movs	r2, #4
 8007470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2f      	ldr	r2, [pc, #188]	; (8007538 <HAL_DMA_Abort_IT+0x1a0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d04a      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a2e      	ldr	r2, [pc, #184]	; (800753c <HAL_DMA_Abort_IT+0x1a4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d045      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2c      	ldr	r2, [pc, #176]	; (8007540 <HAL_DMA_Abort_IT+0x1a8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d040      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <HAL_DMA_Abort_IT+0x1ac>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d03b      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a29      	ldr	r2, [pc, #164]	; (8007548 <HAL_DMA_Abort_IT+0x1b0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d036      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a28      	ldr	r2, [pc, #160]	; (800754c <HAL_DMA_Abort_IT+0x1b4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d031      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a26      	ldr	r2, [pc, #152]	; (8007550 <HAL_DMA_Abort_IT+0x1b8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d02c      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a25      	ldr	r2, [pc, #148]	; (8007554 <HAL_DMA_Abort_IT+0x1bc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d027      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a23      	ldr	r2, [pc, #140]	; (8007558 <HAL_DMA_Abort_IT+0x1c0>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d022      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a22      	ldr	r2, [pc, #136]	; (800755c <HAL_DMA_Abort_IT+0x1c4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01d      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a20      	ldr	r2, [pc, #128]	; (8007560 <HAL_DMA_Abort_IT+0x1c8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <HAL_DMA_Abort_IT+0x1cc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <HAL_DMA_Abort_IT+0x1d0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1c      	ldr	r2, [pc, #112]	; (800756c <HAL_DMA_Abort_IT+0x1d4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1a      	ldr	r2, [pc, #104]	; (8007570 <HAL_DMA_Abort_IT+0x1d8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <HAL_DMA_Abort_IT+0x17c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a19      	ldr	r2, [pc, #100]	; (8007574 <HAL_DMA_Abort_IT+0x1dc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d108      	bne.n	8007526 <HAL_DMA_Abort_IT+0x18e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e178      	b.n	8007818 <HAL_DMA_Abort_IT+0x480>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e16f      	b.n	8007818 <HAL_DMA_Abort_IT+0x480>
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	40020058 	.word	0x40020058
 8007548:	40020070 	.word	0x40020070
 800754c:	40020088 	.word	0x40020088
 8007550:	400200a0 	.word	0x400200a0
 8007554:	400200b8 	.word	0x400200b8
 8007558:	40020410 	.word	0x40020410
 800755c:	40020428 	.word	0x40020428
 8007560:	40020440 	.word	0x40020440
 8007564:	40020458 	.word	0x40020458
 8007568:	40020470 	.word	0x40020470
 800756c:	40020488 	.word	0x40020488
 8007570:	400204a0 	.word	0x400204a0
 8007574:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 020e 	bic.w	r2, r2, #14
 8007586:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a6c      	ldr	r2, [pc, #432]	; (8007740 <HAL_DMA_Abort_IT+0x3a8>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d04a      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a6b      	ldr	r2, [pc, #428]	; (8007744 <HAL_DMA_Abort_IT+0x3ac>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d045      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a69      	ldr	r2, [pc, #420]	; (8007748 <HAL_DMA_Abort_IT+0x3b0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d040      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a68      	ldr	r2, [pc, #416]	; (800774c <HAL_DMA_Abort_IT+0x3b4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d03b      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a66      	ldr	r2, [pc, #408]	; (8007750 <HAL_DMA_Abort_IT+0x3b8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d036      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a65      	ldr	r2, [pc, #404]	; (8007754 <HAL_DMA_Abort_IT+0x3bc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d031      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a63      	ldr	r2, [pc, #396]	; (8007758 <HAL_DMA_Abort_IT+0x3c0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02c      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a62      	ldr	r2, [pc, #392]	; (800775c <HAL_DMA_Abort_IT+0x3c4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d027      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a60      	ldr	r2, [pc, #384]	; (8007760 <HAL_DMA_Abort_IT+0x3c8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d022      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a5f      	ldr	r2, [pc, #380]	; (8007764 <HAL_DMA_Abort_IT+0x3cc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d01d      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a5d      	ldr	r2, [pc, #372]	; (8007768 <HAL_DMA_Abort_IT+0x3d0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d018      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a5c      	ldr	r2, [pc, #368]	; (800776c <HAL_DMA_Abort_IT+0x3d4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d013      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5a      	ldr	r2, [pc, #360]	; (8007770 <HAL_DMA_Abort_IT+0x3d8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00e      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a59      	ldr	r2, [pc, #356]	; (8007774 <HAL_DMA_Abort_IT+0x3dc>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d009      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a57      	ldr	r2, [pc, #348]	; (8007778 <HAL_DMA_Abort_IT+0x3e0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d004      	beq.n	8007628 <HAL_DMA_Abort_IT+0x290>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a56      	ldr	r2, [pc, #344]	; (800777c <HAL_DMA_Abort_IT+0x3e4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d108      	bne.n	800763a <HAL_DMA_Abort_IT+0x2a2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e007      	b.n	800764a <HAL_DMA_Abort_IT+0x2b2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0201 	bic.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <HAL_DMA_Abort_IT+0x3a8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d072      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a3a      	ldr	r2, [pc, #232]	; (8007744 <HAL_DMA_Abort_IT+0x3ac>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d06d      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a39      	ldr	r2, [pc, #228]	; (8007748 <HAL_DMA_Abort_IT+0x3b0>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d068      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a37      	ldr	r2, [pc, #220]	; (800774c <HAL_DMA_Abort_IT+0x3b4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d063      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a36      	ldr	r2, [pc, #216]	; (8007750 <HAL_DMA_Abort_IT+0x3b8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d05e      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a34      	ldr	r2, [pc, #208]	; (8007754 <HAL_DMA_Abort_IT+0x3bc>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d059      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a33      	ldr	r2, [pc, #204]	; (8007758 <HAL_DMA_Abort_IT+0x3c0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d054      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a31      	ldr	r2, [pc, #196]	; (800775c <HAL_DMA_Abort_IT+0x3c4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d04f      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a30      	ldr	r2, [pc, #192]	; (8007760 <HAL_DMA_Abort_IT+0x3c8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d04a      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a2e      	ldr	r2, [pc, #184]	; (8007764 <HAL_DMA_Abort_IT+0x3cc>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d045      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <HAL_DMA_Abort_IT+0x3d0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d040      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a2b      	ldr	r2, [pc, #172]	; (800776c <HAL_DMA_Abort_IT+0x3d4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d03b      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <HAL_DMA_Abort_IT+0x3d8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d036      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a28      	ldr	r2, [pc, #160]	; (8007774 <HAL_DMA_Abort_IT+0x3dc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d031      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a27      	ldr	r2, [pc, #156]	; (8007778 <HAL_DMA_Abort_IT+0x3e0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d02c      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a25      	ldr	r2, [pc, #148]	; (800777c <HAL_DMA_Abort_IT+0x3e4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d027      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a24      	ldr	r2, [pc, #144]	; (8007780 <HAL_DMA_Abort_IT+0x3e8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a22      	ldr	r2, [pc, #136]	; (8007784 <HAL_DMA_Abort_IT+0x3ec>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d01d      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a21      	ldr	r2, [pc, #132]	; (8007788 <HAL_DMA_Abort_IT+0x3f0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <HAL_DMA_Abort_IT+0x3f4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <HAL_DMA_Abort_IT+0x3f8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <HAL_DMA_Abort_IT+0x3fc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <HAL_DMA_Abort_IT+0x400>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_DMA_Abort_IT+0x3a2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <HAL_DMA_Abort_IT+0x404>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d132      	bne.n	80077a0 <HAL_DMA_Abort_IT+0x408>
 800773a:	2301      	movs	r3, #1
 800773c:	e031      	b.n	80077a2 <HAL_DMA_Abort_IT+0x40a>
 800773e:	bf00      	nop
 8007740:	40020010 	.word	0x40020010
 8007744:	40020028 	.word	0x40020028
 8007748:	40020040 	.word	0x40020040
 800774c:	40020058 	.word	0x40020058
 8007750:	40020070 	.word	0x40020070
 8007754:	40020088 	.word	0x40020088
 8007758:	400200a0 	.word	0x400200a0
 800775c:	400200b8 	.word	0x400200b8
 8007760:	40020410 	.word	0x40020410
 8007764:	40020428 	.word	0x40020428
 8007768:	40020440 	.word	0x40020440
 800776c:	40020458 	.word	0x40020458
 8007770:	40020470 	.word	0x40020470
 8007774:	40020488 	.word	0x40020488
 8007778:	400204a0 	.word	0x400204a0
 800777c:	400204b8 	.word	0x400204b8
 8007780:	58025408 	.word	0x58025408
 8007784:	5802541c 	.word	0x5802541c
 8007788:	58025430 	.word	0x58025430
 800778c:	58025444 	.word	0x58025444
 8007790:	58025458 	.word	0x58025458
 8007794:	5802546c 	.word	0x5802546c
 8007798:	58025480 	.word	0x58025480
 800779c:	58025494 	.word	0x58025494
 80077a0:	2300      	movs	r3, #0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d028      	beq.n	80077f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2201      	movs	r2, #1
 80077c6:	409a      	lsls	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00c      	beq.n	80077f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop

08007824 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007830:	4b67      	ldr	r3, [pc, #412]	; (80079d0 <HAL_DMA_IRQHandler+0x1ac>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a67      	ldr	r2, [pc, #412]	; (80079d4 <HAL_DMA_IRQHandler+0x1b0>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	0a9b      	lsrs	r3, r3, #10
 800783c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007848:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a5f      	ldr	r2, [pc, #380]	; (80079d8 <HAL_DMA_IRQHandler+0x1b4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d04a      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5d      	ldr	r2, [pc, #372]	; (80079dc <HAL_DMA_IRQHandler+0x1b8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d045      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a5c      	ldr	r2, [pc, #368]	; (80079e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d040      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a5a      	ldr	r2, [pc, #360]	; (80079e4 <HAL_DMA_IRQHandler+0x1c0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d03b      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a59      	ldr	r2, [pc, #356]	; (80079e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d036      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a57      	ldr	r2, [pc, #348]	; (80079ec <HAL_DMA_IRQHandler+0x1c8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d031      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a56      	ldr	r2, [pc, #344]	; (80079f0 <HAL_DMA_IRQHandler+0x1cc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d02c      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a54      	ldr	r2, [pc, #336]	; (80079f4 <HAL_DMA_IRQHandler+0x1d0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d027      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a53      	ldr	r2, [pc, #332]	; (80079f8 <HAL_DMA_IRQHandler+0x1d4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d022      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a51      	ldr	r2, [pc, #324]	; (80079fc <HAL_DMA_IRQHandler+0x1d8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01d      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a50      	ldr	r2, [pc, #320]	; (8007a00 <HAL_DMA_IRQHandler+0x1dc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d018      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a4e      	ldr	r2, [pc, #312]	; (8007a04 <HAL_DMA_IRQHandler+0x1e0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d013      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a4d      	ldr	r2, [pc, #308]	; (8007a08 <HAL_DMA_IRQHandler+0x1e4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00e      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a4b      	ldr	r2, [pc, #300]	; (8007a0c <HAL_DMA_IRQHandler+0x1e8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d009      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a4a      	ldr	r2, [pc, #296]	; (8007a10 <HAL_DMA_IRQHandler+0x1ec>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d004      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xd2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a48      	ldr	r2, [pc, #288]	; (8007a14 <HAL_DMA_IRQHandler+0x1f0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d101      	bne.n	80078fa <HAL_DMA_IRQHandler+0xd6>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <HAL_DMA_IRQHandler+0xd8>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 842b 	beq.w	8008158 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2208      	movs	r2, #8
 800790c:	409a      	lsls	r2, r3
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80a2 	beq.w	8007a5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2e      	ldr	r2, [pc, #184]	; (80079d8 <HAL_DMA_IRQHandler+0x1b4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d04a      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a2d      	ldr	r2, [pc, #180]	; (80079dc <HAL_DMA_IRQHandler+0x1b8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d045      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2b      	ldr	r2, [pc, #172]	; (80079e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d040      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2a      	ldr	r2, [pc, #168]	; (80079e4 <HAL_DMA_IRQHandler+0x1c0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d03b      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d036      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a27      	ldr	r2, [pc, #156]	; (80079ec <HAL_DMA_IRQHandler+0x1c8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d031      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a25      	ldr	r2, [pc, #148]	; (80079f0 <HAL_DMA_IRQHandler+0x1cc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02c      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a24      	ldr	r2, [pc, #144]	; (80079f4 <HAL_DMA_IRQHandler+0x1d0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d027      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <HAL_DMA_IRQHandler+0x1d4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d022      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a21      	ldr	r2, [pc, #132]	; (80079fc <HAL_DMA_IRQHandler+0x1d8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d01d      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <HAL_DMA_IRQHandler+0x1dc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1e      	ldr	r2, [pc, #120]	; (8007a04 <HAL_DMA_IRQHandler+0x1e0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1c      	ldr	r2, [pc, #112]	; (8007a08 <HAL_DMA_IRQHandler+0x1e4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <HAL_DMA_IRQHandler+0x1e8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a19      	ldr	r2, [pc, #100]	; (8007a10 <HAL_DMA_IRQHandler+0x1ec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x194>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <HAL_DMA_IRQHandler+0x1f0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d12f      	bne.n	8007a18 <HAL_DMA_IRQHandler+0x1f4>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bf14      	ite	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	2300      	moveq	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	e02e      	b.n	8007a2c <HAL_DMA_IRQHandler+0x208>
 80079ce:	bf00      	nop
 80079d0:	24000090 	.word	0x24000090
 80079d4:	1b4e81b5 	.word	0x1b4e81b5
 80079d8:	40020010 	.word	0x40020010
 80079dc:	40020028 	.word	0x40020028
 80079e0:	40020040 	.word	0x40020040
 80079e4:	40020058 	.word	0x40020058
 80079e8:	40020070 	.word	0x40020070
 80079ec:	40020088 	.word	0x40020088
 80079f0:	400200a0 	.word	0x400200a0
 80079f4:	400200b8 	.word	0x400200b8
 80079f8:	40020410 	.word	0x40020410
 80079fc:	40020428 	.word	0x40020428
 8007a00:	40020440 	.word	0x40020440
 8007a04:	40020458 	.word	0x40020458
 8007a08:	40020470 	.word	0x40020470
 8007a0c:	40020488 	.word	0x40020488
 8007a10:	400204a0 	.word	0x400204a0
 8007a14:	400204b8 	.word	0x400204b8
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bf14      	ite	ne
 8007a26:	2301      	movne	r3, #1
 8007a28:	2300      	moveq	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d015      	beq.n	8007a5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0204 	bic.w	r2, r2, #4
 8007a3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	2208      	movs	r2, #8
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a54:	f043 0201 	orr.w	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d06e      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a69      	ldr	r2, [pc, #420]	; (8007c1c <HAL_DMA_IRQHandler+0x3f8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d04a      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a67      	ldr	r2, [pc, #412]	; (8007c20 <HAL_DMA_IRQHandler+0x3fc>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d045      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a66      	ldr	r2, [pc, #408]	; (8007c24 <HAL_DMA_IRQHandler+0x400>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d040      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a64      	ldr	r2, [pc, #400]	; (8007c28 <HAL_DMA_IRQHandler+0x404>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d03b      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a63      	ldr	r2, [pc, #396]	; (8007c2c <HAL_DMA_IRQHandler+0x408>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d036      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a61      	ldr	r2, [pc, #388]	; (8007c30 <HAL_DMA_IRQHandler+0x40c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d031      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a60      	ldr	r2, [pc, #384]	; (8007c34 <HAL_DMA_IRQHandler+0x410>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d02c      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5e      	ldr	r2, [pc, #376]	; (8007c38 <HAL_DMA_IRQHandler+0x414>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d027      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a5d      	ldr	r2, [pc, #372]	; (8007c3c <HAL_DMA_IRQHandler+0x418>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a5b      	ldr	r2, [pc, #364]	; (8007c40 <HAL_DMA_IRQHandler+0x41c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01d      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a5a      	ldr	r2, [pc, #360]	; (8007c44 <HAL_DMA_IRQHandler+0x420>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a58      	ldr	r2, [pc, #352]	; (8007c48 <HAL_DMA_IRQHandler+0x424>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a57      	ldr	r2, [pc, #348]	; (8007c4c <HAL_DMA_IRQHandler+0x428>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a55      	ldr	r2, [pc, #340]	; (8007c50 <HAL_DMA_IRQHandler+0x42c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a54      	ldr	r2, [pc, #336]	; (8007c54 <HAL_DMA_IRQHandler+0x430>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x2ee>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a52      	ldr	r2, [pc, #328]	; (8007c58 <HAL_DMA_IRQHandler+0x434>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10a      	bne.n	8007b28 <HAL_DMA_IRQHandler+0x304>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	e003      	b.n	8007b30 <HAL_DMA_IRQHandler+0x30c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00d      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b48:	f043 0202 	orr.w	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2204      	movs	r2, #4
 8007b5a:	409a      	lsls	r2, r3
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 808f 	beq.w	8007c84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a2c      	ldr	r2, [pc, #176]	; (8007c1c <HAL_DMA_IRQHandler+0x3f8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d04a      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a2a      	ldr	r2, [pc, #168]	; (8007c20 <HAL_DMA_IRQHandler+0x3fc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d045      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <HAL_DMA_IRQHandler+0x400>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d040      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <HAL_DMA_IRQHandler+0x404>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d03b      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <HAL_DMA_IRQHandler+0x408>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d036      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a24      	ldr	r2, [pc, #144]	; (8007c30 <HAL_DMA_IRQHandler+0x40c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d031      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a23      	ldr	r2, [pc, #140]	; (8007c34 <HAL_DMA_IRQHandler+0x410>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d02c      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a21      	ldr	r2, [pc, #132]	; (8007c38 <HAL_DMA_IRQHandler+0x414>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d027      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <HAL_DMA_IRQHandler+0x418>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1e      	ldr	r2, [pc, #120]	; (8007c40 <HAL_DMA_IRQHandler+0x41c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01d      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <HAL_DMA_IRQHandler+0x420>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <HAL_DMA_IRQHandler+0x424>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_DMA_IRQHandler+0x428>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <HAL_DMA_IRQHandler+0x42c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <HAL_DMA_IRQHandler+0x430>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x3e2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_DMA_IRQHandler+0x434>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d12a      	bne.n	8007c5c <HAL_DMA_IRQHandler+0x438>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bf14      	ite	ne
 8007c14:	2301      	movne	r3, #1
 8007c16:	2300      	moveq	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	e023      	b.n	8007c64 <HAL_DMA_IRQHandler+0x440>
 8007c1c:	40020010 	.word	0x40020010
 8007c20:	40020028 	.word	0x40020028
 8007c24:	40020040 	.word	0x40020040
 8007c28:	40020058 	.word	0x40020058
 8007c2c:	40020070 	.word	0x40020070
 8007c30:	40020088 	.word	0x40020088
 8007c34:	400200a0 	.word	0x400200a0
 8007c38:	400200b8 	.word	0x400200b8
 8007c3c:	40020410 	.word	0x40020410
 8007c40:	40020428 	.word	0x40020428
 8007c44:	40020440 	.word	0x40020440
 8007c48:	40020458 	.word	0x40020458
 8007c4c:	40020470 	.word	0x40020470
 8007c50:	40020488 	.word	0x40020488
 8007c54:	400204a0 	.word	0x400204a0
 8007c58:	400204b8 	.word	0x400204b8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2204      	movs	r2, #4
 8007c72:	409a      	lsls	r2, r3
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	f043 0204 	orr.w	r2, r3, #4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 80a6 	beq.w	8007de6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a85      	ldr	r2, [pc, #532]	; (8007eb4 <HAL_DMA_IRQHandler+0x690>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d04a      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a83      	ldr	r2, [pc, #524]	; (8007eb8 <HAL_DMA_IRQHandler+0x694>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d045      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a82      	ldr	r2, [pc, #520]	; (8007ebc <HAL_DMA_IRQHandler+0x698>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d040      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a80      	ldr	r2, [pc, #512]	; (8007ec0 <HAL_DMA_IRQHandler+0x69c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d03b      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a7f      	ldr	r2, [pc, #508]	; (8007ec4 <HAL_DMA_IRQHandler+0x6a0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d036      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a7d      	ldr	r2, [pc, #500]	; (8007ec8 <HAL_DMA_IRQHandler+0x6a4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d031      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a7c      	ldr	r2, [pc, #496]	; (8007ecc <HAL_DMA_IRQHandler+0x6a8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d02c      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a7a      	ldr	r2, [pc, #488]	; (8007ed0 <HAL_DMA_IRQHandler+0x6ac>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d027      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a79      	ldr	r2, [pc, #484]	; (8007ed4 <HAL_DMA_IRQHandler+0x6b0>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d022      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a77      	ldr	r2, [pc, #476]	; (8007ed8 <HAL_DMA_IRQHandler+0x6b4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d01d      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a76      	ldr	r2, [pc, #472]	; (8007edc <HAL_DMA_IRQHandler+0x6b8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d018      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a74      	ldr	r2, [pc, #464]	; (8007ee0 <HAL_DMA_IRQHandler+0x6bc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d013      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a73      	ldr	r2, [pc, #460]	; (8007ee4 <HAL_DMA_IRQHandler+0x6c0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00e      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a71      	ldr	r2, [pc, #452]	; (8007ee8 <HAL_DMA_IRQHandler+0x6c4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a70      	ldr	r2, [pc, #448]	; (8007eec <HAL_DMA_IRQHandler+0x6c8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x516>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a6e      	ldr	r2, [pc, #440]	; (8007ef0 <HAL_DMA_IRQHandler+0x6cc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d10a      	bne.n	8007d50 <HAL_DMA_IRQHandler+0x52c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf14      	ite	ne
 8007d48:	2301      	movne	r3, #1
 8007d4a:	2300      	moveq	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e009      	b.n	8007d64 <HAL_DMA_IRQHandler+0x540>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d03e      	beq.n	8007de6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	2210      	movs	r2, #16
 8007d72:	409a      	lsls	r2, r3
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d018      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d108      	bne.n	8007da6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d024      	beq.n	8007de6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
 8007da4:	e01f      	b.n	8007de6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01b      	beq.n	8007de6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	e016      	b.n	8007de6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d107      	bne.n	8007dd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0208 	bic.w	r2, r2, #8
 8007dd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	2220      	movs	r2, #32
 8007df0:	409a      	lsls	r2, r3
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8110 	beq.w	800801c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a2c      	ldr	r2, [pc, #176]	; (8007eb4 <HAL_DMA_IRQHandler+0x690>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d04a      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2b      	ldr	r2, [pc, #172]	; (8007eb8 <HAL_DMA_IRQHandler+0x694>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d045      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a29      	ldr	r2, [pc, #164]	; (8007ebc <HAL_DMA_IRQHandler+0x698>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d040      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a28      	ldr	r2, [pc, #160]	; (8007ec0 <HAL_DMA_IRQHandler+0x69c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d03b      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a26      	ldr	r2, [pc, #152]	; (8007ec4 <HAL_DMA_IRQHandler+0x6a0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d036      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a25      	ldr	r2, [pc, #148]	; (8007ec8 <HAL_DMA_IRQHandler+0x6a4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d031      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a23      	ldr	r2, [pc, #140]	; (8007ecc <HAL_DMA_IRQHandler+0x6a8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d02c      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a22      	ldr	r2, [pc, #136]	; (8007ed0 <HAL_DMA_IRQHandler+0x6ac>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d027      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a20      	ldr	r2, [pc, #128]	; (8007ed4 <HAL_DMA_IRQHandler+0x6b0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d022      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a1f      	ldr	r2, [pc, #124]	; (8007ed8 <HAL_DMA_IRQHandler+0x6b4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d01d      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1d      	ldr	r2, [pc, #116]	; (8007edc <HAL_DMA_IRQHandler+0x6b8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d018      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ee0 <HAL_DMA_IRQHandler+0x6bc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <HAL_DMA_IRQHandler+0x6c0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00e      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a19      	ldr	r2, [pc, #100]	; (8007ee8 <HAL_DMA_IRQHandler+0x6c4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d009      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a17      	ldr	r2, [pc, #92]	; (8007eec <HAL_DMA_IRQHandler+0x6c8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x678>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <HAL_DMA_IRQHandler+0x6cc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d12b      	bne.n	8007ef4 <HAL_DMA_IRQHandler+0x6d0>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bf14      	ite	ne
 8007eaa:	2301      	movne	r3, #1
 8007eac:	2300      	moveq	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	e02a      	b.n	8007f08 <HAL_DMA_IRQHandler+0x6e4>
 8007eb2:	bf00      	nop
 8007eb4:	40020010 	.word	0x40020010
 8007eb8:	40020028 	.word	0x40020028
 8007ebc:	40020040 	.word	0x40020040
 8007ec0:	40020058 	.word	0x40020058
 8007ec4:	40020070 	.word	0x40020070
 8007ec8:	40020088 	.word	0x40020088
 8007ecc:	400200a0 	.word	0x400200a0
 8007ed0:	400200b8 	.word	0x400200b8
 8007ed4:	40020410 	.word	0x40020410
 8007ed8:	40020428 	.word	0x40020428
 8007edc:	40020440 	.word	0x40020440
 8007ee0:	40020458 	.word	0x40020458
 8007ee4:	40020470 	.word	0x40020470
 8007ee8:	40020488 	.word	0x40020488
 8007eec:	400204a0 	.word	0x400204a0
 8007ef0:	400204b8 	.word	0x400204b8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bf14      	ite	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	2300      	moveq	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8087 	beq.w	800801c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2220      	movs	r2, #32
 8007f18:	409a      	lsls	r2, r3
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d139      	bne.n	8007f9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0216 	bic.w	r2, r2, #22
 8007f38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	695a      	ldr	r2, [r3, #20]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <HAL_DMA_IRQHandler+0x736>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0208 	bic.w	r2, r2, #8
 8007f68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	223f      	movs	r2, #63	; 0x3f
 8007f74:	409a      	lsls	r2, r3
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 834a 	beq.w	8008628 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
          }
          return;
 8007f9c:	e344      	b.n	8008628 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d018      	beq.n	8007fde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d108      	bne.n	8007fcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d02c      	beq.n	800801c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	4798      	blx	r3
 8007fca:	e027      	b.n	800801c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d023      	beq.n	800801c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
 8007fdc:	e01e      	b.n	800801c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10f      	bne.n	800800c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0210 	bic.w	r2, r2, #16
 8007ffa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8306 	beq.w	8008632 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 8088 	beq.w	8008144 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2204      	movs	r2, #4
 8008038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a7a      	ldr	r2, [pc, #488]	; (800822c <HAL_DMA_IRQHandler+0xa08>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d04a      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a79      	ldr	r2, [pc, #484]	; (8008230 <HAL_DMA_IRQHandler+0xa0c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d045      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a77      	ldr	r2, [pc, #476]	; (8008234 <HAL_DMA_IRQHandler+0xa10>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d040      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a76      	ldr	r2, [pc, #472]	; (8008238 <HAL_DMA_IRQHandler+0xa14>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d03b      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a74      	ldr	r2, [pc, #464]	; (800823c <HAL_DMA_IRQHandler+0xa18>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d036      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a73      	ldr	r2, [pc, #460]	; (8008240 <HAL_DMA_IRQHandler+0xa1c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d031      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a71      	ldr	r2, [pc, #452]	; (8008244 <HAL_DMA_IRQHandler+0xa20>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d02c      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a70      	ldr	r2, [pc, #448]	; (8008248 <HAL_DMA_IRQHandler+0xa24>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d027      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a6e      	ldr	r2, [pc, #440]	; (800824c <HAL_DMA_IRQHandler+0xa28>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d022      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a6d      	ldr	r2, [pc, #436]	; (8008250 <HAL_DMA_IRQHandler+0xa2c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d01d      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a6b      	ldr	r2, [pc, #428]	; (8008254 <HAL_DMA_IRQHandler+0xa30>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d018      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a6a      	ldr	r2, [pc, #424]	; (8008258 <HAL_DMA_IRQHandler+0xa34>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d013      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a68      	ldr	r2, [pc, #416]	; (800825c <HAL_DMA_IRQHandler+0xa38>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a67      	ldr	r2, [pc, #412]	; (8008260 <HAL_DMA_IRQHandler+0xa3c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a65      	ldr	r2, [pc, #404]	; (8008264 <HAL_DMA_IRQHandler+0xa40>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_DMA_IRQHandler+0x8b8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a64      	ldr	r2, [pc, #400]	; (8008268 <HAL_DMA_IRQHandler+0xa44>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d108      	bne.n	80080ee <HAL_DMA_IRQHandler+0x8ca>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e007      	b.n	80080fe <HAL_DMA_IRQHandler+0x8da>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0201 	bic.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008106:	429a      	cmp	r2, r3
 8008108:	d307      	bcc.n	800811a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1f2      	bne.n	80080fe <HAL_DMA_IRQHandler+0x8da>
 8008118:	e000      	b.n	800811c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800811a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2203      	movs	r2, #3
 800812e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008132:	e003      	b.n	800813c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8272 	beq.w	8008632 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
 8008156:	e26c      	b.n	8008632 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a43      	ldr	r2, [pc, #268]	; (800826c <HAL_DMA_IRQHandler+0xa48>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d022      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a42      	ldr	r2, [pc, #264]	; (8008270 <HAL_DMA_IRQHandler+0xa4c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01d      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a40      	ldr	r2, [pc, #256]	; (8008274 <HAL_DMA_IRQHandler+0xa50>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d018      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a3f      	ldr	r2, [pc, #252]	; (8008278 <HAL_DMA_IRQHandler+0xa54>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a3d      	ldr	r2, [pc, #244]	; (800827c <HAL_DMA_IRQHandler+0xa58>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00e      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a3c      	ldr	r2, [pc, #240]	; (8008280 <HAL_DMA_IRQHandler+0xa5c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a3a      	ldr	r2, [pc, #232]	; (8008284 <HAL_DMA_IRQHandler+0xa60>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x984>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a39      	ldr	r2, [pc, #228]	; (8008288 <HAL_DMA_IRQHandler+0xa64>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d101      	bne.n	80081ac <HAL_DMA_IRQHandler+0x988>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <HAL_DMA_IRQHandler+0x98a>
 80081ac:	2300      	movs	r3, #0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 823f 	beq.w	8008632 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	2204      	movs	r2, #4
 80081c6:	409a      	lsls	r2, r3
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 80cd 	beq.w	800836c <HAL_DMA_IRQHandler+0xb48>
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80c7 	beq.w	800836c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2204      	movs	r2, #4
 80081e8:	409a      	lsls	r2, r3
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d049      	beq.n	800828c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d109      	bne.n	8008216 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8210 	beq.w	800862c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008214:	e20a      	b.n	800862c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8206 	beq.w	800862c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008228:	e200      	b.n	800862c <HAL_DMA_IRQHandler+0xe08>
 800822a:	bf00      	nop
 800822c:	40020010 	.word	0x40020010
 8008230:	40020028 	.word	0x40020028
 8008234:	40020040 	.word	0x40020040
 8008238:	40020058 	.word	0x40020058
 800823c:	40020070 	.word	0x40020070
 8008240:	40020088 	.word	0x40020088
 8008244:	400200a0 	.word	0x400200a0
 8008248:	400200b8 	.word	0x400200b8
 800824c:	40020410 	.word	0x40020410
 8008250:	40020428 	.word	0x40020428
 8008254:	40020440 	.word	0x40020440
 8008258:	40020458 	.word	0x40020458
 800825c:	40020470 	.word	0x40020470
 8008260:	40020488 	.word	0x40020488
 8008264:	400204a0 	.word	0x400204a0
 8008268:	400204b8 	.word	0x400204b8
 800826c:	58025408 	.word	0x58025408
 8008270:	5802541c 	.word	0x5802541c
 8008274:	58025430 	.word	0x58025430
 8008278:	58025444 	.word	0x58025444
 800827c:	58025458 	.word	0x58025458
 8008280:	5802546c 	.word	0x5802546c
 8008284:	58025480 	.word	0x58025480
 8008288:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b00      	cmp	r3, #0
 8008294:	d160      	bne.n	8008358 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a7f      	ldr	r2, [pc, #508]	; (8008498 <HAL_DMA_IRQHandler+0xc74>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d04a      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a7d      	ldr	r2, [pc, #500]	; (800849c <HAL_DMA_IRQHandler+0xc78>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d045      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a7c      	ldr	r2, [pc, #496]	; (80084a0 <HAL_DMA_IRQHandler+0xc7c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d040      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a7a      	ldr	r2, [pc, #488]	; (80084a4 <HAL_DMA_IRQHandler+0xc80>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d03b      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a79      	ldr	r2, [pc, #484]	; (80084a8 <HAL_DMA_IRQHandler+0xc84>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d036      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a77      	ldr	r2, [pc, #476]	; (80084ac <HAL_DMA_IRQHandler+0xc88>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d031      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a76      	ldr	r2, [pc, #472]	; (80084b0 <HAL_DMA_IRQHandler+0xc8c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d02c      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a74      	ldr	r2, [pc, #464]	; (80084b4 <HAL_DMA_IRQHandler+0xc90>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d027      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a73      	ldr	r2, [pc, #460]	; (80084b8 <HAL_DMA_IRQHandler+0xc94>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d022      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a71      	ldr	r2, [pc, #452]	; (80084bc <HAL_DMA_IRQHandler+0xc98>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d01d      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a70      	ldr	r2, [pc, #448]	; (80084c0 <HAL_DMA_IRQHandler+0xc9c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d018      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a6e      	ldr	r2, [pc, #440]	; (80084c4 <HAL_DMA_IRQHandler+0xca0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d013      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a6d      	ldr	r2, [pc, #436]	; (80084c8 <HAL_DMA_IRQHandler+0xca4>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d00e      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a6b      	ldr	r2, [pc, #428]	; (80084cc <HAL_DMA_IRQHandler+0xca8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d009      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a6a      	ldr	r2, [pc, #424]	; (80084d0 <HAL_DMA_IRQHandler+0xcac>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d004      	beq.n	8008336 <HAL_DMA_IRQHandler+0xb12>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a68      	ldr	r2, [pc, #416]	; (80084d4 <HAL_DMA_IRQHandler+0xcb0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d108      	bne.n	8008348 <HAL_DMA_IRQHandler+0xb24>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0208 	bic.w	r2, r2, #8
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e007      	b.n	8008358 <HAL_DMA_IRQHandler+0xb34>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0204 	bic.w	r2, r2, #4
 8008356:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8165 	beq.w	800862c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800836a:	e15f      	b.n	800862c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008370:	f003 031f 	and.w	r3, r3, #31
 8008374:	2202      	movs	r2, #2
 8008376:	409a      	lsls	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80c5 	beq.w	800850c <HAL_DMA_IRQHandler+0xce8>
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80bf 	beq.w	800850c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008392:	f003 031f 	and.w	r3, r3, #31
 8008396:	2202      	movs	r2, #2
 8008398:	409a      	lsls	r2, r3
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d018      	beq.n	80083da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 813a 	beq.w	8008630 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083c4:	e134      	b.n	8008630 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8130 	beq.w	8008630 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083d8:	e12a      	b.n	8008630 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f040 8089 	bne.w	80084f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2b      	ldr	r2, [pc, #172]	; (8008498 <HAL_DMA_IRQHandler+0xc74>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d04a      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a29      	ldr	r2, [pc, #164]	; (800849c <HAL_DMA_IRQHandler+0xc78>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d045      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a28      	ldr	r2, [pc, #160]	; (80084a0 <HAL_DMA_IRQHandler+0xc7c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d040      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a26      	ldr	r2, [pc, #152]	; (80084a4 <HAL_DMA_IRQHandler+0xc80>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d03b      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a25      	ldr	r2, [pc, #148]	; (80084a8 <HAL_DMA_IRQHandler+0xc84>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d036      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a23      	ldr	r2, [pc, #140]	; (80084ac <HAL_DMA_IRQHandler+0xc88>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d031      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a22      	ldr	r2, [pc, #136]	; (80084b0 <HAL_DMA_IRQHandler+0xc8c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d02c      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a20      	ldr	r2, [pc, #128]	; (80084b4 <HAL_DMA_IRQHandler+0xc90>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d027      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a1f      	ldr	r2, [pc, #124]	; (80084b8 <HAL_DMA_IRQHandler+0xc94>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d022      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <HAL_DMA_IRQHandler+0xc98>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d01d      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <HAL_DMA_IRQHandler+0xc9c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d018      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <HAL_DMA_IRQHandler+0xca0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <HAL_DMA_IRQHandler+0xca4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00e      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <HAL_DMA_IRQHandler+0xca8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d009      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <HAL_DMA_IRQHandler+0xcac>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d004      	beq.n	8008486 <HAL_DMA_IRQHandler+0xc62>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <HAL_DMA_IRQHandler+0xcb0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d128      	bne.n	80084d8 <HAL_DMA_IRQHandler+0xcb4>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0214 	bic.w	r2, r2, #20
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	e027      	b.n	80084e8 <HAL_DMA_IRQHandler+0xcc4>
 8008498:	40020010 	.word	0x40020010
 800849c:	40020028 	.word	0x40020028
 80084a0:	40020040 	.word	0x40020040
 80084a4:	40020058 	.word	0x40020058
 80084a8:	40020070 	.word	0x40020070
 80084ac:	40020088 	.word	0x40020088
 80084b0:	400200a0 	.word	0x400200a0
 80084b4:	400200b8 	.word	0x400200b8
 80084b8:	40020410 	.word	0x40020410
 80084bc:	40020428 	.word	0x40020428
 80084c0:	40020440 	.word	0x40020440
 80084c4:	40020458 	.word	0x40020458
 80084c8:	40020470 	.word	0x40020470
 80084cc:	40020488 	.word	0x40020488
 80084d0:	400204a0 	.word	0x400204a0
 80084d4:	400204b8 	.word	0x400204b8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 020a 	bic.w	r2, r2, #10
 80084e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8097 	beq.w	8008630 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800850a:	e091      	b.n	8008630 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	2208      	movs	r2, #8
 8008516:	409a      	lsls	r2, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8088 	beq.w	8008632 <HAL_DMA_IRQHandler+0xe0e>
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8082 	beq.w	8008632 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a41      	ldr	r2, [pc, #260]	; (8008638 <HAL_DMA_IRQHandler+0xe14>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d04a      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a3f      	ldr	r2, [pc, #252]	; (800863c <HAL_DMA_IRQHandler+0xe18>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d045      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a3e      	ldr	r2, [pc, #248]	; (8008640 <HAL_DMA_IRQHandler+0xe1c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d040      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3c      	ldr	r2, [pc, #240]	; (8008644 <HAL_DMA_IRQHandler+0xe20>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d03b      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a3b      	ldr	r2, [pc, #236]	; (8008648 <HAL_DMA_IRQHandler+0xe24>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d036      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a39      	ldr	r2, [pc, #228]	; (800864c <HAL_DMA_IRQHandler+0xe28>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d031      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a38      	ldr	r2, [pc, #224]	; (8008650 <HAL_DMA_IRQHandler+0xe2c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d02c      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a36      	ldr	r2, [pc, #216]	; (8008654 <HAL_DMA_IRQHandler+0xe30>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d027      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a35      	ldr	r2, [pc, #212]	; (8008658 <HAL_DMA_IRQHandler+0xe34>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d022      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a33      	ldr	r2, [pc, #204]	; (800865c <HAL_DMA_IRQHandler+0xe38>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d01d      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a32      	ldr	r2, [pc, #200]	; (8008660 <HAL_DMA_IRQHandler+0xe3c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d018      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a30      	ldr	r2, [pc, #192]	; (8008664 <HAL_DMA_IRQHandler+0xe40>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d013      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a2f      	ldr	r2, [pc, #188]	; (8008668 <HAL_DMA_IRQHandler+0xe44>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00e      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a2d      	ldr	r2, [pc, #180]	; (800866c <HAL_DMA_IRQHandler+0xe48>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d009      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <HAL_DMA_IRQHandler+0xe4c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d004      	beq.n	80085ce <HAL_DMA_IRQHandler+0xdaa>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a2a      	ldr	r2, [pc, #168]	; (8008674 <HAL_DMA_IRQHandler+0xe50>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d108      	bne.n	80085e0 <HAL_DMA_IRQHandler+0xdbc>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 021c 	bic.w	r2, r2, #28
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e007      	b.n	80085f0 <HAL_DMA_IRQHandler+0xdcc>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 020e 	bic.w	r2, r2, #14
 80085ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2201      	movs	r2, #1
 80085fa:	409a      	lsls	r2, r3
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
 8008626:	e004      	b.n	8008632 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008628:	bf00      	nop
 800862a:	e002      	b.n	8008632 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800862c:	bf00      	nop
 800862e:	e000      	b.n	8008632 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008630:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008632:	3728      	adds	r7, #40	; 0x28
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	40020010 	.word	0x40020010
 800863c:	40020028 	.word	0x40020028
 8008640:	40020040 	.word	0x40020040
 8008644:	40020058 	.word	0x40020058
 8008648:	40020070 	.word	0x40020070
 800864c:	40020088 	.word	0x40020088
 8008650:	400200a0 	.word	0x400200a0
 8008654:	400200b8 	.word	0x400200b8
 8008658:	40020410 	.word	0x40020410
 800865c:	40020428 	.word	0x40020428
 8008660:	40020440 	.word	0x40020440
 8008664:	40020458 	.word	0x40020458
 8008668:	40020470 	.word	0x40020470
 800866c:	40020488 	.word	0x40020488
 8008670:	400204a0 	.word	0x400204a0
 8008674:	400204b8 	.word	0x400204b8

08008678 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008684:	4618      	mov	r0, r3
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a7f      	ldr	r2, [pc, #508]	; (80088ac <DMA_SetConfig+0x21c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d072      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a7d      	ldr	r2, [pc, #500]	; (80088b0 <DMA_SetConfig+0x220>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d06d      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a7c      	ldr	r2, [pc, #496]	; (80088b4 <DMA_SetConfig+0x224>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d068      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a7a      	ldr	r2, [pc, #488]	; (80088b8 <DMA_SetConfig+0x228>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d063      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a79      	ldr	r2, [pc, #484]	; (80088bc <DMA_SetConfig+0x22c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d05e      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a77      	ldr	r2, [pc, #476]	; (80088c0 <DMA_SetConfig+0x230>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d059      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a76      	ldr	r2, [pc, #472]	; (80088c4 <DMA_SetConfig+0x234>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d054      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a74      	ldr	r2, [pc, #464]	; (80088c8 <DMA_SetConfig+0x238>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d04f      	beq.n	800879a <DMA_SetConfig+0x10a>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a73      	ldr	r2, [pc, #460]	; (80088cc <DMA_SetConfig+0x23c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d04a      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a71      	ldr	r2, [pc, #452]	; (80088d0 <DMA_SetConfig+0x240>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d045      	beq.n	800879a <DMA_SetConfig+0x10a>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a70      	ldr	r2, [pc, #448]	; (80088d4 <DMA_SetConfig+0x244>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d040      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a6e      	ldr	r2, [pc, #440]	; (80088d8 <DMA_SetConfig+0x248>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d03b      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a6d      	ldr	r2, [pc, #436]	; (80088dc <DMA_SetConfig+0x24c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d036      	beq.n	800879a <DMA_SetConfig+0x10a>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a6b      	ldr	r2, [pc, #428]	; (80088e0 <DMA_SetConfig+0x250>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d031      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a6a      	ldr	r2, [pc, #424]	; (80088e4 <DMA_SetConfig+0x254>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d02c      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a68      	ldr	r2, [pc, #416]	; (80088e8 <DMA_SetConfig+0x258>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d027      	beq.n	800879a <DMA_SetConfig+0x10a>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a67      	ldr	r2, [pc, #412]	; (80088ec <DMA_SetConfig+0x25c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d022      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a65      	ldr	r2, [pc, #404]	; (80088f0 <DMA_SetConfig+0x260>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01d      	beq.n	800879a <DMA_SetConfig+0x10a>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a64      	ldr	r2, [pc, #400]	; (80088f4 <DMA_SetConfig+0x264>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d018      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a62      	ldr	r2, [pc, #392]	; (80088f8 <DMA_SetConfig+0x268>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a61      	ldr	r2, [pc, #388]	; (80088fc <DMA_SetConfig+0x26c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <DMA_SetConfig+0x10a>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a5f      	ldr	r2, [pc, #380]	; (8008900 <DMA_SetConfig+0x270>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d009      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a5e      	ldr	r2, [pc, #376]	; (8008904 <DMA_SetConfig+0x274>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <DMA_SetConfig+0x10a>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a5c      	ldr	r2, [pc, #368]	; (8008908 <DMA_SetConfig+0x278>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d101      	bne.n	800879e <DMA_SetConfig+0x10e>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <DMA_SetConfig+0x110>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00d      	beq.n	80087c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d004      	beq.n	80087c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a39      	ldr	r2, [pc, #228]	; (80088ac <DMA_SetConfig+0x21c>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d04a      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a38      	ldr	r2, [pc, #224]	; (80088b0 <DMA_SetConfig+0x220>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d045      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a36      	ldr	r2, [pc, #216]	; (80088b4 <DMA_SetConfig+0x224>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d040      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a35      	ldr	r2, [pc, #212]	; (80088b8 <DMA_SetConfig+0x228>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d03b      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a33      	ldr	r2, [pc, #204]	; (80088bc <DMA_SetConfig+0x22c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d036      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a32      	ldr	r2, [pc, #200]	; (80088c0 <DMA_SetConfig+0x230>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d031      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a30      	ldr	r2, [pc, #192]	; (80088c4 <DMA_SetConfig+0x234>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d02c      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a2f      	ldr	r2, [pc, #188]	; (80088c8 <DMA_SetConfig+0x238>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d027      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a2d      	ldr	r2, [pc, #180]	; (80088cc <DMA_SetConfig+0x23c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d022      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a2c      	ldr	r2, [pc, #176]	; (80088d0 <DMA_SetConfig+0x240>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d01d      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <DMA_SetConfig+0x244>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d018      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a29      	ldr	r2, [pc, #164]	; (80088d8 <DMA_SetConfig+0x248>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d013      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a27      	ldr	r2, [pc, #156]	; (80088dc <DMA_SetConfig+0x24c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00e      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a26      	ldr	r2, [pc, #152]	; (80088e0 <DMA_SetConfig+0x250>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d009      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a24      	ldr	r2, [pc, #144]	; (80088e4 <DMA_SetConfig+0x254>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d004      	beq.n	8008860 <DMA_SetConfig+0x1d0>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a23      	ldr	r2, [pc, #140]	; (80088e8 <DMA_SetConfig+0x258>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d101      	bne.n	8008864 <DMA_SetConfig+0x1d4>
 8008860:	2301      	movs	r3, #1
 8008862:	e000      	b.n	8008866 <DMA_SetConfig+0x1d6>
 8008864:	2300      	movs	r3, #0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d059      	beq.n	800891e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886e:	f003 031f 	and.w	r3, r3, #31
 8008872:	223f      	movs	r2, #63	; 0x3f
 8008874:	409a      	lsls	r2, r3
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008888:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d138      	bne.n	800890c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80088aa:	e086      	b.n	80089ba <DMA_SetConfig+0x32a>
 80088ac:	40020010 	.word	0x40020010
 80088b0:	40020028 	.word	0x40020028
 80088b4:	40020040 	.word	0x40020040
 80088b8:	40020058 	.word	0x40020058
 80088bc:	40020070 	.word	0x40020070
 80088c0:	40020088 	.word	0x40020088
 80088c4:	400200a0 	.word	0x400200a0
 80088c8:	400200b8 	.word	0x400200b8
 80088cc:	40020410 	.word	0x40020410
 80088d0:	40020428 	.word	0x40020428
 80088d4:	40020440 	.word	0x40020440
 80088d8:	40020458 	.word	0x40020458
 80088dc:	40020470 	.word	0x40020470
 80088e0:	40020488 	.word	0x40020488
 80088e4:	400204a0 	.word	0x400204a0
 80088e8:	400204b8 	.word	0x400204b8
 80088ec:	58025408 	.word	0x58025408
 80088f0:	5802541c 	.word	0x5802541c
 80088f4:	58025430 	.word	0x58025430
 80088f8:	58025444 	.word	0x58025444
 80088fc:	58025458 	.word	0x58025458
 8008900:	5802546c 	.word	0x5802546c
 8008904:	58025480 	.word	0x58025480
 8008908:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
}
 800891c:	e04d      	b.n	80089ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a29      	ldr	r2, [pc, #164]	; (80089c8 <DMA_SetConfig+0x338>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d022      	beq.n	800896e <DMA_SetConfig+0x2de>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a27      	ldr	r2, [pc, #156]	; (80089cc <DMA_SetConfig+0x33c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d01d      	beq.n	800896e <DMA_SetConfig+0x2de>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a26      	ldr	r2, [pc, #152]	; (80089d0 <DMA_SetConfig+0x340>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d018      	beq.n	800896e <DMA_SetConfig+0x2de>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a24      	ldr	r2, [pc, #144]	; (80089d4 <DMA_SetConfig+0x344>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d013      	beq.n	800896e <DMA_SetConfig+0x2de>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a23      	ldr	r2, [pc, #140]	; (80089d8 <DMA_SetConfig+0x348>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00e      	beq.n	800896e <DMA_SetConfig+0x2de>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a21      	ldr	r2, [pc, #132]	; (80089dc <DMA_SetConfig+0x34c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d009      	beq.n	800896e <DMA_SetConfig+0x2de>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a20      	ldr	r2, [pc, #128]	; (80089e0 <DMA_SetConfig+0x350>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d004      	beq.n	800896e <DMA_SetConfig+0x2de>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <DMA_SetConfig+0x354>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d101      	bne.n	8008972 <DMA_SetConfig+0x2e2>
 800896e:	2301      	movs	r3, #1
 8008970:	e000      	b.n	8008974 <DMA_SetConfig+0x2e4>
 8008972:	2300      	movs	r3, #0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d020      	beq.n	80089ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897c:	f003 031f 	and.w	r3, r3, #31
 8008980:	2201      	movs	r2, #1
 8008982:	409a      	lsls	r2, r3
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d108      	bne.n	80089aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	60da      	str	r2, [r3, #12]
}
 80089a8:	e007      	b.n	80089ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	60da      	str	r2, [r3, #12]
}
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	58025408 	.word	0x58025408
 80089cc:	5802541c 	.word	0x5802541c
 80089d0:	58025430 	.word	0x58025430
 80089d4:	58025444 	.word	0x58025444
 80089d8:	58025458 	.word	0x58025458
 80089dc:	5802546c 	.word	0x5802546c
 80089e0:	58025480 	.word	0x58025480
 80089e4:	58025494 	.word	0x58025494

080089e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a42      	ldr	r2, [pc, #264]	; (8008b00 <DMA_CalcBaseAndBitshift+0x118>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d04a      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a41      	ldr	r2, [pc, #260]	; (8008b04 <DMA_CalcBaseAndBitshift+0x11c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d045      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a3f      	ldr	r2, [pc, #252]	; (8008b08 <DMA_CalcBaseAndBitshift+0x120>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d040      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a3e      	ldr	r2, [pc, #248]	; (8008b0c <DMA_CalcBaseAndBitshift+0x124>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d03b      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a3c      	ldr	r2, [pc, #240]	; (8008b10 <DMA_CalcBaseAndBitshift+0x128>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d036      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a3b      	ldr	r2, [pc, #236]	; (8008b14 <DMA_CalcBaseAndBitshift+0x12c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d031      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a39      	ldr	r2, [pc, #228]	; (8008b18 <DMA_CalcBaseAndBitshift+0x130>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d02c      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a38      	ldr	r2, [pc, #224]	; (8008b1c <DMA_CalcBaseAndBitshift+0x134>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d027      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a36      	ldr	r2, [pc, #216]	; (8008b20 <DMA_CalcBaseAndBitshift+0x138>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d022      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a35      	ldr	r2, [pc, #212]	; (8008b24 <DMA_CalcBaseAndBitshift+0x13c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d01d      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <DMA_CalcBaseAndBitshift+0x140>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d018      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a32      	ldr	r2, [pc, #200]	; (8008b2c <DMA_CalcBaseAndBitshift+0x144>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d013      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a30      	ldr	r2, [pc, #192]	; (8008b30 <DMA_CalcBaseAndBitshift+0x148>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00e      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a2f      	ldr	r2, [pc, #188]	; (8008b34 <DMA_CalcBaseAndBitshift+0x14c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d009      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a2d      	ldr	r2, [pc, #180]	; (8008b38 <DMA_CalcBaseAndBitshift+0x150>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d004      	beq.n	8008a90 <DMA_CalcBaseAndBitshift+0xa8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a2c      	ldr	r2, [pc, #176]	; (8008b3c <DMA_CalcBaseAndBitshift+0x154>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d101      	bne.n	8008a94 <DMA_CalcBaseAndBitshift+0xac>
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <DMA_CalcBaseAndBitshift+0xae>
 8008a94:	2300      	movs	r3, #0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d024      	beq.n	8008ae4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	3b10      	subs	r3, #16
 8008aa2:	4a27      	ldr	r2, [pc, #156]	; (8008b40 <DMA_CalcBaseAndBitshift+0x158>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	4a24      	ldr	r2, [pc, #144]	; (8008b44 <DMA_CalcBaseAndBitshift+0x15c>)
 8008ab4:	5cd3      	ldrb	r3, [r2, r3]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d908      	bls.n	8008ad4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b1f      	ldr	r3, [pc, #124]	; (8008b48 <DMA_CalcBaseAndBitshift+0x160>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	659a      	str	r2, [r3, #88]	; 0x58
 8008ad2:	e00d      	b.n	8008af0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4b1b      	ldr	r3, [pc, #108]	; (8008b48 <DMA_CalcBaseAndBitshift+0x160>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8008ae2:	e005      	b.n	8008af0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	40020010 	.word	0x40020010
 8008b04:	40020028 	.word	0x40020028
 8008b08:	40020040 	.word	0x40020040
 8008b0c:	40020058 	.word	0x40020058
 8008b10:	40020070 	.word	0x40020070
 8008b14:	40020088 	.word	0x40020088
 8008b18:	400200a0 	.word	0x400200a0
 8008b1c:	400200b8 	.word	0x400200b8
 8008b20:	40020410 	.word	0x40020410
 8008b24:	40020428 	.word	0x40020428
 8008b28:	40020440 	.word	0x40020440
 8008b2c:	40020458 	.word	0x40020458
 8008b30:	40020470 	.word	0x40020470
 8008b34:	40020488 	.word	0x40020488
 8008b38:	400204a0 	.word	0x400204a0
 8008b3c:	400204b8 	.word	0x400204b8
 8008b40:	aaaaaaab 	.word	0xaaaaaaab
 8008b44:	08017870 	.word	0x08017870
 8008b48:	fffffc00 	.word	0xfffffc00

08008b4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d120      	bne.n	8008ba2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d858      	bhi.n	8008c1a <DMA_CheckFifoParam+0xce>
 8008b68:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <DMA_CheckFifoParam+0x24>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b93 	.word	0x08008b93
 8008b78:	08008b81 	.word	0x08008b81
 8008b7c:	08008c1b 	.word	0x08008c1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d048      	beq.n	8008c1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b90:	e045      	b.n	8008c1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b9a:	d142      	bne.n	8008c22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ba0:	e03f      	b.n	8008c22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008baa:	d123      	bne.n	8008bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d838      	bhi.n	8008c26 <DMA_CheckFifoParam+0xda>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <DMA_CheckFifoParam+0x70>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bd3 	.word	0x08008bd3
 8008bc4:	08008bcd 	.word	0x08008bcd
 8008bc8:	08008be5 	.word	0x08008be5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	73fb      	strb	r3, [r7, #15]
        break;
 8008bd0:	e030      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d025      	beq.n	8008c2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008be2:	e022      	b.n	8008c2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bec:	d11f      	bne.n	8008c2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008bf2:	e01c      	b.n	8008c2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d902      	bls.n	8008c02 <DMA_CheckFifoParam+0xb6>
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d003      	beq.n	8008c08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008c00:	e018      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	73fb      	strb	r3, [r7, #15]
        break;
 8008c06:	e015      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00e      	beq.n	8008c32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
    break;
 8008c18:	e00b      	b.n	8008c32 <DMA_CheckFifoParam+0xe6>
        break;
 8008c1a:	bf00      	nop
 8008c1c:	e00a      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        break;
 8008c1e:	bf00      	nop
 8008c20:	e008      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        break;
 8008c22:	bf00      	nop
 8008c24:	e006      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        break;
 8008c26:	bf00      	nop
 8008c28:	e004      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        break;
 8008c2a:	bf00      	nop
 8008c2c:	e002      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
        break;
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <DMA_CheckFifoParam+0xe8>
    break;
 8008c32:	bf00      	nop
    }
  }

  return status;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop

08008c44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a38      	ldr	r2, [pc, #224]	; (8008d38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d022      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a36      	ldr	r2, [pc, #216]	; (8008d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01d      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a35      	ldr	r2, [pc, #212]	; (8008d40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d018      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a33      	ldr	r2, [pc, #204]	; (8008d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d013      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a32      	ldr	r2, [pc, #200]	; (8008d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00e      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a30      	ldr	r2, [pc, #192]	; (8008d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d009      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d004      	beq.n	8008ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d101      	bne.n	8008ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01a      	beq.n	8008ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	3b08      	subs	r3, #8
 8008cb4:	4a28      	ldr	r2, [pc, #160]	; (8008d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cba:	091b      	lsrs	r3, r3, #4
 8008cbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4b26      	ldr	r3, [pc, #152]	; (8008d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a24      	ldr	r2, [pc, #144]	; (8008d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008cd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f003 031f 	and.w	r3, r3, #31
 8008cd8:	2201      	movs	r2, #1
 8008cda:	409a      	lsls	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ce0:	e024      	b.n	8008d2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	3b10      	subs	r3, #16
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008cec:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d806      	bhi.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d902      	bls.n	8008d0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3308      	adds	r3, #8
 8008d08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	461a      	mov	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a16      	ldr	r2, [pc, #88]	; (8008d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008d1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	2201      	movs	r2, #1
 8008d26:	409a      	lsls	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d2c:	bf00      	nop
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	58025408 	.word	0x58025408
 8008d3c:	5802541c 	.word	0x5802541c
 8008d40:	58025430 	.word	0x58025430
 8008d44:	58025444 	.word	0x58025444
 8008d48:	58025458 	.word	0x58025458
 8008d4c:	5802546c 	.word	0x5802546c
 8008d50:	58025480 	.word	0x58025480
 8008d54:	58025494 	.word	0x58025494
 8008d58:	cccccccd 	.word	0xcccccccd
 8008d5c:	16009600 	.word	0x16009600
 8008d60:	58025880 	.word	0x58025880
 8008d64:	aaaaaaab 	.word	0xaaaaaaab
 8008d68:	400204b8 	.word	0x400204b8
 8008d6c:	4002040f 	.word	0x4002040f
 8008d70:	10008200 	.word	0x10008200
 8008d74:	40020880 	.word	0x40020880

08008d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d04a      	beq.n	8008e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d847      	bhi.n	8008e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a25      	ldr	r2, [pc, #148]	; (8008e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d022      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a24      	ldr	r2, [pc, #144]	; (8008e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d01d      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a22      	ldr	r2, [pc, #136]	; (8008e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d018      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a21      	ldr	r2, [pc, #132]	; (8008e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d013      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a1f      	ldr	r2, [pc, #124]	; (8008e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00e      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a1e      	ldr	r2, [pc, #120]	; (8008e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d009      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a1c      	ldr	r2, [pc, #112]	; (8008e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d004      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d101      	bne.n	8008de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008de8:	2300      	movs	r3, #0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008e00:	671a      	str	r2, [r3, #112]	; 0x70
 8008e02:	e009      	b.n	8008e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4b14      	ldr	r3, [pc, #80]	; (8008e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a11      	ldr	r2, [pc, #68]	; (8008e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008e16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	409a      	lsls	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	58025408 	.word	0x58025408
 8008e34:	5802541c 	.word	0x5802541c
 8008e38:	58025430 	.word	0x58025430
 8008e3c:	58025444 	.word	0x58025444
 8008e40:	58025458 	.word	0x58025458
 8008e44:	5802546c 	.word	0x5802546c
 8008e48:	58025480 	.word	0x58025480
 8008e4c:	58025494 	.word	0x58025494
 8008e50:	1600963f 	.word	0x1600963f
 8008e54:	58025940 	.word	0x58025940
 8008e58:	1000823f 	.word	0x1000823f
 8008e5c:	40020940 	.word	0x40020940

08008e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b089      	sub	sp, #36	; 0x24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e6e:	4b89      	ldr	r3, [pc, #548]	; (8009094 <HAL_GPIO_Init+0x234>)
 8008e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e72:	e194      	b.n	800919e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	2101      	movs	r1, #1
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e80:	4013      	ands	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 8186 	beq.w	8009198 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d005      	beq.n	8008ea4 <HAL_GPIO_Init+0x44>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d130      	bne.n	8008f06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	2203      	movs	r2, #3
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008eda:	2201      	movs	r2, #1
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	091b      	lsrs	r3, r3, #4
 8008ef0:	f003 0201 	and.w	r2, r3, #1
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d017      	beq.n	8008f42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	43db      	mvns	r3, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4013      	ands	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d123      	bne.n	8008f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	08da      	lsrs	r2, r3, #3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3208      	adds	r2, #8
 8008f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	220f      	movs	r2, #15
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	08da      	lsrs	r2, r3, #3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3208      	adds	r2, #8
 8008f90:	69b9      	ldr	r1, [r7, #24]
 8008f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa6:	43db      	mvns	r3, r3
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	4013      	ands	r3, r2
 8008fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f003 0203 	and.w	r2, r3, #3
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80e0 	beq.w	8009198 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fd8:	4b2f      	ldr	r3, [pc, #188]	; (8009098 <HAL_GPIO_Init+0x238>)
 8008fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fde:	4a2e      	ldr	r2, [pc, #184]	; (8009098 <HAL_GPIO_Init+0x238>)
 8008fe0:	f043 0302 	orr.w	r3, r3, #2
 8008fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008fe8:	4b2b      	ldr	r3, [pc, #172]	; (8009098 <HAL_GPIO_Init+0x238>)
 8008fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ff6:	4a29      	ldr	r2, [pc, #164]	; (800909c <HAL_GPIO_Init+0x23c>)
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	089b      	lsrs	r3, r3, #2
 8008ffc:	3302      	adds	r3, #2
 8008ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	220f      	movs	r2, #15
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	43db      	mvns	r3, r3
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	4013      	ands	r3, r2
 8009018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a20      	ldr	r2, [pc, #128]	; (80090a0 <HAL_GPIO_Init+0x240>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d052      	beq.n	80090c8 <HAL_GPIO_Init+0x268>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a1f      	ldr	r2, [pc, #124]	; (80090a4 <HAL_GPIO_Init+0x244>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d031      	beq.n	800908e <HAL_GPIO_Init+0x22e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a1e      	ldr	r2, [pc, #120]	; (80090a8 <HAL_GPIO_Init+0x248>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d02b      	beq.n	800908a <HAL_GPIO_Init+0x22a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a1d      	ldr	r2, [pc, #116]	; (80090ac <HAL_GPIO_Init+0x24c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d025      	beq.n	8009086 <HAL_GPIO_Init+0x226>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1c      	ldr	r2, [pc, #112]	; (80090b0 <HAL_GPIO_Init+0x250>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d01f      	beq.n	8009082 <HAL_GPIO_Init+0x222>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a1b      	ldr	r2, [pc, #108]	; (80090b4 <HAL_GPIO_Init+0x254>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d019      	beq.n	800907e <HAL_GPIO_Init+0x21e>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a1a      	ldr	r2, [pc, #104]	; (80090b8 <HAL_GPIO_Init+0x258>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d013      	beq.n	800907a <HAL_GPIO_Init+0x21a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a19      	ldr	r2, [pc, #100]	; (80090bc <HAL_GPIO_Init+0x25c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d00d      	beq.n	8009076 <HAL_GPIO_Init+0x216>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a18      	ldr	r2, [pc, #96]	; (80090c0 <HAL_GPIO_Init+0x260>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d007      	beq.n	8009072 <HAL_GPIO_Init+0x212>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <HAL_GPIO_Init+0x264>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d101      	bne.n	800906e <HAL_GPIO_Init+0x20e>
 800906a:	2309      	movs	r3, #9
 800906c:	e02d      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 800906e:	230a      	movs	r3, #10
 8009070:	e02b      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 8009072:	2308      	movs	r3, #8
 8009074:	e029      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 8009076:	2307      	movs	r3, #7
 8009078:	e027      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 800907a:	2306      	movs	r3, #6
 800907c:	e025      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 800907e:	2305      	movs	r3, #5
 8009080:	e023      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 8009082:	2304      	movs	r3, #4
 8009084:	e021      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 8009086:	2303      	movs	r3, #3
 8009088:	e01f      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 800908a:	2302      	movs	r3, #2
 800908c:	e01d      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 800908e:	2301      	movs	r3, #1
 8009090:	e01b      	b.n	80090ca <HAL_GPIO_Init+0x26a>
 8009092:	bf00      	nop
 8009094:	58000080 	.word	0x58000080
 8009098:	58024400 	.word	0x58024400
 800909c:	58000400 	.word	0x58000400
 80090a0:	58020000 	.word	0x58020000
 80090a4:	58020400 	.word	0x58020400
 80090a8:	58020800 	.word	0x58020800
 80090ac:	58020c00 	.word	0x58020c00
 80090b0:	58021000 	.word	0x58021000
 80090b4:	58021400 	.word	0x58021400
 80090b8:	58021800 	.word	0x58021800
 80090bc:	58021c00 	.word	0x58021c00
 80090c0:	58022000 	.word	0x58022000
 80090c4:	58022400 	.word	0x58022400
 80090c8:	2300      	movs	r3, #0
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	f002 0203 	and.w	r2, r2, #3
 80090d0:	0092      	lsls	r2, r2, #2
 80090d2:	4093      	lsls	r3, r2
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090da:	4938      	ldr	r1, [pc, #224]	; (80091bc <HAL_GPIO_Init+0x35c>)
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	089b      	lsrs	r3, r3, #2
 80090e0:	3302      	adds	r3, #2
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80090e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	4013      	ands	r3, r2
 80090f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800910e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	43db      	mvns	r3, r3
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	4013      	ands	r3, r2
 8009126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800913c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	43db      	mvns	r3, r3
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	4013      	ands	r3, r2
 8009152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	4313      	orrs	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	43db      	mvns	r3, r3
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	4013      	ands	r3, r2
 800917c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	3301      	adds	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	fa22 f303 	lsr.w	r3, r2, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f47f ae63 	bne.w	8008e74 <HAL_GPIO_Init+0x14>
  }
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	3724      	adds	r7, #36	; 0x24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	58000400 	.word	0x58000400

080091c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	887b      	ldrh	r3, [r7, #2]
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091d8:	2301      	movs	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
 80091dc:	e001      	b.n	80091e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
 80091fc:	4613      	mov	r3, r2
 80091fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009200:	787b      	ldrb	r3, [r7, #1]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009206:	887a      	ldrh	r2, [r7, #2]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800920c:	e003      	b.n	8009216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800920e:	887b      	ldrh	r3, [r7, #2]
 8009210:	041a      	lsls	r2, r3, #16
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
	...

08009224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e08b      	b.n	800934e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7fa f8c6 	bl	80033dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2224      	movs	r2, #36	; 0x24
 8009254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 0201 	bic.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d107      	bne.n	800929e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	e006      	b.n	80092ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80092aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d108      	bne.n	80092c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092c2:	605a      	str	r2, [r3, #4]
 80092c4:	e007      	b.n	80092d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6859      	ldr	r1, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	4b1d      	ldr	r3, [pc, #116]	; (8009358 <HAL_I2C_Init+0x134>)
 80092e2:	430b      	orrs	r3, r1
 80092e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69d9      	ldr	r1, [r3, #28]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a1a      	ldr	r2, [r3, #32]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0201 	orr.w	r2, r2, #1
 800932e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	02008000 	.word	0x02008000

0800935c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	607a      	str	r2, [r7, #4]
 8009366:	461a      	mov	r2, r3
 8009368:	460b      	mov	r3, r1
 800936a:	817b      	strh	r3, [r7, #10]
 800936c:	4613      	mov	r3, r2
 800936e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b20      	cmp	r3, #32
 800937a:	f040 80fd 	bne.w	8009578 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_I2C_Master_Transmit+0x30>
 8009388:	2302      	movs	r3, #2
 800938a:	e0f6      	b.n	800957a <HAL_I2C_Master_Transmit+0x21e>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009394:	f7fa fdf4 	bl	8003f80 <HAL_GetTick>
 8009398:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	2319      	movs	r3, #25
 80093a0:	2201      	movs	r2, #1
 80093a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fa0a 	bl	80097c0 <I2C_WaitOnFlagUntilTimeout>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e0e1      	b.n	800957a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2221      	movs	r2, #33	; 0x21
 80093ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2210      	movs	r2, #16
 80093c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	893a      	ldrh	r2, [r7, #8]
 80093d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2bff      	cmp	r3, #255	; 0xff
 80093e6:	d906      	bls.n	80093f6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	22ff      	movs	r2, #255	; 0xff
 80093ec:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80093ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e007      	b.n	8009406 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009404:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940a:	2b00      	cmp	r3, #0
 800940c:	d024      	beq.n	8009458 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	781a      	ldrb	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009442:	b2db      	uxtb	r3, r3
 8009444:	3301      	adds	r3, #1
 8009446:	b2da      	uxtb	r2, r3
 8009448:	8979      	ldrh	r1, [r7, #10]
 800944a:	4b4e      	ldr	r3, [pc, #312]	; (8009584 <HAL_I2C_Master_Transmit+0x228>)
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fc05 	bl	8009c60 <I2C_TransferConfig>
 8009456:	e066      	b.n	8009526 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945c:	b2da      	uxtb	r2, r3
 800945e:	8979      	ldrh	r1, [r7, #10]
 8009460:	4b48      	ldr	r3, [pc, #288]	; (8009584 <HAL_I2C_Master_Transmit+0x228>)
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fbfa 	bl	8009c60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800946c:	e05b      	b.n	8009526 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	6a39      	ldr	r1, [r7, #32]
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 f9fd 	bl	8009872 <I2C_WaitOnTXISFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e07b      	b.n	800957a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	781a      	ldrb	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d034      	beq.n	8009526 <HAL_I2C_Master_Transmit+0x1ca>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d130      	bne.n	8009526 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2200      	movs	r2, #0
 80094cc:	2180      	movs	r1, #128	; 0x80
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f976 	bl	80097c0 <I2C_WaitOnFlagUntilTimeout>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e04d      	b.n	800957a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2bff      	cmp	r3, #255	; 0xff
 80094e6:	d90e      	bls.n	8009506 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	22ff      	movs	r2, #255	; 0xff
 80094ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	8979      	ldrh	r1, [r7, #10]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 fbae 	bl	8009c60 <I2C_TransferConfig>
 8009504:	e00f      	b.n	8009526 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009514:	b2da      	uxtb	r2, r3
 8009516:	8979      	ldrh	r1, [r7, #10]
 8009518:	2300      	movs	r3, #0
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fb9d 	bl	8009c60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952a:	b29b      	uxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d19e      	bne.n	800946e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	6a39      	ldr	r1, [r7, #32]
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f9e3 	bl	8009900 <I2C_WaitOnSTOPFlagUntilTimeout>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e01a      	b.n	800957a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2220      	movs	r2, #32
 800954a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6859      	ldr	r1, [r3, #4]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <HAL_I2C_Master_Transmit+0x22c>)
 8009558:	400b      	ands	r3, r1
 800955a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e000      	b.n	800957a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009578:	2302      	movs	r3, #2
  }
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	80002000 	.word	0x80002000
 8009588:	fe00e800 	.word	0xfe00e800

0800958c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	607a      	str	r2, [r7, #4]
 8009596:	461a      	mov	r2, r3
 8009598:	460b      	mov	r3, r1
 800959a:	817b      	strh	r3, [r7, #10]
 800959c:	4613      	mov	r3, r2
 800959e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	f040 80db 	bne.w	8009764 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_I2C_Master_Receive+0x30>
 80095b8:	2302      	movs	r3, #2
 80095ba:	e0d4      	b.n	8009766 <HAL_I2C_Master_Receive+0x1da>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80095c4:	f7fa fcdc 	bl	8003f80 <HAL_GetTick>
 80095c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	2319      	movs	r3, #25
 80095d0:	2201      	movs	r2, #1
 80095d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f8f2 	bl	80097c0 <I2C_WaitOnFlagUntilTimeout>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e0bf      	b.n	8009766 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2222      	movs	r2, #34	; 0x22
 80095ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2210      	movs	r2, #16
 80095f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	893a      	ldrh	r2, [r7, #8]
 8009606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009612:	b29b      	uxth	r3, r3
 8009614:	2bff      	cmp	r3, #255	; 0xff
 8009616:	d90e      	bls.n	8009636 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	22ff      	movs	r2, #255	; 0xff
 800961c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009622:	b2da      	uxtb	r2, r3
 8009624:	8979      	ldrh	r1, [r7, #10]
 8009626:	4b52      	ldr	r3, [pc, #328]	; (8009770 <HAL_I2C_Master_Receive+0x1e4>)
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 fb16 	bl	8009c60 <I2C_TransferConfig>
 8009634:	e06d      	b.n	8009712 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009644:	b2da      	uxtb	r2, r3
 8009646:	8979      	ldrh	r1, [r7, #10]
 8009648:	4b49      	ldr	r3, [pc, #292]	; (8009770 <HAL_I2C_Master_Receive+0x1e4>)
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fb05 	bl	8009c60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009656:	e05c      	b.n	8009712 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	6a39      	ldr	r1, [r7, #32]
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f993 	bl	8009988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e07c      	b.n	8009766 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009688:	3b01      	subs	r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d034      	beq.n	8009712 <HAL_I2C_Master_Receive+0x186>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d130      	bne.n	8009712 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	2200      	movs	r2, #0
 80096b8:	2180      	movs	r1, #128	; 0x80
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f880 	bl	80097c0 <I2C_WaitOnFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e04d      	b.n	8009766 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2bff      	cmp	r3, #255	; 0xff
 80096d2:	d90e      	bls.n	80096f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	22ff      	movs	r2, #255	; 0xff
 80096d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	8979      	ldrh	r1, [r7, #10]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 fab8 	bl	8009c60 <I2C_TransferConfig>
 80096f0:	e00f      	b.n	8009712 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009700:	b2da      	uxtb	r2, r3
 8009702:	8979      	ldrh	r1, [r7, #10]
 8009704:	2300      	movs	r3, #0
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 faa7 	bl	8009c60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009716:	b29b      	uxth	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d19d      	bne.n	8009658 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	6a39      	ldr	r1, [r7, #32]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f8ed 	bl	8009900 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e01a      	b.n	8009766 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2220      	movs	r2, #32
 8009736:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6859      	ldr	r1, [r3, #4]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <HAL_I2C_Master_Receive+0x1e8>)
 8009744:	400b      	ands	r3, r1
 8009746:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	e000      	b.n	8009766 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009764:	2302      	movs	r3, #2
  }
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	80002400 	.word	0x80002400
 8009774:	fe00e800 	.word	0xfe00e800

08009778 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b02      	cmp	r3, #2
 800978c:	d103      	bne.n	8009796 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d007      	beq.n	80097b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699a      	ldr	r2, [r3, #24]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	619a      	str	r2, [r3, #24]
  }
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	4613      	mov	r3, r2
 80097ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097d0:	e03b      	b.n	800984a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f962 	bl	8009aa0 <I2C_IsErrorOccurred>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e041      	b.n	800986a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ec:	d02d      	beq.n	800984a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ee:	f7fa fbc7 	bl	8003f80 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d302      	bcc.n	8009804 <I2C_WaitOnFlagUntilTimeout+0x44>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d122      	bne.n	800984a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4013      	ands	r3, r2
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	429a      	cmp	r2, r3
 8009812:	bf0c      	ite	eq
 8009814:	2301      	moveq	r3, #1
 8009816:	2300      	movne	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	429a      	cmp	r2, r3
 8009820:	d113      	bne.n	800984a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009826:	f043 0220 	orr.w	r2, r3, #32
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e00f      	b.n	800986a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699a      	ldr	r2, [r3, #24]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	4013      	ands	r3, r2
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	429a      	cmp	r2, r3
 8009858:	bf0c      	ite	eq
 800985a:	2301      	moveq	r3, #1
 800985c:	2300      	movne	r3, #0
 800985e:	b2db      	uxtb	r3, r3
 8009860:	461a      	mov	r2, r3
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	429a      	cmp	r2, r3
 8009866:	d0b4      	beq.n	80097d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800987e:	e033      	b.n	80098e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	68b9      	ldr	r1, [r7, #8]
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 f90b 	bl	8009aa0 <I2C_IsErrorOccurred>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e031      	b.n	80098f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989a:	d025      	beq.n	80098e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989c:	f7fa fb70 	bl	8003f80 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d11a      	bne.n	80098e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d013      	beq.n	80098e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c4:	f043 0220 	orr.w	r2, r3, #32
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e007      	b.n	80098f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d1c4      	bne.n	8009880 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800990c:	e02f      	b.n	800996e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	68b9      	ldr	r1, [r7, #8]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 f8c4 	bl	8009aa0 <I2C_IsErrorOccurred>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e02d      	b.n	800997e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009922:	f7fa fb2d 	bl	8003f80 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	429a      	cmp	r2, r3
 8009930:	d302      	bcc.n	8009938 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11a      	bne.n	800996e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b20      	cmp	r3, #32
 8009944:	d013      	beq.n	800996e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994a:	f043 0220 	orr.w	r2, r3, #32
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2220      	movs	r2, #32
 8009956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e007      	b.n	800997e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f003 0320 	and.w	r3, r3, #32
 8009978:	2b20      	cmp	r3, #32
 800997a:	d1c8      	bne.n	800990e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009998:	e071      	b.n	8009a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f87e 	bl	8009aa0 <I2C_IsErrorOccurred>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f003 0320 	and.w	r3, r3, #32
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d13b      	bne.n	8009a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d138      	bne.n	8009a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d105      	bne.n	80099dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	f003 0310 	and.w	r3, r3, #16
 80099e6:	2b10      	cmp	r3, #16
 80099e8:	d121      	bne.n	8009a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2210      	movs	r2, #16
 80099f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2204      	movs	r2, #4
 80099f6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2220      	movs	r2, #32
 80099fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6859      	ldr	r1, [r3, #4]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009a0c:	400b      	ands	r3, r1
 8009a0e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	75fb      	strb	r3, [r7, #23]
 8009a2c:	e002      	b.n	8009a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009a34:	f7fa faa4 	bl	8003f80 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d119      	bne.n	8009a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d116      	bne.n	8009a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d00f      	beq.n	8009a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	f043 0220 	orr.w	r2, r3, #32
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d002      	beq.n	8009a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d083      	beq.n	800999a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	fe00e800 	.word	0xfe00e800

08009aa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	; 0x28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	f003 0310 	and.w	r3, r3, #16
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d068      	beq.n	8009b9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2210      	movs	r2, #16
 8009ad2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ad4:	e049      	b.n	8009b6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009adc:	d045      	beq.n	8009b6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ade:	f7fa fa4f 	bl	8003f80 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d302      	bcc.n	8009af4 <I2C_IsErrorOccurred+0x54>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d13a      	bne.n	8009b6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b16:	d121      	bne.n	8009b5c <I2C_IsErrorOccurred+0xbc>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b1e:	d01d      	beq.n	8009b5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009b20:	7cfb      	ldrb	r3, [r7, #19]
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d01a      	beq.n	8009b5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b36:	f7fa fa23 	bl	8003f80 <HAL_GetTick>
 8009b3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b3c:	e00e      	b.n	8009b5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b3e:	f7fa fa1f 	bl	8003f80 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	2b19      	cmp	r3, #25
 8009b4a:	d907      	bls.n	8009b5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	f043 0320 	orr.w	r3, r3, #32
 8009b52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b5a:	e006      	b.n	8009b6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	f003 0320 	and.w	r3, r3, #32
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d1e9      	bne.n	8009b3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d003      	beq.n	8009b80 <I2C_IsErrorOccurred+0xe0>
 8009b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0aa      	beq.n	8009ad6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	f043 0304 	orr.w	r3, r3, #4
 8009b96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00b      	beq.n	8009bea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	f043 0308 	orr.w	r3, r3, #8
 8009bd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	f043 0302 	orr.w	r3, r3, #2
 8009bfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01c      	beq.n	8009c4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7ff fdaf 	bl	8009778 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6859      	ldr	r1, [r3, #4]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <I2C_IsErrorOccurred+0x1bc>)
 8009c26:	400b      	ands	r3, r1
 8009c28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	431a      	orrs	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3728      	adds	r7, #40	; 0x28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	fe00e800 	.word	0xfe00e800

08009c60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	607b      	str	r3, [r7, #4]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	817b      	strh	r3, [r7, #10]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c72:	897b      	ldrh	r3, [r7, #10]
 8009c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c78:	7a7b      	ldrb	r3, [r7, #9]
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	0d5b      	lsrs	r3, r3, #21
 8009c9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c9e:	4b08      	ldr	r3, [pc, #32]	; (8009cc0 <I2C_TransferConfig+0x60>)
 8009ca0:	430b      	orrs	r3, r1
 8009ca2:	43db      	mvns	r3, r3
 8009ca4:	ea02 0103 	and.w	r1, r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	03ff63ff 	.word	0x03ff63ff

08009cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b20      	cmp	r3, #32
 8009cd8:	d138      	bne.n	8009d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d101      	bne.n	8009ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e032      	b.n	8009d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2224      	movs	r2, #36	; 0x24
 8009cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0201 	bic.w	r2, r2, #1
 8009d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6819      	ldr	r1, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	430a      	orrs	r2, r1
 8009d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0201 	orr.w	r2, r2, #1
 8009d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	e000      	b.n	8009d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d4c:	2302      	movs	r3, #2
  }
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b20      	cmp	r3, #32
 8009d6e:	d139      	bne.n	8009de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e033      	b.n	8009de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2224      	movs	r2, #36	; 0x24
 8009d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0201 	bic.w	r2, r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0201 	orr.w	r2, r2, #1
 8009dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e000      	b.n	8009de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009de4:	2302      	movs	r3, #2
  }
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
	...

08009df4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e02:	4a0c      	ldr	r2, [pc, #48]	; (8009e34 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	60fb      	str	r3, [r7, #12]
 8009e18:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009e1a:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	4906      	ldr	r1, [pc, #24]	; (8009e38 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	604b      	str	r3, [r1, #4]
}
 8009e26:	bf00      	nop
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
 8009e38:	58000400 	.word	0x58000400

08009e3c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009e48:	4b18      	ldr	r3, [pc, #96]	; (8009eac <HAL_PWR_EnterSTOPMode+0x70>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f023 0201 	bic.w	r2, r3, #1
 8009e50:	4916      	ldr	r1, [pc, #88]	; (8009eac <HAL_PWR_EnterSTOPMode+0x70>)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009e58:	4b14      	ldr	r3, [pc, #80]	; (8009eac <HAL_PWR_EnterSTOPMode+0x70>)
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	4a13      	ldr	r2, [pc, #76]	; (8009eac <HAL_PWR_EnterSTOPMode+0x70>)
 8009e5e:	f023 0305 	bic.w	r3, r3, #5
 8009e62:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009e64:	4b11      	ldr	r3, [pc, #68]	; (8009eac <HAL_PWR_EnterSTOPMode+0x70>)
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	4a10      	ldr	r2, [pc, #64]	; (8009eac <HAL_PWR_EnterSTOPMode+0x70>)
 8009e6a:	f023 0302 	bic.w	r3, r3, #2
 8009e6e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009e70:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	4a0e      	ldr	r2, [pc, #56]	; (8009eb0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e76:	f043 0304 	orr.w	r3, r3, #4
 8009e7a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009e7c:	f3bf 8f4f 	dsb	sy
}
 8009e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e82:	f3bf 8f6f 	isb	sy
}
 8009e86:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009e88:	78fb      	ldrb	r3, [r7, #3]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d101      	bne.n	8009e92 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009e8e:	bf30      	wfi
 8009e90:	e000      	b.n	8009e94 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009e92:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009e94:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	4a05      	ldr	r2, [pc, #20]	; (8009eb0 <HAL_PWR_EnterSTOPMode+0x74>)
 8009e9a:	f023 0304 	bic.w	r3, r3, #4
 8009e9e:	6113      	str	r3, [r2, #16]
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	58024800 	.word	0x58024800
 8009eb0:	e000ed00 	.word	0xe000ed00

08009eb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009ebc:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <HAL_PWREx_ConfigSupply+0x70>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d00a      	beq.n	8009ede <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ec8:	4b16      	ldr	r3, [pc, #88]	; (8009f24 <HAL_PWREx_ConfigSupply+0x70>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0307 	and.w	r3, r3, #7
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d001      	beq.n	8009eda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e01f      	b.n	8009f1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e01d      	b.n	8009f1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <HAL_PWREx_ConfigSupply+0x70>)
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f023 0207 	bic.w	r2, r3, #7
 8009ee6:	490f      	ldr	r1, [pc, #60]	; (8009f24 <HAL_PWREx_ConfigSupply+0x70>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009eee:	f7fa f847 	bl	8003f80 <HAL_GetTick>
 8009ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ef4:	e009      	b.n	8009f0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009ef6:	f7fa f843 	bl	8003f80 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f04:	d901      	bls.n	8009f0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e007      	b.n	8009f1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <HAL_PWREx_ConfigSupply+0x70>)
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f16:	d1ee      	bne.n	8009ef6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	58024800 	.word	0x58024800

08009f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08c      	sub	sp, #48	; 0x30
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	f000 bc48 	b.w	800a7cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8088 	beq.w	800a05a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f4a:	4b99      	ldr	r3, [pc, #612]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f54:	4b96      	ldr	r3, [pc, #600]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b10      	cmp	r3, #16
 8009f5e:	d007      	beq.n	8009f70 <HAL_RCC_OscConfig+0x48>
 8009f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f62:	2b18      	cmp	r3, #24
 8009f64:	d111      	bne.n	8009f8a <HAL_RCC_OscConfig+0x62>
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d10c      	bne.n	8009f8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f70:	4b8f      	ldr	r3, [pc, #572]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d06d      	beq.n	800a058 <HAL_RCC_OscConfig+0x130>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d169      	bne.n	800a058 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	f000 bc21 	b.w	800a7cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f92:	d106      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x7a>
 8009f94:	4b86      	ldr	r3, [pc, #536]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a85      	ldr	r2, [pc, #532]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	e02e      	b.n	800a000 <HAL_RCC_OscConfig+0xd8>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10c      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x9c>
 8009faa:	4b81      	ldr	r3, [pc, #516]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a80      	ldr	r2, [pc, #512]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	4b7e      	ldr	r3, [pc, #504]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a7d      	ldr	r2, [pc, #500]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	e01d      	b.n	800a000 <HAL_RCC_OscConfig+0xd8>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fcc:	d10c      	bne.n	8009fe8 <HAL_RCC_OscConfig+0xc0>
 8009fce:	4b78      	ldr	r3, [pc, #480]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a77      	ldr	r2, [pc, #476]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	4b75      	ldr	r3, [pc, #468]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a74      	ldr	r2, [pc, #464]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	e00b      	b.n	800a000 <HAL_RCC_OscConfig+0xd8>
 8009fe8:	4b71      	ldr	r3, [pc, #452]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a70      	ldr	r2, [pc, #448]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	4b6e      	ldr	r3, [pc, #440]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a6d      	ldr	r2, [pc, #436]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 8009ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d013      	beq.n	800a030 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a008:	f7f9 ffba 	bl	8003f80 <HAL_GetTick>
 800a00c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a00e:	e008      	b.n	800a022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a010:	f7f9 ffb6 	bl	8003f80 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b64      	cmp	r3, #100	; 0x64
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e3d4      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a022:	4b63      	ldr	r3, [pc, #396]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0f0      	beq.n	800a010 <HAL_RCC_OscConfig+0xe8>
 800a02e:	e014      	b.n	800a05a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a030:	f7f9 ffa6 	bl	8003f80 <HAL_GetTick>
 800a034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a036:	e008      	b.n	800a04a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a038:	f7f9 ffa2 	bl	8003f80 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	2b64      	cmp	r3, #100	; 0x64
 800a044:	d901      	bls.n	800a04a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e3c0      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a04a:	4b59      	ldr	r3, [pc, #356]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1f0      	bne.n	800a038 <HAL_RCC_OscConfig+0x110>
 800a056:	e000      	b.n	800a05a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 80ca 	beq.w	800a1fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a068:	4b51      	ldr	r3, [pc, #324]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a070:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a072:	4b4f      	ldr	r3, [pc, #316]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a076:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <HAL_RCC_OscConfig+0x166>
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	2b18      	cmp	r3, #24
 800a082:	d156      	bne.n	800a132 <HAL_RCC_OscConfig+0x20a>
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d151      	bne.n	800a132 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a08e:	4b48      	ldr	r3, [pc, #288]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x17e>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e392      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a0a6:	4b42      	ldr	r3, [pc, #264]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f023 0219 	bic.w	r2, r3, #25
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	493f      	ldr	r1, [pc, #252]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b8:	f7f9 ff62 	bl	8003f80 <HAL_GetTick>
 800a0bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0c0:	f7f9 ff5e 	bl	8003f80 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e37c      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0d2:	4b37      	ldr	r3, [pc, #220]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f0      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0de:	f7f9 ff5b 	bl	8003f98 <HAL_GetREVID>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d817      	bhi.n	800a11c <HAL_RCC_OscConfig+0x1f4>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	2b40      	cmp	r3, #64	; 0x40
 800a0f2:	d108      	bne.n	800a106 <HAL_RCC_OscConfig+0x1de>
 800a0f4:	4b2e      	ldr	r3, [pc, #184]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0fc:	4a2c      	ldr	r2, [pc, #176]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a102:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a104:	e07a      	b.n	800a1fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a106:	4b2a      	ldr	r3, [pc, #168]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	031b      	lsls	r3, r3, #12
 800a114:	4926      	ldr	r1, [pc, #152]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a116:	4313      	orrs	r3, r2
 800a118:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a11a:	e06f      	b.n	800a1fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a11c:	4b24      	ldr	r3, [pc, #144]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	061b      	lsls	r3, r3, #24
 800a12a:	4921      	ldr	r1, [pc, #132]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a130:	e064      	b.n	800a1fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d047      	beq.n	800a1ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a13a:	4b1d      	ldr	r3, [pc, #116]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f023 0219 	bic.w	r2, r3, #25
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	491a      	ldr	r1, [pc, #104]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14c:	f7f9 ff18 	bl	8003f80 <HAL_GetTick>
 800a150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a154:	f7f9 ff14 	bl	8003f80 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e332      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a166:	4b12      	ldr	r3, [pc, #72]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f0      	beq.n	800a154 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a172:	f7f9 ff11 	bl	8003f98 <HAL_GetREVID>
 800a176:	4603      	mov	r3, r0
 800a178:	f241 0203 	movw	r2, #4099	; 0x1003
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d819      	bhi.n	800a1b4 <HAL_RCC_OscConfig+0x28c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	2b40      	cmp	r3, #64	; 0x40
 800a186:	d108      	bne.n	800a19a <HAL_RCC_OscConfig+0x272>
 800a188:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a190:	4a07      	ldr	r2, [pc, #28]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a196:	6053      	str	r3, [r2, #4]
 800a198:	e030      	b.n	800a1fc <HAL_RCC_OscConfig+0x2d4>
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	031b      	lsls	r3, r3, #12
 800a1a8:	4901      	ldr	r1, [pc, #4]	; (800a1b0 <HAL_RCC_OscConfig+0x288>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	604b      	str	r3, [r1, #4]
 800a1ae:	e025      	b.n	800a1fc <HAL_RCC_OscConfig+0x2d4>
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	4b9a      	ldr	r3, [pc, #616]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	061b      	lsls	r3, r3, #24
 800a1c2:	4997      	ldr	r1, [pc, #604]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	604b      	str	r3, [r1, #4]
 800a1c8:	e018      	b.n	800a1fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1ca:	4b95      	ldr	r3, [pc, #596]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a94      	ldr	r2, [pc, #592]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a1d0:	f023 0301 	bic.w	r3, r3, #1
 800a1d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d6:	f7f9 fed3 	bl	8003f80 <HAL_GetTick>
 800a1da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1dc:	e008      	b.n	800a1f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1de:	f7f9 fecf 	bl	8003f80 <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d901      	bls.n	800a1f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e2ed      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1f0:	4b8b      	ldr	r3, [pc, #556]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f0      	bne.n	800a1de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0310 	and.w	r3, r3, #16
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 80a9 	beq.w	800a35c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a20a:	4b85      	ldr	r3, [pc, #532]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a212:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a214:	4b82      	ldr	r3, [pc, #520]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	d007      	beq.n	800a230 <HAL_RCC_OscConfig+0x308>
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	2b18      	cmp	r3, #24
 800a224:	d13a      	bne.n	800a29c <HAL_RCC_OscConfig+0x374>
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f003 0303 	and.w	r3, r3, #3
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d135      	bne.n	800a29c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a230:	4b7b      	ldr	r3, [pc, #492]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <HAL_RCC_OscConfig+0x320>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	2b80      	cmp	r3, #128	; 0x80
 800a242:	d001      	beq.n	800a248 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	e2c1      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a248:	f7f9 fea6 	bl	8003f98 <HAL_GetREVID>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a252:	4293      	cmp	r3, r2
 800a254:	d817      	bhi.n	800a286 <HAL_RCC_OscConfig+0x35e>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	2b20      	cmp	r3, #32
 800a25c:	d108      	bne.n	800a270 <HAL_RCC_OscConfig+0x348>
 800a25e:	4b70      	ldr	r3, [pc, #448]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a266:	4a6e      	ldr	r2, [pc, #440]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a26c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a26e:	e075      	b.n	800a35c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a270:	4b6b      	ldr	r3, [pc, #428]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	069b      	lsls	r3, r3, #26
 800a27e:	4968      	ldr	r1, [pc, #416]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a280:	4313      	orrs	r3, r2
 800a282:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a284:	e06a      	b.n	800a35c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a286:	4b66      	ldr	r3, [pc, #408]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	061b      	lsls	r3, r3, #24
 800a294:	4962      	ldr	r1, [pc, #392]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a296:	4313      	orrs	r3, r2
 800a298:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a29a:	e05f      	b.n	800a35c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d042      	beq.n	800a32a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a2a4:	4b5e      	ldr	r3, [pc, #376]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a5d      	ldr	r2, [pc, #372]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b0:	f7f9 fe66 	bl	8003f80 <HAL_GetTick>
 800a2b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2b6:	e008      	b.n	800a2ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a2b8:	f7f9 fe62 	bl	8003f80 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e280      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2ca:	4b55      	ldr	r3, [pc, #340]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0f0      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2d6:	f7f9 fe5f 	bl	8003f98 <HAL_GetREVID>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d817      	bhi.n	800a314 <HAL_RCC_OscConfig+0x3ec>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d108      	bne.n	800a2fe <HAL_RCC_OscConfig+0x3d6>
 800a2ec:	4b4c      	ldr	r3, [pc, #304]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2f4:	4a4a      	ldr	r2, [pc, #296]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a2f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2fa:	6053      	str	r3, [r2, #4]
 800a2fc:	e02e      	b.n	800a35c <HAL_RCC_OscConfig+0x434>
 800a2fe:	4b48      	ldr	r3, [pc, #288]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	069b      	lsls	r3, r3, #26
 800a30c:	4944      	ldr	r1, [pc, #272]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	604b      	str	r3, [r1, #4]
 800a312:	e023      	b.n	800a35c <HAL_RCC_OscConfig+0x434>
 800a314:	4b42      	ldr	r3, [pc, #264]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	061b      	lsls	r3, r3, #24
 800a322:	493f      	ldr	r1, [pc, #252]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a324:	4313      	orrs	r3, r2
 800a326:	60cb      	str	r3, [r1, #12]
 800a328:	e018      	b.n	800a35c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a32a:	4b3d      	ldr	r3, [pc, #244]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a3c      	ldr	r2, [pc, #240]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a336:	f7f9 fe23 	bl	8003f80 <HAL_GetTick>
 800a33a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a33c:	e008      	b.n	800a350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a33e:	f7f9 fe1f 	bl	8003f80 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d901      	bls.n	800a350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e23d      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a350:	4b33      	ldr	r3, [pc, #204]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f0      	bne.n	800a33e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d036      	beq.n	800a3d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d019      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a370:	4b2b      	ldr	r3, [pc, #172]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a374:	4a2a      	ldr	r2, [pc, #168]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a37c:	f7f9 fe00 	bl	8003f80 <HAL_GetTick>
 800a380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a382:	e008      	b.n	800a396 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a384:	f7f9 fdfc 	bl	8003f80 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e21a      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a396:	4b22      	ldr	r3, [pc, #136]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0f0      	beq.n	800a384 <HAL_RCC_OscConfig+0x45c>
 800a3a2:	e018      	b.n	800a3d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3a4:	4b1e      	ldr	r3, [pc, #120]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a3a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b0:	f7f9 fde6 	bl	8003f80 <HAL_GetTick>
 800a3b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3b6:	e008      	b.n	800a3ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3b8:	f7f9 fde2 	bl	8003f80 <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e200      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3ca:	4b15      	ldr	r3, [pc, #84]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a3cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1f0      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d039      	beq.n	800a456 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d01c      	beq.n	800a424 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a0c      	ldr	r2, [pc, #48]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a3f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a3f6:	f7f9 fdc3 	bl	8003f80 <HAL_GetTick>
 800a3fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3fc:	e008      	b.n	800a410 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3fe:	f7f9 fdbf 	bl	8003f80 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d901      	bls.n	800a410 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e1dd      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <HAL_RCC_OscConfig+0x4f8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0f0      	beq.n	800a3fe <HAL_RCC_OscConfig+0x4d6>
 800a41c:	e01b      	b.n	800a456 <HAL_RCC_OscConfig+0x52e>
 800a41e:	bf00      	nop
 800a420:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a424:	4b9b      	ldr	r3, [pc, #620]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a9a      	ldr	r2, [pc, #616]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a42e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a430:	f7f9 fda6 	bl	8003f80 <HAL_GetTick>
 800a434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a436:	e008      	b.n	800a44a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a438:	f7f9 fda2 	bl	8003f80 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e1c0      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a44a:	4b92      	ldr	r3, [pc, #584]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f0      	bne.n	800a438 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 8081 	beq.w	800a566 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a464:	4b8c      	ldr	r3, [pc, #560]	; (800a698 <HAL_RCC_OscConfig+0x770>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a8b      	ldr	r2, [pc, #556]	; (800a698 <HAL_RCC_OscConfig+0x770>)
 800a46a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a46e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a470:	f7f9 fd86 	bl	8003f80 <HAL_GetTick>
 800a474:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a476:	e008      	b.n	800a48a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a478:	f7f9 fd82 	bl	8003f80 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b64      	cmp	r3, #100	; 0x64
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e1a0      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a48a:	4b83      	ldr	r3, [pc, #524]	; (800a698 <HAL_RCC_OscConfig+0x770>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0f0      	beq.n	800a478 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d106      	bne.n	800a4ac <HAL_RCC_OscConfig+0x584>
 800a49e:	4b7d      	ldr	r3, [pc, #500]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	4a7c      	ldr	r2, [pc, #496]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4a4:	f043 0301 	orr.w	r3, r3, #1
 800a4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4aa:	e02d      	b.n	800a508 <HAL_RCC_OscConfig+0x5e0>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10c      	bne.n	800a4ce <HAL_RCC_OscConfig+0x5a6>
 800a4b4:	4b77      	ldr	r3, [pc, #476]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b8:	4a76      	ldr	r2, [pc, #472]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4ba:	f023 0301 	bic.w	r3, r3, #1
 800a4be:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c0:	4b74      	ldr	r3, [pc, #464]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c4:	4a73      	ldr	r2, [pc, #460]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4c6:	f023 0304 	bic.w	r3, r3, #4
 800a4ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a4cc:	e01c      	b.n	800a508 <HAL_RCC_OscConfig+0x5e0>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d10c      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x5c8>
 800a4d6:	4b6f      	ldr	r3, [pc, #444]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4da:	4a6e      	ldr	r2, [pc, #440]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4dc:	f043 0304 	orr.w	r3, r3, #4
 800a4e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e2:	4b6c      	ldr	r3, [pc, #432]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e6:	4a6b      	ldr	r2, [pc, #428]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4e8:	f043 0301 	orr.w	r3, r3, #1
 800a4ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a4ee:	e00b      	b.n	800a508 <HAL_RCC_OscConfig+0x5e0>
 800a4f0:	4b68      	ldr	r3, [pc, #416]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f4:	4a67      	ldr	r2, [pc, #412]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4f6:	f023 0301 	bic.w	r3, r3, #1
 800a4fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a4fc:	4b65      	ldr	r3, [pc, #404]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a500:	4a64      	ldr	r2, [pc, #400]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a502:	f023 0304 	bic.w	r3, r3, #4
 800a506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d015      	beq.n	800a53c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a510:	f7f9 fd36 	bl	8003f80 <HAL_GetTick>
 800a514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a516:	e00a      	b.n	800a52e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a518:	f7f9 fd32 	bl	8003f80 <HAL_GetTick>
 800a51c:	4602      	mov	r2, r0
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	f241 3288 	movw	r2, #5000	; 0x1388
 800a526:	4293      	cmp	r3, r2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e14e      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a52e:	4b59      	ldr	r3, [pc, #356]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0ee      	beq.n	800a518 <HAL_RCC_OscConfig+0x5f0>
 800a53a:	e014      	b.n	800a566 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a53c:	f7f9 fd20 	bl	8003f80 <HAL_GetTick>
 800a540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a542:	e00a      	b.n	800a55a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a544:	f7f9 fd1c 	bl	8003f80 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a552:	4293      	cmp	r3, r2
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e138      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a55a:	4b4e      	ldr	r3, [pc, #312]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1ee      	bne.n	800a544 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 812d 	beq.w	800a7ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a570:	4b48      	ldr	r3, [pc, #288]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a578:	2b18      	cmp	r3, #24
 800a57a:	f000 80bd 	beq.w	800a6f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	2b02      	cmp	r3, #2
 800a584:	f040 809e 	bne.w	800a6c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a588:	4b42      	ldr	r3, [pc, #264]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a41      	ldr	r2, [pc, #260]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a58e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7f9 fcf4 	bl	8003f80 <HAL_GetTick>
 800a598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a59c:	f7f9 fcf0 	bl	8003f80 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e10e      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5ae:	4b39      	ldr	r3, [pc, #228]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5ba:	4b36      	ldr	r3, [pc, #216]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5be:	4b37      	ldr	r3, [pc, #220]	; (800a69c <HAL_RCC_OscConfig+0x774>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5ca:	0112      	lsls	r2, r2, #4
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	4931      	ldr	r1, [pc, #196]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	628b      	str	r3, [r1, #40]	; 0x28
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	025b      	lsls	r3, r3, #9
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	041b      	lsls	r3, r3, #16
 800a5f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	061b      	lsls	r3, r3, #24
 800a600:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a604:	4923      	ldr	r1, [pc, #140]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a606:	4313      	orrs	r3, r2
 800a608:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a60a:	4b22      	ldr	r3, [pc, #136]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60e:	4a21      	ldr	r2, [pc, #132]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a610:	f023 0301 	bic.w	r3, r3, #1
 800a614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a616:	4b1f      	ldr	r3, [pc, #124]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a61a:	4b21      	ldr	r3, [pc, #132]	; (800a6a0 <HAL_RCC_OscConfig+0x778>)
 800a61c:	4013      	ands	r3, r2
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a622:	00d2      	lsls	r2, r2, #3
 800a624:	491b      	ldr	r1, [pc, #108]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a626:	4313      	orrs	r3, r2
 800a628:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a62a:	4b1a      	ldr	r3, [pc, #104]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	f023 020c 	bic.w	r2, r3, #12
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	4917      	ldr	r1, [pc, #92]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a63c:	4b15      	ldr	r3, [pc, #84]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	f023 0202 	bic.w	r2, r3, #2
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a648:	4912      	ldr	r1, [pc, #72]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a64e:	4b11      	ldr	r3, [pc, #68]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a652:	4a10      	ldr	r2, [pc, #64]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	4a0d      	ldr	r2, [pc, #52]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a664:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a666:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	4a0a      	ldr	r2, [pc, #40]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a66c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a670:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a672:	4b08      	ldr	r3, [pc, #32]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	4a07      	ldr	r2, [pc, #28]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a04      	ldr	r2, [pc, #16]	; (800a694 <HAL_RCC_OscConfig+0x76c>)
 800a684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68a:	f7f9 fc79 	bl	8003f80 <HAL_GetTick>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a690:	e011      	b.n	800a6b6 <HAL_RCC_OscConfig+0x78e>
 800a692:	bf00      	nop
 800a694:	58024400 	.word	0x58024400
 800a698:	58024800 	.word	0x58024800
 800a69c:	fffffc0c 	.word	0xfffffc0c
 800a6a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6a4:	f7f9 fc6c 	bl	8003f80 <HAL_GetTick>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d901      	bls.n	800a6b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e08a      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6b6:	4b47      	ldr	r3, [pc, #284]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f0      	beq.n	800a6a4 <HAL_RCC_OscConfig+0x77c>
 800a6c2:	e082      	b.n	800a7ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6c4:	4b43      	ldr	r3, [pc, #268]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a42      	ldr	r2, [pc, #264]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a6ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d0:	f7f9 fc56 	bl	8003f80 <HAL_GetTick>
 800a6d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d8:	f7f9 fc52 	bl	8003f80 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e070      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ea:	4b3a      	ldr	r3, [pc, #232]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f0      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x7b0>
 800a6f6:	e068      	b.n	800a7ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a6f8:	4b36      	ldr	r3, [pc, #216]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a6fe:	4b35      	ldr	r3, [pc, #212]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a702:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d031      	beq.n	800a770 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f003 0203 	and.w	r2, r3, #3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a716:	429a      	cmp	r2, r3
 800a718:	d12a      	bne.n	800a770 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	091b      	lsrs	r3, r3, #4
 800a71e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a726:	429a      	cmp	r2, r3
 800a728:	d122      	bne.n	800a770 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a734:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a736:	429a      	cmp	r2, r3
 800a738:	d11a      	bne.n	800a770 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	0a5b      	lsrs	r3, r3, #9
 800a73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a746:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a748:	429a      	cmp	r2, r3
 800a74a:	d111      	bne.n	800a770 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	0c1b      	lsrs	r3, r3, #16
 800a750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d108      	bne.n	800a770 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	0e1b      	lsrs	r3, r3, #24
 800a762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d001      	beq.n	800a774 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e02b      	b.n	800a7cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a774:	4b17      	ldr	r3, [pc, #92]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a778:	08db      	lsrs	r3, r3, #3
 800a77a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a77e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	429a      	cmp	r2, r3
 800a788:	d01f      	beq.n	800a7ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a78a:	4b12      	ldr	r3, [pc, #72]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	4a11      	ldr	r2, [pc, #68]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a790:	f023 0301 	bic.w	r3, r3, #1
 800a794:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a796:	f7f9 fbf3 	bl	8003f80 <HAL_GetTick>
 800a79a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a79c:	bf00      	nop
 800a79e:	f7f9 fbef 	bl	8003f80 <HAL_GetTick>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d0f9      	beq.n	800a79e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a7aa:	4b0a      	ldr	r3, [pc, #40]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a7ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <HAL_RCC_OscConfig+0x8b0>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a7b6:	00d2      	lsls	r2, r2, #3
 800a7b8:	4906      	ldr	r1, [pc, #24]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a04      	ldr	r2, [pc, #16]	; (800a7d4 <HAL_RCC_OscConfig+0x8ac>)
 800a7c4:	f043 0301 	orr.w	r3, r3, #1
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3730      	adds	r7, #48	; 0x30
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	ffff0007 	.word	0xffff0007

0800a7dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e19c      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7f0:	4b8a      	ldr	r3, [pc, #552]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d910      	bls.n	800a820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7fe:	4b87      	ldr	r3, [pc, #540]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f023 020f 	bic.w	r2, r3, #15
 800a806:	4985      	ldr	r1, [pc, #532]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a80e:	4b83      	ldr	r3, [pc, #524]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 030f 	and.w	r3, r3, #15
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d001      	beq.n	800a820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e184      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d010      	beq.n	800a84e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	691a      	ldr	r2, [r3, #16]
 800a830:	4b7b      	ldr	r3, [pc, #492]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a838:	429a      	cmp	r2, r3
 800a83a:	d908      	bls.n	800a84e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a83c:	4b78      	ldr	r3, [pc, #480]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	4975      	ldr	r1, [pc, #468]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 0308 	and.w	r3, r3, #8
 800a856:	2b00      	cmp	r3, #0
 800a858:	d010      	beq.n	800a87c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	695a      	ldr	r2, [r3, #20]
 800a85e:	4b70      	ldr	r3, [pc, #448]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a866:	429a      	cmp	r2, r3
 800a868:	d908      	bls.n	800a87c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a86a:	4b6d      	ldr	r3, [pc, #436]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	496a      	ldr	r1, [pc, #424]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b00      	cmp	r3, #0
 800a886:	d010      	beq.n	800a8aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	699a      	ldr	r2, [r3, #24]
 800a88c:	4b64      	ldr	r3, [pc, #400]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a894:	429a      	cmp	r2, r3
 800a896:	d908      	bls.n	800a8aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a898:	4b61      	ldr	r3, [pc, #388]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	495e      	ldr	r1, [pc, #376]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d010      	beq.n	800a8d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69da      	ldr	r2, [r3, #28]
 800a8ba:	4b59      	ldr	r3, [pc, #356]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d908      	bls.n	800a8d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8c6:	4b56      	ldr	r3, [pc, #344]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	4953      	ldr	r1, [pc, #332]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d010      	beq.n	800a906 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	4b4d      	ldr	r3, [pc, #308]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	f003 030f 	and.w	r3, r3, #15
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d908      	bls.n	800a906 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8f4:	4b4a      	ldr	r3, [pc, #296]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	f023 020f 	bic.w	r2, r3, #15
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	4947      	ldr	r1, [pc, #284]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a902:	4313      	orrs	r3, r2
 800a904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d055      	beq.n	800a9be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a912:	4b43      	ldr	r3, [pc, #268]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	4940      	ldr	r1, [pc, #256]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a920:	4313      	orrs	r3, r2
 800a922:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d107      	bne.n	800a93c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a92c:	4b3c      	ldr	r3, [pc, #240]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d121      	bne.n	800a97c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e0f6      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2b03      	cmp	r3, #3
 800a942:	d107      	bne.n	800a954 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a944:	4b36      	ldr	r3, [pc, #216]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d115      	bne.n	800a97c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e0ea      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d107      	bne.n	800a96c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a95c:	4b30      	ldr	r3, [pc, #192]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a964:	2b00      	cmp	r3, #0
 800a966:	d109      	bne.n	800a97c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e0de      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a96c:	4b2c      	ldr	r3, [pc, #176]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e0d6      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a97c:	4b28      	ldr	r3, [pc, #160]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	f023 0207 	bic.w	r2, r3, #7
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4925      	ldr	r1, [pc, #148]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a98a:	4313      	orrs	r3, r2
 800a98c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a98e:	f7f9 faf7 	bl	8003f80 <HAL_GetTick>
 800a992:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a994:	e00a      	b.n	800a9ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a996:	f7f9 faf3 	bl	8003f80 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e0be      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9ac:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d1eb      	bne.n	800a996 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d010      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68da      	ldr	r2, [r3, #12]
 800a9ce:	4b14      	ldr	r3, [pc, #80]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d208      	bcs.n	800a9ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	f023 020f 	bic.w	r2, r3, #15
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	490e      	ldr	r1, [pc, #56]	; (800aa20 <HAL_RCC_ClockConfig+0x244>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ec:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 030f 	and.w	r3, r3, #15
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d214      	bcs.n	800aa24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9fa:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f023 020f 	bic.w	r2, r3, #15
 800aa02:	4906      	ldr	r1, [pc, #24]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa0a:	4b04      	ldr	r3, [pc, #16]	; (800aa1c <HAL_RCC_ClockConfig+0x240>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 030f 	and.w	r3, r3, #15
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d005      	beq.n	800aa24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e086      	b.n	800ab2a <HAL_RCC_ClockConfig+0x34e>
 800aa1c:	52002000 	.word	0x52002000
 800aa20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d010      	beq.n	800aa52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	691a      	ldr	r2, [r3, #16]
 800aa34:	4b3f      	ldr	r3, [pc, #252]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d208      	bcs.n	800aa52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa40:	4b3c      	ldr	r3, [pc, #240]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	4939      	ldr	r1, [pc, #228]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0308 	and.w	r3, r3, #8
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d010      	beq.n	800aa80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	695a      	ldr	r2, [r3, #20]
 800aa62:	4b34      	ldr	r3, [pc, #208]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d208      	bcs.n	800aa80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa6e:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	492e      	ldr	r1, [pc, #184]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0310 	and.w	r3, r3, #16
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d010      	beq.n	800aaae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	699a      	ldr	r2, [r3, #24]
 800aa90:	4b28      	ldr	r3, [pc, #160]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d208      	bcs.n	800aaae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa9c:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	4922      	ldr	r1, [pc, #136]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d010      	beq.n	800aadc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	69da      	ldr	r2, [r3, #28]
 800aabe:	4b1d      	ldr	r3, [pc, #116]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d208      	bcs.n	800aadc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aaca:	4b1a      	ldr	r3, [pc, #104]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	4917      	ldr	r1, [pc, #92]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aadc:	f000 f834 	bl	800ab48 <HAL_RCC_GetSysClockFreq>
 800aae0:	4602      	mov	r2, r0
 800aae2:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	0a1b      	lsrs	r3, r3, #8
 800aae8:	f003 030f 	and.w	r3, r3, #15
 800aaec:	4912      	ldr	r1, [pc, #72]	; (800ab38 <HAL_RCC_ClockConfig+0x35c>)
 800aaee:	5ccb      	ldrb	r3, [r1, r3]
 800aaf0:	f003 031f 	and.w	r3, r3, #31
 800aaf4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aafa:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <HAL_RCC_ClockConfig+0x358>)
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	4a0d      	ldr	r2, [pc, #52]	; (800ab38 <HAL_RCC_ClockConfig+0x35c>)
 800ab04:	5cd3      	ldrb	r3, [r2, r3]
 800ab06:	f003 031f 	and.w	r3, r3, #31
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <HAL_RCC_ClockConfig+0x360>)
 800ab12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab14:	4a0a      	ldr	r2, [pc, #40]	; (800ab40 <HAL_RCC_ClockConfig+0x364>)
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <HAL_RCC_ClockConfig+0x368>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f8 ff52 	bl	80039c8 <HAL_InitTick>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	58024400 	.word	0x58024400
 800ab38:	08017860 	.word	0x08017860
 800ab3c:	24000094 	.word	0x24000094
 800ab40:	24000090 	.word	0x24000090
 800ab44:	24000098 	.word	0x24000098

0800ab48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b089      	sub	sp, #36	; 0x24
 800ab4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab4e:	4bb3      	ldr	r3, [pc, #716]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab56:	2b18      	cmp	r3, #24
 800ab58:	f200 8155 	bhi.w	800ae06 <HAL_RCC_GetSysClockFreq+0x2be>
 800ab5c:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800abc9 	.word	0x0800abc9
 800ab68:	0800ae07 	.word	0x0800ae07
 800ab6c:	0800ae07 	.word	0x0800ae07
 800ab70:	0800ae07 	.word	0x0800ae07
 800ab74:	0800ae07 	.word	0x0800ae07
 800ab78:	0800ae07 	.word	0x0800ae07
 800ab7c:	0800ae07 	.word	0x0800ae07
 800ab80:	0800ae07 	.word	0x0800ae07
 800ab84:	0800abef 	.word	0x0800abef
 800ab88:	0800ae07 	.word	0x0800ae07
 800ab8c:	0800ae07 	.word	0x0800ae07
 800ab90:	0800ae07 	.word	0x0800ae07
 800ab94:	0800ae07 	.word	0x0800ae07
 800ab98:	0800ae07 	.word	0x0800ae07
 800ab9c:	0800ae07 	.word	0x0800ae07
 800aba0:	0800ae07 	.word	0x0800ae07
 800aba4:	0800abf5 	.word	0x0800abf5
 800aba8:	0800ae07 	.word	0x0800ae07
 800abac:	0800ae07 	.word	0x0800ae07
 800abb0:	0800ae07 	.word	0x0800ae07
 800abb4:	0800ae07 	.word	0x0800ae07
 800abb8:	0800ae07 	.word	0x0800ae07
 800abbc:	0800ae07 	.word	0x0800ae07
 800abc0:	0800ae07 	.word	0x0800ae07
 800abc4:	0800abfb 	.word	0x0800abfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abc8:	4b94      	ldr	r3, [pc, #592]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0320 	and.w	r3, r3, #32
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d009      	beq.n	800abe8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abd4:	4b91      	ldr	r3, [pc, #580]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	08db      	lsrs	r3, r3, #3
 800abda:	f003 0303 	and.w	r3, r3, #3
 800abde:	4a90      	ldr	r2, [pc, #576]	; (800ae20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abe0:	fa22 f303 	lsr.w	r3, r2, r3
 800abe4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800abe6:	e111      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800abe8:	4b8d      	ldr	r3, [pc, #564]	; (800ae20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800abea:	61bb      	str	r3, [r7, #24]
      break;
 800abec:	e10e      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800abee:	4b8d      	ldr	r3, [pc, #564]	; (800ae24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abf0:	61bb      	str	r3, [r7, #24]
      break;
 800abf2:	e10b      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800abf4:	4b8c      	ldr	r3, [pc, #560]	; (800ae28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800abf6:	61bb      	str	r3, [r7, #24]
      break;
 800abf8:	e108      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abfa:	4b88      	ldr	r3, [pc, #544]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfe:	f003 0303 	and.w	r3, r3, #3
 800ac02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac04:	4b85      	ldr	r3, [pc, #532]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	091b      	lsrs	r3, r3, #4
 800ac0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac10:	4b82      	ldr	r3, [pc, #520]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac1a:	4b80      	ldr	r3, [pc, #512]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1e:	08db      	lsrs	r3, r3, #3
 800ac20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 80e1 	beq.w	800ae00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	f000 8083 	beq.w	800ad4c <HAL_RCC_GetSysClockFreq+0x204>
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	f200 80a1 	bhi.w	800ad90 <HAL_RCC_GetSysClockFreq+0x248>
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_RCC_GetSysClockFreq+0x114>
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d056      	beq.n	800ad08 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ac5a:	e099      	b.n	800ad90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac5c:	4b6f      	ldr	r3, [pc, #444]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0320 	and.w	r3, r3, #32
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d02d      	beq.n	800acc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac68:	4b6c      	ldr	r3, [pc, #432]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	08db      	lsrs	r3, r3, #3
 800ac6e:	f003 0303 	and.w	r3, r3, #3
 800ac72:	4a6b      	ldr	r2, [pc, #428]	; (800ae20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac74:	fa22 f303 	lsr.w	r3, r2, r3
 800ac78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b62      	ldr	r3, [pc, #392]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aca6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae2c <HAL_RCC_GetSysClockFreq+0x2e4>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800acc2:	e087      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae30 <HAL_RCC_GetSysClockFreq+0x2e8>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b51      	ldr	r3, [pc, #324]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace6:	ed97 6a02 	vldr	s12, [r7, #8]
 800acea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae2c <HAL_RCC_GetSysClockFreq+0x2e4>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad06:	e065      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad12:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ae34 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1a:	4b40      	ldr	r3, [pc, #256]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae2c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad4a:	e043      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad56:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ae38 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ad5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5e:	4b2f      	ldr	r3, [pc, #188]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae2c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad8e:	e021      	b.n	800add4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae34 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada2:	4b1e      	ldr	r3, [pc, #120]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ada4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800adb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae2c <HAL_RCC_GetSysClockFreq+0x2e4>
 800adba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800add2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add8:	0a5b      	lsrs	r3, r3, #9
 800adda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adde:	3301      	adds	r3, #1
 800ade0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	ee07 3a90 	vmov	s15, r3
 800ade8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adec:	edd7 6a07 	vldr	s13, [r7, #28]
 800adf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf8:	ee17 3a90 	vmov	r3, s15
 800adfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800adfe:	e005      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ae00:	2300      	movs	r3, #0
 800ae02:	61bb      	str	r3, [r7, #24]
      break;
 800ae04:	e002      	b.n	800ae0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ae06:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae08:	61bb      	str	r3, [r7, #24]
      break;
 800ae0a:	bf00      	nop
  }

  return sysclockfreq;
 800ae0c:	69bb      	ldr	r3, [r7, #24]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3724      	adds	r7, #36	; 0x24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	58024400 	.word	0x58024400
 800ae20:	03d09000 	.word	0x03d09000
 800ae24:	003d0900 	.word	0x003d0900
 800ae28:	017d7840 	.word	0x017d7840
 800ae2c:	46000000 	.word	0x46000000
 800ae30:	4c742400 	.word	0x4c742400
 800ae34:	4a742400 	.word	0x4a742400
 800ae38:	4bbebc20 	.word	0x4bbebc20

0800ae3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae42:	f7ff fe81 	bl	800ab48 <HAL_RCC_GetSysClockFreq>
 800ae46:	4602      	mov	r2, r0
 800ae48:	4b10      	ldr	r3, [pc, #64]	; (800ae8c <HAL_RCC_GetHCLKFreq+0x50>)
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	490f      	ldr	r1, [pc, #60]	; (800ae90 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae54:	5ccb      	ldrb	r3, [r1, r3]
 800ae56:	f003 031f 	and.w	r3, r3, #31
 800ae5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae60:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <HAL_RCC_GetHCLKFreq+0x50>)
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <HAL_RCC_GetHCLKFreq+0x54>)
 800ae6a:	5cd3      	ldrb	r3, [r2, r3]
 800ae6c:	f003 031f 	and.w	r3, r3, #31
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	fa22 f303 	lsr.w	r3, r2, r3
 800ae76:	4a07      	ldr	r2, [pc, #28]	; (800ae94 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae7a:	4a07      	ldr	r2, [pc, #28]	; (800ae98 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae80:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae82:	681b      	ldr	r3, [r3, #0]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	58024400 	.word	0x58024400
 800ae90:	08017860 	.word	0x08017860
 800ae94:	24000094 	.word	0x24000094
 800ae98:	24000090 	.word	0x24000090

0800ae9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aea0:	f7ff ffcc 	bl	800ae3c <HAL_RCC_GetHCLKFreq>
 800aea4:	4602      	mov	r2, r0
 800aea6:	4b06      	ldr	r3, [pc, #24]	; (800aec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	091b      	lsrs	r3, r3, #4
 800aeac:	f003 0307 	and.w	r3, r3, #7
 800aeb0:	4904      	ldr	r1, [pc, #16]	; (800aec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aeb2:	5ccb      	ldrb	r3, [r1, r3]
 800aeb4:	f003 031f 	and.w	r3, r3, #31
 800aeb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	58024400 	.word	0x58024400
 800aec4:	08017860 	.word	0x08017860

0800aec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aecc:	f7ff ffb6 	bl	800ae3c <HAL_RCC_GetHCLKFreq>
 800aed0:	4602      	mov	r2, r0
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <HAL_RCC_GetPCLK2Freq+0x24>)
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	0a1b      	lsrs	r3, r3, #8
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	4904      	ldr	r1, [pc, #16]	; (800aef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aede:	5ccb      	ldrb	r3, [r1, r3]
 800aee0:	f003 031f 	and.w	r3, r3, #31
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	58024400 	.word	0x58024400
 800aef0:	08017860 	.word	0x08017860

0800aef4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	223f      	movs	r2, #63	; 0x3f
 800af02:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af04:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	f003 0207 	and.w	r2, r3, #7
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800af10:	4b17      	ldr	r3, [pc, #92]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800af1c:	4b14      	ldr	r3, [pc, #80]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f003 020f 	and.w	r2, r3, #15
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800af28:	4b11      	ldr	r3, [pc, #68]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800af34:	4b0e      	ldr	r3, [pc, #56]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800af40:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800af4c:	4b08      	ldr	r3, [pc, #32]	; (800af70 <HAL_RCC_GetClockConfig+0x7c>)
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af58:	4b06      	ldr	r3, [pc, #24]	; (800af74 <HAL_RCC_GetClockConfig+0x80>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 020f 	and.w	r2, r3, #15
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	601a      	str	r2, [r3, #0]
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	58024400 	.word	0x58024400
 800af74:	52002000 	.word	0x52002000

0800af78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af7c:	b0ca      	sub	sp, #296	; 0x128
 800af7e:	af00      	add	r7, sp, #0
 800af80:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af84:	2300      	movs	r3, #0
 800af86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af8a:	2300      	movs	r3, #0
 800af8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800af9c:	2500      	movs	r5, #0
 800af9e:	ea54 0305 	orrs.w	r3, r4, r5
 800afa2:	d049      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800afa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afae:	d02f      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800afb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afb4:	d828      	bhi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800afb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afba:	d01a      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800afbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afc0:	d822      	bhi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x56>
 800afc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afca:	d007      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800afcc:	e01c      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afce:	4bb8      	ldr	r3, [pc, #736]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	4ab7      	ldr	r2, [pc, #732]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800afda:	e01a      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe0:	3308      	adds	r3, #8
 800afe2:	2102      	movs	r1, #2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f002 fb61 	bl	800d6ac <RCCEx_PLL2_Config>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aff0:	e00f      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff6:	3328      	adds	r3, #40	; 0x28
 800aff8:	2102      	movs	r1, #2
 800affa:	4618      	mov	r0, r3
 800affc:	f002 fc08 	bl	800d810 <RCCEx_PLL3_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b006:	e004      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b00e:	e000      	b.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b010:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b01a:	4ba5      	ldr	r3, [pc, #660]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b01e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b028:	4aa1      	ldr	r2, [pc, #644]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b02a:	430b      	orrs	r3, r1
 800b02c:	6513      	str	r3, [r2, #80]	; 0x50
 800b02e:	e003      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b034:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b044:	f04f 0900 	mov.w	r9, #0
 800b048:	ea58 0309 	orrs.w	r3, r8, r9
 800b04c:	d047      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b054:	2b04      	cmp	r3, #4
 800b056:	d82a      	bhi.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b058:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05e:	bf00      	nop
 800b060:	0800b075 	.word	0x0800b075
 800b064:	0800b083 	.word	0x0800b083
 800b068:	0800b099 	.word	0x0800b099
 800b06c:	0800b0b7 	.word	0x0800b0b7
 800b070:	0800b0b7 	.word	0x0800b0b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b074:	4b8e      	ldr	r3, [pc, #568]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	4a8d      	ldr	r2, [pc, #564]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b07a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b07e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b080:	e01a      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b086:	3308      	adds	r3, #8
 800b088:	2100      	movs	r1, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fb0e 	bl	800d6ac <RCCEx_PLL2_Config>
 800b090:	4603      	mov	r3, r0
 800b092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b096:	e00f      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09c:	3328      	adds	r3, #40	; 0x28
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 fbb5 	bl	800d810 <RCCEx_PLL3_Config>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0ac:	e004      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0b4:	e000      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b0b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10a      	bne.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b0c0:	4b7b      	ldr	r3, [pc, #492]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c4:	f023 0107 	bic.w	r1, r3, #7
 800b0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ce:	4a78      	ldr	r2, [pc, #480]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	6513      	str	r3, [r2, #80]	; 0x50
 800b0d4:	e003      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b0ea:	f04f 0b00 	mov.w	fp, #0
 800b0ee:	ea5a 030b 	orrs.w	r3, sl, fp
 800b0f2:	d04c      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fe:	d030      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b104:	d829      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b106:	2bc0      	cmp	r3, #192	; 0xc0
 800b108:	d02d      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b10a:	2bc0      	cmp	r3, #192	; 0xc0
 800b10c:	d825      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b10e:	2b80      	cmp	r3, #128	; 0x80
 800b110:	d018      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b112:	2b80      	cmp	r3, #128	; 0x80
 800b114:	d821      	bhi.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b11a:	2b40      	cmp	r3, #64	; 0x40
 800b11c:	d007      	beq.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b11e:	e01c      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b120:	4b63      	ldr	r3, [pc, #396]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	4a62      	ldr	r2, [pc, #392]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b12a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b12c:	e01c      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b132:	3308      	adds	r3, #8
 800b134:	2100      	movs	r1, #0
 800b136:	4618      	mov	r0, r3
 800b138:	f002 fab8 	bl	800d6ac <RCCEx_PLL2_Config>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b142:	e011      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b148:	3328      	adds	r3, #40	; 0x28
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f002 fb5f 	bl	800d810 <RCCEx_PLL3_Config>
 800b152:	4603      	mov	r3, r0
 800b154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b158:	e006      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b160:	e002      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b162:	bf00      	nop
 800b164:	e000      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b166:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b170:	4b4f      	ldr	r3, [pc, #316]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b174:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b17e:	4a4c      	ldr	r2, [pc, #304]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b180:	430b      	orrs	r3, r1
 800b182:	6513      	str	r3, [r2, #80]	; 0x50
 800b184:	e003      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b18a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b19a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b1a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	d053      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1ba:	d035      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b1bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1c0:	d82e      	bhi.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b1c6:	d031      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b1c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b1cc:	d828      	bhi.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1d2:	d01a      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b1d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1d8:	d822      	bhi.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b1de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1e2:	d007      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b1e4:	e01c      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1e6:	4b32      	ldr	r3, [pc, #200]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	4a31      	ldr	r2, [pc, #196]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1f2:	e01c      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fa55 	bl	800d6ac <RCCEx_PLL2_Config>
 800b202:	4603      	mov	r3, r0
 800b204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b208:	e011      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20e:	3328      	adds	r3, #40	; 0x28
 800b210:	2100      	movs	r1, #0
 800b212:	4618      	mov	r0, r3
 800b214:	f002 fafc 	bl	800d810 <RCCEx_PLL3_Config>
 800b218:	4603      	mov	r3, r0
 800b21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b21e:	e006      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b226:	e002      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b228:	bf00      	nop
 800b22a:	e000      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10b      	bne.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b236:	4b1e      	ldr	r3, [pc, #120]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b242:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b246:	4a1a      	ldr	r2, [pc, #104]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b248:	430b      	orrs	r3, r1
 800b24a:	6593      	str	r3, [r2, #88]	; 0x58
 800b24c:	e003      	b.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b262:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b266:	2300      	movs	r3, #0
 800b268:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b26c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b270:	460b      	mov	r3, r1
 800b272:	4313      	orrs	r3, r2
 800b274:	d056      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b27e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b282:	d038      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b288:	d831      	bhi.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b28a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b28e:	d034      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b294:	d82b      	bhi.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b29a:	d01d      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b29c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2a0:	d825      	bhi.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d006      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b2a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2aa:	d00a      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b2ac:	e01f      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2ae:	bf00      	nop
 800b2b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b4:	4ba2      	ldr	r3, [pc, #648]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	4aa1      	ldr	r2, [pc, #644]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2c0:	e01c      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f002 f9ee 	bl	800d6ac <RCCEx_PLL2_Config>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b2d6:	e011      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2dc:	3328      	adds	r3, #40	; 0x28
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 fa95 	bl	800d810 <RCCEx_PLL3_Config>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2ec:	e006      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2f4:	e002      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2f6:	bf00      	nop
 800b2f8:	e000      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b2fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10b      	bne.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b304:	4b8e      	ldr	r3, [pc, #568]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b308:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b310:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b314:	4a8a      	ldr	r2, [pc, #552]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b316:	430b      	orrs	r3, r1
 800b318:	6593      	str	r3, [r2, #88]	; 0x58
 800b31a:	e003      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b334:	2300      	movs	r3, #0
 800b336:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b33a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b33e:	460b      	mov	r3, r1
 800b340:	4313      	orrs	r3, r2
 800b342:	d03a      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	2b30      	cmp	r3, #48	; 0x30
 800b34c:	d01f      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b34e:	2b30      	cmp	r3, #48	; 0x30
 800b350:	d819      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b352:	2b20      	cmp	r3, #32
 800b354:	d00c      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b356:	2b20      	cmp	r3, #32
 800b358:	d815      	bhi.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d019      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b35e:	2b10      	cmp	r3, #16
 800b360:	d111      	bne.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b362:	4b77      	ldr	r3, [pc, #476]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	4a76      	ldr	r2, [pc, #472]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b36c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b36e:	e011      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b374:	3308      	adds	r3, #8
 800b376:	2102      	movs	r1, #2
 800b378:	4618      	mov	r0, r3
 800b37a:	f002 f997 	bl	800d6ac <RCCEx_PLL2_Config>
 800b37e:	4603      	mov	r3, r0
 800b380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b384:	e006      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b38c:	e002      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b38e:	bf00      	nop
 800b390:	e000      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b392:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b39c:	4b68      	ldr	r3, [pc, #416]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b3a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3aa:	4a65      	ldr	r2, [pc, #404]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3b0:	e003      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b3c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	d051      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3e4:	d035      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b3e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ea:	d82e      	bhi.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3f0:	d031      	beq.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b3f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3f6:	d828      	bhi.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b3f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3fc:	d01a      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b402:	d822      	bhi.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b40c:	d007      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b40e:	e01c      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b410:	4b4b      	ldr	r3, [pc, #300]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	4a4a      	ldr	r2, [pc, #296]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b41a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b41c:	e01c      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b41e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b422:	3308      	adds	r3, #8
 800b424:	2100      	movs	r1, #0
 800b426:	4618      	mov	r0, r3
 800b428:	f002 f940 	bl	800d6ac <RCCEx_PLL2_Config>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b432:	e011      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b438:	3328      	adds	r3, #40	; 0x28
 800b43a:	2100      	movs	r1, #0
 800b43c:	4618      	mov	r0, r3
 800b43e:	f002 f9e7 	bl	800d810 <RCCEx_PLL3_Config>
 800b442:	4603      	mov	r3, r0
 800b444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b448:	e006      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b450:	e002      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b452:	bf00      	nop
 800b454:	e000      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b456:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b460:	4b37      	ldr	r3, [pc, #220]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b464:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b46e:	4a34      	ldr	r2, [pc, #208]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b470:	430b      	orrs	r3, r1
 800b472:	6513      	str	r3, [r2, #80]	; 0x50
 800b474:	e003      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b48a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b48e:	2300      	movs	r3, #0
 800b490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b494:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b498:	460b      	mov	r3, r1
 800b49a:	4313      	orrs	r3, r2
 800b49c:	d056      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4a8:	d033      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b4aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4ae:	d82c      	bhi.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4b4:	d02f      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b4b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4ba:	d826      	bhi.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b4c0:	d02b      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b4c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b4c6:	d820      	bhi.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4cc:	d012      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d2:	d81a      	bhi.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d022      	beq.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4dc:	d115      	bne.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e2:	3308      	adds	r3, #8
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f002 f8e0 	bl	800d6ac <RCCEx_PLL2_Config>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b4f2:	e015      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f8:	3328      	adds	r3, #40	; 0x28
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f002 f987 	bl	800d810 <RCCEx_PLL3_Config>
 800b502:	4603      	mov	r3, r0
 800b504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b508:	e00a      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b510:	e006      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b512:	bf00      	nop
 800b514:	e004      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b516:	bf00      	nop
 800b518:	e002      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b51a:	bf00      	nop
 800b51c:	e000      	b.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b51e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10d      	bne.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b536:	4a02      	ldr	r2, [pc, #8]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b538:	430b      	orrs	r3, r1
 800b53a:	6513      	str	r3, [r2, #80]	; 0x50
 800b53c:	e006      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b53e:	bf00      	nop
 800b540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b55c:	2300      	movs	r3, #0
 800b55e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b562:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b566:	460b      	mov	r3, r1
 800b568:	4313      	orrs	r3, r2
 800b56a:	d055      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b578:	d033      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b57a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b57e:	d82c      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b584:	d02f      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58a:	d826      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b58c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b590:	d02b      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b596:	d820      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b59c:	d012      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b59e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a2:	d81a      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d022      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b5a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5ac:	d115      	bne.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f002 f878 	bl	800d6ac <RCCEx_PLL2_Config>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b5c2:	e015      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	3328      	adds	r3, #40	; 0x28
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f002 f91f 	bl	800d810 <RCCEx_PLL3_Config>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b5d8:	e00a      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5e0:	e006      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5e2:	bf00      	nop
 800b5e4:	e004      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5e6:	bf00      	nop
 800b5e8:	e002      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5ea:	bf00      	nop
 800b5ec:	e000      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10b      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b5f8:	4ba3      	ldr	r3, [pc, #652]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b608:	4a9f      	ldr	r2, [pc, #636]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b60a:	430b      	orrs	r3, r1
 800b60c:	6593      	str	r3, [r2, #88]	; 0x58
 800b60e:	e003      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b628:	2300      	movs	r3, #0
 800b62a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b62e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b632:	460b      	mov	r3, r1
 800b634:	4313      	orrs	r3, r2
 800b636:	d037      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b642:	d00e      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b648:	d816      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d018      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b64e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b652:	d111      	bne.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b654:	4b8c      	ldr	r3, [pc, #560]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b658:	4a8b      	ldr	r2, [pc, #556]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b65a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b65e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b660:	e00f      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b666:	3308      	adds	r3, #8
 800b668:	2101      	movs	r1, #1
 800b66a:	4618      	mov	r0, r3
 800b66c:	f002 f81e 	bl	800d6ac <RCCEx_PLL2_Config>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b676:	e004      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b67e:	e000      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b680:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10a      	bne.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b68a:	4b7f      	ldr	r3, [pc, #508]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b68e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b698:	4a7b      	ldr	r2, [pc, #492]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b69a:	430b      	orrs	r3, r1
 800b69c:	6513      	str	r3, [r2, #80]	; 0x50
 800b69e:	e003      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b6b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	d039      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d81c      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b6d2:	a201      	add	r2, pc, #4	; (adr r2, 800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d8:	0800b715 	.word	0x0800b715
 800b6dc:	0800b6e9 	.word	0x0800b6e9
 800b6e0:	0800b6f7 	.word	0x0800b6f7
 800b6e4:	0800b715 	.word	0x0800b715
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e8:	4b67      	ldr	r3, [pc, #412]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ec:	4a66      	ldr	r2, [pc, #408]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b6f4:	e00f      	b.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	2102      	movs	r1, #2
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 ffd4 	bl	800d6ac <RCCEx_PLL2_Config>
 800b704:	4603      	mov	r3, r0
 800b706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b70a:	e004      	b.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b712:	e000      	b.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b714:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b71e:	4b5a      	ldr	r3, [pc, #360]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b722:	f023 0103 	bic.w	r1, r3, #3
 800b726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b72a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b72c:	4a56      	ldr	r2, [pc, #344]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b72e:	430b      	orrs	r3, r1
 800b730:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b732:	e003      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b74c:	2300      	movs	r3, #0
 800b74e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b752:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b756:	460b      	mov	r3, r1
 800b758:	4313      	orrs	r3, r2
 800b75a:	f000 809f 	beq.w	800b89c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b75e:	4b4b      	ldr	r3, [pc, #300]	; (800b88c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a4a      	ldr	r2, [pc, #296]	; (800b88c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b768:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b76a:	f7f8 fc09 	bl	8003f80 <HAL_GetTick>
 800b76e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b772:	e00b      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b774:	f7f8 fc04 	bl	8003f80 <HAL_GetTick>
 800b778:	4602      	mov	r2, r0
 800b77a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	2b64      	cmp	r3, #100	; 0x64
 800b782:	d903      	bls.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b78a:	e005      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b78c:	4b3f      	ldr	r3, [pc, #252]	; (800b88c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0ed      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d179      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b7a0:	4b39      	ldr	r3, [pc, #228]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7ac:	4053      	eors	r3, r2
 800b7ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d015      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b7b6:	4b34      	ldr	r3, [pc, #208]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b7c2:	4b31      	ldr	r3, [pc, #196]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c6:	4a30      	ldr	r2, [pc, #192]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b7ce:	4b2e      	ldr	r3, [pc, #184]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d2:	4a2d      	ldr	r2, [pc, #180]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b7da:	4a2b      	ldr	r2, [pc, #172]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b7e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ee:	d118      	bne.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f0:	f7f8 fbc6 	bl	8003f80 <HAL_GetTick>
 800b7f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7f8:	e00d      	b.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7fa:	f7f8 fbc1 	bl	8003f80 <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b804:	1ad2      	subs	r2, r2, r3
 800b806:	f241 3388 	movw	r3, #5000	; 0x1388
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d903      	bls.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b814:	e005      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b816:	4b1c      	ldr	r3, [pc, #112]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d0eb      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b826:	2b00      	cmp	r3, #0
 800b828:	d129      	bne.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b83a:	d10e      	bne.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b83c:	4b12      	ldr	r3, [pc, #72]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b848:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b84c:	091a      	lsrs	r2, r3, #4
 800b84e:	4b10      	ldr	r3, [pc, #64]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b850:	4013      	ands	r3, r2
 800b852:	4a0d      	ldr	r2, [pc, #52]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b854:	430b      	orrs	r3, r1
 800b856:	6113      	str	r3, [r2, #16]
 800b858:	e005      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b85a:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b860:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b864:	6113      	str	r3, [r2, #16]
 800b866:	4b08      	ldr	r3, [pc, #32]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b868:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b876:	4a04      	ldr	r2, [pc, #16]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b878:	430b      	orrs	r3, r1
 800b87a:	6713      	str	r3, [r2, #112]	; 0x70
 800b87c:	e00e      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b87e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b886:	e009      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b888:	58024400 	.word	0x58024400
 800b88c:	58024800 	.word	0x58024800
 800b890:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f002 0301 	and.w	r3, r2, #1
 800b8a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	f000 8089 	beq.w	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8c4:	2b28      	cmp	r3, #40	; 0x28
 800b8c6:	d86b      	bhi.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b8c8:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ce:	bf00      	nop
 800b8d0:	0800b9a9 	.word	0x0800b9a9
 800b8d4:	0800b9a1 	.word	0x0800b9a1
 800b8d8:	0800b9a1 	.word	0x0800b9a1
 800b8dc:	0800b9a1 	.word	0x0800b9a1
 800b8e0:	0800b9a1 	.word	0x0800b9a1
 800b8e4:	0800b9a1 	.word	0x0800b9a1
 800b8e8:	0800b9a1 	.word	0x0800b9a1
 800b8ec:	0800b9a1 	.word	0x0800b9a1
 800b8f0:	0800b975 	.word	0x0800b975
 800b8f4:	0800b9a1 	.word	0x0800b9a1
 800b8f8:	0800b9a1 	.word	0x0800b9a1
 800b8fc:	0800b9a1 	.word	0x0800b9a1
 800b900:	0800b9a1 	.word	0x0800b9a1
 800b904:	0800b9a1 	.word	0x0800b9a1
 800b908:	0800b9a1 	.word	0x0800b9a1
 800b90c:	0800b9a1 	.word	0x0800b9a1
 800b910:	0800b98b 	.word	0x0800b98b
 800b914:	0800b9a1 	.word	0x0800b9a1
 800b918:	0800b9a1 	.word	0x0800b9a1
 800b91c:	0800b9a1 	.word	0x0800b9a1
 800b920:	0800b9a1 	.word	0x0800b9a1
 800b924:	0800b9a1 	.word	0x0800b9a1
 800b928:	0800b9a1 	.word	0x0800b9a1
 800b92c:	0800b9a1 	.word	0x0800b9a1
 800b930:	0800b9a9 	.word	0x0800b9a9
 800b934:	0800b9a1 	.word	0x0800b9a1
 800b938:	0800b9a1 	.word	0x0800b9a1
 800b93c:	0800b9a1 	.word	0x0800b9a1
 800b940:	0800b9a1 	.word	0x0800b9a1
 800b944:	0800b9a1 	.word	0x0800b9a1
 800b948:	0800b9a1 	.word	0x0800b9a1
 800b94c:	0800b9a1 	.word	0x0800b9a1
 800b950:	0800b9a9 	.word	0x0800b9a9
 800b954:	0800b9a1 	.word	0x0800b9a1
 800b958:	0800b9a1 	.word	0x0800b9a1
 800b95c:	0800b9a1 	.word	0x0800b9a1
 800b960:	0800b9a1 	.word	0x0800b9a1
 800b964:	0800b9a1 	.word	0x0800b9a1
 800b968:	0800b9a1 	.word	0x0800b9a1
 800b96c:	0800b9a1 	.word	0x0800b9a1
 800b970:	0800b9a9 	.word	0x0800b9a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b978:	3308      	adds	r3, #8
 800b97a:	2101      	movs	r1, #1
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fe95 	bl	800d6ac <RCCEx_PLL2_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b988:	e00f      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98e:	3328      	adds	r3, #40	; 0x28
 800b990:	2101      	movs	r1, #1
 800b992:	4618      	mov	r0, r3
 800b994:	f001 ff3c 	bl	800d810 <RCCEx_PLL3_Config>
 800b998:	4603      	mov	r3, r0
 800b99a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b99e:	e004      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9a6:	e000      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10a      	bne.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b9b2:	4bbf      	ldr	r3, [pc, #764]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c0:	4abb      	ldr	r2, [pc, #748]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9c2:	430b      	orrs	r3, r1
 800b9c4:	6553      	str	r3, [r2, #84]	; 0x54
 800b9c6:	e003      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f002 0302 	and.w	r3, r2, #2
 800b9dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	d041      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9f6:	2b05      	cmp	r3, #5
 800b9f8:	d824      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ba00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba00:	0800ba4d 	.word	0x0800ba4d
 800ba04:	0800ba19 	.word	0x0800ba19
 800ba08:	0800ba2f 	.word	0x0800ba2f
 800ba0c:	0800ba4d 	.word	0x0800ba4d
 800ba10:	0800ba4d 	.word	0x0800ba4d
 800ba14:	0800ba4d 	.word	0x0800ba4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4618      	mov	r0, r3
 800ba22:	f001 fe43 	bl	800d6ac <RCCEx_PLL2_Config>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba2c:	e00f      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba32:	3328      	adds	r3, #40	; 0x28
 800ba34:	2101      	movs	r1, #1
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 feea 	bl	800d810 <RCCEx_PLL3_Config>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba42:	e004      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba4a:	e000      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ba4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba56:	4b96      	ldr	r3, [pc, #600]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5a:	f023 0107 	bic.w	r1, r3, #7
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba64:	4a92      	ldr	r2, [pc, #584]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba66:	430b      	orrs	r3, r1
 800ba68:	6553      	str	r3, [r2, #84]	; 0x54
 800ba6a:	e003      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f002 0304 	and.w	r3, r2, #4
 800ba80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba84:	2300      	movs	r3, #0
 800ba86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4313      	orrs	r3, r2
 800ba92:	d044      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba9c:	2b05      	cmp	r3, #5
 800ba9e:	d825      	bhi.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800baa0:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800baa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800baf5 	.word	0x0800baf5
 800baac:	0800bac1 	.word	0x0800bac1
 800bab0:	0800bad7 	.word	0x0800bad7
 800bab4:	0800baf5 	.word	0x0800baf5
 800bab8:	0800baf5 	.word	0x0800baf5
 800babc:	0800baf5 	.word	0x0800baf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac4:	3308      	adds	r3, #8
 800bac6:	2101      	movs	r1, #1
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 fdef 	bl	800d6ac <RCCEx_PLL2_Config>
 800bace:	4603      	mov	r3, r0
 800bad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bad4:	e00f      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bada:	3328      	adds	r3, #40	; 0x28
 800badc:	2101      	movs	r1, #1
 800bade:	4618      	mov	r0, r3
 800bae0:	f001 fe96 	bl	800d810 <RCCEx_PLL3_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800baea:	e004      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baf2:	e000      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800baf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10b      	bne.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bafe:	4b6c      	ldr	r3, [pc, #432]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb02:	f023 0107 	bic.w	r1, r3, #7
 800bb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb0e:	4a68      	ldr	r2, [pc, #416]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb10:	430b      	orrs	r3, r1
 800bb12:	6593      	str	r3, [r2, #88]	; 0x58
 800bb14:	e003      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f002 0320 	and.w	r3, r2, #32
 800bb2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	d055      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb4a:	d033      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bb4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb50:	d82c      	bhi.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb56:	d02f      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bb58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb5c:	d826      	bhi.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb62:	d02b      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bb64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb68:	d820      	bhi.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb6e:	d012      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bb70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb74:	d81a      	bhi.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d022      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bb7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb7e:	d115      	bne.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb84:	3308      	adds	r3, #8
 800bb86:	2100      	movs	r1, #0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f001 fd8f 	bl	800d6ac <RCCEx_PLL2_Config>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb94:	e015      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	3328      	adds	r3, #40	; 0x28
 800bb9c:	2102      	movs	r1, #2
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f001 fe36 	bl	800d810 <RCCEx_PLL3_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bbaa:	e00a      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbb2:	e006      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbb4:	bf00      	nop
 800bbb6:	e004      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbb8:	bf00      	nop
 800bbba:	e002      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbbc:	bf00      	nop
 800bbbe:	e000      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10b      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bbca:	4b39      	ldr	r3, [pc, #228]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbda:	4a35      	ldr	r2, [pc, #212]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbdc:	430b      	orrs	r3, r1
 800bbde:	6553      	str	r3, [r2, #84]	; 0x54
 800bbe0:	e003      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bbf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bc04:	460b      	mov	r3, r1
 800bc06:	4313      	orrs	r3, r2
 800bc08:	d058      	beq.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc16:	d033      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bc18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc1c:	d82c      	bhi.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc22:	d02f      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bc24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc28:	d826      	bhi.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc2e:	d02b      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bc30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc34:	d820      	bhi.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc3a:	d012      	beq.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bc3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc40:	d81a      	bhi.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d022      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bc46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc4a:	d115      	bne.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc50:	3308      	adds	r3, #8
 800bc52:	2100      	movs	r1, #0
 800bc54:	4618      	mov	r0, r3
 800bc56:	f001 fd29 	bl	800d6ac <RCCEx_PLL2_Config>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc60:	e015      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc66:	3328      	adds	r3, #40	; 0x28
 800bc68:	2102      	movs	r1, #2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f001 fdd0 	bl	800d810 <RCCEx_PLL3_Config>
 800bc70:	4603      	mov	r3, r0
 800bc72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc76:	e00a      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc7e:	e006      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc80:	bf00      	nop
 800bc82:	e004      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc84:	bf00      	nop
 800bc86:	e002      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc88:	bf00      	nop
 800bc8a:	e000      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10e      	bne.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc96:	4b06      	ldr	r3, [pc, #24]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc9a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bca6:	4a02      	ldr	r2, [pc, #8]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bca8:	430b      	orrs	r3, r1
 800bcaa:	6593      	str	r3, [r2, #88]	; 0x58
 800bcac:	e006      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bcae:	bf00      	nop
 800bcb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bcc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bccc:	2300      	movs	r3, #0
 800bcce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	d055      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bcdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bce4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bce8:	d033      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bcea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcee:	d82c      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf4:	d02f      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bcf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcfa:	d826      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bcfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd00:	d02b      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bd02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd06:	d820      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd0c:	d012      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bd0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd12:	d81a      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d022      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bd18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd1c:	d115      	bne.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd22:	3308      	adds	r3, #8
 800bd24:	2100      	movs	r1, #0
 800bd26:	4618      	mov	r0, r3
 800bd28:	f001 fcc0 	bl	800d6ac <RCCEx_PLL2_Config>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd32:	e015      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd38:	3328      	adds	r3, #40	; 0x28
 800bd3a:	2102      	movs	r1, #2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f001 fd67 	bl	800d810 <RCCEx_PLL3_Config>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd48:	e00a      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd50:	e006      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd52:	bf00      	nop
 800bd54:	e004      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd56:	bf00      	nop
 800bd58:	e002      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd5a:	bf00      	nop
 800bd5c:	e000      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10b      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd68:	4ba1      	ldr	r3, [pc, #644]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd78:	4a9d      	ldr	r2, [pc, #628]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd7a:	430b      	orrs	r3, r1
 800bd7c:	6593      	str	r3, [r2, #88]	; 0x58
 800bd7e:	e003      	b.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f002 0308 	and.w	r3, r2, #8
 800bd94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bda2:	460b      	mov	r3, r1
 800bda4:	4313      	orrs	r3, r2
 800bda6:	d01e      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb4:	d10c      	bne.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdba:	3328      	adds	r3, #40	; 0x28
 800bdbc:	2102      	movs	r1, #2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f001 fd26 	bl	800d810 <RCCEx_PLL3_Config>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bdd0:	4b87      	ldr	r3, [pc, #540]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde0:	4a83      	ldr	r2, [pc, #524]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde2:	430b      	orrs	r3, r1
 800bde4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f002 0310 	and.w	r3, r2, #16
 800bdf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bdfc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800be00:	460b      	mov	r3, r1
 800be02:	4313      	orrs	r3, r2
 800be04:	d01e      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800be06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be12:	d10c      	bne.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be18:	3328      	adds	r3, #40	; 0x28
 800be1a:	2102      	movs	r1, #2
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 fcf7 	bl	800d810 <RCCEx_PLL3_Config>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be2e:	4b70      	ldr	r3, [pc, #448]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be3e:	4a6c      	ldr	r2, [pc, #432]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be40:	430b      	orrs	r3, r1
 800be42:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800be50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be54:	2300      	movs	r3, #0
 800be56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800be5e:	460b      	mov	r3, r1
 800be60:	4313      	orrs	r3, r2
 800be62:	d03e      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800be64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be70:	d022      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800be72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be76:	d81b      	bhi.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800be7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be80:	d00b      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800be82:	e015      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be88:	3308      	adds	r3, #8
 800be8a:	2100      	movs	r1, #0
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 fc0d 	bl	800d6ac <RCCEx_PLL2_Config>
 800be92:	4603      	mov	r3, r0
 800be94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be98:	e00f      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9e:	3328      	adds	r3, #40	; 0x28
 800bea0:	2102      	movs	r1, #2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 fcb4 	bl	800d810 <RCCEx_PLL3_Config>
 800bea8:	4603      	mov	r3, r0
 800beaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800beae:	e004      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beb6:	e000      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800beb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10b      	bne.n	800beda <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bec2:	4b4b      	ldr	r3, [pc, #300]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bec6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bed2:	4a47      	ldr	r2, [pc, #284]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bed4:	430b      	orrs	r3, r1
 800bed6:	6593      	str	r3, [r2, #88]	; 0x58
 800bed8:	e003      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800beee:	67bb      	str	r3, [r7, #120]	; 0x78
 800bef0:	2300      	movs	r3, #0
 800bef2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bef4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bef8:	460b      	mov	r3, r1
 800befa:	4313      	orrs	r3, r2
 800befc:	d03b      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800befe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf0a:	d01f      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bf0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf10:	d818      	bhi.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bf12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf16:	d003      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bf18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf1c:	d007      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bf1e:	e011      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf20:	4b33      	ldr	r3, [pc, #204]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	4a32      	ldr	r2, [pc, #200]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf2c:	e00f      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf32:	3328      	adds	r3, #40	; 0x28
 800bf34:	2101      	movs	r1, #1
 800bf36:	4618      	mov	r0, r3
 800bf38:	f001 fc6a 	bl	800d810 <RCCEx_PLL3_Config>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf42:	e004      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf4a:	e000      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bf4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10b      	bne.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf56:	4b26      	ldr	r3, [pc, #152]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bf5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf66:	4a22      	ldr	r2, [pc, #136]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf68:	430b      	orrs	r3, r1
 800bf6a:	6553      	str	r3, [r2, #84]	; 0x54
 800bf6c:	e003      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf82:	673b      	str	r3, [r7, #112]	; 0x70
 800bf84:	2300      	movs	r3, #0
 800bf86:	677b      	str	r3, [r7, #116]	; 0x74
 800bf88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	d034      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bf92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bf9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa0:	d007      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bfa2:	e011      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfa4:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa8:	4a11      	ldr	r2, [pc, #68]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bfb0:	e00e      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	2102      	movs	r1, #2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f001 fb76 	bl	800d6ac <RCCEx_PLL2_Config>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bfc6:	e003      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10d      	bne.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe6:	4a02      	ldr	r2, [pc, #8]	; (800bff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfec:	e006      	b.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bfee:	bf00      	nop
 800bff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c008:	66bb      	str	r3, [r7, #104]	; 0x68
 800c00a:	2300      	movs	r3, #0
 800c00c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c00e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c012:	460b      	mov	r3, r1
 800c014:	4313      	orrs	r3, r2
 800c016:	d00c      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01c:	3328      	adds	r3, #40	; 0x28
 800c01e:	2102      	movs	r1, #2
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fbf5 	bl	800d810 <RCCEx_PLL3_Config>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c03e:	663b      	str	r3, [r7, #96]	; 0x60
 800c040:	2300      	movs	r3, #0
 800c042:	667b      	str	r3, [r7, #100]	; 0x64
 800c044:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c048:	460b      	mov	r3, r1
 800c04a:	4313      	orrs	r3, r2
 800c04c:	d038      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c05a:	d018      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c05c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c060:	d811      	bhi.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c066:	d014      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c06c:	d80b      	bhi.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d011      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c076:	d106      	bne.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c078:	4bc3      	ldr	r3, [pc, #780]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	4ac2      	ldr	r2, [pc, #776]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c07e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c084:	e008      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c08c:	e004      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c08e:	bf00      	nop
 800c090:	e002      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10b      	bne.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0a0:	4bb9      	ldr	r3, [pc, #740]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0b0:	4ab5      	ldr	r2, [pc, #724]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0b2:	430b      	orrs	r3, r1
 800c0b4:	6553      	str	r3, [r2, #84]	; 0x54
 800c0b6:	e003      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c0cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	d009      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c0dc:	4baa      	ldr	r3, [pc, #680]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ea:	4aa7      	ldr	r2, [pc, #668]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c0fc:	653b      	str	r3, [r7, #80]	; 0x50
 800c0fe:	2300      	movs	r3, #0
 800c100:	657b      	str	r3, [r7, #84]	; 0x54
 800c102:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c106:	460b      	mov	r3, r1
 800c108:	4313      	orrs	r3, r2
 800c10a:	d00a      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c10c:	4b9e      	ldr	r3, [pc, #632]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c118:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c11c:	4a9a      	ldr	r2, [pc, #616]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c11e:	430b      	orrs	r3, r1
 800c120:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c12e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c130:	2300      	movs	r3, #0
 800c132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c134:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c138:	460b      	mov	r3, r1
 800c13a:	4313      	orrs	r3, r2
 800c13c:	d009      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c13e:	4b92      	ldr	r3, [pc, #584]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c142:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c14c:	4a8e      	ldr	r2, [pc, #568]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c14e:	430b      	orrs	r3, r1
 800c150:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c15e:	643b      	str	r3, [r7, #64]	; 0x40
 800c160:	2300      	movs	r3, #0
 800c162:	647b      	str	r3, [r7, #68]	; 0x44
 800c164:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c168:	460b      	mov	r3, r1
 800c16a:	4313      	orrs	r3, r2
 800c16c:	d00e      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c16e:	4b86      	ldr	r3, [pc, #536]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	4a85      	ldr	r2, [pc, #532]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c178:	6113      	str	r3, [r2, #16]
 800c17a:	4b83      	ldr	r3, [pc, #524]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c17c:	6919      	ldr	r1, [r3, #16]
 800c17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c182:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c186:	4a80      	ldr	r2, [pc, #512]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c188:	430b      	orrs	r3, r1
 800c18a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c198:	63bb      	str	r3, [r7, #56]	; 0x38
 800c19a:	2300      	movs	r3, #0
 800c19c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c19e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	d009      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c1a8:	4b77      	ldr	r3, [pc, #476]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b6:	4a74      	ldr	r2, [pc, #464]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1b8:	430b      	orrs	r3, r1
 800c1ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c1c8:	633b      	str	r3, [r7, #48]	; 0x30
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	d00a      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1d8:	4b6b      	ldr	r3, [pc, #428]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1e8:	4a67      	ldr	r2, [pc, #412]	; (800c388 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ea:	430b      	orrs	r3, r1
 800c1ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	62b9      	str	r1, [r7, #40]	; 0x28
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c200:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c204:	460b      	mov	r3, r1
 800c206:	4313      	orrs	r3, r2
 800c208:	d011      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20e:	3308      	adds	r3, #8
 800c210:	2100      	movs	r1, #0
 800c212:	4618      	mov	r0, r3
 800c214:	f001 fa4a 	bl	800d6ac <RCCEx_PLL2_Config>
 800c218:	4603      	mov	r3, r0
 800c21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c222:	2b00      	cmp	r3, #0
 800c224:	d003      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c22a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	2100      	movs	r1, #0
 800c238:	6239      	str	r1, [r7, #32]
 800c23a:	f003 0302 	and.w	r3, r3, #2
 800c23e:	627b      	str	r3, [r7, #36]	; 0x24
 800c240:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c244:	460b      	mov	r3, r1
 800c246:	4313      	orrs	r3, r2
 800c248:	d011      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24e:	3308      	adds	r3, #8
 800c250:	2101      	movs	r1, #1
 800c252:	4618      	mov	r0, r3
 800c254:	f001 fa2a 	bl	800d6ac <RCCEx_PLL2_Config>
 800c258:	4603      	mov	r3, r0
 800c25a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c25e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c26a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	2100      	movs	r1, #0
 800c278:	61b9      	str	r1, [r7, #24]
 800c27a:	f003 0304 	and.w	r3, r3, #4
 800c27e:	61fb      	str	r3, [r7, #28]
 800c280:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c284:	460b      	mov	r3, r1
 800c286:	4313      	orrs	r3, r2
 800c288:	d011      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28e:	3308      	adds	r3, #8
 800c290:	2102      	movs	r1, #2
 800c292:	4618      	mov	r0, r3
 800c294:	f001 fa0a 	bl	800d6ac <RCCEx_PLL2_Config>
 800c298:	4603      	mov	r3, r0
 800c29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c29e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	6139      	str	r1, [r7, #16]
 800c2ba:	f003 0308 	and.w	r3, r3, #8
 800c2be:	617b      	str	r3, [r7, #20]
 800c2c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	d011      	beq.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ce:	3328      	adds	r3, #40	; 0x28
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 fa9c 	bl	800d810 <RCCEx_PLL3_Config>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d003      	beq.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c304:	460b      	mov	r3, r1
 800c306:	4313      	orrs	r3, r2
 800c308:	d011      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30e:	3328      	adds	r3, #40	; 0x28
 800c310:	2101      	movs	r1, #1
 800c312:	4618      	mov	r0, r3
 800c314:	f001 fa7c 	bl	800d810 <RCCEx_PLL3_Config>
 800c318:	4603      	mov	r3, r0
 800c31a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c31e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c32a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	2100      	movs	r1, #0
 800c338:	6039      	str	r1, [r7, #0]
 800c33a:	f003 0320 	and.w	r3, r3, #32
 800c33e:	607b      	str	r3, [r7, #4]
 800c340:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c344:	460b      	mov	r3, r1
 800c346:	4313      	orrs	r3, r2
 800c348:	d011      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34e:	3328      	adds	r3, #40	; 0x28
 800c350:	2102      	movs	r1, #2
 800c352:	4618      	mov	r0, r3
 800c354:	f001 fa5c 	bl	800d810 <RCCEx_PLL3_Config>
 800c358:	4603      	mov	r3, r0
 800c35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c35e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c36a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c36e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	e000      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c382:	46bd      	mov	sp, r7
 800c384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c388:	58024400 	.word	0x58024400

0800c38c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b090      	sub	sp, #64	; 0x40
 800c390:	af00      	add	r7, sp, #0
 800c392:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c39a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	f040 8094 	bne.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c3a4:	4b9e      	ldr	r3, [pc, #632]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a8:	f003 0307 	and.w	r3, r3, #7
 800c3ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	f200 8087 	bhi.w	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c3b6:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3d1 	.word	0x0800c3d1
 800c3c0:	0800c3f9 	.word	0x0800c3f9
 800c3c4:	0800c421 	.word	0x0800c421
 800c3c8:	0800c4bd 	.word	0x0800c4bd
 800c3cc:	0800c449 	.word	0x0800c449
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3d0:	4b93      	ldr	r3, [pc, #588]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3dc:	d108      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f001 f810 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ec:	f000 bd45 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	f000 bd41 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3f8:	4b89      	ldr	r3, [pc, #548]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c404:	d108      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c406:	f107 0318 	add.w	r3, r7, #24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fd54 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c414:	f000 bd31 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	f000 bd2d 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c420:	4b7f      	ldr	r3, [pc, #508]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c42c:	d108      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c42e:	f107 030c 	add.w	r3, r7, #12
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fe94 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43c:	f000 bd1d 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c444:	f000 bd19 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c448:	4b75      	ldr	r3, [pc, #468]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c44a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c450:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c452:	4b73      	ldr	r3, [pc, #460]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0304 	and.w	r3, r3, #4
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	d10c      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c460:	2b00      	cmp	r3, #0
 800c462:	d109      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c464:	4b6e      	ldr	r3, [pc, #440]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	08db      	lsrs	r3, r3, #3
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	4a6d      	ldr	r2, [pc, #436]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c470:	fa22 f303 	lsr.w	r3, r2, r3
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c476:	e01f      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c478:	4b69      	ldr	r3, [pc, #420]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c484:	d106      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c48c:	d102      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c48e:	4b66      	ldr	r3, [pc, #408]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c492:	e011      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c494:	4b62      	ldr	r3, [pc, #392]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a0:	d106      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4a8:	d102      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4aa:	4b60      	ldr	r3, [pc, #384]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ae:	e003      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4b4:	f000 bce1 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4b8:	f000 bcdf 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4bc:	4b5c      	ldr	r3, [pc, #368]	; (800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c0:	f000 bcdb 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c8:	f000 bcd7 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	f040 80ad 	bne.w	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c4da:	4b51      	ldr	r3, [pc, #324]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c4e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ea:	d056      	beq.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4f2:	f200 8090 	bhi.w	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	2bc0      	cmp	r3, #192	; 0xc0
 800c4fa:	f000 8088 	beq.w	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	2bc0      	cmp	r3, #192	; 0xc0
 800c502:	f200 8088 	bhi.w	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	2b80      	cmp	r3, #128	; 0x80
 800c50a:	d032      	beq.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	2b80      	cmp	r3, #128	; 0x80
 800c510:	f200 8081 	bhi.w	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2b40      	cmp	r3, #64	; 0x40
 800c51e:	d014      	beq.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c520:	e079      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c522:	4b3f      	ldr	r3, [pc, #252]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c52e:	d108      	bne.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c534:	4618      	mov	r0, r3
 800c536:	f000 ff67 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c53e:	f000 bc9c 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	f000 bc98 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c54a:	4b35      	ldr	r3, [pc, #212]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c556:	d108      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c558:	f107 0318 	add.w	r3, r7, #24
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 fcab 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c566:	f000 bc88 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c56a:	2300      	movs	r3, #0
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56e:	f000 bc84 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c572:	4b2b      	ldr	r3, [pc, #172]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c57a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c57e:	d108      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c580:	f107 030c 	add.w	r3, r7, #12
 800c584:	4618      	mov	r0, r3
 800c586:	f000 fdeb 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58e:	f000 bc74 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	f000 bc70 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c59a:	4b21      	ldr	r3, [pc, #132]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c59e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5a4:	4b1e      	ldr	r3, [pc, #120]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0304 	and.w	r3, r3, #4
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	d10c      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d109      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5b6:	4b1a      	ldr	r3, [pc, #104]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	08db      	lsrs	r3, r3, #3
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	4a18      	ldr	r2, [pc, #96]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c8:	e01f      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5d6:	d106      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5de:	d102      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5e0:	4b11      	ldr	r3, [pc, #68]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e4:	e011      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5e6:	4b0e      	ldr	r3, [pc, #56]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5f2:	d106      	bne.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5fa:	d102      	bne.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5fc:	4b0b      	ldr	r3, [pc, #44]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c600:	e003      	b.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c606:	f000 bc38 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c60a:	f000 bc36 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c60e:	4b08      	ldr	r3, [pc, #32]	; (800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c612:	f000 bc32 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	f000 bc2e 	b.w	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c61e:	bf00      	nop
 800c620:	58024400 	.word	0x58024400
 800c624:	03d09000 	.word	0x03d09000
 800c628:	003d0900 	.word	0x003d0900
 800c62c:	017d7840 	.word	0x017d7840
 800c630:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c634:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c638:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c63c:	430b      	orrs	r3, r1
 800c63e:	f040 809c 	bne.w	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c642:	4b9e      	ldr	r3, [pc, #632]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c646:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c64a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c652:	d054      	beq.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c65a:	f200 808b 	bhi.w	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c660:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c664:	f000 8083 	beq.w	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c66e:	f200 8081 	bhi.w	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c678:	d02f      	beq.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c680:	d878      	bhi.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c68e:	d012      	beq.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c690:	e070      	b.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c692:	4b8a      	ldr	r3, [pc, #552]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c69a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c69e:	d107      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 feaf 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ae:	e3e4      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b4:	e3e1      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6b6:	4b81      	ldr	r3, [pc, #516]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6c2:	d107      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6c4:	f107 0318 	add.w	r3, r7, #24
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 fbf5 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d2:	e3d2      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d8:	e3cf      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6da:	4b78      	ldr	r3, [pc, #480]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6e6:	d107      	bne.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6e8:	f107 030c 	add.w	r3, r7, #12
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 fd37 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f6:	e3c0      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fc:	e3bd      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6fe:	4b6f      	ldr	r3, [pc, #444]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c706:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c708:	4b6c      	ldr	r3, [pc, #432]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0304 	and.w	r3, r3, #4
 800c710:	2b04      	cmp	r3, #4
 800c712:	d10c      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c716:	2b00      	cmp	r3, #0
 800c718:	d109      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c71a:	4b68      	ldr	r3, [pc, #416]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	08db      	lsrs	r3, r3, #3
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	4a66      	ldr	r2, [pc, #408]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c726:	fa22 f303 	lsr.w	r3, r2, r3
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	e01e      	b.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c72e:	4b63      	ldr	r3, [pc, #396]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c73a:	d106      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c742:	d102      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c744:	4b5f      	ldr	r3, [pc, #380]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c748:	e010      	b.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c74a:	4b5c      	ldr	r3, [pc, #368]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c756:	d106      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c75e:	d102      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c760:	4b59      	ldr	r3, [pc, #356]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c764:	e002      	b.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c76a:	e386      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c76c:	e385      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c76e:	4b57      	ldr	r3, [pc, #348]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c772:	e382      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c778:	e37f      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c77a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c77e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c782:	430b      	orrs	r3, r1
 800c784:	f040 80a7 	bne.w	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c788:	4b4c      	ldr	r3, [pc, #304]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c790:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c798:	d055      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7a0:	f200 8096 	bhi.w	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7aa:	f000 8084 	beq.w	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7b4:	f200 808c 	bhi.w	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7be:	d030      	beq.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7c6:	f200 8083 	bhi.w	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d004      	beq.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c7d6:	d012      	beq.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c7d8:	e07a      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7da:	4b38      	ldr	r3, [pc, #224]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7e6:	d107      	bne.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 fe0b 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f6:	e340      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fc:	e33d      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7fe:	4b2f      	ldr	r3, [pc, #188]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c80a:	d107      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c80c:	f107 0318 	add.w	r3, r7, #24
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fb51 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81a:	e32e      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c820:	e32b      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c822:	4b26      	ldr	r3, [pc, #152]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c82a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c82e:	d107      	bne.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c830:	f107 030c 	add.w	r3, r7, #12
 800c834:	4618      	mov	r0, r3
 800c836:	f000 fc93 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83e:	e31c      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c844:	e319      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c846:	4b1d      	ldr	r3, [pc, #116]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c84a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c850:	4b1a      	ldr	r3, [pc, #104]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d10c      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d109      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c862:	4b16      	ldr	r3, [pc, #88]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	08db      	lsrs	r3, r3, #3
 800c868:	f003 0303 	and.w	r3, r3, #3
 800c86c:	4a14      	ldr	r2, [pc, #80]	; (800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c86e:	fa22 f303 	lsr.w	r3, r2, r3
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c874:	e01e      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c876:	4b11      	ldr	r3, [pc, #68]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c882:	d106      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c88a:	d102      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c88c:	4b0d      	ldr	r3, [pc, #52]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c890:	e010      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c892:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c89a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c89e:	d106      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a6:	d102      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a8:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ac:	e002      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8b2:	e2e2      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8b4:	e2e1      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8b6:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ba:	e2de      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8bc:	58024400 	.word	0x58024400
 800c8c0:	03d09000 	.word	0x03d09000
 800c8c4:	003d0900 	.word	0x003d0900
 800c8c8:	017d7840 	.word	0x017d7840
 800c8cc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d4:	e2d1      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c8d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8da:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	f040 809c 	bne.w	800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c8e4:	4b93      	ldr	r3, [pc, #588]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c8ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8f4:	d054      	beq.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8fc:	f200 808b 	bhi.w	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c906:	f000 8083 	beq.w	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c910:	f200 8081 	bhi.w	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c91a:	d02f      	beq.n	800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c922:	d878      	bhi.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c926:	2b00      	cmp	r3, #0
 800c928:	d004      	beq.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c930:	d012      	beq.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c932:	e070      	b.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c934:	4b7f      	ldr	r3, [pc, #508]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c93c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c940:	d107      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fd5e 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c950:	e293      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c956:	e290      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c958:	4b76      	ldr	r3, [pc, #472]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c964:	d107      	bne.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c966:	f107 0318 	add.w	r3, r7, #24
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 faa4 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c974:	e281      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c97a:	e27e      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c97c:	4b6d      	ldr	r3, [pc, #436]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c988:	d107      	bne.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c98a:	f107 030c 	add.w	r3, r7, #12
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 fbe6 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c998:	e26f      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99e:	e26c      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9a0:	4b64      	ldr	r3, [pc, #400]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9aa:	4b62      	ldr	r3, [pc, #392]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 0304 	and.w	r3, r3, #4
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d10c      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d109      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9bc:	4b5d      	ldr	r3, [pc, #372]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	08db      	lsrs	r3, r3, #3
 800c9c2:	f003 0303 	and.w	r3, r3, #3
 800c9c6:	4a5c      	ldr	r2, [pc, #368]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ce:	e01e      	b.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9d0:	4b58      	ldr	r3, [pc, #352]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9dc:	d106      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9e4:	d102      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9e6:	4b55      	ldr	r3, [pc, #340]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ea:	e010      	b.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9ec:	4b51      	ldr	r3, [pc, #324]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f8:	d106      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca00:	d102      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca02:	4b4f      	ldr	r3, [pc, #316]	; (800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca06:	e002      	b.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca0c:	e235      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca0e:	e234      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca10:	4b4c      	ldr	r3, [pc, #304]	; (800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca14:	e231      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca1a:	e22e      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca20:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ca24:	430b      	orrs	r3, r1
 800ca26:	f040 808f 	bne.w	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca2a:	4b42      	ldr	r3, [pc, #264]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca2e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ca32:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca3a:	d06b      	beq.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca42:	d874      	bhi.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca4a:	d056      	beq.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca52:	d86c      	bhi.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca5a:	d03b      	beq.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca62:	d864      	bhi.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca6a:	d021      	beq.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca72:	d85c      	bhi.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d004      	beq.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca80:	d004      	beq.n	800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ca82:	e054      	b.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ca84:	f7fe fa0a 	bl	800ae9c <HAL_RCC_GetPCLK1Freq>
 800ca88:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca8a:	e1f6      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca8c:	4b29      	ldr	r3, [pc, #164]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca98:	d107      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca9a:	f107 0318 	add.w	r3, r7, #24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fa0a 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa8:	e1e7      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caae:	e1e4      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cab0:	4b20      	ldr	r3, [pc, #128]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cabc:	d107      	bne.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cabe:	f107 030c 	add.w	r3, r7, #12
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fb4c 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cacc:	e1d5      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad2:	e1d2      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cad4:	4b17      	ldr	r3, [pc, #92]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 0304 	and.w	r3, r3, #4
 800cadc:	2b04      	cmp	r3, #4
 800cade:	d109      	bne.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cae0:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	08db      	lsrs	r3, r3, #3
 800cae6:	f003 0303 	and.w	r3, r3, #3
 800caea:	4a13      	ldr	r2, [pc, #76]	; (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800caec:	fa22 f303 	lsr.w	r3, r2, r3
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf2:	e1c2      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf8:	e1bf      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cafa:	4b0e      	ldr	r3, [pc, #56]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb06:	d102      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cb08:	4b0c      	ldr	r3, [pc, #48]	; (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb0c:	e1b5      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb12:	e1b2      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb14:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb20:	d102      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cb22:	4b07      	ldr	r3, [pc, #28]	; (800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e1a8      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2c:	e1a5      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb32:	e1a2      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb34:	58024400 	.word	0x58024400
 800cb38:	03d09000 	.word	0x03d09000
 800cb3c:	003d0900 	.word	0x003d0900
 800cb40:	017d7840 	.word	0x017d7840
 800cb44:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cb50:	430b      	orrs	r3, r1
 800cb52:	d173      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb54:	4b9c      	ldr	r3, [pc, #624]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb64:	d02f      	beq.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb6c:	d863      	bhi.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d004      	beq.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb7a:	d012      	beq.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cb7c:	e05b      	b.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb7e:	4b92      	ldr	r3, [pc, #584]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb8a:	d107      	bne.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb8c:	f107 0318 	add.w	r3, r7, #24
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 f991 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb9a:	e16e      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba0:	e16b      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cba2:	4b89      	ldr	r3, [pc, #548]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbae:	d107      	bne.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbb0:	f107 030c 	add.w	r3, r7, #12
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fad3 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbbe:	e15c      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc4:	e159      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbc6:	4b80      	ldr	r3, [pc, #512]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbd0:	4b7d      	ldr	r3, [pc, #500]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	d10c      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d109      	bne.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbe2:	4b79      	ldr	r3, [pc, #484]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	08db      	lsrs	r3, r3, #3
 800cbe8:	f003 0303 	and.w	r3, r3, #3
 800cbec:	4a77      	ldr	r2, [pc, #476]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cbee:	fa22 f303 	lsr.w	r3, r2, r3
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbf4:	e01e      	b.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbf6:	4b74      	ldr	r3, [pc, #464]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc02:	d106      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc0a:	d102      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc0c:	4b70      	ldr	r3, [pc, #448]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc10:	e010      	b.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc12:	4b6d      	ldr	r3, [pc, #436]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc1e:	d106      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc26:	d102      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc28:	4b6a      	ldr	r3, [pc, #424]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc2c:	e002      	b.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc32:	e122      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc34:	e121      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3a:	e11e      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc40:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cc44:	430b      	orrs	r3, r1
 800cc46:	d133      	bne.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc48:	4b5f      	ldr	r3, [pc, #380]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d004      	beq.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc5e:	d012      	beq.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cc60:	e023      	b.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc62:	4b59      	ldr	r3, [pc, #356]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc6e:	d107      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fbc7 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc7e:	e0fc      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc84:	e0f9      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc86:	4b50      	ldr	r3, [pc, #320]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc92:	d107      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc94:	f107 0318 	add.w	r3, r7, #24
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f90d 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca2:	e0ea      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca8:	e0e7      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccae:	e0e4      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ccb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccb4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ccb8:	430b      	orrs	r3, r1
 800ccba:	f040 808d 	bne.w	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ccbe:	4b42      	ldr	r3, [pc, #264]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccc2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ccc6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccce:	d06b      	beq.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccd6:	d874      	bhi.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccde:	d056      	beq.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce6:	d86c      	bhi.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccee:	d03b      	beq.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccf6:	d864      	bhi.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccfe:	d021      	beq.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd06:	d85c      	bhi.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd14:	d004      	beq.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cd16:	e054      	b.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd18:	f000 f8b8 	bl	800ce8c <HAL_RCCEx_GetD3PCLK1Freq>
 800cd1c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd1e:	e0ac      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd20:	4b29      	ldr	r3, [pc, #164]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd2c:	d107      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 f8c0 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd3c:	e09d      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd42:	e09a      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd44:	4b20      	ldr	r3, [pc, #128]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd50:	d107      	bne.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd52:	f107 030c 	add.w	r3, r7, #12
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 fa02 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd60:	e08b      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd66:	e088      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd68:	4b17      	ldr	r3, [pc, #92]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	d109      	bne.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd74:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	08db      	lsrs	r3, r3, #3
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	4a13      	ldr	r2, [pc, #76]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd80:	fa22 f303 	lsr.w	r3, r2, r3
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd86:	e078      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8c:	e075      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cd8e:	4b0e      	ldr	r3, [pc, #56]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd9a:	d102      	bne.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda0:	e06b      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda6:	e068      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cda8:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdb4:	d102      	bne.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cdb6:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdba:	e05e      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc0:	e05b      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc6:	e058      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cdc8:	58024400 	.word	0x58024400
 800cdcc:	03d09000 	.word	0x03d09000
 800cdd0:	003d0900 	.word	0x003d0900
 800cdd4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cddc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cde0:	430b      	orrs	r3, r1
 800cde2:	d148      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cde4:	4b27      	ldr	r3, [pc, #156]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cdec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdf4:	d02a      	beq.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdfc:	d838      	bhi.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce0a:	d00d      	beq.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ce0c:	e030      	b.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce0e:	4b1d      	ldr	r3, [pc, #116]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce1a:	d102      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ce1c:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce20:	e02b      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce26:	e028      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce28:	4b16      	ldr	r3, [pc, #88]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce34:	d107      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 fae4 	bl	800d408 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce44:	e019      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce4a:	e016      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce58:	d107      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce5a:	f107 0318 	add.w	r3, r7, #24
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f82a 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce68:	e007      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce6e:	e004      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce74:	e001      	b.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ce7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3740      	adds	r7, #64	; 0x40
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	58024400 	.word	0x58024400
 800ce88:	017d7840 	.word	0x017d7840

0800ce8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ce90:	f7fd ffd4 	bl	800ae3c <HAL_RCC_GetHCLKFreq>
 800ce94:	4602      	mov	r2, r0
 800ce96:	4b06      	ldr	r3, [pc, #24]	; (800ceb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ce98:	6a1b      	ldr	r3, [r3, #32]
 800ce9a:	091b      	lsrs	r3, r3, #4
 800ce9c:	f003 0307 	and.w	r3, r3, #7
 800cea0:	4904      	ldr	r1, [pc, #16]	; (800ceb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cea2:	5ccb      	ldrb	r3, [r1, r3]
 800cea4:	f003 031f 	and.w	r3, r3, #31
 800cea8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	08017860 	.word	0x08017860

0800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b089      	sub	sp, #36	; 0x24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cec0:	4ba1      	ldr	r3, [pc, #644]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ceca:	4b9f      	ldr	r3, [pc, #636]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cece:	0b1b      	lsrs	r3, r3, #12
 800ced0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ced4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ced6:	4b9c      	ldr	r3, [pc, #624]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ced8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceda:	091b      	lsrs	r3, r3, #4
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cee2:	4b99      	ldr	r3, [pc, #612]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cee6:	08db      	lsrs	r3, r3, #3
 800cee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	fb02 f303 	mul.w	r3, r2, r3
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 8111 	beq.w	800d128 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	f000 8083 	beq.w	800d014 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	f200 80a1 	bhi.w	800d058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d056      	beq.n	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf22:	e099      	b.n	800d058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf24:	4b88      	ldr	r3, [pc, #544]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 0320 	and.w	r3, r3, #32
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d02d      	beq.n	800cf8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf30:	4b85      	ldr	r3, [pc, #532]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	08db      	lsrs	r3, r3, #3
 800cf36:	f003 0303 	and.w	r3, r3, #3
 800cf3a:	4a84      	ldr	r2, [pc, #528]	; (800d14c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	ee07 3a90 	vmov	s15, r3
 800cf52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf5a:	4b7b      	ldr	r3, [pc, #492]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf62:	ee07 3a90 	vmov	s15, r3
 800cf66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf8a:	e087      	b.n	800d09c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	ee07 3a90 	vmov	s15, r3
 800cf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d154 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cf9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9e:	4b6a      	ldr	r3, [pc, #424]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfce:	e065      	b.n	800d09c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	ee07 3a90 	vmov	s15, r3
 800cfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe2:	4b59      	ldr	r3, [pc, #356]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfea:	ee07 3a90 	vmov	s15, r3
 800cfee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d00e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d012:	e043      	b.n	800d09c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	ee07 3a90 	vmov	s15, r3
 800d01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d15c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d026:	4b48      	ldr	r3, [pc, #288]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d02e:	ee07 3a90 	vmov	s15, r3
 800d032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d036:	ed97 6a03 	vldr	s12, [r7, #12]
 800d03a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d056:	e021      	b.n	800d09c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	ee07 3a90 	vmov	s15, r3
 800d05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d062:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d06a:	4b37      	ldr	r3, [pc, #220]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d072:	ee07 3a90 	vmov	s15, r3
 800d076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d07e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d09a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d09c:	4b2a      	ldr	r3, [pc, #168]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a0:	0a5b      	lsrs	r3, r3, #9
 800d0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a6:	ee07 3a90 	vmov	s15, r3
 800d0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0c2:	ee17 2a90 	vmov	r2, s15
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d0ca:	4b1f      	ldr	r3, [pc, #124]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ce:	0c1b      	lsrs	r3, r3, #16
 800d0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d4:	ee07 3a90 	vmov	s15, r3
 800d0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f0:	ee17 2a90 	vmov	r2, s15
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d0f8:	4b13      	ldr	r3, [pc, #76]	; (800d148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fc:	0e1b      	lsrs	r3, r3, #24
 800d0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d10e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d112:	edd7 6a07 	vldr	s13, [r7, #28]
 800d116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d11e:	ee17 2a90 	vmov	r2, s15
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d126:	e008      	b.n	800d13a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	609a      	str	r2, [r3, #8]
}
 800d13a:	bf00      	nop
 800d13c:	3724      	adds	r7, #36	; 0x24
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	58024400 	.word	0x58024400
 800d14c:	03d09000 	.word	0x03d09000
 800d150:	46000000 	.word	0x46000000
 800d154:	4c742400 	.word	0x4c742400
 800d158:	4a742400 	.word	0x4a742400
 800d15c:	4bbebc20 	.word	0x4bbebc20

0800d160 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d160:	b480      	push	{r7}
 800d162:	b089      	sub	sp, #36	; 0x24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d168:	4ba1      	ldr	r3, [pc, #644]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16c:	f003 0303 	and.w	r3, r3, #3
 800d170:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d172:	4b9f      	ldr	r3, [pc, #636]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d176:	0d1b      	lsrs	r3, r3, #20
 800d178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d17c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d17e:	4b9c      	ldr	r3, [pc, #624]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d182:	0a1b      	lsrs	r3, r3, #8
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d18a:	4b99      	ldr	r3, [pc, #612]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18e:	08db      	lsrs	r3, r3, #3
 800d190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	fb02 f303 	mul.w	r3, r2, r3
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 8111 	beq.w	800d3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	f000 8083 	beq.w	800d2bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	f200 80a1 	bhi.w	800d300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d003      	beq.n	800d1cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d056      	beq.n	800d278 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d1ca:	e099      	b.n	800d300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1cc:	4b88      	ldr	r3, [pc, #544]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0320 	and.w	r3, r3, #32
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d02d      	beq.n	800d234 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1d8:	4b85      	ldr	r3, [pc, #532]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	08db      	lsrs	r3, r3, #3
 800d1de:	f003 0303 	and.w	r3, r3, #3
 800d1e2:	4a84      	ldr	r2, [pc, #528]	; (800d3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	ee07 3a90 	vmov	s15, r3
 800d1f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	ee07 3a90 	vmov	s15, r3
 800d1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d202:	4b7b      	ldr	r3, [pc, #492]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d20a:	ee07 3a90 	vmov	s15, r3
 800d20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d212:	ed97 6a03 	vldr	s12, [r7, #12]
 800d216:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d22e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d232:	e087      	b.n	800d344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d23e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d3fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d246:	4b6a      	ldr	r3, [pc, #424]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24e:	ee07 3a90 	vmov	s15, r3
 800d252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d256:	ed97 6a03 	vldr	s12, [r7, #12]
 800d25a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d276:	e065      	b.n	800d344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	ee07 3a90 	vmov	s15, r3
 800d27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d282:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d28a:	4b59      	ldr	r3, [pc, #356]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d292:	ee07 3a90 	vmov	s15, r3
 800d296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d29e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ba:	e043      	b.n	800d344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	ee07 3a90 	vmov	s15, r3
 800d2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ce:	4b48      	ldr	r3, [pc, #288]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d6:	ee07 3a90 	vmov	s15, r3
 800d2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2fe:	e021      	b.n	800d344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d312:	4b37      	ldr	r3, [pc, #220]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d322:	ed97 6a03 	vldr	s12, [r7, #12]
 800d326:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d33e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d342:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d344:	4b2a      	ldr	r3, [pc, #168]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d348:	0a5b      	lsrs	r3, r3, #9
 800d34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d35a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d35e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d36a:	ee17 2a90 	vmov	r2, s15
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d372:	4b1f      	ldr	r3, [pc, #124]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	0c1b      	lsrs	r3, r3, #16
 800d378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37c:	ee07 3a90 	vmov	s15, r3
 800d380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d38c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d398:	ee17 2a90 	vmov	r2, s15
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d3a0:	4b13      	ldr	r3, [pc, #76]	; (800d3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	0e1b      	lsrs	r3, r3, #24
 800d3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3aa:	ee07 3a90 	vmov	s15, r3
 800d3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c6:	ee17 2a90 	vmov	r2, s15
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d3ce:	e008      	b.n	800d3e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	609a      	str	r2, [r3, #8]
}
 800d3e2:	bf00      	nop
 800d3e4:	3724      	adds	r7, #36	; 0x24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	58024400 	.word	0x58024400
 800d3f4:	03d09000 	.word	0x03d09000
 800d3f8:	46000000 	.word	0x46000000
 800d3fc:	4c742400 	.word	0x4c742400
 800d400:	4a742400 	.word	0x4a742400
 800d404:	4bbebc20 	.word	0x4bbebc20

0800d408 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d408:	b480      	push	{r7}
 800d40a:	b089      	sub	sp, #36	; 0x24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d410:	4ba0      	ldr	r3, [pc, #640]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d414:	f003 0303 	and.w	r3, r3, #3
 800d418:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d41a:	4b9e      	ldr	r3, [pc, #632]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41e:	091b      	lsrs	r3, r3, #4
 800d420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d424:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d426:	4b9b      	ldr	r3, [pc, #620]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d430:	4b98      	ldr	r3, [pc, #608]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d434:	08db      	lsrs	r3, r3, #3
 800d436:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d43a:	693a      	ldr	r2, [r7, #16]
 800d43c:	fb02 f303 	mul.w	r3, r2, r3
 800d440:	ee07 3a90 	vmov	s15, r3
 800d444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d448:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 8111 	beq.w	800d676 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	2b02      	cmp	r3, #2
 800d458:	f000 8083 	beq.w	800d562 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	f200 80a1 	bhi.w	800d5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d056      	beq.n	800d51e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d470:	e099      	b.n	800d5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d472:	4b88      	ldr	r3, [pc, #544]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f003 0320 	and.w	r3, r3, #32
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d02d      	beq.n	800d4da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d47e:	4b85      	ldr	r3, [pc, #532]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	08db      	lsrs	r3, r3, #3
 800d484:	f003 0303 	and.w	r3, r3, #3
 800d488:	4a83      	ldr	r2, [pc, #524]	; (800d698 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d48a:	fa22 f303 	lsr.w	r3, r2, r3
 800d48e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	ee07 3a90 	vmov	s15, r3
 800d496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	ee07 3a90 	vmov	s15, r3
 800d4a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4a8:	4b7a      	ldr	r3, [pc, #488]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b0:	ee07 3a90 	vmov	s15, r3
 800d4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d69c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4d8:	e087      	b.n	800d5ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	ee07 3a90 	vmov	s15, r3
 800d4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d4e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4ec:	4b69      	ldr	r3, [pc, #420]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f4:	ee07 3a90 	vmov	s15, r3
 800d4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d500:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d69c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d51c:	e065      	b.n	800d5ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	ee07 3a90 	vmov	s15, r3
 800d524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d528:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d52c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d530:	4b58      	ldr	r3, [pc, #352]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d538:	ee07 3a90 	vmov	s15, r3
 800d53c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d540:	ed97 6a03 	vldr	s12, [r7, #12]
 800d544:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d69c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d54c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d55c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d560:	e043      	b.n	800d5ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	ee07 3a90 	vmov	s15, r3
 800d568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d574:	4b47      	ldr	r3, [pc, #284]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d57c:	ee07 3a90 	vmov	s15, r3
 800d580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d584:	ed97 6a03 	vldr	s12, [r7, #12]
 800d588:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d69c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d58c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d59c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5a4:	e021      	b.n	800d5ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	ee07 3a90 	vmov	s15, r3
 800d5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d5b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b8:	4b36      	ldr	r3, [pc, #216]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c0:	ee07 3a90 	vmov	s15, r3
 800d5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d69c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d5ea:	4b2a      	ldr	r3, [pc, #168]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ee:	0a5b      	lsrs	r3, r3, #9
 800d5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5f4:	ee07 3a90 	vmov	s15, r3
 800d5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d600:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d604:	edd7 6a07 	vldr	s13, [r7, #28]
 800d608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d610:	ee17 2a90 	vmov	r2, s15
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d618:	4b1e      	ldr	r3, [pc, #120]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61c:	0c1b      	lsrs	r3, r3, #16
 800d61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d622:	ee07 3a90 	vmov	s15, r3
 800d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d62e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d632:	edd7 6a07 	vldr	s13, [r7, #28]
 800d636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d63a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d63e:	ee17 2a90 	vmov	r2, s15
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d646:	4b13      	ldr	r3, [pc, #76]	; (800d694 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64a:	0e1b      	lsrs	r3, r3, #24
 800d64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d650:	ee07 3a90 	vmov	s15, r3
 800d654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d65c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d660:	edd7 6a07 	vldr	s13, [r7, #28]
 800d664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66c:	ee17 2a90 	vmov	r2, s15
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d674:	e008      	b.n	800d688 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	609a      	str	r2, [r3, #8]
}
 800d688:	bf00      	nop
 800d68a:	3724      	adds	r7, #36	; 0x24
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	58024400 	.word	0x58024400
 800d698:	03d09000 	.word	0x03d09000
 800d69c:	46000000 	.word	0x46000000
 800d6a0:	4c742400 	.word	0x4c742400
 800d6a4:	4a742400 	.word	0x4a742400
 800d6a8:	4bbebc20 	.word	0x4bbebc20

0800d6ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d6ba:	4b53      	ldr	r3, [pc, #332]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6be:	f003 0303 	and.w	r3, r3, #3
 800d6c2:	2b03      	cmp	r3, #3
 800d6c4:	d101      	bne.n	800d6ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e099      	b.n	800d7fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d6ca:	4b4f      	ldr	r3, [pc, #316]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a4e      	ldr	r2, [pc, #312]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d6d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6d6:	f7f6 fc53 	bl	8003f80 <HAL_GetTick>
 800d6da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d6dc:	e008      	b.n	800d6f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d6de:	f7f6 fc4f 	bl	8003f80 <HAL_GetTick>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d901      	bls.n	800d6f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e086      	b.n	800d7fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d6f0:	4b45      	ldr	r3, [pc, #276]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1f0      	bne.n	800d6de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d6fc:	4b42      	ldr	r3, [pc, #264]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d700:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	031b      	lsls	r3, r3, #12
 800d70a:	493f      	ldr	r1, [pc, #252]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d70c:	4313      	orrs	r3, r2
 800d70e:	628b      	str	r3, [r1, #40]	; 0x28
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	3b01      	subs	r3, #1
 800d716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	3b01      	subs	r3, #1
 800d720:	025b      	lsls	r3, r3, #9
 800d722:	b29b      	uxth	r3, r3
 800d724:	431a      	orrs	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	041b      	lsls	r3, r3, #16
 800d72e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	691b      	ldr	r3, [r3, #16]
 800d738:	3b01      	subs	r3, #1
 800d73a:	061b      	lsls	r3, r3, #24
 800d73c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d740:	4931      	ldr	r1, [pc, #196]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d742:	4313      	orrs	r3, r2
 800d744:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d746:	4b30      	ldr	r3, [pc, #192]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	492d      	ldr	r1, [pc, #180]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d754:	4313      	orrs	r3, r2
 800d756:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d758:	4b2b      	ldr	r3, [pc, #172]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	f023 0220 	bic.w	r2, r3, #32
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	4928      	ldr	r1, [pc, #160]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d766:	4313      	orrs	r3, r2
 800d768:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d76a:	4b27      	ldr	r3, [pc, #156]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76e:	4a26      	ldr	r2, [pc, #152]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d770:	f023 0310 	bic.w	r3, r3, #16
 800d774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d776:	4b24      	ldr	r3, [pc, #144]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d77a:	4b24      	ldr	r3, [pc, #144]	; (800d80c <RCCEx_PLL2_Config+0x160>)
 800d77c:	4013      	ands	r3, r2
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	69d2      	ldr	r2, [r2, #28]
 800d782:	00d2      	lsls	r2, r2, #3
 800d784:	4920      	ldr	r1, [pc, #128]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d786:	4313      	orrs	r3, r2
 800d788:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d78a:	4b1f      	ldr	r3, [pc, #124]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78e:	4a1e      	ldr	r2, [pc, #120]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d790:	f043 0310 	orr.w	r3, r3, #16
 800d794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d106      	bne.n	800d7aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d79c:	4b1a      	ldr	r3, [pc, #104]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a0:	4a19      	ldr	r2, [pc, #100]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7a8:	e00f      	b.n	800d7ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d106      	bne.n	800d7be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d7b0:	4b15      	ldr	r3, [pc, #84]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	4a14      	ldr	r2, [pc, #80]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d7bc:	e005      	b.n	800d7ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d7be:	4b12      	ldr	r3, [pc, #72]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	4a11      	ldr	r2, [pc, #68]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d7ca:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a0e      	ldr	r2, [pc, #56]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7d6:	f7f6 fbd3 	bl	8003f80 <HAL_GetTick>
 800d7da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d7dc:	e008      	b.n	800d7f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d7de:	f7f6 fbcf 	bl	8003f80 <HAL_GetTick>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d901      	bls.n	800d7f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e006      	b.n	800d7fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d7f0:	4b05      	ldr	r3, [pc, #20]	; (800d808 <RCCEx_PLL2_Config+0x15c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0f0      	beq.n	800d7de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	58024400 	.word	0x58024400
 800d80c:	ffff0007 	.word	0xffff0007

0800d810 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d81a:	2300      	movs	r3, #0
 800d81c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d81e:	4b53      	ldr	r3, [pc, #332]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d822:	f003 0303 	and.w	r3, r3, #3
 800d826:	2b03      	cmp	r3, #3
 800d828:	d101      	bne.n	800d82e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e099      	b.n	800d962 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d82e:	4b4f      	ldr	r3, [pc, #316]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a4e      	ldr	r2, [pc, #312]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d83a:	f7f6 fba1 	bl	8003f80 <HAL_GetTick>
 800d83e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d840:	e008      	b.n	800d854 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d842:	f7f6 fb9d 	bl	8003f80 <HAL_GetTick>
 800d846:	4602      	mov	r2, r0
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d901      	bls.n	800d854 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	e086      	b.n	800d962 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d854:	4b45      	ldr	r3, [pc, #276]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f0      	bne.n	800d842 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d860:	4b42      	ldr	r3, [pc, #264]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d864:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	051b      	lsls	r3, r3, #20
 800d86e:	493f      	ldr	r1, [pc, #252]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d870:	4313      	orrs	r3, r2
 800d872:	628b      	str	r3, [r1, #40]	; 0x28
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	3b01      	subs	r3, #1
 800d87a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	3b01      	subs	r3, #1
 800d884:	025b      	lsls	r3, r3, #9
 800d886:	b29b      	uxth	r3, r3
 800d888:	431a      	orrs	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	3b01      	subs	r3, #1
 800d890:	041b      	lsls	r3, r3, #16
 800d892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d896:	431a      	orrs	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	061b      	lsls	r3, r3, #24
 800d8a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d8a4:	4931      	ldr	r1, [pc, #196]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d8aa:	4b30      	ldr	r3, [pc, #192]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	695b      	ldr	r3, [r3, #20]
 800d8b6:	492d      	ldr	r1, [pc, #180]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d8bc:	4b2b      	ldr	r3, [pc, #172]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	699b      	ldr	r3, [r3, #24]
 800d8c8:	4928      	ldr	r1, [pc, #160]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d8ce:	4b27      	ldr	r3, [pc, #156]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d2:	4a26      	ldr	r2, [pc, #152]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d8da:	4b24      	ldr	r3, [pc, #144]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8de:	4b24      	ldr	r3, [pc, #144]	; (800d970 <RCCEx_PLL3_Config+0x160>)
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	69d2      	ldr	r2, [r2, #28]
 800d8e6:	00d2      	lsls	r2, r2, #3
 800d8e8:	4920      	ldr	r1, [pc, #128]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d8ee:	4b1f      	ldr	r3, [pc, #124]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f2:	4a1e      	ldr	r2, [pc, #120]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d8f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d900:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d904:	4a19      	ldr	r2, [pc, #100]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d90a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d90c:	e00f      	b.n	800d92e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d106      	bne.n	800d922 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d914:	4b15      	ldr	r3, [pc, #84]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	4a14      	ldr	r2, [pc, #80]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d91a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d91e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d920:	e005      	b.n	800d92e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d922:	4b12      	ldr	r3, [pc, #72]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d926:	4a11      	ldr	r2, [pc, #68]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d92c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d92e:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a0e      	ldr	r2, [pc, #56]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d93a:	f7f6 fb21 	bl	8003f80 <HAL_GetTick>
 800d93e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d940:	e008      	b.n	800d954 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d942:	f7f6 fb1d 	bl	8003f80 <HAL_GetTick>
 800d946:	4602      	mov	r2, r0
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d901      	bls.n	800d954 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d950:	2303      	movs	r3, #3
 800d952:	e006      	b.n	800d962 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d954:	4b05      	ldr	r3, [pc, #20]	; (800d96c <RCCEx_PLL3_Config+0x15c>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d0f0      	beq.n	800d942 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d960:	7bfb      	ldrb	r3, [r7, #15]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	58024400 	.word	0x58024400
 800d970:	ffff0007 	.word	0xffff0007

0800d974 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d071      	beq.n	800da6a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7f5 fd88 	bl	80034b0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	f003 0310 	and.w	r3, r3, #16
 800d9b2:	2b10      	cmp	r3, #16
 800d9b4:	d050      	beq.n	800da58 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	22ca      	movs	r2, #202	; 0xca
 800d9bc:	625a      	str	r2, [r3, #36]	; 0x24
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2253      	movs	r2, #83	; 0x53
 800d9c4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa4a 	bl	800de60 <RTC_EnterInitMode>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d124      	bne.n	800da20 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6899      	ldr	r1, [r3, #8]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	4b24      	ldr	r3, [pc, #144]	; (800da74 <HAL_RTC_Init+0x100>)
 800d9e2:	400b      	ands	r3, r1
 800d9e4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6899      	ldr	r1, [r3, #8]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	431a      	orrs	r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	0419      	lsls	r1, r3, #16
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68da      	ldr	r2, [r3, #12]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	430a      	orrs	r2, r1
 800da14:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa56 	bl	800dec8 <RTC_ExitInitMode>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800da20:	7bfb      	ldrb	r3, [r7, #15]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d113      	bne.n	800da4e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f022 0203 	bic.w	r2, r2, #3
 800da34:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	69da      	ldr	r2, [r3, #28]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	695b      	ldr	r3, [r3, #20]
 800da44:	431a      	orrs	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	430a      	orrs	r2, r1
 800da4c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	22ff      	movs	r2, #255	; 0xff
 800da54:	625a      	str	r2, [r3, #36]	; 0x24
 800da56:	e001      	b.n	800da5c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d103      	bne.n	800da6a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2201      	movs	r2, #1
 800da66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	ff8fffbf 	.word	0xff8fffbf

0800da78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d101      	bne.n	800da92 <HAL_RTC_SetTime+0x1a>
 800da8e:	2302      	movs	r3, #2
 800da90:	e089      	b.n	800dba6 <HAL_RTC_SetTime+0x12e>
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2201      	movs	r2, #1
 800da96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2202      	movs	r2, #2
 800da9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	22ca      	movs	r2, #202	; 0xca
 800daa8:	625a      	str	r2, [r3, #36]	; 0x24
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2253      	movs	r2, #83	; 0x53
 800dab0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f000 f9d4 	bl	800de60 <RTC_EnterInitMode>
 800dab8:	4603      	mov	r3, r0
 800daba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dabc:	7cfb      	ldrb	r3, [r7, #19]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d161      	bne.n	800db86 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d126      	bne.n	800db16 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d102      	bne.n	800dadc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	2200      	movs	r2, #0
 800dada:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 fa2f 	bl	800df44 <RTC_ByteToBcd2>
 800dae6:	4603      	mov	r3, r0
 800dae8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	785b      	ldrb	r3, [r3, #1]
 800daee:	4618      	mov	r0, r3
 800daf0:	f000 fa28 	bl	800df44 <RTC_ByteToBcd2>
 800daf4:	4603      	mov	r3, r0
 800daf6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800daf8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	789b      	ldrb	r3, [r3, #2]
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 fa20 	bl	800df44 <RTC_ByteToBcd2>
 800db04:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db06:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	78db      	ldrb	r3, [r3, #3]
 800db0e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db10:	4313      	orrs	r3, r2
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e018      	b.n	800db48 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2200      	movs	r2, #0
 800db28:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	785b      	ldrb	r3, [r3, #1]
 800db34:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db36:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db3c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	78db      	ldrb	r3, [r3, #3]
 800db42:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db44:	4313      	orrs	r3, r2
 800db46:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	6979      	ldr	r1, [r7, #20]
 800db4e:	4b18      	ldr	r3, [pc, #96]	; (800dbb0 <HAL_RTC_SetTime+0x138>)
 800db50:	400b      	ands	r3, r1
 800db52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	689a      	ldr	r2, [r3, #8]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800db62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6899      	ldr	r1, [r3, #8]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	68da      	ldr	r2, [r3, #12]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	431a      	orrs	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	430a      	orrs	r2, r1
 800db7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 f9a3 	bl	800dec8 <RTC_ExitInitMode>
 800db82:	4603      	mov	r3, r0
 800db84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	22ff      	movs	r2, #255	; 0xff
 800db8c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800db8e:	7cfb      	ldrb	r3, [r7, #19]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d103      	bne.n	800db9c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dba4:	7cfb      	ldrb	r3, [r7, #19]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	371c      	adds	r7, #28
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd90      	pop	{r4, r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	007f7f7f 	.word	0x007f7f7f

0800dbb4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b22      	ldr	r3, [pc, #136]	; (800dc68 <HAL_RTC_GetTime+0xb4>)
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	0c1b      	lsrs	r3, r3, #16
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	0a1b      	lsrs	r3, r3, #8
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	0d9b      	lsrs	r3, r3, #22
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	f003 0301 	and.w	r3, r3, #1
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d11a      	bne.n	800dc5e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 f9a9 	bl	800df84 <RTC_Bcd2ToByte>
 800dc32:	4603      	mov	r3, r0
 800dc34:	461a      	mov	r2, r3
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	785b      	ldrb	r3, [r3, #1]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 f9a0 	bl	800df84 <RTC_Bcd2ToByte>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	789b      	ldrb	r3, [r3, #2]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f000 f997 	bl	800df84 <RTC_Bcd2ToByte>
 800dc56:	4603      	mov	r3, r0
 800dc58:	461a      	mov	r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	007f7f7f 	.word	0x007f7f7f

0800dc6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dc6c:	b590      	push	{r4, r7, lr}
 800dc6e:	b087      	sub	sp, #28
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d101      	bne.n	800dc86 <HAL_RTC_SetDate+0x1a>
 800dc82:	2302      	movs	r3, #2
 800dc84:	e073      	b.n	800dd6e <HAL_RTC_SetDate+0x102>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2202      	movs	r2, #2
 800dc92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d10e      	bne.n	800dcba <HAL_RTC_SetDate+0x4e>
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	785b      	ldrb	r3, [r3, #1]
 800dca0:	f003 0310 	and.w	r3, r3, #16
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d008      	beq.n	800dcba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	785b      	ldrb	r3, [r3, #1]
 800dcac:	f023 0310 	bic.w	r3, r3, #16
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	330a      	adds	r3, #10
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d11c      	bne.n	800dcfa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	78db      	ldrb	r3, [r3, #3]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 f93d 	bl	800df44 <RTC_ByteToBcd2>
 800dcca:	4603      	mov	r3, r0
 800dccc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	785b      	ldrb	r3, [r3, #1]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 f936 	bl	800df44 <RTC_ByteToBcd2>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dcdc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	789b      	ldrb	r3, [r3, #2]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f92e 	bl	800df44 <RTC_ByteToBcd2>
 800dce8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dcea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	617b      	str	r3, [r7, #20]
 800dcf8:	e00e      	b.n	800dd18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	78db      	ldrb	r3, [r3, #3]
 800dcfe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	785b      	ldrb	r3, [r3, #1]
 800dd04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd06:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dd0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd14:	4313      	orrs	r3, r2
 800dd16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	22ca      	movs	r2, #202	; 0xca
 800dd1e:	625a      	str	r2, [r3, #36]	; 0x24
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2253      	movs	r2, #83	; 0x53
 800dd26:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f000 f899 	bl	800de60 <RTC_EnterInitMode>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dd32:	7cfb      	ldrb	r3, [r7, #19]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10a      	bne.n	800dd4e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	6979      	ldr	r1, [r7, #20]
 800dd3e:	4b0e      	ldr	r3, [pc, #56]	; (800dd78 <HAL_RTC_SetDate+0x10c>)
 800dd40:	400b      	ands	r3, r1
 800dd42:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f000 f8bf 	bl	800dec8 <RTC_ExitInitMode>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	22ff      	movs	r2, #255	; 0xff
 800dd54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dd56:	7cfb      	ldrb	r3, [r7, #19]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d103      	bne.n	800dd64 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dd6c:	7cfb      	ldrb	r3, [r7, #19]


}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd90      	pop	{r4, r7, pc}
 800dd76:	bf00      	nop
 800dd78:	00ffff3f 	.word	0x00ffff3f

0800dd7c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	4b21      	ldr	r3, [pc, #132]	; (800de14 <HAL_RTC_GetDate+0x98>)
 800dd90:	4013      	ands	r3, r2
 800dd92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	0c1b      	lsrs	r3, r3, #16
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	0a1b      	lsrs	r3, r3, #8
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	f003 031f 	and.w	r3, r3, #31
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	0b5b      	lsrs	r3, r3, #13
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	f003 0307 	and.w	r3, r3, #7
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d11a      	bne.n	800de08 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	78db      	ldrb	r3, [r3, #3]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f000 f8d4 	bl	800df84 <RTC_Bcd2ToByte>
 800dddc:	4603      	mov	r3, r0
 800ddde:	461a      	mov	r2, r3
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	785b      	ldrb	r3, [r3, #1]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 f8cb 	bl	800df84 <RTC_Bcd2ToByte>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	789b      	ldrb	r3, [r3, #2]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f000 f8c2 	bl	800df84 <RTC_Bcd2ToByte>
 800de00:	4603      	mov	r3, r0
 800de02:	461a      	mov	r2, r3
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	00ffff3f 	.word	0x00ffff3f

0800de18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a0d      	ldr	r2, [pc, #52]	; (800de5c <HAL_RTC_WaitForSynchro+0x44>)
 800de26:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800de28:	f7f6 f8aa 	bl	8003f80 <HAL_GetTick>
 800de2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de2e:	e009      	b.n	800de44 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800de30:	f7f6 f8a6 	bl	8003f80 <HAL_GetTick>
 800de34:	4602      	mov	r2, r0
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de3e:	d901      	bls.n	800de44 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800de40:	2303      	movs	r3, #3
 800de42:	e007      	b.n	800de54 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	f003 0320 	and.w	r3, r3, #32
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d0ee      	beq.n	800de30 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0003ff5f 	.word	0x0003ff5f

0800de60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de76:	2b00      	cmp	r3, #0
 800de78:	d120      	bne.n	800debc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800de84:	f7f6 f87c 	bl	8003f80 <HAL_GetTick>
 800de88:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de8a:	e00d      	b.n	800dea8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800de8c:	f7f6 f878 	bl	8003f80 <HAL_GetTick>
 800de90:	4602      	mov	r2, r0
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	1ad3      	subs	r3, r2, r3
 800de96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de9a:	d905      	bls.n	800dea8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800de9c:	2303      	movs	r3, #3
 800de9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2203      	movs	r2, #3
 800dea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d102      	bne.n	800debc <RTC_EnterInitMode+0x5c>
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
 800deb8:	2b03      	cmp	r3, #3
 800deba:	d1e7      	bne.n	800de8c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800debc:	7bfb      	ldrb	r3, [r7, #15]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
	...

0800dec8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800ded4:	4b1a      	ldr	r3, [pc, #104]	; (800df40 <RTC_ExitInitMode+0x78>)
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	4a19      	ldr	r2, [pc, #100]	; (800df40 <RTC_ExitInitMode+0x78>)
 800deda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dede:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dee0:	4b17      	ldr	r3, [pc, #92]	; (800df40 <RTC_ExitInitMode+0x78>)
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	f003 0320 	and.w	r3, r3, #32
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10c      	bne.n	800df06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff ff93 	bl	800de18 <HAL_RTC_WaitForSynchro>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01e      	beq.n	800df36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2203      	movs	r2, #3
 800defc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800df00:	2303      	movs	r3, #3
 800df02:	73fb      	strb	r3, [r7, #15]
 800df04:	e017      	b.n	800df36 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800df06:	4b0e      	ldr	r3, [pc, #56]	; (800df40 <RTC_ExitInitMode+0x78>)
 800df08:	689b      	ldr	r3, [r3, #8]
 800df0a:	4a0d      	ldr	r2, [pc, #52]	; (800df40 <RTC_ExitInitMode+0x78>)
 800df0c:	f023 0320 	bic.w	r3, r3, #32
 800df10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7ff ff80 	bl	800de18 <HAL_RTC_WaitForSynchro>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2203      	movs	r2, #3
 800df22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800df2a:	4b05      	ldr	r3, [pc, #20]	; (800df40 <RTC_ExitInitMode+0x78>)
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	4a04      	ldr	r2, [pc, #16]	; (800df40 <RTC_ExitInitMode+0x78>)
 800df30:	f043 0320 	orr.w	r3, r3, #32
 800df34:	6093      	str	r3, [r2, #8]
  }

  return status;
 800df36:	7bfb      	ldrb	r3, [r7, #15]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	58004000 	.word	0x58004000

0800df44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800df56:	e005      	b.n	800df64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	3301      	adds	r3, #1
 800df5c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800df5e:	7afb      	ldrb	r3, [r7, #11]
 800df60:	3b0a      	subs	r3, #10
 800df62:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800df64:	7afb      	ldrb	r3, [r7, #11]
 800df66:	2b09      	cmp	r3, #9
 800df68:	d8f6      	bhi.n	800df58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	011b      	lsls	r3, r3, #4
 800df70:	b2da      	uxtb	r2, r3
 800df72:	7afb      	ldrb	r3, [r7, #11]
 800df74:	4313      	orrs	r3, r2
 800df76:	b2db      	uxtb	r3, r3
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800df8e:	79fb      	ldrb	r3, [r7, #7]
 800df90:	091b      	lsrs	r3, r3, #4
 800df92:	b2db      	uxtb	r3, r3
 800df94:	461a      	mov	r2, r3
 800df96:	0092      	lsls	r2, r2, #2
 800df98:	4413      	add	r3, r2
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	f003 030f 	and.w	r3, r3, #15
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	b2db      	uxtb	r3, r3
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e10f      	b.n	800e1ea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a87      	ldr	r2, [pc, #540]	; (800e1f4 <HAL_SPI_Init+0x23c>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d00f      	beq.n	800dffa <HAL_SPI_Init+0x42>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a86      	ldr	r2, [pc, #536]	; (800e1f8 <HAL_SPI_Init+0x240>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d00a      	beq.n	800dffa <HAL_SPI_Init+0x42>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a84      	ldr	r2, [pc, #528]	; (800e1fc <HAL_SPI_Init+0x244>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d005      	beq.n	800dffa <HAL_SPI_Init+0x42>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	2b0f      	cmp	r3, #15
 800dff4:	d901      	bls.n	800dffa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e0f7      	b.n	800e1ea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fc12 	bl	800e824 <SPI_GetPacketSize>
 800e000:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a7b      	ldr	r2, [pc, #492]	; (800e1f4 <HAL_SPI_Init+0x23c>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d00c      	beq.n	800e026 <HAL_SPI_Init+0x6e>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a79      	ldr	r2, [pc, #484]	; (800e1f8 <HAL_SPI_Init+0x240>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d007      	beq.n	800e026 <HAL_SPI_Init+0x6e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4a78      	ldr	r2, [pc, #480]	; (800e1fc <HAL_SPI_Init+0x244>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d002      	beq.n	800e026 <HAL_SPI_Init+0x6e>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b08      	cmp	r3, #8
 800e024:	d811      	bhi.n	800e04a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e02a:	4a72      	ldr	r2, [pc, #456]	; (800e1f4 <HAL_SPI_Init+0x23c>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d009      	beq.n	800e044 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a70      	ldr	r2, [pc, #448]	; (800e1f8 <HAL_SPI_Init+0x240>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d004      	beq.n	800e044 <HAL_SPI_Init+0x8c>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a6f      	ldr	r2, [pc, #444]	; (800e1fc <HAL_SPI_Init+0x244>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d104      	bne.n	800e04e <HAL_SPI_Init+0x96>
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2b10      	cmp	r3, #16
 800e048:	d901      	bls.n	800e04e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e0cd      	b.n	800e1ea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	d106      	bne.n	800e068 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7f5 fa58 	bl	8003518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2202      	movs	r2, #2
 800e06c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f022 0201 	bic.w	r2, r2, #1
 800e07e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e08a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	699b      	ldr	r3, [r3, #24]
 800e090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e094:	d119      	bne.n	800e0ca <HAL_SPI_Init+0x112>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e09e:	d103      	bne.n	800e0a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d008      	beq.n	800e0ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10c      	bne.n	800e0ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e0b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0b8:	d107      	bne.n	800e0ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e0c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00f      	beq.n	800e0f6 <HAL_SPI_Init+0x13e>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	2b06      	cmp	r3, #6
 800e0dc:	d90b      	bls.n	800e0f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	601a      	str	r2, [r3, #0]
 800e0f4:	e007      	b.n	800e106 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e104:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	69da      	ldr	r2, [r3, #28]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e10e:	431a      	orrs	r2, r3
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	431a      	orrs	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e118:	ea42 0103 	orr.w	r1, r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	68da      	ldr	r2, [r3, #12]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	430a      	orrs	r2, r1
 800e126:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e130:	431a      	orrs	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e136:	431a      	orrs	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	699b      	ldr	r3, [r3, #24]
 800e13c:	431a      	orrs	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	431a      	orrs	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	431a      	orrs	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	431a      	orrs	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	431a      	orrs	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e15a:	431a      	orrs	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	431a      	orrs	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e166:	ea42 0103 	orr.w	r1, r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	430a      	orrs	r2, r1
 800e174:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d113      	bne.n	800e1a6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e190:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e1a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f022 0201 	bic.w	r2, r2, #1
 800e1b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00a      	beq.n	800e1d8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	430a      	orrs	r2, r1
 800e1d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	40013000 	.word	0x40013000
 800e1f8:	40003800 	.word	0x40003800
 800e1fc:	40003c00 	.word	0x40003c00

0800e200 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	4613      	mov	r3, r2
 800e20e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e214:	095b      	lsrs	r3, r3, #5
 800e216:	b29b      	uxth	r3, r3
 800e218:	3301      	adds	r3, #1
 800e21a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	3330      	adds	r3, #48	; 0x30
 800e222:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e224:	f7f5 feac 	bl	8003f80 <HAL_GetTick>
 800e228:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b01      	cmp	r3, #1
 800e234:	d001      	beq.n	800e23a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e236:	2302      	movs	r3, #2
 800e238:	e250      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <HAL_SPI_Receive+0x46>
 800e240:	88fb      	ldrh	r3, [r7, #6]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d101      	bne.n	800e24a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e246:	2301      	movs	r3, #1
 800e248:	e248      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e250:	2b01      	cmp	r3, #1
 800e252:	d101      	bne.n	800e258 <HAL_SPI_Receive+0x58>
 800e254:	2302      	movs	r3, #2
 800e256:	e241      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2204      	movs	r2, #4
 800e264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	88fa      	ldrh	r2, [r7, #6]
 800e27a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	88fa      	ldrh	r2, [r7, #6]
 800e282:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2200      	movs	r2, #0
 800e28a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e2b0:	d108      	bne.n	800e2c4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e2c0:	601a      	str	r2, [r3, #0]
 800e2c2:	e009      	b.n	800e2d8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e2d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	4b95      	ldr	r3, [pc, #596]	; (800e534 <HAL_SPI_Receive+0x334>)
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	88f9      	ldrh	r1, [r7, #6]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	430b      	orrs	r3, r1
 800e2ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f042 0201 	orr.w	r2, r2, #1
 800e2fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e304:	d107      	bne.n	800e316 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e314:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	2b0f      	cmp	r3, #15
 800e31c:	d96c      	bls.n	800e3f8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e31e:	e064      	b.n	800e3ea <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	695b      	ldr	r3, [r3, #20]
 800e326:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b01      	cmp	r3, #1
 800e334:	d114      	bne.n	800e360 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e340:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e346:	1d1a      	adds	r2, r3, #4
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e352:	b29b      	uxth	r3, r3
 800e354:	3b01      	subs	r3, #1
 800e356:	b29a      	uxth	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e35e:	e044      	b.n	800e3ea <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e366:	b29b      	uxth	r3, r3
 800e368:	8bfa      	ldrh	r2, [r7, #30]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d919      	bls.n	800e3a2 <HAL_SPI_Receive+0x1a2>
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d014      	beq.n	800e3a2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e382:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e388:	1d1a      	adds	r2, r3, #4
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e394:	b29b      	uxth	r3, r3
 800e396:	3b01      	subs	r3, #1
 800e398:	b29a      	uxth	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3a0:	e023      	b.n	800e3ea <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3a2:	f7f5 fded 	bl	8003f80 <HAL_GetTick>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d803      	bhi.n	800e3ba <HAL_SPI_Receive+0x1ba>
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b8:	d102      	bne.n	800e3c0 <HAL_SPI_Receive+0x1c0>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d114      	bne.n	800e3ea <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 f98f 	bl	800e6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e178      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d194      	bne.n	800e320 <HAL_SPI_Receive+0x120>
 800e3f6:	e15e      	b.n	800e6b6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	2b07      	cmp	r3, #7
 800e3fe:	f240 8153 	bls.w	800e6a8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e402:	e08f      	b.n	800e524 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	f003 0301 	and.w	r3, r3, #1
 800e416:	2b01      	cmp	r3, #1
 800e418:	d114      	bne.n	800e444 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	8812      	ldrh	r2, [r2, #0]
 800e422:	b292      	uxth	r2, r2
 800e424:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e42a:	1c9a      	adds	r2, r3, #2
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e436:	b29b      	uxth	r3, r3
 800e438:	3b01      	subs	r3, #1
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e442:	e06f      	b.n	800e524 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	8bfa      	ldrh	r2, [r7, #30]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d924      	bls.n	800e49c <HAL_SPI_Receive+0x29c>
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d01f      	beq.n	800e49c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	8812      	ldrh	r2, [r2, #0]
 800e464:	b292      	uxth	r2, r2
 800e466:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46c:	1c9a      	adds	r2, r3, #2
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e476:	69ba      	ldr	r2, [r7, #24]
 800e478:	8812      	ldrh	r2, [r2, #0]
 800e47a:	b292      	uxth	r2, r2
 800e47c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e482:	1c9a      	adds	r2, r3, #2
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e48e:	b29b      	uxth	r3, r3
 800e490:	3b02      	subs	r3, #2
 800e492:	b29a      	uxth	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e49a:	e043      	b.n	800e524 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d119      	bne.n	800e4dc <HAL_SPI_Receive+0x2dc>
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d014      	beq.n	800e4dc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b6:	69ba      	ldr	r2, [r7, #24]
 800e4b8:	8812      	ldrh	r2, [r2, #0]
 800e4ba:	b292      	uxth	r2, r2
 800e4bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c2:	1c9a      	adds	r2, r3, #2
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4da:	e023      	b.n	800e524 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4dc:	f7f5 fd50 	bl	8003f80 <HAL_GetTick>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	683a      	ldr	r2, [r7, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d803      	bhi.n	800e4f4 <HAL_SPI_Receive+0x2f4>
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4f2:	d102      	bne.n	800e4fa <HAL_SPI_Receive+0x2fa>
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d114      	bne.n	800e524 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f000 f8f2 	bl	800e6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e520:	2303      	movs	r3, #3
 800e522:	e0db      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f47f af69 	bne.w	800e404 <HAL_SPI_Receive+0x204>
 800e532:	e0c0      	b.n	800e6b6 <HAL_SPI_Receive+0x4b6>
 800e534:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d117      	bne.n	800e57e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55a:	7812      	ldrb	r2, [r2, #0]
 800e55c:	b2d2      	uxtb	r2, r2
 800e55e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e570:	b29b      	uxth	r3, r3
 800e572:	3b01      	subs	r3, #1
 800e574:	b29a      	uxth	r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e57c:	e094      	b.n	800e6a8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e584:	b29b      	uxth	r3, r3
 800e586:	8bfa      	ldrh	r2, [r7, #30]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d946      	bls.n	800e61a <HAL_SPI_Receive+0x41a>
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e592:	2b00      	cmp	r3, #0
 800e594:	d041      	beq.n	800e61a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a2:	7812      	ldrb	r2, [r2, #0]
 800e5a4:	b2d2      	uxtb	r2, r2
 800e5a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5be:	7812      	ldrb	r2, [r2, #0]
 800e5c0:	b2d2      	uxtb	r2, r2
 800e5c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c8:	1c5a      	adds	r2, r3, #1
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5da:	7812      	ldrb	r2, [r2, #0]
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e4:	1c5a      	adds	r2, r3, #1
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f6:	7812      	ldrb	r2, [r2, #0]
 800e5f8:	b2d2      	uxtb	r2, r2
 800e5fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e600:	1c5a      	adds	r2, r3, #1
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	3b04      	subs	r3, #4
 800e610:	b29a      	uxth	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e618:	e046      	b.n	800e6a8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e620:	b29b      	uxth	r3, r3
 800e622:	2b03      	cmp	r3, #3
 800e624:	d81c      	bhi.n	800e660 <HAL_SPI_Receive+0x460>
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d017      	beq.n	800e660 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e63c:	7812      	ldrb	r2, [r2, #0]
 800e63e:	b2d2      	uxtb	r2, r2
 800e640:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e646:	1c5a      	adds	r2, r3, #1
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e652:	b29b      	uxth	r3, r3
 800e654:	3b01      	subs	r3, #1
 800e656:	b29a      	uxth	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e65e:	e023      	b.n	800e6a8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e660:	f7f5 fc8e 	bl	8003f80 <HAL_GetTick>
 800e664:	4602      	mov	r2, r0
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	683a      	ldr	r2, [r7, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d803      	bhi.n	800e678 <HAL_SPI_Receive+0x478>
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e676:	d102      	bne.n	800e67e <HAL_SPI_Receive+0x47e>
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d114      	bne.n	800e6a8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f000 f830 	bl	800e6e4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e68a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e6a4:	2303      	movs	r3, #3
 800e6a6:	e019      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f47f af41 	bne.w	800e538 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f000 f814 	bl	800e6e4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d001      	beq.n	800e6da <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e000      	b.n	800e6dc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e6da:	2300      	movs	r3, #0
  }
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3720      	adds	r7, #32
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	699a      	ldr	r2, [r3, #24]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f042 0208 	orr.w	r2, r2, #8
 800e702:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	699a      	ldr	r2, [r3, #24]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f042 0210 	orr.w	r2, r2, #16
 800e712:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f022 0201 	bic.w	r2, r2, #1
 800e722:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	6919      	ldr	r1, [r3, #16]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	4b3c      	ldr	r3, [pc, #240]	; (800e820 <SPI_CloseTransfer+0x13c>)
 800e730:	400b      	ands	r3, r1
 800e732:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	689a      	ldr	r2, [r3, #8]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e742:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	d014      	beq.n	800e77a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f003 0320 	and.w	r3, r3, #32
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00f      	beq.n	800e77a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e760:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	699a      	ldr	r2, [r3, #24]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f042 0220 	orr.w	r2, r2, #32
 800e778:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b03      	cmp	r3, #3
 800e784:	d014      	beq.n	800e7b0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00f      	beq.n	800e7b0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e796:	f043 0204 	orr.w	r2, r3, #4
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	699a      	ldr	r2, [r3, #24]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00f      	beq.n	800e7da <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7c0:	f043 0201 	orr.w	r2, r3, #1
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	699a      	ldr	r2, [r3, #24]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d00f      	beq.n	800e804 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7ea:	f043 0208 	orr.w	r2, r3, #8
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	699a      	ldr	r2, [r3, #24]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e802:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e814:	bf00      	nop
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	fffffc90 	.word	0xfffffc90

0800e824 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e830:	095b      	lsrs	r3, r3, #5
 800e832:	3301      	adds	r3, #1
 800e834:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	3301      	adds	r3, #1
 800e83c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	3307      	adds	r3, #7
 800e842:	08db      	lsrs	r3, r3, #3
 800e844:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d101      	bne.n	800e86c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e868:	2301      	movs	r3, #1
 800e86a:	e049      	b.n	800e900 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7f4 feff 	bl	8003684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2202      	movs	r2, #2
 800e88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	3304      	adds	r3, #4
 800e896:	4619      	mov	r1, r3
 800e898:	4610      	mov	r0, r2
 800e89a:	f000 fe7d 	bl	800f598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d001      	beq.n	800e920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	e054      	b.n	800e9ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2202      	movs	r2, #2
 800e924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68da      	ldr	r2, [r3, #12]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f042 0201 	orr.w	r2, r2, #1
 800e936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a26      	ldr	r2, [pc, #152]	; (800e9d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d022      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e94a:	d01d      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a22      	ldr	r2, [pc, #136]	; (800e9dc <HAL_TIM_Base_Start_IT+0xd4>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d018      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a21      	ldr	r2, [pc, #132]	; (800e9e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d013      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a1f      	ldr	r2, [pc, #124]	; (800e9e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d00e      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a1e      	ldr	r2, [pc, #120]	; (800e9e8 <HAL_TIM_Base_Start_IT+0xe0>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d009      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a1c      	ldr	r2, [pc, #112]	; (800e9ec <HAL_TIM_Base_Start_IT+0xe4>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d004      	beq.n	800e988 <HAL_TIM_Base_Start_IT+0x80>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d115      	bne.n	800e9b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	689a      	ldr	r2, [r3, #8]
 800e98e:	4b19      	ldr	r3, [pc, #100]	; (800e9f4 <HAL_TIM_Base_Start_IT+0xec>)
 800e990:	4013      	ands	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2b06      	cmp	r3, #6
 800e998:	d015      	beq.n	800e9c6 <HAL_TIM_Base_Start_IT+0xbe>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9a0:	d011      	beq.n	800e9c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f042 0201 	orr.w	r2, r2, #1
 800e9b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9b2:	e008      	b.n	800e9c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0201 	orr.w	r2, r2, #1
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	e000      	b.n	800e9c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	40010000 	.word	0x40010000
 800e9dc:	40000400 	.word	0x40000400
 800e9e0:	40000800 	.word	0x40000800
 800e9e4:	40000c00 	.word	0x40000c00
 800e9e8:	40010400 	.word	0x40010400
 800e9ec:	40001800 	.word	0x40001800
 800e9f0:	40014000 	.word	0x40014000
 800e9f4:	00010007 	.word	0x00010007

0800e9f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d109      	bne.n	800ea20 <HAL_TIM_OC_Start_IT+0x28>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	bf14      	ite	ne
 800ea18:	2301      	movne	r3, #1
 800ea1a:	2300      	moveq	r3, #0
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	e03c      	b.n	800ea9a <HAL_TIM_OC_Start_IT+0xa2>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d109      	bne.n	800ea3a <HAL_TIM_OC_Start_IT+0x42>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	bf14      	ite	ne
 800ea32:	2301      	movne	r3, #1
 800ea34:	2300      	moveq	r3, #0
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	e02f      	b.n	800ea9a <HAL_TIM_OC_Start_IT+0xa2>
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b08      	cmp	r3, #8
 800ea3e:	d109      	bne.n	800ea54 <HAL_TIM_OC_Start_IT+0x5c>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	bf14      	ite	ne
 800ea4c:	2301      	movne	r3, #1
 800ea4e:	2300      	moveq	r3, #0
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	e022      	b.n	800ea9a <HAL_TIM_OC_Start_IT+0xa2>
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b0c      	cmp	r3, #12
 800ea58:	d109      	bne.n	800ea6e <HAL_TIM_OC_Start_IT+0x76>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	bf14      	ite	ne
 800ea66:	2301      	movne	r3, #1
 800ea68:	2300      	moveq	r3, #0
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	e015      	b.n	800ea9a <HAL_TIM_OC_Start_IT+0xa2>
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	2b10      	cmp	r3, #16
 800ea72:	d109      	bne.n	800ea88 <HAL_TIM_OC_Start_IT+0x90>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	bf14      	ite	ne
 800ea80:	2301      	movne	r3, #1
 800ea82:	2300      	moveq	r3, #0
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	e008      	b.n	800ea9a <HAL_TIM_OC_Start_IT+0xa2>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	bf14      	ite	ne
 800ea94:	2301      	movne	r3, #1
 800ea96:	2300      	moveq	r3, #0
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e0ec      	b.n	800ec7c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d104      	bne.n	800eab2 <HAL_TIM_OC_Start_IT+0xba>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2202      	movs	r2, #2
 800eaac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eab0:	e023      	b.n	800eafa <HAL_TIM_OC_Start_IT+0x102>
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b04      	cmp	r3, #4
 800eab6:	d104      	bne.n	800eac2 <HAL_TIM_OC_Start_IT+0xca>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2202      	movs	r2, #2
 800eabc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eac0:	e01b      	b.n	800eafa <HAL_TIM_OC_Start_IT+0x102>
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b08      	cmp	r3, #8
 800eac6:	d104      	bne.n	800ead2 <HAL_TIM_OC_Start_IT+0xda>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2202      	movs	r2, #2
 800eacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ead0:	e013      	b.n	800eafa <HAL_TIM_OC_Start_IT+0x102>
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2b0c      	cmp	r3, #12
 800ead6:	d104      	bne.n	800eae2 <HAL_TIM_OC_Start_IT+0xea>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2202      	movs	r2, #2
 800eadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eae0:	e00b      	b.n	800eafa <HAL_TIM_OC_Start_IT+0x102>
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b10      	cmp	r3, #16
 800eae6:	d104      	bne.n	800eaf2 <HAL_TIM_OC_Start_IT+0xfa>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2202      	movs	r2, #2
 800eaec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eaf0:	e003      	b.n	800eafa <HAL_TIM_OC_Start_IT+0x102>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b0c      	cmp	r3, #12
 800eafe:	d841      	bhi.n	800eb84 <HAL_TIM_OC_Start_IT+0x18c>
 800eb00:	a201      	add	r2, pc, #4	; (adr r2, 800eb08 <HAL_TIM_OC_Start_IT+0x110>)
 800eb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb06:	bf00      	nop
 800eb08:	0800eb3d 	.word	0x0800eb3d
 800eb0c:	0800eb85 	.word	0x0800eb85
 800eb10:	0800eb85 	.word	0x0800eb85
 800eb14:	0800eb85 	.word	0x0800eb85
 800eb18:	0800eb4f 	.word	0x0800eb4f
 800eb1c:	0800eb85 	.word	0x0800eb85
 800eb20:	0800eb85 	.word	0x0800eb85
 800eb24:	0800eb85 	.word	0x0800eb85
 800eb28:	0800eb61 	.word	0x0800eb61
 800eb2c:	0800eb85 	.word	0x0800eb85
 800eb30:	0800eb85 	.word	0x0800eb85
 800eb34:	0800eb85 	.word	0x0800eb85
 800eb38:	0800eb73 	.word	0x0800eb73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68da      	ldr	r2, [r3, #12]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f042 0202 	orr.w	r2, r2, #2
 800eb4a:	60da      	str	r2, [r3, #12]
      break;
 800eb4c:	e01d      	b.n	800eb8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68da      	ldr	r2, [r3, #12]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f042 0204 	orr.w	r2, r2, #4
 800eb5c:	60da      	str	r2, [r3, #12]
      break;
 800eb5e:	e014      	b.n	800eb8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68da      	ldr	r2, [r3, #12]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f042 0208 	orr.w	r2, r2, #8
 800eb6e:	60da      	str	r2, [r3, #12]
      break;
 800eb70:	e00b      	b.n	800eb8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	68da      	ldr	r2, [r3, #12]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f042 0210 	orr.w	r2, r2, #16
 800eb80:	60da      	str	r2, [r3, #12]
      break;
 800eb82:	e002      	b.n	800eb8a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	73fb      	strb	r3, [r7, #15]
      break;
 800eb88:	bf00      	nop
  }

  if (status == HAL_OK)
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d174      	bne.n	800ec7a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2201      	movs	r2, #1
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 f917 	bl	800fdcc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4a38      	ldr	r2, [pc, #224]	; (800ec84 <HAL_TIM_OC_Start_IT+0x28c>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d013      	beq.n	800ebd0 <HAL_TIM_OC_Start_IT+0x1d8>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4a36      	ldr	r2, [pc, #216]	; (800ec88 <HAL_TIM_OC_Start_IT+0x290>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d00e      	beq.n	800ebd0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a35      	ldr	r2, [pc, #212]	; (800ec8c <HAL_TIM_OC_Start_IT+0x294>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d009      	beq.n	800ebd0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a33      	ldr	r2, [pc, #204]	; (800ec90 <HAL_TIM_OC_Start_IT+0x298>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d004      	beq.n	800ebd0 <HAL_TIM_OC_Start_IT+0x1d8>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a32      	ldr	r2, [pc, #200]	; (800ec94 <HAL_TIM_OC_Start_IT+0x29c>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d101      	bne.n	800ebd4 <HAL_TIM_OC_Start_IT+0x1dc>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e000      	b.n	800ebd6 <HAL_TIM_OC_Start_IT+0x1de>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d007      	beq.n	800ebea <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4a25      	ldr	r2, [pc, #148]	; (800ec84 <HAL_TIM_OC_Start_IT+0x28c>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d022      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebfc:	d01d      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a25      	ldr	r2, [pc, #148]	; (800ec98 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d018      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a23      	ldr	r2, [pc, #140]	; (800ec9c <HAL_TIM_OC_Start_IT+0x2a4>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d013      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a22      	ldr	r2, [pc, #136]	; (800eca0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d00e      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a19      	ldr	r2, [pc, #100]	; (800ec88 <HAL_TIM_OC_Start_IT+0x290>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d009      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a1e      	ldr	r2, [pc, #120]	; (800eca4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d004      	beq.n	800ec3a <HAL_TIM_OC_Start_IT+0x242>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a15      	ldr	r2, [pc, #84]	; (800ec8c <HAL_TIM_OC_Start_IT+0x294>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d115      	bne.n	800ec66 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	689a      	ldr	r2, [r3, #8]
 800ec40:	4b19      	ldr	r3, [pc, #100]	; (800eca8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ec42:	4013      	ands	r3, r2
 800ec44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	2b06      	cmp	r3, #6
 800ec4a:	d015      	beq.n	800ec78 <HAL_TIM_OC_Start_IT+0x280>
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec52:	d011      	beq.n	800ec78 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f042 0201 	orr.w	r2, r2, #1
 800ec62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec64:	e008      	b.n	800ec78 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f042 0201 	orr.w	r2, r2, #1
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	e000      	b.n	800ec7a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec78:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	40010000 	.word	0x40010000
 800ec88:	40010400 	.word	0x40010400
 800ec8c:	40014000 	.word	0x40014000
 800ec90:	40014400 	.word	0x40014400
 800ec94:	40014800 	.word	0x40014800
 800ec98:	40000400 	.word	0x40000400
 800ec9c:	40000800 	.word	0x40000800
 800eca0:	40000c00 	.word	0x40000c00
 800eca4:	40001800 	.word	0x40001800
 800eca8:	00010007 	.word	0x00010007

0800ecac <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2b0c      	cmp	r3, #12
 800ecbe:	d841      	bhi.n	800ed44 <HAL_TIM_OC_Stop_IT+0x98>
 800ecc0:	a201      	add	r2, pc, #4	; (adr r2, 800ecc8 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ecc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc6:	bf00      	nop
 800ecc8:	0800ecfd 	.word	0x0800ecfd
 800eccc:	0800ed45 	.word	0x0800ed45
 800ecd0:	0800ed45 	.word	0x0800ed45
 800ecd4:	0800ed45 	.word	0x0800ed45
 800ecd8:	0800ed0f 	.word	0x0800ed0f
 800ecdc:	0800ed45 	.word	0x0800ed45
 800ece0:	0800ed45 	.word	0x0800ed45
 800ece4:	0800ed45 	.word	0x0800ed45
 800ece8:	0800ed21 	.word	0x0800ed21
 800ecec:	0800ed45 	.word	0x0800ed45
 800ecf0:	0800ed45 	.word	0x0800ed45
 800ecf4:	0800ed45 	.word	0x0800ed45
 800ecf8:	0800ed33 	.word	0x0800ed33
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f022 0202 	bic.w	r2, r2, #2
 800ed0a:	60da      	str	r2, [r3, #12]
      break;
 800ed0c:	e01d      	b.n	800ed4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	68da      	ldr	r2, [r3, #12]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f022 0204 	bic.w	r2, r2, #4
 800ed1c:	60da      	str	r2, [r3, #12]
      break;
 800ed1e:	e014      	b.n	800ed4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f022 0208 	bic.w	r2, r2, #8
 800ed2e:	60da      	str	r2, [r3, #12]
      break;
 800ed30:	e00b      	b.n	800ed4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	68da      	ldr	r2, [r3, #12]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f022 0210 	bic.w	r2, r2, #16
 800ed40:	60da      	str	r2, [r3, #12]
      break;
 800ed42:	e002      	b.n	800ed4a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ed44:	2301      	movs	r3, #1
 800ed46:	73fb      	strb	r3, [r7, #15]
      break;
 800ed48:	bf00      	nop
  }

  if (status == HAL_OK)
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f040 8081 	bne.w	800ee54 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2200      	movs	r2, #0
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f001 f836 	bl	800fdcc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a3e      	ldr	r2, [pc, #248]	; (800ee60 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d013      	beq.n	800ed92 <HAL_TIM_OC_Stop_IT+0xe6>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a3d      	ldr	r2, [pc, #244]	; (800ee64 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d00e      	beq.n	800ed92 <HAL_TIM_OC_Stop_IT+0xe6>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a3b      	ldr	r2, [pc, #236]	; (800ee68 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d009      	beq.n	800ed92 <HAL_TIM_OC_Stop_IT+0xe6>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a3a      	ldr	r2, [pc, #232]	; (800ee6c <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d004      	beq.n	800ed92 <HAL_TIM_OC_Stop_IT+0xe6>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a38      	ldr	r2, [pc, #224]	; (800ee70 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d101      	bne.n	800ed96 <HAL_TIM_OC_Stop_IT+0xea>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <HAL_TIM_OC_Stop_IT+0xec>
 800ed96:	2300      	movs	r3, #0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d017      	beq.n	800edcc <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	6a1a      	ldr	r2, [r3, #32]
 800eda2:	f241 1311 	movw	r3, #4369	; 0x1111
 800eda6:	4013      	ands	r3, r2
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d10f      	bne.n	800edcc <HAL_TIM_OC_Stop_IT+0x120>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6a1a      	ldr	r2, [r3, #32]
 800edb2:	f240 4344 	movw	r3, #1092	; 0x444
 800edb6:	4013      	ands	r3, r2
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d107      	bne.n	800edcc <HAL_TIM_OC_Stop_IT+0x120>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800edca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6a1a      	ldr	r2, [r3, #32]
 800edd2:	f241 1311 	movw	r3, #4369	; 0x1111
 800edd6:	4013      	ands	r3, r2
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10f      	bne.n	800edfc <HAL_TIM_OC_Stop_IT+0x150>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6a1a      	ldr	r2, [r3, #32]
 800ede2:	f240 4344 	movw	r3, #1092	; 0x444
 800ede6:	4013      	ands	r3, r2
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d107      	bne.n	800edfc <HAL_TIM_OC_Stop_IT+0x150>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f022 0201 	bic.w	r2, r2, #1
 800edfa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d104      	bne.n	800ee0c <HAL_TIM_OC_Stop_IT+0x160>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2201      	movs	r2, #1
 800ee06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee0a:	e023      	b.n	800ee54 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	2b04      	cmp	r3, #4
 800ee10:	d104      	bne.n	800ee1c <HAL_TIM_OC_Stop_IT+0x170>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2201      	movs	r2, #1
 800ee16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee1a:	e01b      	b.n	800ee54 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	2b08      	cmp	r3, #8
 800ee20:	d104      	bne.n	800ee2c <HAL_TIM_OC_Stop_IT+0x180>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee2a:	e013      	b.n	800ee54 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	2b0c      	cmp	r3, #12
 800ee30:	d104      	bne.n	800ee3c <HAL_TIM_OC_Stop_IT+0x190>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee3a:	e00b      	b.n	800ee54 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b10      	cmp	r3, #16
 800ee40:	d104      	bne.n	800ee4c <HAL_TIM_OC_Stop_IT+0x1a0>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2201      	movs	r2, #1
 800ee46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee4a:	e003      	b.n	800ee54 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	40010000 	.word	0x40010000
 800ee64:	40010400 	.word	0x40010400
 800ee68:	40014000 	.word	0x40014000
 800ee6c:	40014400 	.word	0x40014400
 800ee70:	40014800 	.word	0x40014800

0800ee74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e049      	b.n	800ef1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f841 	bl	800ef22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f000 fb70 	bl	800f598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef18:	2300      	movs	r3, #0
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ef22:	b480      	push	{r7}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ef2a:	bf00      	nop
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b084      	sub	sp, #16
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	f003 0302 	and.w	r3, r3, #2
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d020      	beq.n	800ef9a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f003 0302 	and.w	r3, r3, #2
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d01b      	beq.n	800ef9a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f06f 0202 	mvn.w	r2, #2
 800ef6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	699b      	ldr	r3, [r3, #24]
 800ef78:	f003 0303 	and.w	r3, r3, #3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 faeb 	bl	800f55c <HAL_TIM_IC_CaptureCallback>
 800ef86:	e005      	b.n	800ef94 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7f1 fb39 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 faee 	bl	800f570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	f003 0304 	and.w	r3, r3, #4
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d020      	beq.n	800efe6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f003 0304 	and.w	r3, r3, #4
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d01b      	beq.n	800efe6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f06f 0204 	mvn.w	r2, #4
 800efb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2202      	movs	r2, #2
 800efbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 fac5 	bl	800f55c <HAL_TIM_IC_CaptureCallback>
 800efd2:	e005      	b.n	800efe0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7f1 fb13 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fac8 	bl	800f570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	f003 0308 	and.w	r3, r3, #8
 800efec:	2b00      	cmp	r3, #0
 800efee:	d020      	beq.n	800f032 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f003 0308 	and.w	r3, r3, #8
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01b      	beq.n	800f032 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f06f 0208 	mvn.w	r2, #8
 800f002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2204      	movs	r2, #4
 800f008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	69db      	ldr	r3, [r3, #28]
 800f010:	f003 0303 	and.w	r3, r3, #3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d003      	beq.n	800f020 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 fa9f 	bl	800f55c <HAL_TIM_IC_CaptureCallback>
 800f01e:	e005      	b.n	800f02c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f7f1 faed 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 faa2 	bl	800f570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	f003 0310 	and.w	r3, r3, #16
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d020      	beq.n	800f07e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f003 0310 	and.w	r3, r3, #16
 800f042:	2b00      	cmp	r3, #0
 800f044:	d01b      	beq.n	800f07e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f06f 0210 	mvn.w	r2, #16
 800f04e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2208      	movs	r2, #8
 800f054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	69db      	ldr	r3, [r3, #28]
 800f05c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f060:	2b00      	cmp	r3, #0
 800f062:	d003      	beq.n	800f06c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fa79 	bl	800f55c <HAL_TIM_IC_CaptureCallback>
 800f06a:	e005      	b.n	800f078 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7f1 fac7 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fa7c 	bl	800f570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	f003 0301 	and.w	r3, r3, #1
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00c      	beq.n	800f0a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d007      	beq.n	800f0a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f06f 0201 	mvn.w	r2, #1
 800f09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7f3 ffcb 	bl	8003038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d104      	bne.n	800f0b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00c      	beq.n	800f0d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d007      	beq.n	800f0d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f0c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 ffba 	bl	8010044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00c      	beq.n	800f0f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d007      	beq.n	800f0f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 ffb2 	bl	8010058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00c      	beq.n	800f118 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f104:	2b00      	cmp	r3, #0
 800f106:	d007      	beq.n	800f118 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fa36 	bl	800f584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f003 0320 	and.w	r3, r3, #32
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00c      	beq.n	800f13c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f003 0320 	and.w	r3, r3, #32
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d007      	beq.n	800f13c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f06f 0220 	mvn.w	r2, #32
 800f134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 ff7a 	bl	8010030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f13c:	bf00      	nop
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d101      	bne.n	800f162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f15e:	2302      	movs	r3, #2
 800f160:	e0ff      	b.n	800f362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b14      	cmp	r3, #20
 800f16e:	f200 80f0 	bhi.w	800f352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f172:	a201      	add	r2, pc, #4	; (adr r2, 800f178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f178:	0800f1cd 	.word	0x0800f1cd
 800f17c:	0800f353 	.word	0x0800f353
 800f180:	0800f353 	.word	0x0800f353
 800f184:	0800f353 	.word	0x0800f353
 800f188:	0800f20d 	.word	0x0800f20d
 800f18c:	0800f353 	.word	0x0800f353
 800f190:	0800f353 	.word	0x0800f353
 800f194:	0800f353 	.word	0x0800f353
 800f198:	0800f24f 	.word	0x0800f24f
 800f19c:	0800f353 	.word	0x0800f353
 800f1a0:	0800f353 	.word	0x0800f353
 800f1a4:	0800f353 	.word	0x0800f353
 800f1a8:	0800f28f 	.word	0x0800f28f
 800f1ac:	0800f353 	.word	0x0800f353
 800f1b0:	0800f353 	.word	0x0800f353
 800f1b4:	0800f353 	.word	0x0800f353
 800f1b8:	0800f2d1 	.word	0x0800f2d1
 800f1bc:	0800f353 	.word	0x0800f353
 800f1c0:	0800f353 	.word	0x0800f353
 800f1c4:	0800f353 	.word	0x0800f353
 800f1c8:	0800f311 	.word	0x0800f311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	68b9      	ldr	r1, [r7, #8]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f000 fa86 	bl	800f6e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	699a      	ldr	r2, [r3, #24]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f042 0208 	orr.w	r2, r2, #8
 800f1e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f022 0204 	bic.w	r2, r2, #4
 800f1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6999      	ldr	r1, [r3, #24]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	691a      	ldr	r2, [r3, #16]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	430a      	orrs	r2, r1
 800f208:	619a      	str	r2, [r3, #24]
      break;
 800f20a:	e0a5      	b.n	800f358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68b9      	ldr	r1, [r7, #8]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 faf6 	bl	800f804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	699a      	ldr	r2, [r3, #24]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	699a      	ldr	r2, [r3, #24]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6999      	ldr	r1, [r3, #24]
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	021a      	lsls	r2, r3, #8
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	619a      	str	r2, [r3, #24]
      break;
 800f24c:	e084      	b.n	800f358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	68b9      	ldr	r1, [r7, #8]
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fb5f 	bl	800f918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f042 0208 	orr.w	r2, r2, #8
 800f268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69da      	ldr	r2, [r3, #28]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f022 0204 	bic.w	r2, r2, #4
 800f278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	69d9      	ldr	r1, [r3, #28]
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	691a      	ldr	r2, [r3, #16]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	430a      	orrs	r2, r1
 800f28a:	61da      	str	r2, [r3, #28]
      break;
 800f28c:	e064      	b.n	800f358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68b9      	ldr	r1, [r7, #8]
 800f294:	4618      	mov	r0, r3
 800f296:	f000 fbc7 	bl	800fa28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	69da      	ldr	r2, [r3, #28]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	69da      	ldr	r2, [r3, #28]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	69d9      	ldr	r1, [r3, #28]
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	021a      	lsls	r2, r3, #8
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	61da      	str	r2, [r3, #28]
      break;
 800f2ce:	e043      	b.n	800f358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 fc10 	bl	800fafc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f042 0208 	orr.w	r2, r2, #8
 800f2ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f022 0204 	bic.w	r2, r2, #4
 800f2fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	691a      	ldr	r2, [r3, #16]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	430a      	orrs	r2, r1
 800f30c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f30e:	e023      	b.n	800f358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	4618      	mov	r0, r3
 800f318:	f000 fc54 	bl	800fbc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f32a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f33a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	021a      	lsls	r2, r3, #8
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	430a      	orrs	r2, r1
 800f34e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f350:	e002      	b.n	800f358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f352:	2301      	movs	r3, #1
 800f354:	75fb      	strb	r3, [r7, #23]
      break;
 800f356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f360:	7dfb      	ldrb	r3, [r7, #23]
}
 800f362:	4618      	mov	r0, r3
 800f364:	3718      	adds	r7, #24
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop

0800f36c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f380:	2b01      	cmp	r3, #1
 800f382:	d101      	bne.n	800f388 <HAL_TIM_ConfigClockSource+0x1c>
 800f384:	2302      	movs	r3, #2
 800f386:	e0dc      	b.n	800f542 <HAL_TIM_ConfigClockSource+0x1d6>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2202      	movs	r2, #2
 800f394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	689b      	ldr	r3, [r3, #8]
 800f39e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	4b6a      	ldr	r3, [pc, #424]	; (800f54c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f3a4:	4013      	ands	r3, r2
 800f3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a64      	ldr	r2, [pc, #400]	; (800f550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	f000 80a9 	beq.w	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f3c4:	4a62      	ldr	r2, [pc, #392]	; (800f550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	f200 80ae 	bhi.w	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3cc:	4a61      	ldr	r2, [pc, #388]	; (800f554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	f000 80a1 	beq.w	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f3d4:	4a5f      	ldr	r2, [pc, #380]	; (800f554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	f200 80a6 	bhi.w	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3dc:	4a5e      	ldr	r2, [pc, #376]	; (800f558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	f000 8099 	beq.w	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f3e4:	4a5c      	ldr	r2, [pc, #368]	; (800f558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	f200 809e 	bhi.w	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3f0:	f000 8091 	beq.w	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f3f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3f8:	f200 8096 	bhi.w	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f3fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f400:	f000 8089 	beq.w	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f408:	f200 808e 	bhi.w	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f410:	d03e      	beq.n	800f490 <HAL_TIM_ConfigClockSource+0x124>
 800f412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f416:	f200 8087 	bhi.w	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f41e:	f000 8086 	beq.w	800f52e <HAL_TIM_ConfigClockSource+0x1c2>
 800f422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f426:	d87f      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f428:	2b70      	cmp	r3, #112	; 0x70
 800f42a:	d01a      	beq.n	800f462 <HAL_TIM_ConfigClockSource+0xf6>
 800f42c:	2b70      	cmp	r3, #112	; 0x70
 800f42e:	d87b      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f430:	2b60      	cmp	r3, #96	; 0x60
 800f432:	d050      	beq.n	800f4d6 <HAL_TIM_ConfigClockSource+0x16a>
 800f434:	2b60      	cmp	r3, #96	; 0x60
 800f436:	d877      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f438:	2b50      	cmp	r3, #80	; 0x50
 800f43a:	d03c      	beq.n	800f4b6 <HAL_TIM_ConfigClockSource+0x14a>
 800f43c:	2b50      	cmp	r3, #80	; 0x50
 800f43e:	d873      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f440:	2b40      	cmp	r3, #64	; 0x40
 800f442:	d058      	beq.n	800f4f6 <HAL_TIM_ConfigClockSource+0x18a>
 800f444:	2b40      	cmp	r3, #64	; 0x40
 800f446:	d86f      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f448:	2b30      	cmp	r3, #48	; 0x30
 800f44a:	d064      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f44c:	2b30      	cmp	r3, #48	; 0x30
 800f44e:	d86b      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f450:	2b20      	cmp	r3, #32
 800f452:	d060      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f454:	2b20      	cmp	r3, #32
 800f456:	d867      	bhi.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d05c      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f45c:	2b10      	cmp	r3, #16
 800f45e:	d05a      	beq.n	800f516 <HAL_TIM_ConfigClockSource+0x1aa>
 800f460:	e062      	b.n	800f528 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	6899      	ldr	r1, [r3, #8]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	f000 fc8b 	bl	800fd8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	689b      	ldr	r3, [r3, #8]
 800f47c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	609a      	str	r2, [r3, #8]
      break;
 800f48e:	e04f      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6818      	ldr	r0, [r3, #0]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	6899      	ldr	r1, [r3, #8]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	f000 fc74 	bl	800fd8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	689a      	ldr	r2, [r3, #8]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f4b2:	609a      	str	r2, [r3, #8]
      break;
 800f4b4:	e03c      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	6859      	ldr	r1, [r3, #4]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	f000 fbe4 	bl	800fc90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2150      	movs	r1, #80	; 0x50
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f000 fc3e 	bl	800fd50 <TIM_ITRx_SetConfig>
      break;
 800f4d4:	e02c      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6818      	ldr	r0, [r3, #0]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	6859      	ldr	r1, [r3, #4]
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	f000 fc03 	bl	800fcee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2160      	movs	r1, #96	; 0x60
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f000 fc2e 	bl	800fd50 <TIM_ITRx_SetConfig>
      break;
 800f4f4:	e01c      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	6859      	ldr	r1, [r3, #4]
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	461a      	mov	r2, r3
 800f504:	f000 fbc4 	bl	800fc90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2140      	movs	r1, #64	; 0x40
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 fc1e 	bl	800fd50 <TIM_ITRx_SetConfig>
      break;
 800f514:	e00c      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4619      	mov	r1, r3
 800f520:	4610      	mov	r0, r2
 800f522:	f000 fc15 	bl	800fd50 <TIM_ITRx_SetConfig>
      break;
 800f526:	e003      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f528:	2301      	movs	r3, #1
 800f52a:	73fb      	strb	r3, [r7, #15]
      break;
 800f52c:	e000      	b.n	800f530 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f52e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f540:	7bfb      	ldrb	r3, [r7, #15]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	ffceff88 	.word	0xffceff88
 800f550:	00100040 	.word	0x00100040
 800f554:	00100030 	.word	0x00100030
 800f558:	00100020 	.word	0x00100020

0800f55c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f58c:	bf00      	nop
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a46      	ldr	r2, [pc, #280]	; (800f6c4 <TIM_Base_SetConfig+0x12c>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d013      	beq.n	800f5d8 <TIM_Base_SetConfig+0x40>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5b6:	d00f      	beq.n	800f5d8 <TIM_Base_SetConfig+0x40>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a43      	ldr	r2, [pc, #268]	; (800f6c8 <TIM_Base_SetConfig+0x130>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d00b      	beq.n	800f5d8 <TIM_Base_SetConfig+0x40>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a42      	ldr	r2, [pc, #264]	; (800f6cc <TIM_Base_SetConfig+0x134>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d007      	beq.n	800f5d8 <TIM_Base_SetConfig+0x40>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a41      	ldr	r2, [pc, #260]	; (800f6d0 <TIM_Base_SetConfig+0x138>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d003      	beq.n	800f5d8 <TIM_Base_SetConfig+0x40>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a40      	ldr	r2, [pc, #256]	; (800f6d4 <TIM_Base_SetConfig+0x13c>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d108      	bne.n	800f5ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a35      	ldr	r2, [pc, #212]	; (800f6c4 <TIM_Base_SetConfig+0x12c>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d01f      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5f8:	d01b      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a32      	ldr	r2, [pc, #200]	; (800f6c8 <TIM_Base_SetConfig+0x130>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d017      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a31      	ldr	r2, [pc, #196]	; (800f6cc <TIM_Base_SetConfig+0x134>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d013      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a30      	ldr	r2, [pc, #192]	; (800f6d0 <TIM_Base_SetConfig+0x138>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d00f      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a2f      	ldr	r2, [pc, #188]	; (800f6d4 <TIM_Base_SetConfig+0x13c>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d00b      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a2e      	ldr	r2, [pc, #184]	; (800f6d8 <TIM_Base_SetConfig+0x140>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d007      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a2d      	ldr	r2, [pc, #180]	; (800f6dc <TIM_Base_SetConfig+0x144>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d003      	beq.n	800f632 <TIM_Base_SetConfig+0x9a>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a2c      	ldr	r2, [pc, #176]	; (800f6e0 <TIM_Base_SetConfig+0x148>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d108      	bne.n	800f644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	4313      	orrs	r3, r2
 800f642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	695b      	ldr	r3, [r3, #20]
 800f64e:	4313      	orrs	r3, r2
 800f650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	689a      	ldr	r2, [r3, #8]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a16      	ldr	r2, [pc, #88]	; (800f6c4 <TIM_Base_SetConfig+0x12c>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d00f      	beq.n	800f690 <TIM_Base_SetConfig+0xf8>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a18      	ldr	r2, [pc, #96]	; (800f6d4 <TIM_Base_SetConfig+0x13c>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d00b      	beq.n	800f690 <TIM_Base_SetConfig+0xf8>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a17      	ldr	r2, [pc, #92]	; (800f6d8 <TIM_Base_SetConfig+0x140>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d007      	beq.n	800f690 <TIM_Base_SetConfig+0xf8>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a16      	ldr	r2, [pc, #88]	; (800f6dc <TIM_Base_SetConfig+0x144>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d003      	beq.n	800f690 <TIM_Base_SetConfig+0xf8>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a15      	ldr	r2, [pc, #84]	; (800f6e0 <TIM_Base_SetConfig+0x148>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d103      	bne.n	800f698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	691a      	ldr	r2, [r3, #16]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	691b      	ldr	r3, [r3, #16]
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d105      	bne.n	800f6b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	f023 0201 	bic.w	r2, r3, #1
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	611a      	str	r2, [r3, #16]
  }
}
 800f6b6:	bf00      	nop
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	40010000 	.word	0x40010000
 800f6c8:	40000400 	.word	0x40000400
 800f6cc:	40000800 	.word	0x40000800
 800f6d0:	40000c00 	.word	0x40000c00
 800f6d4:	40010400 	.word	0x40010400
 800f6d8:	40014000 	.word	0x40014000
 800f6dc:	40014400 	.word	0x40014400
 800f6e0:	40014800 	.word	0x40014800

0800f6e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b087      	sub	sp, #28
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6a1b      	ldr	r3, [r3, #32]
 800f6f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a1b      	ldr	r3, [r3, #32]
 800f6f8:	f023 0201 	bic.w	r2, r3, #1
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	699b      	ldr	r3, [r3, #24]
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	4b37      	ldr	r3, [pc, #220]	; (800f7ec <TIM_OC1_SetConfig+0x108>)
 800f710:	4013      	ands	r3, r2
 800f712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f023 0303 	bic.w	r3, r3, #3
 800f71a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	4313      	orrs	r3, r2
 800f724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f023 0302 	bic.w	r3, r3, #2
 800f72c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	697a      	ldr	r2, [r7, #20]
 800f734:	4313      	orrs	r3, r2
 800f736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a2d      	ldr	r2, [pc, #180]	; (800f7f0 <TIM_OC1_SetConfig+0x10c>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d00f      	beq.n	800f760 <TIM_OC1_SetConfig+0x7c>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	4a2c      	ldr	r2, [pc, #176]	; (800f7f4 <TIM_OC1_SetConfig+0x110>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d00b      	beq.n	800f760 <TIM_OC1_SetConfig+0x7c>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a2b      	ldr	r2, [pc, #172]	; (800f7f8 <TIM_OC1_SetConfig+0x114>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d007      	beq.n	800f760 <TIM_OC1_SetConfig+0x7c>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a2a      	ldr	r2, [pc, #168]	; (800f7fc <TIM_OC1_SetConfig+0x118>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d003      	beq.n	800f760 <TIM_OC1_SetConfig+0x7c>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a29      	ldr	r2, [pc, #164]	; (800f800 <TIM_OC1_SetConfig+0x11c>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d10c      	bne.n	800f77a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	f023 0308 	bic.w	r3, r3, #8
 800f766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	697a      	ldr	r2, [r7, #20]
 800f76e:	4313      	orrs	r3, r2
 800f770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f023 0304 	bic.w	r3, r3, #4
 800f778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a1c      	ldr	r2, [pc, #112]	; (800f7f0 <TIM_OC1_SetConfig+0x10c>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d00f      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xbe>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a1b      	ldr	r2, [pc, #108]	; (800f7f4 <TIM_OC1_SetConfig+0x110>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d00b      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xbe>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a1a      	ldr	r2, [pc, #104]	; (800f7f8 <TIM_OC1_SetConfig+0x114>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d007      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xbe>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a19      	ldr	r2, [pc, #100]	; (800f7fc <TIM_OC1_SetConfig+0x118>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d003      	beq.n	800f7a2 <TIM_OC1_SetConfig+0xbe>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a18      	ldr	r2, [pc, #96]	; (800f800 <TIM_OC1_SetConfig+0x11c>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d111      	bne.n	800f7c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	695b      	ldr	r3, [r3, #20]
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	693a      	ldr	r2, [r7, #16]
 800f7ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	685a      	ldr	r2, [r3, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	621a      	str	r2, [r3, #32]
}
 800f7e0:	bf00      	nop
 800f7e2:	371c      	adds	r7, #28
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	fffeff8f 	.word	0xfffeff8f
 800f7f0:	40010000 	.word	0x40010000
 800f7f4:	40010400 	.word	0x40010400
 800f7f8:	40014000 	.word	0x40014000
 800f7fc:	40014400 	.word	0x40014400
 800f800:	40014800 	.word	0x40014800

0800f804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f804:	b480      	push	{r7}
 800f806:	b087      	sub	sp, #28
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a1b      	ldr	r3, [r3, #32]
 800f812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	f023 0210 	bic.w	r2, r3, #16
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	4b34      	ldr	r3, [pc, #208]	; (800f900 <TIM_OC2_SetConfig+0xfc>)
 800f830:	4013      	ands	r3, r2
 800f832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f83a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	021b      	lsls	r3, r3, #8
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	4313      	orrs	r3, r2
 800f846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	f023 0320 	bic.w	r3, r3, #32
 800f84e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	011b      	lsls	r3, r3, #4
 800f856:	697a      	ldr	r2, [r7, #20]
 800f858:	4313      	orrs	r3, r2
 800f85a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a29      	ldr	r2, [pc, #164]	; (800f904 <TIM_OC2_SetConfig+0x100>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d003      	beq.n	800f86c <TIM_OC2_SetConfig+0x68>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a28      	ldr	r2, [pc, #160]	; (800f908 <TIM_OC2_SetConfig+0x104>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d10d      	bne.n	800f888 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	011b      	lsls	r3, r3, #4
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	4313      	orrs	r3, r2
 800f87e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4a1e      	ldr	r2, [pc, #120]	; (800f904 <TIM_OC2_SetConfig+0x100>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d00f      	beq.n	800f8b0 <TIM_OC2_SetConfig+0xac>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4a1d      	ldr	r2, [pc, #116]	; (800f908 <TIM_OC2_SetConfig+0x104>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d00b      	beq.n	800f8b0 <TIM_OC2_SetConfig+0xac>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a1c      	ldr	r2, [pc, #112]	; (800f90c <TIM_OC2_SetConfig+0x108>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d007      	beq.n	800f8b0 <TIM_OC2_SetConfig+0xac>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a1b      	ldr	r2, [pc, #108]	; (800f910 <TIM_OC2_SetConfig+0x10c>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d003      	beq.n	800f8b0 <TIM_OC2_SetConfig+0xac>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a1a      	ldr	r2, [pc, #104]	; (800f914 <TIM_OC2_SetConfig+0x110>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d113      	bne.n	800f8d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	695b      	ldr	r3, [r3, #20]
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	699b      	ldr	r3, [r3, #24]
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	693a      	ldr	r2, [r7, #16]
 800f8dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	697a      	ldr	r2, [r7, #20]
 800f8f0:	621a      	str	r2, [r3, #32]
}
 800f8f2:	bf00      	nop
 800f8f4:	371c      	adds	r7, #28
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	feff8fff 	.word	0xfeff8fff
 800f904:	40010000 	.word	0x40010000
 800f908:	40010400 	.word	0x40010400
 800f90c:	40014000 	.word	0x40014000
 800f910:	40014400 	.word	0x40014400
 800f914:	40014800 	.word	0x40014800

0800f918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f918:	b480      	push	{r7}
 800f91a:	b087      	sub	sp, #28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a1b      	ldr	r3, [r3, #32]
 800f92c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	69db      	ldr	r3, [r3, #28]
 800f93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	4b33      	ldr	r3, [pc, #204]	; (800fa10 <TIM_OC3_SetConfig+0xf8>)
 800f944:	4013      	ands	r3, r2
 800f946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f023 0303 	bic.w	r3, r3, #3
 800f94e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	4313      	orrs	r3, r2
 800f958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	021b      	lsls	r3, r3, #8
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a28      	ldr	r2, [pc, #160]	; (800fa14 <TIM_OC3_SetConfig+0xfc>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d003      	beq.n	800f97e <TIM_OC3_SetConfig+0x66>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a27      	ldr	r2, [pc, #156]	; (800fa18 <TIM_OC3_SetConfig+0x100>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d10d      	bne.n	800f99a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	021b      	lsls	r3, r3, #8
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	4313      	orrs	r3, r2
 800f990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4a1d      	ldr	r2, [pc, #116]	; (800fa14 <TIM_OC3_SetConfig+0xfc>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d00f      	beq.n	800f9c2 <TIM_OC3_SetConfig+0xaa>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4a1c      	ldr	r2, [pc, #112]	; (800fa18 <TIM_OC3_SetConfig+0x100>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d00b      	beq.n	800f9c2 <TIM_OC3_SetConfig+0xaa>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4a1b      	ldr	r2, [pc, #108]	; (800fa1c <TIM_OC3_SetConfig+0x104>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d007      	beq.n	800f9c2 <TIM_OC3_SetConfig+0xaa>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a1a      	ldr	r2, [pc, #104]	; (800fa20 <TIM_OC3_SetConfig+0x108>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d003      	beq.n	800f9c2 <TIM_OC3_SetConfig+0xaa>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a19      	ldr	r2, [pc, #100]	; (800fa24 <TIM_OC3_SetConfig+0x10c>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d113      	bne.n	800f9ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	011b      	lsls	r3, r3, #4
 800f9d8:	693a      	ldr	r2, [r7, #16]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	699b      	ldr	r3, [r3, #24]
 800f9e2:	011b      	lsls	r3, r3, #4
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	685a      	ldr	r2, [r3, #4]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	697a      	ldr	r2, [r7, #20]
 800fa02:	621a      	str	r2, [r3, #32]
}
 800fa04:	bf00      	nop
 800fa06:	371c      	adds	r7, #28
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	fffeff8f 	.word	0xfffeff8f
 800fa14:	40010000 	.word	0x40010000
 800fa18:	40010400 	.word	0x40010400
 800fa1c:	40014000 	.word	0x40014000
 800fa20:	40014400 	.word	0x40014400
 800fa24:	40014800 	.word	0x40014800

0800fa28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6a1b      	ldr	r3, [r3, #32]
 800fa36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a1b      	ldr	r3, [r3, #32]
 800fa3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	69db      	ldr	r3, [r3, #28]
 800fa4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	4b24      	ldr	r3, [pc, #144]	; (800fae4 <TIM_OC4_SetConfig+0xbc>)
 800fa54:	4013      	ands	r3, r2
 800fa56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	021b      	lsls	r3, r3, #8
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	031b      	lsls	r3, r3, #12
 800fa7a:	693a      	ldr	r2, [r7, #16]
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4a19      	ldr	r2, [pc, #100]	; (800fae8 <TIM_OC4_SetConfig+0xc0>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d00f      	beq.n	800faa8 <TIM_OC4_SetConfig+0x80>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	4a18      	ldr	r2, [pc, #96]	; (800faec <TIM_OC4_SetConfig+0xc4>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d00b      	beq.n	800faa8 <TIM_OC4_SetConfig+0x80>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4a17      	ldr	r2, [pc, #92]	; (800faf0 <TIM_OC4_SetConfig+0xc8>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d007      	beq.n	800faa8 <TIM_OC4_SetConfig+0x80>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4a16      	ldr	r2, [pc, #88]	; (800faf4 <TIM_OC4_SetConfig+0xcc>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d003      	beq.n	800faa8 <TIM_OC4_SetConfig+0x80>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4a15      	ldr	r2, [pc, #84]	; (800faf8 <TIM_OC4_SetConfig+0xd0>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d109      	bne.n	800fabc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800faae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	019b      	lsls	r3, r3, #6
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	4313      	orrs	r3, r2
 800faba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	621a      	str	r2, [r3, #32]
}
 800fad6:	bf00      	nop
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	feff8fff 	.word	0xfeff8fff
 800fae8:	40010000 	.word	0x40010000
 800faec:	40010400 	.word	0x40010400
 800faf0:	40014000 	.word	0x40014000
 800faf4:	40014400 	.word	0x40014400
 800faf8:	40014800 	.word	0x40014800

0800fafc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b087      	sub	sp, #28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6a1b      	ldr	r3, [r3, #32]
 800fb10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	4b21      	ldr	r3, [pc, #132]	; (800fbac <TIM_OC5_SetConfig+0xb0>)
 800fb28:	4013      	ands	r3, r2
 800fb2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fb3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	041b      	lsls	r3, r3, #16
 800fb44:	693a      	ldr	r2, [r7, #16]
 800fb46:	4313      	orrs	r3, r2
 800fb48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4a18      	ldr	r2, [pc, #96]	; (800fbb0 <TIM_OC5_SetConfig+0xb4>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d00f      	beq.n	800fb72 <TIM_OC5_SetConfig+0x76>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a17      	ldr	r2, [pc, #92]	; (800fbb4 <TIM_OC5_SetConfig+0xb8>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d00b      	beq.n	800fb72 <TIM_OC5_SetConfig+0x76>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a16      	ldr	r2, [pc, #88]	; (800fbb8 <TIM_OC5_SetConfig+0xbc>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d007      	beq.n	800fb72 <TIM_OC5_SetConfig+0x76>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a15      	ldr	r2, [pc, #84]	; (800fbbc <TIM_OC5_SetConfig+0xc0>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d003      	beq.n	800fb72 <TIM_OC5_SetConfig+0x76>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a14      	ldr	r2, [pc, #80]	; (800fbc0 <TIM_OC5_SetConfig+0xc4>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d109      	bne.n	800fb86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	695b      	ldr	r3, [r3, #20]
 800fb7e:	021b      	lsls	r3, r3, #8
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	693a      	ldr	r2, [r7, #16]
 800fb9e:	621a      	str	r2, [r3, #32]
}
 800fba0:	bf00      	nop
 800fba2:	371c      	adds	r7, #28
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	fffeff8f 	.word	0xfffeff8f
 800fbb0:	40010000 	.word	0x40010000
 800fbb4:	40010400 	.word	0x40010400
 800fbb8:	40014000 	.word	0x40014000
 800fbbc:	40014400 	.word	0x40014400
 800fbc0:	40014800 	.word	0x40014800

0800fbc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b087      	sub	sp, #28
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a1b      	ldr	r3, [r3, #32]
 800fbd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6a1b      	ldr	r3, [r3, #32]
 800fbd8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	4b22      	ldr	r3, [pc, #136]	; (800fc78 <TIM_OC6_SetConfig+0xb4>)
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	021b      	lsls	r3, r3, #8
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	051b      	lsls	r3, r3, #20
 800fc0e:	693a      	ldr	r2, [r7, #16]
 800fc10:	4313      	orrs	r3, r2
 800fc12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a19      	ldr	r2, [pc, #100]	; (800fc7c <TIM_OC6_SetConfig+0xb8>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d00f      	beq.n	800fc3c <TIM_OC6_SetConfig+0x78>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a18      	ldr	r2, [pc, #96]	; (800fc80 <TIM_OC6_SetConfig+0xbc>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d00b      	beq.n	800fc3c <TIM_OC6_SetConfig+0x78>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a17      	ldr	r2, [pc, #92]	; (800fc84 <TIM_OC6_SetConfig+0xc0>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d007      	beq.n	800fc3c <TIM_OC6_SetConfig+0x78>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a16      	ldr	r2, [pc, #88]	; (800fc88 <TIM_OC6_SetConfig+0xc4>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d003      	beq.n	800fc3c <TIM_OC6_SetConfig+0x78>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a15      	ldr	r2, [pc, #84]	; (800fc8c <TIM_OC6_SetConfig+0xc8>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d109      	bne.n	800fc50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fc42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	695b      	ldr	r3, [r3, #20]
 800fc48:	029b      	lsls	r3, r3, #10
 800fc4a:	697a      	ldr	r2, [r7, #20]
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	685a      	ldr	r2, [r3, #4]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	693a      	ldr	r2, [r7, #16]
 800fc68:	621a      	str	r2, [r3, #32]
}
 800fc6a:	bf00      	nop
 800fc6c:	371c      	adds	r7, #28
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	feff8fff 	.word	0xfeff8fff
 800fc7c:	40010000 	.word	0x40010000
 800fc80:	40010400 	.word	0x40010400
 800fc84:	40014000 	.word	0x40014000
 800fc88:	40014400 	.word	0x40014400
 800fc8c:	40014800 	.word	0x40014800

0800fc90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6a1b      	ldr	r3, [r3, #32]
 800fca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6a1b      	ldr	r3, [r3, #32]
 800fca6:	f023 0201 	bic.w	r2, r3, #1
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fcba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	693a      	ldr	r2, [r7, #16]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	f023 030a 	bic.w	r3, r3, #10
 800fccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	621a      	str	r2, [r3, #32]
}
 800fce2:	bf00      	nop
 800fce4:	371c      	adds	r7, #28
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr

0800fcee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b087      	sub	sp, #28
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	60f8      	str	r0, [r7, #12]
 800fcf6:	60b9      	str	r1, [r7, #8]
 800fcf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	f023 0210 	bic.w	r2, r3, #16
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	031b      	lsls	r3, r3, #12
 800fd1e:	693a      	ldr	r2, [r7, #16]
 800fd20:	4313      	orrs	r3, r2
 800fd22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fd2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	011b      	lsls	r3, r3, #4
 800fd30:	697a      	ldr	r2, [r7, #20]
 800fd32:	4313      	orrs	r3, r2
 800fd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	697a      	ldr	r2, [r7, #20]
 800fd40:	621a      	str	r2, [r3, #32]
}
 800fd42:	bf00      	nop
 800fd44:	371c      	adds	r7, #28
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
	...

0800fd50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	4b09      	ldr	r3, [pc, #36]	; (800fd88 <TIM_ITRx_SetConfig+0x38>)
 800fd64:	4013      	ands	r3, r2
 800fd66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd68:	683a      	ldr	r2, [r7, #0]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	f043 0307 	orr.w	r3, r3, #7
 800fd72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	609a      	str	r2, [r3, #8]
}
 800fd7a:	bf00      	nop
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	ffcfff8f 	.word	0xffcfff8f

0800fd8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b087      	sub	sp, #28
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fda6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	021a      	lsls	r2, r3, #8
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	431a      	orrs	r2, r3
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	697a      	ldr	r2, [r7, #20]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	697a      	ldr	r2, [r7, #20]
 800fdbe:	609a      	str	r2, [r3, #8]
}
 800fdc0:	bf00      	nop
 800fdc2:	371c      	adds	r7, #28
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b087      	sub	sp, #28
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	f003 031f 	and.w	r3, r3, #31
 800fdde:	2201      	movs	r2, #1
 800fde0:	fa02 f303 	lsl.w	r3, r2, r3
 800fde4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6a1a      	ldr	r2, [r3, #32]
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	43db      	mvns	r3, r3
 800fdee:	401a      	ands	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6a1a      	ldr	r2, [r3, #32]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	f003 031f 	and.w	r3, r3, #31
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	fa01 f303 	lsl.w	r3, r1, r3
 800fe04:	431a      	orrs	r2, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	621a      	str	r2, [r3, #32]
}
 800fe0a:	bf00      	nop
 800fe0c:	371c      	adds	r7, #28
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr
	...

0800fe18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d101      	bne.n	800fe30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	e06d      	b.n	800ff0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2201      	movs	r2, #1
 800fe34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4a30      	ldr	r2, [pc, #192]	; (800ff18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d004      	beq.n	800fe64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a2f      	ldr	r2, [pc, #188]	; (800ff1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d108      	bne.n	800fe76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fe6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	4313      	orrs	r3, r2
 800fe74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	4313      	orrs	r3, r2
 800fe86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4a20      	ldr	r2, [pc, #128]	; (800ff18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d022      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fea2:	d01d      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a1d      	ldr	r2, [pc, #116]	; (800ff20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d018      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4a1c      	ldr	r2, [pc, #112]	; (800ff24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d013      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a1a      	ldr	r2, [pc, #104]	; (800ff28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d00e      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a15      	ldr	r2, [pc, #84]	; (800ff1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d009      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a16      	ldr	r2, [pc, #88]	; (800ff2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d004      	beq.n	800fee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a15      	ldr	r2, [pc, #84]	; (800ff30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d10c      	bne.n	800fefa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	68ba      	ldr	r2, [r7, #8]
 800feee:	4313      	orrs	r3, r2
 800fef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2201      	movs	r2, #1
 800fefe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	40010000 	.word	0x40010000
 800ff1c:	40010400 	.word	0x40010400
 800ff20:	40000400 	.word	0x40000400
 800ff24:	40000800 	.word	0x40000800
 800ff28:	40000c00 	.word	0x40000c00
 800ff2c:	40001800 	.word	0x40001800
 800ff30:	40014000 	.word	0x40014000

0800ff34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d101      	bne.n	800ff50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ff4c:	2302      	movs	r3, #2
 800ff4e:	e065      	b.n	801001c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2201      	movs	r2, #1
 800ff54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	689b      	ldr	r3, [r3, #8]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	695b      	ldr	r3, [r3, #20]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	699b      	ldr	r3, [r3, #24]
 800ffc4:	041b      	lsls	r3, r3, #16
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4a16      	ldr	r2, [pc, #88]	; (8010028 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d004      	beq.n	800ffde <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4a14      	ldr	r2, [pc, #80]	; (801002c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d115      	bne.n	801000a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe8:	051b      	lsls	r3, r3, #20
 800ffea:	4313      	orrs	r3, r2
 800ffec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	69db      	ldr	r3, [r3, #28]
 800fff8:	4313      	orrs	r3, r2
 800fffa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	6a1b      	ldr	r3, [r3, #32]
 8010006:	4313      	orrs	r3, r2
 8010008:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	68fa      	ldr	r2, [r7, #12]
 8010010:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801001a:	2300      	movs	r3, #0
}
 801001c:	4618      	mov	r0, r3
 801001e:	3714      	adds	r7, #20
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr
 8010028:	40010000 	.word	0x40010000
 801002c:	40010400 	.word	0x40010400

08010030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d101      	bne.n	801007e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801007a:	2301      	movs	r3, #1
 801007c:	e042      	b.n	8010104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010084:	2b00      	cmp	r3, #0
 8010086:	d106      	bne.n	8010096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7f3 fbf7 	bl	8003884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2224      	movs	r2, #36	; 0x24
 801009a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f022 0201 	bic.w	r2, r2, #1
 80100ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d002      	beq.n	80100bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f001 fc42 	bl	8011940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fed7 	bl	8010e70 <UART_SetConfig>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d101      	bne.n	80100cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	e01b      	b.n	8010104 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	685a      	ldr	r2, [r3, #4]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80100da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	689a      	ldr	r2, [r3, #8]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80100ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f042 0201 	orr.w	r2, r2, #1
 80100fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f001 fcc1 	bl	8011a84 <UART_CheckIdleState>
 8010102:	4603      	mov	r3, r0
}
 8010104:	4618      	mov	r0, r3
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b08a      	sub	sp, #40	; 0x28
 8010110:	af02      	add	r7, sp, #8
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	603b      	str	r3, [r7, #0]
 8010118:	4613      	mov	r3, r2
 801011a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010122:	2b20      	cmp	r3, #32
 8010124:	d17b      	bne.n	801021e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d002      	beq.n	8010132 <HAL_UART_Transmit+0x26>
 801012c:	88fb      	ldrh	r3, [r7, #6]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d101      	bne.n	8010136 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	e074      	b.n	8010220 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2200      	movs	r2, #0
 801013a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2221      	movs	r2, #33	; 0x21
 8010142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010146:	f7f3 ff1b 	bl	8003f80 <HAL_GetTick>
 801014a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	88fa      	ldrh	r2, [r7, #6]
 8010150:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	88fa      	ldrh	r2, [r7, #6]
 8010158:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010164:	d108      	bne.n	8010178 <HAL_UART_Transmit+0x6c>
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d104      	bne.n	8010178 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801016e:	2300      	movs	r3, #0
 8010170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	61bb      	str	r3, [r7, #24]
 8010176:	e003      	b.n	8010180 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801017c:	2300      	movs	r3, #0
 801017e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010180:	e030      	b.n	80101e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	2200      	movs	r2, #0
 801018a:	2180      	movs	r1, #128	; 0x80
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	f001 fd23 	bl	8011bd8 <UART_WaitOnFlagUntilTimeout>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d005      	beq.n	80101a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2220      	movs	r2, #32
 801019c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80101a0:	2303      	movs	r3, #3
 80101a2:	e03d      	b.n	8010220 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10b      	bne.n	80101c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	881b      	ldrh	r3, [r3, #0]
 80101ae:	461a      	mov	r2, r3
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80101b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	3302      	adds	r3, #2
 80101be:	61bb      	str	r3, [r7, #24]
 80101c0:	e007      	b.n	80101d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	781a      	ldrb	r2, [r3, #0]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	3301      	adds	r3, #1
 80101d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101d8:	b29b      	uxth	r3, r3
 80101da:	3b01      	subs	r3, #1
 80101dc:	b29a      	uxth	r2, r3
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1c8      	bne.n	8010182 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2200      	movs	r2, #0
 80101f8:	2140      	movs	r1, #64	; 0x40
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f001 fcec 	bl	8011bd8 <UART_WaitOnFlagUntilTimeout>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d005      	beq.n	8010212 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2220      	movs	r2, #32
 801020a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801020e:	2303      	movs	r3, #3
 8010210:	e006      	b.n	8010220 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2220      	movs	r2, #32
 8010216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801021a:	2300      	movs	r3, #0
 801021c:	e000      	b.n	8010220 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801021e:	2302      	movs	r3, #2
  }
}
 8010220:	4618      	mov	r0, r3
 8010222:	3720      	adds	r7, #32
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b08a      	sub	sp, #40	; 0x28
 801022c:	af02      	add	r7, sp, #8
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	603b      	str	r3, [r7, #0]
 8010234:	4613      	mov	r3, r2
 8010236:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801023e:	2b20      	cmp	r3, #32
 8010240:	f040 80b5 	bne.w	80103ae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d002      	beq.n	8010250 <HAL_UART_Receive+0x28>
 801024a:	88fb      	ldrh	r3, [r7, #6]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d101      	bne.n	8010254 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010250:	2301      	movs	r3, #1
 8010252:	e0ad      	b.n	80103b0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2222      	movs	r2, #34	; 0x22
 8010260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2200      	movs	r2, #0
 8010268:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801026a:	f7f3 fe89 	bl	8003f80 <HAL_GetTick>
 801026e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	88fa      	ldrh	r2, [r7, #6]
 8010274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	88fa      	ldrh	r2, [r7, #6]
 801027c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010288:	d10e      	bne.n	80102a8 <HAL_UART_Receive+0x80>
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d105      	bne.n	801029e <HAL_UART_Receive+0x76>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010298:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801029c:	e02d      	b.n	80102fa <HAL_UART_Receive+0xd2>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	22ff      	movs	r2, #255	; 0xff
 80102a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102a6:	e028      	b.n	80102fa <HAL_UART_Receive+0xd2>
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10d      	bne.n	80102cc <HAL_UART_Receive+0xa4>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d104      	bne.n	80102c2 <HAL_UART_Receive+0x9a>
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	22ff      	movs	r2, #255	; 0xff
 80102bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102c0:	e01b      	b.n	80102fa <HAL_UART_Receive+0xd2>
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	227f      	movs	r2, #127	; 0x7f
 80102c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102ca:	e016      	b.n	80102fa <HAL_UART_Receive+0xd2>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102d4:	d10d      	bne.n	80102f2 <HAL_UART_Receive+0xca>
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	691b      	ldr	r3, [r3, #16]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d104      	bne.n	80102e8 <HAL_UART_Receive+0xc0>
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	227f      	movs	r2, #127	; 0x7f
 80102e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102e6:	e008      	b.n	80102fa <HAL_UART_Receive+0xd2>
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	223f      	movs	r2, #63	; 0x3f
 80102ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102f0:	e003      	b.n	80102fa <HAL_UART_Receive+0xd2>
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2200      	movs	r2, #0
 80102f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010300:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801030a:	d108      	bne.n	801031e <HAL_UART_Receive+0xf6>
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d104      	bne.n	801031e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010314:	2300      	movs	r3, #0
 8010316:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	61bb      	str	r3, [r7, #24]
 801031c:	e003      	b.n	8010326 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010322:	2300      	movs	r3, #0
 8010324:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010326:	e036      	b.n	8010396 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	9300      	str	r3, [sp, #0]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	2200      	movs	r2, #0
 8010330:	2120      	movs	r1, #32
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f001 fc50 	bl	8011bd8 <UART_WaitOnFlagUntilTimeout>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d005      	beq.n	801034a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2220      	movs	r2, #32
 8010342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010346:	2303      	movs	r3, #3
 8010348:	e032      	b.n	80103b0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d10c      	bne.n	801036a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010356:	b29a      	uxth	r2, r3
 8010358:	8a7b      	ldrh	r3, [r7, #18]
 801035a:	4013      	ands	r3, r2
 801035c:	b29a      	uxth	r2, r3
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	3302      	adds	r3, #2
 8010366:	61bb      	str	r3, [r7, #24]
 8010368:	e00c      	b.n	8010384 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010370:	b2da      	uxtb	r2, r3
 8010372:	8a7b      	ldrh	r3, [r7, #18]
 8010374:	b2db      	uxtb	r3, r3
 8010376:	4013      	ands	r3, r2
 8010378:	b2da      	uxtb	r2, r3
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	3301      	adds	r3, #1
 8010382:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801038a:	b29b      	uxth	r3, r3
 801038c:	3b01      	subs	r3, #1
 801038e:	b29a      	uxth	r2, r3
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801039c:	b29b      	uxth	r3, r3
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1c2      	bne.n	8010328 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2220      	movs	r2, #32
 80103a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80103aa:	2300      	movs	r3, #0
 80103ac:	e000      	b.n	80103b0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80103ae:	2302      	movs	r3, #2
  }
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3720      	adds	r7, #32
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b08a      	sub	sp, #40	; 0x28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	4613      	mov	r3, r2
 80103c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103cc:	2b20      	cmp	r3, #32
 80103ce:	d137      	bne.n	8010440 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d002      	beq.n	80103dc <HAL_UART_Receive_IT+0x24>
 80103d6:	88fb      	ldrh	r3, [r7, #6]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80103dc:	2301      	movs	r3, #1
 80103de:	e030      	b.n	8010442 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2200      	movs	r2, #0
 80103e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a18      	ldr	r2, [pc, #96]	; (801044c <HAL_UART_Receive_IT+0x94>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d01f      	beq.n	8010430 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d018      	beq.n	8010430 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	e853 3f00 	ldrex	r3, [r3]
 801040a:	613b      	str	r3, [r7, #16]
   return(result);
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010412:	627b      	str	r3, [r7, #36]	; 0x24
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	461a      	mov	r2, r3
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	623b      	str	r3, [r7, #32]
 801041e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010420:	69f9      	ldr	r1, [r7, #28]
 8010422:	6a3a      	ldr	r2, [r7, #32]
 8010424:	e841 2300 	strex	r3, r2, [r1]
 8010428:	61bb      	str	r3, [r7, #24]
   return(result);
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d1e6      	bne.n	80103fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010430:	88fb      	ldrh	r3, [r7, #6]
 8010432:	461a      	mov	r2, r3
 8010434:	68b9      	ldr	r1, [r7, #8]
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	f001 fc3c 	bl	8011cb4 <UART_Start_Receive_IT>
 801043c:	4603      	mov	r3, r0
 801043e:	e000      	b.n	8010442 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010440:	2302      	movs	r3, #2
  }
}
 8010442:	4618      	mov	r0, r3
 8010444:	3728      	adds	r7, #40	; 0x28
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	58000c00 	.word	0x58000c00

08010450 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b08a      	sub	sp, #40	; 0x28
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	4613      	mov	r3, r2
 801045c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010464:	2b20      	cmp	r3, #32
 8010466:	d167      	bne.n	8010538 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <HAL_UART_Transmit_DMA+0x24>
 801046e:	88fb      	ldrh	r3, [r7, #6]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d101      	bne.n	8010478 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010474:	2301      	movs	r3, #1
 8010476:	e060      	b.n	801053a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	88fa      	ldrh	r2, [r7, #6]
 8010482:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	88fa      	ldrh	r2, [r7, #6]
 801048a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2200      	movs	r2, #0
 8010492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2221      	movs	r2, #33	; 0x21
 801049a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d028      	beq.n	80104f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104aa:	4a26      	ldr	r2, [pc, #152]	; (8010544 <HAL_UART_Transmit_DMA+0xf4>)
 80104ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b2:	4a25      	ldr	r2, [pc, #148]	; (8010548 <HAL_UART_Transmit_DMA+0xf8>)
 80104b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104ba:	4a24      	ldr	r2, [pc, #144]	; (801054c <HAL_UART_Transmit_DMA+0xfc>)
 80104bc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104c2:	2200      	movs	r2, #0
 80104c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ce:	4619      	mov	r1, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	3328      	adds	r3, #40	; 0x28
 80104d6:	461a      	mov	r2, r3
 80104d8:	88fb      	ldrh	r3, [r7, #6]
 80104da:	f7f6 f9d5 	bl	8006888 <HAL_DMA_Start_IT>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d009      	beq.n	80104f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2210      	movs	r2, #16
 80104e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2220      	movs	r2, #32
 80104f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80104f4:	2301      	movs	r3, #1
 80104f6:	e020      	b.n	801053a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2240      	movs	r2, #64	; 0x40
 80104fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	3308      	adds	r3, #8
 8010506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	e853 3f00 	ldrex	r3, [r3]
 801050e:	613b      	str	r3, [r7, #16]
   return(result);
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010516:	627b      	str	r3, [r7, #36]	; 0x24
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3308      	adds	r3, #8
 801051e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010520:	623a      	str	r2, [r7, #32]
 8010522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010524:	69f9      	ldr	r1, [r7, #28]
 8010526:	6a3a      	ldr	r2, [r7, #32]
 8010528:	e841 2300 	strex	r3, r2, [r1]
 801052c:	61bb      	str	r3, [r7, #24]
   return(result);
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1e5      	bne.n	8010500 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010534:	2300      	movs	r3, #0
 8010536:	e000      	b.n	801053a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010538:	2302      	movs	r3, #2
  }
}
 801053a:	4618      	mov	r0, r3
 801053c:	3728      	adds	r7, #40	; 0x28
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	08012049 	.word	0x08012049
 8010548:	080120df 	.word	0x080120df
 801054c:	080120fb 	.word	0x080120fb

08010550 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b09a      	sub	sp, #104	; 0x68
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010560:	e853 3f00 	ldrex	r3, [r3]
 8010564:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801056c:	667b      	str	r3, [r7, #100]	; 0x64
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	461a      	mov	r2, r3
 8010574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010576:	657b      	str	r3, [r7, #84]	; 0x54
 8010578:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801057c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801057e:	e841 2300 	strex	r3, r2, [r1]
 8010582:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1e6      	bne.n	8010558 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3308      	adds	r3, #8
 8010590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010594:	e853 3f00 	ldrex	r3, [r3]
 8010598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801059a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801059c:	4b46      	ldr	r3, [pc, #280]	; (80106b8 <HAL_UART_AbortReceive+0x168>)
 801059e:	4013      	ands	r3, r2
 80105a0:	663b      	str	r3, [r7, #96]	; 0x60
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	3308      	adds	r3, #8
 80105a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105aa:	643a      	str	r2, [r7, #64]	; 0x40
 80105ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105b2:	e841 2300 	strex	r3, r2, [r1]
 80105b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d1e5      	bne.n	801058a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d118      	bne.n	80105f8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	e853 3f00 	ldrex	r3, [r3]
 80105d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	f023 0310 	bic.w	r3, r3, #16
 80105da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	461a      	mov	r2, r3
 80105e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ec:	e841 2300 	strex	r3, r2, [r1]
 80105f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1e6      	bne.n	80105c6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010602:	2b40      	cmp	r3, #64	; 0x40
 8010604:	d13b      	bne.n	801067e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	60bb      	str	r3, [r7, #8]
   return(result);
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801061c:	65bb      	str	r3, [r7, #88]	; 0x58
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010626:	61ba      	str	r2, [r7, #24]
 8010628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6979      	ldr	r1, [r7, #20]
 801062c:	69ba      	ldr	r2, [r7, #24]
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	613b      	str	r3, [r7, #16]
   return(result);
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e5      	bne.n	8010606 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010640:	2b00      	cmp	r3, #0
 8010642:	d01c      	beq.n	801067e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801064a:	2200      	movs	r2, #0
 801064c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010654:	4618      	mov	r0, r3
 8010656:	f7f6 fb81 	bl	8006d5c <HAL_DMA_Abort>
 801065a:	4603      	mov	r3, r0
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00e      	beq.n	801067e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010666:	4618      	mov	r0, r3
 8010668:	f7f8 f806 	bl	8008678 <HAL_DMA_GetError>
 801066c:	4603      	mov	r3, r0
 801066e:	2b20      	cmp	r3, #32
 8010670:	d105      	bne.n	801067e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2210      	movs	r2, #16
 8010676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 801067a:	2303      	movs	r3, #3
 801067c:	e017      	b.n	80106ae <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	220f      	movs	r2, #15
 801068c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	699a      	ldr	r2, [r3, #24]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f042 0208 	orr.w	r2, r2, #8
 801069c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3768      	adds	r7, #104	; 0x68
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	effffffe 	.word	0xeffffffe

080106bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b0ba      	sub	sp, #232	; 0xe8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	69db      	ldr	r3, [r3, #28]
 80106ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	689b      	ldr	r3, [r3, #8]
 80106de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80106e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80106e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80106ea:	4013      	ands	r3, r2
 80106ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80106f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d11b      	bne.n	8010730 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80106f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106fc:	f003 0320 	and.w	r3, r3, #32
 8010700:	2b00      	cmp	r3, #0
 8010702:	d015      	beq.n	8010730 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010708:	f003 0320 	and.w	r3, r3, #32
 801070c:	2b00      	cmp	r3, #0
 801070e:	d105      	bne.n	801071c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d009      	beq.n	8010730 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 8377 	beq.w	8010e14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	4798      	blx	r3
      }
      return;
 801072e:	e371      	b.n	8010e14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010734:	2b00      	cmp	r3, #0
 8010736:	f000 8123 	beq.w	8010980 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801073a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801073e:	4b8d      	ldr	r3, [pc, #564]	; (8010974 <HAL_UART_IRQHandler+0x2b8>)
 8010740:	4013      	ands	r3, r2
 8010742:	2b00      	cmp	r3, #0
 8010744:	d106      	bne.n	8010754 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010746:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801074a:	4b8b      	ldr	r3, [pc, #556]	; (8010978 <HAL_UART_IRQHandler+0x2bc>)
 801074c:	4013      	ands	r3, r2
 801074e:	2b00      	cmp	r3, #0
 8010750:	f000 8116 	beq.w	8010980 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	2b00      	cmp	r3, #0
 801075e:	d011      	beq.n	8010784 <HAL_UART_IRQHandler+0xc8>
 8010760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010768:	2b00      	cmp	r3, #0
 801076a:	d00b      	beq.n	8010784 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2201      	movs	r2, #1
 8010772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801077a:	f043 0201 	orr.w	r2, r3, #1
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010788:	f003 0302 	and.w	r3, r3, #2
 801078c:	2b00      	cmp	r3, #0
 801078e:	d011      	beq.n	80107b4 <HAL_UART_IRQHandler+0xf8>
 8010790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010794:	f003 0301 	and.w	r3, r3, #1
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00b      	beq.n	80107b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2202      	movs	r2, #2
 80107a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107aa:	f043 0204 	orr.w	r2, r3, #4
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107b8:	f003 0304 	and.w	r3, r3, #4
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d011      	beq.n	80107e4 <HAL_UART_IRQHandler+0x128>
 80107c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107c4:	f003 0301 	and.w	r3, r3, #1
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00b      	beq.n	80107e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2204      	movs	r2, #4
 80107d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107da:	f043 0202 	orr.w	r2, r3, #2
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80107e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107e8:	f003 0308 	and.w	r3, r3, #8
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d017      	beq.n	8010820 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80107f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107f4:	f003 0320 	and.w	r3, r3, #32
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d105      	bne.n	8010808 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80107fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010800:	4b5c      	ldr	r3, [pc, #368]	; (8010974 <HAL_UART_IRQHandler+0x2b8>)
 8010802:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2208      	movs	r2, #8
 801080e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010816:	f043 0208 	orr.w	r2, r3, #8
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010828:	2b00      	cmp	r3, #0
 801082a:	d012      	beq.n	8010852 <HAL_UART_IRQHandler+0x196>
 801082c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00c      	beq.n	8010852 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010848:	f043 0220 	orr.w	r2, r3, #32
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010858:	2b00      	cmp	r3, #0
 801085a:	f000 82dd 	beq.w	8010e18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801085e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010862:	f003 0320 	and.w	r3, r3, #32
 8010866:	2b00      	cmp	r3, #0
 8010868:	d013      	beq.n	8010892 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801086a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801086e:	f003 0320 	and.w	r3, r3, #32
 8010872:	2b00      	cmp	r3, #0
 8010874:	d105      	bne.n	8010882 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801087e:	2b00      	cmp	r3, #0
 8010880:	d007      	beq.n	8010892 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010886:	2b00      	cmp	r3, #0
 8010888:	d003      	beq.n	8010892 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a6:	2b40      	cmp	r3, #64	; 0x40
 80108a8:	d005      	beq.n	80108b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80108aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80108ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d054      	beq.n	8010960 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f001 fb60 	bl	8011f7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108c6:	2b40      	cmp	r3, #64	; 0x40
 80108c8:	d146      	bne.n	8010958 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3308      	adds	r3, #8
 80108d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108d8:	e853 3f00 	ldrex	r3, [r3]
 80108dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80108e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	3308      	adds	r3, #8
 80108f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80108f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80108fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010906:	e841 2300 	strex	r3, r2, [r1]
 801090a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801090e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d1d9      	bne.n	80108ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801091c:	2b00      	cmp	r3, #0
 801091e:	d017      	beq.n	8010950 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010926:	4a15      	ldr	r2, [pc, #84]	; (801097c <HAL_UART_IRQHandler+0x2c0>)
 8010928:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010930:	4618      	mov	r0, r3
 8010932:	f7f6 fd31 	bl	8007398 <HAL_DMA_Abort_IT>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d019      	beq.n	8010970 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801094a:	4610      	mov	r0, r2
 801094c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801094e:	e00f      	b.n	8010970 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 fa77 	bl	8010e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010956:	e00b      	b.n	8010970 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fa73 	bl	8010e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801095e:	e007      	b.n	8010970 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 fa6f 	bl	8010e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2200      	movs	r2, #0
 801096a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801096e:	e253      	b.n	8010e18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010970:	bf00      	nop
    return;
 8010972:	e251      	b.n	8010e18 <HAL_UART_IRQHandler+0x75c>
 8010974:	10000001 	.word	0x10000001
 8010978:	04000120 	.word	0x04000120
 801097c:	0801217b 	.word	0x0801217b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010984:	2b01      	cmp	r3, #1
 8010986:	f040 81e7 	bne.w	8010d58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801098a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801098e:	f003 0310 	and.w	r3, r3, #16
 8010992:	2b00      	cmp	r3, #0
 8010994:	f000 81e0 	beq.w	8010d58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801099c:	f003 0310 	and.w	r3, r3, #16
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f000 81d9 	beq.w	8010d58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2210      	movs	r2, #16
 80109ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109b8:	2b40      	cmp	r3, #64	; 0x40
 80109ba:	f040 8151 	bne.w	8010c60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a96      	ldr	r2, [pc, #600]	; (8010c20 <HAL_UART_IRQHandler+0x564>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d068      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a93      	ldr	r2, [pc, #588]	; (8010c24 <HAL_UART_IRQHandler+0x568>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d061      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4a91      	ldr	r2, [pc, #580]	; (8010c28 <HAL_UART_IRQHandler+0x56c>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d05a      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a8e      	ldr	r2, [pc, #568]	; (8010c2c <HAL_UART_IRQHandler+0x570>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d053      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a8c      	ldr	r2, [pc, #560]	; (8010c30 <HAL_UART_IRQHandler+0x574>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d04c      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4a89      	ldr	r2, [pc, #548]	; (8010c34 <HAL_UART_IRQHandler+0x578>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d045      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a87      	ldr	r2, [pc, #540]	; (8010c38 <HAL_UART_IRQHandler+0x57c>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d03e      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a84      	ldr	r2, [pc, #528]	; (8010c3c <HAL_UART_IRQHandler+0x580>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d037      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a82      	ldr	r2, [pc, #520]	; (8010c40 <HAL_UART_IRQHandler+0x584>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d030      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a7f      	ldr	r2, [pc, #508]	; (8010c44 <HAL_UART_IRQHandler+0x588>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d029      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a7d      	ldr	r2, [pc, #500]	; (8010c48 <HAL_UART_IRQHandler+0x58c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d022      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a7a      	ldr	r2, [pc, #488]	; (8010c4c <HAL_UART_IRQHandler+0x590>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d01b      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4a78      	ldr	r2, [pc, #480]	; (8010c50 <HAL_UART_IRQHandler+0x594>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d014      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a75      	ldr	r2, [pc, #468]	; (8010c54 <HAL_UART_IRQHandler+0x598>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d00d      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a73      	ldr	r2, [pc, #460]	; (8010c58 <HAL_UART_IRQHandler+0x59c>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d006      	beq.n	8010a9e <HAL_UART_IRQHandler+0x3e2>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4a70      	ldr	r2, [pc, #448]	; (8010c5c <HAL_UART_IRQHandler+0x5a0>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d106      	bne.n	8010aac <HAL_UART_IRQHandler+0x3f0>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	e005      	b.n	8010ab8 <HAL_UART_IRQHandler+0x3fc>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 81ab 	beq.w	8010e1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010acc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	f080 81a3 	bcs.w	8010e1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010adc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae6:	69db      	ldr	r3, [r3, #28]
 8010ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010aec:	f000 8087 	beq.w	8010bfe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010afc:	e853 3f00 	ldrex	r3, [r3]
 8010b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	461a      	mov	r2, r3
 8010b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b2a:	e841 2300 	strex	r3, r2, [r1]
 8010b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d1da      	bne.n	8010af0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	3308      	adds	r3, #8
 8010b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b44:	e853 3f00 	ldrex	r3, [r3]
 8010b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b4c:	f023 0301 	bic.w	r3, r3, #1
 8010b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	3308      	adds	r3, #8
 8010b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010b6a:	e841 2300 	strex	r3, r2, [r1]
 8010b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d1e1      	bne.n	8010b3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	3308      	adds	r3, #8
 8010b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b80:	e853 3f00 	ldrex	r3, [r3]
 8010b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	3308      	adds	r3, #8
 8010b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ba2:	e841 2300 	strex	r3, r2, [r1]
 8010ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d1e3      	bne.n	8010b76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2220      	movs	r2, #32
 8010bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bc4:	e853 3f00 	ldrex	r3, [r3]
 8010bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bcc:	f023 0310 	bic.w	r3, r3, #16
 8010bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8010be0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010be6:	e841 2300 	strex	r3, r2, [r1]
 8010bea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d1e4      	bne.n	8010bbc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7f6 f8af 	bl	8006d5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2202      	movs	r2, #2
 8010c02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4619      	mov	r1, r3
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 f91d 	bl	8010e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c1e:	e0fd      	b.n	8010e1c <HAL_UART_IRQHandler+0x760>
 8010c20:	40020010 	.word	0x40020010
 8010c24:	40020028 	.word	0x40020028
 8010c28:	40020040 	.word	0x40020040
 8010c2c:	40020058 	.word	0x40020058
 8010c30:	40020070 	.word	0x40020070
 8010c34:	40020088 	.word	0x40020088
 8010c38:	400200a0 	.word	0x400200a0
 8010c3c:	400200b8 	.word	0x400200b8
 8010c40:	40020410 	.word	0x40020410
 8010c44:	40020428 	.word	0x40020428
 8010c48:	40020440 	.word	0x40020440
 8010c4c:	40020458 	.word	0x40020458
 8010c50:	40020470 	.word	0x40020470
 8010c54:	40020488 	.word	0x40020488
 8010c58:	400204a0 	.word	0x400204a0
 8010c5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f000 80cf 	beq.w	8010e20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f000 80ca 	beq.w	8010e20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c94:	e853 3f00 	ldrex	r3, [r3]
 8010c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	461a      	mov	r2, r3
 8010caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010cae:	647b      	str	r3, [r7, #68]	; 0x44
 8010cb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cb6:	e841 2300 	strex	r3, r2, [r1]
 8010cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1e4      	bne.n	8010c8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	3308      	adds	r3, #8
 8010cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	e853 3f00 	ldrex	r3, [r3]
 8010cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8010cd2:	6a3a      	ldr	r2, [r7, #32]
 8010cd4:	4b55      	ldr	r3, [pc, #340]	; (8010e2c <HAL_UART_IRQHandler+0x770>)
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8010ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cee:	e841 2300 	strex	r3, r2, [r1]
 8010cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d1e3      	bne.n	8010cc2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2220      	movs	r2, #32
 8010cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	e853 3f00 	ldrex	r3, [r3]
 8010d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f023 0310 	bic.w	r3, r3, #16
 8010d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d30:	61fb      	str	r3, [r7, #28]
 8010d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d34:	69b9      	ldr	r1, [r7, #24]
 8010d36:	69fa      	ldr	r2, [r7, #28]
 8010d38:	e841 2300 	strex	r3, r2, [r1]
 8010d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1e4      	bne.n	8010d0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2202      	movs	r2, #2
 8010d48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010d4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010d4e:	4619      	mov	r1, r3
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 f881 	bl	8010e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d56:	e063      	b.n	8010e20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00e      	beq.n	8010d82 <HAL_UART_IRQHandler+0x6c6>
 8010d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d008      	beq.n	8010d82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f001 ff5a 	bl	8012c34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d80:	e051      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d014      	beq.n	8010db8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d105      	bne.n	8010da6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d008      	beq.n	8010db8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d03a      	beq.n	8010e24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	4798      	blx	r3
    }
    return;
 8010db6:	e035      	b.n	8010e24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d009      	beq.n	8010dd8 <HAL_UART_IRQHandler+0x71c>
 8010dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d003      	beq.n	8010dd8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f001 f9e8 	bl	80121a6 <UART_EndTransmit_IT>
    return;
 8010dd6:	e026      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d009      	beq.n	8010df8 <HAL_UART_IRQHandler+0x73c>
 8010de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010de8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f001 ff33 	bl	8012c5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010df6:	e016      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d010      	beq.n	8010e26 <HAL_UART_IRQHandler+0x76a>
 8010e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	da0c      	bge.n	8010e26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f001 ff1b 	bl	8012c48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e12:	e008      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
      return;
 8010e14:	bf00      	nop
 8010e16:	e006      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
    return;
 8010e18:	bf00      	nop
 8010e1a:	e004      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
      return;
 8010e1c:	bf00      	nop
 8010e1e:	e002      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
      return;
 8010e20:	bf00      	nop
 8010e22:	e000      	b.n	8010e26 <HAL_UART_IRQHandler+0x76a>
    return;
 8010e24:	bf00      	nop
  }
}
 8010e26:	37e8      	adds	r7, #232	; 0xe8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	effffffe 	.word	0xeffffffe

08010e30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010e38:	bf00      	nop
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010e4c:	bf00      	nop
 8010e4e:	370c      	adds	r7, #12
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e74:	b092      	sub	sp, #72	; 0x48
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	689a      	ldr	r2, [r3, #8]
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	431a      	orrs	r2, r3
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	695b      	ldr	r3, [r3, #20]
 8010e8e:	431a      	orrs	r2, r3
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	69db      	ldr	r3, [r3, #28]
 8010e94:	4313      	orrs	r3, r2
 8010e96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	4bbe      	ldr	r3, [pc, #760]	; (8011198 <UART_SetConfig+0x328>)
 8010ea0:	4013      	ands	r3, r2
 8010ea2:	697a      	ldr	r2, [r7, #20]
 8010ea4:	6812      	ldr	r2, [r2, #0]
 8010ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ea8:	430b      	orrs	r3, r1
 8010eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	68da      	ldr	r2, [r3, #12]
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	430a      	orrs	r2, r1
 8010ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	699b      	ldr	r3, [r3, #24]
 8010ec6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4ab3      	ldr	r2, [pc, #716]	; (801119c <UART_SetConfig+0x32c>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d004      	beq.n	8010edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	6a1b      	ldr	r3, [r3, #32]
 8010ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	689a      	ldr	r2, [r3, #8]
 8010ee2:	4baf      	ldr	r3, [pc, #700]	; (80111a0 <UART_SetConfig+0x330>)
 8010ee4:	4013      	ands	r3, r2
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	6812      	ldr	r2, [r2, #0]
 8010eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010eec:	430b      	orrs	r3, r1
 8010eee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef6:	f023 010f 	bic.w	r1, r3, #15
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	430a      	orrs	r2, r1
 8010f04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4aa6      	ldr	r2, [pc, #664]	; (80111a4 <UART_SetConfig+0x334>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d177      	bne.n	8011000 <UART_SetConfig+0x190>
 8010f10:	4ba5      	ldr	r3, [pc, #660]	; (80111a8 <UART_SetConfig+0x338>)
 8010f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f18:	2b28      	cmp	r3, #40	; 0x28
 8010f1a:	d86d      	bhi.n	8010ff8 <UART_SetConfig+0x188>
 8010f1c:	a201      	add	r2, pc, #4	; (adr r2, 8010f24 <UART_SetConfig+0xb4>)
 8010f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f22:	bf00      	nop
 8010f24:	08010fc9 	.word	0x08010fc9
 8010f28:	08010ff9 	.word	0x08010ff9
 8010f2c:	08010ff9 	.word	0x08010ff9
 8010f30:	08010ff9 	.word	0x08010ff9
 8010f34:	08010ff9 	.word	0x08010ff9
 8010f38:	08010ff9 	.word	0x08010ff9
 8010f3c:	08010ff9 	.word	0x08010ff9
 8010f40:	08010ff9 	.word	0x08010ff9
 8010f44:	08010fd1 	.word	0x08010fd1
 8010f48:	08010ff9 	.word	0x08010ff9
 8010f4c:	08010ff9 	.word	0x08010ff9
 8010f50:	08010ff9 	.word	0x08010ff9
 8010f54:	08010ff9 	.word	0x08010ff9
 8010f58:	08010ff9 	.word	0x08010ff9
 8010f5c:	08010ff9 	.word	0x08010ff9
 8010f60:	08010ff9 	.word	0x08010ff9
 8010f64:	08010fd9 	.word	0x08010fd9
 8010f68:	08010ff9 	.word	0x08010ff9
 8010f6c:	08010ff9 	.word	0x08010ff9
 8010f70:	08010ff9 	.word	0x08010ff9
 8010f74:	08010ff9 	.word	0x08010ff9
 8010f78:	08010ff9 	.word	0x08010ff9
 8010f7c:	08010ff9 	.word	0x08010ff9
 8010f80:	08010ff9 	.word	0x08010ff9
 8010f84:	08010fe1 	.word	0x08010fe1
 8010f88:	08010ff9 	.word	0x08010ff9
 8010f8c:	08010ff9 	.word	0x08010ff9
 8010f90:	08010ff9 	.word	0x08010ff9
 8010f94:	08010ff9 	.word	0x08010ff9
 8010f98:	08010ff9 	.word	0x08010ff9
 8010f9c:	08010ff9 	.word	0x08010ff9
 8010fa0:	08010ff9 	.word	0x08010ff9
 8010fa4:	08010fe9 	.word	0x08010fe9
 8010fa8:	08010ff9 	.word	0x08010ff9
 8010fac:	08010ff9 	.word	0x08010ff9
 8010fb0:	08010ff9 	.word	0x08010ff9
 8010fb4:	08010ff9 	.word	0x08010ff9
 8010fb8:	08010ff9 	.word	0x08010ff9
 8010fbc:	08010ff9 	.word	0x08010ff9
 8010fc0:	08010ff9 	.word	0x08010ff9
 8010fc4:	08010ff1 	.word	0x08010ff1
 8010fc8:	2301      	movs	r3, #1
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fce:	e222      	b.n	8011416 <UART_SetConfig+0x5a6>
 8010fd0:	2304      	movs	r3, #4
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd6:	e21e      	b.n	8011416 <UART_SetConfig+0x5a6>
 8010fd8:	2308      	movs	r3, #8
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fde:	e21a      	b.n	8011416 <UART_SetConfig+0x5a6>
 8010fe0:	2310      	movs	r3, #16
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e216      	b.n	8011416 <UART_SetConfig+0x5a6>
 8010fe8:	2320      	movs	r3, #32
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e212      	b.n	8011416 <UART_SetConfig+0x5a6>
 8010ff0:	2340      	movs	r3, #64	; 0x40
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e20e      	b.n	8011416 <UART_SetConfig+0x5a6>
 8010ff8:	2380      	movs	r3, #128	; 0x80
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e20a      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4a69      	ldr	r2, [pc, #420]	; (80111ac <UART_SetConfig+0x33c>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d130      	bne.n	801106c <UART_SetConfig+0x1fc>
 801100a:	4b67      	ldr	r3, [pc, #412]	; (80111a8 <UART_SetConfig+0x338>)
 801100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801100e:	f003 0307 	and.w	r3, r3, #7
 8011012:	2b05      	cmp	r3, #5
 8011014:	d826      	bhi.n	8011064 <UART_SetConfig+0x1f4>
 8011016:	a201      	add	r2, pc, #4	; (adr r2, 801101c <UART_SetConfig+0x1ac>)
 8011018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101c:	08011035 	.word	0x08011035
 8011020:	0801103d 	.word	0x0801103d
 8011024:	08011045 	.word	0x08011045
 8011028:	0801104d 	.word	0x0801104d
 801102c:	08011055 	.word	0x08011055
 8011030:	0801105d 	.word	0x0801105d
 8011034:	2300      	movs	r3, #0
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e1ec      	b.n	8011416 <UART_SetConfig+0x5a6>
 801103c:	2304      	movs	r3, #4
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e1e8      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011044:	2308      	movs	r3, #8
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e1e4      	b.n	8011416 <UART_SetConfig+0x5a6>
 801104c:	2310      	movs	r3, #16
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e1e0      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011054:	2320      	movs	r3, #32
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e1dc      	b.n	8011416 <UART_SetConfig+0x5a6>
 801105c:	2340      	movs	r3, #64	; 0x40
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e1d8      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e1d4      	b.n	8011416 <UART_SetConfig+0x5a6>
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a4f      	ldr	r2, [pc, #316]	; (80111b0 <UART_SetConfig+0x340>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d130      	bne.n	80110d8 <UART_SetConfig+0x268>
 8011076:	4b4c      	ldr	r3, [pc, #304]	; (80111a8 <UART_SetConfig+0x338>)
 8011078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107a:	f003 0307 	and.w	r3, r3, #7
 801107e:	2b05      	cmp	r3, #5
 8011080:	d826      	bhi.n	80110d0 <UART_SetConfig+0x260>
 8011082:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <UART_SetConfig+0x218>)
 8011084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011088:	080110a1 	.word	0x080110a1
 801108c:	080110a9 	.word	0x080110a9
 8011090:	080110b1 	.word	0x080110b1
 8011094:	080110b9 	.word	0x080110b9
 8011098:	080110c1 	.word	0x080110c1
 801109c:	080110c9 	.word	0x080110c9
 80110a0:	2300      	movs	r3, #0
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e1b6      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110a8:	2304      	movs	r3, #4
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e1b2      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110b0:	2308      	movs	r3, #8
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e1ae      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110b8:	2310      	movs	r3, #16
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e1aa      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110c0:	2320      	movs	r3, #32
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e1a6      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110c8:	2340      	movs	r3, #64	; 0x40
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e1a2      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110d0:	2380      	movs	r3, #128	; 0x80
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e19e      	b.n	8011416 <UART_SetConfig+0x5a6>
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a35      	ldr	r2, [pc, #212]	; (80111b4 <UART_SetConfig+0x344>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d130      	bne.n	8011144 <UART_SetConfig+0x2d4>
 80110e2:	4b31      	ldr	r3, [pc, #196]	; (80111a8 <UART_SetConfig+0x338>)
 80110e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e6:	f003 0307 	and.w	r3, r3, #7
 80110ea:	2b05      	cmp	r3, #5
 80110ec:	d826      	bhi.n	801113c <UART_SetConfig+0x2cc>
 80110ee:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <UART_SetConfig+0x284>)
 80110f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f4:	0801110d 	.word	0x0801110d
 80110f8:	08011115 	.word	0x08011115
 80110fc:	0801111d 	.word	0x0801111d
 8011100:	08011125 	.word	0x08011125
 8011104:	0801112d 	.word	0x0801112d
 8011108:	08011135 	.word	0x08011135
 801110c:	2300      	movs	r3, #0
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e180      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011114:	2304      	movs	r3, #4
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e17c      	b.n	8011416 <UART_SetConfig+0x5a6>
 801111c:	2308      	movs	r3, #8
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e178      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011124:	2310      	movs	r3, #16
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e174      	b.n	8011416 <UART_SetConfig+0x5a6>
 801112c:	2320      	movs	r3, #32
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e170      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011134:	2340      	movs	r3, #64	; 0x40
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e16c      	b.n	8011416 <UART_SetConfig+0x5a6>
 801113c:	2380      	movs	r3, #128	; 0x80
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e168      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a1b      	ldr	r2, [pc, #108]	; (80111b8 <UART_SetConfig+0x348>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d142      	bne.n	80111d4 <UART_SetConfig+0x364>
 801114e:	4b16      	ldr	r3, [pc, #88]	; (80111a8 <UART_SetConfig+0x338>)
 8011150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011152:	f003 0307 	and.w	r3, r3, #7
 8011156:	2b05      	cmp	r3, #5
 8011158:	d838      	bhi.n	80111cc <UART_SetConfig+0x35c>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <UART_SetConfig+0x2f0>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011179 	.word	0x08011179
 8011164:	08011181 	.word	0x08011181
 8011168:	08011189 	.word	0x08011189
 801116c:	08011191 	.word	0x08011191
 8011170:	080111bd 	.word	0x080111bd
 8011174:	080111c5 	.word	0x080111c5
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e14a      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011180:	2304      	movs	r3, #4
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e146      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011188:	2308      	movs	r3, #8
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e142      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011190:	2310      	movs	r3, #16
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e13e      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011198:	cfff69f3 	.word	0xcfff69f3
 801119c:	58000c00 	.word	0x58000c00
 80111a0:	11fff4ff 	.word	0x11fff4ff
 80111a4:	40011000 	.word	0x40011000
 80111a8:	58024400 	.word	0x58024400
 80111ac:	40004400 	.word	0x40004400
 80111b0:	40004800 	.word	0x40004800
 80111b4:	40004c00 	.word	0x40004c00
 80111b8:	40005000 	.word	0x40005000
 80111bc:	2320      	movs	r3, #32
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e128      	b.n	8011416 <UART_SetConfig+0x5a6>
 80111c4:	2340      	movs	r3, #64	; 0x40
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e124      	b.n	8011416 <UART_SetConfig+0x5a6>
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e120      	b.n	8011416 <UART_SetConfig+0x5a6>
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4acb      	ldr	r2, [pc, #812]	; (8011508 <UART_SetConfig+0x698>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d176      	bne.n	80112cc <UART_SetConfig+0x45c>
 80111de:	4bcb      	ldr	r3, [pc, #812]	; (801150c <UART_SetConfig+0x69c>)
 80111e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111e6:	2b28      	cmp	r3, #40	; 0x28
 80111e8:	d86c      	bhi.n	80112c4 <UART_SetConfig+0x454>
 80111ea:	a201      	add	r2, pc, #4	; (adr r2, 80111f0 <UART_SetConfig+0x380>)
 80111ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111f0:	08011295 	.word	0x08011295
 80111f4:	080112c5 	.word	0x080112c5
 80111f8:	080112c5 	.word	0x080112c5
 80111fc:	080112c5 	.word	0x080112c5
 8011200:	080112c5 	.word	0x080112c5
 8011204:	080112c5 	.word	0x080112c5
 8011208:	080112c5 	.word	0x080112c5
 801120c:	080112c5 	.word	0x080112c5
 8011210:	0801129d 	.word	0x0801129d
 8011214:	080112c5 	.word	0x080112c5
 8011218:	080112c5 	.word	0x080112c5
 801121c:	080112c5 	.word	0x080112c5
 8011220:	080112c5 	.word	0x080112c5
 8011224:	080112c5 	.word	0x080112c5
 8011228:	080112c5 	.word	0x080112c5
 801122c:	080112c5 	.word	0x080112c5
 8011230:	080112a5 	.word	0x080112a5
 8011234:	080112c5 	.word	0x080112c5
 8011238:	080112c5 	.word	0x080112c5
 801123c:	080112c5 	.word	0x080112c5
 8011240:	080112c5 	.word	0x080112c5
 8011244:	080112c5 	.word	0x080112c5
 8011248:	080112c5 	.word	0x080112c5
 801124c:	080112c5 	.word	0x080112c5
 8011250:	080112ad 	.word	0x080112ad
 8011254:	080112c5 	.word	0x080112c5
 8011258:	080112c5 	.word	0x080112c5
 801125c:	080112c5 	.word	0x080112c5
 8011260:	080112c5 	.word	0x080112c5
 8011264:	080112c5 	.word	0x080112c5
 8011268:	080112c5 	.word	0x080112c5
 801126c:	080112c5 	.word	0x080112c5
 8011270:	080112b5 	.word	0x080112b5
 8011274:	080112c5 	.word	0x080112c5
 8011278:	080112c5 	.word	0x080112c5
 801127c:	080112c5 	.word	0x080112c5
 8011280:	080112c5 	.word	0x080112c5
 8011284:	080112c5 	.word	0x080112c5
 8011288:	080112c5 	.word	0x080112c5
 801128c:	080112c5 	.word	0x080112c5
 8011290:	080112bd 	.word	0x080112bd
 8011294:	2301      	movs	r3, #1
 8011296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129a:	e0bc      	b.n	8011416 <UART_SetConfig+0x5a6>
 801129c:	2304      	movs	r3, #4
 801129e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a2:	e0b8      	b.n	8011416 <UART_SetConfig+0x5a6>
 80112a4:	2308      	movs	r3, #8
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e0b4      	b.n	8011416 <UART_SetConfig+0x5a6>
 80112ac:	2310      	movs	r3, #16
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e0b0      	b.n	8011416 <UART_SetConfig+0x5a6>
 80112b4:	2320      	movs	r3, #32
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e0ac      	b.n	8011416 <UART_SetConfig+0x5a6>
 80112bc:	2340      	movs	r3, #64	; 0x40
 80112be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c2:	e0a8      	b.n	8011416 <UART_SetConfig+0x5a6>
 80112c4:	2380      	movs	r3, #128	; 0x80
 80112c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ca:	e0a4      	b.n	8011416 <UART_SetConfig+0x5a6>
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a8f      	ldr	r2, [pc, #572]	; (8011510 <UART_SetConfig+0x6a0>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d130      	bne.n	8011338 <UART_SetConfig+0x4c8>
 80112d6:	4b8d      	ldr	r3, [pc, #564]	; (801150c <UART_SetConfig+0x69c>)
 80112d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112da:	f003 0307 	and.w	r3, r3, #7
 80112de:	2b05      	cmp	r3, #5
 80112e0:	d826      	bhi.n	8011330 <UART_SetConfig+0x4c0>
 80112e2:	a201      	add	r2, pc, #4	; (adr r2, 80112e8 <UART_SetConfig+0x478>)
 80112e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112e8:	08011301 	.word	0x08011301
 80112ec:	08011309 	.word	0x08011309
 80112f0:	08011311 	.word	0x08011311
 80112f4:	08011319 	.word	0x08011319
 80112f8:	08011321 	.word	0x08011321
 80112fc:	08011329 	.word	0x08011329
 8011300:	2300      	movs	r3, #0
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e086      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011308:	2304      	movs	r3, #4
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e082      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011310:	2308      	movs	r3, #8
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e07e      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011318:	2310      	movs	r3, #16
 801131a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131e:	e07a      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011320:	2320      	movs	r3, #32
 8011322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011326:	e076      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011328:	2340      	movs	r3, #64	; 0x40
 801132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132e:	e072      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e06e      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a75      	ldr	r2, [pc, #468]	; (8011514 <UART_SetConfig+0x6a4>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d130      	bne.n	80113a4 <UART_SetConfig+0x534>
 8011342:	4b72      	ldr	r3, [pc, #456]	; (801150c <UART_SetConfig+0x69c>)
 8011344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011346:	f003 0307 	and.w	r3, r3, #7
 801134a:	2b05      	cmp	r3, #5
 801134c:	d826      	bhi.n	801139c <UART_SetConfig+0x52c>
 801134e:	a201      	add	r2, pc, #4	; (adr r2, 8011354 <UART_SetConfig+0x4e4>)
 8011350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011354:	0801136d 	.word	0x0801136d
 8011358:	08011375 	.word	0x08011375
 801135c:	0801137d 	.word	0x0801137d
 8011360:	08011385 	.word	0x08011385
 8011364:	0801138d 	.word	0x0801138d
 8011368:	08011395 	.word	0x08011395
 801136c:	2300      	movs	r3, #0
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e050      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011374:	2304      	movs	r3, #4
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e04c      	b.n	8011416 <UART_SetConfig+0x5a6>
 801137c:	2308      	movs	r3, #8
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e048      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011384:	2310      	movs	r3, #16
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e044      	b.n	8011416 <UART_SetConfig+0x5a6>
 801138c:	2320      	movs	r3, #32
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e040      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011394:	2340      	movs	r3, #64	; 0x40
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e03c      	b.n	8011416 <UART_SetConfig+0x5a6>
 801139c:	2380      	movs	r3, #128	; 0x80
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e038      	b.n	8011416 <UART_SetConfig+0x5a6>
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4a5b      	ldr	r2, [pc, #364]	; (8011518 <UART_SetConfig+0x6a8>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d130      	bne.n	8011410 <UART_SetConfig+0x5a0>
 80113ae:	4b57      	ldr	r3, [pc, #348]	; (801150c <UART_SetConfig+0x69c>)
 80113b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113b2:	f003 0307 	and.w	r3, r3, #7
 80113b6:	2b05      	cmp	r3, #5
 80113b8:	d826      	bhi.n	8011408 <UART_SetConfig+0x598>
 80113ba:	a201      	add	r2, pc, #4	; (adr r2, 80113c0 <UART_SetConfig+0x550>)
 80113bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c0:	080113d9 	.word	0x080113d9
 80113c4:	080113e1 	.word	0x080113e1
 80113c8:	080113e9 	.word	0x080113e9
 80113cc:	080113f1 	.word	0x080113f1
 80113d0:	080113f9 	.word	0x080113f9
 80113d4:	08011401 	.word	0x08011401
 80113d8:	2302      	movs	r3, #2
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e01a      	b.n	8011416 <UART_SetConfig+0x5a6>
 80113e0:	2304      	movs	r3, #4
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e016      	b.n	8011416 <UART_SetConfig+0x5a6>
 80113e8:	2308      	movs	r3, #8
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ee:	e012      	b.n	8011416 <UART_SetConfig+0x5a6>
 80113f0:	2310      	movs	r3, #16
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f6:	e00e      	b.n	8011416 <UART_SetConfig+0x5a6>
 80113f8:	2320      	movs	r3, #32
 80113fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fe:	e00a      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011400:	2340      	movs	r3, #64	; 0x40
 8011402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011406:	e006      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011408:	2380      	movs	r3, #128	; 0x80
 801140a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140e:	e002      	b.n	8011416 <UART_SetConfig+0x5a6>
 8011410:	2380      	movs	r3, #128	; 0x80
 8011412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a3f      	ldr	r2, [pc, #252]	; (8011518 <UART_SetConfig+0x6a8>)
 801141c:	4293      	cmp	r3, r2
 801141e:	f040 80f8 	bne.w	8011612 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011422:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011426:	2b20      	cmp	r3, #32
 8011428:	dc46      	bgt.n	80114b8 <UART_SetConfig+0x648>
 801142a:	2b02      	cmp	r3, #2
 801142c:	f2c0 8082 	blt.w	8011534 <UART_SetConfig+0x6c4>
 8011430:	3b02      	subs	r3, #2
 8011432:	2b1e      	cmp	r3, #30
 8011434:	d87e      	bhi.n	8011534 <UART_SetConfig+0x6c4>
 8011436:	a201      	add	r2, pc, #4	; (adr r2, 801143c <UART_SetConfig+0x5cc>)
 8011438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143c:	080114bf 	.word	0x080114bf
 8011440:	08011535 	.word	0x08011535
 8011444:	080114c7 	.word	0x080114c7
 8011448:	08011535 	.word	0x08011535
 801144c:	08011535 	.word	0x08011535
 8011450:	08011535 	.word	0x08011535
 8011454:	080114d7 	.word	0x080114d7
 8011458:	08011535 	.word	0x08011535
 801145c:	08011535 	.word	0x08011535
 8011460:	08011535 	.word	0x08011535
 8011464:	08011535 	.word	0x08011535
 8011468:	08011535 	.word	0x08011535
 801146c:	08011535 	.word	0x08011535
 8011470:	08011535 	.word	0x08011535
 8011474:	080114e7 	.word	0x080114e7
 8011478:	08011535 	.word	0x08011535
 801147c:	08011535 	.word	0x08011535
 8011480:	08011535 	.word	0x08011535
 8011484:	08011535 	.word	0x08011535
 8011488:	08011535 	.word	0x08011535
 801148c:	08011535 	.word	0x08011535
 8011490:	08011535 	.word	0x08011535
 8011494:	08011535 	.word	0x08011535
 8011498:	08011535 	.word	0x08011535
 801149c:	08011535 	.word	0x08011535
 80114a0:	08011535 	.word	0x08011535
 80114a4:	08011535 	.word	0x08011535
 80114a8:	08011535 	.word	0x08011535
 80114ac:	08011535 	.word	0x08011535
 80114b0:	08011535 	.word	0x08011535
 80114b4:	08011527 	.word	0x08011527
 80114b8:	2b40      	cmp	r3, #64	; 0x40
 80114ba:	d037      	beq.n	801152c <UART_SetConfig+0x6bc>
 80114bc:	e03a      	b.n	8011534 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80114be:	f7fb fce5 	bl	800ce8c <HAL_RCCEx_GetD3PCLK1Freq>
 80114c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114c4:	e03c      	b.n	8011540 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fb fcf4 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114d4:	e034      	b.n	8011540 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114d6:	f107 0318 	add.w	r3, r7, #24
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fb fe40 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114e4:	e02c      	b.n	8011540 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114e6:	4b09      	ldr	r3, [pc, #36]	; (801150c <UART_SetConfig+0x69c>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f003 0320 	and.w	r3, r3, #32
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d016      	beq.n	8011520 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114f2:	4b06      	ldr	r3, [pc, #24]	; (801150c <UART_SetConfig+0x69c>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	08db      	lsrs	r3, r3, #3
 80114f8:	f003 0303 	and.w	r3, r3, #3
 80114fc:	4a07      	ldr	r2, [pc, #28]	; (801151c <UART_SetConfig+0x6ac>)
 80114fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011504:	e01c      	b.n	8011540 <UART_SetConfig+0x6d0>
 8011506:	bf00      	nop
 8011508:	40011400 	.word	0x40011400
 801150c:	58024400 	.word	0x58024400
 8011510:	40007800 	.word	0x40007800
 8011514:	40007c00 	.word	0x40007c00
 8011518:	58000c00 	.word	0x58000c00
 801151c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011520:	4b9d      	ldr	r3, [pc, #628]	; (8011798 <UART_SetConfig+0x928>)
 8011522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011524:	e00c      	b.n	8011540 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011526:	4b9d      	ldr	r3, [pc, #628]	; (801179c <UART_SetConfig+0x92c>)
 8011528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801152a:	e009      	b.n	8011540 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801152c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011532:	e005      	b.n	8011540 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011534:	2300      	movs	r3, #0
 8011536:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011538:	2301      	movs	r3, #1
 801153a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801153e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 81de 	beq.w	8011904 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154c:	4a94      	ldr	r2, [pc, #592]	; (80117a0 <UART_SetConfig+0x930>)
 801154e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011552:	461a      	mov	r2, r3
 8011554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011556:	fbb3 f3f2 	udiv	r3, r3, r2
 801155a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	4613      	mov	r3, r2
 8011562:	005b      	lsls	r3, r3, #1
 8011564:	4413      	add	r3, r2
 8011566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011568:	429a      	cmp	r2, r3
 801156a:	d305      	bcc.n	8011578 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011574:	429a      	cmp	r2, r3
 8011576:	d903      	bls.n	8011580 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801157e:	e1c1      	b.n	8011904 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011582:	2200      	movs	r2, #0
 8011584:	60bb      	str	r3, [r7, #8]
 8011586:	60fa      	str	r2, [r7, #12]
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801158c:	4a84      	ldr	r2, [pc, #528]	; (80117a0 <UART_SetConfig+0x930>)
 801158e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011592:	b29b      	uxth	r3, r3
 8011594:	2200      	movs	r2, #0
 8011596:	603b      	str	r3, [r7, #0]
 8011598:	607a      	str	r2, [r7, #4]
 801159a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801159e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80115a2:	f7ee fe9d 	bl	80002e0 <__aeabi_uldivmod>
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	4610      	mov	r0, r2
 80115ac:	4619      	mov	r1, r3
 80115ae:	f04f 0200 	mov.w	r2, #0
 80115b2:	f04f 0300 	mov.w	r3, #0
 80115b6:	020b      	lsls	r3, r1, #8
 80115b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80115bc:	0202      	lsls	r2, r0, #8
 80115be:	6979      	ldr	r1, [r7, #20]
 80115c0:	6849      	ldr	r1, [r1, #4]
 80115c2:	0849      	lsrs	r1, r1, #1
 80115c4:	2000      	movs	r0, #0
 80115c6:	460c      	mov	r4, r1
 80115c8:	4605      	mov	r5, r0
 80115ca:	eb12 0804 	adds.w	r8, r2, r4
 80115ce:	eb43 0905 	adc.w	r9, r3, r5
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	469a      	mov	sl, r3
 80115da:	4693      	mov	fp, r2
 80115dc:	4652      	mov	r2, sl
 80115de:	465b      	mov	r3, fp
 80115e0:	4640      	mov	r0, r8
 80115e2:	4649      	mov	r1, r9
 80115e4:	f7ee fe7c 	bl	80002e0 <__aeabi_uldivmod>
 80115e8:	4602      	mov	r2, r0
 80115ea:	460b      	mov	r3, r1
 80115ec:	4613      	mov	r3, r2
 80115ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115f6:	d308      	bcc.n	801160a <UART_SetConfig+0x79a>
 80115f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115fe:	d204      	bcs.n	801160a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011606:	60da      	str	r2, [r3, #12]
 8011608:	e17c      	b.n	8011904 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801160a:	2301      	movs	r3, #1
 801160c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011610:	e178      	b.n	8011904 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	69db      	ldr	r3, [r3, #28]
 8011616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801161a:	f040 80c5 	bne.w	80117a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801161e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011622:	2b20      	cmp	r3, #32
 8011624:	dc48      	bgt.n	80116b8 <UART_SetConfig+0x848>
 8011626:	2b00      	cmp	r3, #0
 8011628:	db7b      	blt.n	8011722 <UART_SetConfig+0x8b2>
 801162a:	2b20      	cmp	r3, #32
 801162c:	d879      	bhi.n	8011722 <UART_SetConfig+0x8b2>
 801162e:	a201      	add	r2, pc, #4	; (adr r2, 8011634 <UART_SetConfig+0x7c4>)
 8011630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011634:	080116bf 	.word	0x080116bf
 8011638:	080116c7 	.word	0x080116c7
 801163c:	08011723 	.word	0x08011723
 8011640:	08011723 	.word	0x08011723
 8011644:	080116cf 	.word	0x080116cf
 8011648:	08011723 	.word	0x08011723
 801164c:	08011723 	.word	0x08011723
 8011650:	08011723 	.word	0x08011723
 8011654:	080116df 	.word	0x080116df
 8011658:	08011723 	.word	0x08011723
 801165c:	08011723 	.word	0x08011723
 8011660:	08011723 	.word	0x08011723
 8011664:	08011723 	.word	0x08011723
 8011668:	08011723 	.word	0x08011723
 801166c:	08011723 	.word	0x08011723
 8011670:	08011723 	.word	0x08011723
 8011674:	080116ef 	.word	0x080116ef
 8011678:	08011723 	.word	0x08011723
 801167c:	08011723 	.word	0x08011723
 8011680:	08011723 	.word	0x08011723
 8011684:	08011723 	.word	0x08011723
 8011688:	08011723 	.word	0x08011723
 801168c:	08011723 	.word	0x08011723
 8011690:	08011723 	.word	0x08011723
 8011694:	08011723 	.word	0x08011723
 8011698:	08011723 	.word	0x08011723
 801169c:	08011723 	.word	0x08011723
 80116a0:	08011723 	.word	0x08011723
 80116a4:	08011723 	.word	0x08011723
 80116a8:	08011723 	.word	0x08011723
 80116ac:	08011723 	.word	0x08011723
 80116b0:	08011723 	.word	0x08011723
 80116b4:	08011715 	.word	0x08011715
 80116b8:	2b40      	cmp	r3, #64	; 0x40
 80116ba:	d02e      	beq.n	801171a <UART_SetConfig+0x8aa>
 80116bc:	e031      	b.n	8011722 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116be:	f7f9 fbed 	bl	800ae9c <HAL_RCC_GetPCLK1Freq>
 80116c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116c4:	e033      	b.n	801172e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80116c6:	f7f9 fbff 	bl	800aec8 <HAL_RCC_GetPCLK2Freq>
 80116ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80116cc:	e02f      	b.n	801172e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fb fbf0 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80116d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116dc:	e027      	b.n	801172e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80116de:	f107 0318 	add.w	r3, r7, #24
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fb fd3c 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116ec:	e01f      	b.n	801172e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116ee:	4b2d      	ldr	r3, [pc, #180]	; (80117a4 <UART_SetConfig+0x934>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f003 0320 	and.w	r3, r3, #32
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d009      	beq.n	801170e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80116fa:	4b2a      	ldr	r3, [pc, #168]	; (80117a4 <UART_SetConfig+0x934>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	08db      	lsrs	r3, r3, #3
 8011700:	f003 0303 	and.w	r3, r3, #3
 8011704:	4a24      	ldr	r2, [pc, #144]	; (8011798 <UART_SetConfig+0x928>)
 8011706:	fa22 f303 	lsr.w	r3, r2, r3
 801170a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801170c:	e00f      	b.n	801172e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801170e:	4b22      	ldr	r3, [pc, #136]	; (8011798 <UART_SetConfig+0x928>)
 8011710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011712:	e00c      	b.n	801172e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011714:	4b21      	ldr	r3, [pc, #132]	; (801179c <UART_SetConfig+0x92c>)
 8011716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011718:	e009      	b.n	801172e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801171a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801171e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011720:	e005      	b.n	801172e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011722:	2300      	movs	r3, #0
 8011724:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801172c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801172e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011730:	2b00      	cmp	r3, #0
 8011732:	f000 80e7 	beq.w	8011904 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173a:	4a19      	ldr	r2, [pc, #100]	; (80117a0 <UART_SetConfig+0x930>)
 801173c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011740:	461a      	mov	r2, r3
 8011742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011744:	fbb3 f3f2 	udiv	r3, r3, r2
 8011748:	005a      	lsls	r2, r3, #1
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	085b      	lsrs	r3, r3, #1
 8011750:	441a      	add	r2, r3
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	fbb2 f3f3 	udiv	r3, r2, r3
 801175a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	2b0f      	cmp	r3, #15
 8011760:	d916      	bls.n	8011790 <UART_SetConfig+0x920>
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011768:	d212      	bcs.n	8011790 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176c:	b29b      	uxth	r3, r3
 801176e:	f023 030f 	bic.w	r3, r3, #15
 8011772:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011776:	085b      	lsrs	r3, r3, #1
 8011778:	b29b      	uxth	r3, r3
 801177a:	f003 0307 	and.w	r3, r3, #7
 801177e:	b29a      	uxth	r2, r3
 8011780:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011782:	4313      	orrs	r3, r2
 8011784:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801178c:	60da      	str	r2, [r3, #12]
 801178e:	e0b9      	b.n	8011904 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011790:	2301      	movs	r3, #1
 8011792:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011796:	e0b5      	b.n	8011904 <UART_SetConfig+0xa94>
 8011798:	03d09000 	.word	0x03d09000
 801179c:	003d0900 	.word	0x003d0900
 80117a0:	08017878 	.word	0x08017878
 80117a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80117a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80117ac:	2b20      	cmp	r3, #32
 80117ae:	dc49      	bgt.n	8011844 <UART_SetConfig+0x9d4>
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	db7c      	blt.n	80118ae <UART_SetConfig+0xa3e>
 80117b4:	2b20      	cmp	r3, #32
 80117b6:	d87a      	bhi.n	80118ae <UART_SetConfig+0xa3e>
 80117b8:	a201      	add	r2, pc, #4	; (adr r2, 80117c0 <UART_SetConfig+0x950>)
 80117ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117be:	bf00      	nop
 80117c0:	0801184b 	.word	0x0801184b
 80117c4:	08011853 	.word	0x08011853
 80117c8:	080118af 	.word	0x080118af
 80117cc:	080118af 	.word	0x080118af
 80117d0:	0801185b 	.word	0x0801185b
 80117d4:	080118af 	.word	0x080118af
 80117d8:	080118af 	.word	0x080118af
 80117dc:	080118af 	.word	0x080118af
 80117e0:	0801186b 	.word	0x0801186b
 80117e4:	080118af 	.word	0x080118af
 80117e8:	080118af 	.word	0x080118af
 80117ec:	080118af 	.word	0x080118af
 80117f0:	080118af 	.word	0x080118af
 80117f4:	080118af 	.word	0x080118af
 80117f8:	080118af 	.word	0x080118af
 80117fc:	080118af 	.word	0x080118af
 8011800:	0801187b 	.word	0x0801187b
 8011804:	080118af 	.word	0x080118af
 8011808:	080118af 	.word	0x080118af
 801180c:	080118af 	.word	0x080118af
 8011810:	080118af 	.word	0x080118af
 8011814:	080118af 	.word	0x080118af
 8011818:	080118af 	.word	0x080118af
 801181c:	080118af 	.word	0x080118af
 8011820:	080118af 	.word	0x080118af
 8011824:	080118af 	.word	0x080118af
 8011828:	080118af 	.word	0x080118af
 801182c:	080118af 	.word	0x080118af
 8011830:	080118af 	.word	0x080118af
 8011834:	080118af 	.word	0x080118af
 8011838:	080118af 	.word	0x080118af
 801183c:	080118af 	.word	0x080118af
 8011840:	080118a1 	.word	0x080118a1
 8011844:	2b40      	cmp	r3, #64	; 0x40
 8011846:	d02e      	beq.n	80118a6 <UART_SetConfig+0xa36>
 8011848:	e031      	b.n	80118ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801184a:	f7f9 fb27 	bl	800ae9c <HAL_RCC_GetPCLK1Freq>
 801184e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011850:	e033      	b.n	80118ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011852:	f7f9 fb39 	bl	800aec8 <HAL_RCC_GetPCLK2Freq>
 8011856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011858:	e02f      	b.n	80118ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801185e:	4618      	mov	r0, r3
 8011860:	f7fb fb2a 	bl	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011868:	e027      	b.n	80118ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801186a:	f107 0318 	add.w	r3, r7, #24
 801186e:	4618      	mov	r0, r3
 8011870:	f7fb fc76 	bl	800d160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011878:	e01f      	b.n	80118ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801187a:	4b2d      	ldr	r3, [pc, #180]	; (8011930 <UART_SetConfig+0xac0>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f003 0320 	and.w	r3, r3, #32
 8011882:	2b00      	cmp	r3, #0
 8011884:	d009      	beq.n	801189a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011886:	4b2a      	ldr	r3, [pc, #168]	; (8011930 <UART_SetConfig+0xac0>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	08db      	lsrs	r3, r3, #3
 801188c:	f003 0303 	and.w	r3, r3, #3
 8011890:	4a28      	ldr	r2, [pc, #160]	; (8011934 <UART_SetConfig+0xac4>)
 8011892:	fa22 f303 	lsr.w	r3, r2, r3
 8011896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011898:	e00f      	b.n	80118ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801189a:	4b26      	ldr	r3, [pc, #152]	; (8011934 <UART_SetConfig+0xac4>)
 801189c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801189e:	e00c      	b.n	80118ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118a0:	4b25      	ldr	r3, [pc, #148]	; (8011938 <UART_SetConfig+0xac8>)
 80118a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118a4:	e009      	b.n	80118ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ac:	e005      	b.n	80118ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80118ae:	2300      	movs	r3, #0
 80118b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118b2:	2301      	movs	r3, #1
 80118b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118b8:	bf00      	nop
    }

    if (pclk != 0U)
 80118ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d021      	beq.n	8011904 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c4:	4a1d      	ldr	r2, [pc, #116]	; (801193c <UART_SetConfig+0xacc>)
 80118c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118ca:	461a      	mov	r2, r3
 80118cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	085b      	lsrs	r3, r3, #1
 80118d8:	441a      	add	r2, r3
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	fbb2 f3f3 	udiv	r3, r2, r3
 80118e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e6:	2b0f      	cmp	r3, #15
 80118e8:	d909      	bls.n	80118fe <UART_SetConfig+0xa8e>
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118f0:	d205      	bcs.n	80118fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80118f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	60da      	str	r2, [r3, #12]
 80118fc:	e002      	b.n	8011904 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	2201      	movs	r2, #1
 8011908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	2201      	movs	r2, #1
 8011910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	2200      	movs	r2, #0
 8011918:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2200      	movs	r2, #0
 801191e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011920:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011924:	4618      	mov	r0, r3
 8011926:	3748      	adds	r7, #72	; 0x48
 8011928:	46bd      	mov	sp, r7
 801192a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801192e:	bf00      	nop
 8011930:	58024400 	.word	0x58024400
 8011934:	03d09000 	.word	0x03d09000
 8011938:	003d0900 	.word	0x003d0900
 801193c:	08017878 	.word	0x08017878

08011940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801194c:	f003 0308 	and.w	r3, r3, #8
 8011950:	2b00      	cmp	r3, #0
 8011952:	d00a      	beq.n	801196a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	430a      	orrs	r2, r1
 8011968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801196e:	f003 0301 	and.w	r3, r3, #1
 8011972:	2b00      	cmp	r3, #0
 8011974:	d00a      	beq.n	801198c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	430a      	orrs	r2, r1
 801198a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011990:	f003 0302 	and.w	r3, r3, #2
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00a      	beq.n	80119ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	430a      	orrs	r2, r1
 80119ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b2:	f003 0304 	and.w	r3, r3, #4
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00a      	beq.n	80119d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	430a      	orrs	r2, r1
 80119ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d4:	f003 0310 	and.w	r3, r3, #16
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00a      	beq.n	80119f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	689b      	ldr	r3, [r3, #8]
 80119e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	430a      	orrs	r2, r1
 80119f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f6:	f003 0320 	and.w	r3, r3, #32
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00a      	beq.n	8011a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	689b      	ldr	r3, [r3, #8]
 8011a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	430a      	orrs	r2, r1
 8011a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d01a      	beq.n	8011a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	430a      	orrs	r2, r1
 8011a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a3e:	d10a      	bne.n	8011a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	430a      	orrs	r2, r1
 8011a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00a      	beq.n	8011a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	430a      	orrs	r2, r1
 8011a76:	605a      	str	r2, [r3, #4]
  }
}
 8011a78:	bf00      	nop
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b098      	sub	sp, #96	; 0x60
 8011a88:	af02      	add	r7, sp, #8
 8011a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a94:	f7f2 fa74 	bl	8003f80 <HAL_GetTick>
 8011a98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	f003 0308 	and.w	r3, r3, #8
 8011aa4:	2b08      	cmp	r3, #8
 8011aa6:	d12f      	bne.n	8011b08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 f88e 	bl	8011bd8 <UART_WaitOnFlagUntilTimeout>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d022      	beq.n	8011b08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aca:	e853 3f00 	ldrex	r3, [r3]
 8011ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	461a      	mov	r2, r3
 8011ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8011ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ae8:	e841 2300 	strex	r3, r2, [r1]
 8011aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1e6      	bne.n	8011ac2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2220      	movs	r2, #32
 8011af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2200      	movs	r2, #0
 8011b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b04:	2303      	movs	r3, #3
 8011b06:	e063      	b.n	8011bd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f003 0304 	and.w	r3, r3, #4
 8011b12:	2b04      	cmp	r3, #4
 8011b14:	d149      	bne.n	8011baa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 f857 	bl	8011bd8 <UART_WaitOnFlagUntilTimeout>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d03c      	beq.n	8011baa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	e853 3f00 	ldrex	r3, [r3]
 8011b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8011b50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b56:	e841 2300 	strex	r3, r2, [r1]
 8011b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1e6      	bne.n	8011b30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	3308      	adds	r3, #8
 8011b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	e853 3f00 	ldrex	r3, [r3]
 8011b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f023 0301 	bic.w	r3, r3, #1
 8011b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	3308      	adds	r3, #8
 8011b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b82:	61fa      	str	r2, [r7, #28]
 8011b84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b86:	69b9      	ldr	r1, [r7, #24]
 8011b88:	69fa      	ldr	r2, [r7, #28]
 8011b8a:	e841 2300 	strex	r3, r2, [r1]
 8011b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1e5      	bne.n	8011b62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2220      	movs	r2, #32
 8011b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ba6:	2303      	movs	r3, #3
 8011ba8:	e012      	b.n	8011bd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2220      	movs	r2, #32
 8011bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2220      	movs	r2, #32
 8011bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011bce:	2300      	movs	r3, #0
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3758      	adds	r7, #88	; 0x58
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	603b      	str	r3, [r7, #0]
 8011be4:	4613      	mov	r3, r2
 8011be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011be8:	e04f      	b.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bf0:	d04b      	beq.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bf2:	f7f2 f9c5 	bl	8003f80 <HAL_GetTick>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	1ad3      	subs	r3, r2, r3
 8011bfc:	69ba      	ldr	r2, [r7, #24]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d302      	bcc.n	8011c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d101      	bne.n	8011c0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c08:	2303      	movs	r3, #3
 8011c0a:	e04e      	b.n	8011caa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f003 0304 	and.w	r3, r3, #4
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d037      	beq.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	2b80      	cmp	r3, #128	; 0x80
 8011c1e:	d034      	beq.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	2b40      	cmp	r3, #64	; 0x40
 8011c24:	d031      	beq.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	69db      	ldr	r3, [r3, #28]
 8011c2c:	f003 0308 	and.w	r3, r3, #8
 8011c30:	2b08      	cmp	r3, #8
 8011c32:	d110      	bne.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2208      	movs	r2, #8
 8011c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f000 f99d 	bl	8011f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2208      	movs	r2, #8
 8011c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011c52:	2301      	movs	r3, #1
 8011c54:	e029      	b.n	8011caa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c64:	d111      	bne.n	8011c8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 f983 	bl	8011f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2220      	movs	r2, #32
 8011c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	2200      	movs	r2, #0
 8011c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c86:	2303      	movs	r3, #3
 8011c88:	e00f      	b.n	8011caa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	69da      	ldr	r2, [r3, #28]
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	4013      	ands	r3, r2
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	bf0c      	ite	eq
 8011c9a:	2301      	moveq	r3, #1
 8011c9c:	2300      	movne	r3, #0
 8011c9e:	b2db      	uxtb	r3, r3
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	79fb      	ldrb	r3, [r7, #7]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d0a0      	beq.n	8011bea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011ca8:	2300      	movs	r3, #0
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
	...

08011cb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b0a3      	sub	sp, #140	; 0x8c
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	88fa      	ldrh	r2, [r7, #6]
 8011ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	88fa      	ldrh	r2, [r7, #6]
 8011cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	689b      	ldr	r3, [r3, #8]
 8011ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ce6:	d10e      	bne.n	8011d06 <UART_Start_Receive_IT+0x52>
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	691b      	ldr	r3, [r3, #16]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d105      	bne.n	8011cfc <UART_Start_Receive_IT+0x48>
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011cfa:	e02d      	b.n	8011d58 <UART_Start_Receive_IT+0xa4>
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	22ff      	movs	r2, #255	; 0xff
 8011d00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d04:	e028      	b.n	8011d58 <UART_Start_Receive_IT+0xa4>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d10d      	bne.n	8011d2a <UART_Start_Receive_IT+0x76>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	691b      	ldr	r3, [r3, #16]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d104      	bne.n	8011d20 <UART_Start_Receive_IT+0x6c>
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	22ff      	movs	r2, #255	; 0xff
 8011d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d1e:	e01b      	b.n	8011d58 <UART_Start_Receive_IT+0xa4>
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	227f      	movs	r2, #127	; 0x7f
 8011d24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d28:	e016      	b.n	8011d58 <UART_Start_Receive_IT+0xa4>
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	689b      	ldr	r3, [r3, #8]
 8011d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d32:	d10d      	bne.n	8011d50 <UART_Start_Receive_IT+0x9c>
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	691b      	ldr	r3, [r3, #16]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d104      	bne.n	8011d46 <UART_Start_Receive_IT+0x92>
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	227f      	movs	r2, #127	; 0x7f
 8011d40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d44:	e008      	b.n	8011d58 <UART_Start_Receive_IT+0xa4>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	223f      	movs	r2, #63	; 0x3f
 8011d4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d4e:	e003      	b.n	8011d58 <UART_Start_Receive_IT+0xa4>
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2200      	movs	r2, #0
 8011d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2222      	movs	r2, #34	; 0x22
 8011d64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d72:	e853 3f00 	ldrex	r3, [r3]
 8011d76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d7a:	f043 0301 	orr.w	r3, r3, #1
 8011d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	3308      	adds	r3, #8
 8011d88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d8c:	673a      	str	r2, [r7, #112]	; 0x70
 8011d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011d92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d94:	e841 2300 	strex	r3, r2, [r1]
 8011d98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1e3      	bne.n	8011d68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011da8:	d14f      	bne.n	8011e4a <UART_Start_Receive_IT+0x196>
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011db0:	88fa      	ldrh	r2, [r7, #6]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d349      	bcc.n	8011e4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dbe:	d107      	bne.n	8011dd0 <UART_Start_Receive_IT+0x11c>
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d103      	bne.n	8011dd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	4a47      	ldr	r2, [pc, #284]	; (8011ee8 <UART_Start_Receive_IT+0x234>)
 8011dcc:	675a      	str	r2, [r3, #116]	; 0x74
 8011dce:	e002      	b.n	8011dd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	4a46      	ldr	r2, [pc, #280]	; (8011eec <UART_Start_Receive_IT+0x238>)
 8011dd4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d01a      	beq.n	8011e14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011de6:	e853 3f00 	ldrex	r3, [r3]
 8011dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011e06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e08:	e841 2300 	strex	r3, r2, [r1]
 8011e0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1e4      	bne.n	8011dde <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	3308      	adds	r3, #8
 8011e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e1e:	e853 3f00 	ldrex	r3, [r3]
 8011e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	3308      	adds	r3, #8
 8011e32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e34:	64ba      	str	r2, [r7, #72]	; 0x48
 8011e36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e3c:	e841 2300 	strex	r3, r2, [r1]
 8011e40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1e5      	bne.n	8011e14 <UART_Start_Receive_IT+0x160>
 8011e48:	e046      	b.n	8011ed8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	689b      	ldr	r3, [r3, #8]
 8011e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e52:	d107      	bne.n	8011e64 <UART_Start_Receive_IT+0x1b0>
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	691b      	ldr	r3, [r3, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d103      	bne.n	8011e64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	4a24      	ldr	r2, [pc, #144]	; (8011ef0 <UART_Start_Receive_IT+0x23c>)
 8011e60:	675a      	str	r2, [r3, #116]	; 0x74
 8011e62:	e002      	b.n	8011e6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	4a23      	ldr	r2, [pc, #140]	; (8011ef4 <UART_Start_Receive_IT+0x240>)
 8011e68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d019      	beq.n	8011ea6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7a:	e853 3f00 	ldrex	r3, [r3]
 8011e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011e86:	677b      	str	r3, [r7, #116]	; 0x74
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e90:	637b      	str	r3, [r7, #52]	; 0x34
 8011e92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e98:	e841 2300 	strex	r3, r2, [r1]
 8011e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d1e6      	bne.n	8011e72 <UART_Start_Receive_IT+0x1be>
 8011ea4:	e018      	b.n	8011ed8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	e853 3f00 	ldrex	r3, [r3]
 8011eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	f043 0320 	orr.w	r3, r3, #32
 8011eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ec4:	623b      	str	r3, [r7, #32]
 8011ec6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ec8:	69f9      	ldr	r1, [r7, #28]
 8011eca:	6a3a      	ldr	r2, [r7, #32]
 8011ecc:	e841 2300 	strex	r3, r2, [r1]
 8011ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ed2:	69bb      	ldr	r3, [r7, #24]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1e6      	bne.n	8011ea6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011ed8:	2300      	movs	r3, #0
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	378c      	adds	r7, #140	; 0x8c
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop
 8011ee8:	080128cd 	.word	0x080128cd
 8011eec:	0801256d 	.word	0x0801256d
 8011ef0:	080123b5 	.word	0x080123b5
 8011ef4:	080121fd 	.word	0x080121fd

08011ef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b08f      	sub	sp, #60	; 0x3c
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f06:	6a3b      	ldr	r3, [r7, #32]
 8011f08:	e853 3f00 	ldrex	r3, [r3]
 8011f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011f14:	637b      	str	r3, [r7, #52]	; 0x34
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f26:	e841 2300 	strex	r3, r2, [r1]
 8011f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1e6      	bne.n	8011f00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3308      	adds	r3, #8
 8011f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	e853 3f00 	ldrex	r3, [r3]
 8011f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011f48:	633b      	str	r3, [r7, #48]	; 0x30
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	3308      	adds	r3, #8
 8011f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f52:	61ba      	str	r2, [r7, #24]
 8011f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f56:	6979      	ldr	r1, [r7, #20]
 8011f58:	69ba      	ldr	r2, [r7, #24]
 8011f5a:	e841 2300 	strex	r3, r2, [r1]
 8011f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1e5      	bne.n	8011f32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2220      	movs	r2, #32
 8011f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011f6e:	bf00      	nop
 8011f70:	373c      	adds	r7, #60	; 0x3c
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr
	...

08011f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b095      	sub	sp, #84	; 0x54
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8c:	e853 3f00 	ldrex	r3, [r3]
 8011f90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	461a      	mov	r2, r3
 8011fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8011fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011faa:	e841 2300 	strex	r3, r2, [r1]
 8011fae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1e6      	bne.n	8011f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	3308      	adds	r3, #8
 8011fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fbe:	6a3b      	ldr	r3, [r7, #32]
 8011fc0:	e853 3f00 	ldrex	r3, [r3]
 8011fc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fc6:	69fa      	ldr	r2, [r7, #28]
 8011fc8:	4b1e      	ldr	r3, [pc, #120]	; (8012044 <UART_EndRxTransfer+0xc8>)
 8011fca:	4013      	ands	r3, r2
 8011fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3308      	adds	r3, #8
 8011fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fde:	e841 2300 	strex	r3, r2, [r1]
 8011fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1e5      	bne.n	8011fb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d118      	bne.n	8012024 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	e853 3f00 	ldrex	r3, [r3]
 8011ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	f023 0310 	bic.w	r3, r3, #16
 8012006:	647b      	str	r3, [r7, #68]	; 0x44
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	461a      	mov	r2, r3
 801200e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012010:	61bb      	str	r3, [r7, #24]
 8012012:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012014:	6979      	ldr	r1, [r7, #20]
 8012016:	69ba      	ldr	r2, [r7, #24]
 8012018:	e841 2300 	strex	r3, r2, [r1]
 801201c:	613b      	str	r3, [r7, #16]
   return(result);
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d1e6      	bne.n	8011ff2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2220      	movs	r2, #32
 8012028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012038:	bf00      	nop
 801203a:	3754      	adds	r7, #84	; 0x54
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr
 8012044:	effffffe 	.word	0xeffffffe

08012048 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b090      	sub	sp, #64	; 0x40
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012054:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	69db      	ldr	r3, [r3, #28]
 801205a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801205e:	d037      	beq.n	80120d0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012062:	2200      	movs	r2, #0
 8012064:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	3308      	adds	r3, #8
 801206e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012072:	e853 3f00 	ldrex	r3, [r3]
 8012076:	623b      	str	r3, [r7, #32]
   return(result);
 8012078:	6a3b      	ldr	r3, [r7, #32]
 801207a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801207e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3308      	adds	r3, #8
 8012086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012088:	633a      	str	r2, [r7, #48]	; 0x30
 801208a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801208e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012090:	e841 2300 	strex	r3, r2, [r1]
 8012094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1e5      	bne.n	8012068 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801209c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	e853 3f00 	ldrex	r3, [r3]
 80120a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120b0:	637b      	str	r3, [r7, #52]	; 0x34
 80120b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	461a      	mov	r2, r3
 80120b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ba:	61fb      	str	r3, [r7, #28]
 80120bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120be:	69b9      	ldr	r1, [r7, #24]
 80120c0:	69fa      	ldr	r2, [r7, #28]
 80120c2:	e841 2300 	strex	r3, r2, [r1]
 80120c6:	617b      	str	r3, [r7, #20]
   return(result);
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d1e6      	bne.n	801209c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80120ce:	e002      	b.n	80120d6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80120d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80120d2:	f7f0 f99b 	bl	800240c <HAL_UART_TxCpltCallback>
}
 80120d6:	bf00      	nop
 80120d8:	3740      	adds	r7, #64	; 0x40
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}

080120de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80120de:	b580      	push	{r7, lr}
 80120e0:	b084      	sub	sp, #16
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7fe fe9f 	bl	8010e30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120f2:	bf00      	nop
 80120f4:	3710      	adds	r7, #16
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b086      	sub	sp, #24
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012106:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801210e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012116:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	689b      	ldr	r3, [r3, #8]
 801211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012122:	2b80      	cmp	r3, #128	; 0x80
 8012124:	d109      	bne.n	801213a <UART_DMAError+0x40>
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	2b21      	cmp	r3, #33	; 0x21
 801212a:	d106      	bne.n	801213a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	2200      	movs	r2, #0
 8012130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012134:	6978      	ldr	r0, [r7, #20]
 8012136:	f7ff fedf 	bl	8011ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	689b      	ldr	r3, [r3, #8]
 8012140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012144:	2b40      	cmp	r3, #64	; 0x40
 8012146:	d109      	bne.n	801215c <UART_DMAError+0x62>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2b22      	cmp	r3, #34	; 0x22
 801214c:	d106      	bne.n	801215c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	2200      	movs	r2, #0
 8012152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012156:	6978      	ldr	r0, [r7, #20]
 8012158:	f7ff ff10 	bl	8011f7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012162:	f043 0210 	orr.w	r2, r3, #16
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801216c:	6978      	ldr	r0, [r7, #20]
 801216e:	f7fe fe69 	bl	8010e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012172:	bf00      	nop
 8012174:	3718      	adds	r7, #24
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801217a:	b580      	push	{r7, lr}
 801217c:	b084      	sub	sp, #16
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2200      	movs	r2, #0
 801218c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2200      	movs	r2, #0
 8012194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f7fe fe53 	bl	8010e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801219e:	bf00      	nop
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b088      	sub	sp, #32
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	e853 3f00 	ldrex	r3, [r3]
 80121ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121c2:	61fb      	str	r3, [r7, #28]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	461a      	mov	r2, r3
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	61bb      	str	r3, [r7, #24]
 80121ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d0:	6979      	ldr	r1, [r7, #20]
 80121d2:	69ba      	ldr	r2, [r7, #24]
 80121d4:	e841 2300 	strex	r3, r2, [r1]
 80121d8:	613b      	str	r3, [r7, #16]
   return(result);
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1e6      	bne.n	80121ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2220      	movs	r2, #32
 80121e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2200      	movs	r2, #0
 80121ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7f0 f90c 	bl	800240c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121f4:	bf00      	nop
 80121f6:	3720      	adds	r7, #32
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b09c      	sub	sp, #112	; 0x70
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801220a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012214:	2b22      	cmp	r3, #34	; 0x22
 8012216:	f040 80be 	bne.w	8012396 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012220:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012228:	b2d9      	uxtb	r1, r3
 801222a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801222e:	b2da      	uxtb	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012234:	400a      	ands	r2, r1
 8012236:	b2d2      	uxtb	r2, r2
 8012238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801223e:	1c5a      	adds	r2, r3, #1
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801224a:	b29b      	uxth	r3, r3
 801224c:	3b01      	subs	r3, #1
 801224e:	b29a      	uxth	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801225c:	b29b      	uxth	r3, r3
 801225e:	2b00      	cmp	r3, #0
 8012260:	f040 80a1 	bne.w	80123a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801226a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226c:	e853 3f00 	ldrex	r3, [r3]
 8012270:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012278:	66bb      	str	r3, [r7, #104]	; 0x68
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	461a      	mov	r2, r3
 8012280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012282:	65bb      	str	r3, [r7, #88]	; 0x58
 8012284:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801228a:	e841 2300 	strex	r3, r2, [r1]
 801228e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1e6      	bne.n	8012264 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	3308      	adds	r3, #8
 801229c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a0:	e853 3f00 	ldrex	r3, [r3]
 80122a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80122a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a8:	f023 0301 	bic.w	r3, r3, #1
 80122ac:	667b      	str	r3, [r7, #100]	; 0x64
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	3308      	adds	r3, #8
 80122b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80122b6:	647a      	str	r2, [r7, #68]	; 0x44
 80122b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80122bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122be:	e841 2300 	strex	r3, r2, [r1]
 80122c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80122c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d1e5      	bne.n	8012296 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2220      	movs	r2, #32
 80122ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	4a33      	ldr	r2, [pc, #204]	; (80123b0 <UART_RxISR_8BIT+0x1b4>)
 80122e4:	4293      	cmp	r3, r2
 80122e6:	d01f      	beq.n	8012328 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d018      	beq.n	8012328 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fe:	e853 3f00 	ldrex	r3, [r3]
 8012302:	623b      	str	r3, [r7, #32]
   return(result);
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801230a:	663b      	str	r3, [r7, #96]	; 0x60
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	461a      	mov	r2, r3
 8012312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012314:	633b      	str	r3, [r7, #48]	; 0x30
 8012316:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801231c:	e841 2300 	strex	r3, r2, [r1]
 8012320:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012324:	2b00      	cmp	r3, #0
 8012326:	d1e6      	bne.n	80122f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801232c:	2b01      	cmp	r3, #1
 801232e:	d12e      	bne.n	801238e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	e853 3f00 	ldrex	r3, [r3]
 8012342:	60fb      	str	r3, [r7, #12]
   return(result);
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	f023 0310 	bic.w	r3, r3, #16
 801234a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	461a      	mov	r2, r3
 8012352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012354:	61fb      	str	r3, [r7, #28]
 8012356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012358:	69b9      	ldr	r1, [r7, #24]
 801235a:	69fa      	ldr	r2, [r7, #28]
 801235c:	e841 2300 	strex	r3, r2, [r1]
 8012360:	617b      	str	r3, [r7, #20]
   return(result);
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1e6      	bne.n	8012336 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	69db      	ldr	r3, [r3, #28]
 801236e:	f003 0310 	and.w	r3, r3, #16
 8012372:	2b10      	cmp	r3, #16
 8012374:	d103      	bne.n	801237e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	2210      	movs	r2, #16
 801237c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012384:	4619      	mov	r1, r3
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7fe fd66 	bl	8010e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801238c:	e00b      	b.n	80123a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7ee f97a 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8012394:	e007      	b.n	80123a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	699a      	ldr	r2, [r3, #24]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f042 0208 	orr.w	r2, r2, #8
 80123a4:	619a      	str	r2, [r3, #24]
}
 80123a6:	bf00      	nop
 80123a8:	3770      	adds	r7, #112	; 0x70
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
 80123ae:	bf00      	nop
 80123b0:	58000c00 	.word	0x58000c00

080123b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b09c      	sub	sp, #112	; 0x70
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123cc:	2b22      	cmp	r3, #34	; 0x22
 80123ce:	f040 80be 	bne.w	801254e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123e0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80123e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80123e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80123ea:	4013      	ands	r3, r2
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123f6:	1c9a      	adds	r2, r3, #2
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012402:	b29b      	uxth	r3, r3
 8012404:	3b01      	subs	r3, #1
 8012406:	b29a      	uxth	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012414:	b29b      	uxth	r3, r3
 8012416:	2b00      	cmp	r3, #0
 8012418:	f040 80a1 	bne.w	801255e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012424:	e853 3f00 	ldrex	r3, [r3]
 8012428:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801242a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801242c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012430:	667b      	str	r3, [r7, #100]	; 0x64
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	461a      	mov	r2, r3
 8012438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801243a:	657b      	str	r3, [r7, #84]	; 0x54
 801243c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012442:	e841 2300 	strex	r3, r2, [r1]
 8012446:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801244a:	2b00      	cmp	r3, #0
 801244c:	d1e6      	bne.n	801241c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	3308      	adds	r3, #8
 8012454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012458:	e853 3f00 	ldrex	r3, [r3]
 801245c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012460:	f023 0301 	bic.w	r3, r3, #1
 8012464:	663b      	str	r3, [r7, #96]	; 0x60
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	3308      	adds	r3, #8
 801246c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801246e:	643a      	str	r2, [r7, #64]	; 0x40
 8012470:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012472:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012476:	e841 2300 	strex	r3, r2, [r1]
 801247a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247e:	2b00      	cmp	r3, #0
 8012480:	d1e5      	bne.n	801244e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2220      	movs	r2, #32
 8012486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2200      	movs	r2, #0
 801248e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2200      	movs	r2, #0
 8012494:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	4a33      	ldr	r2, [pc, #204]	; (8012568 <UART_RxISR_16BIT+0x1b4>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d01f      	beq.n	80124e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d018      	beq.n	80124e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124b4:	6a3b      	ldr	r3, [r7, #32]
 80124b6:	e853 3f00 	ldrex	r3, [r3]
 80124ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80124c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	461a      	mov	r2, r3
 80124ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124d4:	e841 2300 	strex	r3, r2, [r1]
 80124d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80124da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d1e6      	bne.n	80124ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d12e      	bne.n	8012546 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2200      	movs	r2, #0
 80124ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	e853 3f00 	ldrex	r3, [r3]
 80124fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	f023 0310 	bic.w	r3, r3, #16
 8012502:	65bb      	str	r3, [r7, #88]	; 0x58
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	461a      	mov	r2, r3
 801250a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801250c:	61bb      	str	r3, [r7, #24]
 801250e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012510:	6979      	ldr	r1, [r7, #20]
 8012512:	69ba      	ldr	r2, [r7, #24]
 8012514:	e841 2300 	strex	r3, r2, [r1]
 8012518:	613b      	str	r3, [r7, #16]
   return(result);
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d1e6      	bne.n	80124ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	69db      	ldr	r3, [r3, #28]
 8012526:	f003 0310 	and.w	r3, r3, #16
 801252a:	2b10      	cmp	r3, #16
 801252c:	d103      	bne.n	8012536 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2210      	movs	r2, #16
 8012534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801253c:	4619      	mov	r1, r3
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7fe fc8a 	bl	8010e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012544:	e00b      	b.n	801255e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7ee f89e 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801254c:	e007      	b.n	801255e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	699a      	ldr	r2, [r3, #24]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f042 0208 	orr.w	r2, r2, #8
 801255c:	619a      	str	r2, [r3, #24]
}
 801255e:	bf00      	nop
 8012560:	3770      	adds	r7, #112	; 0x70
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	58000c00 	.word	0x58000c00

0801256c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b0ac      	sub	sp, #176	; 0xb0
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801257a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	69db      	ldr	r3, [r3, #28]
 8012584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125a2:	2b22      	cmp	r3, #34	; 0x22
 80125a4:	f040 8180 	bne.w	80128a8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80125ae:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80125b2:	e123      	b.n	80127fc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ba:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80125be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80125c2:	b2d9      	uxtb	r1, r3
 80125c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125ce:	400a      	ands	r2, r1
 80125d0:	b2d2      	uxtb	r2, r2
 80125d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125d8:	1c5a      	adds	r2, r3, #1
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	3b01      	subs	r3, #1
 80125e8:	b29a      	uxth	r2, r3
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	69db      	ldr	r3, [r3, #28]
 80125f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80125fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80125fe:	f003 0307 	and.w	r3, r3, #7
 8012602:	2b00      	cmp	r3, #0
 8012604:	d053      	beq.n	80126ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801260a:	f003 0301 	and.w	r3, r3, #1
 801260e:	2b00      	cmp	r3, #0
 8012610:	d011      	beq.n	8012636 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00b      	beq.n	8012636 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2201      	movs	r2, #1
 8012624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801262c:	f043 0201 	orr.w	r2, r3, #1
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801263a:	f003 0302 	and.w	r3, r3, #2
 801263e:	2b00      	cmp	r3, #0
 8012640:	d011      	beq.n	8012666 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012646:	f003 0301 	and.w	r3, r3, #1
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00b      	beq.n	8012666 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2202      	movs	r2, #2
 8012654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801265c:	f043 0204 	orr.w	r2, r3, #4
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801266a:	f003 0304 	and.w	r3, r3, #4
 801266e:	2b00      	cmp	r3, #0
 8012670:	d011      	beq.n	8012696 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00b      	beq.n	8012696 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2204      	movs	r2, #4
 8012684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801268c:	f043 0202 	orr.w	r2, r3, #2
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801269c:	2b00      	cmp	r3, #0
 801269e:	d006      	beq.n	80126ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7fe fbcf 	bl	8010e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2200      	movs	r2, #0
 80126aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f040 80a0 	bne.w	80127fc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80126c4:	e853 3f00 	ldrex	r3, [r3]
 80126c8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80126ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80126d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	461a      	mov	r2, r3
 80126da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80126de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80126e0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126e2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80126e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80126e6:	e841 2300 	strex	r3, r2, [r1]
 80126ea:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80126ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1e4      	bne.n	80126bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	3308      	adds	r3, #8
 80126f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80126fc:	e853 3f00 	ldrex	r3, [r3]
 8012700:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012704:	4b6e      	ldr	r3, [pc, #440]	; (80128c0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012706:	4013      	ands	r3, r2
 8012708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	3308      	adds	r3, #8
 8012712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012716:	66ba      	str	r2, [r7, #104]	; 0x68
 8012718:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801271a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801271c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801271e:	e841 2300 	strex	r3, r2, [r1]
 8012722:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1e3      	bne.n	80126f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2220      	movs	r2, #32
 801272e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2200      	movs	r2, #0
 8012736:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	4a60      	ldr	r2, [pc, #384]	; (80128c4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012744:	4293      	cmp	r3, r2
 8012746:	d021      	beq.n	801278c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012752:	2b00      	cmp	r3, #0
 8012754:	d01a      	beq.n	801278c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801275e:	e853 3f00 	ldrex	r3, [r3]
 8012762:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801276a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012778:	657b      	str	r3, [r7, #84]	; 0x54
 801277a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801277c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801277e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012780:	e841 2300 	strex	r3, r2, [r1]
 8012784:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1e4      	bne.n	8012756 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012790:	2b01      	cmp	r3, #1
 8012792:	d130      	bne.n	80127f6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2200      	movs	r2, #0
 8012798:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127a2:	e853 3f00 	ldrex	r3, [r3]
 80127a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80127a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127aa:	f023 0310 	bic.w	r3, r3, #16
 80127ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	461a      	mov	r2, r3
 80127b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80127bc:	643b      	str	r3, [r7, #64]	; 0x40
 80127be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80127c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127c4:	e841 2300 	strex	r3, r2, [r1]
 80127c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80127ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1e4      	bne.n	801279a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	69db      	ldr	r3, [r3, #28]
 80127d6:	f003 0310 	and.w	r3, r3, #16
 80127da:	2b10      	cmp	r3, #16
 80127dc:	d103      	bne.n	80127e6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2210      	movs	r2, #16
 80127e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127ec:	4619      	mov	r1, r3
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f7fe fb32 	bl	8010e58 <HAL_UARTEx_RxEventCallback>
 80127f4:	e002      	b.n	80127fc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7ed ff46 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012800:	2b00      	cmp	r3, #0
 8012802:	d006      	beq.n	8012812 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012808:	f003 0320 	and.w	r3, r3, #32
 801280c:	2b00      	cmp	r3, #0
 801280e:	f47f aed1 	bne.w	80125b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012818:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801281c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012820:	2b00      	cmp	r3, #0
 8012822:	d049      	beq.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801282a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801282e:	429a      	cmp	r2, r3
 8012830:	d242      	bcs.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	3308      	adds	r3, #8
 8012838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	e853 3f00 	ldrex	r3, [r3]
 8012840:	61fb      	str	r3, [r7, #28]
   return(result);
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	3308      	adds	r3, #8
 8012852:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801285a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801285c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801285e:	e841 2300 	strex	r3, r2, [r1]
 8012862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1e3      	bne.n	8012832 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4a16      	ldr	r2, [pc, #88]	; (80128c8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801286e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	e853 3f00 	ldrex	r3, [r3]
 801287c:	60bb      	str	r3, [r7, #8]
   return(result);
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	f043 0320 	orr.w	r3, r3, #32
 8012884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	461a      	mov	r2, r3
 801288e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012892:	61bb      	str	r3, [r7, #24]
 8012894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012896:	6979      	ldr	r1, [r7, #20]
 8012898:	69ba      	ldr	r2, [r7, #24]
 801289a:	e841 2300 	strex	r3, r2, [r1]
 801289e:	613b      	str	r3, [r7, #16]
   return(result);
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d1e4      	bne.n	8012870 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80128a6:	e007      	b.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	699a      	ldr	r2, [r3, #24]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	f042 0208 	orr.w	r2, r2, #8
 80128b6:	619a      	str	r2, [r3, #24]
}
 80128b8:	bf00      	nop
 80128ba:	37b0      	adds	r7, #176	; 0xb0
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	effffffe 	.word	0xeffffffe
 80128c4:	58000c00 	.word	0x58000c00
 80128c8:	080121fd 	.word	0x080121fd

080128cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b0ae      	sub	sp, #184	; 0xb8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128da:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	69db      	ldr	r3, [r3, #28]
 80128e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012902:	2b22      	cmp	r3, #34	; 0x22
 8012904:	f040 8184 	bne.w	8012c10 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801290e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012912:	e127      	b.n	8012b64 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012926:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801292a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801292e:	4013      	ands	r3, r2
 8012930:	b29a      	uxth	r2, r3
 8012932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012936:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801293c:	1c9a      	adds	r2, r3, #2
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012948:	b29b      	uxth	r3, r3
 801294a:	3b01      	subs	r3, #1
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	69db      	ldr	r3, [r3, #28]
 801295a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801295e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012962:	f003 0307 	and.w	r3, r3, #7
 8012966:	2b00      	cmp	r3, #0
 8012968:	d053      	beq.n	8012a12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801296a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801296e:	f003 0301 	and.w	r3, r3, #1
 8012972:	2b00      	cmp	r3, #0
 8012974:	d011      	beq.n	801299a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801297e:	2b00      	cmp	r3, #0
 8012980:	d00b      	beq.n	801299a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2201      	movs	r2, #1
 8012988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012990:	f043 0201 	orr.w	r2, r3, #1
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801299a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801299e:	f003 0302 	and.w	r3, r3, #2
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d011      	beq.n	80129ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80129a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00b      	beq.n	80129ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	2202      	movs	r2, #2
 80129b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129c0:	f043 0204 	orr.w	r2, r3, #4
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129ce:	f003 0304 	and.w	r3, r3, #4
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d011      	beq.n	80129fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80129d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80129da:	f003 0301 	and.w	r3, r3, #1
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d00b      	beq.n	80129fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	2204      	movs	r2, #4
 80129e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129f0:	f043 0202 	orr.w	r2, r3, #2
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d006      	beq.n	8012a12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7fe fa1d 	bl	8010e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f040 80a2 	bne.w	8012b64 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a28:	e853 3f00 	ldrex	r3, [r3]
 8012a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a46:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a4e:	e841 2300 	strex	r3, r2, [r1]
 8012a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1e2      	bne.n	8012a20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	3308      	adds	r3, #8
 8012a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a64:	e853 3f00 	ldrex	r3, [r3]
 8012a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012a6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012a6c:	4b6e      	ldr	r3, [pc, #440]	; (8012c28 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012a6e:	4013      	ands	r3, r2
 8012a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	3308      	adds	r3, #8
 8012a7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a86:	e841 2300 	strex	r3, r2, [r1]
 8012a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1e3      	bne.n	8012a5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2220      	movs	r2, #32
 8012a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4a60      	ldr	r2, [pc, #384]	; (8012c2c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d021      	beq.n	8012af4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d01a      	beq.n	8012af4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ac6:	e853 3f00 	ldrex	r3, [r3]
 8012aca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ace:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	461a      	mov	r2, r3
 8012adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ae0:	65bb      	str	r3, [r7, #88]	; 0x58
 8012ae2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ae8:	e841 2300 	strex	r3, r2, [r1]
 8012aec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d1e4      	bne.n	8012abe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d130      	bne.n	8012b5e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	e853 3f00 	ldrex	r3, [r3]
 8012b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b12:	f023 0310 	bic.w	r3, r3, #16
 8012b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	461a      	mov	r2, r3
 8012b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012b24:	647b      	str	r3, [r7, #68]	; 0x44
 8012b26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b2c:	e841 2300 	strex	r3, r2, [r1]
 8012b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1e4      	bne.n	8012b02 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	69db      	ldr	r3, [r3, #28]
 8012b3e:	f003 0310 	and.w	r3, r3, #16
 8012b42:	2b10      	cmp	r3, #16
 8012b44:	d103      	bne.n	8012b4e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2210      	movs	r2, #16
 8012b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b54:	4619      	mov	r1, r3
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f7fe f97e 	bl	8010e58 <HAL_UARTEx_RxEventCallback>
 8012b5c:	e002      	b.n	8012b64 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f7ed fd92 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012b64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d006      	beq.n	8012b7a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012b6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012b70:	f003 0320 	and.w	r3, r3, #32
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	f47f aecd 	bne.w	8012914 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012b84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d049      	beq.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d242      	bcs.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	3308      	adds	r3, #8
 8012ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	e853 3f00 	ldrex	r3, [r3]
 8012ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8012baa:	6a3b      	ldr	r3, [r7, #32]
 8012bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	3308      	adds	r3, #8
 8012bba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8012bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bc6:	e841 2300 	strex	r3, r2, [r1]
 8012bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1e3      	bne.n	8012b9a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	4a16      	ldr	r2, [pc, #88]	; (8012c30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012bd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	e853 3f00 	ldrex	r3, [r3]
 8012be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	f043 0320 	orr.w	r3, r3, #32
 8012bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012bfa:	61fb      	str	r3, [r7, #28]
 8012bfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bfe:	69b9      	ldr	r1, [r7, #24]
 8012c00:	69fa      	ldr	r2, [r7, #28]
 8012c02:	e841 2300 	strex	r3, r2, [r1]
 8012c06:	617b      	str	r3, [r7, #20]
   return(result);
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d1e4      	bne.n	8012bd8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c0e:	e007      	b.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	699a      	ldr	r2, [r3, #24]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f042 0208 	orr.w	r2, r2, #8
 8012c1e:	619a      	str	r2, [r3, #24]
}
 8012c20:	bf00      	nop
 8012c22:	37b8      	adds	r7, #184	; 0xb8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	effffffe 	.word	0xeffffffe
 8012c2c:	58000c00 	.word	0x58000c00
 8012c30:	080123b5 	.word	0x080123b5

08012c34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012c3c:	bf00      	nop
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012c50:	bf00      	nop
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012c64:	bf00      	nop
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b089      	sub	sp, #36	; 0x24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d101      	bne.n	8012c86 <HAL_UARTEx_EnableStopMode+0x16>
 8012c82:	2302      	movs	r3, #2
 8012c84:	e021      	b.n	8012cca <HAL_UARTEx_EnableStopMode+0x5a>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2201      	movs	r2, #1
 8012c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	e853 3f00 	ldrex	r3, [r3]
 8012c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	f043 0302 	orr.w	r3, r3, #2
 8012ca2:	61fb      	str	r3, [r7, #28]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	461a      	mov	r2, r3
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	61bb      	str	r3, [r7, #24]
 8012cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cb0:	6979      	ldr	r1, [r7, #20]
 8012cb2:	69ba      	ldr	r2, [r7, #24]
 8012cb4:	e841 2300 	strex	r3, r2, [r1]
 8012cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d1e6      	bne.n	8012c8e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012cc8:	2300      	movs	r3, #0
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3724      	adds	r7, #36	; 0x24
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd4:	4770      	bx	lr

08012cd6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b084      	sub	sp, #16
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	d101      	bne.n	8012cec <HAL_UARTEx_EnableFifoMode+0x16>
 8012ce8:	2302      	movs	r3, #2
 8012cea:	e02b      	b.n	8012d44 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2224      	movs	r2, #36	; 0x24
 8012cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f022 0201 	bic.w	r2, r2, #1
 8012d12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012d1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012d22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	68fa      	ldr	r2, [r7, #12]
 8012d2a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f000 f8c3 	bl	8012eb8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2220      	movs	r2, #32
 8012d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d42:	2300      	movs	r3, #0
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	3710      	adds	r7, #16
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}

08012d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b085      	sub	sp, #20
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d101      	bne.n	8012d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8012d5e:	2302      	movs	r3, #2
 8012d60:	e027      	b.n	8012db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2201      	movs	r2, #1
 8012d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2224      	movs	r2, #36	; 0x24
 8012d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	f022 0201 	bic.w	r2, r2, #1
 8012d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2200      	movs	r2, #0
 8012d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2220      	movs	r2, #32
 8012da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012db0:	2300      	movs	r3, #0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3714      	adds	r7, #20
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr

08012dbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b084      	sub	sp, #16
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d101      	bne.n	8012dd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	e02d      	b.n	8012e32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2201      	movs	r2, #1
 8012dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2224      	movs	r2, #36	; 0x24
 8012de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f022 0201 	bic.w	r2, r2, #1
 8012dfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	683a      	ldr	r2, [r7, #0]
 8012e0e:	430a      	orrs	r2, r1
 8012e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f000 f850 	bl	8012eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	68fa      	ldr	r2, [r7, #12]
 8012e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2220      	movs	r2, #32
 8012e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b084      	sub	sp, #16
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d101      	bne.n	8012e52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012e4e:	2302      	movs	r3, #2
 8012e50:	e02d      	b.n	8012eae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2201      	movs	r2, #1
 8012e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2224      	movs	r2, #36	; 0x24
 8012e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	681a      	ldr	r2, [r3, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f022 0201 	bic.w	r2, r2, #1
 8012e78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	683a      	ldr	r2, [r7, #0]
 8012e8a:	430a      	orrs	r2, r1
 8012e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 f812 	bl	8012eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2220      	movs	r2, #32
 8012ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012eac:	2300      	movs	r3, #0
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
	...

08012eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b085      	sub	sp, #20
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d108      	bne.n	8012eda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2201      	movs	r2, #1
 8012ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ed8:	e031      	b.n	8012f3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012eda:	2310      	movs	r3, #16
 8012edc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ede:	2310      	movs	r3, #16
 8012ee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	0e5b      	lsrs	r3, r3, #25
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	f003 0307 	and.w	r3, r3, #7
 8012ef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	0f5b      	lsrs	r3, r3, #29
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	f003 0307 	and.w	r3, r3, #7
 8012f00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012f02:	7bbb      	ldrb	r3, [r7, #14]
 8012f04:	7b3a      	ldrb	r2, [r7, #12]
 8012f06:	4911      	ldr	r1, [pc, #68]	; (8012f4c <UARTEx_SetNbDataToProcess+0x94>)
 8012f08:	5c8a      	ldrb	r2, [r1, r2]
 8012f0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012f0e:	7b3a      	ldrb	r2, [r7, #12]
 8012f10:	490f      	ldr	r1, [pc, #60]	; (8012f50 <UARTEx_SetNbDataToProcess+0x98>)
 8012f12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f20:	7bfb      	ldrb	r3, [r7, #15]
 8012f22:	7b7a      	ldrb	r2, [r7, #13]
 8012f24:	4909      	ldr	r1, [pc, #36]	; (8012f4c <UARTEx_SetNbDataToProcess+0x94>)
 8012f26:	5c8a      	ldrb	r2, [r1, r2]
 8012f28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012f2c:	7b7a      	ldrb	r2, [r7, #13]
 8012f2e:	4908      	ldr	r1, [pc, #32]	; (8012f50 <UARTEx_SetNbDataToProcess+0x98>)
 8012f30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012f3e:	bf00      	nop
 8012f40:	3714      	adds	r7, #20
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	08017890 	.word	0x08017890
 8012f50:	08017898 	.word	0x08017898

08012f54 <__NVIC_SetPriority>:
 8012f54:	b480      	push	{r7}
 8012f56:	b083      	sub	sp, #12
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	6039      	str	r1, [r7, #0]
 8012f5e:	80fb      	strh	r3, [r7, #6]
 8012f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	db0a      	blt.n	8012f7e <__NVIC_SetPriority+0x2a>
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	b2da      	uxtb	r2, r3
 8012f6c:	490c      	ldr	r1, [pc, #48]	; (8012fa0 <__NVIC_SetPriority+0x4c>)
 8012f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f72:	0112      	lsls	r2, r2, #4
 8012f74:	b2d2      	uxtb	r2, r2
 8012f76:	440b      	add	r3, r1
 8012f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8012f7c:	e00a      	b.n	8012f94 <__NVIC_SetPriority+0x40>
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	b2da      	uxtb	r2, r3
 8012f82:	4908      	ldr	r1, [pc, #32]	; (8012fa4 <__NVIC_SetPriority+0x50>)
 8012f84:	88fb      	ldrh	r3, [r7, #6]
 8012f86:	f003 030f 	and.w	r3, r3, #15
 8012f8a:	3b04      	subs	r3, #4
 8012f8c:	0112      	lsls	r2, r2, #4
 8012f8e:	b2d2      	uxtb	r2, r2
 8012f90:	440b      	add	r3, r1
 8012f92:	761a      	strb	r2, [r3, #24]
 8012f94:	bf00      	nop
 8012f96:	370c      	adds	r7, #12
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr
 8012fa0:	e000e100 	.word	0xe000e100
 8012fa4:	e000ed00 	.word	0xe000ed00

08012fa8 <SysTick_Handler>:
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	4b05      	ldr	r3, [pc, #20]	; (8012fc4 <SysTick_Handler+0x1c>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f002 fc92 	bl	80158d8 <xTaskGetSchedulerState>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d001      	beq.n	8012fbe <SysTick_Handler+0x16>
 8012fba:	f003 fab5 	bl	8016528 <xPortSysTickHandler>
 8012fbe:	bf00      	nop
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	e000e010 	.word	0xe000e010

08012fc8 <SVC_Setup>:
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	2100      	movs	r1, #0
 8012fce:	f06f 0004 	mvn.w	r0, #4
 8012fd2:	f7ff ffbf 	bl	8012f54 <__NVIC_SetPriority>
 8012fd6:	bf00      	nop
 8012fd8:	bd80      	pop	{r7, pc}
	...

08012fdc <osKernelInitialize>:
 8012fdc:	b480      	push	{r7}
 8012fde:	b083      	sub	sp, #12
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	f3ef 8305 	mrs	r3, IPSR
 8012fe6:	603b      	str	r3, [r7, #0]
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d003      	beq.n	8012ff6 <osKernelInitialize+0x1a>
 8012fee:	f06f 0305 	mvn.w	r3, #5
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	e00c      	b.n	8013010 <osKernelInitialize+0x34>
 8012ff6:	4b0a      	ldr	r3, [pc, #40]	; (8013020 <osKernelInitialize+0x44>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d105      	bne.n	801300a <osKernelInitialize+0x2e>
 8012ffe:	4b08      	ldr	r3, [pc, #32]	; (8013020 <osKernelInitialize+0x44>)
 8013000:	2201      	movs	r2, #1
 8013002:	601a      	str	r2, [r3, #0]
 8013004:	2300      	movs	r3, #0
 8013006:	607b      	str	r3, [r7, #4]
 8013008:	e002      	b.n	8013010 <osKernelInitialize+0x34>
 801300a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801300e:	607b      	str	r3, [r7, #4]
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	4618      	mov	r0, r3
 8013014:	370c      	adds	r7, #12
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr
 801301e:	bf00      	nop
 8013020:	24001130 	.word	0x24001130

08013024 <osKernelStart>:
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	f3ef 8305 	mrs	r3, IPSR
 801302e:	603b      	str	r3, [r7, #0]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d003      	beq.n	801303e <osKernelStart+0x1a>
 8013036:	f06f 0305 	mvn.w	r3, #5
 801303a:	607b      	str	r3, [r7, #4]
 801303c:	e010      	b.n	8013060 <osKernelStart+0x3c>
 801303e:	4b0b      	ldr	r3, [pc, #44]	; (801306c <osKernelStart+0x48>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b01      	cmp	r3, #1
 8013044:	d109      	bne.n	801305a <osKernelStart+0x36>
 8013046:	f7ff ffbf 	bl	8012fc8 <SVC_Setup>
 801304a:	4b08      	ldr	r3, [pc, #32]	; (801306c <osKernelStart+0x48>)
 801304c:	2202      	movs	r2, #2
 801304e:	601a      	str	r2, [r3, #0]
 8013050:	f001 ff54 	bl	8014efc <vTaskStartScheduler>
 8013054:	2300      	movs	r3, #0
 8013056:	607b      	str	r3, [r7, #4]
 8013058:	e002      	b.n	8013060 <osKernelStart+0x3c>
 801305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801305e:	607b      	str	r3, [r7, #4]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	24001130 	.word	0x24001130

08013070 <osThreadNew>:
 8013070:	b580      	push	{r7, lr}
 8013072:	b08e      	sub	sp, #56	; 0x38
 8013074:	af04      	add	r7, sp, #16
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
 801307c:	2300      	movs	r3, #0
 801307e:	613b      	str	r3, [r7, #16]
 8013080:	f3ef 8305 	mrs	r3, IPSR
 8013084:	617b      	str	r3, [r7, #20]
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d17e      	bne.n	801318a <osThreadNew+0x11a>
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d07b      	beq.n	801318a <osThreadNew+0x11a>
 8013092:	2380      	movs	r3, #128	; 0x80
 8013094:	623b      	str	r3, [r7, #32]
 8013096:	2318      	movs	r3, #24
 8013098:	61fb      	str	r3, [r7, #28]
 801309a:	2300      	movs	r3, #0
 801309c:	627b      	str	r3, [r7, #36]	; 0x24
 801309e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130a2:	61bb      	str	r3, [r7, #24]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d045      	beq.n	8013136 <osThreadNew+0xc6>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d002      	beq.n	80130b8 <osThreadNew+0x48>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	627b      	str	r3, [r7, #36]	; 0x24
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	699b      	ldr	r3, [r3, #24]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d002      	beq.n	80130c6 <osThreadNew+0x56>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	699b      	ldr	r3, [r3, #24]
 80130c4:	61fb      	str	r3, [r7, #28]
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d008      	beq.n	80130de <osThreadNew+0x6e>
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	2b38      	cmp	r3, #56	; 0x38
 80130d0:	d805      	bhi.n	80130de <osThreadNew+0x6e>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	f003 0301 	and.w	r3, r3, #1
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d001      	beq.n	80130e2 <osThreadNew+0x72>
 80130de:	2300      	movs	r3, #0
 80130e0:	e054      	b.n	801318c <osThreadNew+0x11c>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	695b      	ldr	r3, [r3, #20]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d003      	beq.n	80130f2 <osThreadNew+0x82>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	695b      	ldr	r3, [r3, #20]
 80130ee:	089b      	lsrs	r3, r3, #2
 80130f0:	623b      	str	r3, [r7, #32]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	689b      	ldr	r3, [r3, #8]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00e      	beq.n	8013118 <osThreadNew+0xa8>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	2b5b      	cmp	r3, #91	; 0x5b
 8013100:	d90a      	bls.n	8013118 <osThreadNew+0xa8>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d006      	beq.n	8013118 <osThreadNew+0xa8>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	695b      	ldr	r3, [r3, #20]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d002      	beq.n	8013118 <osThreadNew+0xa8>
 8013112:	2301      	movs	r3, #1
 8013114:	61bb      	str	r3, [r7, #24]
 8013116:	e010      	b.n	801313a <osThreadNew+0xca>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10c      	bne.n	801313a <osThreadNew+0xca>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d108      	bne.n	801313a <osThreadNew+0xca>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	691b      	ldr	r3, [r3, #16]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d104      	bne.n	801313a <osThreadNew+0xca>
 8013130:	2300      	movs	r3, #0
 8013132:	61bb      	str	r3, [r7, #24]
 8013134:	e001      	b.n	801313a <osThreadNew+0xca>
 8013136:	2300      	movs	r3, #0
 8013138:	61bb      	str	r3, [r7, #24]
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d110      	bne.n	8013162 <osThreadNew+0xf2>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	691b      	ldr	r3, [r3, #16]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	6892      	ldr	r2, [r2, #8]
 8013148:	9202      	str	r2, [sp, #8]
 801314a:	9301      	str	r3, [sp, #4]
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	6a3a      	ldr	r2, [r7, #32]
 8013154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013156:	68f8      	ldr	r0, [r7, #12]
 8013158:	f001 fbe0 	bl	801491c <xTaskCreateStatic>
 801315c:	4603      	mov	r3, r0
 801315e:	613b      	str	r3, [r7, #16]
 8013160:	e013      	b.n	801318a <osThreadNew+0x11a>
 8013162:	69bb      	ldr	r3, [r7, #24]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d110      	bne.n	801318a <osThreadNew+0x11a>
 8013168:	6a3b      	ldr	r3, [r7, #32]
 801316a:	b29a      	uxth	r2, r3
 801316c:	f107 0310 	add.w	r3, r7, #16
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	9300      	str	r3, [sp, #0]
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801317a:	68f8      	ldr	r0, [r7, #12]
 801317c:	f001 fc2b 	bl	80149d6 <xTaskCreate>
 8013180:	4603      	mov	r3, r0
 8013182:	2b01      	cmp	r3, #1
 8013184:	d001      	beq.n	801318a <osThreadNew+0x11a>
 8013186:	2300      	movs	r3, #0
 8013188:	613b      	str	r3, [r7, #16]
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	4618      	mov	r0, r3
 801318e:	3728      	adds	r7, #40	; 0x28
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <osThreadYield>:
 8013194:	b480      	push	{r7}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
 801319a:	f3ef 8305 	mrs	r3, IPSR
 801319e:	603b      	str	r3, [r7, #0]
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d003      	beq.n	80131ae <osThreadYield+0x1a>
 80131a6:	f06f 0305 	mvn.w	r3, #5
 80131aa:	607b      	str	r3, [r7, #4]
 80131ac:	e009      	b.n	80131c2 <osThreadYield+0x2e>
 80131ae:	2300      	movs	r3, #0
 80131b0:	607b      	str	r3, [r7, #4]
 80131b2:	4b07      	ldr	r3, [pc, #28]	; (80131d0 <osThreadYield+0x3c>)
 80131b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	4618      	mov	r0, r3
 80131c6:	370c      	adds	r7, #12
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr
 80131d0:	e000ed04 	.word	0xe000ed04

080131d4 <osThreadSuspend>:
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b086      	sub	sp, #24
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	613b      	str	r3, [r7, #16]
 80131e0:	f3ef 8305 	mrs	r3, IPSR
 80131e4:	60fb      	str	r3, [r7, #12]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d003      	beq.n	80131f4 <osThreadSuspend+0x20>
 80131ec:	f06f 0305 	mvn.w	r3, #5
 80131f0:	617b      	str	r3, [r7, #20]
 80131f2:	e00b      	b.n	801320c <osThreadSuspend+0x38>
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d103      	bne.n	8013202 <osThreadSuspend+0x2e>
 80131fa:	f06f 0303 	mvn.w	r3, #3
 80131fe:	617b      	str	r3, [r7, #20]
 8013200:	e004      	b.n	801320c <osThreadSuspend+0x38>
 8013202:	2300      	movs	r3, #0
 8013204:	617b      	str	r3, [r7, #20]
 8013206:	6938      	ldr	r0, [r7, #16]
 8013208:	f001 fd5e 	bl	8014cc8 <vTaskSuspend>
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	4618      	mov	r0, r3
 8013210:	3718      	adds	r7, #24
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <osDelay>:
 8013216:	b580      	push	{r7, lr}
 8013218:	b084      	sub	sp, #16
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
 801321e:	f3ef 8305 	mrs	r3, IPSR
 8013222:	60bb      	str	r3, [r7, #8]
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d003      	beq.n	8013232 <osDelay+0x1c>
 801322a:	f06f 0305 	mvn.w	r3, #5
 801322e:	60fb      	str	r3, [r7, #12]
 8013230:	e007      	b.n	8013242 <osDelay+0x2c>
 8013232:	2300      	movs	r3, #0
 8013234:	60fb      	str	r3, [r7, #12]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <osDelay+0x2c>
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f001 fd0f 	bl	8014c60 <vTaskDelay>
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	4618      	mov	r0, r3
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}

0801324c <osEventFlagsNew>:
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	2300      	movs	r3, #0
 8013256:	617b      	str	r3, [r7, #20]
 8013258:	f3ef 8305 	mrs	r3, IPSR
 801325c:	60fb      	str	r3, [r7, #12]
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d12d      	bne.n	80132c0 <osEventFlagsNew+0x74>
 8013264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013268:	613b      	str	r3, [r7, #16]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d015      	beq.n	801329c <osEventFlagsNew+0x50>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	689b      	ldr	r3, [r3, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d006      	beq.n	8013286 <osEventFlagsNew+0x3a>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	2b1f      	cmp	r3, #31
 801327e:	d902      	bls.n	8013286 <osEventFlagsNew+0x3a>
 8013280:	2301      	movs	r3, #1
 8013282:	613b      	str	r3, [r7, #16]
 8013284:	e00c      	b.n	80132a0 <osEventFlagsNew+0x54>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d108      	bne.n	80132a0 <osEventFlagsNew+0x54>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	68db      	ldr	r3, [r3, #12]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d104      	bne.n	80132a0 <osEventFlagsNew+0x54>
 8013296:	2300      	movs	r3, #0
 8013298:	613b      	str	r3, [r7, #16]
 801329a:	e001      	b.n	80132a0 <osEventFlagsNew+0x54>
 801329c:	2300      	movs	r3, #0
 801329e:	613b      	str	r3, [r7, #16]
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d106      	bne.n	80132b4 <osEventFlagsNew+0x68>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f000 fa70 	bl	8013790 <xEventGroupCreateStatic>
 80132b0:	6178      	str	r0, [r7, #20]
 80132b2:	e005      	b.n	80132c0 <osEventFlagsNew+0x74>
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d102      	bne.n	80132c0 <osEventFlagsNew+0x74>
 80132ba:	f000 faa0 	bl	80137fe <xEventGroupCreate>
 80132be:	6178      	str	r0, [r7, #20]
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	4618      	mov	r0, r3
 80132c4:	3718      	adds	r7, #24
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
	...

080132cc <osEventFlagsSet>:
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	6039      	str	r1, [r7, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	613b      	str	r3, [r7, #16]
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d004      	beq.n	80132ea <osEventFlagsSet+0x1e>
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d003      	beq.n	80132f2 <osEventFlagsSet+0x26>
 80132ea:	f06f 0303 	mvn.w	r3, #3
 80132ee:	617b      	str	r3, [r7, #20]
 80132f0:	e028      	b.n	8013344 <osEventFlagsSet+0x78>
 80132f2:	f3ef 8305 	mrs	r3, IPSR
 80132f6:	60fb      	str	r3, [r7, #12]
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d01d      	beq.n	801333a <osEventFlagsSet+0x6e>
 80132fe:	2300      	movs	r3, #0
 8013300:	60bb      	str	r3, [r7, #8]
 8013302:	f107 0308 	add.w	r3, r7, #8
 8013306:	461a      	mov	r2, r3
 8013308:	6839      	ldr	r1, [r7, #0]
 801330a:	6938      	ldr	r0, [r7, #16]
 801330c:	f000 fc98 	bl	8013c40 <xEventGroupSetBitsFromISR>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	d103      	bne.n	801331e <osEventFlagsSet+0x52>
 8013316:	f06f 0302 	mvn.w	r3, #2
 801331a:	617b      	str	r3, [r7, #20]
 801331c:	e012      	b.n	8013344 <osEventFlagsSet+0x78>
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	617b      	str	r3, [r7, #20]
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d00d      	beq.n	8013344 <osEventFlagsSet+0x78>
 8013328:	4b09      	ldr	r3, [pc, #36]	; (8013350 <osEventFlagsSet+0x84>)
 801332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801332e:	601a      	str	r2, [r3, #0]
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	f3bf 8f6f 	isb	sy
 8013338:	e004      	b.n	8013344 <osEventFlagsSet+0x78>
 801333a:	6839      	ldr	r1, [r7, #0]
 801333c:	6938      	ldr	r0, [r7, #16]
 801333e:	f000 fbb7 	bl	8013ab0 <xEventGroupSetBits>
 8013342:	6178      	str	r0, [r7, #20]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	4618      	mov	r0, r3
 8013348:	3718      	adds	r7, #24
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	e000ed04 	.word	0xe000ed04

08013354 <osEventFlagsClear>:
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6039      	str	r1, [r7, #0]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	613b      	str	r3, [r7, #16]
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d004      	beq.n	8013372 <osEventFlagsClear+0x1e>
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801336e:	2b00      	cmp	r3, #0
 8013370:	d003      	beq.n	801337a <osEventFlagsClear+0x26>
 8013372:	f06f 0303 	mvn.w	r3, #3
 8013376:	617b      	str	r3, [r7, #20]
 8013378:	e019      	b.n	80133ae <osEventFlagsClear+0x5a>
 801337a:	f3ef 8305 	mrs	r3, IPSR
 801337e:	60fb      	str	r3, [r7, #12]
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d00e      	beq.n	80133a4 <osEventFlagsClear+0x50>
 8013386:	6938      	ldr	r0, [r7, #16]
 8013388:	f000 fb6e 	bl	8013a68 <xEventGroupGetBitsFromISR>
 801338c:	6178      	str	r0, [r7, #20]
 801338e:	6839      	ldr	r1, [r7, #0]
 8013390:	6938      	ldr	r0, [r7, #16]
 8013392:	f000 fb55 	bl	8013a40 <xEventGroupClearBitsFromISR>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d108      	bne.n	80133ae <osEventFlagsClear+0x5a>
 801339c:	f06f 0302 	mvn.w	r3, #2
 80133a0:	617b      	str	r3, [r7, #20]
 80133a2:	e004      	b.n	80133ae <osEventFlagsClear+0x5a>
 80133a4:	6839      	ldr	r1, [r7, #0]
 80133a6:	6938      	ldr	r0, [r7, #16]
 80133a8:	f000 fb12 	bl	80139d0 <xEventGroupClearBits>
 80133ac:	6178      	str	r0, [r7, #20]
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	4618      	mov	r0, r3
 80133b2:	3718      	adds	r7, #24
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <osEventFlagsGet>:
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b086      	sub	sp, #24
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	613b      	str	r3, [r7, #16]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d102      	bne.n	80133d0 <osEventFlagsGet+0x18>
 80133ca:	2300      	movs	r3, #0
 80133cc:	617b      	str	r3, [r7, #20]
 80133ce:	e00f      	b.n	80133f0 <osEventFlagsGet+0x38>
 80133d0:	f3ef 8305 	mrs	r3, IPSR
 80133d4:	60fb      	str	r3, [r7, #12]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d004      	beq.n	80133e6 <osEventFlagsGet+0x2e>
 80133dc:	6938      	ldr	r0, [r7, #16]
 80133de:	f000 fb43 	bl	8013a68 <xEventGroupGetBitsFromISR>
 80133e2:	6178      	str	r0, [r7, #20]
 80133e4:	e004      	b.n	80133f0 <osEventFlagsGet+0x38>
 80133e6:	2100      	movs	r1, #0
 80133e8:	6938      	ldr	r0, [r7, #16]
 80133ea:	f000 faf1 	bl	80139d0 <xEventGroupClearBits>
 80133ee:	6178      	str	r0, [r7, #20]
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	4618      	mov	r0, r3
 80133f4:	3718      	adds	r7, #24
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <osEventFlagsWait>:
 80133fa:	b580      	push	{r7, lr}
 80133fc:	b08c      	sub	sp, #48	; 0x30
 80133fe:	af02      	add	r7, sp, #8
 8013400:	60f8      	str	r0, [r7, #12]
 8013402:	60b9      	str	r1, [r7, #8]
 8013404:	607a      	str	r2, [r7, #4]
 8013406:	603b      	str	r3, [r7, #0]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	61bb      	str	r3, [r7, #24]
 801340c:	69bb      	ldr	r3, [r7, #24]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d004      	beq.n	801341c <osEventFlagsWait+0x22>
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013418:	2b00      	cmp	r3, #0
 801341a:	d003      	beq.n	8013424 <osEventFlagsWait+0x2a>
 801341c:	f06f 0303 	mvn.w	r3, #3
 8013420:	61fb      	str	r3, [r7, #28]
 8013422:	e04b      	b.n	80134bc <osEventFlagsWait+0xc2>
 8013424:	f3ef 8305 	mrs	r3, IPSR
 8013428:	617b      	str	r3, [r7, #20]
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d003      	beq.n	8013438 <osEventFlagsWait+0x3e>
 8013430:	f06f 0305 	mvn.w	r3, #5
 8013434:	61fb      	str	r3, [r7, #28]
 8013436:	e041      	b.n	80134bc <osEventFlagsWait+0xc2>
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f003 0301 	and.w	r3, r3, #1
 801343e:	2b00      	cmp	r3, #0
 8013440:	d002      	beq.n	8013448 <osEventFlagsWait+0x4e>
 8013442:	2301      	movs	r3, #1
 8013444:	627b      	str	r3, [r7, #36]	; 0x24
 8013446:	e001      	b.n	801344c <osEventFlagsWait+0x52>
 8013448:	2300      	movs	r3, #0
 801344a:	627b      	str	r3, [r7, #36]	; 0x24
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f003 0302 	and.w	r3, r3, #2
 8013452:	2b00      	cmp	r3, #0
 8013454:	d002      	beq.n	801345c <osEventFlagsWait+0x62>
 8013456:	2300      	movs	r3, #0
 8013458:	623b      	str	r3, [r7, #32]
 801345a:	e001      	b.n	8013460 <osEventFlagsWait+0x66>
 801345c:	2301      	movs	r3, #1
 801345e:	623b      	str	r3, [r7, #32]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	9300      	str	r3, [sp, #0]
 8013464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013466:	6a3a      	ldr	r2, [r7, #32]
 8013468:	68b9      	ldr	r1, [r7, #8]
 801346a:	69b8      	ldr	r0, [r7, #24]
 801346c:	f000 f9e2 	bl	8013834 <xEventGroupWaitBits>
 8013470:	61f8      	str	r0, [r7, #28]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f003 0301 	and.w	r3, r3, #1
 8013478:	2b00      	cmp	r3, #0
 801347a:	d010      	beq.n	801349e <osEventFlagsWait+0xa4>
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	4013      	ands	r3, r2
 8013482:	68ba      	ldr	r2, [r7, #8]
 8013484:	429a      	cmp	r2, r3
 8013486:	d019      	beq.n	80134bc <osEventFlagsWait+0xc2>
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d003      	beq.n	8013496 <osEventFlagsWait+0x9c>
 801348e:	f06f 0301 	mvn.w	r3, #1
 8013492:	61fb      	str	r3, [r7, #28]
 8013494:	e012      	b.n	80134bc <osEventFlagsWait+0xc2>
 8013496:	f06f 0302 	mvn.w	r3, #2
 801349a:	61fb      	str	r3, [r7, #28]
 801349c:	e00e      	b.n	80134bc <osEventFlagsWait+0xc2>
 801349e:	68ba      	ldr	r2, [r7, #8]
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	4013      	ands	r3, r2
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d109      	bne.n	80134bc <osEventFlagsWait+0xc2>
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d003      	beq.n	80134b6 <osEventFlagsWait+0xbc>
 80134ae:	f06f 0301 	mvn.w	r3, #1
 80134b2:	61fb      	str	r3, [r7, #28]
 80134b4:	e002      	b.n	80134bc <osEventFlagsWait+0xc2>
 80134b6:	f06f 0302 	mvn.w	r3, #2
 80134ba:	61fb      	str	r3, [r7, #28]
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	4618      	mov	r0, r3
 80134c0:	3728      	adds	r7, #40	; 0x28
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <osMessageQueueNew>:
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b08a      	sub	sp, #40	; 0x28
 80134ca:	af02      	add	r7, sp, #8
 80134cc:	60f8      	str	r0, [r7, #12]
 80134ce:	60b9      	str	r1, [r7, #8]
 80134d0:	607a      	str	r2, [r7, #4]
 80134d2:	2300      	movs	r3, #0
 80134d4:	61fb      	str	r3, [r7, #28]
 80134d6:	f3ef 8305 	mrs	r3, IPSR
 80134da:	613b      	str	r3, [r7, #16]
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d15f      	bne.n	80135a2 <osMessageQueueNew+0xdc>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d05c      	beq.n	80135a2 <osMessageQueueNew+0xdc>
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d059      	beq.n	80135a2 <osMessageQueueNew+0xdc>
 80134ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134f2:	61bb      	str	r3, [r7, #24]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d029      	beq.n	801354e <osMessageQueueNew+0x88>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d012      	beq.n	8013528 <osMessageQueueNew+0x62>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	2b4f      	cmp	r3, #79	; 0x4f
 8013508:	d90e      	bls.n	8013528 <osMessageQueueNew+0x62>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	691b      	ldr	r3, [r3, #16]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d00a      	beq.n	8013528 <osMessageQueueNew+0x62>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	695a      	ldr	r2, [r3, #20]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	68b9      	ldr	r1, [r7, #8]
 801351a:	fb01 f303 	mul.w	r3, r1, r3
 801351e:	429a      	cmp	r2, r3
 8013520:	d302      	bcc.n	8013528 <osMessageQueueNew+0x62>
 8013522:	2301      	movs	r3, #1
 8013524:	61bb      	str	r3, [r7, #24]
 8013526:	e014      	b.n	8013552 <osMessageQueueNew+0x8c>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d110      	bne.n	8013552 <osMessageQueueNew+0x8c>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d10c      	bne.n	8013552 <osMessageQueueNew+0x8c>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	691b      	ldr	r3, [r3, #16]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d108      	bne.n	8013552 <osMessageQueueNew+0x8c>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	695b      	ldr	r3, [r3, #20]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d104      	bne.n	8013552 <osMessageQueueNew+0x8c>
 8013548:	2300      	movs	r3, #0
 801354a:	61bb      	str	r3, [r7, #24]
 801354c:	e001      	b.n	8013552 <osMessageQueueNew+0x8c>
 801354e:	2300      	movs	r3, #0
 8013550:	61bb      	str	r3, [r7, #24]
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d10b      	bne.n	8013570 <osMessageQueueNew+0xaa>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	691a      	ldr	r2, [r3, #16]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	689b      	ldr	r3, [r3, #8]
 8013560:	2100      	movs	r1, #0
 8013562:	9100      	str	r1, [sp, #0]
 8013564:	68b9      	ldr	r1, [r7, #8]
 8013566:	68f8      	ldr	r0, [r7, #12]
 8013568:	f000 fc9a 	bl	8013ea0 <xQueueGenericCreateStatic>
 801356c:	61f8      	str	r0, [r7, #28]
 801356e:	e008      	b.n	8013582 <osMessageQueueNew+0xbc>
 8013570:	69bb      	ldr	r3, [r7, #24]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d105      	bne.n	8013582 <osMessageQueueNew+0xbc>
 8013576:	2200      	movs	r2, #0
 8013578:	68b9      	ldr	r1, [r7, #8]
 801357a:	68f8      	ldr	r0, [r7, #12]
 801357c:	f000 fd08 	bl	8013f90 <xQueueGenericCreate>
 8013580:	61f8      	str	r0, [r7, #28]
 8013582:	69fb      	ldr	r3, [r7, #28]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00c      	beq.n	80135a2 <osMessageQueueNew+0xdc>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d003      	beq.n	8013596 <osMessageQueueNew+0xd0>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	617b      	str	r3, [r7, #20]
 8013594:	e001      	b.n	801359a <osMessageQueueNew+0xd4>
 8013596:	2300      	movs	r3, #0
 8013598:	617b      	str	r3, [r7, #20]
 801359a:	6979      	ldr	r1, [r7, #20]
 801359c:	69f8      	ldr	r0, [r7, #28]
 801359e:	f001 f95f 	bl	8014860 <vQueueAddToRegistry>
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	4618      	mov	r0, r3
 80135a6:	3720      	adds	r7, #32
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <osMessageQueuePut>:
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b088      	sub	sp, #32
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	603b      	str	r3, [r7, #0]
 80135b8:	4613      	mov	r3, r2
 80135ba:	71fb      	strb	r3, [r7, #7]
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	61bb      	str	r3, [r7, #24]
 80135c0:	2300      	movs	r3, #0
 80135c2:	61fb      	str	r3, [r7, #28]
 80135c4:	f3ef 8305 	mrs	r3, IPSR
 80135c8:	617b      	str	r3, [r7, #20]
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d028      	beq.n	8013622 <osMessageQueuePut+0x76>
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d005      	beq.n	80135e2 <osMessageQueuePut+0x36>
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d002      	beq.n	80135e2 <osMessageQueuePut+0x36>
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d003      	beq.n	80135ea <osMessageQueuePut+0x3e>
 80135e2:	f06f 0303 	mvn.w	r3, #3
 80135e6:	61fb      	str	r3, [r7, #28]
 80135e8:	e038      	b.n	801365c <osMessageQueuePut+0xb0>
 80135ea:	2300      	movs	r3, #0
 80135ec:	613b      	str	r3, [r7, #16]
 80135ee:	f107 0210 	add.w	r2, r7, #16
 80135f2:	2300      	movs	r3, #0
 80135f4:	68b9      	ldr	r1, [r7, #8]
 80135f6:	69b8      	ldr	r0, [r7, #24]
 80135f8:	f000 fe26 	bl	8014248 <xQueueGenericSendFromISR>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b01      	cmp	r3, #1
 8013600:	d003      	beq.n	801360a <osMessageQueuePut+0x5e>
 8013602:	f06f 0302 	mvn.w	r3, #2
 8013606:	61fb      	str	r3, [r7, #28]
 8013608:	e028      	b.n	801365c <osMessageQueuePut+0xb0>
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d025      	beq.n	801365c <osMessageQueuePut+0xb0>
 8013610:	4b15      	ldr	r3, [pc, #84]	; (8013668 <osMessageQueuePut+0xbc>)
 8013612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013616:	601a      	str	r2, [r3, #0]
 8013618:	f3bf 8f4f 	dsb	sy
 801361c:	f3bf 8f6f 	isb	sy
 8013620:	e01c      	b.n	801365c <osMessageQueuePut+0xb0>
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d002      	beq.n	801362e <osMessageQueuePut+0x82>
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d103      	bne.n	8013636 <osMessageQueuePut+0x8a>
 801362e:	f06f 0303 	mvn.w	r3, #3
 8013632:	61fb      	str	r3, [r7, #28]
 8013634:	e012      	b.n	801365c <osMessageQueuePut+0xb0>
 8013636:	2300      	movs	r3, #0
 8013638:	683a      	ldr	r2, [r7, #0]
 801363a:	68b9      	ldr	r1, [r7, #8]
 801363c:	69b8      	ldr	r0, [r7, #24]
 801363e:	f000 fd05 	bl	801404c <xQueueGenericSend>
 8013642:	4603      	mov	r3, r0
 8013644:	2b01      	cmp	r3, #1
 8013646:	d009      	beq.n	801365c <osMessageQueuePut+0xb0>
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d003      	beq.n	8013656 <osMessageQueuePut+0xaa>
 801364e:	f06f 0301 	mvn.w	r3, #1
 8013652:	61fb      	str	r3, [r7, #28]
 8013654:	e002      	b.n	801365c <osMessageQueuePut+0xb0>
 8013656:	f06f 0302 	mvn.w	r3, #2
 801365a:	61fb      	str	r3, [r7, #28]
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	4618      	mov	r0, r3
 8013660:	3720      	adds	r7, #32
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	e000ed04 	.word	0xe000ed04

0801366c <osMessageQueueGet>:
 801366c:	b580      	push	{r7, lr}
 801366e:	b088      	sub	sp, #32
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]
 8013678:	603b      	str	r3, [r7, #0]
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	61bb      	str	r3, [r7, #24]
 801367e:	2300      	movs	r3, #0
 8013680:	61fb      	str	r3, [r7, #28]
 8013682:	f3ef 8305 	mrs	r3, IPSR
 8013686:	617b      	str	r3, [r7, #20]
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d028      	beq.n	80136e0 <osMessageQueueGet+0x74>
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d005      	beq.n	80136a0 <osMessageQueueGet+0x34>
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d002      	beq.n	80136a0 <osMessageQueueGet+0x34>
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d003      	beq.n	80136a8 <osMessageQueueGet+0x3c>
 80136a0:	f06f 0303 	mvn.w	r3, #3
 80136a4:	61fb      	str	r3, [r7, #28]
 80136a6:	e037      	b.n	8013718 <osMessageQueueGet+0xac>
 80136a8:	2300      	movs	r3, #0
 80136aa:	613b      	str	r3, [r7, #16]
 80136ac:	f107 0310 	add.w	r3, r7, #16
 80136b0:	461a      	mov	r2, r3
 80136b2:	68b9      	ldr	r1, [r7, #8]
 80136b4:	69b8      	ldr	r0, [r7, #24]
 80136b6:	f000 ff43 	bl	8014540 <xQueueReceiveFromISR>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b01      	cmp	r3, #1
 80136be:	d003      	beq.n	80136c8 <osMessageQueueGet+0x5c>
 80136c0:	f06f 0302 	mvn.w	r3, #2
 80136c4:	61fb      	str	r3, [r7, #28]
 80136c6:	e027      	b.n	8013718 <osMessageQueueGet+0xac>
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d024      	beq.n	8013718 <osMessageQueueGet+0xac>
 80136ce:	4b15      	ldr	r3, [pc, #84]	; (8013724 <osMessageQueueGet+0xb8>)
 80136d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136d4:	601a      	str	r2, [r3, #0]
 80136d6:	f3bf 8f4f 	dsb	sy
 80136da:	f3bf 8f6f 	isb	sy
 80136de:	e01b      	b.n	8013718 <osMessageQueueGet+0xac>
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d002      	beq.n	80136ec <osMessageQueueGet+0x80>
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d103      	bne.n	80136f4 <osMessageQueueGet+0x88>
 80136ec:	f06f 0303 	mvn.w	r3, #3
 80136f0:	61fb      	str	r3, [r7, #28]
 80136f2:	e011      	b.n	8013718 <osMessageQueueGet+0xac>
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	68b9      	ldr	r1, [r7, #8]
 80136f8:	69b8      	ldr	r0, [r7, #24]
 80136fa:	f000 fe41 	bl	8014380 <xQueueReceive>
 80136fe:	4603      	mov	r3, r0
 8013700:	2b01      	cmp	r3, #1
 8013702:	d009      	beq.n	8013718 <osMessageQueueGet+0xac>
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d003      	beq.n	8013712 <osMessageQueueGet+0xa6>
 801370a:	f06f 0301 	mvn.w	r3, #1
 801370e:	61fb      	str	r3, [r7, #28]
 8013710:	e002      	b.n	8013718 <osMessageQueueGet+0xac>
 8013712:	f06f 0302 	mvn.w	r3, #2
 8013716:	61fb      	str	r3, [r7, #28]
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	4618      	mov	r0, r3
 801371c:	3720      	adds	r7, #32
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	e000ed04 	.word	0xe000ed04

08013728 <vApplicationGetIdleTaskMemory>:
 8013728:	b480      	push	{r7}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	4a07      	ldr	r2, [pc, #28]	; (8013754 <vApplicationGetIdleTaskMemory+0x2c>)
 8013738:	601a      	str	r2, [r3, #0]
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	4a06      	ldr	r2, [pc, #24]	; (8013758 <vApplicationGetIdleTaskMemory+0x30>)
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2280      	movs	r2, #128	; 0x80
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	bf00      	nop
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr
 8013752:	bf00      	nop
 8013754:	24001134 	.word	0x24001134
 8013758:	24001190 	.word	0x24001190

0801375c <vApplicationGetTimerTaskMemory>:
 801375c:	b480      	push	{r7}
 801375e:	b085      	sub	sp, #20
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	4a07      	ldr	r2, [pc, #28]	; (8013788 <vApplicationGetTimerTaskMemory+0x2c>)
 801376c:	601a      	str	r2, [r3, #0]
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	4a06      	ldr	r2, [pc, #24]	; (801378c <vApplicationGetTimerTaskMemory+0x30>)
 8013772:	601a      	str	r2, [r3, #0]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f44f 7280 	mov.w	r2, #256	; 0x100
 801377a:	601a      	str	r2, [r3, #0]
 801377c:	bf00      	nop
 801377e:	3714      	adds	r7, #20
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr
 8013788:	24001390 	.word	0x24001390
 801378c:	240013ec 	.word	0x240013ec

08013790 <xEventGroupCreateStatic>:
 8013790:	b580      	push	{r7, lr}
 8013792:	b086      	sub	sp, #24
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d10a      	bne.n	80137b4 <xEventGroupCreateStatic+0x24>
 801379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a2:	f383 8811 	msr	BASEPRI, r3
 80137a6:	f3bf 8f6f 	isb	sy
 80137aa:	f3bf 8f4f 	dsb	sy
 80137ae:	613b      	str	r3, [r7, #16]
 80137b0:	bf00      	nop
 80137b2:	e7fe      	b.n	80137b2 <xEventGroupCreateStatic+0x22>
 80137b4:	2320      	movs	r3, #32
 80137b6:	60bb      	str	r3, [r7, #8]
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	2b20      	cmp	r3, #32
 80137bc:	d00a      	beq.n	80137d4 <xEventGroupCreateStatic+0x44>
 80137be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c2:	f383 8811 	msr	BASEPRI, r3
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	f3bf 8f4f 	dsb	sy
 80137ce:	60fb      	str	r3, [r7, #12]
 80137d0:	bf00      	nop
 80137d2:	e7fe      	b.n	80137d2 <xEventGroupCreateStatic+0x42>
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	617b      	str	r3, [r7, #20]
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00a      	beq.n	80137f4 <xEventGroupCreateStatic+0x64>
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	2200      	movs	r2, #0
 80137e2:	601a      	str	r2, [r3, #0]
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	3304      	adds	r3, #4
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 fa3d 	bl	8013c68 <vListInitialise>
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	2201      	movs	r2, #1
 80137f2:	771a      	strb	r2, [r3, #28]
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	4618      	mov	r0, r3
 80137f8:	3718      	adds	r7, #24
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <xEventGroupCreate>:
 80137fe:	b580      	push	{r7, lr}
 8013800:	b082      	sub	sp, #8
 8013802:	af00      	add	r7, sp, #0
 8013804:	2020      	movs	r0, #32
 8013806:	f002 ff1f 	bl	8016648 <pvPortMalloc>
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d00a      	beq.n	8013828 <xEventGroupCreate+0x2a>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2200      	movs	r2, #0
 8013816:	601a      	str	r2, [r3, #0]
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	3304      	adds	r3, #4
 801381c:	4618      	mov	r0, r3
 801381e:	f000 fa23 	bl	8013c68 <vListInitialise>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2200      	movs	r2, #0
 8013826:	771a      	strb	r2, [r3, #28]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	4618      	mov	r0, r3
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
	...

08013834 <xEventGroupWaitBits>:
 8013834:	b580      	push	{r7, lr}
 8013836:	b090      	sub	sp, #64	; 0x40
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
 8013840:	603b      	str	r3, [r7, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	637b      	str	r3, [r7, #52]	; 0x34
 8013846:	2300      	movs	r3, #0
 8013848:	63bb      	str	r3, [r7, #56]	; 0x38
 801384a:	2300      	movs	r3, #0
 801384c:	633b      	str	r3, [r7, #48]	; 0x30
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d10a      	bne.n	801386a <xEventGroupWaitBits+0x36>
 8013854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013858:	f383 8811 	msr	BASEPRI, r3
 801385c:	f3bf 8f6f 	isb	sy
 8013860:	f3bf 8f4f 	dsb	sy
 8013864:	623b      	str	r3, [r7, #32]
 8013866:	bf00      	nop
 8013868:	e7fe      	b.n	8013868 <xEventGroupWaitBits+0x34>
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013870:	2b00      	cmp	r3, #0
 8013872:	d00a      	beq.n	801388a <xEventGroupWaitBits+0x56>
 8013874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013878:	f383 8811 	msr	BASEPRI, r3
 801387c:	f3bf 8f6f 	isb	sy
 8013880:	f3bf 8f4f 	dsb	sy
 8013884:	61fb      	str	r3, [r7, #28]
 8013886:	bf00      	nop
 8013888:	e7fe      	b.n	8013888 <xEventGroupWaitBits+0x54>
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d10a      	bne.n	80138a6 <xEventGroupWaitBits+0x72>
 8013890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013894:	f383 8811 	msr	BASEPRI, r3
 8013898:	f3bf 8f6f 	isb	sy
 801389c:	f3bf 8f4f 	dsb	sy
 80138a0:	61bb      	str	r3, [r7, #24]
 80138a2:	bf00      	nop
 80138a4:	e7fe      	b.n	80138a4 <xEventGroupWaitBits+0x70>
 80138a6:	f002 f817 	bl	80158d8 <xTaskGetSchedulerState>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d102      	bne.n	80138b6 <xEventGroupWaitBits+0x82>
 80138b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d101      	bne.n	80138ba <xEventGroupWaitBits+0x86>
 80138b6:	2301      	movs	r3, #1
 80138b8:	e000      	b.n	80138bc <xEventGroupWaitBits+0x88>
 80138ba:	2300      	movs	r3, #0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d10a      	bne.n	80138d6 <xEventGroupWaitBits+0xa2>
 80138c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c4:	f383 8811 	msr	BASEPRI, r3
 80138c8:	f3bf 8f6f 	isb	sy
 80138cc:	f3bf 8f4f 	dsb	sy
 80138d0:	617b      	str	r3, [r7, #20]
 80138d2:	bf00      	nop
 80138d4:	e7fe      	b.n	80138d4 <xEventGroupWaitBits+0xa0>
 80138d6:	f001 fb77 	bl	8014fc8 <vTaskSuspendAll>
 80138da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138e0:	683a      	ldr	r2, [r7, #0]
 80138e2:	68b9      	ldr	r1, [r7, #8]
 80138e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138e6:	f000 f988 	bl	8013bfa <prvTestWaitCondition>
 80138ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d00e      	beq.n	8013910 <xEventGroupWaitBits+0xdc>
 80138f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138f6:	2300      	movs	r3, #0
 80138f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d028      	beq.n	8013952 <xEventGroupWaitBits+0x11e>
 8013900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	43db      	mvns	r3, r3
 8013908:	401a      	ands	r2, r3
 801390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801390c:	601a      	str	r2, [r3, #0]
 801390e:	e020      	b.n	8013952 <xEventGroupWaitBits+0x11e>
 8013910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013912:	2b00      	cmp	r3, #0
 8013914:	d104      	bne.n	8013920 <xEventGroupWaitBits+0xec>
 8013916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013918:	63fb      	str	r3, [r7, #60]	; 0x3c
 801391a:	2301      	movs	r3, #1
 801391c:	633b      	str	r3, [r7, #48]	; 0x30
 801391e:	e018      	b.n	8013952 <xEventGroupWaitBits+0x11e>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d003      	beq.n	801392e <xEventGroupWaitBits+0xfa>
 8013926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801392c:	63bb      	str	r3, [r7, #56]	; 0x38
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d003      	beq.n	801393c <xEventGroupWaitBits+0x108>
 8013934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801393a:	63bb      	str	r3, [r7, #56]	; 0x38
 801393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801393e:	1d18      	adds	r0, r3, #4
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013944:	4313      	orrs	r3, r2
 8013946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013948:	4619      	mov	r1, r3
 801394a:	f001 fd3d 	bl	80153c8 <vTaskPlaceOnUnorderedEventList>
 801394e:	2300      	movs	r3, #0
 8013950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013952:	f001 fb47 	bl	8014fe4 <xTaskResumeAll>
 8013956:	6278      	str	r0, [r7, #36]	; 0x24
 8013958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801395a:	2b00      	cmp	r3, #0
 801395c:	d031      	beq.n	80139c2 <xEventGroupWaitBits+0x18e>
 801395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013960:	2b00      	cmp	r3, #0
 8013962:	d107      	bne.n	8013974 <xEventGroupWaitBits+0x140>
 8013964:	4b19      	ldr	r3, [pc, #100]	; (80139cc <xEventGroupWaitBits+0x198>)
 8013966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801396a:	601a      	str	r2, [r3, #0]
 801396c:	f3bf 8f4f 	dsb	sy
 8013970:	f3bf 8f6f 	isb	sy
 8013974:	f002 f83c 	bl	80159f0 <uxTaskResetEventItemValue>
 8013978:	63f8      	str	r0, [r7, #60]	; 0x3c
 801397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013980:	2b00      	cmp	r3, #0
 8013982:	d11a      	bne.n	80139ba <xEventGroupWaitBits+0x186>
 8013984:	f002 fd3e 	bl	8016404 <vPortEnterCritical>
 8013988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801398e:	683a      	ldr	r2, [r7, #0]
 8013990:	68b9      	ldr	r1, [r7, #8]
 8013992:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013994:	f000 f931 	bl	8013bfa <prvTestWaitCondition>
 8013998:	4603      	mov	r3, r0
 801399a:	2b00      	cmp	r3, #0
 801399c:	d009      	beq.n	80139b2 <xEventGroupWaitBits+0x17e>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d006      	beq.n	80139b2 <xEventGroupWaitBits+0x17e>
 80139a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139a6:	681a      	ldr	r2, [r3, #0]
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	43db      	mvns	r3, r3
 80139ac:	401a      	ands	r2, r3
 80139ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139b0:	601a      	str	r2, [r3, #0]
 80139b2:	2301      	movs	r3, #1
 80139b4:	633b      	str	r3, [r7, #48]	; 0x30
 80139b6:	f002 fd55 	bl	8016464 <vPortExitCritical>
 80139ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80139c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139c4:	4618      	mov	r0, r3
 80139c6:	3740      	adds	r7, #64	; 0x40
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	e000ed04 	.word	0xe000ed04

080139d0 <xEventGroupClearBits>:
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b086      	sub	sp, #24
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	617b      	str	r3, [r7, #20]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10a      	bne.n	80139fa <xEventGroupClearBits+0x2a>
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	60fb      	str	r3, [r7, #12]
 80139f6:	bf00      	nop
 80139f8:	e7fe      	b.n	80139f8 <xEventGroupClearBits+0x28>
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d00a      	beq.n	8013a1a <xEventGroupClearBits+0x4a>
 8013a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a08:	f383 8811 	msr	BASEPRI, r3
 8013a0c:	f3bf 8f6f 	isb	sy
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	60bb      	str	r3, [r7, #8]
 8013a16:	bf00      	nop
 8013a18:	e7fe      	b.n	8013a18 <xEventGroupClearBits+0x48>
 8013a1a:	f002 fcf3 	bl	8016404 <vPortEnterCritical>
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	613b      	str	r3, [r7, #16]
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	43db      	mvns	r3, r3
 8013a2c:	401a      	ands	r2, r3
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	601a      	str	r2, [r3, #0]
 8013a32:	f002 fd17 	bl	8016464 <vPortExitCritical>
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3718      	adds	r7, #24
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <xEventGroupClearBitsFromISR>:
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	6879      	ldr	r1, [r7, #4]
 8013a50:	4804      	ldr	r0, [pc, #16]	; (8013a64 <xEventGroupClearBitsFromISR+0x24>)
 8013a52:	f002 fb87 	bl	8016164 <xTimerPendFunctionCallFromISR>
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	08013be1 	.word	0x08013be1

08013a68 <xEventGroupGetBitsFromISR>:
 8013a68:	b480      	push	{r7}
 8013a6a:	b089      	sub	sp, #36	; 0x24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	61fb      	str	r3, [r7, #28]
 8013a74:	f3ef 8211 	mrs	r2, BASEPRI
 8013a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a7c:	f383 8811 	msr	BASEPRI, r3
 8013a80:	f3bf 8f6f 	isb	sy
 8013a84:	f3bf 8f4f 	dsb	sy
 8013a88:	60fa      	str	r2, [r7, #12]
 8013a8a:	60bb      	str	r3, [r7, #8]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	61bb      	str	r3, [r7, #24]
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	617b      	str	r3, [r7, #20]
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	613b      	str	r3, [r7, #16]
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	f383 8811 	msr	BASEPRI, r3
 8013aa0:	bf00      	nop
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3724      	adds	r7, #36	; 0x24
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr

08013ab0 <xEventGroupSetBits>:
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b08e      	sub	sp, #56	; 0x38
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
 8013aba:	2300      	movs	r3, #0
 8013abc:	633b      	str	r3, [r7, #48]	; 0x30
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d10a      	bne.n	8013ae2 <xEventGroupSetBits+0x32>
 8013acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad0:	f383 8811 	msr	BASEPRI, r3
 8013ad4:	f3bf 8f6f 	isb	sy
 8013ad8:	f3bf 8f4f 	dsb	sy
 8013adc:	613b      	str	r3, [r7, #16]
 8013ade:	bf00      	nop
 8013ae0:	e7fe      	b.n	8013ae0 <xEventGroupSetBits+0x30>
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d00a      	beq.n	8013b02 <xEventGroupSetBits+0x52>
 8013aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af0:	f383 8811 	msr	BASEPRI, r3
 8013af4:	f3bf 8f6f 	isb	sy
 8013af8:	f3bf 8f4f 	dsb	sy
 8013afc:	60fb      	str	r3, [r7, #12]
 8013afe:	bf00      	nop
 8013b00:	e7fe      	b.n	8013b00 <xEventGroupSetBits+0x50>
 8013b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b04:	3304      	adds	r3, #4
 8013b06:	627b      	str	r3, [r7, #36]	; 0x24
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0a:	3308      	adds	r3, #8
 8013b0c:	623b      	str	r3, [r7, #32]
 8013b0e:	f001 fa5b 	bl	8014fc8 <vTaskSuspendAll>
 8013b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b14:	68db      	ldr	r3, [r3, #12]
 8013b16:	637b      	str	r3, [r7, #52]	; 0x34
 8013b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	431a      	orrs	r2, r3
 8013b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b22:	601a      	str	r2, [r3, #0]
 8013b24:	e03c      	b.n	8013ba0 <xEventGroupSetBits+0xf0>
 8013b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	61fb      	str	r3, [r7, #28]
 8013b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	61bb      	str	r3, [r7, #24]
 8013b32:	2300      	movs	r3, #0
 8013b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b3c:	617b      	str	r3, [r7, #20]
 8013b3e:	69bb      	ldr	r3, [r7, #24]
 8013b40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013b44:	61bb      	str	r3, [r7, #24]
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d108      	bne.n	8013b62 <xEventGroupSetBits+0xb2>
 8013b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b52:	681a      	ldr	r2, [r3, #0]
 8013b54:	69bb      	ldr	r3, [r7, #24]
 8013b56:	4013      	ands	r3, r2
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d00b      	beq.n	8013b74 <xEventGroupSetBits+0xc4>
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b60:	e008      	b.n	8013b74 <xEventGroupSetBits+0xc4>
 8013b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b64:	681a      	ldr	r2, [r3, #0]
 8013b66:	69bb      	ldr	r3, [r7, #24]
 8013b68:	4013      	ands	r3, r2
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d101      	bne.n	8013b74 <xEventGroupSetBits+0xc4>
 8013b70:	2301      	movs	r3, #1
 8013b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d010      	beq.n	8013b9c <xEventGroupSetBits+0xec>
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d003      	beq.n	8013b8c <xEventGroupSetBits+0xdc>
 8013b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8013b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013b94:	4619      	mov	r1, r3
 8013b96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b98:	f001 fce2 	bl	8015560 <vTaskRemoveFromUnorderedEventList>
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8013ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ba2:	6a3b      	ldr	r3, [r7, #32]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d1be      	bne.n	8013b26 <xEventGroupSetBits+0x76>
 8013ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bae:	43db      	mvns	r3, r3
 8013bb0:	401a      	ands	r2, r3
 8013bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb4:	601a      	str	r2, [r3, #0]
 8013bb6:	f001 fa15 	bl	8014fe4 <xTaskResumeAll>
 8013bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3738      	adds	r7, #56	; 0x38
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}

08013bc6 <vEventGroupSetBitsCallback>:
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b082      	sub	sp, #8
 8013bca:	af00      	add	r7, sp, #0
 8013bcc:	6078      	str	r0, [r7, #4]
 8013bce:	6039      	str	r1, [r7, #0]
 8013bd0:	6839      	ldr	r1, [r7, #0]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7ff ff6c 	bl	8013ab0 <xEventGroupSetBits>
 8013bd8:	bf00      	nop
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <vEventGroupClearBitsCallback>:
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
 8013bea:	6839      	ldr	r1, [r7, #0]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f7ff feef 	bl	80139d0 <xEventGroupClearBits>
 8013bf2:	bf00      	nop
 8013bf4:	3708      	adds	r7, #8
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <prvTestWaitCondition>:
 8013bfa:	b480      	push	{r7}
 8013bfc:	b087      	sub	sp, #28
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	60f8      	str	r0, [r7, #12]
 8013c02:	60b9      	str	r1, [r7, #8]
 8013c04:	607a      	str	r2, [r7, #4]
 8013c06:	2300      	movs	r3, #0
 8013c08:	617b      	str	r3, [r7, #20]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d107      	bne.n	8013c20 <prvTestWaitCondition+0x26>
 8013c10:	68fa      	ldr	r2, [r7, #12]
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	4013      	ands	r3, r2
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00a      	beq.n	8013c30 <prvTestWaitCondition+0x36>
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	617b      	str	r3, [r7, #20]
 8013c1e:	e007      	b.n	8013c30 <prvTestWaitCondition+0x36>
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	4013      	ands	r3, r2
 8013c26:	68ba      	ldr	r2, [r7, #8]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d101      	bne.n	8013c30 <prvTestWaitCondition+0x36>
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	617b      	str	r3, [r7, #20]
 8013c30:	697b      	ldr	r3, [r7, #20]
 8013c32:	4618      	mov	r0, r3
 8013c34:	371c      	adds	r7, #28
 8013c36:	46bd      	mov	sp, r7
 8013c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3c:	4770      	bx	lr
	...

08013c40 <xEventGroupSetBitsFromISR>:
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b086      	sub	sp, #24
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	68ba      	ldr	r2, [r7, #8]
 8013c50:	68f9      	ldr	r1, [r7, #12]
 8013c52:	4804      	ldr	r0, [pc, #16]	; (8013c64 <xEventGroupSetBitsFromISR+0x24>)
 8013c54:	f002 fa86 	bl	8016164 <xTimerPendFunctionCallFromISR>
 8013c58:	6178      	str	r0, [r7, #20]
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3718      	adds	r7, #24
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	08013bc7 	.word	0x08013bc7

08013c68 <vListInitialise>:
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f103 0208 	add.w	r2, r3, #8
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	605a      	str	r2, [r3, #4]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c80:	609a      	str	r2, [r3, #8]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f103 0208 	add.w	r2, r3, #8
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	60da      	str	r2, [r3, #12]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f103 0208 	add.w	r2, r3, #8
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	611a      	str	r2, [r3, #16]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	601a      	str	r2, [r3, #0]
 8013c9c:	bf00      	nop
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <vListInitialiseItem>:
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	611a      	str	r2, [r3, #16]
 8013cb6:	bf00      	nop
 8013cb8:	370c      	adds	r7, #12
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr

08013cc2 <vListInsertEnd>:
 8013cc2:	b480      	push	{r7}
 8013cc4:	b085      	sub	sp, #20
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
 8013cca:	6039      	str	r1, [r7, #0]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	60fb      	str	r3, [r7, #12]
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	605a      	str	r2, [r3, #4]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	689a      	ldr	r2, [r3, #8]
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	609a      	str	r2, [r3, #8]
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	689b      	ldr	r3, [r3, #8]
 8013ce4:	683a      	ldr	r2, [r7, #0]
 8013ce6:	605a      	str	r2, [r3, #4]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	683a      	ldr	r2, [r7, #0]
 8013cec:	609a      	str	r2, [r3, #8]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	611a      	str	r2, [r3, #16]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	1c5a      	adds	r2, r3, #1
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	bf00      	nop
 8013d00:	3714      	adds	r7, #20
 8013d02:	46bd      	mov	sp, r7
 8013d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d08:	4770      	bx	lr

08013d0a <vListInsert>:
 8013d0a:	b480      	push	{r7}
 8013d0c:	b085      	sub	sp, #20
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
 8013d12:	6039      	str	r1, [r7, #0]
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	60bb      	str	r3, [r7, #8]
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d20:	d103      	bne.n	8013d2a <vListInsert+0x20>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	691b      	ldr	r3, [r3, #16]
 8013d26:	60fb      	str	r3, [r7, #12]
 8013d28:	e00c      	b.n	8013d44 <vListInsert+0x3a>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	3308      	adds	r3, #8
 8013d2e:	60fb      	str	r3, [r7, #12]
 8013d30:	e002      	b.n	8013d38 <vListInsert+0x2e>
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	68ba      	ldr	r2, [r7, #8]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d2f6      	bcs.n	8013d32 <vListInsert+0x28>
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	685a      	ldr	r2, [r3, #4]
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	605a      	str	r2, [r3, #4]
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	683a      	ldr	r2, [r7, #0]
 8013d52:	609a      	str	r2, [r3, #8]
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	609a      	str	r2, [r3, #8]
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	683a      	ldr	r2, [r7, #0]
 8013d5e:	605a      	str	r2, [r3, #4]
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	611a      	str	r2, [r3, #16]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	1c5a      	adds	r2, r3, #1
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	601a      	str	r2, [r3, #0]
 8013d70:	bf00      	nop
 8013d72:	3714      	adds	r7, #20
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <uxListRemove>:
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	691b      	ldr	r3, [r3, #16]
 8013d88:	60fb      	str	r3, [r7, #12]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	6892      	ldr	r2, [r2, #8]
 8013d92:	609a      	str	r2, [r3, #8]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	689b      	ldr	r3, [r3, #8]
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	6852      	ldr	r2, [r2, #4]
 8013d9c:	605a      	str	r2, [r3, #4]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d103      	bne.n	8013db0 <uxListRemove+0x34>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	689a      	ldr	r2, [r3, #8]
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	605a      	str	r2, [r3, #4]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2200      	movs	r2, #0
 8013db4:	611a      	str	r2, [r3, #16]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	1e5a      	subs	r2, r3, #1
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	601a      	str	r2, [r3, #0]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3714      	adds	r7, #20
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <xQueueGenericReset>:
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	60fb      	str	r3, [r7, #12]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d10a      	bne.n	8013dfa <xQueueGenericReset+0x2a>
 8013de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de8:	f383 8811 	msr	BASEPRI, r3
 8013dec:	f3bf 8f6f 	isb	sy
 8013df0:	f3bf 8f4f 	dsb	sy
 8013df4:	60bb      	str	r3, [r7, #8]
 8013df6:	bf00      	nop
 8013df8:	e7fe      	b.n	8013df8 <xQueueGenericReset+0x28>
 8013dfa:	f002 fb03 	bl	8016404 <vPortEnterCritical>
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681a      	ldr	r2, [r3, #0]
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e06:	68f9      	ldr	r1, [r7, #12]
 8013e08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013e0a:	fb01 f303 	mul.w	r3, r1, r3
 8013e0e:	441a      	add	r2, r3
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	609a      	str	r2, [r3, #8]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	2200      	movs	r2, #0
 8013e18:	639a      	str	r2, [r3, #56]	; 0x38
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	681a      	ldr	r2, [r3, #0]
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	605a      	str	r2, [r3, #4]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e2a:	3b01      	subs	r3, #1
 8013e2c:	68f9      	ldr	r1, [r7, #12]
 8013e2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013e30:	fb01 f303 	mul.w	r3, r1, r3
 8013e34:	441a      	add	r2, r3
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	60da      	str	r2, [r3, #12]
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	22ff      	movs	r2, #255	; 0xff
 8013e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	22ff      	movs	r2, #255	; 0xff
 8013e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d114      	bne.n	8013e7a <xQueueGenericReset+0xaa>
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	691b      	ldr	r3, [r3, #16]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d01a      	beq.n	8013e8e <xQueueGenericReset+0xbe>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	3310      	adds	r3, #16
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f001 fb1b 	bl	8015498 <xTaskRemoveFromEventList>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d012      	beq.n	8013e8e <xQueueGenericReset+0xbe>
 8013e68:	4b0c      	ldr	r3, [pc, #48]	; (8013e9c <xQueueGenericReset+0xcc>)
 8013e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e6e:	601a      	str	r2, [r3, #0]
 8013e70:	f3bf 8f4f 	dsb	sy
 8013e74:	f3bf 8f6f 	isb	sy
 8013e78:	e009      	b.n	8013e8e <xQueueGenericReset+0xbe>
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	3310      	adds	r3, #16
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7ff fef2 	bl	8013c68 <vListInitialise>
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	3324      	adds	r3, #36	; 0x24
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7ff feed 	bl	8013c68 <vListInitialise>
 8013e8e:	f002 fae9 	bl	8016464 <vPortExitCritical>
 8013e92:	2301      	movs	r3, #1
 8013e94:	4618      	mov	r0, r3
 8013e96:	3710      	adds	r7, #16
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	e000ed04 	.word	0xe000ed04

08013ea0 <xQueueGenericCreateStatic>:
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b08e      	sub	sp, #56	; 0x38
 8013ea4:	af02      	add	r7, sp, #8
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
 8013eac:	603b      	str	r3, [r7, #0]
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d10a      	bne.n	8013eca <xQueueGenericCreateStatic+0x2a>
 8013eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb8:	f383 8811 	msr	BASEPRI, r3
 8013ebc:	f3bf 8f6f 	isb	sy
 8013ec0:	f3bf 8f4f 	dsb	sy
 8013ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ec6:	bf00      	nop
 8013ec8:	e7fe      	b.n	8013ec8 <xQueueGenericCreateStatic+0x28>
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10a      	bne.n	8013ee6 <xQueueGenericCreateStatic+0x46>
 8013ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed4:	f383 8811 	msr	BASEPRI, r3
 8013ed8:	f3bf 8f6f 	isb	sy
 8013edc:	f3bf 8f4f 	dsb	sy
 8013ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ee2:	bf00      	nop
 8013ee4:	e7fe      	b.n	8013ee4 <xQueueGenericCreateStatic+0x44>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <xQueueGenericCreateStatic+0x52>
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d001      	beq.n	8013ef6 <xQueueGenericCreateStatic+0x56>
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e000      	b.n	8013ef8 <xQueueGenericCreateStatic+0x58>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d10a      	bne.n	8013f12 <xQueueGenericCreateStatic+0x72>
 8013efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f00:	f383 8811 	msr	BASEPRI, r3
 8013f04:	f3bf 8f6f 	isb	sy
 8013f08:	f3bf 8f4f 	dsb	sy
 8013f0c:	623b      	str	r3, [r7, #32]
 8013f0e:	bf00      	nop
 8013f10:	e7fe      	b.n	8013f10 <xQueueGenericCreateStatic+0x70>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d102      	bne.n	8013f1e <xQueueGenericCreateStatic+0x7e>
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d101      	bne.n	8013f22 <xQueueGenericCreateStatic+0x82>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	e000      	b.n	8013f24 <xQueueGenericCreateStatic+0x84>
 8013f22:	2300      	movs	r3, #0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10a      	bne.n	8013f3e <xQueueGenericCreateStatic+0x9e>
 8013f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f2c:	f383 8811 	msr	BASEPRI, r3
 8013f30:	f3bf 8f6f 	isb	sy
 8013f34:	f3bf 8f4f 	dsb	sy
 8013f38:	61fb      	str	r3, [r7, #28]
 8013f3a:	bf00      	nop
 8013f3c:	e7fe      	b.n	8013f3c <xQueueGenericCreateStatic+0x9c>
 8013f3e:	2350      	movs	r3, #80	; 0x50
 8013f40:	617b      	str	r3, [r7, #20]
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	2b50      	cmp	r3, #80	; 0x50
 8013f46:	d00a      	beq.n	8013f5e <xQueueGenericCreateStatic+0xbe>
 8013f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4c:	f383 8811 	msr	BASEPRI, r3
 8013f50:	f3bf 8f6f 	isb	sy
 8013f54:	f3bf 8f4f 	dsb	sy
 8013f58:	61bb      	str	r3, [r7, #24]
 8013f5a:	bf00      	nop
 8013f5c:	e7fe      	b.n	8013f5c <xQueueGenericCreateStatic+0xbc>
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00d      	beq.n	8013f86 <xQueueGenericCreateStatic+0xe6>
 8013f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013f72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f78:	9300      	str	r3, [sp, #0]
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	68b9      	ldr	r1, [r7, #8]
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	f000 f83f 	bl	8014004 <prvInitialiseNewQueue>
 8013f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3730      	adds	r7, #48	; 0x30
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <xQueueGenericCreate>:
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b08a      	sub	sp, #40	; 0x28
 8013f94:	af02      	add	r7, sp, #8
 8013f96:	60f8      	str	r0, [r7, #12]
 8013f98:	60b9      	str	r1, [r7, #8]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	71fb      	strb	r3, [r7, #7]
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d10a      	bne.n	8013fba <xQueueGenericCreate+0x2a>
 8013fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa8:	f383 8811 	msr	BASEPRI, r3
 8013fac:	f3bf 8f6f 	isb	sy
 8013fb0:	f3bf 8f4f 	dsb	sy
 8013fb4:	613b      	str	r3, [r7, #16]
 8013fb6:	bf00      	nop
 8013fb8:	e7fe      	b.n	8013fb8 <xQueueGenericCreate+0x28>
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	68ba      	ldr	r2, [r7, #8]
 8013fbe:	fb02 f303 	mul.w	r3, r2, r3
 8013fc2:	61fb      	str	r3, [r7, #28]
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	3350      	adds	r3, #80	; 0x50
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f002 fb3d 	bl	8016648 <pvPortMalloc>
 8013fce:	61b8      	str	r0, [r7, #24]
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d011      	beq.n	8013ffa <xQueueGenericCreate+0x6a>
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	617b      	str	r3, [r7, #20]
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	3350      	adds	r3, #80	; 0x50
 8013fde:	617b      	str	r3, [r7, #20]
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013fe8:	79fa      	ldrb	r2, [r7, #7]
 8013fea:	69bb      	ldr	r3, [r7, #24]
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	697a      	ldr	r2, [r7, #20]
 8013ff2:	68b9      	ldr	r1, [r7, #8]
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 f805 	bl	8014004 <prvInitialiseNewQueue>
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3720      	adds	r7, #32
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <prvInitialiseNewQueue>:
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
 8014010:	70fb      	strb	r3, [r7, #3]
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d103      	bne.n	8014020 <prvInitialiseNewQueue+0x1c>
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	69ba      	ldr	r2, [r7, #24]
 801401c:	601a      	str	r2, [r3, #0]
 801401e:	e002      	b.n	8014026 <prvInitialiseNewQueue+0x22>
 8014020:	69bb      	ldr	r3, [r7, #24]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	601a      	str	r2, [r3, #0]
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	63da      	str	r2, [r3, #60]	; 0x3c
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	68ba      	ldr	r2, [r7, #8]
 8014030:	641a      	str	r2, [r3, #64]	; 0x40
 8014032:	2101      	movs	r1, #1
 8014034:	69b8      	ldr	r0, [r7, #24]
 8014036:	f7ff fecb 	bl	8013dd0 <xQueueGenericReset>
 801403a:	69bb      	ldr	r3, [r7, #24]
 801403c:	78fa      	ldrb	r2, [r7, #3]
 801403e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8014042:	bf00      	nop
 8014044:	3710      	adds	r7, #16
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
	...

0801404c <xQueueGenericSend>:
 801404c:	b580      	push	{r7, lr}
 801404e:	b08e      	sub	sp, #56	; 0x38
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
 801405a:	2300      	movs	r3, #0
 801405c:	637b      	str	r3, [r7, #52]	; 0x34
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	633b      	str	r3, [r7, #48]	; 0x30
 8014062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014064:	2b00      	cmp	r3, #0
 8014066:	d10a      	bne.n	801407e <xQueueGenericSend+0x32>
 8014068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801406c:	f383 8811 	msr	BASEPRI, r3
 8014070:	f3bf 8f6f 	isb	sy
 8014074:	f3bf 8f4f 	dsb	sy
 8014078:	62bb      	str	r3, [r7, #40]	; 0x28
 801407a:	bf00      	nop
 801407c:	e7fe      	b.n	801407c <xQueueGenericSend+0x30>
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d103      	bne.n	801408c <xQueueGenericSend+0x40>
 8014084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <xQueueGenericSend+0x44>
 801408c:	2301      	movs	r3, #1
 801408e:	e000      	b.n	8014092 <xQueueGenericSend+0x46>
 8014090:	2300      	movs	r3, #0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10a      	bne.n	80140ac <xQueueGenericSend+0x60>
 8014096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801409a:	f383 8811 	msr	BASEPRI, r3
 801409e:	f3bf 8f6f 	isb	sy
 80140a2:	f3bf 8f4f 	dsb	sy
 80140a6:	627b      	str	r3, [r7, #36]	; 0x24
 80140a8:	bf00      	nop
 80140aa:	e7fe      	b.n	80140aa <xQueueGenericSend+0x5e>
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	d103      	bne.n	80140ba <xQueueGenericSend+0x6e>
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d101      	bne.n	80140be <xQueueGenericSend+0x72>
 80140ba:	2301      	movs	r3, #1
 80140bc:	e000      	b.n	80140c0 <xQueueGenericSend+0x74>
 80140be:	2300      	movs	r3, #0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d10a      	bne.n	80140da <xQueueGenericSend+0x8e>
 80140c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c8:	f383 8811 	msr	BASEPRI, r3
 80140cc:	f3bf 8f6f 	isb	sy
 80140d0:	f3bf 8f4f 	dsb	sy
 80140d4:	623b      	str	r3, [r7, #32]
 80140d6:	bf00      	nop
 80140d8:	e7fe      	b.n	80140d8 <xQueueGenericSend+0x8c>
 80140da:	f001 fbfd 	bl	80158d8 <xTaskGetSchedulerState>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d102      	bne.n	80140ea <xQueueGenericSend+0x9e>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d101      	bne.n	80140ee <xQueueGenericSend+0xa2>
 80140ea:	2301      	movs	r3, #1
 80140ec:	e000      	b.n	80140f0 <xQueueGenericSend+0xa4>
 80140ee:	2300      	movs	r3, #0
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d10a      	bne.n	801410a <xQueueGenericSend+0xbe>
 80140f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f8:	f383 8811 	msr	BASEPRI, r3
 80140fc:	f3bf 8f6f 	isb	sy
 8014100:	f3bf 8f4f 	dsb	sy
 8014104:	61fb      	str	r3, [r7, #28]
 8014106:	bf00      	nop
 8014108:	e7fe      	b.n	8014108 <xQueueGenericSend+0xbc>
 801410a:	f002 f97b 	bl	8016404 <vPortEnterCritical>
 801410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014116:	429a      	cmp	r2, r3
 8014118:	d302      	bcc.n	8014120 <xQueueGenericSend+0xd4>
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	2b02      	cmp	r3, #2
 801411e:	d129      	bne.n	8014174 <xQueueGenericSend+0x128>
 8014120:	683a      	ldr	r2, [r7, #0]
 8014122:	68b9      	ldr	r1, [r7, #8]
 8014124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014126:	f000 fa8b 	bl	8014640 <prvCopyDataToQueue>
 801412a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014130:	2b00      	cmp	r3, #0
 8014132:	d010      	beq.n	8014156 <xQueueGenericSend+0x10a>
 8014134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014136:	3324      	adds	r3, #36	; 0x24
 8014138:	4618      	mov	r0, r3
 801413a:	f001 f9ad 	bl	8015498 <xTaskRemoveFromEventList>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	d013      	beq.n	801416c <xQueueGenericSend+0x120>
 8014144:	4b3f      	ldr	r3, [pc, #252]	; (8014244 <xQueueGenericSend+0x1f8>)
 8014146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801414a:	601a      	str	r2, [r3, #0]
 801414c:	f3bf 8f4f 	dsb	sy
 8014150:	f3bf 8f6f 	isb	sy
 8014154:	e00a      	b.n	801416c <xQueueGenericSend+0x120>
 8014156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014158:	2b00      	cmp	r3, #0
 801415a:	d007      	beq.n	801416c <xQueueGenericSend+0x120>
 801415c:	4b39      	ldr	r3, [pc, #228]	; (8014244 <xQueueGenericSend+0x1f8>)
 801415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	f3bf 8f4f 	dsb	sy
 8014168:	f3bf 8f6f 	isb	sy
 801416c:	f002 f97a 	bl	8016464 <vPortExitCritical>
 8014170:	2301      	movs	r3, #1
 8014172:	e063      	b.n	801423c <xQueueGenericSend+0x1f0>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d103      	bne.n	8014182 <xQueueGenericSend+0x136>
 801417a:	f002 f973 	bl	8016464 <vPortExitCritical>
 801417e:	2300      	movs	r3, #0
 8014180:	e05c      	b.n	801423c <xQueueGenericSend+0x1f0>
 8014182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014184:	2b00      	cmp	r3, #0
 8014186:	d106      	bne.n	8014196 <xQueueGenericSend+0x14a>
 8014188:	f107 0314 	add.w	r3, r7, #20
 801418c:	4618      	mov	r0, r3
 801418e:	f001 fa49 	bl	8015624 <vTaskInternalSetTimeOutState>
 8014192:	2301      	movs	r3, #1
 8014194:	637b      	str	r3, [r7, #52]	; 0x34
 8014196:	f002 f965 	bl	8016464 <vPortExitCritical>
 801419a:	f000 ff15 	bl	8014fc8 <vTaskSuspendAll>
 801419e:	f002 f931 	bl	8016404 <vPortEnterCritical>
 80141a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80141a8:	b25b      	sxtb	r3, r3
 80141aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141ae:	d103      	bne.n	80141b8 <xQueueGenericSend+0x16c>
 80141b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b2:	2200      	movs	r2, #0
 80141b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80141b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141be:	b25b      	sxtb	r3, r3
 80141c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141c4:	d103      	bne.n	80141ce <xQueueGenericSend+0x182>
 80141c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c8:	2200      	movs	r2, #0
 80141ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80141ce:	f002 f949 	bl	8016464 <vPortExitCritical>
 80141d2:	1d3a      	adds	r2, r7, #4
 80141d4:	f107 0314 	add.w	r3, r7, #20
 80141d8:	4611      	mov	r1, r2
 80141da:	4618      	mov	r0, r3
 80141dc:	f001 fa38 	bl	8015650 <xTaskCheckForTimeOut>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d124      	bne.n	8014230 <xQueueGenericSend+0x1e4>
 80141e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141e8:	f000 fb22 	bl	8014830 <prvIsQueueFull>
 80141ec:	4603      	mov	r3, r0
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d018      	beq.n	8014224 <xQueueGenericSend+0x1d8>
 80141f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f4:	3310      	adds	r3, #16
 80141f6:	687a      	ldr	r2, [r7, #4]
 80141f8:	4611      	mov	r1, r2
 80141fa:	4618      	mov	r0, r3
 80141fc:	f001 f8c0 	bl	8015380 <vTaskPlaceOnEventList>
 8014200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014202:	f000 faad 	bl	8014760 <prvUnlockQueue>
 8014206:	f000 feed 	bl	8014fe4 <xTaskResumeAll>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	f47f af7c 	bne.w	801410a <xQueueGenericSend+0xbe>
 8014212:	4b0c      	ldr	r3, [pc, #48]	; (8014244 <xQueueGenericSend+0x1f8>)
 8014214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014218:	601a      	str	r2, [r3, #0]
 801421a:	f3bf 8f4f 	dsb	sy
 801421e:	f3bf 8f6f 	isb	sy
 8014222:	e772      	b.n	801410a <xQueueGenericSend+0xbe>
 8014224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014226:	f000 fa9b 	bl	8014760 <prvUnlockQueue>
 801422a:	f000 fedb 	bl	8014fe4 <xTaskResumeAll>
 801422e:	e76c      	b.n	801410a <xQueueGenericSend+0xbe>
 8014230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014232:	f000 fa95 	bl	8014760 <prvUnlockQueue>
 8014236:	f000 fed5 	bl	8014fe4 <xTaskResumeAll>
 801423a:	2300      	movs	r3, #0
 801423c:	4618      	mov	r0, r3
 801423e:	3738      	adds	r7, #56	; 0x38
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	e000ed04 	.word	0xe000ed04

08014248 <xQueueGenericSendFromISR>:
 8014248:	b580      	push	{r7, lr}
 801424a:	b090      	sub	sp, #64	; 0x40
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
 8014254:	603b      	str	r3, [r7, #0]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	63bb      	str	r3, [r7, #56]	; 0x38
 801425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425c:	2b00      	cmp	r3, #0
 801425e:	d10a      	bne.n	8014276 <xQueueGenericSendFromISR+0x2e>
 8014260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014264:	f383 8811 	msr	BASEPRI, r3
 8014268:	f3bf 8f6f 	isb	sy
 801426c:	f3bf 8f4f 	dsb	sy
 8014270:	62bb      	str	r3, [r7, #40]	; 0x28
 8014272:	bf00      	nop
 8014274:	e7fe      	b.n	8014274 <xQueueGenericSendFromISR+0x2c>
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d103      	bne.n	8014284 <xQueueGenericSendFromISR+0x3c>
 801427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014280:	2b00      	cmp	r3, #0
 8014282:	d101      	bne.n	8014288 <xQueueGenericSendFromISR+0x40>
 8014284:	2301      	movs	r3, #1
 8014286:	e000      	b.n	801428a <xQueueGenericSendFromISR+0x42>
 8014288:	2300      	movs	r3, #0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d10a      	bne.n	80142a4 <xQueueGenericSendFromISR+0x5c>
 801428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014292:	f383 8811 	msr	BASEPRI, r3
 8014296:	f3bf 8f6f 	isb	sy
 801429a:	f3bf 8f4f 	dsb	sy
 801429e:	627b      	str	r3, [r7, #36]	; 0x24
 80142a0:	bf00      	nop
 80142a2:	e7fe      	b.n	80142a2 <xQueueGenericSendFromISR+0x5a>
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d103      	bne.n	80142b2 <xQueueGenericSendFromISR+0x6a>
 80142aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d101      	bne.n	80142b6 <xQueueGenericSendFromISR+0x6e>
 80142b2:	2301      	movs	r3, #1
 80142b4:	e000      	b.n	80142b8 <xQueueGenericSendFromISR+0x70>
 80142b6:	2300      	movs	r3, #0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d10a      	bne.n	80142d2 <xQueueGenericSendFromISR+0x8a>
 80142bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c0:	f383 8811 	msr	BASEPRI, r3
 80142c4:	f3bf 8f6f 	isb	sy
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	623b      	str	r3, [r7, #32]
 80142ce:	bf00      	nop
 80142d0:	e7fe      	b.n	80142d0 <xQueueGenericSendFromISR+0x88>
 80142d2:	f002 f979 	bl	80165c8 <vPortValidateInterruptPriority>
 80142d6:	f3ef 8211 	mrs	r2, BASEPRI
 80142da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142de:	f383 8811 	msr	BASEPRI, r3
 80142e2:	f3bf 8f6f 	isb	sy
 80142e6:	f3bf 8f4f 	dsb	sy
 80142ea:	61fa      	str	r2, [r7, #28]
 80142ec:	61bb      	str	r3, [r7, #24]
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	637b      	str	r3, [r7, #52]	; 0x34
 80142f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80142f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d302      	bcc.n	8014304 <xQueueGenericSendFromISR+0xbc>
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	2b02      	cmp	r3, #2
 8014302:	d12f      	bne.n	8014364 <xQueueGenericSendFromISR+0x11c>
 8014304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801430a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014314:	683a      	ldr	r2, [r7, #0]
 8014316:	68b9      	ldr	r1, [r7, #8]
 8014318:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801431a:	f000 f991 	bl	8014640 <prvCopyDataToQueue>
 801431e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014326:	d112      	bne.n	801434e <xQueueGenericSendFromISR+0x106>
 8014328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801432c:	2b00      	cmp	r3, #0
 801432e:	d016      	beq.n	801435e <xQueueGenericSendFromISR+0x116>
 8014330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014332:	3324      	adds	r3, #36	; 0x24
 8014334:	4618      	mov	r0, r3
 8014336:	f001 f8af 	bl	8015498 <xTaskRemoveFromEventList>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d00e      	beq.n	801435e <xQueueGenericSendFromISR+0x116>
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00b      	beq.n	801435e <xQueueGenericSendFromISR+0x116>
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2201      	movs	r2, #1
 801434a:	601a      	str	r2, [r3, #0]
 801434c:	e007      	b.n	801435e <xQueueGenericSendFromISR+0x116>
 801434e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014352:	3301      	adds	r3, #1
 8014354:	b2db      	uxtb	r3, r3
 8014356:	b25a      	sxtb	r2, r3
 8014358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801435e:	2301      	movs	r3, #1
 8014360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014362:	e001      	b.n	8014368 <xQueueGenericSendFromISR+0x120>
 8014364:	2300      	movs	r3, #0
 8014366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801436a:	617b      	str	r3, [r7, #20]
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	f383 8811 	msr	BASEPRI, r3
 8014372:	bf00      	nop
 8014374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014376:	4618      	mov	r0, r3
 8014378:	3740      	adds	r7, #64	; 0x40
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
	...

08014380 <xQueueReceive>:
 8014380:	b580      	push	{r7, lr}
 8014382:	b08c      	sub	sp, #48	; 0x30
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	607a      	str	r2, [r7, #4]
 801438c:	2300      	movs	r3, #0
 801438e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	62bb      	str	r3, [r7, #40]	; 0x28
 8014394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014396:	2b00      	cmp	r3, #0
 8014398:	d10a      	bne.n	80143b0 <xQueueReceive+0x30>
 801439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439e:	f383 8811 	msr	BASEPRI, r3
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	f3bf 8f4f 	dsb	sy
 80143aa:	623b      	str	r3, [r7, #32]
 80143ac:	bf00      	nop
 80143ae:	e7fe      	b.n	80143ae <xQueueReceive+0x2e>
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d103      	bne.n	80143be <xQueueReceive+0x3e>
 80143b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <xQueueReceive+0x42>
 80143be:	2301      	movs	r3, #1
 80143c0:	e000      	b.n	80143c4 <xQueueReceive+0x44>
 80143c2:	2300      	movs	r3, #0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10a      	bne.n	80143de <xQueueReceive+0x5e>
 80143c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143cc:	f383 8811 	msr	BASEPRI, r3
 80143d0:	f3bf 8f6f 	isb	sy
 80143d4:	f3bf 8f4f 	dsb	sy
 80143d8:	61fb      	str	r3, [r7, #28]
 80143da:	bf00      	nop
 80143dc:	e7fe      	b.n	80143dc <xQueueReceive+0x5c>
 80143de:	f001 fa7b 	bl	80158d8 <xTaskGetSchedulerState>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d102      	bne.n	80143ee <xQueueReceive+0x6e>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d101      	bne.n	80143f2 <xQueueReceive+0x72>
 80143ee:	2301      	movs	r3, #1
 80143f0:	e000      	b.n	80143f4 <xQueueReceive+0x74>
 80143f2:	2300      	movs	r3, #0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d10a      	bne.n	801440e <xQueueReceive+0x8e>
 80143f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fc:	f383 8811 	msr	BASEPRI, r3
 8014400:	f3bf 8f6f 	isb	sy
 8014404:	f3bf 8f4f 	dsb	sy
 8014408:	61bb      	str	r3, [r7, #24]
 801440a:	bf00      	nop
 801440c:	e7fe      	b.n	801440c <xQueueReceive+0x8c>
 801440e:	f001 fff9 	bl	8016404 <vPortEnterCritical>
 8014412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014416:	627b      	str	r3, [r7, #36]	; 0x24
 8014418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441a:	2b00      	cmp	r3, #0
 801441c:	d01f      	beq.n	801445e <xQueueReceive+0xde>
 801441e:	68b9      	ldr	r1, [r7, #8]
 8014420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014422:	f000 f977 	bl	8014714 <prvCopyDataFromQueue>
 8014426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014428:	1e5a      	subs	r2, r3, #1
 801442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442c:	639a      	str	r2, [r3, #56]	; 0x38
 801442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014430:	691b      	ldr	r3, [r3, #16]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d00f      	beq.n	8014456 <xQueueReceive+0xd6>
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	3310      	adds	r3, #16
 801443a:	4618      	mov	r0, r3
 801443c:	f001 f82c 	bl	8015498 <xTaskRemoveFromEventList>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d007      	beq.n	8014456 <xQueueReceive+0xd6>
 8014446:	4b3d      	ldr	r3, [pc, #244]	; (801453c <xQueueReceive+0x1bc>)
 8014448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801444c:	601a      	str	r2, [r3, #0]
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	f3bf 8f6f 	isb	sy
 8014456:	f002 f805 	bl	8016464 <vPortExitCritical>
 801445a:	2301      	movs	r3, #1
 801445c:	e069      	b.n	8014532 <xQueueReceive+0x1b2>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d103      	bne.n	801446c <xQueueReceive+0xec>
 8014464:	f001 fffe 	bl	8016464 <vPortExitCritical>
 8014468:	2300      	movs	r3, #0
 801446a:	e062      	b.n	8014532 <xQueueReceive+0x1b2>
 801446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446e:	2b00      	cmp	r3, #0
 8014470:	d106      	bne.n	8014480 <xQueueReceive+0x100>
 8014472:	f107 0310 	add.w	r3, r7, #16
 8014476:	4618      	mov	r0, r3
 8014478:	f001 f8d4 	bl	8015624 <vTaskInternalSetTimeOutState>
 801447c:	2301      	movs	r3, #1
 801447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014480:	f001 fff0 	bl	8016464 <vPortExitCritical>
 8014484:	f000 fda0 	bl	8014fc8 <vTaskSuspendAll>
 8014488:	f001 ffbc 	bl	8016404 <vPortEnterCritical>
 801448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014492:	b25b      	sxtb	r3, r3
 8014494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014498:	d103      	bne.n	80144a2 <xQueueReceive+0x122>
 801449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801449c:	2200      	movs	r2, #0
 801449e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144a8:	b25b      	sxtb	r3, r3
 80144aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144ae:	d103      	bne.n	80144b8 <xQueueReceive+0x138>
 80144b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b2:	2200      	movs	r2, #0
 80144b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80144b8:	f001 ffd4 	bl	8016464 <vPortExitCritical>
 80144bc:	1d3a      	adds	r2, r7, #4
 80144be:	f107 0310 	add.w	r3, r7, #16
 80144c2:	4611      	mov	r1, r2
 80144c4:	4618      	mov	r0, r3
 80144c6:	f001 f8c3 	bl	8015650 <xTaskCheckForTimeOut>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d123      	bne.n	8014518 <xQueueReceive+0x198>
 80144d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144d2:	f000 f997 	bl	8014804 <prvIsQueueEmpty>
 80144d6:	4603      	mov	r3, r0
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d017      	beq.n	801450c <xQueueReceive+0x18c>
 80144dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144de:	3324      	adds	r3, #36	; 0x24
 80144e0:	687a      	ldr	r2, [r7, #4]
 80144e2:	4611      	mov	r1, r2
 80144e4:	4618      	mov	r0, r3
 80144e6:	f000 ff4b 	bl	8015380 <vTaskPlaceOnEventList>
 80144ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80144ec:	f000 f938 	bl	8014760 <prvUnlockQueue>
 80144f0:	f000 fd78 	bl	8014fe4 <xTaskResumeAll>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d189      	bne.n	801440e <xQueueReceive+0x8e>
 80144fa:	4b10      	ldr	r3, [pc, #64]	; (801453c <xQueueReceive+0x1bc>)
 80144fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014500:	601a      	str	r2, [r3, #0]
 8014502:	f3bf 8f4f 	dsb	sy
 8014506:	f3bf 8f6f 	isb	sy
 801450a:	e780      	b.n	801440e <xQueueReceive+0x8e>
 801450c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801450e:	f000 f927 	bl	8014760 <prvUnlockQueue>
 8014512:	f000 fd67 	bl	8014fe4 <xTaskResumeAll>
 8014516:	e77a      	b.n	801440e <xQueueReceive+0x8e>
 8014518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801451a:	f000 f921 	bl	8014760 <prvUnlockQueue>
 801451e:	f000 fd61 	bl	8014fe4 <xTaskResumeAll>
 8014522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014524:	f000 f96e 	bl	8014804 <prvIsQueueEmpty>
 8014528:	4603      	mov	r3, r0
 801452a:	2b00      	cmp	r3, #0
 801452c:	f43f af6f 	beq.w	801440e <xQueueReceive+0x8e>
 8014530:	2300      	movs	r3, #0
 8014532:	4618      	mov	r0, r3
 8014534:	3730      	adds	r7, #48	; 0x30
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop
 801453c:	e000ed04 	.word	0xe000ed04

08014540 <xQueueReceiveFromISR>:
 8014540:	b580      	push	{r7, lr}
 8014542:	b08e      	sub	sp, #56	; 0x38
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	633b      	str	r3, [r7, #48]	; 0x30
 8014550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014552:	2b00      	cmp	r3, #0
 8014554:	d10a      	bne.n	801456c <xQueueReceiveFromISR+0x2c>
 8014556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455a:	f383 8811 	msr	BASEPRI, r3
 801455e:	f3bf 8f6f 	isb	sy
 8014562:	f3bf 8f4f 	dsb	sy
 8014566:	623b      	str	r3, [r7, #32]
 8014568:	bf00      	nop
 801456a:	e7fe      	b.n	801456a <xQueueReceiveFromISR+0x2a>
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d103      	bne.n	801457a <xQueueReceiveFromISR+0x3a>
 8014572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014576:	2b00      	cmp	r3, #0
 8014578:	d101      	bne.n	801457e <xQueueReceiveFromISR+0x3e>
 801457a:	2301      	movs	r3, #1
 801457c:	e000      	b.n	8014580 <xQueueReceiveFromISR+0x40>
 801457e:	2300      	movs	r3, #0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d10a      	bne.n	801459a <xQueueReceiveFromISR+0x5a>
 8014584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014588:	f383 8811 	msr	BASEPRI, r3
 801458c:	f3bf 8f6f 	isb	sy
 8014590:	f3bf 8f4f 	dsb	sy
 8014594:	61fb      	str	r3, [r7, #28]
 8014596:	bf00      	nop
 8014598:	e7fe      	b.n	8014598 <xQueueReceiveFromISR+0x58>
 801459a:	f002 f815 	bl	80165c8 <vPortValidateInterruptPriority>
 801459e:	f3ef 8211 	mrs	r2, BASEPRI
 80145a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a6:	f383 8811 	msr	BASEPRI, r3
 80145aa:	f3bf 8f6f 	isb	sy
 80145ae:	f3bf 8f4f 	dsb	sy
 80145b2:	61ba      	str	r2, [r7, #24]
 80145b4:	617b      	str	r3, [r7, #20]
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80145ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145be:	62bb      	str	r3, [r7, #40]	; 0x28
 80145c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d02f      	beq.n	8014626 <xQueueReceiveFromISR+0xe6>
 80145c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80145d0:	68b9      	ldr	r1, [r7, #8]
 80145d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145d4:	f000 f89e 	bl	8014714 <prvCopyDataFromQueue>
 80145d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145da:	1e5a      	subs	r2, r3, #1
 80145dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145de:	639a      	str	r2, [r3, #56]	; 0x38
 80145e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80145e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145e8:	d112      	bne.n	8014610 <xQueueReceiveFromISR+0xd0>
 80145ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ec:	691b      	ldr	r3, [r3, #16]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d016      	beq.n	8014620 <xQueueReceiveFromISR+0xe0>
 80145f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f4:	3310      	adds	r3, #16
 80145f6:	4618      	mov	r0, r3
 80145f8:	f000 ff4e 	bl	8015498 <xTaskRemoveFromEventList>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d00e      	beq.n	8014620 <xQueueReceiveFromISR+0xe0>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d00b      	beq.n	8014620 <xQueueReceiveFromISR+0xe0>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2201      	movs	r2, #1
 801460c:	601a      	str	r2, [r3, #0]
 801460e:	e007      	b.n	8014620 <xQueueReceiveFromISR+0xe0>
 8014610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014614:	3301      	adds	r3, #1
 8014616:	b2db      	uxtb	r3, r3
 8014618:	b25a      	sxtb	r2, r3
 801461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014620:	2301      	movs	r3, #1
 8014622:	637b      	str	r3, [r7, #52]	; 0x34
 8014624:	e001      	b.n	801462a <xQueueReceiveFromISR+0xea>
 8014626:	2300      	movs	r3, #0
 8014628:	637b      	str	r3, [r7, #52]	; 0x34
 801462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801462c:	613b      	str	r3, [r7, #16]
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	f383 8811 	msr	BASEPRI, r3
 8014634:	bf00      	nop
 8014636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014638:	4618      	mov	r0, r3
 801463a:	3738      	adds	r7, #56	; 0x38
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <prvCopyDataToQueue>:
 8014640:	b580      	push	{r7, lr}
 8014642:	b086      	sub	sp, #24
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
 801464c:	2300      	movs	r3, #0
 801464e:	617b      	str	r3, [r7, #20]
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014654:	613b      	str	r3, [r7, #16]
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801465a:	2b00      	cmp	r3, #0
 801465c:	d10d      	bne.n	801467a <prvCopyDataToQueue+0x3a>
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d14d      	bne.n	8014702 <prvCopyDataToQueue+0xc2>
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	689b      	ldr	r3, [r3, #8]
 801466a:	4618      	mov	r0, r3
 801466c:	f001 f952 	bl	8015914 <xTaskPriorityDisinherit>
 8014670:	6178      	str	r0, [r7, #20]
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	2200      	movs	r2, #0
 8014676:	609a      	str	r2, [r3, #8]
 8014678:	e043      	b.n	8014702 <prvCopyDataToQueue+0xc2>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d119      	bne.n	80146b4 <prvCopyDataToQueue+0x74>
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	6858      	ldr	r0, [r3, #4]
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014688:	461a      	mov	r2, r3
 801468a:	68b9      	ldr	r1, [r7, #8]
 801468c:	f002 fa00 	bl	8016a90 <memcpy>
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	685a      	ldr	r2, [r3, #4]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014698:	441a      	add	r2, r3
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	605a      	str	r2, [r3, #4]
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	685a      	ldr	r2, [r3, #4]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	689b      	ldr	r3, [r3, #8]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d32b      	bcc.n	8014702 <prvCopyDataToQueue+0xc2>
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	605a      	str	r2, [r3, #4]
 80146b2:	e026      	b.n	8014702 <prvCopyDataToQueue+0xc2>
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	68d8      	ldr	r0, [r3, #12]
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146bc:	461a      	mov	r2, r3
 80146be:	68b9      	ldr	r1, [r7, #8]
 80146c0:	f002 f9e6 	bl	8016a90 <memcpy>
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	68da      	ldr	r2, [r3, #12]
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146cc:	425b      	negs	r3, r3
 80146ce:	441a      	add	r2, r3
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	60da      	str	r2, [r3, #12]
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	68da      	ldr	r2, [r3, #12]
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	429a      	cmp	r2, r3
 80146de:	d207      	bcs.n	80146f0 <prvCopyDataToQueue+0xb0>
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	689a      	ldr	r2, [r3, #8]
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146e8:	425b      	negs	r3, r3
 80146ea:	441a      	add	r2, r3
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	60da      	str	r2, [r3, #12]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2b02      	cmp	r3, #2
 80146f4:	d105      	bne.n	8014702 <prvCopyDataToQueue+0xc2>
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d002      	beq.n	8014702 <prvCopyDataToQueue+0xc2>
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	3b01      	subs	r3, #1
 8014700:	613b      	str	r3, [r7, #16]
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	1c5a      	adds	r2, r3, #1
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	639a      	str	r2, [r3, #56]	; 0x38
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	4618      	mov	r0, r3
 801470e:	3718      	adds	r7, #24
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <prvCopyDataFromQueue>:
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014722:	2b00      	cmp	r3, #0
 8014724:	d018      	beq.n	8014758 <prvCopyDataFromQueue+0x44>
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	68da      	ldr	r2, [r3, #12]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801472e:	441a      	add	r2, r3
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	60da      	str	r2, [r3, #12]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	68da      	ldr	r2, [r3, #12]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	689b      	ldr	r3, [r3, #8]
 801473c:	429a      	cmp	r2, r3
 801473e:	d303      	bcc.n	8014748 <prvCopyDataFromQueue+0x34>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681a      	ldr	r2, [r3, #0]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	60da      	str	r2, [r3, #12]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	68d9      	ldr	r1, [r3, #12]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014750:	461a      	mov	r2, r3
 8014752:	6838      	ldr	r0, [r7, #0]
 8014754:	f002 f99c 	bl	8016a90 <memcpy>
 8014758:	bf00      	nop
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <prvUnlockQueue>:
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	f001 fe4c 	bl	8016404 <vPortEnterCritical>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014772:	73fb      	strb	r3, [r7, #15]
 8014774:	e011      	b.n	801479a <prvUnlockQueue+0x3a>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801477a:	2b00      	cmp	r3, #0
 801477c:	d012      	beq.n	80147a4 <prvUnlockQueue+0x44>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	3324      	adds	r3, #36	; 0x24
 8014782:	4618      	mov	r0, r3
 8014784:	f000 fe88 	bl	8015498 <xTaskRemoveFromEventList>
 8014788:	4603      	mov	r3, r0
 801478a:	2b00      	cmp	r3, #0
 801478c:	d001      	beq.n	8014792 <prvUnlockQueue+0x32>
 801478e:	f000 ffc1 	bl	8015714 <vTaskMissedYield>
 8014792:	7bfb      	ldrb	r3, [r7, #15]
 8014794:	3b01      	subs	r3, #1
 8014796:	b2db      	uxtb	r3, r3
 8014798:	73fb      	strb	r3, [r7, #15]
 801479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	dce9      	bgt.n	8014776 <prvUnlockQueue+0x16>
 80147a2:	e000      	b.n	80147a6 <prvUnlockQueue+0x46>
 80147a4:	bf00      	nop
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	22ff      	movs	r2, #255	; 0xff
 80147aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80147ae:	f001 fe59 	bl	8016464 <vPortExitCritical>
 80147b2:	f001 fe27 	bl	8016404 <vPortEnterCritical>
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80147bc:	73bb      	strb	r3, [r7, #14]
 80147be:	e011      	b.n	80147e4 <prvUnlockQueue+0x84>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	691b      	ldr	r3, [r3, #16]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d012      	beq.n	80147ee <prvUnlockQueue+0x8e>
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	3310      	adds	r3, #16
 80147cc:	4618      	mov	r0, r3
 80147ce:	f000 fe63 	bl	8015498 <xTaskRemoveFromEventList>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d001      	beq.n	80147dc <prvUnlockQueue+0x7c>
 80147d8:	f000 ff9c 	bl	8015714 <vTaskMissedYield>
 80147dc:	7bbb      	ldrb	r3, [r7, #14]
 80147de:	3b01      	subs	r3, #1
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	73bb      	strb	r3, [r7, #14]
 80147e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	dce9      	bgt.n	80147c0 <prvUnlockQueue+0x60>
 80147ec:	e000      	b.n	80147f0 <prvUnlockQueue+0x90>
 80147ee:	bf00      	nop
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	22ff      	movs	r2, #255	; 0xff
 80147f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147f8:	f001 fe34 	bl	8016464 <vPortExitCritical>
 80147fc:	bf00      	nop
 80147fe:	3710      	adds	r7, #16
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <prvIsQueueEmpty>:
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	f001 fdfa 	bl	8016404 <vPortEnterCritical>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014814:	2b00      	cmp	r3, #0
 8014816:	d102      	bne.n	801481e <prvIsQueueEmpty+0x1a>
 8014818:	2301      	movs	r3, #1
 801481a:	60fb      	str	r3, [r7, #12]
 801481c:	e001      	b.n	8014822 <prvIsQueueEmpty+0x1e>
 801481e:	2300      	movs	r3, #0
 8014820:	60fb      	str	r3, [r7, #12]
 8014822:	f001 fe1f 	bl	8016464 <vPortExitCritical>
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	4618      	mov	r0, r3
 801482a:	3710      	adds	r7, #16
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}

08014830 <prvIsQueueFull>:
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	f001 fde4 	bl	8016404 <vPortEnterCritical>
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014844:	429a      	cmp	r2, r3
 8014846:	d102      	bne.n	801484e <prvIsQueueFull+0x1e>
 8014848:	2301      	movs	r3, #1
 801484a:	60fb      	str	r3, [r7, #12]
 801484c:	e001      	b.n	8014852 <prvIsQueueFull+0x22>
 801484e:	2300      	movs	r3, #0
 8014850:	60fb      	str	r3, [r7, #12]
 8014852:	f001 fe07 	bl	8016464 <vPortExitCritical>
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	4618      	mov	r0, r3
 801485a:	3710      	adds	r7, #16
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <vQueueAddToRegistry>:
 8014860:	b480      	push	{r7}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
 801486a:	2300      	movs	r3, #0
 801486c:	60fb      	str	r3, [r7, #12]
 801486e:	e014      	b.n	801489a <vQueueAddToRegistry+0x3a>
 8014870:	4a0f      	ldr	r2, [pc, #60]	; (80148b0 <vQueueAddToRegistry+0x50>)
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d10b      	bne.n	8014894 <vQueueAddToRegistry+0x34>
 801487c:	490c      	ldr	r1, [pc, #48]	; (80148b0 <vQueueAddToRegistry+0x50>)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	683a      	ldr	r2, [r7, #0]
 8014882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014886:	4a0a      	ldr	r2, [pc, #40]	; (80148b0 <vQueueAddToRegistry+0x50>)
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	00db      	lsls	r3, r3, #3
 801488c:	4413      	add	r3, r2
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	605a      	str	r2, [r3, #4]
 8014892:	e006      	b.n	80148a2 <vQueueAddToRegistry+0x42>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	3301      	adds	r3, #1
 8014898:	60fb      	str	r3, [r7, #12]
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2b07      	cmp	r3, #7
 801489e:	d9e7      	bls.n	8014870 <vQueueAddToRegistry+0x10>
 80148a0:	bf00      	nop
 80148a2:	bf00      	nop
 80148a4:	3714      	adds	r7, #20
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	240017ec 	.word	0x240017ec

080148b4 <vQueueWaitForMessageRestricted>:
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	60b9      	str	r1, [r7, #8]
 80148be:	607a      	str	r2, [r7, #4]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	617b      	str	r3, [r7, #20]
 80148c4:	f001 fd9e 	bl	8016404 <vPortEnterCritical>
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148ce:	b25b      	sxtb	r3, r3
 80148d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148d4:	d103      	bne.n	80148de <vQueueWaitForMessageRestricted+0x2a>
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	2200      	movs	r2, #0
 80148da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148e4:	b25b      	sxtb	r3, r3
 80148e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148ea:	d103      	bne.n	80148f4 <vQueueWaitForMessageRestricted+0x40>
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	2200      	movs	r2, #0
 80148f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148f4:	f001 fdb6 	bl	8016464 <vPortExitCritical>
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d106      	bne.n	801490e <vQueueWaitForMessageRestricted+0x5a>
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	3324      	adds	r3, #36	; 0x24
 8014904:	687a      	ldr	r2, [r7, #4]
 8014906:	68b9      	ldr	r1, [r7, #8]
 8014908:	4618      	mov	r0, r3
 801490a:	f000 fd99 	bl	8015440 <vTaskPlaceOnEventListRestricted>
 801490e:	6978      	ldr	r0, [r7, #20]
 8014910:	f7ff ff26 	bl	8014760 <prvUnlockQueue>
 8014914:	bf00      	nop
 8014916:	3718      	adds	r7, #24
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <xTaskCreateStatic>:
 801491c:	b580      	push	{r7, lr}
 801491e:	b08e      	sub	sp, #56	; 0x38
 8014920:	af04      	add	r7, sp, #16
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	607a      	str	r2, [r7, #4]
 8014928:	603b      	str	r3, [r7, #0]
 801492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801492c:	2b00      	cmp	r3, #0
 801492e:	d10a      	bne.n	8014946 <xTaskCreateStatic+0x2a>
 8014930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014934:	f383 8811 	msr	BASEPRI, r3
 8014938:	f3bf 8f6f 	isb	sy
 801493c:	f3bf 8f4f 	dsb	sy
 8014940:	623b      	str	r3, [r7, #32]
 8014942:	bf00      	nop
 8014944:	e7fe      	b.n	8014944 <xTaskCreateStatic+0x28>
 8014946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014948:	2b00      	cmp	r3, #0
 801494a:	d10a      	bne.n	8014962 <xTaskCreateStatic+0x46>
 801494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014950:	f383 8811 	msr	BASEPRI, r3
 8014954:	f3bf 8f6f 	isb	sy
 8014958:	f3bf 8f4f 	dsb	sy
 801495c:	61fb      	str	r3, [r7, #28]
 801495e:	bf00      	nop
 8014960:	e7fe      	b.n	8014960 <xTaskCreateStatic+0x44>
 8014962:	235c      	movs	r3, #92	; 0x5c
 8014964:	613b      	str	r3, [r7, #16]
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	2b5c      	cmp	r3, #92	; 0x5c
 801496a:	d00a      	beq.n	8014982 <xTaskCreateStatic+0x66>
 801496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014970:	f383 8811 	msr	BASEPRI, r3
 8014974:	f3bf 8f6f 	isb	sy
 8014978:	f3bf 8f4f 	dsb	sy
 801497c:	61bb      	str	r3, [r7, #24]
 801497e:	bf00      	nop
 8014980:	e7fe      	b.n	8014980 <xTaskCreateStatic+0x64>
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014986:	2b00      	cmp	r3, #0
 8014988:	d01e      	beq.n	80149c8 <xTaskCreateStatic+0xac>
 801498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801498c:	2b00      	cmp	r3, #0
 801498e:	d01b      	beq.n	80149c8 <xTaskCreateStatic+0xac>
 8014990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014992:	627b      	str	r3, [r7, #36]	; 0x24
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014998:	631a      	str	r2, [r3, #48]	; 0x30
 801499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499c:	2202      	movs	r2, #2
 801499e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80149a2:	2300      	movs	r3, #0
 80149a4:	9303      	str	r3, [sp, #12]
 80149a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a8:	9302      	str	r3, [sp, #8]
 80149aa:	f107 0314 	add.w	r3, r7, #20
 80149ae:	9301      	str	r3, [sp, #4]
 80149b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	68b9      	ldr	r1, [r7, #8]
 80149ba:	68f8      	ldr	r0, [r7, #12]
 80149bc:	f000 f850 	bl	8014a60 <prvInitialiseNewTask>
 80149c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149c2:	f000 f8dd 	bl	8014b80 <prvAddNewTaskToReadyList>
 80149c6:	e001      	b.n	80149cc <xTaskCreateStatic+0xb0>
 80149c8:	2300      	movs	r3, #0
 80149ca:	617b      	str	r3, [r7, #20]
 80149cc:	697b      	ldr	r3, [r7, #20]
 80149ce:	4618      	mov	r0, r3
 80149d0:	3728      	adds	r7, #40	; 0x28
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <xTaskCreate>:
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b08c      	sub	sp, #48	; 0x30
 80149da:	af04      	add	r7, sp, #16
 80149dc:	60f8      	str	r0, [r7, #12]
 80149de:	60b9      	str	r1, [r7, #8]
 80149e0:	603b      	str	r3, [r7, #0]
 80149e2:	4613      	mov	r3, r2
 80149e4:	80fb      	strh	r3, [r7, #6]
 80149e6:	88fb      	ldrh	r3, [r7, #6]
 80149e8:	009b      	lsls	r3, r3, #2
 80149ea:	4618      	mov	r0, r3
 80149ec:	f001 fe2c 	bl	8016648 <pvPortMalloc>
 80149f0:	6178      	str	r0, [r7, #20]
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00e      	beq.n	8014a16 <xTaskCreate+0x40>
 80149f8:	205c      	movs	r0, #92	; 0x5c
 80149fa:	f001 fe25 	bl	8016648 <pvPortMalloc>
 80149fe:	61f8      	str	r0, [r7, #28]
 8014a00:	69fb      	ldr	r3, [r7, #28]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d003      	beq.n	8014a0e <xTaskCreate+0x38>
 8014a06:	69fb      	ldr	r3, [r7, #28]
 8014a08:	697a      	ldr	r2, [r7, #20]
 8014a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8014a0c:	e005      	b.n	8014a1a <xTaskCreate+0x44>
 8014a0e:	6978      	ldr	r0, [r7, #20]
 8014a10:	f001 fee6 	bl	80167e0 <vPortFree>
 8014a14:	e001      	b.n	8014a1a <xTaskCreate+0x44>
 8014a16:	2300      	movs	r3, #0
 8014a18:	61fb      	str	r3, [r7, #28]
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d017      	beq.n	8014a50 <xTaskCreate+0x7a>
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	2200      	movs	r2, #0
 8014a24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8014a28:	88fa      	ldrh	r2, [r7, #6]
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	9303      	str	r3, [sp, #12]
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	9302      	str	r3, [sp, #8]
 8014a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a34:	9301      	str	r3, [sp, #4]
 8014a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a38:	9300      	str	r3, [sp, #0]
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	68b9      	ldr	r1, [r7, #8]
 8014a3e:	68f8      	ldr	r0, [r7, #12]
 8014a40:	f000 f80e 	bl	8014a60 <prvInitialiseNewTask>
 8014a44:	69f8      	ldr	r0, [r7, #28]
 8014a46:	f000 f89b 	bl	8014b80 <prvAddNewTaskToReadyList>
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	61bb      	str	r3, [r7, #24]
 8014a4e:	e002      	b.n	8014a56 <xTaskCreate+0x80>
 8014a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a54:	61bb      	str	r3, [r7, #24]
 8014a56:	69bb      	ldr	r3, [r7, #24]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	3720      	adds	r7, #32
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <prvInitialiseNewTask>:
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b088      	sub	sp, #32
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	607a      	str	r2, [r7, #4]
 8014a6c:	603b      	str	r3, [r7, #0]
 8014a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	461a      	mov	r2, r3
 8014a78:	21a5      	movs	r1, #165	; 0xa5
 8014a7a:	f002 f817 	bl	8016aac <memset>
 8014a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a82:	6879      	ldr	r1, [r7, #4]
 8014a84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014a88:	440b      	add	r3, r1
 8014a8a:	009b      	lsls	r3, r3, #2
 8014a8c:	4413      	add	r3, r2
 8014a8e:	61bb      	str	r3, [r7, #24]
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	f023 0307 	bic.w	r3, r3, #7
 8014a96:	61bb      	str	r3, [r7, #24]
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	f003 0307 	and.w	r3, r3, #7
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d00a      	beq.n	8014ab8 <prvInitialiseNewTask+0x58>
 8014aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa6:	f383 8811 	msr	BASEPRI, r3
 8014aaa:	f3bf 8f6f 	isb	sy
 8014aae:	f3bf 8f4f 	dsb	sy
 8014ab2:	617b      	str	r3, [r7, #20]
 8014ab4:	bf00      	nop
 8014ab6:	e7fe      	b.n	8014ab6 <prvInitialiseNewTask+0x56>
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d01f      	beq.n	8014afe <prvInitialiseNewTask+0x9e>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	61fb      	str	r3, [r7, #28]
 8014ac2:	e012      	b.n	8014aea <prvInitialiseNewTask+0x8a>
 8014ac4:	68ba      	ldr	r2, [r7, #8]
 8014ac6:	69fb      	ldr	r3, [r7, #28]
 8014ac8:	4413      	add	r3, r2
 8014aca:	7819      	ldrb	r1, [r3, #0]
 8014acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ace:	69fb      	ldr	r3, [r7, #28]
 8014ad0:	4413      	add	r3, r2
 8014ad2:	3334      	adds	r3, #52	; 0x34
 8014ad4:	460a      	mov	r2, r1
 8014ad6:	701a      	strb	r2, [r3, #0]
 8014ad8:	68ba      	ldr	r2, [r7, #8]
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	4413      	add	r3, r2
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d006      	beq.n	8014af2 <prvInitialiseNewTask+0x92>
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	61fb      	str	r3, [r7, #28]
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	2b0f      	cmp	r3, #15
 8014aee:	d9e9      	bls.n	8014ac4 <prvInitialiseNewTask+0x64>
 8014af0:	e000      	b.n	8014af4 <prvInitialiseNewTask+0x94>
 8014af2:	bf00      	nop
 8014af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af6:	2200      	movs	r2, #0
 8014af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014afc:	e003      	b.n	8014b06 <prvInitialiseNewTask+0xa6>
 8014afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b00:	2200      	movs	r2, #0
 8014b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b08:	2b37      	cmp	r3, #55	; 0x37
 8014b0a:	d901      	bls.n	8014b10 <prvInitialiseNewTask+0xb0>
 8014b0c:	2337      	movs	r3, #55	; 0x37
 8014b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b14:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8014b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1e:	2200      	movs	r2, #0
 8014b20:	651a      	str	r2, [r3, #80]	; 0x50
 8014b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b24:	3304      	adds	r3, #4
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7ff f8be 	bl	8013ca8 <vListInitialiseItem>
 8014b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2e:	3318      	adds	r3, #24
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff f8b9 	bl	8013ca8 <vListInitialiseItem>
 8014b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b3a:	611a      	str	r2, [r3, #16]
 8014b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b44:	619a      	str	r2, [r3, #24]
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8014b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b4e:	2200      	movs	r2, #0
 8014b50:	655a      	str	r2, [r3, #84]	; 0x54
 8014b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b54:	2200      	movs	r2, #0
 8014b56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014b5a:	683a      	ldr	r2, [r7, #0]
 8014b5c:	68f9      	ldr	r1, [r7, #12]
 8014b5e:	69b8      	ldr	r0, [r7, #24]
 8014b60:	f001 fb20 	bl	80161a4 <pxPortInitialiseStack>
 8014b64:	4602      	mov	r2, r0
 8014b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b68:	601a      	str	r2, [r3, #0]
 8014b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d002      	beq.n	8014b76 <prvInitialiseNewTask+0x116>
 8014b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b74:	601a      	str	r2, [r3, #0]
 8014b76:	bf00      	nop
 8014b78:	3720      	adds	r7, #32
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
	...

08014b80 <prvAddNewTaskToReadyList>:
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	f001 fc3c 	bl	8016404 <vPortEnterCritical>
 8014b8c:	4b2d      	ldr	r3, [pc, #180]	; (8014c44 <prvAddNewTaskToReadyList+0xc4>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	3301      	adds	r3, #1
 8014b92:	4a2c      	ldr	r2, [pc, #176]	; (8014c44 <prvAddNewTaskToReadyList+0xc4>)
 8014b94:	6013      	str	r3, [r2, #0]
 8014b96:	4b2c      	ldr	r3, [pc, #176]	; (8014c48 <prvAddNewTaskToReadyList+0xc8>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d109      	bne.n	8014bb2 <prvAddNewTaskToReadyList+0x32>
 8014b9e:	4a2a      	ldr	r2, [pc, #168]	; (8014c48 <prvAddNewTaskToReadyList+0xc8>)
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6013      	str	r3, [r2, #0]
 8014ba4:	4b27      	ldr	r3, [pc, #156]	; (8014c44 <prvAddNewTaskToReadyList+0xc4>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d110      	bne.n	8014bce <prvAddNewTaskToReadyList+0x4e>
 8014bac:	f000 fdd6 	bl	801575c <prvInitialiseTaskLists>
 8014bb0:	e00d      	b.n	8014bce <prvAddNewTaskToReadyList+0x4e>
 8014bb2:	4b26      	ldr	r3, [pc, #152]	; (8014c4c <prvAddNewTaskToReadyList+0xcc>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d109      	bne.n	8014bce <prvAddNewTaskToReadyList+0x4e>
 8014bba:	4b23      	ldr	r3, [pc, #140]	; (8014c48 <prvAddNewTaskToReadyList+0xc8>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d802      	bhi.n	8014bce <prvAddNewTaskToReadyList+0x4e>
 8014bc8:	4a1f      	ldr	r2, [pc, #124]	; (8014c48 <prvAddNewTaskToReadyList+0xc8>)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6013      	str	r3, [r2, #0]
 8014bce:	4b20      	ldr	r3, [pc, #128]	; (8014c50 <prvAddNewTaskToReadyList+0xd0>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	4a1e      	ldr	r2, [pc, #120]	; (8014c50 <prvAddNewTaskToReadyList+0xd0>)
 8014bd6:	6013      	str	r3, [r2, #0]
 8014bd8:	4b1d      	ldr	r3, [pc, #116]	; (8014c50 <prvAddNewTaskToReadyList+0xd0>)
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	645a      	str	r2, [r3, #68]	; 0x44
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014be4:	4b1b      	ldr	r3, [pc, #108]	; (8014c54 <prvAddNewTaskToReadyList+0xd4>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d903      	bls.n	8014bf4 <prvAddNewTaskToReadyList+0x74>
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf0:	4a18      	ldr	r2, [pc, #96]	; (8014c54 <prvAddNewTaskToReadyList+0xd4>)
 8014bf2:	6013      	str	r3, [r2, #0]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	4413      	add	r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	4a15      	ldr	r2, [pc, #84]	; (8014c58 <prvAddNewTaskToReadyList+0xd8>)
 8014c02:	441a      	add	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	3304      	adds	r3, #4
 8014c08:	4619      	mov	r1, r3
 8014c0a:	4610      	mov	r0, r2
 8014c0c:	f7ff f859 	bl	8013cc2 <vListInsertEnd>
 8014c10:	f001 fc28 	bl	8016464 <vPortExitCritical>
 8014c14:	4b0d      	ldr	r3, [pc, #52]	; (8014c4c <prvAddNewTaskToReadyList+0xcc>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d00e      	beq.n	8014c3a <prvAddNewTaskToReadyList+0xba>
 8014c1c:	4b0a      	ldr	r3, [pc, #40]	; (8014c48 <prvAddNewTaskToReadyList+0xc8>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d207      	bcs.n	8014c3a <prvAddNewTaskToReadyList+0xba>
 8014c2a:	4b0c      	ldr	r3, [pc, #48]	; (8014c5c <prvAddNewTaskToReadyList+0xdc>)
 8014c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c30:	601a      	str	r2, [r3, #0]
 8014c32:	f3bf 8f4f 	dsb	sy
 8014c36:	f3bf 8f6f 	isb	sy
 8014c3a:	bf00      	nop
 8014c3c:	3708      	adds	r7, #8
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	24001d00 	.word	0x24001d00
 8014c48:	2400182c 	.word	0x2400182c
 8014c4c:	24001d0c 	.word	0x24001d0c
 8014c50:	24001d1c 	.word	0x24001d1c
 8014c54:	24001d08 	.word	0x24001d08
 8014c58:	24001830 	.word	0x24001830
 8014c5c:	e000ed04 	.word	0xe000ed04

08014c60 <vTaskDelay>:
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b084      	sub	sp, #16
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
 8014c68:	2300      	movs	r3, #0
 8014c6a:	60fb      	str	r3, [r7, #12]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d017      	beq.n	8014ca2 <vTaskDelay+0x42>
 8014c72:	4b13      	ldr	r3, [pc, #76]	; (8014cc0 <vTaskDelay+0x60>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d00a      	beq.n	8014c90 <vTaskDelay+0x30>
 8014c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c7e:	f383 8811 	msr	BASEPRI, r3
 8014c82:	f3bf 8f6f 	isb	sy
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	60bb      	str	r3, [r7, #8]
 8014c8c:	bf00      	nop
 8014c8e:	e7fe      	b.n	8014c8e <vTaskDelay+0x2e>
 8014c90:	f000 f99a 	bl	8014fc8 <vTaskSuspendAll>
 8014c94:	2100      	movs	r1, #0
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 fec2 	bl	8015a20 <prvAddCurrentTaskToDelayedList>
 8014c9c:	f000 f9a2 	bl	8014fe4 <xTaskResumeAll>
 8014ca0:	60f8      	str	r0, [r7, #12]
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d107      	bne.n	8014cb8 <vTaskDelay+0x58>
 8014ca8:	4b06      	ldr	r3, [pc, #24]	; (8014cc4 <vTaskDelay+0x64>)
 8014caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cae:	601a      	str	r2, [r3, #0]
 8014cb0:	f3bf 8f4f 	dsb	sy
 8014cb4:	f3bf 8f6f 	isb	sy
 8014cb8:	bf00      	nop
 8014cba:	3710      	adds	r7, #16
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	24001d28 	.word	0x24001d28
 8014cc4:	e000ed04 	.word	0xe000ed04

08014cc8 <vTaskSuspend>:
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b084      	sub	sp, #16
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	f001 fb98 	bl	8016404 <vPortEnterCritical>
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d102      	bne.n	8014ce0 <vTaskSuspend+0x18>
 8014cda:	4b30      	ldr	r3, [pc, #192]	; (8014d9c <vTaskSuspend+0xd4>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	e000      	b.n	8014ce2 <vTaskSuspend+0x1a>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	60fb      	str	r3, [r7, #12]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	3304      	adds	r3, #4
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7ff f847 	bl	8013d7c <uxListRemove>
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d004      	beq.n	8014d00 <vTaskSuspend+0x38>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	3318      	adds	r3, #24
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7ff f83e 	bl	8013d7c <uxListRemove>
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	3304      	adds	r3, #4
 8014d04:	4619      	mov	r1, r3
 8014d06:	4826      	ldr	r0, [pc, #152]	; (8014da0 <vTaskSuspend+0xd8>)
 8014d08:	f7fe ffdb 	bl	8013cc2 <vListInsertEnd>
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	2b01      	cmp	r3, #1
 8014d16:	d103      	bne.n	8014d20 <vTaskSuspend+0x58>
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014d20:	f001 fba0 	bl	8016464 <vPortExitCritical>
 8014d24:	4b1f      	ldr	r3, [pc, #124]	; (8014da4 <vTaskSuspend+0xdc>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d005      	beq.n	8014d38 <vTaskSuspend+0x70>
 8014d2c:	f001 fb6a 	bl	8016404 <vPortEnterCritical>
 8014d30:	f000 fdb2 	bl	8015898 <prvResetNextTaskUnblockTime>
 8014d34:	f001 fb96 	bl	8016464 <vPortExitCritical>
 8014d38:	4b18      	ldr	r3, [pc, #96]	; (8014d9c <vTaskSuspend+0xd4>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d127      	bne.n	8014d92 <vTaskSuspend+0xca>
 8014d42:	4b18      	ldr	r3, [pc, #96]	; (8014da4 <vTaskSuspend+0xdc>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d017      	beq.n	8014d7a <vTaskSuspend+0xb2>
 8014d4a:	4b17      	ldr	r3, [pc, #92]	; (8014da8 <vTaskSuspend+0xe0>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00a      	beq.n	8014d68 <vTaskSuspend+0xa0>
 8014d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	60bb      	str	r3, [r7, #8]
 8014d64:	bf00      	nop
 8014d66:	e7fe      	b.n	8014d66 <vTaskSuspend+0x9e>
 8014d68:	4b10      	ldr	r3, [pc, #64]	; (8014dac <vTaskSuspend+0xe4>)
 8014d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d6e:	601a      	str	r2, [r3, #0]
 8014d70:	f3bf 8f4f 	dsb	sy
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	e00b      	b.n	8014d92 <vTaskSuspend+0xca>
 8014d7a:	4b09      	ldr	r3, [pc, #36]	; (8014da0 <vTaskSuspend+0xd8>)
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	4b0c      	ldr	r3, [pc, #48]	; (8014db0 <vTaskSuspend+0xe8>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d103      	bne.n	8014d8e <vTaskSuspend+0xc6>
 8014d86:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <vTaskSuspend+0xd4>)
 8014d88:	2200      	movs	r2, #0
 8014d8a:	601a      	str	r2, [r3, #0]
 8014d8c:	e001      	b.n	8014d92 <vTaskSuspend+0xca>
 8014d8e:	f000 fa99 	bl	80152c4 <vTaskSwitchContext>
 8014d92:	bf00      	nop
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	2400182c 	.word	0x2400182c
 8014da0:	24001cec 	.word	0x24001cec
 8014da4:	24001d0c 	.word	0x24001d0c
 8014da8:	24001d28 	.word	0x24001d28
 8014dac:	e000ed04 	.word	0xe000ed04
 8014db0:	24001d00 	.word	0x24001d00

08014db4 <prvTaskIsTaskSuspended>:
 8014db4:	b480      	push	{r7}
 8014db6:	b087      	sub	sp, #28
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	617b      	str	r3, [r7, #20]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	613b      	str	r3, [r7, #16]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d10a      	bne.n	8014de0 <prvTaskIsTaskSuspended+0x2c>
 8014dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dce:	f383 8811 	msr	BASEPRI, r3
 8014dd2:	f3bf 8f6f 	isb	sy
 8014dd6:	f3bf 8f4f 	dsb	sy
 8014dda:	60fb      	str	r3, [r7, #12]
 8014ddc:	bf00      	nop
 8014dde:	e7fe      	b.n	8014dde <prvTaskIsTaskSuspended+0x2a>
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	695b      	ldr	r3, [r3, #20]
 8014de4:	4a0a      	ldr	r2, [pc, #40]	; (8014e10 <prvTaskIsTaskSuspended+0x5c>)
 8014de6:	4293      	cmp	r3, r2
 8014de8:	d10a      	bne.n	8014e00 <prvTaskIsTaskSuspended+0x4c>
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dee:	4a09      	ldr	r2, [pc, #36]	; (8014e14 <prvTaskIsTaskSuspended+0x60>)
 8014df0:	4293      	cmp	r3, r2
 8014df2:	d005      	beq.n	8014e00 <prvTaskIsTaskSuspended+0x4c>
 8014df4:	693b      	ldr	r3, [r7, #16]
 8014df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d101      	bne.n	8014e00 <prvTaskIsTaskSuspended+0x4c>
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	617b      	str	r3, [r7, #20]
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	4618      	mov	r0, r3
 8014e04:	371c      	adds	r7, #28
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr
 8014e0e:	bf00      	nop
 8014e10:	24001cec 	.word	0x24001cec
 8014e14:	24001cc0 	.word	0x24001cc0

08014e18 <xTaskResumeFromISR>:
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b08a      	sub	sp, #40	; 0x28
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	2300      	movs	r3, #0
 8014e22:	627b      	str	r3, [r7, #36]	; 0x24
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	623b      	str	r3, [r7, #32]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d10a      	bne.n	8014e44 <xTaskResumeFromISR+0x2c>
 8014e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e32:	f383 8811 	msr	BASEPRI, r3
 8014e36:	f3bf 8f6f 	isb	sy
 8014e3a:	f3bf 8f4f 	dsb	sy
 8014e3e:	61bb      	str	r3, [r7, #24]
 8014e40:	bf00      	nop
 8014e42:	e7fe      	b.n	8014e42 <xTaskResumeFromISR+0x2a>
 8014e44:	f001 fbc0 	bl	80165c8 <vPortValidateInterruptPriority>
 8014e48:	f3ef 8211 	mrs	r2, BASEPRI
 8014e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e50:	f383 8811 	msr	BASEPRI, r3
 8014e54:	f3bf 8f6f 	isb	sy
 8014e58:	f3bf 8f4f 	dsb	sy
 8014e5c:	617a      	str	r2, [r7, #20]
 8014e5e:	613b      	str	r3, [r7, #16]
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	61fb      	str	r3, [r7, #28]
 8014e64:	6a38      	ldr	r0, [r7, #32]
 8014e66:	f7ff ffa5 	bl	8014db4 <prvTaskIsTaskSuspended>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d030      	beq.n	8014ed2 <xTaskResumeFromISR+0xba>
 8014e70:	4b1d      	ldr	r3, [pc, #116]	; (8014ee8 <xTaskResumeFromISR+0xd0>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d126      	bne.n	8014ec6 <xTaskResumeFromISR+0xae>
 8014e78:	6a3b      	ldr	r3, [r7, #32]
 8014e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7c:	4b1b      	ldr	r3, [pc, #108]	; (8014eec <xTaskResumeFromISR+0xd4>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d301      	bcc.n	8014e8a <xTaskResumeFromISR+0x72>
 8014e86:	2301      	movs	r3, #1
 8014e88:	627b      	str	r3, [r7, #36]	; 0x24
 8014e8a:	6a3b      	ldr	r3, [r7, #32]
 8014e8c:	3304      	adds	r3, #4
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fe ff74 	bl	8013d7c <uxListRemove>
 8014e94:	6a3b      	ldr	r3, [r7, #32]
 8014e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e98:	4b15      	ldr	r3, [pc, #84]	; (8014ef0 <xTaskResumeFromISR+0xd8>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d903      	bls.n	8014ea8 <xTaskResumeFromISR+0x90>
 8014ea0:	6a3b      	ldr	r3, [r7, #32]
 8014ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ea4:	4a12      	ldr	r2, [pc, #72]	; (8014ef0 <xTaskResumeFromISR+0xd8>)
 8014ea6:	6013      	str	r3, [r2, #0]
 8014ea8:	6a3b      	ldr	r3, [r7, #32]
 8014eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eac:	4613      	mov	r3, r2
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	4413      	add	r3, r2
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	4a0f      	ldr	r2, [pc, #60]	; (8014ef4 <xTaskResumeFromISR+0xdc>)
 8014eb6:	441a      	add	r2, r3
 8014eb8:	6a3b      	ldr	r3, [r7, #32]
 8014eba:	3304      	adds	r3, #4
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	4610      	mov	r0, r2
 8014ec0:	f7fe feff 	bl	8013cc2 <vListInsertEnd>
 8014ec4:	e005      	b.n	8014ed2 <xTaskResumeFromISR+0xba>
 8014ec6:	6a3b      	ldr	r3, [r7, #32]
 8014ec8:	3318      	adds	r3, #24
 8014eca:	4619      	mov	r1, r3
 8014ecc:	480a      	ldr	r0, [pc, #40]	; (8014ef8 <xTaskResumeFromISR+0xe0>)
 8014ece:	f7fe fef8 	bl	8013cc2 <vListInsertEnd>
 8014ed2:	69fb      	ldr	r3, [r7, #28]
 8014ed4:	60fb      	str	r3, [r7, #12]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f383 8811 	msr	BASEPRI, r3
 8014edc:	bf00      	nop
 8014ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3728      	adds	r7, #40	; 0x28
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	24001d28 	.word	0x24001d28
 8014eec:	2400182c 	.word	0x2400182c
 8014ef0:	24001d08 	.word	0x24001d08
 8014ef4:	24001830 	.word	0x24001830
 8014ef8:	24001cc0 	.word	0x24001cc0

08014efc <vTaskStartScheduler>:
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b08a      	sub	sp, #40	; 0x28
 8014f00:	af04      	add	r7, sp, #16
 8014f02:	2300      	movs	r3, #0
 8014f04:	60bb      	str	r3, [r7, #8]
 8014f06:	2300      	movs	r3, #0
 8014f08:	607b      	str	r3, [r7, #4]
 8014f0a:	463a      	mov	r2, r7
 8014f0c:	1d39      	adds	r1, r7, #4
 8014f0e:	f107 0308 	add.w	r3, r7, #8
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7fe fc08 	bl	8013728 <vApplicationGetIdleTaskMemory>
 8014f18:	6839      	ldr	r1, [r7, #0]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	68ba      	ldr	r2, [r7, #8]
 8014f1e:	9202      	str	r2, [sp, #8]
 8014f20:	9301      	str	r3, [sp, #4]
 8014f22:	2300      	movs	r3, #0
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	2300      	movs	r3, #0
 8014f28:	460a      	mov	r2, r1
 8014f2a:	4921      	ldr	r1, [pc, #132]	; (8014fb0 <vTaskStartScheduler+0xb4>)
 8014f2c:	4821      	ldr	r0, [pc, #132]	; (8014fb4 <vTaskStartScheduler+0xb8>)
 8014f2e:	f7ff fcf5 	bl	801491c <xTaskCreateStatic>
 8014f32:	4603      	mov	r3, r0
 8014f34:	4a20      	ldr	r2, [pc, #128]	; (8014fb8 <vTaskStartScheduler+0xbc>)
 8014f36:	6013      	str	r3, [r2, #0]
 8014f38:	4b1f      	ldr	r3, [pc, #124]	; (8014fb8 <vTaskStartScheduler+0xbc>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d002      	beq.n	8014f46 <vTaskStartScheduler+0x4a>
 8014f40:	2301      	movs	r3, #1
 8014f42:	617b      	str	r3, [r7, #20]
 8014f44:	e001      	b.n	8014f4a <vTaskStartScheduler+0x4e>
 8014f46:	2300      	movs	r3, #0
 8014f48:	617b      	str	r3, [r7, #20]
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d102      	bne.n	8014f56 <vTaskStartScheduler+0x5a>
 8014f50:	f000 fdba 	bl	8015ac8 <xTimerCreateTimerTask>
 8014f54:	6178      	str	r0, [r7, #20]
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d116      	bne.n	8014f8a <vTaskStartScheduler+0x8e>
 8014f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f60:	f383 8811 	msr	BASEPRI, r3
 8014f64:	f3bf 8f6f 	isb	sy
 8014f68:	f3bf 8f4f 	dsb	sy
 8014f6c:	613b      	str	r3, [r7, #16]
 8014f6e:	bf00      	nop
 8014f70:	4b12      	ldr	r3, [pc, #72]	; (8014fbc <vTaskStartScheduler+0xc0>)
 8014f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f76:	601a      	str	r2, [r3, #0]
 8014f78:	4b11      	ldr	r3, [pc, #68]	; (8014fc0 <vTaskStartScheduler+0xc4>)
 8014f7a:	2201      	movs	r2, #1
 8014f7c:	601a      	str	r2, [r3, #0]
 8014f7e:	4b11      	ldr	r3, [pc, #68]	; (8014fc4 <vTaskStartScheduler+0xc8>)
 8014f80:	2200      	movs	r2, #0
 8014f82:	601a      	str	r2, [r3, #0]
 8014f84:	f001 f99c 	bl	80162c0 <xPortStartScheduler>
 8014f88:	e00e      	b.n	8014fa8 <vTaskStartScheduler+0xac>
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f90:	d10a      	bne.n	8014fa8 <vTaskStartScheduler+0xac>
 8014f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f96:	f383 8811 	msr	BASEPRI, r3
 8014f9a:	f3bf 8f6f 	isb	sy
 8014f9e:	f3bf 8f4f 	dsb	sy
 8014fa2:	60fb      	str	r3, [r7, #12]
 8014fa4:	bf00      	nop
 8014fa6:	e7fe      	b.n	8014fa6 <vTaskStartScheduler+0xaa>
 8014fa8:	bf00      	nop
 8014faa:	3718      	adds	r7, #24
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	08017728 	.word	0x08017728
 8014fb4:	0801572d 	.word	0x0801572d
 8014fb8:	24001d24 	.word	0x24001d24
 8014fbc:	24001d20 	.word	0x24001d20
 8014fc0:	24001d0c 	.word	0x24001d0c
 8014fc4:	24001d04 	.word	0x24001d04

08014fc8 <vTaskSuspendAll>:
 8014fc8:	b480      	push	{r7}
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	4b04      	ldr	r3, [pc, #16]	; (8014fe0 <vTaskSuspendAll+0x18>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	4a03      	ldr	r2, [pc, #12]	; (8014fe0 <vTaskSuspendAll+0x18>)
 8014fd4:	6013      	str	r3, [r2, #0]
 8014fd6:	bf00      	nop
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fde:	4770      	bx	lr
 8014fe0:	24001d28 	.word	0x24001d28

08014fe4 <xTaskResumeAll>:
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	2300      	movs	r3, #0
 8014fec:	60fb      	str	r3, [r7, #12]
 8014fee:	2300      	movs	r3, #0
 8014ff0:	60bb      	str	r3, [r7, #8]
 8014ff2:	4b42      	ldr	r3, [pc, #264]	; (80150fc <xTaskResumeAll+0x118>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d10a      	bne.n	8015010 <xTaskResumeAll+0x2c>
 8014ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ffe:	f383 8811 	msr	BASEPRI, r3
 8015002:	f3bf 8f6f 	isb	sy
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	603b      	str	r3, [r7, #0]
 801500c:	bf00      	nop
 801500e:	e7fe      	b.n	801500e <xTaskResumeAll+0x2a>
 8015010:	f001 f9f8 	bl	8016404 <vPortEnterCritical>
 8015014:	4b39      	ldr	r3, [pc, #228]	; (80150fc <xTaskResumeAll+0x118>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	3b01      	subs	r3, #1
 801501a:	4a38      	ldr	r2, [pc, #224]	; (80150fc <xTaskResumeAll+0x118>)
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	4b37      	ldr	r3, [pc, #220]	; (80150fc <xTaskResumeAll+0x118>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d162      	bne.n	80150ec <xTaskResumeAll+0x108>
 8015026:	4b36      	ldr	r3, [pc, #216]	; (8015100 <xTaskResumeAll+0x11c>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d05e      	beq.n	80150ec <xTaskResumeAll+0x108>
 801502e:	e02f      	b.n	8015090 <xTaskResumeAll+0xac>
 8015030:	4b34      	ldr	r3, [pc, #208]	; (8015104 <xTaskResumeAll+0x120>)
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	60fb      	str	r3, [r7, #12]
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	3318      	adds	r3, #24
 801503c:	4618      	mov	r0, r3
 801503e:	f7fe fe9d 	bl	8013d7c <uxListRemove>
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	3304      	adds	r3, #4
 8015046:	4618      	mov	r0, r3
 8015048:	f7fe fe98 	bl	8013d7c <uxListRemove>
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015050:	4b2d      	ldr	r3, [pc, #180]	; (8015108 <xTaskResumeAll+0x124>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	429a      	cmp	r2, r3
 8015056:	d903      	bls.n	8015060 <xTaskResumeAll+0x7c>
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801505c:	4a2a      	ldr	r2, [pc, #168]	; (8015108 <xTaskResumeAll+0x124>)
 801505e:	6013      	str	r3, [r2, #0]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015064:	4613      	mov	r3, r2
 8015066:	009b      	lsls	r3, r3, #2
 8015068:	4413      	add	r3, r2
 801506a:	009b      	lsls	r3, r3, #2
 801506c:	4a27      	ldr	r2, [pc, #156]	; (801510c <xTaskResumeAll+0x128>)
 801506e:	441a      	add	r2, r3
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	3304      	adds	r3, #4
 8015074:	4619      	mov	r1, r3
 8015076:	4610      	mov	r0, r2
 8015078:	f7fe fe23 	bl	8013cc2 <vListInsertEnd>
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015080:	4b23      	ldr	r3, [pc, #140]	; (8015110 <xTaskResumeAll+0x12c>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015086:	429a      	cmp	r2, r3
 8015088:	d302      	bcc.n	8015090 <xTaskResumeAll+0xac>
 801508a:	4b22      	ldr	r3, [pc, #136]	; (8015114 <xTaskResumeAll+0x130>)
 801508c:	2201      	movs	r2, #1
 801508e:	601a      	str	r2, [r3, #0]
 8015090:	4b1c      	ldr	r3, [pc, #112]	; (8015104 <xTaskResumeAll+0x120>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d1cb      	bne.n	8015030 <xTaskResumeAll+0x4c>
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d001      	beq.n	80150a2 <xTaskResumeAll+0xbe>
 801509e:	f000 fbfb 	bl	8015898 <prvResetNextTaskUnblockTime>
 80150a2:	4b1d      	ldr	r3, [pc, #116]	; (8015118 <xTaskResumeAll+0x134>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	607b      	str	r3, [r7, #4]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d010      	beq.n	80150d0 <xTaskResumeAll+0xec>
 80150ae:	f000 f847 	bl	8015140 <xTaskIncrementTick>
 80150b2:	4603      	mov	r3, r0
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d002      	beq.n	80150be <xTaskResumeAll+0xda>
 80150b8:	4b16      	ldr	r3, [pc, #88]	; (8015114 <xTaskResumeAll+0x130>)
 80150ba:	2201      	movs	r2, #1
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	3b01      	subs	r3, #1
 80150c2:	607b      	str	r3, [r7, #4]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1f1      	bne.n	80150ae <xTaskResumeAll+0xca>
 80150ca:	4b13      	ldr	r3, [pc, #76]	; (8015118 <xTaskResumeAll+0x134>)
 80150cc:	2200      	movs	r2, #0
 80150ce:	601a      	str	r2, [r3, #0]
 80150d0:	4b10      	ldr	r3, [pc, #64]	; (8015114 <xTaskResumeAll+0x130>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d009      	beq.n	80150ec <xTaskResumeAll+0x108>
 80150d8:	2301      	movs	r3, #1
 80150da:	60bb      	str	r3, [r7, #8]
 80150dc:	4b0f      	ldr	r3, [pc, #60]	; (801511c <xTaskResumeAll+0x138>)
 80150de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150e2:	601a      	str	r2, [r3, #0]
 80150e4:	f3bf 8f4f 	dsb	sy
 80150e8:	f3bf 8f6f 	isb	sy
 80150ec:	f001 f9ba 	bl	8016464 <vPortExitCritical>
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	24001d28 	.word	0x24001d28
 8015100:	24001d00 	.word	0x24001d00
 8015104:	24001cc0 	.word	0x24001cc0
 8015108:	24001d08 	.word	0x24001d08
 801510c:	24001830 	.word	0x24001830
 8015110:	2400182c 	.word	0x2400182c
 8015114:	24001d14 	.word	0x24001d14
 8015118:	24001d10 	.word	0x24001d10
 801511c:	e000ed04 	.word	0xe000ed04

08015120 <xTaskGetTickCount>:
 8015120:	b480      	push	{r7}
 8015122:	b083      	sub	sp, #12
 8015124:	af00      	add	r7, sp, #0
 8015126:	4b05      	ldr	r3, [pc, #20]	; (801513c <xTaskGetTickCount+0x1c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	607b      	str	r3, [r7, #4]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	4618      	mov	r0, r3
 8015130:	370c      	adds	r7, #12
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr
 801513a:	bf00      	nop
 801513c:	24001d04 	.word	0x24001d04

08015140 <xTaskIncrementTick>:
 8015140:	b580      	push	{r7, lr}
 8015142:	b086      	sub	sp, #24
 8015144:	af00      	add	r7, sp, #0
 8015146:	2300      	movs	r3, #0
 8015148:	617b      	str	r3, [r7, #20]
 801514a:	4b53      	ldr	r3, [pc, #332]	; (8015298 <xTaskIncrementTick+0x158>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	f040 8095 	bne.w	801527e <xTaskIncrementTick+0x13e>
 8015154:	4b51      	ldr	r3, [pc, #324]	; (801529c <xTaskIncrementTick+0x15c>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	3301      	adds	r3, #1
 801515a:	613b      	str	r3, [r7, #16]
 801515c:	4a4f      	ldr	r2, [pc, #316]	; (801529c <xTaskIncrementTick+0x15c>)
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	6013      	str	r3, [r2, #0]
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d120      	bne.n	80151aa <xTaskIncrementTick+0x6a>
 8015168:	4b4d      	ldr	r3, [pc, #308]	; (80152a0 <xTaskIncrementTick+0x160>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d00a      	beq.n	8015188 <xTaskIncrementTick+0x48>
 8015172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015176:	f383 8811 	msr	BASEPRI, r3
 801517a:	f3bf 8f6f 	isb	sy
 801517e:	f3bf 8f4f 	dsb	sy
 8015182:	603b      	str	r3, [r7, #0]
 8015184:	bf00      	nop
 8015186:	e7fe      	b.n	8015186 <xTaskIncrementTick+0x46>
 8015188:	4b45      	ldr	r3, [pc, #276]	; (80152a0 <xTaskIncrementTick+0x160>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	60fb      	str	r3, [r7, #12]
 801518e:	4b45      	ldr	r3, [pc, #276]	; (80152a4 <xTaskIncrementTick+0x164>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	4a43      	ldr	r2, [pc, #268]	; (80152a0 <xTaskIncrementTick+0x160>)
 8015194:	6013      	str	r3, [r2, #0]
 8015196:	4a43      	ldr	r2, [pc, #268]	; (80152a4 <xTaskIncrementTick+0x164>)
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	6013      	str	r3, [r2, #0]
 801519c:	4b42      	ldr	r3, [pc, #264]	; (80152a8 <xTaskIncrementTick+0x168>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	3301      	adds	r3, #1
 80151a2:	4a41      	ldr	r2, [pc, #260]	; (80152a8 <xTaskIncrementTick+0x168>)
 80151a4:	6013      	str	r3, [r2, #0]
 80151a6:	f000 fb77 	bl	8015898 <prvResetNextTaskUnblockTime>
 80151aa:	4b40      	ldr	r3, [pc, #256]	; (80152ac <xTaskIncrementTick+0x16c>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	693a      	ldr	r2, [r7, #16]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d349      	bcc.n	8015248 <xTaskIncrementTick+0x108>
 80151b4:	4b3a      	ldr	r3, [pc, #232]	; (80152a0 <xTaskIncrementTick+0x160>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d104      	bne.n	80151c8 <xTaskIncrementTick+0x88>
 80151be:	4b3b      	ldr	r3, [pc, #236]	; (80152ac <xTaskIncrementTick+0x16c>)
 80151c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80151c4:	601a      	str	r2, [r3, #0]
 80151c6:	e03f      	b.n	8015248 <xTaskIncrementTick+0x108>
 80151c8:	4b35      	ldr	r3, [pc, #212]	; (80152a0 <xTaskIncrementTick+0x160>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	68db      	ldr	r3, [r3, #12]
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	60bb      	str	r3, [r7, #8]
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	685b      	ldr	r3, [r3, #4]
 80151d6:	607b      	str	r3, [r7, #4]
 80151d8:	693a      	ldr	r2, [r7, #16]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d203      	bcs.n	80151e8 <xTaskIncrementTick+0xa8>
 80151e0:	4a32      	ldr	r2, [pc, #200]	; (80152ac <xTaskIncrementTick+0x16c>)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6013      	str	r3, [r2, #0]
 80151e6:	e02f      	b.n	8015248 <xTaskIncrementTick+0x108>
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	3304      	adds	r3, #4
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7fe fdc5 	bl	8013d7c <uxListRemove>
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d004      	beq.n	8015204 <xTaskIncrementTick+0xc4>
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	3318      	adds	r3, #24
 80151fe:	4618      	mov	r0, r3
 8015200:	f7fe fdbc 	bl	8013d7c <uxListRemove>
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015208:	4b29      	ldr	r3, [pc, #164]	; (80152b0 <xTaskIncrementTick+0x170>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d903      	bls.n	8015218 <xTaskIncrementTick+0xd8>
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015214:	4a26      	ldr	r2, [pc, #152]	; (80152b0 <xTaskIncrementTick+0x170>)
 8015216:	6013      	str	r3, [r2, #0]
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801521c:	4613      	mov	r3, r2
 801521e:	009b      	lsls	r3, r3, #2
 8015220:	4413      	add	r3, r2
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	4a23      	ldr	r2, [pc, #140]	; (80152b4 <xTaskIncrementTick+0x174>)
 8015226:	441a      	add	r2, r3
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	3304      	adds	r3, #4
 801522c:	4619      	mov	r1, r3
 801522e:	4610      	mov	r0, r2
 8015230:	f7fe fd47 	bl	8013cc2 <vListInsertEnd>
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015238:	4b1f      	ldr	r3, [pc, #124]	; (80152b8 <xTaskIncrementTick+0x178>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801523e:	429a      	cmp	r2, r3
 8015240:	d3b8      	bcc.n	80151b4 <xTaskIncrementTick+0x74>
 8015242:	2301      	movs	r3, #1
 8015244:	617b      	str	r3, [r7, #20]
 8015246:	e7b5      	b.n	80151b4 <xTaskIncrementTick+0x74>
 8015248:	4b1b      	ldr	r3, [pc, #108]	; (80152b8 <xTaskIncrementTick+0x178>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801524e:	4919      	ldr	r1, [pc, #100]	; (80152b4 <xTaskIncrementTick+0x174>)
 8015250:	4613      	mov	r3, r2
 8015252:	009b      	lsls	r3, r3, #2
 8015254:	4413      	add	r3, r2
 8015256:	009b      	lsls	r3, r3, #2
 8015258:	440b      	add	r3, r1
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b01      	cmp	r3, #1
 801525e:	d901      	bls.n	8015264 <xTaskIncrementTick+0x124>
 8015260:	2301      	movs	r3, #1
 8015262:	617b      	str	r3, [r7, #20]
 8015264:	4b15      	ldr	r3, [pc, #84]	; (80152bc <xTaskIncrementTick+0x17c>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d101      	bne.n	8015270 <xTaskIncrementTick+0x130>
 801526c:	f7eb f9ba 	bl	80005e4 <vApplicationTickHook>
 8015270:	4b13      	ldr	r3, [pc, #76]	; (80152c0 <xTaskIncrementTick+0x180>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d009      	beq.n	801528c <xTaskIncrementTick+0x14c>
 8015278:	2301      	movs	r3, #1
 801527a:	617b      	str	r3, [r7, #20]
 801527c:	e006      	b.n	801528c <xTaskIncrementTick+0x14c>
 801527e:	4b0f      	ldr	r3, [pc, #60]	; (80152bc <xTaskIncrementTick+0x17c>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	3301      	adds	r3, #1
 8015284:	4a0d      	ldr	r2, [pc, #52]	; (80152bc <xTaskIncrementTick+0x17c>)
 8015286:	6013      	str	r3, [r2, #0]
 8015288:	f7eb f9ac 	bl	80005e4 <vApplicationTickHook>
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	4618      	mov	r0, r3
 8015290:	3718      	adds	r7, #24
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	24001d28 	.word	0x24001d28
 801529c:	24001d04 	.word	0x24001d04
 80152a0:	24001cb8 	.word	0x24001cb8
 80152a4:	24001cbc 	.word	0x24001cbc
 80152a8:	24001d18 	.word	0x24001d18
 80152ac:	24001d20 	.word	0x24001d20
 80152b0:	24001d08 	.word	0x24001d08
 80152b4:	24001830 	.word	0x24001830
 80152b8:	2400182c 	.word	0x2400182c
 80152bc:	24001d10 	.word	0x24001d10
 80152c0:	24001d14 	.word	0x24001d14

080152c4 <vTaskSwitchContext>:
 80152c4:	b480      	push	{r7}
 80152c6:	b085      	sub	sp, #20
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	4b28      	ldr	r3, [pc, #160]	; (801536c <vTaskSwitchContext+0xa8>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d003      	beq.n	80152da <vTaskSwitchContext+0x16>
 80152d2:	4b27      	ldr	r3, [pc, #156]	; (8015370 <vTaskSwitchContext+0xac>)
 80152d4:	2201      	movs	r2, #1
 80152d6:	601a      	str	r2, [r3, #0]
 80152d8:	e041      	b.n	801535e <vTaskSwitchContext+0x9a>
 80152da:	4b25      	ldr	r3, [pc, #148]	; (8015370 <vTaskSwitchContext+0xac>)
 80152dc:	2200      	movs	r2, #0
 80152de:	601a      	str	r2, [r3, #0]
 80152e0:	4b24      	ldr	r3, [pc, #144]	; (8015374 <vTaskSwitchContext+0xb0>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	60fb      	str	r3, [r7, #12]
 80152e6:	e010      	b.n	801530a <vTaskSwitchContext+0x46>
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d10a      	bne.n	8015304 <vTaskSwitchContext+0x40>
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	607b      	str	r3, [r7, #4]
 8015300:	bf00      	nop
 8015302:	e7fe      	b.n	8015302 <vTaskSwitchContext+0x3e>
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	3b01      	subs	r3, #1
 8015308:	60fb      	str	r3, [r7, #12]
 801530a:	491b      	ldr	r1, [pc, #108]	; (8015378 <vTaskSwitchContext+0xb4>)
 801530c:	68fa      	ldr	r2, [r7, #12]
 801530e:	4613      	mov	r3, r2
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	4413      	add	r3, r2
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	440b      	add	r3, r1
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d0e4      	beq.n	80152e8 <vTaskSwitchContext+0x24>
 801531e:	68fa      	ldr	r2, [r7, #12]
 8015320:	4613      	mov	r3, r2
 8015322:	009b      	lsls	r3, r3, #2
 8015324:	4413      	add	r3, r2
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	4a13      	ldr	r2, [pc, #76]	; (8015378 <vTaskSwitchContext+0xb4>)
 801532a:	4413      	add	r3, r2
 801532c:	60bb      	str	r3, [r7, #8]
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	685a      	ldr	r2, [r3, #4]
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	605a      	str	r2, [r3, #4]
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	685a      	ldr	r2, [r3, #4]
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	3308      	adds	r3, #8
 8015340:	429a      	cmp	r2, r3
 8015342:	d104      	bne.n	801534e <vTaskSwitchContext+0x8a>
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	685a      	ldr	r2, [r3, #4]
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	605a      	str	r2, [r3, #4]
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	4a09      	ldr	r2, [pc, #36]	; (801537c <vTaskSwitchContext+0xb8>)
 8015356:	6013      	str	r3, [r2, #0]
 8015358:	4a06      	ldr	r2, [pc, #24]	; (8015374 <vTaskSwitchContext+0xb0>)
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	6013      	str	r3, [r2, #0]
 801535e:	bf00      	nop
 8015360:	3714      	adds	r7, #20
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	24001d28 	.word	0x24001d28
 8015370:	24001d14 	.word	0x24001d14
 8015374:	24001d08 	.word	0x24001d08
 8015378:	24001830 	.word	0x24001830
 801537c:	2400182c 	.word	0x2400182c

08015380 <vTaskPlaceOnEventList>:
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	6039      	str	r1, [r7, #0]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d10a      	bne.n	80153a6 <vTaskPlaceOnEventList+0x26>
 8015390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015394:	f383 8811 	msr	BASEPRI, r3
 8015398:	f3bf 8f6f 	isb	sy
 801539c:	f3bf 8f4f 	dsb	sy
 80153a0:	60fb      	str	r3, [r7, #12]
 80153a2:	bf00      	nop
 80153a4:	e7fe      	b.n	80153a4 <vTaskPlaceOnEventList+0x24>
 80153a6:	4b07      	ldr	r3, [pc, #28]	; (80153c4 <vTaskPlaceOnEventList+0x44>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	3318      	adds	r3, #24
 80153ac:	4619      	mov	r1, r3
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f7fe fcab 	bl	8013d0a <vListInsert>
 80153b4:	2101      	movs	r1, #1
 80153b6:	6838      	ldr	r0, [r7, #0]
 80153b8:	f000 fb32 	bl	8015a20 <prvAddCurrentTaskToDelayedList>
 80153bc:	bf00      	nop
 80153be:	3710      	adds	r7, #16
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	2400182c 	.word	0x2400182c

080153c8 <vTaskPlaceOnUnorderedEventList>:
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b086      	sub	sp, #24
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	60f8      	str	r0, [r7, #12]
 80153d0:	60b9      	str	r1, [r7, #8]
 80153d2:	607a      	str	r2, [r7, #4]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d10a      	bne.n	80153f0 <vTaskPlaceOnUnorderedEventList+0x28>
 80153da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153de:	f383 8811 	msr	BASEPRI, r3
 80153e2:	f3bf 8f6f 	isb	sy
 80153e6:	f3bf 8f4f 	dsb	sy
 80153ea:	617b      	str	r3, [r7, #20]
 80153ec:	bf00      	nop
 80153ee:	e7fe      	b.n	80153ee <vTaskPlaceOnUnorderedEventList+0x26>
 80153f0:	4b11      	ldr	r3, [pc, #68]	; (8015438 <vTaskPlaceOnUnorderedEventList+0x70>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d10a      	bne.n	801540e <vTaskPlaceOnUnorderedEventList+0x46>
 80153f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153fc:	f383 8811 	msr	BASEPRI, r3
 8015400:	f3bf 8f6f 	isb	sy
 8015404:	f3bf 8f4f 	dsb	sy
 8015408:	613b      	str	r3, [r7, #16]
 801540a:	bf00      	nop
 801540c:	e7fe      	b.n	801540c <vTaskPlaceOnUnorderedEventList+0x44>
 801540e:	4b0b      	ldr	r3, [pc, #44]	; (801543c <vTaskPlaceOnUnorderedEventList+0x74>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	68ba      	ldr	r2, [r7, #8]
 8015414:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015418:	619a      	str	r2, [r3, #24]
 801541a:	4b08      	ldr	r3, [pc, #32]	; (801543c <vTaskPlaceOnUnorderedEventList+0x74>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	3318      	adds	r3, #24
 8015420:	4619      	mov	r1, r3
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f7fe fc4d 	bl	8013cc2 <vListInsertEnd>
 8015428:	2101      	movs	r1, #1
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f000 faf8 	bl	8015a20 <prvAddCurrentTaskToDelayedList>
 8015430:	bf00      	nop
 8015432:	3718      	adds	r7, #24
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	24001d28 	.word	0x24001d28
 801543c:	2400182c 	.word	0x2400182c

08015440 <vTaskPlaceOnEventListRestricted>:
 8015440:	b580      	push	{r7, lr}
 8015442:	b086      	sub	sp, #24
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d10a      	bne.n	8015468 <vTaskPlaceOnEventListRestricted+0x28>
 8015452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015456:	f383 8811 	msr	BASEPRI, r3
 801545a:	f3bf 8f6f 	isb	sy
 801545e:	f3bf 8f4f 	dsb	sy
 8015462:	617b      	str	r3, [r7, #20]
 8015464:	bf00      	nop
 8015466:	e7fe      	b.n	8015466 <vTaskPlaceOnEventListRestricted+0x26>
 8015468:	4b0a      	ldr	r3, [pc, #40]	; (8015494 <vTaskPlaceOnEventListRestricted+0x54>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	3318      	adds	r3, #24
 801546e:	4619      	mov	r1, r3
 8015470:	68f8      	ldr	r0, [r7, #12]
 8015472:	f7fe fc26 	bl	8013cc2 <vListInsertEnd>
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d002      	beq.n	8015482 <vTaskPlaceOnEventListRestricted+0x42>
 801547c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015480:	60bb      	str	r3, [r7, #8]
 8015482:	6879      	ldr	r1, [r7, #4]
 8015484:	68b8      	ldr	r0, [r7, #8]
 8015486:	f000 facb 	bl	8015a20 <prvAddCurrentTaskToDelayedList>
 801548a:	bf00      	nop
 801548c:	3718      	adds	r7, #24
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	2400182c 	.word	0x2400182c

08015498 <xTaskRemoveFromEventList>:
 8015498:	b580      	push	{r7, lr}
 801549a:	b086      	sub	sp, #24
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	68db      	ldr	r3, [r3, #12]
 80154a6:	613b      	str	r3, [r7, #16]
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d10a      	bne.n	80154c4 <xTaskRemoveFromEventList+0x2c>
 80154ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b2:	f383 8811 	msr	BASEPRI, r3
 80154b6:	f3bf 8f6f 	isb	sy
 80154ba:	f3bf 8f4f 	dsb	sy
 80154be:	60fb      	str	r3, [r7, #12]
 80154c0:	bf00      	nop
 80154c2:	e7fe      	b.n	80154c2 <xTaskRemoveFromEventList+0x2a>
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	3318      	adds	r3, #24
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7fe fc57 	bl	8013d7c <uxListRemove>
 80154ce:	4b1e      	ldr	r3, [pc, #120]	; (8015548 <xTaskRemoveFromEventList+0xb0>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d11d      	bne.n	8015512 <xTaskRemoveFromEventList+0x7a>
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	3304      	adds	r3, #4
 80154da:	4618      	mov	r0, r3
 80154dc:	f7fe fc4e 	bl	8013d7c <uxListRemove>
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154e4:	4b19      	ldr	r3, [pc, #100]	; (801554c <xTaskRemoveFromEventList+0xb4>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d903      	bls.n	80154f4 <xTaskRemoveFromEventList+0x5c>
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154f0:	4a16      	ldr	r2, [pc, #88]	; (801554c <xTaskRemoveFromEventList+0xb4>)
 80154f2:	6013      	str	r3, [r2, #0]
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154f8:	4613      	mov	r3, r2
 80154fa:	009b      	lsls	r3, r3, #2
 80154fc:	4413      	add	r3, r2
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	4a13      	ldr	r2, [pc, #76]	; (8015550 <xTaskRemoveFromEventList+0xb8>)
 8015502:	441a      	add	r2, r3
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	3304      	adds	r3, #4
 8015508:	4619      	mov	r1, r3
 801550a:	4610      	mov	r0, r2
 801550c:	f7fe fbd9 	bl	8013cc2 <vListInsertEnd>
 8015510:	e005      	b.n	801551e <xTaskRemoveFromEventList+0x86>
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	3318      	adds	r3, #24
 8015516:	4619      	mov	r1, r3
 8015518:	480e      	ldr	r0, [pc, #56]	; (8015554 <xTaskRemoveFromEventList+0xbc>)
 801551a:	f7fe fbd2 	bl	8013cc2 <vListInsertEnd>
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015522:	4b0d      	ldr	r3, [pc, #52]	; (8015558 <xTaskRemoveFromEventList+0xc0>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015528:	429a      	cmp	r2, r3
 801552a:	d905      	bls.n	8015538 <xTaskRemoveFromEventList+0xa0>
 801552c:	2301      	movs	r3, #1
 801552e:	617b      	str	r3, [r7, #20]
 8015530:	4b0a      	ldr	r3, [pc, #40]	; (801555c <xTaskRemoveFromEventList+0xc4>)
 8015532:	2201      	movs	r2, #1
 8015534:	601a      	str	r2, [r3, #0]
 8015536:	e001      	b.n	801553c <xTaskRemoveFromEventList+0xa4>
 8015538:	2300      	movs	r3, #0
 801553a:	617b      	str	r3, [r7, #20]
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	4618      	mov	r0, r3
 8015540:	3718      	adds	r7, #24
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	24001d28 	.word	0x24001d28
 801554c:	24001d08 	.word	0x24001d08
 8015550:	24001830 	.word	0x24001830
 8015554:	24001cc0 	.word	0x24001cc0
 8015558:	2400182c 	.word	0x2400182c
 801555c:	24001d14 	.word	0x24001d14

08015560 <vTaskRemoveFromUnorderedEventList>:
 8015560:	b580      	push	{r7, lr}
 8015562:	b086      	sub	sp, #24
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	6039      	str	r1, [r7, #0]
 801556a:	4b29      	ldr	r3, [pc, #164]	; (8015610 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d10a      	bne.n	8015588 <vTaskRemoveFromUnorderedEventList+0x28>
 8015572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015576:	f383 8811 	msr	BASEPRI, r3
 801557a:	f3bf 8f6f 	isb	sy
 801557e:	f3bf 8f4f 	dsb	sy
 8015582:	613b      	str	r3, [r7, #16]
 8015584:	bf00      	nop
 8015586:	e7fe      	b.n	8015586 <vTaskRemoveFromUnorderedEventList+0x26>
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	601a      	str	r2, [r3, #0]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	617b      	str	r3, [r7, #20]
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d10a      	bne.n	80155b4 <vTaskRemoveFromUnorderedEventList+0x54>
 801559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a2:	f383 8811 	msr	BASEPRI, r3
 80155a6:	f3bf 8f6f 	isb	sy
 80155aa:	f3bf 8f4f 	dsb	sy
 80155ae:	60fb      	str	r3, [r7, #12]
 80155b0:	bf00      	nop
 80155b2:	e7fe      	b.n	80155b2 <vTaskRemoveFromUnorderedEventList+0x52>
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f7fe fbe1 	bl	8013d7c <uxListRemove>
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	3304      	adds	r3, #4
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fe fbdc 	bl	8013d7c <uxListRemove>
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155c8:	4b12      	ldr	r3, [pc, #72]	; (8015614 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d903      	bls.n	80155d8 <vTaskRemoveFromUnorderedEventList+0x78>
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155d4:	4a0f      	ldr	r2, [pc, #60]	; (8015614 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80155d6:	6013      	str	r3, [r2, #0]
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155dc:	4613      	mov	r3, r2
 80155de:	009b      	lsls	r3, r3, #2
 80155e0:	4413      	add	r3, r2
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4a0c      	ldr	r2, [pc, #48]	; (8015618 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80155e6:	441a      	add	r2, r3
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	3304      	adds	r3, #4
 80155ec:	4619      	mov	r1, r3
 80155ee:	4610      	mov	r0, r2
 80155f0:	f7fe fb67 	bl	8013cc2 <vListInsertEnd>
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155f8:	4b08      	ldr	r3, [pc, #32]	; (801561c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155fe:	429a      	cmp	r2, r3
 8015600:	d902      	bls.n	8015608 <vTaskRemoveFromUnorderedEventList+0xa8>
 8015602:	4b07      	ldr	r3, [pc, #28]	; (8015620 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015604:	2201      	movs	r2, #1
 8015606:	601a      	str	r2, [r3, #0]
 8015608:	bf00      	nop
 801560a:	3718      	adds	r7, #24
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}
 8015610:	24001d28 	.word	0x24001d28
 8015614:	24001d08 	.word	0x24001d08
 8015618:	24001830 	.word	0x24001830
 801561c:	2400182c 	.word	0x2400182c
 8015620:	24001d14 	.word	0x24001d14

08015624 <vTaskInternalSetTimeOutState>:
 8015624:	b480      	push	{r7}
 8015626:	b083      	sub	sp, #12
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	4b06      	ldr	r3, [pc, #24]	; (8015648 <vTaskInternalSetTimeOutState+0x24>)
 801562e:	681a      	ldr	r2, [r3, #0]
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	601a      	str	r2, [r3, #0]
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <vTaskInternalSetTimeOutState+0x28>)
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	605a      	str	r2, [r3, #4]
 801563c:	bf00      	nop
 801563e:	370c      	adds	r7, #12
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr
 8015648:	24001d18 	.word	0x24001d18
 801564c:	24001d04 	.word	0x24001d04

08015650 <xTaskCheckForTimeOut>:
 8015650:	b580      	push	{r7, lr}
 8015652:	b088      	sub	sp, #32
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d10a      	bne.n	8015676 <xTaskCheckForTimeOut+0x26>
 8015660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015664:	f383 8811 	msr	BASEPRI, r3
 8015668:	f3bf 8f6f 	isb	sy
 801566c:	f3bf 8f4f 	dsb	sy
 8015670:	613b      	str	r3, [r7, #16]
 8015672:	bf00      	nop
 8015674:	e7fe      	b.n	8015674 <xTaskCheckForTimeOut+0x24>
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d10a      	bne.n	8015692 <xTaskCheckForTimeOut+0x42>
 801567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015680:	f383 8811 	msr	BASEPRI, r3
 8015684:	f3bf 8f6f 	isb	sy
 8015688:	f3bf 8f4f 	dsb	sy
 801568c:	60fb      	str	r3, [r7, #12]
 801568e:	bf00      	nop
 8015690:	e7fe      	b.n	8015690 <xTaskCheckForTimeOut+0x40>
 8015692:	f000 feb7 	bl	8016404 <vPortEnterCritical>
 8015696:	4b1d      	ldr	r3, [pc, #116]	; (801570c <xTaskCheckForTimeOut+0xbc>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	61bb      	str	r3, [r7, #24]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	685b      	ldr	r3, [r3, #4]
 80156a0:	69ba      	ldr	r2, [r7, #24]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	617b      	str	r3, [r7, #20]
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80156ae:	d102      	bne.n	80156b6 <xTaskCheckForTimeOut+0x66>
 80156b0:	2300      	movs	r3, #0
 80156b2:	61fb      	str	r3, [r7, #28]
 80156b4:	e023      	b.n	80156fe <xTaskCheckForTimeOut+0xae>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681a      	ldr	r2, [r3, #0]
 80156ba:	4b15      	ldr	r3, [pc, #84]	; (8015710 <xTaskCheckForTimeOut+0xc0>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	429a      	cmp	r2, r3
 80156c0:	d007      	beq.n	80156d2 <xTaskCheckForTimeOut+0x82>
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	69ba      	ldr	r2, [r7, #24]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d302      	bcc.n	80156d2 <xTaskCheckForTimeOut+0x82>
 80156cc:	2301      	movs	r3, #1
 80156ce:	61fb      	str	r3, [r7, #28]
 80156d0:	e015      	b.n	80156fe <xTaskCheckForTimeOut+0xae>
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	697a      	ldr	r2, [r7, #20]
 80156d8:	429a      	cmp	r2, r3
 80156da:	d20b      	bcs.n	80156f4 <xTaskCheckForTimeOut+0xa4>
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	1ad2      	subs	r2, r2, r3
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	601a      	str	r2, [r3, #0]
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f7ff ff9b 	bl	8015624 <vTaskInternalSetTimeOutState>
 80156ee:	2300      	movs	r3, #0
 80156f0:	61fb      	str	r3, [r7, #28]
 80156f2:	e004      	b.n	80156fe <xTaskCheckForTimeOut+0xae>
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	2200      	movs	r2, #0
 80156f8:	601a      	str	r2, [r3, #0]
 80156fa:	2301      	movs	r3, #1
 80156fc:	61fb      	str	r3, [r7, #28]
 80156fe:	f000 feb1 	bl	8016464 <vPortExitCritical>
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	4618      	mov	r0, r3
 8015706:	3720      	adds	r7, #32
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}
 801570c:	24001d04 	.word	0x24001d04
 8015710:	24001d18 	.word	0x24001d18

08015714 <vTaskMissedYield>:
 8015714:	b480      	push	{r7}
 8015716:	af00      	add	r7, sp, #0
 8015718:	4b03      	ldr	r3, [pc, #12]	; (8015728 <vTaskMissedYield+0x14>)
 801571a:	2201      	movs	r2, #1
 801571c:	601a      	str	r2, [r3, #0]
 801571e:	bf00      	nop
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr
 8015728:	24001d14 	.word	0x24001d14

0801572c <prvIdleTask>:
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	f000 f852 	bl	80157dc <prvCheckTasksWaitingTermination>
 8015738:	4b06      	ldr	r3, [pc, #24]	; (8015754 <prvIdleTask+0x28>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b01      	cmp	r3, #1
 801573e:	d9f9      	bls.n	8015734 <prvIdleTask+0x8>
 8015740:	4b05      	ldr	r3, [pc, #20]	; (8015758 <prvIdleTask+0x2c>)
 8015742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015746:	601a      	str	r2, [r3, #0]
 8015748:	f3bf 8f4f 	dsb	sy
 801574c:	f3bf 8f6f 	isb	sy
 8015750:	e7f0      	b.n	8015734 <prvIdleTask+0x8>
 8015752:	bf00      	nop
 8015754:	24001830 	.word	0x24001830
 8015758:	e000ed04 	.word	0xe000ed04

0801575c <prvInitialiseTaskLists>:
 801575c:	b580      	push	{r7, lr}
 801575e:	b082      	sub	sp, #8
 8015760:	af00      	add	r7, sp, #0
 8015762:	2300      	movs	r3, #0
 8015764:	607b      	str	r3, [r7, #4]
 8015766:	e00c      	b.n	8015782 <prvInitialiseTaskLists+0x26>
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	4613      	mov	r3, r2
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	4413      	add	r3, r2
 8015770:	009b      	lsls	r3, r3, #2
 8015772:	4a12      	ldr	r2, [pc, #72]	; (80157bc <prvInitialiseTaskLists+0x60>)
 8015774:	4413      	add	r3, r2
 8015776:	4618      	mov	r0, r3
 8015778:	f7fe fa76 	bl	8013c68 <vListInitialise>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	3301      	adds	r3, #1
 8015780:	607b      	str	r3, [r7, #4]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2b37      	cmp	r3, #55	; 0x37
 8015786:	d9ef      	bls.n	8015768 <prvInitialiseTaskLists+0xc>
 8015788:	480d      	ldr	r0, [pc, #52]	; (80157c0 <prvInitialiseTaskLists+0x64>)
 801578a:	f7fe fa6d 	bl	8013c68 <vListInitialise>
 801578e:	480d      	ldr	r0, [pc, #52]	; (80157c4 <prvInitialiseTaskLists+0x68>)
 8015790:	f7fe fa6a 	bl	8013c68 <vListInitialise>
 8015794:	480c      	ldr	r0, [pc, #48]	; (80157c8 <prvInitialiseTaskLists+0x6c>)
 8015796:	f7fe fa67 	bl	8013c68 <vListInitialise>
 801579a:	480c      	ldr	r0, [pc, #48]	; (80157cc <prvInitialiseTaskLists+0x70>)
 801579c:	f7fe fa64 	bl	8013c68 <vListInitialise>
 80157a0:	480b      	ldr	r0, [pc, #44]	; (80157d0 <prvInitialiseTaskLists+0x74>)
 80157a2:	f7fe fa61 	bl	8013c68 <vListInitialise>
 80157a6:	4b0b      	ldr	r3, [pc, #44]	; (80157d4 <prvInitialiseTaskLists+0x78>)
 80157a8:	4a05      	ldr	r2, [pc, #20]	; (80157c0 <prvInitialiseTaskLists+0x64>)
 80157aa:	601a      	str	r2, [r3, #0]
 80157ac:	4b0a      	ldr	r3, [pc, #40]	; (80157d8 <prvInitialiseTaskLists+0x7c>)
 80157ae:	4a05      	ldr	r2, [pc, #20]	; (80157c4 <prvInitialiseTaskLists+0x68>)
 80157b0:	601a      	str	r2, [r3, #0]
 80157b2:	bf00      	nop
 80157b4:	3708      	adds	r7, #8
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	24001830 	.word	0x24001830
 80157c0:	24001c90 	.word	0x24001c90
 80157c4:	24001ca4 	.word	0x24001ca4
 80157c8:	24001cc0 	.word	0x24001cc0
 80157cc:	24001cd4 	.word	0x24001cd4
 80157d0:	24001cec 	.word	0x24001cec
 80157d4:	24001cb8 	.word	0x24001cb8
 80157d8:	24001cbc 	.word	0x24001cbc

080157dc <prvCheckTasksWaitingTermination>:
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	e019      	b.n	8015818 <prvCheckTasksWaitingTermination+0x3c>
 80157e4:	f000 fe0e 	bl	8016404 <vPortEnterCritical>
 80157e8:	4b10      	ldr	r3, [pc, #64]	; (801582c <prvCheckTasksWaitingTermination+0x50>)
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	607b      	str	r3, [r7, #4]
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	3304      	adds	r3, #4
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7fe fac1 	bl	8013d7c <uxListRemove>
 80157fa:	4b0d      	ldr	r3, [pc, #52]	; (8015830 <prvCheckTasksWaitingTermination+0x54>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	3b01      	subs	r3, #1
 8015800:	4a0b      	ldr	r2, [pc, #44]	; (8015830 <prvCheckTasksWaitingTermination+0x54>)
 8015802:	6013      	str	r3, [r2, #0]
 8015804:	4b0b      	ldr	r3, [pc, #44]	; (8015834 <prvCheckTasksWaitingTermination+0x58>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	3b01      	subs	r3, #1
 801580a:	4a0a      	ldr	r2, [pc, #40]	; (8015834 <prvCheckTasksWaitingTermination+0x58>)
 801580c:	6013      	str	r3, [r2, #0]
 801580e:	f000 fe29 	bl	8016464 <vPortExitCritical>
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 f810 	bl	8015838 <prvDeleteTCB>
 8015818:	4b06      	ldr	r3, [pc, #24]	; (8015834 <prvCheckTasksWaitingTermination+0x58>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d1e1      	bne.n	80157e4 <prvCheckTasksWaitingTermination+0x8>
 8015820:	bf00      	nop
 8015822:	bf00      	nop
 8015824:	3708      	adds	r7, #8
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop
 801582c:	24001cd4 	.word	0x24001cd4
 8015830:	24001d00 	.word	0x24001d00
 8015834:	24001ce8 	.word	0x24001ce8

08015838 <prvDeleteTCB>:
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015846:	2b00      	cmp	r3, #0
 8015848:	d108      	bne.n	801585c <prvDeleteTCB+0x24>
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801584e:	4618      	mov	r0, r3
 8015850:	f000 ffc6 	bl	80167e0 <vPortFree>
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f000 ffc3 	bl	80167e0 <vPortFree>
 801585a:	e018      	b.n	801588e <prvDeleteTCB+0x56>
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015862:	2b01      	cmp	r3, #1
 8015864:	d103      	bne.n	801586e <prvDeleteTCB+0x36>
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f000 ffba 	bl	80167e0 <vPortFree>
 801586c:	e00f      	b.n	801588e <prvDeleteTCB+0x56>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015874:	2b02      	cmp	r3, #2
 8015876:	d00a      	beq.n	801588e <prvDeleteTCB+0x56>
 8015878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801587c:	f383 8811 	msr	BASEPRI, r3
 8015880:	f3bf 8f6f 	isb	sy
 8015884:	f3bf 8f4f 	dsb	sy
 8015888:	60fb      	str	r3, [r7, #12]
 801588a:	bf00      	nop
 801588c:	e7fe      	b.n	801588c <prvDeleteTCB+0x54>
 801588e:	bf00      	nop
 8015890:	3710      	adds	r7, #16
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
	...

08015898 <prvResetNextTaskUnblockTime>:
 8015898:	b480      	push	{r7}
 801589a:	b083      	sub	sp, #12
 801589c:	af00      	add	r7, sp, #0
 801589e:	4b0c      	ldr	r3, [pc, #48]	; (80158d0 <prvResetNextTaskUnblockTime+0x38>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d104      	bne.n	80158b2 <prvResetNextTaskUnblockTime+0x1a>
 80158a8:	4b0a      	ldr	r3, [pc, #40]	; (80158d4 <prvResetNextTaskUnblockTime+0x3c>)
 80158aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158ae:	601a      	str	r2, [r3, #0]
 80158b0:	e008      	b.n	80158c4 <prvResetNextTaskUnblockTime+0x2c>
 80158b2:	4b07      	ldr	r3, [pc, #28]	; (80158d0 <prvResetNextTaskUnblockTime+0x38>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	607b      	str	r3, [r7, #4]
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	4a04      	ldr	r2, [pc, #16]	; (80158d4 <prvResetNextTaskUnblockTime+0x3c>)
 80158c2:	6013      	str	r3, [r2, #0]
 80158c4:	bf00      	nop
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr
 80158d0:	24001cb8 	.word	0x24001cb8
 80158d4:	24001d20 	.word	0x24001d20

080158d8 <xTaskGetSchedulerState>:
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	4b0b      	ldr	r3, [pc, #44]	; (801590c <xTaskGetSchedulerState+0x34>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d102      	bne.n	80158ec <xTaskGetSchedulerState+0x14>
 80158e6:	2301      	movs	r3, #1
 80158e8:	607b      	str	r3, [r7, #4]
 80158ea:	e008      	b.n	80158fe <xTaskGetSchedulerState+0x26>
 80158ec:	4b08      	ldr	r3, [pc, #32]	; (8015910 <xTaskGetSchedulerState+0x38>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d102      	bne.n	80158fa <xTaskGetSchedulerState+0x22>
 80158f4:	2302      	movs	r3, #2
 80158f6:	607b      	str	r3, [r7, #4]
 80158f8:	e001      	b.n	80158fe <xTaskGetSchedulerState+0x26>
 80158fa:	2300      	movs	r3, #0
 80158fc:	607b      	str	r3, [r7, #4]
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	4618      	mov	r0, r3
 8015902:	370c      	adds	r7, #12
 8015904:	46bd      	mov	sp, r7
 8015906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590a:	4770      	bx	lr
 801590c:	24001d0c 	.word	0x24001d0c
 8015910:	24001d28 	.word	0x24001d28

08015914 <xTaskPriorityDisinherit>:
 8015914:	b580      	push	{r7, lr}
 8015916:	b086      	sub	sp, #24
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	613b      	str	r3, [r7, #16]
 8015920:	2300      	movs	r3, #0
 8015922:	617b      	str	r3, [r7, #20]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d056      	beq.n	80159d8 <xTaskPriorityDisinherit+0xc4>
 801592a:	4b2e      	ldr	r3, [pc, #184]	; (80159e4 <xTaskPriorityDisinherit+0xd0>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	693a      	ldr	r2, [r7, #16]
 8015930:	429a      	cmp	r2, r3
 8015932:	d00a      	beq.n	801594a <xTaskPriorityDisinherit+0x36>
 8015934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015938:	f383 8811 	msr	BASEPRI, r3
 801593c:	f3bf 8f6f 	isb	sy
 8015940:	f3bf 8f4f 	dsb	sy
 8015944:	60fb      	str	r3, [r7, #12]
 8015946:	bf00      	nop
 8015948:	e7fe      	b.n	8015948 <xTaskPriorityDisinherit+0x34>
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801594e:	2b00      	cmp	r3, #0
 8015950:	d10a      	bne.n	8015968 <xTaskPriorityDisinherit+0x54>
 8015952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015956:	f383 8811 	msr	BASEPRI, r3
 801595a:	f3bf 8f6f 	isb	sy
 801595e:	f3bf 8f4f 	dsb	sy
 8015962:	60bb      	str	r3, [r7, #8]
 8015964:	bf00      	nop
 8015966:	e7fe      	b.n	8015966 <xTaskPriorityDisinherit+0x52>
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801596c:	1e5a      	subs	r2, r3, #1
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	651a      	str	r2, [r3, #80]	; 0x50
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801597a:	429a      	cmp	r2, r3
 801597c:	d02c      	beq.n	80159d8 <xTaskPriorityDisinherit+0xc4>
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015982:	2b00      	cmp	r3, #0
 8015984:	d128      	bne.n	80159d8 <xTaskPriorityDisinherit+0xc4>
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	3304      	adds	r3, #4
 801598a:	4618      	mov	r0, r3
 801598c:	f7fe f9f6 	bl	8013d7c <uxListRemove>
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	62da      	str	r2, [r3, #44]	; 0x2c
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801599c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	619a      	str	r2, [r3, #24]
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159a8:	4b0f      	ldr	r3, [pc, #60]	; (80159e8 <xTaskPriorityDisinherit+0xd4>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d903      	bls.n	80159b8 <xTaskPriorityDisinherit+0xa4>
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b4:	4a0c      	ldr	r2, [pc, #48]	; (80159e8 <xTaskPriorityDisinherit+0xd4>)
 80159b6:	6013      	str	r3, [r2, #0]
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159bc:	4613      	mov	r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	4413      	add	r3, r2
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	4a09      	ldr	r2, [pc, #36]	; (80159ec <xTaskPriorityDisinherit+0xd8>)
 80159c6:	441a      	add	r2, r3
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	3304      	adds	r3, #4
 80159cc:	4619      	mov	r1, r3
 80159ce:	4610      	mov	r0, r2
 80159d0:	f7fe f977 	bl	8013cc2 <vListInsertEnd>
 80159d4:	2301      	movs	r3, #1
 80159d6:	617b      	str	r3, [r7, #20]
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	4618      	mov	r0, r3
 80159dc:	3718      	adds	r7, #24
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	2400182c 	.word	0x2400182c
 80159e8:	24001d08 	.word	0x24001d08
 80159ec:	24001830 	.word	0x24001830

080159f0 <uxTaskResetEventItemValue>:
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	4b09      	ldr	r3, [pc, #36]	; (8015a1c <uxTaskResetEventItemValue+0x2c>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	699b      	ldr	r3, [r3, #24]
 80159fc:	607b      	str	r3, [r7, #4]
 80159fe:	4b07      	ldr	r3, [pc, #28]	; (8015a1c <uxTaskResetEventItemValue+0x2c>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a04:	4b05      	ldr	r3, [pc, #20]	; (8015a1c <uxTaskResetEventItemValue+0x2c>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015a0c:	619a      	str	r2, [r3, #24]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	4618      	mov	r0, r3
 8015a12:	370c      	adds	r7, #12
 8015a14:	46bd      	mov	sp, r7
 8015a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1a:	4770      	bx	lr
 8015a1c:	2400182c 	.word	0x2400182c

08015a20 <prvAddCurrentTaskToDelayedList>:
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
 8015a2a:	4b21      	ldr	r3, [pc, #132]	; (8015ab0 <prvAddCurrentTaskToDelayedList+0x90>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	60fb      	str	r3, [r7, #12]
 8015a30:	4b20      	ldr	r3, [pc, #128]	; (8015ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	3304      	adds	r3, #4
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7fe f9a0 	bl	8013d7c <uxListRemove>
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a42:	d10a      	bne.n	8015a5a <prvAddCurrentTaskToDelayedList+0x3a>
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d007      	beq.n	8015a5a <prvAddCurrentTaskToDelayedList+0x3a>
 8015a4a:	4b1a      	ldr	r3, [pc, #104]	; (8015ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	3304      	adds	r3, #4
 8015a50:	4619      	mov	r1, r3
 8015a52:	4819      	ldr	r0, [pc, #100]	; (8015ab8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015a54:	f7fe f935 	bl	8013cc2 <vListInsertEnd>
 8015a58:	e026      	b.n	8015aa8 <prvAddCurrentTaskToDelayedList+0x88>
 8015a5a:	68fa      	ldr	r2, [r7, #12]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	4413      	add	r3, r2
 8015a60:	60bb      	str	r3, [r7, #8]
 8015a62:	4b14      	ldr	r3, [pc, #80]	; (8015ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	68ba      	ldr	r2, [r7, #8]
 8015a68:	605a      	str	r2, [r3, #4]
 8015a6a:	68ba      	ldr	r2, [r7, #8]
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d209      	bcs.n	8015a86 <prvAddCurrentTaskToDelayedList+0x66>
 8015a72:	4b12      	ldr	r3, [pc, #72]	; (8015abc <prvAddCurrentTaskToDelayedList+0x9c>)
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	4b0f      	ldr	r3, [pc, #60]	; (8015ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	3304      	adds	r3, #4
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	4610      	mov	r0, r2
 8015a80:	f7fe f943 	bl	8013d0a <vListInsert>
 8015a84:	e010      	b.n	8015aa8 <prvAddCurrentTaskToDelayedList+0x88>
 8015a86:	4b0e      	ldr	r3, [pc, #56]	; (8015ac0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	4b0a      	ldr	r3, [pc, #40]	; (8015ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	3304      	adds	r3, #4
 8015a90:	4619      	mov	r1, r3
 8015a92:	4610      	mov	r0, r2
 8015a94:	f7fe f939 	bl	8013d0a <vListInsert>
 8015a98:	4b0a      	ldr	r3, [pc, #40]	; (8015ac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	68ba      	ldr	r2, [r7, #8]
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d202      	bcs.n	8015aa8 <prvAddCurrentTaskToDelayedList+0x88>
 8015aa2:	4a08      	ldr	r2, [pc, #32]	; (8015ac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	6013      	str	r3, [r2, #0]
 8015aa8:	bf00      	nop
 8015aaa:	3710      	adds	r7, #16
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	24001d04 	.word	0x24001d04
 8015ab4:	2400182c 	.word	0x2400182c
 8015ab8:	24001cec 	.word	0x24001cec
 8015abc:	24001cbc 	.word	0x24001cbc
 8015ac0:	24001cb8 	.word	0x24001cb8
 8015ac4:	24001d20 	.word	0x24001d20

08015ac8 <xTimerCreateTimerTask>:
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b08a      	sub	sp, #40	; 0x28
 8015acc:	af04      	add	r7, sp, #16
 8015ace:	2300      	movs	r3, #0
 8015ad0:	617b      	str	r3, [r7, #20]
 8015ad2:	f000 fb07 	bl	80160e4 <prvCheckForValidListAndQueue>
 8015ad6:	4b1c      	ldr	r3, [pc, #112]	; (8015b48 <xTimerCreateTimerTask+0x80>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d021      	beq.n	8015b22 <xTimerCreateTimerTask+0x5a>
 8015ade:	2300      	movs	r3, #0
 8015ae0:	60fb      	str	r3, [r7, #12]
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	60bb      	str	r3, [r7, #8]
 8015ae6:	1d3a      	adds	r2, r7, #4
 8015ae8:	f107 0108 	add.w	r1, r7, #8
 8015aec:	f107 030c 	add.w	r3, r7, #12
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7fd fe33 	bl	801375c <vApplicationGetTimerTaskMemory>
 8015af6:	6879      	ldr	r1, [r7, #4]
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	68fa      	ldr	r2, [r7, #12]
 8015afc:	9202      	str	r2, [sp, #8]
 8015afe:	9301      	str	r3, [sp, #4]
 8015b00:	2302      	movs	r3, #2
 8015b02:	9300      	str	r3, [sp, #0]
 8015b04:	2300      	movs	r3, #0
 8015b06:	460a      	mov	r2, r1
 8015b08:	4910      	ldr	r1, [pc, #64]	; (8015b4c <xTimerCreateTimerTask+0x84>)
 8015b0a:	4811      	ldr	r0, [pc, #68]	; (8015b50 <xTimerCreateTimerTask+0x88>)
 8015b0c:	f7fe ff06 	bl	801491c <xTaskCreateStatic>
 8015b10:	4603      	mov	r3, r0
 8015b12:	4a10      	ldr	r2, [pc, #64]	; (8015b54 <xTimerCreateTimerTask+0x8c>)
 8015b14:	6013      	str	r3, [r2, #0]
 8015b16:	4b0f      	ldr	r3, [pc, #60]	; (8015b54 <xTimerCreateTimerTask+0x8c>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d001      	beq.n	8015b22 <xTimerCreateTimerTask+0x5a>
 8015b1e:	2301      	movs	r3, #1
 8015b20:	617b      	str	r3, [r7, #20]
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d10a      	bne.n	8015b3e <xTimerCreateTimerTask+0x76>
 8015b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b2c:	f383 8811 	msr	BASEPRI, r3
 8015b30:	f3bf 8f6f 	isb	sy
 8015b34:	f3bf 8f4f 	dsb	sy
 8015b38:	613b      	str	r3, [r7, #16]
 8015b3a:	bf00      	nop
 8015b3c:	e7fe      	b.n	8015b3c <xTimerCreateTimerTask+0x74>
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	4618      	mov	r0, r3
 8015b42:	3718      	adds	r7, #24
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}
 8015b48:	24001d5c 	.word	0x24001d5c
 8015b4c:	08017730 	.word	0x08017730
 8015b50:	08015c8d 	.word	0x08015c8d
 8015b54:	24001d60 	.word	0x24001d60

08015b58 <xTimerGenericCommand>:
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b08a      	sub	sp, #40	; 0x28
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	607a      	str	r2, [r7, #4]
 8015b64:	603b      	str	r3, [r7, #0]
 8015b66:	2300      	movs	r3, #0
 8015b68:	627b      	str	r3, [r7, #36]	; 0x24
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d10a      	bne.n	8015b86 <xTimerGenericCommand+0x2e>
 8015b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b74:	f383 8811 	msr	BASEPRI, r3
 8015b78:	f3bf 8f6f 	isb	sy
 8015b7c:	f3bf 8f4f 	dsb	sy
 8015b80:	623b      	str	r3, [r7, #32]
 8015b82:	bf00      	nop
 8015b84:	e7fe      	b.n	8015b84 <xTimerGenericCommand+0x2c>
 8015b86:	4b1a      	ldr	r3, [pc, #104]	; (8015bf0 <xTimerGenericCommand+0x98>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d02a      	beq.n	8015be4 <xTimerGenericCommand+0x8c>
 8015b8e:	68bb      	ldr	r3, [r7, #8]
 8015b90:	613b      	str	r3, [r7, #16]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	617b      	str	r3, [r7, #20]
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	61bb      	str	r3, [r7, #24]
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	2b05      	cmp	r3, #5
 8015b9e:	dc18      	bgt.n	8015bd2 <xTimerGenericCommand+0x7a>
 8015ba0:	f7ff fe9a 	bl	80158d8 <xTaskGetSchedulerState>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2b02      	cmp	r3, #2
 8015ba8:	d109      	bne.n	8015bbe <xTimerGenericCommand+0x66>
 8015baa:	4b11      	ldr	r3, [pc, #68]	; (8015bf0 <xTimerGenericCommand+0x98>)
 8015bac:	6818      	ldr	r0, [r3, #0]
 8015bae:	f107 0110 	add.w	r1, r7, #16
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bb6:	f7fe fa49 	bl	801404c <xQueueGenericSend>
 8015bba:	6278      	str	r0, [r7, #36]	; 0x24
 8015bbc:	e012      	b.n	8015be4 <xTimerGenericCommand+0x8c>
 8015bbe:	4b0c      	ldr	r3, [pc, #48]	; (8015bf0 <xTimerGenericCommand+0x98>)
 8015bc0:	6818      	ldr	r0, [r3, #0]
 8015bc2:	f107 0110 	add.w	r1, r7, #16
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	2200      	movs	r2, #0
 8015bca:	f7fe fa3f 	bl	801404c <xQueueGenericSend>
 8015bce:	6278      	str	r0, [r7, #36]	; 0x24
 8015bd0:	e008      	b.n	8015be4 <xTimerGenericCommand+0x8c>
 8015bd2:	4b07      	ldr	r3, [pc, #28]	; (8015bf0 <xTimerGenericCommand+0x98>)
 8015bd4:	6818      	ldr	r0, [r3, #0]
 8015bd6:	f107 0110 	add.w	r1, r7, #16
 8015bda:	2300      	movs	r3, #0
 8015bdc:	683a      	ldr	r2, [r7, #0]
 8015bde:	f7fe fb33 	bl	8014248 <xQueueGenericSendFromISR>
 8015be2:	6278      	str	r0, [r7, #36]	; 0x24
 8015be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be6:	4618      	mov	r0, r3
 8015be8:	3728      	adds	r7, #40	; 0x28
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	24001d5c 	.word	0x24001d5c

08015bf4 <prvProcessExpiredTimer>:
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b088      	sub	sp, #32
 8015bf8:	af02      	add	r7, sp, #8
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
 8015bfe:	4b22      	ldr	r3, [pc, #136]	; (8015c88 <prvProcessExpiredTimer+0x94>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	68db      	ldr	r3, [r3, #12]
 8015c06:	617b      	str	r3, [r7, #20]
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	3304      	adds	r3, #4
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7fe f8b5 	bl	8013d7c <uxListRemove>
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c18:	f003 0304 	and.w	r3, r3, #4
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d022      	beq.n	8015c66 <prvProcessExpiredTimer+0x72>
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	699a      	ldr	r2, [r3, #24]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	18d1      	adds	r1, r2, r3
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	683a      	ldr	r2, [r7, #0]
 8015c2c:	6978      	ldr	r0, [r7, #20]
 8015c2e:	f000 f8d1 	bl	8015dd4 <prvInsertTimerInActiveList>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d01f      	beq.n	8015c78 <prvProcessExpiredTimer+0x84>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	9300      	str	r3, [sp, #0]
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	687a      	ldr	r2, [r7, #4]
 8015c40:	2100      	movs	r1, #0
 8015c42:	6978      	ldr	r0, [r7, #20]
 8015c44:	f7ff ff88 	bl	8015b58 <xTimerGenericCommand>
 8015c48:	6138      	str	r0, [r7, #16]
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d113      	bne.n	8015c78 <prvProcessExpiredTimer+0x84>
 8015c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c54:	f383 8811 	msr	BASEPRI, r3
 8015c58:	f3bf 8f6f 	isb	sy
 8015c5c:	f3bf 8f4f 	dsb	sy
 8015c60:	60fb      	str	r3, [r7, #12]
 8015c62:	bf00      	nop
 8015c64:	e7fe      	b.n	8015c64 <prvProcessExpiredTimer+0x70>
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c6c:	f023 0301 	bic.w	r3, r3, #1
 8015c70:	b2da      	uxtb	r2, r3
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	6a1b      	ldr	r3, [r3, #32]
 8015c7c:	6978      	ldr	r0, [r7, #20]
 8015c7e:	4798      	blx	r3
 8015c80:	bf00      	nop
 8015c82:	3718      	adds	r7, #24
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}
 8015c88:	24001d54 	.word	0x24001d54

08015c8c <prvTimerTask>:
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	f107 0308 	add.w	r3, r7, #8
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 f857 	bl	8015d4c <prvGetNextExpireTime>
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f000 f803 	bl	8015cb0 <prvProcessTimerOrBlockTask>
 8015caa:	f000 f8d5 	bl	8015e58 <prvProcessReceivedCommands>
 8015cae:	e7f1      	b.n	8015c94 <prvTimerTask+0x8>

08015cb0 <prvProcessTimerOrBlockTask>:
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b084      	sub	sp, #16
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
 8015cba:	f7ff f985 	bl	8014fc8 <vTaskSuspendAll>
 8015cbe:	f107 0308 	add.w	r3, r7, #8
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f000 f866 	bl	8015d94 <prvSampleTimeNow>
 8015cc8:	60f8      	str	r0, [r7, #12]
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d130      	bne.n	8015d32 <prvProcessTimerOrBlockTask+0x82>
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d10a      	bne.n	8015cec <prvProcessTimerOrBlockTask+0x3c>
 8015cd6:	687a      	ldr	r2, [r7, #4]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d806      	bhi.n	8015cec <prvProcessTimerOrBlockTask+0x3c>
 8015cde:	f7ff f981 	bl	8014fe4 <xTaskResumeAll>
 8015ce2:	68f9      	ldr	r1, [r7, #12]
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f7ff ff85 	bl	8015bf4 <prvProcessExpiredTimer>
 8015cea:	e024      	b.n	8015d36 <prvProcessTimerOrBlockTask+0x86>
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d008      	beq.n	8015d04 <prvProcessTimerOrBlockTask+0x54>
 8015cf2:	4b13      	ldr	r3, [pc, #76]	; (8015d40 <prvProcessTimerOrBlockTask+0x90>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d101      	bne.n	8015d00 <prvProcessTimerOrBlockTask+0x50>
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	e000      	b.n	8015d02 <prvProcessTimerOrBlockTask+0x52>
 8015d00:	2300      	movs	r3, #0
 8015d02:	603b      	str	r3, [r7, #0]
 8015d04:	4b0f      	ldr	r3, [pc, #60]	; (8015d44 <prvProcessTimerOrBlockTask+0x94>)
 8015d06:	6818      	ldr	r0, [r3, #0]
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	1ad3      	subs	r3, r2, r3
 8015d0e:	683a      	ldr	r2, [r7, #0]
 8015d10:	4619      	mov	r1, r3
 8015d12:	f7fe fdcf 	bl	80148b4 <vQueueWaitForMessageRestricted>
 8015d16:	f7ff f965 	bl	8014fe4 <xTaskResumeAll>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10a      	bne.n	8015d36 <prvProcessTimerOrBlockTask+0x86>
 8015d20:	4b09      	ldr	r3, [pc, #36]	; (8015d48 <prvProcessTimerOrBlockTask+0x98>)
 8015d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d26:	601a      	str	r2, [r3, #0]
 8015d28:	f3bf 8f4f 	dsb	sy
 8015d2c:	f3bf 8f6f 	isb	sy
 8015d30:	e001      	b.n	8015d36 <prvProcessTimerOrBlockTask+0x86>
 8015d32:	f7ff f957 	bl	8014fe4 <xTaskResumeAll>
 8015d36:	bf00      	nop
 8015d38:	3710      	adds	r7, #16
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	24001d58 	.word	0x24001d58
 8015d44:	24001d5c 	.word	0x24001d5c
 8015d48:	e000ed04 	.word	0xe000ed04

08015d4c <prvGetNextExpireTime>:
 8015d4c:	b480      	push	{r7}
 8015d4e:	b085      	sub	sp, #20
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	4b0e      	ldr	r3, [pc, #56]	; (8015d90 <prvGetNextExpireTime+0x44>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d101      	bne.n	8015d62 <prvGetNextExpireTime+0x16>
 8015d5e:	2201      	movs	r2, #1
 8015d60:	e000      	b.n	8015d64 <prvGetNextExpireTime+0x18>
 8015d62:	2200      	movs	r2, #0
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	601a      	str	r2, [r3, #0]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d105      	bne.n	8015d7c <prvGetNextExpireTime+0x30>
 8015d70:	4b07      	ldr	r3, [pc, #28]	; (8015d90 <prvGetNextExpireTime+0x44>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	68db      	ldr	r3, [r3, #12]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	60fb      	str	r3, [r7, #12]
 8015d7a:	e001      	b.n	8015d80 <prvGetNextExpireTime+0x34>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	60fb      	str	r3, [r7, #12]
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	4618      	mov	r0, r3
 8015d84:	3714      	adds	r7, #20
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop
 8015d90:	24001d54 	.word	0x24001d54

08015d94 <prvSampleTimeNow>:
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	f7ff f9c0 	bl	8015120 <xTaskGetTickCount>
 8015da0:	60f8      	str	r0, [r7, #12]
 8015da2:	4b0b      	ldr	r3, [pc, #44]	; (8015dd0 <prvSampleTimeNow+0x3c>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	68fa      	ldr	r2, [r7, #12]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d205      	bcs.n	8015db8 <prvSampleTimeNow+0x24>
 8015dac:	f000 f936 	bl	801601c <prvSwitchTimerLists>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2201      	movs	r2, #1
 8015db4:	601a      	str	r2, [r3, #0]
 8015db6:	e002      	b.n	8015dbe <prvSampleTimeNow+0x2a>
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	601a      	str	r2, [r3, #0]
 8015dbe:	4a04      	ldr	r2, [pc, #16]	; (8015dd0 <prvSampleTimeNow+0x3c>)
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	6013      	str	r3, [r2, #0]
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3710      	adds	r7, #16
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	24001d64 	.word	0x24001d64

08015dd4 <prvInsertTimerInActiveList>:
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b086      	sub	sp, #24
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	607a      	str	r2, [r7, #4]
 8015de0:	603b      	str	r3, [r7, #0]
 8015de2:	2300      	movs	r3, #0
 8015de4:	617b      	str	r3, [r7, #20]
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	68ba      	ldr	r2, [r7, #8]
 8015dea:	605a      	str	r2, [r3, #4]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	611a      	str	r2, [r3, #16]
 8015df2:	68ba      	ldr	r2, [r7, #8]
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d812      	bhi.n	8015e20 <prvInsertTimerInActiveList+0x4c>
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	1ad2      	subs	r2, r2, r3
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	699b      	ldr	r3, [r3, #24]
 8015e04:	429a      	cmp	r2, r3
 8015e06:	d302      	bcc.n	8015e0e <prvInsertTimerInActiveList+0x3a>
 8015e08:	2301      	movs	r3, #1
 8015e0a:	617b      	str	r3, [r7, #20]
 8015e0c:	e01b      	b.n	8015e46 <prvInsertTimerInActiveList+0x72>
 8015e0e:	4b10      	ldr	r3, [pc, #64]	; (8015e50 <prvInsertTimerInActiveList+0x7c>)
 8015e10:	681a      	ldr	r2, [r3, #0]
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	3304      	adds	r3, #4
 8015e16:	4619      	mov	r1, r3
 8015e18:	4610      	mov	r0, r2
 8015e1a:	f7fd ff76 	bl	8013d0a <vListInsert>
 8015e1e:	e012      	b.n	8015e46 <prvInsertTimerInActiveList+0x72>
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	429a      	cmp	r2, r3
 8015e26:	d206      	bcs.n	8015e36 <prvInsertTimerInActiveList+0x62>
 8015e28:	68ba      	ldr	r2, [r7, #8]
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d302      	bcc.n	8015e36 <prvInsertTimerInActiveList+0x62>
 8015e30:	2301      	movs	r3, #1
 8015e32:	617b      	str	r3, [r7, #20]
 8015e34:	e007      	b.n	8015e46 <prvInsertTimerInActiveList+0x72>
 8015e36:	4b07      	ldr	r3, [pc, #28]	; (8015e54 <prvInsertTimerInActiveList+0x80>)
 8015e38:	681a      	ldr	r2, [r3, #0]
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	3304      	adds	r3, #4
 8015e3e:	4619      	mov	r1, r3
 8015e40:	4610      	mov	r0, r2
 8015e42:	f7fd ff62 	bl	8013d0a <vListInsert>
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3718      	adds	r7, #24
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	24001d58 	.word	0x24001d58
 8015e54:	24001d54 	.word	0x24001d54

08015e58 <prvProcessReceivedCommands>:
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b08e      	sub	sp, #56	; 0x38
 8015e5c:	af02      	add	r7, sp, #8
 8015e5e:	e0ca      	b.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	da18      	bge.n	8015e98 <prvProcessReceivedCommands+0x40>
 8015e66:	1d3b      	adds	r3, r7, #4
 8015e68:	3304      	adds	r3, #4
 8015e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d10a      	bne.n	8015e88 <prvProcessReceivedCommands+0x30>
 8015e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e76:	f383 8811 	msr	BASEPRI, r3
 8015e7a:	f3bf 8f6f 	isb	sy
 8015e7e:	f3bf 8f4f 	dsb	sy
 8015e82:	61fb      	str	r3, [r7, #28]
 8015e84:	bf00      	nop
 8015e86:	e7fe      	b.n	8015e86 <prvProcessReceivedCommands+0x2e>
 8015e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e8e:	6850      	ldr	r0, [r2, #4]
 8015e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e92:	6892      	ldr	r2, [r2, #8]
 8015e94:	4611      	mov	r1, r2
 8015e96:	4798      	blx	r3
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	f2c0 80aa 	blt.w	8015ff4 <prvProcessReceivedCommands+0x19c>
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea6:	695b      	ldr	r3, [r3, #20]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d004      	beq.n	8015eb6 <prvProcessReceivedCommands+0x5e>
 8015eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eae:	3304      	adds	r3, #4
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7fd ff63 	bl	8013d7c <uxListRemove>
 8015eb6:	463b      	mov	r3, r7
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ff ff6b 	bl	8015d94 <prvSampleTimeNow>
 8015ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2b09      	cmp	r3, #9
 8015ec4:	f200 8097 	bhi.w	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015ec8:	a201      	add	r2, pc, #4	; (adr r2, 8015ed0 <prvProcessReceivedCommands+0x78>)
 8015eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ece:	bf00      	nop
 8015ed0:	08015ef9 	.word	0x08015ef9
 8015ed4:	08015ef9 	.word	0x08015ef9
 8015ed8:	08015ef9 	.word	0x08015ef9
 8015edc:	08015f6d 	.word	0x08015f6d
 8015ee0:	08015f81 	.word	0x08015f81
 8015ee4:	08015fcb 	.word	0x08015fcb
 8015ee8:	08015ef9 	.word	0x08015ef9
 8015eec:	08015ef9 	.word	0x08015ef9
 8015ef0:	08015f6d 	.word	0x08015f6d
 8015ef4:	08015f81 	.word	0x08015f81
 8015ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015efe:	f043 0301 	orr.w	r3, r3, #1
 8015f02:	b2da      	uxtb	r2, r3
 8015f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f0a:	68ba      	ldr	r2, [r7, #8]
 8015f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f0e:	699b      	ldr	r3, [r3, #24]
 8015f10:	18d1      	adds	r1, r2, r3
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f18:	f7ff ff5c 	bl	8015dd4 <prvInsertTimerInActiveList>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d069      	beq.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f24:	6a1b      	ldr	r3, [r3, #32]
 8015f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f28:	4798      	blx	r3
 8015f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f30:	f003 0304 	and.w	r3, r3, #4
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d05e      	beq.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015f38:	68ba      	ldr	r2, [r7, #8]
 8015f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3c:	699b      	ldr	r3, [r3, #24]
 8015f3e:	441a      	add	r2, r3
 8015f40:	2300      	movs	r3, #0
 8015f42:	9300      	str	r3, [sp, #0]
 8015f44:	2300      	movs	r3, #0
 8015f46:	2100      	movs	r1, #0
 8015f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f4a:	f7ff fe05 	bl	8015b58 <xTimerGenericCommand>
 8015f4e:	6238      	str	r0, [r7, #32]
 8015f50:	6a3b      	ldr	r3, [r7, #32]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d14f      	bne.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f5a:	f383 8811 	msr	BASEPRI, r3
 8015f5e:	f3bf 8f6f 	isb	sy
 8015f62:	f3bf 8f4f 	dsb	sy
 8015f66:	61bb      	str	r3, [r7, #24]
 8015f68:	bf00      	nop
 8015f6a:	e7fe      	b.n	8015f6a <prvProcessReceivedCommands+0x112>
 8015f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f72:	f023 0301 	bic.w	r3, r3, #1
 8015f76:	b2da      	uxtb	r2, r3
 8015f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f7e:	e03a      	b.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f86:	f043 0301 	orr.w	r3, r3, #1
 8015f8a:	b2da      	uxtb	r2, r3
 8015f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015f92:	68ba      	ldr	r2, [r7, #8]
 8015f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f96:	619a      	str	r2, [r3, #24]
 8015f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f9a:	699b      	ldr	r3, [r3, #24]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d10a      	bne.n	8015fb6 <prvProcessReceivedCommands+0x15e>
 8015fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa4:	f383 8811 	msr	BASEPRI, r3
 8015fa8:	f3bf 8f6f 	isb	sy
 8015fac:	f3bf 8f4f 	dsb	sy
 8015fb0:	617b      	str	r3, [r7, #20]
 8015fb2:	bf00      	nop
 8015fb4:	e7fe      	b.n	8015fb4 <prvProcessReceivedCommands+0x15c>
 8015fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb8:	699a      	ldr	r2, [r3, #24]
 8015fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbc:	18d1      	adds	r1, r2, r3
 8015fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fc4:	f7ff ff06 	bl	8015dd4 <prvInsertTimerInActiveList>
 8015fc8:	e015      	b.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fd0:	f003 0302 	and.w	r3, r3, #2
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d103      	bne.n	8015fe0 <prvProcessReceivedCommands+0x188>
 8015fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fda:	f000 fc01 	bl	80167e0 <vPortFree>
 8015fde:	e00a      	b.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fe6:	f023 0301 	bic.w	r3, r3, #1
 8015fea:	b2da      	uxtb	r2, r3
 8015fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8015ff2:	e000      	b.n	8015ff6 <prvProcessReceivedCommands+0x19e>
 8015ff4:	bf00      	nop
 8015ff6:	4b08      	ldr	r3, [pc, #32]	; (8016018 <prvProcessReceivedCommands+0x1c0>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	1d39      	adds	r1, r7, #4
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	4618      	mov	r0, r3
 8016000:	f7fe f9be 	bl	8014380 <xQueueReceive>
 8016004:	4603      	mov	r3, r0
 8016006:	2b00      	cmp	r3, #0
 8016008:	f47f af2a 	bne.w	8015e60 <prvProcessReceivedCommands+0x8>
 801600c:	bf00      	nop
 801600e:	bf00      	nop
 8016010:	3730      	adds	r7, #48	; 0x30
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	24001d5c 	.word	0x24001d5c

0801601c <prvSwitchTimerLists>:
 801601c:	b580      	push	{r7, lr}
 801601e:	b088      	sub	sp, #32
 8016020:	af02      	add	r7, sp, #8
 8016022:	e048      	b.n	80160b6 <prvSwitchTimerLists+0x9a>
 8016024:	4b2d      	ldr	r3, [pc, #180]	; (80160dc <prvSwitchTimerLists+0xc0>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	68db      	ldr	r3, [r3, #12]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	613b      	str	r3, [r7, #16]
 801602e:	4b2b      	ldr	r3, [pc, #172]	; (80160dc <prvSwitchTimerLists+0xc0>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	68db      	ldr	r3, [r3, #12]
 8016034:	68db      	ldr	r3, [r3, #12]
 8016036:	60fb      	str	r3, [r7, #12]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	3304      	adds	r3, #4
 801603c:	4618      	mov	r0, r3
 801603e:	f7fd fe9d 	bl	8013d7c <uxListRemove>
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	6a1b      	ldr	r3, [r3, #32]
 8016046:	68f8      	ldr	r0, [r7, #12]
 8016048:	4798      	blx	r3
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016050:	f003 0304 	and.w	r3, r3, #4
 8016054:	2b00      	cmp	r3, #0
 8016056:	d02e      	beq.n	80160b6 <prvSwitchTimerLists+0x9a>
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	699b      	ldr	r3, [r3, #24]
 801605c:	693a      	ldr	r2, [r7, #16]
 801605e:	4413      	add	r3, r2
 8016060:	60bb      	str	r3, [r7, #8]
 8016062:	68ba      	ldr	r2, [r7, #8]
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	429a      	cmp	r2, r3
 8016068:	d90e      	bls.n	8016088 <prvSwitchTimerLists+0x6c>
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	68ba      	ldr	r2, [r7, #8]
 801606e:	605a      	str	r2, [r3, #4]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	68fa      	ldr	r2, [r7, #12]
 8016074:	611a      	str	r2, [r3, #16]
 8016076:	4b19      	ldr	r3, [pc, #100]	; (80160dc <prvSwitchTimerLists+0xc0>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	3304      	adds	r3, #4
 801607e:	4619      	mov	r1, r3
 8016080:	4610      	mov	r0, r2
 8016082:	f7fd fe42 	bl	8013d0a <vListInsert>
 8016086:	e016      	b.n	80160b6 <prvSwitchTimerLists+0x9a>
 8016088:	2300      	movs	r3, #0
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	2300      	movs	r3, #0
 801608e:	693a      	ldr	r2, [r7, #16]
 8016090:	2100      	movs	r1, #0
 8016092:	68f8      	ldr	r0, [r7, #12]
 8016094:	f7ff fd60 	bl	8015b58 <xTimerGenericCommand>
 8016098:	6078      	str	r0, [r7, #4]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10a      	bne.n	80160b6 <prvSwitchTimerLists+0x9a>
 80160a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a4:	f383 8811 	msr	BASEPRI, r3
 80160a8:	f3bf 8f6f 	isb	sy
 80160ac:	f3bf 8f4f 	dsb	sy
 80160b0:	603b      	str	r3, [r7, #0]
 80160b2:	bf00      	nop
 80160b4:	e7fe      	b.n	80160b4 <prvSwitchTimerLists+0x98>
 80160b6:	4b09      	ldr	r3, [pc, #36]	; (80160dc <prvSwitchTimerLists+0xc0>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d1b1      	bne.n	8016024 <prvSwitchTimerLists+0x8>
 80160c0:	4b06      	ldr	r3, [pc, #24]	; (80160dc <prvSwitchTimerLists+0xc0>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	617b      	str	r3, [r7, #20]
 80160c6:	4b06      	ldr	r3, [pc, #24]	; (80160e0 <prvSwitchTimerLists+0xc4>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4a04      	ldr	r2, [pc, #16]	; (80160dc <prvSwitchTimerLists+0xc0>)
 80160cc:	6013      	str	r3, [r2, #0]
 80160ce:	4a04      	ldr	r2, [pc, #16]	; (80160e0 <prvSwitchTimerLists+0xc4>)
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	6013      	str	r3, [r2, #0]
 80160d4:	bf00      	nop
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	24001d54 	.word	0x24001d54
 80160e0:	24001d58 	.word	0x24001d58

080160e4 <prvCheckForValidListAndQueue>:
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af02      	add	r7, sp, #8
 80160ea:	f000 f98b 	bl	8016404 <vPortEnterCritical>
 80160ee:	4b15      	ldr	r3, [pc, #84]	; (8016144 <prvCheckForValidListAndQueue+0x60>)
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d120      	bne.n	8016138 <prvCheckForValidListAndQueue+0x54>
 80160f6:	4814      	ldr	r0, [pc, #80]	; (8016148 <prvCheckForValidListAndQueue+0x64>)
 80160f8:	f7fd fdb6 	bl	8013c68 <vListInitialise>
 80160fc:	4813      	ldr	r0, [pc, #76]	; (801614c <prvCheckForValidListAndQueue+0x68>)
 80160fe:	f7fd fdb3 	bl	8013c68 <vListInitialise>
 8016102:	4b13      	ldr	r3, [pc, #76]	; (8016150 <prvCheckForValidListAndQueue+0x6c>)
 8016104:	4a10      	ldr	r2, [pc, #64]	; (8016148 <prvCheckForValidListAndQueue+0x64>)
 8016106:	601a      	str	r2, [r3, #0]
 8016108:	4b12      	ldr	r3, [pc, #72]	; (8016154 <prvCheckForValidListAndQueue+0x70>)
 801610a:	4a10      	ldr	r2, [pc, #64]	; (801614c <prvCheckForValidListAndQueue+0x68>)
 801610c:	601a      	str	r2, [r3, #0]
 801610e:	2300      	movs	r3, #0
 8016110:	9300      	str	r3, [sp, #0]
 8016112:	4b11      	ldr	r3, [pc, #68]	; (8016158 <prvCheckForValidListAndQueue+0x74>)
 8016114:	4a11      	ldr	r2, [pc, #68]	; (801615c <prvCheckForValidListAndQueue+0x78>)
 8016116:	2110      	movs	r1, #16
 8016118:	200a      	movs	r0, #10
 801611a:	f7fd fec1 	bl	8013ea0 <xQueueGenericCreateStatic>
 801611e:	4603      	mov	r3, r0
 8016120:	4a08      	ldr	r2, [pc, #32]	; (8016144 <prvCheckForValidListAndQueue+0x60>)
 8016122:	6013      	str	r3, [r2, #0]
 8016124:	4b07      	ldr	r3, [pc, #28]	; (8016144 <prvCheckForValidListAndQueue+0x60>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d005      	beq.n	8016138 <prvCheckForValidListAndQueue+0x54>
 801612c:	4b05      	ldr	r3, [pc, #20]	; (8016144 <prvCheckForValidListAndQueue+0x60>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	490b      	ldr	r1, [pc, #44]	; (8016160 <prvCheckForValidListAndQueue+0x7c>)
 8016132:	4618      	mov	r0, r3
 8016134:	f7fe fb94 	bl	8014860 <vQueueAddToRegistry>
 8016138:	f000 f994 	bl	8016464 <vPortExitCritical>
 801613c:	bf00      	nop
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	24001d5c 	.word	0x24001d5c
 8016148:	24001d2c 	.word	0x24001d2c
 801614c:	24001d40 	.word	0x24001d40
 8016150:	24001d54 	.word	0x24001d54
 8016154:	24001d58 	.word	0x24001d58
 8016158:	24001e08 	.word	0x24001e08
 801615c:	24001d68 	.word	0x24001d68
 8016160:	08017738 	.word	0x08017738

08016164 <xTimerPendFunctionCallFromISR>:
 8016164:	b580      	push	{r7, lr}
 8016166:	b08a      	sub	sp, #40	; 0x28
 8016168:	af00      	add	r7, sp, #0
 801616a:	60f8      	str	r0, [r7, #12]
 801616c:	60b9      	str	r1, [r7, #8]
 801616e:	607a      	str	r2, [r7, #4]
 8016170:	603b      	str	r3, [r7, #0]
 8016172:	f06f 0301 	mvn.w	r3, #1
 8016176:	617b      	str	r3, [r7, #20]
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	61bb      	str	r3, [r7, #24]
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	61fb      	str	r3, [r7, #28]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	623b      	str	r3, [r7, #32]
 8016184:	4b06      	ldr	r3, [pc, #24]	; (80161a0 <xTimerPendFunctionCallFromISR+0x3c>)
 8016186:	6818      	ldr	r0, [r3, #0]
 8016188:	f107 0114 	add.w	r1, r7, #20
 801618c:	2300      	movs	r3, #0
 801618e:	683a      	ldr	r2, [r7, #0]
 8016190:	f7fe f85a 	bl	8014248 <xQueueGenericSendFromISR>
 8016194:	6278      	str	r0, [r7, #36]	; 0x24
 8016196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016198:	4618      	mov	r0, r3
 801619a:	3728      	adds	r7, #40	; 0x28
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	24001d5c 	.word	0x24001d5c

080161a4 <pxPortInitialiseStack>:
 80161a4:	b480      	push	{r7}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	607a      	str	r2, [r7, #4]
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	3b04      	subs	r3, #4
 80161b4:	60fb      	str	r3, [r7, #12]
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80161bc:	601a      	str	r2, [r3, #0]
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3b04      	subs	r3, #4
 80161c2:	60fb      	str	r3, [r7, #12]
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	f023 0201 	bic.w	r2, r3, #1
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	601a      	str	r2, [r3, #0]
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	3b04      	subs	r3, #4
 80161d2:	60fb      	str	r3, [r7, #12]
 80161d4:	4a0c      	ldr	r2, [pc, #48]	; (8016208 <pxPortInitialiseStack+0x64>)
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	601a      	str	r2, [r3, #0]
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	3b14      	subs	r3, #20
 80161de:	60fb      	str	r3, [r7, #12]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	601a      	str	r2, [r3, #0]
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	3b04      	subs	r3, #4
 80161ea:	60fb      	str	r3, [r7, #12]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	f06f 0202 	mvn.w	r2, #2
 80161f2:	601a      	str	r2, [r3, #0]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	3b20      	subs	r3, #32
 80161f8:	60fb      	str	r3, [r7, #12]
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	4618      	mov	r0, r3
 80161fe:	3714      	adds	r7, #20
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr
 8016208:	0801620d 	.word	0x0801620d

0801620c <prvTaskExitError>:
 801620c:	b480      	push	{r7}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	2300      	movs	r3, #0
 8016214:	607b      	str	r3, [r7, #4]
 8016216:	4b12      	ldr	r3, [pc, #72]	; (8016260 <prvTaskExitError+0x54>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801621e:	d00a      	beq.n	8016236 <prvTaskExitError+0x2a>
 8016220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016224:	f383 8811 	msr	BASEPRI, r3
 8016228:	f3bf 8f6f 	isb	sy
 801622c:	f3bf 8f4f 	dsb	sy
 8016230:	60fb      	str	r3, [r7, #12]
 8016232:	bf00      	nop
 8016234:	e7fe      	b.n	8016234 <prvTaskExitError+0x28>
 8016236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623a:	f383 8811 	msr	BASEPRI, r3
 801623e:	f3bf 8f6f 	isb	sy
 8016242:	f3bf 8f4f 	dsb	sy
 8016246:	60bb      	str	r3, [r7, #8]
 8016248:	bf00      	nop
 801624a:	bf00      	nop
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d0fc      	beq.n	801624c <prvTaskExitError+0x40>
 8016252:	bf00      	nop
 8016254:	bf00      	nop
 8016256:	3714      	adds	r7, #20
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr
 8016260:	240000a0 	.word	0x240000a0
	...

08016270 <SVC_Handler>:
 8016270:	4b07      	ldr	r3, [pc, #28]	; (8016290 <pxCurrentTCBConst2>)
 8016272:	6819      	ldr	r1, [r3, #0]
 8016274:	6808      	ldr	r0, [r1, #0]
 8016276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801627a:	f380 8809 	msr	PSP, r0
 801627e:	f3bf 8f6f 	isb	sy
 8016282:	f04f 0000 	mov.w	r0, #0
 8016286:	f380 8811 	msr	BASEPRI, r0
 801628a:	4770      	bx	lr
 801628c:	f3af 8000 	nop.w

08016290 <pxCurrentTCBConst2>:
 8016290:	2400182c 	.word	0x2400182c
 8016294:	bf00      	nop
 8016296:	bf00      	nop

08016298 <prvPortStartFirstTask>:
 8016298:	4808      	ldr	r0, [pc, #32]	; (80162bc <prvPortStartFirstTask+0x24>)
 801629a:	6800      	ldr	r0, [r0, #0]
 801629c:	6800      	ldr	r0, [r0, #0]
 801629e:	f380 8808 	msr	MSP, r0
 80162a2:	f04f 0000 	mov.w	r0, #0
 80162a6:	f380 8814 	msr	CONTROL, r0
 80162aa:	b662      	cpsie	i
 80162ac:	b661      	cpsie	f
 80162ae:	f3bf 8f4f 	dsb	sy
 80162b2:	f3bf 8f6f 	isb	sy
 80162b6:	df00      	svc	0
 80162b8:	bf00      	nop
 80162ba:	bf00      	nop
 80162bc:	e000ed08 	.word	0xe000ed08

080162c0 <xPortStartScheduler>:
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b086      	sub	sp, #24
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	4b46      	ldr	r3, [pc, #280]	; (80163e0 <xPortStartScheduler+0x120>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	4a46      	ldr	r2, [pc, #280]	; (80163e4 <xPortStartScheduler+0x124>)
 80162cc:	4293      	cmp	r3, r2
 80162ce:	d10a      	bne.n	80162e6 <xPortStartScheduler+0x26>
 80162d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d4:	f383 8811 	msr	BASEPRI, r3
 80162d8:	f3bf 8f6f 	isb	sy
 80162dc:	f3bf 8f4f 	dsb	sy
 80162e0:	613b      	str	r3, [r7, #16]
 80162e2:	bf00      	nop
 80162e4:	e7fe      	b.n	80162e4 <xPortStartScheduler+0x24>
 80162e6:	4b3e      	ldr	r3, [pc, #248]	; (80163e0 <xPortStartScheduler+0x120>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	4a3f      	ldr	r2, [pc, #252]	; (80163e8 <xPortStartScheduler+0x128>)
 80162ec:	4293      	cmp	r3, r2
 80162ee:	d10a      	bne.n	8016306 <xPortStartScheduler+0x46>
 80162f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162f4:	f383 8811 	msr	BASEPRI, r3
 80162f8:	f3bf 8f6f 	isb	sy
 80162fc:	f3bf 8f4f 	dsb	sy
 8016300:	60fb      	str	r3, [r7, #12]
 8016302:	bf00      	nop
 8016304:	e7fe      	b.n	8016304 <xPortStartScheduler+0x44>
 8016306:	4b39      	ldr	r3, [pc, #228]	; (80163ec <xPortStartScheduler+0x12c>)
 8016308:	617b      	str	r3, [r7, #20]
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	b2db      	uxtb	r3, r3
 8016310:	607b      	str	r3, [r7, #4]
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	22ff      	movs	r2, #255	; 0xff
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	697b      	ldr	r3, [r7, #20]
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	b2db      	uxtb	r3, r3
 801631e:	70fb      	strb	r3, [r7, #3]
 8016320:	78fb      	ldrb	r3, [r7, #3]
 8016322:	b2db      	uxtb	r3, r3
 8016324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016328:	b2da      	uxtb	r2, r3
 801632a:	4b31      	ldr	r3, [pc, #196]	; (80163f0 <xPortStartScheduler+0x130>)
 801632c:	701a      	strb	r2, [r3, #0]
 801632e:	4b31      	ldr	r3, [pc, #196]	; (80163f4 <xPortStartScheduler+0x134>)
 8016330:	2207      	movs	r2, #7
 8016332:	601a      	str	r2, [r3, #0]
 8016334:	e009      	b.n	801634a <xPortStartScheduler+0x8a>
 8016336:	4b2f      	ldr	r3, [pc, #188]	; (80163f4 <xPortStartScheduler+0x134>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	3b01      	subs	r3, #1
 801633c:	4a2d      	ldr	r2, [pc, #180]	; (80163f4 <xPortStartScheduler+0x134>)
 801633e:	6013      	str	r3, [r2, #0]
 8016340:	78fb      	ldrb	r3, [r7, #3]
 8016342:	b2db      	uxtb	r3, r3
 8016344:	005b      	lsls	r3, r3, #1
 8016346:	b2db      	uxtb	r3, r3
 8016348:	70fb      	strb	r3, [r7, #3]
 801634a:	78fb      	ldrb	r3, [r7, #3]
 801634c:	b2db      	uxtb	r3, r3
 801634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016352:	2b80      	cmp	r3, #128	; 0x80
 8016354:	d0ef      	beq.n	8016336 <xPortStartScheduler+0x76>
 8016356:	4b27      	ldr	r3, [pc, #156]	; (80163f4 <xPortStartScheduler+0x134>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	f1c3 0307 	rsb	r3, r3, #7
 801635e:	2b04      	cmp	r3, #4
 8016360:	d00a      	beq.n	8016378 <xPortStartScheduler+0xb8>
 8016362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016366:	f383 8811 	msr	BASEPRI, r3
 801636a:	f3bf 8f6f 	isb	sy
 801636e:	f3bf 8f4f 	dsb	sy
 8016372:	60bb      	str	r3, [r7, #8]
 8016374:	bf00      	nop
 8016376:	e7fe      	b.n	8016376 <xPortStartScheduler+0xb6>
 8016378:	4b1e      	ldr	r3, [pc, #120]	; (80163f4 <xPortStartScheduler+0x134>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	021b      	lsls	r3, r3, #8
 801637e:	4a1d      	ldr	r2, [pc, #116]	; (80163f4 <xPortStartScheduler+0x134>)
 8016380:	6013      	str	r3, [r2, #0]
 8016382:	4b1c      	ldr	r3, [pc, #112]	; (80163f4 <xPortStartScheduler+0x134>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801638a:	4a1a      	ldr	r2, [pc, #104]	; (80163f4 <xPortStartScheduler+0x134>)
 801638c:	6013      	str	r3, [r2, #0]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	b2da      	uxtb	r2, r3
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	701a      	strb	r2, [r3, #0]
 8016396:	4b18      	ldr	r3, [pc, #96]	; (80163f8 <xPortStartScheduler+0x138>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	4a17      	ldr	r2, [pc, #92]	; (80163f8 <xPortStartScheduler+0x138>)
 801639c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80163a0:	6013      	str	r3, [r2, #0]
 80163a2:	4b15      	ldr	r3, [pc, #84]	; (80163f8 <xPortStartScheduler+0x138>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	4a14      	ldr	r2, [pc, #80]	; (80163f8 <xPortStartScheduler+0x138>)
 80163a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80163ac:	6013      	str	r3, [r2, #0]
 80163ae:	f000 f8dd 	bl	801656c <vPortSetupTimerInterrupt>
 80163b2:	4b12      	ldr	r3, [pc, #72]	; (80163fc <xPortStartScheduler+0x13c>)
 80163b4:	2200      	movs	r2, #0
 80163b6:	601a      	str	r2, [r3, #0]
 80163b8:	f000 f8fc 	bl	80165b4 <vPortEnableVFP>
 80163bc:	4b10      	ldr	r3, [pc, #64]	; (8016400 <xPortStartScheduler+0x140>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	4a0f      	ldr	r2, [pc, #60]	; (8016400 <xPortStartScheduler+0x140>)
 80163c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80163c6:	6013      	str	r3, [r2, #0]
 80163c8:	f7ff ff66 	bl	8016298 <prvPortStartFirstTask>
 80163cc:	f7fe ff7a 	bl	80152c4 <vTaskSwitchContext>
 80163d0:	f7ff ff1c 	bl	801620c <prvTaskExitError>
 80163d4:	2300      	movs	r3, #0
 80163d6:	4618      	mov	r0, r3
 80163d8:	3718      	adds	r7, #24
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	e000ed00 	.word	0xe000ed00
 80163e4:	410fc271 	.word	0x410fc271
 80163e8:	410fc270 	.word	0x410fc270
 80163ec:	e000e400 	.word	0xe000e400
 80163f0:	24001e58 	.word	0x24001e58
 80163f4:	24001e5c 	.word	0x24001e5c
 80163f8:	e000ed20 	.word	0xe000ed20
 80163fc:	240000a0 	.word	0x240000a0
 8016400:	e000ef34 	.word	0xe000ef34

08016404 <vPortEnterCritical>:
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801640e:	f383 8811 	msr	BASEPRI, r3
 8016412:	f3bf 8f6f 	isb	sy
 8016416:	f3bf 8f4f 	dsb	sy
 801641a:	607b      	str	r3, [r7, #4]
 801641c:	bf00      	nop
 801641e:	4b0f      	ldr	r3, [pc, #60]	; (801645c <vPortEnterCritical+0x58>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	3301      	adds	r3, #1
 8016424:	4a0d      	ldr	r2, [pc, #52]	; (801645c <vPortEnterCritical+0x58>)
 8016426:	6013      	str	r3, [r2, #0]
 8016428:	4b0c      	ldr	r3, [pc, #48]	; (801645c <vPortEnterCritical+0x58>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2b01      	cmp	r3, #1
 801642e:	d10f      	bne.n	8016450 <vPortEnterCritical+0x4c>
 8016430:	4b0b      	ldr	r3, [pc, #44]	; (8016460 <vPortEnterCritical+0x5c>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	b2db      	uxtb	r3, r3
 8016436:	2b00      	cmp	r3, #0
 8016438:	d00a      	beq.n	8016450 <vPortEnterCritical+0x4c>
 801643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801643e:	f383 8811 	msr	BASEPRI, r3
 8016442:	f3bf 8f6f 	isb	sy
 8016446:	f3bf 8f4f 	dsb	sy
 801644a:	603b      	str	r3, [r7, #0]
 801644c:	bf00      	nop
 801644e:	e7fe      	b.n	801644e <vPortEnterCritical+0x4a>
 8016450:	bf00      	nop
 8016452:	370c      	adds	r7, #12
 8016454:	46bd      	mov	sp, r7
 8016456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645a:	4770      	bx	lr
 801645c:	240000a0 	.word	0x240000a0
 8016460:	e000ed04 	.word	0xe000ed04

08016464 <vPortExitCritical>:
 8016464:	b480      	push	{r7}
 8016466:	b083      	sub	sp, #12
 8016468:	af00      	add	r7, sp, #0
 801646a:	4b12      	ldr	r3, [pc, #72]	; (80164b4 <vPortExitCritical+0x50>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d10a      	bne.n	8016488 <vPortExitCritical+0x24>
 8016472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016476:	f383 8811 	msr	BASEPRI, r3
 801647a:	f3bf 8f6f 	isb	sy
 801647e:	f3bf 8f4f 	dsb	sy
 8016482:	607b      	str	r3, [r7, #4]
 8016484:	bf00      	nop
 8016486:	e7fe      	b.n	8016486 <vPortExitCritical+0x22>
 8016488:	4b0a      	ldr	r3, [pc, #40]	; (80164b4 <vPortExitCritical+0x50>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	3b01      	subs	r3, #1
 801648e:	4a09      	ldr	r2, [pc, #36]	; (80164b4 <vPortExitCritical+0x50>)
 8016490:	6013      	str	r3, [r2, #0]
 8016492:	4b08      	ldr	r3, [pc, #32]	; (80164b4 <vPortExitCritical+0x50>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d105      	bne.n	80164a6 <vPortExitCritical+0x42>
 801649a:	2300      	movs	r3, #0
 801649c:	603b      	str	r3, [r7, #0]
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	f383 8811 	msr	BASEPRI, r3
 80164a4:	bf00      	nop
 80164a6:	bf00      	nop
 80164a8:	370c      	adds	r7, #12
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr
 80164b2:	bf00      	nop
 80164b4:	240000a0 	.word	0x240000a0
	...

080164c0 <PendSV_Handler>:
 80164c0:	f3ef 8009 	mrs	r0, PSP
 80164c4:	f3bf 8f6f 	isb	sy
 80164c8:	4b15      	ldr	r3, [pc, #84]	; (8016520 <pxCurrentTCBConst>)
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	f01e 0f10 	tst.w	lr, #16
 80164d0:	bf08      	it	eq
 80164d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80164d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164da:	6010      	str	r0, [r2, #0]
 80164dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80164e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80164e4:	f380 8811 	msr	BASEPRI, r0
 80164e8:	f3bf 8f4f 	dsb	sy
 80164ec:	f3bf 8f6f 	isb	sy
 80164f0:	f7fe fee8 	bl	80152c4 <vTaskSwitchContext>
 80164f4:	f04f 0000 	mov.w	r0, #0
 80164f8:	f380 8811 	msr	BASEPRI, r0
 80164fc:	bc09      	pop	{r0, r3}
 80164fe:	6819      	ldr	r1, [r3, #0]
 8016500:	6808      	ldr	r0, [r1, #0]
 8016502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016506:	f01e 0f10 	tst.w	lr, #16
 801650a:	bf08      	it	eq
 801650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016510:	f380 8809 	msr	PSP, r0
 8016514:	f3bf 8f6f 	isb	sy
 8016518:	4770      	bx	lr
 801651a:	bf00      	nop
 801651c:	f3af 8000 	nop.w

08016520 <pxCurrentTCBConst>:
 8016520:	2400182c 	.word	0x2400182c
 8016524:	bf00      	nop
 8016526:	bf00      	nop

08016528 <xPortSysTickHandler>:
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
 801652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016532:	f383 8811 	msr	BASEPRI, r3
 8016536:	f3bf 8f6f 	isb	sy
 801653a:	f3bf 8f4f 	dsb	sy
 801653e:	607b      	str	r3, [r7, #4]
 8016540:	bf00      	nop
 8016542:	f7fe fdfd 	bl	8015140 <xTaskIncrementTick>
 8016546:	4603      	mov	r3, r0
 8016548:	2b00      	cmp	r3, #0
 801654a:	d003      	beq.n	8016554 <xPortSysTickHandler+0x2c>
 801654c:	4b06      	ldr	r3, [pc, #24]	; (8016568 <xPortSysTickHandler+0x40>)
 801654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	2300      	movs	r3, #0
 8016556:	603b      	str	r3, [r7, #0]
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	f383 8811 	msr	BASEPRI, r3
 801655e:	bf00      	nop
 8016560:	bf00      	nop
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}
 8016568:	e000ed04 	.word	0xe000ed04

0801656c <vPortSetupTimerInterrupt>:
 801656c:	b480      	push	{r7}
 801656e:	af00      	add	r7, sp, #0
 8016570:	4b0b      	ldr	r3, [pc, #44]	; (80165a0 <vPortSetupTimerInterrupt+0x34>)
 8016572:	2200      	movs	r2, #0
 8016574:	601a      	str	r2, [r3, #0]
 8016576:	4b0b      	ldr	r3, [pc, #44]	; (80165a4 <vPortSetupTimerInterrupt+0x38>)
 8016578:	2200      	movs	r2, #0
 801657a:	601a      	str	r2, [r3, #0]
 801657c:	4b0a      	ldr	r3, [pc, #40]	; (80165a8 <vPortSetupTimerInterrupt+0x3c>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4a0a      	ldr	r2, [pc, #40]	; (80165ac <vPortSetupTimerInterrupt+0x40>)
 8016582:	fba2 2303 	umull	r2, r3, r2, r3
 8016586:	099b      	lsrs	r3, r3, #6
 8016588:	4a09      	ldr	r2, [pc, #36]	; (80165b0 <vPortSetupTimerInterrupt+0x44>)
 801658a:	3b01      	subs	r3, #1
 801658c:	6013      	str	r3, [r2, #0]
 801658e:	4b04      	ldr	r3, [pc, #16]	; (80165a0 <vPortSetupTimerInterrupt+0x34>)
 8016590:	2207      	movs	r2, #7
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	bf00      	nop
 8016596:	46bd      	mov	sp, r7
 8016598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659c:	4770      	bx	lr
 801659e:	bf00      	nop
 80165a0:	e000e010 	.word	0xe000e010
 80165a4:	e000e018 	.word	0xe000e018
 80165a8:	24000090 	.word	0x24000090
 80165ac:	10624dd3 	.word	0x10624dd3
 80165b0:	e000e014 	.word	0xe000e014

080165b4 <vPortEnableVFP>:
 80165b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80165c4 <vPortEnableVFP+0x10>
 80165b8:	6801      	ldr	r1, [r0, #0]
 80165ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80165be:	6001      	str	r1, [r0, #0]
 80165c0:	4770      	bx	lr
 80165c2:	bf00      	nop
 80165c4:	e000ed88 	.word	0xe000ed88

080165c8 <vPortValidateInterruptPriority>:
 80165c8:	b480      	push	{r7}
 80165ca:	b085      	sub	sp, #20
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	f3ef 8305 	mrs	r3, IPSR
 80165d2:	60fb      	str	r3, [r7, #12]
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	2b0f      	cmp	r3, #15
 80165d8:	d914      	bls.n	8016604 <vPortValidateInterruptPriority+0x3c>
 80165da:	4a17      	ldr	r2, [pc, #92]	; (8016638 <vPortValidateInterruptPriority+0x70>)
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	4413      	add	r3, r2
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	72fb      	strb	r3, [r7, #11]
 80165e4:	4b15      	ldr	r3, [pc, #84]	; (801663c <vPortValidateInterruptPriority+0x74>)
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	7afa      	ldrb	r2, [r7, #11]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d20a      	bcs.n	8016604 <vPortValidateInterruptPriority+0x3c>
 80165ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f2:	f383 8811 	msr	BASEPRI, r3
 80165f6:	f3bf 8f6f 	isb	sy
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	607b      	str	r3, [r7, #4]
 8016600:	bf00      	nop
 8016602:	e7fe      	b.n	8016602 <vPortValidateInterruptPriority+0x3a>
 8016604:	4b0e      	ldr	r3, [pc, #56]	; (8016640 <vPortValidateInterruptPriority+0x78>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801660c:	4b0d      	ldr	r3, [pc, #52]	; (8016644 <vPortValidateInterruptPriority+0x7c>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	429a      	cmp	r2, r3
 8016612:	d90a      	bls.n	801662a <vPortValidateInterruptPriority+0x62>
 8016614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016618:	f383 8811 	msr	BASEPRI, r3
 801661c:	f3bf 8f6f 	isb	sy
 8016620:	f3bf 8f4f 	dsb	sy
 8016624:	603b      	str	r3, [r7, #0]
 8016626:	bf00      	nop
 8016628:	e7fe      	b.n	8016628 <vPortValidateInterruptPriority+0x60>
 801662a:	bf00      	nop
 801662c:	3714      	adds	r7, #20
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr
 8016636:	bf00      	nop
 8016638:	e000e3f0 	.word	0xe000e3f0
 801663c:	24001e58 	.word	0x24001e58
 8016640:	e000ed0c 	.word	0xe000ed0c
 8016644:	24001e5c 	.word	0x24001e5c

08016648 <pvPortMalloc>:
 8016648:	b580      	push	{r7, lr}
 801664a:	b08a      	sub	sp, #40	; 0x28
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	2300      	movs	r3, #0
 8016652:	61fb      	str	r3, [r7, #28]
 8016654:	f7fe fcb8 	bl	8014fc8 <vTaskSuspendAll>
 8016658:	4b5b      	ldr	r3, [pc, #364]	; (80167c8 <pvPortMalloc+0x180>)
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d101      	bne.n	8016664 <pvPortMalloc+0x1c>
 8016660:	f000 f920 	bl	80168a4 <prvHeapInit>
 8016664:	4b59      	ldr	r3, [pc, #356]	; (80167cc <pvPortMalloc+0x184>)
 8016666:	681a      	ldr	r2, [r3, #0]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	4013      	ands	r3, r2
 801666c:	2b00      	cmp	r3, #0
 801666e:	f040 8093 	bne.w	8016798 <pvPortMalloc+0x150>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d01d      	beq.n	80166b4 <pvPortMalloc+0x6c>
 8016678:	2208      	movs	r2, #8
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	4413      	add	r3, r2
 801667e:	607b      	str	r3, [r7, #4]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f003 0307 	and.w	r3, r3, #7
 8016686:	2b00      	cmp	r3, #0
 8016688:	d014      	beq.n	80166b4 <pvPortMalloc+0x6c>
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f023 0307 	bic.w	r3, r3, #7
 8016690:	3308      	adds	r3, #8
 8016692:	607b      	str	r3, [r7, #4]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f003 0307 	and.w	r3, r3, #7
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00a      	beq.n	80166b4 <pvPortMalloc+0x6c>
 801669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a2:	f383 8811 	msr	BASEPRI, r3
 80166a6:	f3bf 8f6f 	isb	sy
 80166aa:	f3bf 8f4f 	dsb	sy
 80166ae:	617b      	str	r3, [r7, #20]
 80166b0:	bf00      	nop
 80166b2:	e7fe      	b.n	80166b2 <pvPortMalloc+0x6a>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d06e      	beq.n	8016798 <pvPortMalloc+0x150>
 80166ba:	4b45      	ldr	r3, [pc, #276]	; (80167d0 <pvPortMalloc+0x188>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	429a      	cmp	r2, r3
 80166c2:	d869      	bhi.n	8016798 <pvPortMalloc+0x150>
 80166c4:	4b43      	ldr	r3, [pc, #268]	; (80167d4 <pvPortMalloc+0x18c>)
 80166c6:	623b      	str	r3, [r7, #32]
 80166c8:	4b42      	ldr	r3, [pc, #264]	; (80167d4 <pvPortMalloc+0x18c>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	627b      	str	r3, [r7, #36]	; 0x24
 80166ce:	e004      	b.n	80166da <pvPortMalloc+0x92>
 80166d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d2:	623b      	str	r3, [r7, #32]
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	627b      	str	r3, [r7, #36]	; 0x24
 80166da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166dc:	685b      	ldr	r3, [r3, #4]
 80166de:	687a      	ldr	r2, [r7, #4]
 80166e0:	429a      	cmp	r2, r3
 80166e2:	d903      	bls.n	80166ec <pvPortMalloc+0xa4>
 80166e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d1f1      	bne.n	80166d0 <pvPortMalloc+0x88>
 80166ec:	4b36      	ldr	r3, [pc, #216]	; (80167c8 <pvPortMalloc+0x180>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d050      	beq.n	8016798 <pvPortMalloc+0x150>
 80166f6:	6a3b      	ldr	r3, [r7, #32]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	2208      	movs	r2, #8
 80166fc:	4413      	add	r3, r2
 80166fe:	61fb      	str	r3, [r7, #28]
 8016700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016702:	681a      	ldr	r2, [r3, #0]
 8016704:	6a3b      	ldr	r3, [r7, #32]
 8016706:	601a      	str	r2, [r3, #0]
 8016708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670a:	685a      	ldr	r2, [r3, #4]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	1ad2      	subs	r2, r2, r3
 8016710:	2308      	movs	r3, #8
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	429a      	cmp	r2, r3
 8016716:	d91f      	bls.n	8016758 <pvPortMalloc+0x110>
 8016718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	4413      	add	r3, r2
 801671e:	61bb      	str	r3, [r7, #24]
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	f003 0307 	and.w	r3, r3, #7
 8016726:	2b00      	cmp	r3, #0
 8016728:	d00a      	beq.n	8016740 <pvPortMalloc+0xf8>
 801672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801672e:	f383 8811 	msr	BASEPRI, r3
 8016732:	f3bf 8f6f 	isb	sy
 8016736:	f3bf 8f4f 	dsb	sy
 801673a:	613b      	str	r3, [r7, #16]
 801673c:	bf00      	nop
 801673e:	e7fe      	b.n	801673e <pvPortMalloc+0xf6>
 8016740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016742:	685a      	ldr	r2, [r3, #4]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	1ad2      	subs	r2, r2, r3
 8016748:	69bb      	ldr	r3, [r7, #24]
 801674a:	605a      	str	r2, [r3, #4]
 801674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674e:	687a      	ldr	r2, [r7, #4]
 8016750:	605a      	str	r2, [r3, #4]
 8016752:	69b8      	ldr	r0, [r7, #24]
 8016754:	f000 f908 	bl	8016968 <prvInsertBlockIntoFreeList>
 8016758:	4b1d      	ldr	r3, [pc, #116]	; (80167d0 <pvPortMalloc+0x188>)
 801675a:	681a      	ldr	r2, [r3, #0]
 801675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675e:	685b      	ldr	r3, [r3, #4]
 8016760:	1ad3      	subs	r3, r2, r3
 8016762:	4a1b      	ldr	r2, [pc, #108]	; (80167d0 <pvPortMalloc+0x188>)
 8016764:	6013      	str	r3, [r2, #0]
 8016766:	4b1a      	ldr	r3, [pc, #104]	; (80167d0 <pvPortMalloc+0x188>)
 8016768:	681a      	ldr	r2, [r3, #0]
 801676a:	4b1b      	ldr	r3, [pc, #108]	; (80167d8 <pvPortMalloc+0x190>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	429a      	cmp	r2, r3
 8016770:	d203      	bcs.n	801677a <pvPortMalloc+0x132>
 8016772:	4b17      	ldr	r3, [pc, #92]	; (80167d0 <pvPortMalloc+0x188>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4a18      	ldr	r2, [pc, #96]	; (80167d8 <pvPortMalloc+0x190>)
 8016778:	6013      	str	r3, [r2, #0]
 801677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677c:	685a      	ldr	r2, [r3, #4]
 801677e:	4b13      	ldr	r3, [pc, #76]	; (80167cc <pvPortMalloc+0x184>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	431a      	orrs	r2, r3
 8016784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016786:	605a      	str	r2, [r3, #4]
 8016788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801678a:	2200      	movs	r2, #0
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	4b13      	ldr	r3, [pc, #76]	; (80167dc <pvPortMalloc+0x194>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	3301      	adds	r3, #1
 8016794:	4a11      	ldr	r2, [pc, #68]	; (80167dc <pvPortMalloc+0x194>)
 8016796:	6013      	str	r3, [r2, #0]
 8016798:	f7fe fc24 	bl	8014fe4 <xTaskResumeAll>
 801679c:	69fb      	ldr	r3, [r7, #28]
 801679e:	f003 0307 	and.w	r3, r3, #7
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d00a      	beq.n	80167bc <pvPortMalloc+0x174>
 80167a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167aa:	f383 8811 	msr	BASEPRI, r3
 80167ae:	f3bf 8f6f 	isb	sy
 80167b2:	f3bf 8f4f 	dsb	sy
 80167b6:	60fb      	str	r3, [r7, #12]
 80167b8:	bf00      	nop
 80167ba:	e7fe      	b.n	80167ba <pvPortMalloc+0x172>
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	4618      	mov	r0, r3
 80167c0:	3728      	adds	r7, #40	; 0x28
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	24005a68 	.word	0x24005a68
 80167cc:	24005a7c 	.word	0x24005a7c
 80167d0:	24005a6c 	.word	0x24005a6c
 80167d4:	24005a60 	.word	0x24005a60
 80167d8:	24005a70 	.word	0x24005a70
 80167dc:	24005a74 	.word	0x24005a74

080167e0 <vPortFree>:
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b086      	sub	sp, #24
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	617b      	str	r3, [r7, #20]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d04d      	beq.n	801688e <vPortFree+0xae>
 80167f2:	2308      	movs	r3, #8
 80167f4:	425b      	negs	r3, r3
 80167f6:	697a      	ldr	r2, [r7, #20]
 80167f8:	4413      	add	r3, r2
 80167fa:	617b      	str	r3, [r7, #20]
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	613b      	str	r3, [r7, #16]
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	685a      	ldr	r2, [r3, #4]
 8016804:	4b24      	ldr	r3, [pc, #144]	; (8016898 <vPortFree+0xb8>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4013      	ands	r3, r2
 801680a:	2b00      	cmp	r3, #0
 801680c:	d10a      	bne.n	8016824 <vPortFree+0x44>
 801680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016812:	f383 8811 	msr	BASEPRI, r3
 8016816:	f3bf 8f6f 	isb	sy
 801681a:	f3bf 8f4f 	dsb	sy
 801681e:	60fb      	str	r3, [r7, #12]
 8016820:	bf00      	nop
 8016822:	e7fe      	b.n	8016822 <vPortFree+0x42>
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d00a      	beq.n	8016842 <vPortFree+0x62>
 801682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016830:	f383 8811 	msr	BASEPRI, r3
 8016834:	f3bf 8f6f 	isb	sy
 8016838:	f3bf 8f4f 	dsb	sy
 801683c:	60bb      	str	r3, [r7, #8]
 801683e:	bf00      	nop
 8016840:	e7fe      	b.n	8016840 <vPortFree+0x60>
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	685a      	ldr	r2, [r3, #4]
 8016846:	4b14      	ldr	r3, [pc, #80]	; (8016898 <vPortFree+0xb8>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4013      	ands	r3, r2
 801684c:	2b00      	cmp	r3, #0
 801684e:	d01e      	beq.n	801688e <vPortFree+0xae>
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d11a      	bne.n	801688e <vPortFree+0xae>
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	685a      	ldr	r2, [r3, #4]
 801685c:	4b0e      	ldr	r3, [pc, #56]	; (8016898 <vPortFree+0xb8>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	43db      	mvns	r3, r3
 8016862:	401a      	ands	r2, r3
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	605a      	str	r2, [r3, #4]
 8016868:	f7fe fbae 	bl	8014fc8 <vTaskSuspendAll>
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	685a      	ldr	r2, [r3, #4]
 8016870:	4b0a      	ldr	r3, [pc, #40]	; (801689c <vPortFree+0xbc>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4413      	add	r3, r2
 8016876:	4a09      	ldr	r2, [pc, #36]	; (801689c <vPortFree+0xbc>)
 8016878:	6013      	str	r3, [r2, #0]
 801687a:	6938      	ldr	r0, [r7, #16]
 801687c:	f000 f874 	bl	8016968 <prvInsertBlockIntoFreeList>
 8016880:	4b07      	ldr	r3, [pc, #28]	; (80168a0 <vPortFree+0xc0>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	3301      	adds	r3, #1
 8016886:	4a06      	ldr	r2, [pc, #24]	; (80168a0 <vPortFree+0xc0>)
 8016888:	6013      	str	r3, [r2, #0]
 801688a:	f7fe fbab 	bl	8014fe4 <xTaskResumeAll>
 801688e:	bf00      	nop
 8016890:	3718      	adds	r7, #24
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
 8016896:	bf00      	nop
 8016898:	24005a7c 	.word	0x24005a7c
 801689c:	24005a6c 	.word	0x24005a6c
 80168a0:	24005a78 	.word	0x24005a78

080168a4 <prvHeapInit>:
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80168ae:	60bb      	str	r3, [r7, #8]
 80168b0:	4b27      	ldr	r3, [pc, #156]	; (8016950 <prvHeapInit+0xac>)
 80168b2:	60fb      	str	r3, [r7, #12]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	f003 0307 	and.w	r3, r3, #7
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d00c      	beq.n	80168d8 <prvHeapInit+0x34>
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	3307      	adds	r3, #7
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	f023 0307 	bic.w	r3, r3, #7
 80168ca:	60fb      	str	r3, [r7, #12]
 80168cc:	68ba      	ldr	r2, [r7, #8]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	1ad3      	subs	r3, r2, r3
 80168d2:	4a1f      	ldr	r2, [pc, #124]	; (8016950 <prvHeapInit+0xac>)
 80168d4:	4413      	add	r3, r2
 80168d6:	60bb      	str	r3, [r7, #8]
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	607b      	str	r3, [r7, #4]
 80168dc:	4a1d      	ldr	r2, [pc, #116]	; (8016954 <prvHeapInit+0xb0>)
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	6013      	str	r3, [r2, #0]
 80168e2:	4b1c      	ldr	r3, [pc, #112]	; (8016954 <prvHeapInit+0xb0>)
 80168e4:	2200      	movs	r2, #0
 80168e6:	605a      	str	r2, [r3, #4]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	68ba      	ldr	r2, [r7, #8]
 80168ec:	4413      	add	r3, r2
 80168ee:	60fb      	str	r3, [r7, #12]
 80168f0:	2208      	movs	r2, #8
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	1a9b      	subs	r3, r3, r2
 80168f6:	60fb      	str	r3, [r7, #12]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	f023 0307 	bic.w	r3, r3, #7
 80168fe:	60fb      	str	r3, [r7, #12]
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	4a15      	ldr	r2, [pc, #84]	; (8016958 <prvHeapInit+0xb4>)
 8016904:	6013      	str	r3, [r2, #0]
 8016906:	4b14      	ldr	r3, [pc, #80]	; (8016958 <prvHeapInit+0xb4>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	2200      	movs	r2, #0
 801690c:	605a      	str	r2, [r3, #4]
 801690e:	4b12      	ldr	r3, [pc, #72]	; (8016958 <prvHeapInit+0xb4>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	2200      	movs	r2, #0
 8016914:	601a      	str	r2, [r3, #0]
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	603b      	str	r3, [r7, #0]
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	1ad2      	subs	r2, r2, r3
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	605a      	str	r2, [r3, #4]
 8016924:	4b0c      	ldr	r3, [pc, #48]	; (8016958 <prvHeapInit+0xb4>)
 8016926:	681a      	ldr	r2, [r3, #0]
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	601a      	str	r2, [r3, #0]
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	685b      	ldr	r3, [r3, #4]
 8016930:	4a0a      	ldr	r2, [pc, #40]	; (801695c <prvHeapInit+0xb8>)
 8016932:	6013      	str	r3, [r2, #0]
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	4a09      	ldr	r2, [pc, #36]	; (8016960 <prvHeapInit+0xbc>)
 801693a:	6013      	str	r3, [r2, #0]
 801693c:	4b09      	ldr	r3, [pc, #36]	; (8016964 <prvHeapInit+0xc0>)
 801693e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016942:	601a      	str	r2, [r3, #0]
 8016944:	bf00      	nop
 8016946:	3714      	adds	r7, #20
 8016948:	46bd      	mov	sp, r7
 801694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694e:	4770      	bx	lr
 8016950:	24001e60 	.word	0x24001e60
 8016954:	24005a60 	.word	0x24005a60
 8016958:	24005a68 	.word	0x24005a68
 801695c:	24005a70 	.word	0x24005a70
 8016960:	24005a6c 	.word	0x24005a6c
 8016964:	24005a7c 	.word	0x24005a7c

08016968 <prvInsertBlockIntoFreeList>:
 8016968:	b480      	push	{r7}
 801696a:	b085      	sub	sp, #20
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	4b28      	ldr	r3, [pc, #160]	; (8016a14 <prvInsertBlockIntoFreeList+0xac>)
 8016972:	60fb      	str	r3, [r7, #12]
 8016974:	e002      	b.n	801697c <prvInsertBlockIntoFreeList+0x14>
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	60fb      	str	r3, [r7, #12]
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	687a      	ldr	r2, [r7, #4]
 8016982:	429a      	cmp	r2, r3
 8016984:	d8f7      	bhi.n	8016976 <prvInsertBlockIntoFreeList+0xe>
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	60bb      	str	r3, [r7, #8]
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	68ba      	ldr	r2, [r7, #8]
 8016990:	4413      	add	r3, r2
 8016992:	687a      	ldr	r2, [r7, #4]
 8016994:	429a      	cmp	r2, r3
 8016996:	d108      	bne.n	80169aa <prvInsertBlockIntoFreeList+0x42>
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	441a      	add	r2, r3
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	605a      	str	r2, [r3, #4]
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	607b      	str	r3, [r7, #4]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	60bb      	str	r3, [r7, #8]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	68ba      	ldr	r2, [r7, #8]
 80169b4:	441a      	add	r2, r3
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d118      	bne.n	80169f0 <prvInsertBlockIntoFreeList+0x88>
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	4b15      	ldr	r3, [pc, #84]	; (8016a18 <prvInsertBlockIntoFreeList+0xb0>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d00d      	beq.n	80169e6 <prvInsertBlockIntoFreeList+0x7e>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	685a      	ldr	r2, [r3, #4]
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	685b      	ldr	r3, [r3, #4]
 80169d4:	441a      	add	r2, r3
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	605a      	str	r2, [r3, #4]
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	601a      	str	r2, [r3, #0]
 80169e4:	e008      	b.n	80169f8 <prvInsertBlockIntoFreeList+0x90>
 80169e6:	4b0c      	ldr	r3, [pc, #48]	; (8016a18 <prvInsertBlockIntoFreeList+0xb0>)
 80169e8:	681a      	ldr	r2, [r3, #0]
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	601a      	str	r2, [r3, #0]
 80169ee:	e003      	b.n	80169f8 <prvInsertBlockIntoFreeList+0x90>
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	681a      	ldr	r2, [r3, #0]
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	601a      	str	r2, [r3, #0]
 80169f8:	68fa      	ldr	r2, [r7, #12]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d002      	beq.n	8016a06 <prvInsertBlockIntoFreeList+0x9e>
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	601a      	str	r2, [r3, #0]
 8016a06:	bf00      	nop
 8016a08:	3714      	adds	r7, #20
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a10:	4770      	bx	lr
 8016a12:	bf00      	nop
 8016a14:	24005a60 	.word	0x24005a60
 8016a18:	24005a68 	.word	0x24005a68

08016a1c <__errno>:
 8016a1c:	4b01      	ldr	r3, [pc, #4]	; (8016a24 <__errno+0x8>)
 8016a1e:	6818      	ldr	r0, [r3, #0]
 8016a20:	4770      	bx	lr
 8016a22:	bf00      	nop
 8016a24:	240000a4 	.word	0x240000a4

08016a28 <__libc_init_array>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	4d0d      	ldr	r5, [pc, #52]	; (8016a60 <__libc_init_array+0x38>)
 8016a2c:	4c0d      	ldr	r4, [pc, #52]	; (8016a64 <__libc_init_array+0x3c>)
 8016a2e:	1b64      	subs	r4, r4, r5
 8016a30:	10a4      	asrs	r4, r4, #2
 8016a32:	2600      	movs	r6, #0
 8016a34:	42a6      	cmp	r6, r4
 8016a36:	d109      	bne.n	8016a4c <__libc_init_array+0x24>
 8016a38:	4d0b      	ldr	r5, [pc, #44]	; (8016a68 <__libc_init_array+0x40>)
 8016a3a:	4c0c      	ldr	r4, [pc, #48]	; (8016a6c <__libc_init_array+0x44>)
 8016a3c:	f000 fd3c 	bl	80174b8 <_init>
 8016a40:	1b64      	subs	r4, r4, r5
 8016a42:	10a4      	asrs	r4, r4, #2
 8016a44:	2600      	movs	r6, #0
 8016a46:	42a6      	cmp	r6, r4
 8016a48:	d105      	bne.n	8016a56 <__libc_init_array+0x2e>
 8016a4a:	bd70      	pop	{r4, r5, r6, pc}
 8016a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a50:	4798      	blx	r3
 8016a52:	3601      	adds	r6, #1
 8016a54:	e7ee      	b.n	8016a34 <__libc_init_array+0xc>
 8016a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a5a:	4798      	blx	r3
 8016a5c:	3601      	adds	r6, #1
 8016a5e:	e7f2      	b.n	8016a46 <__libc_init_array+0x1e>
 8016a60:	0801790c 	.word	0x0801790c
 8016a64:	0801790c 	.word	0x0801790c
 8016a68:	0801790c 	.word	0x0801790c
 8016a6c:	08017910 	.word	0x08017910

08016a70 <malloc>:
 8016a70:	4b02      	ldr	r3, [pc, #8]	; (8016a7c <malloc+0xc>)
 8016a72:	4601      	mov	r1, r0
 8016a74:	6818      	ldr	r0, [r3, #0]
 8016a76:	f000 b88d 	b.w	8016b94 <_malloc_r>
 8016a7a:	bf00      	nop
 8016a7c:	240000a4 	.word	0x240000a4

08016a80 <free>:
 8016a80:	4b02      	ldr	r3, [pc, #8]	; (8016a8c <free+0xc>)
 8016a82:	4601      	mov	r1, r0
 8016a84:	6818      	ldr	r0, [r3, #0]
 8016a86:	f000 b819 	b.w	8016abc <_free_r>
 8016a8a:	bf00      	nop
 8016a8c:	240000a4 	.word	0x240000a4

08016a90 <memcpy>:
 8016a90:	440a      	add	r2, r1
 8016a92:	4291      	cmp	r1, r2
 8016a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016a98:	d100      	bne.n	8016a9c <memcpy+0xc>
 8016a9a:	4770      	bx	lr
 8016a9c:	b510      	push	{r4, lr}
 8016a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016aa6:	4291      	cmp	r1, r2
 8016aa8:	d1f9      	bne.n	8016a9e <memcpy+0xe>
 8016aaa:	bd10      	pop	{r4, pc}

08016aac <memset>:
 8016aac:	4402      	add	r2, r0
 8016aae:	4603      	mov	r3, r0
 8016ab0:	4293      	cmp	r3, r2
 8016ab2:	d100      	bne.n	8016ab6 <memset+0xa>
 8016ab4:	4770      	bx	lr
 8016ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8016aba:	e7f9      	b.n	8016ab0 <memset+0x4>

08016abc <_free_r>:
 8016abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016abe:	2900      	cmp	r1, #0
 8016ac0:	d044      	beq.n	8016b4c <_free_r+0x90>
 8016ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ac6:	9001      	str	r0, [sp, #4]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	f1a1 0404 	sub.w	r4, r1, #4
 8016ace:	bfb8      	it	lt
 8016ad0:	18e4      	addlt	r4, r4, r3
 8016ad2:	f000 fc39 	bl	8017348 <__malloc_lock>
 8016ad6:	4a1e      	ldr	r2, [pc, #120]	; (8016b50 <_free_r+0x94>)
 8016ad8:	9801      	ldr	r0, [sp, #4]
 8016ada:	6813      	ldr	r3, [r2, #0]
 8016adc:	b933      	cbnz	r3, 8016aec <_free_r+0x30>
 8016ade:	6063      	str	r3, [r4, #4]
 8016ae0:	6014      	str	r4, [r2, #0]
 8016ae2:	b003      	add	sp, #12
 8016ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ae8:	f000 bc34 	b.w	8017354 <__malloc_unlock>
 8016aec:	42a3      	cmp	r3, r4
 8016aee:	d908      	bls.n	8016b02 <_free_r+0x46>
 8016af0:	6825      	ldr	r5, [r4, #0]
 8016af2:	1961      	adds	r1, r4, r5
 8016af4:	428b      	cmp	r3, r1
 8016af6:	bf01      	itttt	eq
 8016af8:	6819      	ldreq	r1, [r3, #0]
 8016afa:	685b      	ldreq	r3, [r3, #4]
 8016afc:	1949      	addeq	r1, r1, r5
 8016afe:	6021      	streq	r1, [r4, #0]
 8016b00:	e7ed      	b.n	8016ade <_free_r+0x22>
 8016b02:	461a      	mov	r2, r3
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	b10b      	cbz	r3, 8016b0c <_free_r+0x50>
 8016b08:	42a3      	cmp	r3, r4
 8016b0a:	d9fa      	bls.n	8016b02 <_free_r+0x46>
 8016b0c:	6811      	ldr	r1, [r2, #0]
 8016b0e:	1855      	adds	r5, r2, r1
 8016b10:	42a5      	cmp	r5, r4
 8016b12:	d10b      	bne.n	8016b2c <_free_r+0x70>
 8016b14:	6824      	ldr	r4, [r4, #0]
 8016b16:	4421      	add	r1, r4
 8016b18:	1854      	adds	r4, r2, r1
 8016b1a:	42a3      	cmp	r3, r4
 8016b1c:	6011      	str	r1, [r2, #0]
 8016b1e:	d1e0      	bne.n	8016ae2 <_free_r+0x26>
 8016b20:	681c      	ldr	r4, [r3, #0]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	6053      	str	r3, [r2, #4]
 8016b26:	4421      	add	r1, r4
 8016b28:	6011      	str	r1, [r2, #0]
 8016b2a:	e7da      	b.n	8016ae2 <_free_r+0x26>
 8016b2c:	d902      	bls.n	8016b34 <_free_r+0x78>
 8016b2e:	230c      	movs	r3, #12
 8016b30:	6003      	str	r3, [r0, #0]
 8016b32:	e7d6      	b.n	8016ae2 <_free_r+0x26>
 8016b34:	6825      	ldr	r5, [r4, #0]
 8016b36:	1961      	adds	r1, r4, r5
 8016b38:	428b      	cmp	r3, r1
 8016b3a:	bf04      	itt	eq
 8016b3c:	6819      	ldreq	r1, [r3, #0]
 8016b3e:	685b      	ldreq	r3, [r3, #4]
 8016b40:	6063      	str	r3, [r4, #4]
 8016b42:	bf04      	itt	eq
 8016b44:	1949      	addeq	r1, r1, r5
 8016b46:	6021      	streq	r1, [r4, #0]
 8016b48:	6054      	str	r4, [r2, #4]
 8016b4a:	e7ca      	b.n	8016ae2 <_free_r+0x26>
 8016b4c:	b003      	add	sp, #12
 8016b4e:	bd30      	pop	{r4, r5, pc}
 8016b50:	24005a80 	.word	0x24005a80

08016b54 <sbrk_aligned>:
 8016b54:	b570      	push	{r4, r5, r6, lr}
 8016b56:	4e0e      	ldr	r6, [pc, #56]	; (8016b90 <sbrk_aligned+0x3c>)
 8016b58:	460c      	mov	r4, r1
 8016b5a:	6831      	ldr	r1, [r6, #0]
 8016b5c:	4605      	mov	r5, r0
 8016b5e:	b911      	cbnz	r1, 8016b66 <sbrk_aligned+0x12>
 8016b60:	f000 f902 	bl	8016d68 <_sbrk_r>
 8016b64:	6030      	str	r0, [r6, #0]
 8016b66:	4621      	mov	r1, r4
 8016b68:	4628      	mov	r0, r5
 8016b6a:	f000 f8fd 	bl	8016d68 <_sbrk_r>
 8016b6e:	1c43      	adds	r3, r0, #1
 8016b70:	d00a      	beq.n	8016b88 <sbrk_aligned+0x34>
 8016b72:	1cc4      	adds	r4, r0, #3
 8016b74:	f024 0403 	bic.w	r4, r4, #3
 8016b78:	42a0      	cmp	r0, r4
 8016b7a:	d007      	beq.n	8016b8c <sbrk_aligned+0x38>
 8016b7c:	1a21      	subs	r1, r4, r0
 8016b7e:	4628      	mov	r0, r5
 8016b80:	f000 f8f2 	bl	8016d68 <_sbrk_r>
 8016b84:	3001      	adds	r0, #1
 8016b86:	d101      	bne.n	8016b8c <sbrk_aligned+0x38>
 8016b88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016b8c:	4620      	mov	r0, r4
 8016b8e:	bd70      	pop	{r4, r5, r6, pc}
 8016b90:	24005a84 	.word	0x24005a84

08016b94 <_malloc_r>:
 8016b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b98:	1ccd      	adds	r5, r1, #3
 8016b9a:	f025 0503 	bic.w	r5, r5, #3
 8016b9e:	3508      	adds	r5, #8
 8016ba0:	2d0c      	cmp	r5, #12
 8016ba2:	bf38      	it	cc
 8016ba4:	250c      	movcc	r5, #12
 8016ba6:	2d00      	cmp	r5, #0
 8016ba8:	4607      	mov	r7, r0
 8016baa:	db01      	blt.n	8016bb0 <_malloc_r+0x1c>
 8016bac:	42a9      	cmp	r1, r5
 8016bae:	d905      	bls.n	8016bbc <_malloc_r+0x28>
 8016bb0:	230c      	movs	r3, #12
 8016bb2:	603b      	str	r3, [r7, #0]
 8016bb4:	2600      	movs	r6, #0
 8016bb6:	4630      	mov	r0, r6
 8016bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bbc:	4e2e      	ldr	r6, [pc, #184]	; (8016c78 <_malloc_r+0xe4>)
 8016bbe:	f000 fbc3 	bl	8017348 <__malloc_lock>
 8016bc2:	6833      	ldr	r3, [r6, #0]
 8016bc4:	461c      	mov	r4, r3
 8016bc6:	bb34      	cbnz	r4, 8016c16 <_malloc_r+0x82>
 8016bc8:	4629      	mov	r1, r5
 8016bca:	4638      	mov	r0, r7
 8016bcc:	f7ff ffc2 	bl	8016b54 <sbrk_aligned>
 8016bd0:	1c43      	adds	r3, r0, #1
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	d14d      	bne.n	8016c72 <_malloc_r+0xde>
 8016bd6:	6834      	ldr	r4, [r6, #0]
 8016bd8:	4626      	mov	r6, r4
 8016bda:	2e00      	cmp	r6, #0
 8016bdc:	d140      	bne.n	8016c60 <_malloc_r+0xcc>
 8016bde:	6823      	ldr	r3, [r4, #0]
 8016be0:	4631      	mov	r1, r6
 8016be2:	4638      	mov	r0, r7
 8016be4:	eb04 0803 	add.w	r8, r4, r3
 8016be8:	f000 f8be 	bl	8016d68 <_sbrk_r>
 8016bec:	4580      	cmp	r8, r0
 8016bee:	d13a      	bne.n	8016c66 <_malloc_r+0xd2>
 8016bf0:	6821      	ldr	r1, [r4, #0]
 8016bf2:	3503      	adds	r5, #3
 8016bf4:	1a6d      	subs	r5, r5, r1
 8016bf6:	f025 0503 	bic.w	r5, r5, #3
 8016bfa:	3508      	adds	r5, #8
 8016bfc:	2d0c      	cmp	r5, #12
 8016bfe:	bf38      	it	cc
 8016c00:	250c      	movcc	r5, #12
 8016c02:	4629      	mov	r1, r5
 8016c04:	4638      	mov	r0, r7
 8016c06:	f7ff ffa5 	bl	8016b54 <sbrk_aligned>
 8016c0a:	3001      	adds	r0, #1
 8016c0c:	d02b      	beq.n	8016c66 <_malloc_r+0xd2>
 8016c0e:	6823      	ldr	r3, [r4, #0]
 8016c10:	442b      	add	r3, r5
 8016c12:	6023      	str	r3, [r4, #0]
 8016c14:	e00e      	b.n	8016c34 <_malloc_r+0xa0>
 8016c16:	6822      	ldr	r2, [r4, #0]
 8016c18:	1b52      	subs	r2, r2, r5
 8016c1a:	d41e      	bmi.n	8016c5a <_malloc_r+0xc6>
 8016c1c:	2a0b      	cmp	r2, #11
 8016c1e:	d916      	bls.n	8016c4e <_malloc_r+0xba>
 8016c20:	1961      	adds	r1, r4, r5
 8016c22:	42a3      	cmp	r3, r4
 8016c24:	6025      	str	r5, [r4, #0]
 8016c26:	bf18      	it	ne
 8016c28:	6059      	strne	r1, [r3, #4]
 8016c2a:	6863      	ldr	r3, [r4, #4]
 8016c2c:	bf08      	it	eq
 8016c2e:	6031      	streq	r1, [r6, #0]
 8016c30:	5162      	str	r2, [r4, r5]
 8016c32:	604b      	str	r3, [r1, #4]
 8016c34:	4638      	mov	r0, r7
 8016c36:	f104 060b 	add.w	r6, r4, #11
 8016c3a:	f000 fb8b 	bl	8017354 <__malloc_unlock>
 8016c3e:	f026 0607 	bic.w	r6, r6, #7
 8016c42:	1d23      	adds	r3, r4, #4
 8016c44:	1af2      	subs	r2, r6, r3
 8016c46:	d0b6      	beq.n	8016bb6 <_malloc_r+0x22>
 8016c48:	1b9b      	subs	r3, r3, r6
 8016c4a:	50a3      	str	r3, [r4, r2]
 8016c4c:	e7b3      	b.n	8016bb6 <_malloc_r+0x22>
 8016c4e:	6862      	ldr	r2, [r4, #4]
 8016c50:	42a3      	cmp	r3, r4
 8016c52:	bf0c      	ite	eq
 8016c54:	6032      	streq	r2, [r6, #0]
 8016c56:	605a      	strne	r2, [r3, #4]
 8016c58:	e7ec      	b.n	8016c34 <_malloc_r+0xa0>
 8016c5a:	4623      	mov	r3, r4
 8016c5c:	6864      	ldr	r4, [r4, #4]
 8016c5e:	e7b2      	b.n	8016bc6 <_malloc_r+0x32>
 8016c60:	4634      	mov	r4, r6
 8016c62:	6876      	ldr	r6, [r6, #4]
 8016c64:	e7b9      	b.n	8016bda <_malloc_r+0x46>
 8016c66:	230c      	movs	r3, #12
 8016c68:	603b      	str	r3, [r7, #0]
 8016c6a:	4638      	mov	r0, r7
 8016c6c:	f000 fb72 	bl	8017354 <__malloc_unlock>
 8016c70:	e7a1      	b.n	8016bb6 <_malloc_r+0x22>
 8016c72:	6025      	str	r5, [r4, #0]
 8016c74:	e7de      	b.n	8016c34 <_malloc_r+0xa0>
 8016c76:	bf00      	nop
 8016c78:	24005a80 	.word	0x24005a80

08016c7c <_puts_r>:
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	460e      	mov	r6, r1
 8016c80:	4605      	mov	r5, r0
 8016c82:	b118      	cbz	r0, 8016c8c <_puts_r+0x10>
 8016c84:	6983      	ldr	r3, [r0, #24]
 8016c86:	b90b      	cbnz	r3, 8016c8c <_puts_r+0x10>
 8016c88:	f000 fa58 	bl	801713c <__sinit>
 8016c8c:	69ab      	ldr	r3, [r5, #24]
 8016c8e:	68ac      	ldr	r4, [r5, #8]
 8016c90:	b913      	cbnz	r3, 8016c98 <_puts_r+0x1c>
 8016c92:	4628      	mov	r0, r5
 8016c94:	f000 fa52 	bl	801713c <__sinit>
 8016c98:	4b2c      	ldr	r3, [pc, #176]	; (8016d4c <_puts_r+0xd0>)
 8016c9a:	429c      	cmp	r4, r3
 8016c9c:	d120      	bne.n	8016ce0 <_puts_r+0x64>
 8016c9e:	686c      	ldr	r4, [r5, #4]
 8016ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ca2:	07db      	lsls	r3, r3, #31
 8016ca4:	d405      	bmi.n	8016cb2 <_puts_r+0x36>
 8016ca6:	89a3      	ldrh	r3, [r4, #12]
 8016ca8:	0598      	lsls	r0, r3, #22
 8016caa:	d402      	bmi.n	8016cb2 <_puts_r+0x36>
 8016cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cae:	f000 fae3 	bl	8017278 <__retarget_lock_acquire_recursive>
 8016cb2:	89a3      	ldrh	r3, [r4, #12]
 8016cb4:	0719      	lsls	r1, r3, #28
 8016cb6:	d51d      	bpl.n	8016cf4 <_puts_r+0x78>
 8016cb8:	6923      	ldr	r3, [r4, #16]
 8016cba:	b1db      	cbz	r3, 8016cf4 <_puts_r+0x78>
 8016cbc:	3e01      	subs	r6, #1
 8016cbe:	68a3      	ldr	r3, [r4, #8]
 8016cc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016cc4:	3b01      	subs	r3, #1
 8016cc6:	60a3      	str	r3, [r4, #8]
 8016cc8:	bb39      	cbnz	r1, 8016d1a <_puts_r+0x9e>
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	da38      	bge.n	8016d40 <_puts_r+0xc4>
 8016cce:	4622      	mov	r2, r4
 8016cd0:	210a      	movs	r1, #10
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	f000 f858 	bl	8016d88 <__swbuf_r>
 8016cd8:	3001      	adds	r0, #1
 8016cda:	d011      	beq.n	8016d00 <_puts_r+0x84>
 8016cdc:	250a      	movs	r5, #10
 8016cde:	e011      	b.n	8016d04 <_puts_r+0x88>
 8016ce0:	4b1b      	ldr	r3, [pc, #108]	; (8016d50 <_puts_r+0xd4>)
 8016ce2:	429c      	cmp	r4, r3
 8016ce4:	d101      	bne.n	8016cea <_puts_r+0x6e>
 8016ce6:	68ac      	ldr	r4, [r5, #8]
 8016ce8:	e7da      	b.n	8016ca0 <_puts_r+0x24>
 8016cea:	4b1a      	ldr	r3, [pc, #104]	; (8016d54 <_puts_r+0xd8>)
 8016cec:	429c      	cmp	r4, r3
 8016cee:	bf08      	it	eq
 8016cf0:	68ec      	ldreq	r4, [r5, #12]
 8016cf2:	e7d5      	b.n	8016ca0 <_puts_r+0x24>
 8016cf4:	4621      	mov	r1, r4
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	f000 f898 	bl	8016e2c <__swsetup_r>
 8016cfc:	2800      	cmp	r0, #0
 8016cfe:	d0dd      	beq.n	8016cbc <_puts_r+0x40>
 8016d00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d06:	07da      	lsls	r2, r3, #31
 8016d08:	d405      	bmi.n	8016d16 <_puts_r+0x9a>
 8016d0a:	89a3      	ldrh	r3, [r4, #12]
 8016d0c:	059b      	lsls	r3, r3, #22
 8016d0e:	d402      	bmi.n	8016d16 <_puts_r+0x9a>
 8016d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d12:	f000 fab2 	bl	801727a <__retarget_lock_release_recursive>
 8016d16:	4628      	mov	r0, r5
 8016d18:	bd70      	pop	{r4, r5, r6, pc}
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	da04      	bge.n	8016d28 <_puts_r+0xac>
 8016d1e:	69a2      	ldr	r2, [r4, #24]
 8016d20:	429a      	cmp	r2, r3
 8016d22:	dc06      	bgt.n	8016d32 <_puts_r+0xb6>
 8016d24:	290a      	cmp	r1, #10
 8016d26:	d004      	beq.n	8016d32 <_puts_r+0xb6>
 8016d28:	6823      	ldr	r3, [r4, #0]
 8016d2a:	1c5a      	adds	r2, r3, #1
 8016d2c:	6022      	str	r2, [r4, #0]
 8016d2e:	7019      	strb	r1, [r3, #0]
 8016d30:	e7c5      	b.n	8016cbe <_puts_r+0x42>
 8016d32:	4622      	mov	r2, r4
 8016d34:	4628      	mov	r0, r5
 8016d36:	f000 f827 	bl	8016d88 <__swbuf_r>
 8016d3a:	3001      	adds	r0, #1
 8016d3c:	d1bf      	bne.n	8016cbe <_puts_r+0x42>
 8016d3e:	e7df      	b.n	8016d00 <_puts_r+0x84>
 8016d40:	6823      	ldr	r3, [r4, #0]
 8016d42:	250a      	movs	r5, #10
 8016d44:	1c5a      	adds	r2, r3, #1
 8016d46:	6022      	str	r2, [r4, #0]
 8016d48:	701d      	strb	r5, [r3, #0]
 8016d4a:	e7db      	b.n	8016d04 <_puts_r+0x88>
 8016d4c:	080178c4 	.word	0x080178c4
 8016d50:	080178e4 	.word	0x080178e4
 8016d54:	080178a4 	.word	0x080178a4

08016d58 <puts>:
 8016d58:	4b02      	ldr	r3, [pc, #8]	; (8016d64 <puts+0xc>)
 8016d5a:	4601      	mov	r1, r0
 8016d5c:	6818      	ldr	r0, [r3, #0]
 8016d5e:	f7ff bf8d 	b.w	8016c7c <_puts_r>
 8016d62:	bf00      	nop
 8016d64:	240000a4 	.word	0x240000a4

08016d68 <_sbrk_r>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4d06      	ldr	r5, [pc, #24]	; (8016d84 <_sbrk_r+0x1c>)
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	4604      	mov	r4, r0
 8016d70:	4608      	mov	r0, r1
 8016d72:	602b      	str	r3, [r5, #0]
 8016d74:	f7ec ffcc 	bl	8003d10 <_sbrk>
 8016d78:	1c43      	adds	r3, r0, #1
 8016d7a:	d102      	bne.n	8016d82 <_sbrk_r+0x1a>
 8016d7c:	682b      	ldr	r3, [r5, #0]
 8016d7e:	b103      	cbz	r3, 8016d82 <_sbrk_r+0x1a>
 8016d80:	6023      	str	r3, [r4, #0]
 8016d82:	bd38      	pop	{r3, r4, r5, pc}
 8016d84:	24005a8c 	.word	0x24005a8c

08016d88 <__swbuf_r>:
 8016d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d8a:	460e      	mov	r6, r1
 8016d8c:	4614      	mov	r4, r2
 8016d8e:	4605      	mov	r5, r0
 8016d90:	b118      	cbz	r0, 8016d9a <__swbuf_r+0x12>
 8016d92:	6983      	ldr	r3, [r0, #24]
 8016d94:	b90b      	cbnz	r3, 8016d9a <__swbuf_r+0x12>
 8016d96:	f000 f9d1 	bl	801713c <__sinit>
 8016d9a:	4b21      	ldr	r3, [pc, #132]	; (8016e20 <__swbuf_r+0x98>)
 8016d9c:	429c      	cmp	r4, r3
 8016d9e:	d12b      	bne.n	8016df8 <__swbuf_r+0x70>
 8016da0:	686c      	ldr	r4, [r5, #4]
 8016da2:	69a3      	ldr	r3, [r4, #24]
 8016da4:	60a3      	str	r3, [r4, #8]
 8016da6:	89a3      	ldrh	r3, [r4, #12]
 8016da8:	071a      	lsls	r2, r3, #28
 8016daa:	d52f      	bpl.n	8016e0c <__swbuf_r+0x84>
 8016dac:	6923      	ldr	r3, [r4, #16]
 8016dae:	b36b      	cbz	r3, 8016e0c <__swbuf_r+0x84>
 8016db0:	6923      	ldr	r3, [r4, #16]
 8016db2:	6820      	ldr	r0, [r4, #0]
 8016db4:	1ac0      	subs	r0, r0, r3
 8016db6:	6963      	ldr	r3, [r4, #20]
 8016db8:	b2f6      	uxtb	r6, r6
 8016dba:	4283      	cmp	r3, r0
 8016dbc:	4637      	mov	r7, r6
 8016dbe:	dc04      	bgt.n	8016dca <__swbuf_r+0x42>
 8016dc0:	4621      	mov	r1, r4
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	f000 f926 	bl	8017014 <_fflush_r>
 8016dc8:	bb30      	cbnz	r0, 8016e18 <__swbuf_r+0x90>
 8016dca:	68a3      	ldr	r3, [r4, #8]
 8016dcc:	3b01      	subs	r3, #1
 8016dce:	60a3      	str	r3, [r4, #8]
 8016dd0:	6823      	ldr	r3, [r4, #0]
 8016dd2:	1c5a      	adds	r2, r3, #1
 8016dd4:	6022      	str	r2, [r4, #0]
 8016dd6:	701e      	strb	r6, [r3, #0]
 8016dd8:	6963      	ldr	r3, [r4, #20]
 8016dda:	3001      	adds	r0, #1
 8016ddc:	4283      	cmp	r3, r0
 8016dde:	d004      	beq.n	8016dea <__swbuf_r+0x62>
 8016de0:	89a3      	ldrh	r3, [r4, #12]
 8016de2:	07db      	lsls	r3, r3, #31
 8016de4:	d506      	bpl.n	8016df4 <__swbuf_r+0x6c>
 8016de6:	2e0a      	cmp	r6, #10
 8016de8:	d104      	bne.n	8016df4 <__swbuf_r+0x6c>
 8016dea:	4621      	mov	r1, r4
 8016dec:	4628      	mov	r0, r5
 8016dee:	f000 f911 	bl	8017014 <_fflush_r>
 8016df2:	b988      	cbnz	r0, 8016e18 <__swbuf_r+0x90>
 8016df4:	4638      	mov	r0, r7
 8016df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016df8:	4b0a      	ldr	r3, [pc, #40]	; (8016e24 <__swbuf_r+0x9c>)
 8016dfa:	429c      	cmp	r4, r3
 8016dfc:	d101      	bne.n	8016e02 <__swbuf_r+0x7a>
 8016dfe:	68ac      	ldr	r4, [r5, #8]
 8016e00:	e7cf      	b.n	8016da2 <__swbuf_r+0x1a>
 8016e02:	4b09      	ldr	r3, [pc, #36]	; (8016e28 <__swbuf_r+0xa0>)
 8016e04:	429c      	cmp	r4, r3
 8016e06:	bf08      	it	eq
 8016e08:	68ec      	ldreq	r4, [r5, #12]
 8016e0a:	e7ca      	b.n	8016da2 <__swbuf_r+0x1a>
 8016e0c:	4621      	mov	r1, r4
 8016e0e:	4628      	mov	r0, r5
 8016e10:	f000 f80c 	bl	8016e2c <__swsetup_r>
 8016e14:	2800      	cmp	r0, #0
 8016e16:	d0cb      	beq.n	8016db0 <__swbuf_r+0x28>
 8016e18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016e1c:	e7ea      	b.n	8016df4 <__swbuf_r+0x6c>
 8016e1e:	bf00      	nop
 8016e20:	080178c4 	.word	0x080178c4
 8016e24:	080178e4 	.word	0x080178e4
 8016e28:	080178a4 	.word	0x080178a4

08016e2c <__swsetup_r>:
 8016e2c:	4b32      	ldr	r3, [pc, #200]	; (8016ef8 <__swsetup_r+0xcc>)
 8016e2e:	b570      	push	{r4, r5, r6, lr}
 8016e30:	681d      	ldr	r5, [r3, #0]
 8016e32:	4606      	mov	r6, r0
 8016e34:	460c      	mov	r4, r1
 8016e36:	b125      	cbz	r5, 8016e42 <__swsetup_r+0x16>
 8016e38:	69ab      	ldr	r3, [r5, #24]
 8016e3a:	b913      	cbnz	r3, 8016e42 <__swsetup_r+0x16>
 8016e3c:	4628      	mov	r0, r5
 8016e3e:	f000 f97d 	bl	801713c <__sinit>
 8016e42:	4b2e      	ldr	r3, [pc, #184]	; (8016efc <__swsetup_r+0xd0>)
 8016e44:	429c      	cmp	r4, r3
 8016e46:	d10f      	bne.n	8016e68 <__swsetup_r+0x3c>
 8016e48:	686c      	ldr	r4, [r5, #4]
 8016e4a:	89a3      	ldrh	r3, [r4, #12]
 8016e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e50:	0719      	lsls	r1, r3, #28
 8016e52:	d42c      	bmi.n	8016eae <__swsetup_r+0x82>
 8016e54:	06dd      	lsls	r5, r3, #27
 8016e56:	d411      	bmi.n	8016e7c <__swsetup_r+0x50>
 8016e58:	2309      	movs	r3, #9
 8016e5a:	6033      	str	r3, [r6, #0]
 8016e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e60:	81a3      	strh	r3, [r4, #12]
 8016e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e66:	e03e      	b.n	8016ee6 <__swsetup_r+0xba>
 8016e68:	4b25      	ldr	r3, [pc, #148]	; (8016f00 <__swsetup_r+0xd4>)
 8016e6a:	429c      	cmp	r4, r3
 8016e6c:	d101      	bne.n	8016e72 <__swsetup_r+0x46>
 8016e6e:	68ac      	ldr	r4, [r5, #8]
 8016e70:	e7eb      	b.n	8016e4a <__swsetup_r+0x1e>
 8016e72:	4b24      	ldr	r3, [pc, #144]	; (8016f04 <__swsetup_r+0xd8>)
 8016e74:	429c      	cmp	r4, r3
 8016e76:	bf08      	it	eq
 8016e78:	68ec      	ldreq	r4, [r5, #12]
 8016e7a:	e7e6      	b.n	8016e4a <__swsetup_r+0x1e>
 8016e7c:	0758      	lsls	r0, r3, #29
 8016e7e:	d512      	bpl.n	8016ea6 <__swsetup_r+0x7a>
 8016e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e82:	b141      	cbz	r1, 8016e96 <__swsetup_r+0x6a>
 8016e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e88:	4299      	cmp	r1, r3
 8016e8a:	d002      	beq.n	8016e92 <__swsetup_r+0x66>
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f7ff fe15 	bl	8016abc <_free_r>
 8016e92:	2300      	movs	r3, #0
 8016e94:	6363      	str	r3, [r4, #52]	; 0x34
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e9c:	81a3      	strh	r3, [r4, #12]
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	6063      	str	r3, [r4, #4]
 8016ea2:	6923      	ldr	r3, [r4, #16]
 8016ea4:	6023      	str	r3, [r4, #0]
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	f043 0308 	orr.w	r3, r3, #8
 8016eac:	81a3      	strh	r3, [r4, #12]
 8016eae:	6923      	ldr	r3, [r4, #16]
 8016eb0:	b94b      	cbnz	r3, 8016ec6 <__swsetup_r+0x9a>
 8016eb2:	89a3      	ldrh	r3, [r4, #12]
 8016eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ebc:	d003      	beq.n	8016ec6 <__swsetup_r+0x9a>
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f000 fa01 	bl	80172c8 <__smakebuf_r>
 8016ec6:	89a0      	ldrh	r0, [r4, #12]
 8016ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ecc:	f010 0301 	ands.w	r3, r0, #1
 8016ed0:	d00a      	beq.n	8016ee8 <__swsetup_r+0xbc>
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	60a3      	str	r3, [r4, #8]
 8016ed6:	6963      	ldr	r3, [r4, #20]
 8016ed8:	425b      	negs	r3, r3
 8016eda:	61a3      	str	r3, [r4, #24]
 8016edc:	6923      	ldr	r3, [r4, #16]
 8016ede:	b943      	cbnz	r3, 8016ef2 <__swsetup_r+0xc6>
 8016ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ee4:	d1ba      	bne.n	8016e5c <__swsetup_r+0x30>
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	0781      	lsls	r1, r0, #30
 8016eea:	bf58      	it	pl
 8016eec:	6963      	ldrpl	r3, [r4, #20]
 8016eee:	60a3      	str	r3, [r4, #8]
 8016ef0:	e7f4      	b.n	8016edc <__swsetup_r+0xb0>
 8016ef2:	2000      	movs	r0, #0
 8016ef4:	e7f7      	b.n	8016ee6 <__swsetup_r+0xba>
 8016ef6:	bf00      	nop
 8016ef8:	240000a4 	.word	0x240000a4
 8016efc:	080178c4 	.word	0x080178c4
 8016f00:	080178e4 	.word	0x080178e4
 8016f04:	080178a4 	.word	0x080178a4

08016f08 <__sflush_r>:
 8016f08:	898a      	ldrh	r2, [r1, #12]
 8016f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0e:	4605      	mov	r5, r0
 8016f10:	0710      	lsls	r0, r2, #28
 8016f12:	460c      	mov	r4, r1
 8016f14:	d458      	bmi.n	8016fc8 <__sflush_r+0xc0>
 8016f16:	684b      	ldr	r3, [r1, #4]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	dc05      	bgt.n	8016f28 <__sflush_r+0x20>
 8016f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	dc02      	bgt.n	8016f28 <__sflush_r+0x20>
 8016f22:	2000      	movs	r0, #0
 8016f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f2a:	2e00      	cmp	r6, #0
 8016f2c:	d0f9      	beq.n	8016f22 <__sflush_r+0x1a>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f34:	682f      	ldr	r7, [r5, #0]
 8016f36:	602b      	str	r3, [r5, #0]
 8016f38:	d032      	beq.n	8016fa0 <__sflush_r+0x98>
 8016f3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f3c:	89a3      	ldrh	r3, [r4, #12]
 8016f3e:	075a      	lsls	r2, r3, #29
 8016f40:	d505      	bpl.n	8016f4e <__sflush_r+0x46>
 8016f42:	6863      	ldr	r3, [r4, #4]
 8016f44:	1ac0      	subs	r0, r0, r3
 8016f46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f48:	b10b      	cbz	r3, 8016f4e <__sflush_r+0x46>
 8016f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f4c:	1ac0      	subs	r0, r0, r3
 8016f4e:	2300      	movs	r3, #0
 8016f50:	4602      	mov	r2, r0
 8016f52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f54:	6a21      	ldr	r1, [r4, #32]
 8016f56:	4628      	mov	r0, r5
 8016f58:	47b0      	blx	r6
 8016f5a:	1c43      	adds	r3, r0, #1
 8016f5c:	89a3      	ldrh	r3, [r4, #12]
 8016f5e:	d106      	bne.n	8016f6e <__sflush_r+0x66>
 8016f60:	6829      	ldr	r1, [r5, #0]
 8016f62:	291d      	cmp	r1, #29
 8016f64:	d82c      	bhi.n	8016fc0 <__sflush_r+0xb8>
 8016f66:	4a2a      	ldr	r2, [pc, #168]	; (8017010 <__sflush_r+0x108>)
 8016f68:	40ca      	lsrs	r2, r1
 8016f6a:	07d6      	lsls	r6, r2, #31
 8016f6c:	d528      	bpl.n	8016fc0 <__sflush_r+0xb8>
 8016f6e:	2200      	movs	r2, #0
 8016f70:	6062      	str	r2, [r4, #4]
 8016f72:	04d9      	lsls	r1, r3, #19
 8016f74:	6922      	ldr	r2, [r4, #16]
 8016f76:	6022      	str	r2, [r4, #0]
 8016f78:	d504      	bpl.n	8016f84 <__sflush_r+0x7c>
 8016f7a:	1c42      	adds	r2, r0, #1
 8016f7c:	d101      	bne.n	8016f82 <__sflush_r+0x7a>
 8016f7e:	682b      	ldr	r3, [r5, #0]
 8016f80:	b903      	cbnz	r3, 8016f84 <__sflush_r+0x7c>
 8016f82:	6560      	str	r0, [r4, #84]	; 0x54
 8016f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f86:	602f      	str	r7, [r5, #0]
 8016f88:	2900      	cmp	r1, #0
 8016f8a:	d0ca      	beq.n	8016f22 <__sflush_r+0x1a>
 8016f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f90:	4299      	cmp	r1, r3
 8016f92:	d002      	beq.n	8016f9a <__sflush_r+0x92>
 8016f94:	4628      	mov	r0, r5
 8016f96:	f7ff fd91 	bl	8016abc <_free_r>
 8016f9a:	2000      	movs	r0, #0
 8016f9c:	6360      	str	r0, [r4, #52]	; 0x34
 8016f9e:	e7c1      	b.n	8016f24 <__sflush_r+0x1c>
 8016fa0:	6a21      	ldr	r1, [r4, #32]
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	47b0      	blx	r6
 8016fa8:	1c41      	adds	r1, r0, #1
 8016faa:	d1c7      	bne.n	8016f3c <__sflush_r+0x34>
 8016fac:	682b      	ldr	r3, [r5, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d0c4      	beq.n	8016f3c <__sflush_r+0x34>
 8016fb2:	2b1d      	cmp	r3, #29
 8016fb4:	d001      	beq.n	8016fba <__sflush_r+0xb2>
 8016fb6:	2b16      	cmp	r3, #22
 8016fb8:	d101      	bne.n	8016fbe <__sflush_r+0xb6>
 8016fba:	602f      	str	r7, [r5, #0]
 8016fbc:	e7b1      	b.n	8016f22 <__sflush_r+0x1a>
 8016fbe:	89a3      	ldrh	r3, [r4, #12]
 8016fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fc4:	81a3      	strh	r3, [r4, #12]
 8016fc6:	e7ad      	b.n	8016f24 <__sflush_r+0x1c>
 8016fc8:	690f      	ldr	r7, [r1, #16]
 8016fca:	2f00      	cmp	r7, #0
 8016fcc:	d0a9      	beq.n	8016f22 <__sflush_r+0x1a>
 8016fce:	0793      	lsls	r3, r2, #30
 8016fd0:	680e      	ldr	r6, [r1, #0]
 8016fd2:	bf08      	it	eq
 8016fd4:	694b      	ldreq	r3, [r1, #20]
 8016fd6:	600f      	str	r7, [r1, #0]
 8016fd8:	bf18      	it	ne
 8016fda:	2300      	movne	r3, #0
 8016fdc:	eba6 0807 	sub.w	r8, r6, r7
 8016fe0:	608b      	str	r3, [r1, #8]
 8016fe2:	f1b8 0f00 	cmp.w	r8, #0
 8016fe6:	dd9c      	ble.n	8016f22 <__sflush_r+0x1a>
 8016fe8:	6a21      	ldr	r1, [r4, #32]
 8016fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fec:	4643      	mov	r3, r8
 8016fee:	463a      	mov	r2, r7
 8016ff0:	4628      	mov	r0, r5
 8016ff2:	47b0      	blx	r6
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	dc06      	bgt.n	8017006 <__sflush_r+0xfe>
 8016ff8:	89a3      	ldrh	r3, [r4, #12]
 8016ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ffe:	81a3      	strh	r3, [r4, #12]
 8017000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017004:	e78e      	b.n	8016f24 <__sflush_r+0x1c>
 8017006:	4407      	add	r7, r0
 8017008:	eba8 0800 	sub.w	r8, r8, r0
 801700c:	e7e9      	b.n	8016fe2 <__sflush_r+0xda>
 801700e:	bf00      	nop
 8017010:	20400001 	.word	0x20400001

08017014 <_fflush_r>:
 8017014:	b538      	push	{r3, r4, r5, lr}
 8017016:	690b      	ldr	r3, [r1, #16]
 8017018:	4605      	mov	r5, r0
 801701a:	460c      	mov	r4, r1
 801701c:	b913      	cbnz	r3, 8017024 <_fflush_r+0x10>
 801701e:	2500      	movs	r5, #0
 8017020:	4628      	mov	r0, r5
 8017022:	bd38      	pop	{r3, r4, r5, pc}
 8017024:	b118      	cbz	r0, 801702e <_fflush_r+0x1a>
 8017026:	6983      	ldr	r3, [r0, #24]
 8017028:	b90b      	cbnz	r3, 801702e <_fflush_r+0x1a>
 801702a:	f000 f887 	bl	801713c <__sinit>
 801702e:	4b14      	ldr	r3, [pc, #80]	; (8017080 <_fflush_r+0x6c>)
 8017030:	429c      	cmp	r4, r3
 8017032:	d11b      	bne.n	801706c <_fflush_r+0x58>
 8017034:	686c      	ldr	r4, [r5, #4]
 8017036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d0ef      	beq.n	801701e <_fflush_r+0xa>
 801703e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017040:	07d0      	lsls	r0, r2, #31
 8017042:	d404      	bmi.n	801704e <_fflush_r+0x3a>
 8017044:	0599      	lsls	r1, r3, #22
 8017046:	d402      	bmi.n	801704e <_fflush_r+0x3a>
 8017048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801704a:	f000 f915 	bl	8017278 <__retarget_lock_acquire_recursive>
 801704e:	4628      	mov	r0, r5
 8017050:	4621      	mov	r1, r4
 8017052:	f7ff ff59 	bl	8016f08 <__sflush_r>
 8017056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017058:	07da      	lsls	r2, r3, #31
 801705a:	4605      	mov	r5, r0
 801705c:	d4e0      	bmi.n	8017020 <_fflush_r+0xc>
 801705e:	89a3      	ldrh	r3, [r4, #12]
 8017060:	059b      	lsls	r3, r3, #22
 8017062:	d4dd      	bmi.n	8017020 <_fflush_r+0xc>
 8017064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017066:	f000 f908 	bl	801727a <__retarget_lock_release_recursive>
 801706a:	e7d9      	b.n	8017020 <_fflush_r+0xc>
 801706c:	4b05      	ldr	r3, [pc, #20]	; (8017084 <_fflush_r+0x70>)
 801706e:	429c      	cmp	r4, r3
 8017070:	d101      	bne.n	8017076 <_fflush_r+0x62>
 8017072:	68ac      	ldr	r4, [r5, #8]
 8017074:	e7df      	b.n	8017036 <_fflush_r+0x22>
 8017076:	4b04      	ldr	r3, [pc, #16]	; (8017088 <_fflush_r+0x74>)
 8017078:	429c      	cmp	r4, r3
 801707a:	bf08      	it	eq
 801707c:	68ec      	ldreq	r4, [r5, #12]
 801707e:	e7da      	b.n	8017036 <_fflush_r+0x22>
 8017080:	080178c4 	.word	0x080178c4
 8017084:	080178e4 	.word	0x080178e4
 8017088:	080178a4 	.word	0x080178a4

0801708c <std>:
 801708c:	2300      	movs	r3, #0
 801708e:	b510      	push	{r4, lr}
 8017090:	4604      	mov	r4, r0
 8017092:	e9c0 3300 	strd	r3, r3, [r0]
 8017096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801709a:	6083      	str	r3, [r0, #8]
 801709c:	8181      	strh	r1, [r0, #12]
 801709e:	6643      	str	r3, [r0, #100]	; 0x64
 80170a0:	81c2      	strh	r2, [r0, #14]
 80170a2:	6183      	str	r3, [r0, #24]
 80170a4:	4619      	mov	r1, r3
 80170a6:	2208      	movs	r2, #8
 80170a8:	305c      	adds	r0, #92	; 0x5c
 80170aa:	f7ff fcff 	bl	8016aac <memset>
 80170ae:	4b05      	ldr	r3, [pc, #20]	; (80170c4 <std+0x38>)
 80170b0:	6263      	str	r3, [r4, #36]	; 0x24
 80170b2:	4b05      	ldr	r3, [pc, #20]	; (80170c8 <std+0x3c>)
 80170b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80170b6:	4b05      	ldr	r3, [pc, #20]	; (80170cc <std+0x40>)
 80170b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80170ba:	4b05      	ldr	r3, [pc, #20]	; (80170d0 <std+0x44>)
 80170bc:	6224      	str	r4, [r4, #32]
 80170be:	6323      	str	r3, [r4, #48]	; 0x30
 80170c0:	bd10      	pop	{r4, pc}
 80170c2:	bf00      	nop
 80170c4:	08017361 	.word	0x08017361
 80170c8:	08017383 	.word	0x08017383
 80170cc:	080173bb 	.word	0x080173bb
 80170d0:	080173df 	.word	0x080173df

080170d4 <_cleanup_r>:
 80170d4:	4901      	ldr	r1, [pc, #4]	; (80170dc <_cleanup_r+0x8>)
 80170d6:	f000 b8af 	b.w	8017238 <_fwalk_reent>
 80170da:	bf00      	nop
 80170dc:	08017015 	.word	0x08017015

080170e0 <__sfmoreglue>:
 80170e0:	b570      	push	{r4, r5, r6, lr}
 80170e2:	2268      	movs	r2, #104	; 0x68
 80170e4:	1e4d      	subs	r5, r1, #1
 80170e6:	4355      	muls	r5, r2
 80170e8:	460e      	mov	r6, r1
 80170ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80170ee:	f7ff fd51 	bl	8016b94 <_malloc_r>
 80170f2:	4604      	mov	r4, r0
 80170f4:	b140      	cbz	r0, 8017108 <__sfmoreglue+0x28>
 80170f6:	2100      	movs	r1, #0
 80170f8:	e9c0 1600 	strd	r1, r6, [r0]
 80170fc:	300c      	adds	r0, #12
 80170fe:	60a0      	str	r0, [r4, #8]
 8017100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017104:	f7ff fcd2 	bl	8016aac <memset>
 8017108:	4620      	mov	r0, r4
 801710a:	bd70      	pop	{r4, r5, r6, pc}

0801710c <__sfp_lock_acquire>:
 801710c:	4801      	ldr	r0, [pc, #4]	; (8017114 <__sfp_lock_acquire+0x8>)
 801710e:	f000 b8b3 	b.w	8017278 <__retarget_lock_acquire_recursive>
 8017112:	bf00      	nop
 8017114:	24005a89 	.word	0x24005a89

08017118 <__sfp_lock_release>:
 8017118:	4801      	ldr	r0, [pc, #4]	; (8017120 <__sfp_lock_release+0x8>)
 801711a:	f000 b8ae 	b.w	801727a <__retarget_lock_release_recursive>
 801711e:	bf00      	nop
 8017120:	24005a89 	.word	0x24005a89

08017124 <__sinit_lock_acquire>:
 8017124:	4801      	ldr	r0, [pc, #4]	; (801712c <__sinit_lock_acquire+0x8>)
 8017126:	f000 b8a7 	b.w	8017278 <__retarget_lock_acquire_recursive>
 801712a:	bf00      	nop
 801712c:	24005a8a 	.word	0x24005a8a

08017130 <__sinit_lock_release>:
 8017130:	4801      	ldr	r0, [pc, #4]	; (8017138 <__sinit_lock_release+0x8>)
 8017132:	f000 b8a2 	b.w	801727a <__retarget_lock_release_recursive>
 8017136:	bf00      	nop
 8017138:	24005a8a 	.word	0x24005a8a

0801713c <__sinit>:
 801713c:	b510      	push	{r4, lr}
 801713e:	4604      	mov	r4, r0
 8017140:	f7ff fff0 	bl	8017124 <__sinit_lock_acquire>
 8017144:	69a3      	ldr	r3, [r4, #24]
 8017146:	b11b      	cbz	r3, 8017150 <__sinit+0x14>
 8017148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801714c:	f7ff bff0 	b.w	8017130 <__sinit_lock_release>
 8017150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017154:	6523      	str	r3, [r4, #80]	; 0x50
 8017156:	4b13      	ldr	r3, [pc, #76]	; (80171a4 <__sinit+0x68>)
 8017158:	4a13      	ldr	r2, [pc, #76]	; (80171a8 <__sinit+0x6c>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	62a2      	str	r2, [r4, #40]	; 0x28
 801715e:	42a3      	cmp	r3, r4
 8017160:	bf04      	itt	eq
 8017162:	2301      	moveq	r3, #1
 8017164:	61a3      	streq	r3, [r4, #24]
 8017166:	4620      	mov	r0, r4
 8017168:	f000 f820 	bl	80171ac <__sfp>
 801716c:	6060      	str	r0, [r4, #4]
 801716e:	4620      	mov	r0, r4
 8017170:	f000 f81c 	bl	80171ac <__sfp>
 8017174:	60a0      	str	r0, [r4, #8]
 8017176:	4620      	mov	r0, r4
 8017178:	f000 f818 	bl	80171ac <__sfp>
 801717c:	2200      	movs	r2, #0
 801717e:	60e0      	str	r0, [r4, #12]
 8017180:	2104      	movs	r1, #4
 8017182:	6860      	ldr	r0, [r4, #4]
 8017184:	f7ff ff82 	bl	801708c <std>
 8017188:	68a0      	ldr	r0, [r4, #8]
 801718a:	2201      	movs	r2, #1
 801718c:	2109      	movs	r1, #9
 801718e:	f7ff ff7d 	bl	801708c <std>
 8017192:	68e0      	ldr	r0, [r4, #12]
 8017194:	2202      	movs	r2, #2
 8017196:	2112      	movs	r1, #18
 8017198:	f7ff ff78 	bl	801708c <std>
 801719c:	2301      	movs	r3, #1
 801719e:	61a3      	str	r3, [r4, #24]
 80171a0:	e7d2      	b.n	8017148 <__sinit+0xc>
 80171a2:	bf00      	nop
 80171a4:	080178a0 	.word	0x080178a0
 80171a8:	080170d5 	.word	0x080170d5

080171ac <__sfp>:
 80171ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ae:	4607      	mov	r7, r0
 80171b0:	f7ff ffac 	bl	801710c <__sfp_lock_acquire>
 80171b4:	4b1e      	ldr	r3, [pc, #120]	; (8017230 <__sfp+0x84>)
 80171b6:	681e      	ldr	r6, [r3, #0]
 80171b8:	69b3      	ldr	r3, [r6, #24]
 80171ba:	b913      	cbnz	r3, 80171c2 <__sfp+0x16>
 80171bc:	4630      	mov	r0, r6
 80171be:	f7ff ffbd 	bl	801713c <__sinit>
 80171c2:	3648      	adds	r6, #72	; 0x48
 80171c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80171c8:	3b01      	subs	r3, #1
 80171ca:	d503      	bpl.n	80171d4 <__sfp+0x28>
 80171cc:	6833      	ldr	r3, [r6, #0]
 80171ce:	b30b      	cbz	r3, 8017214 <__sfp+0x68>
 80171d0:	6836      	ldr	r6, [r6, #0]
 80171d2:	e7f7      	b.n	80171c4 <__sfp+0x18>
 80171d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80171d8:	b9d5      	cbnz	r5, 8017210 <__sfp+0x64>
 80171da:	4b16      	ldr	r3, [pc, #88]	; (8017234 <__sfp+0x88>)
 80171dc:	60e3      	str	r3, [r4, #12]
 80171de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80171e2:	6665      	str	r5, [r4, #100]	; 0x64
 80171e4:	f000 f847 	bl	8017276 <__retarget_lock_init_recursive>
 80171e8:	f7ff ff96 	bl	8017118 <__sfp_lock_release>
 80171ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80171f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80171f4:	6025      	str	r5, [r4, #0]
 80171f6:	61a5      	str	r5, [r4, #24]
 80171f8:	2208      	movs	r2, #8
 80171fa:	4629      	mov	r1, r5
 80171fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017200:	f7ff fc54 	bl	8016aac <memset>
 8017204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801720c:	4620      	mov	r0, r4
 801720e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017210:	3468      	adds	r4, #104	; 0x68
 8017212:	e7d9      	b.n	80171c8 <__sfp+0x1c>
 8017214:	2104      	movs	r1, #4
 8017216:	4638      	mov	r0, r7
 8017218:	f7ff ff62 	bl	80170e0 <__sfmoreglue>
 801721c:	4604      	mov	r4, r0
 801721e:	6030      	str	r0, [r6, #0]
 8017220:	2800      	cmp	r0, #0
 8017222:	d1d5      	bne.n	80171d0 <__sfp+0x24>
 8017224:	f7ff ff78 	bl	8017118 <__sfp_lock_release>
 8017228:	230c      	movs	r3, #12
 801722a:	603b      	str	r3, [r7, #0]
 801722c:	e7ee      	b.n	801720c <__sfp+0x60>
 801722e:	bf00      	nop
 8017230:	080178a0 	.word	0x080178a0
 8017234:	ffff0001 	.word	0xffff0001

08017238 <_fwalk_reent>:
 8017238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801723c:	4606      	mov	r6, r0
 801723e:	4688      	mov	r8, r1
 8017240:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017244:	2700      	movs	r7, #0
 8017246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801724a:	f1b9 0901 	subs.w	r9, r9, #1
 801724e:	d505      	bpl.n	801725c <_fwalk_reent+0x24>
 8017250:	6824      	ldr	r4, [r4, #0]
 8017252:	2c00      	cmp	r4, #0
 8017254:	d1f7      	bne.n	8017246 <_fwalk_reent+0xe>
 8017256:	4638      	mov	r0, r7
 8017258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801725c:	89ab      	ldrh	r3, [r5, #12]
 801725e:	2b01      	cmp	r3, #1
 8017260:	d907      	bls.n	8017272 <_fwalk_reent+0x3a>
 8017262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017266:	3301      	adds	r3, #1
 8017268:	d003      	beq.n	8017272 <_fwalk_reent+0x3a>
 801726a:	4629      	mov	r1, r5
 801726c:	4630      	mov	r0, r6
 801726e:	47c0      	blx	r8
 8017270:	4307      	orrs	r7, r0
 8017272:	3568      	adds	r5, #104	; 0x68
 8017274:	e7e9      	b.n	801724a <_fwalk_reent+0x12>

08017276 <__retarget_lock_init_recursive>:
 8017276:	4770      	bx	lr

08017278 <__retarget_lock_acquire_recursive>:
 8017278:	4770      	bx	lr

0801727a <__retarget_lock_release_recursive>:
 801727a:	4770      	bx	lr

0801727c <__swhatbuf_r>:
 801727c:	b570      	push	{r4, r5, r6, lr}
 801727e:	460e      	mov	r6, r1
 8017280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017284:	2900      	cmp	r1, #0
 8017286:	b096      	sub	sp, #88	; 0x58
 8017288:	4614      	mov	r4, r2
 801728a:	461d      	mov	r5, r3
 801728c:	da08      	bge.n	80172a0 <__swhatbuf_r+0x24>
 801728e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017292:	2200      	movs	r2, #0
 8017294:	602a      	str	r2, [r5, #0]
 8017296:	061a      	lsls	r2, r3, #24
 8017298:	d410      	bmi.n	80172bc <__swhatbuf_r+0x40>
 801729a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801729e:	e00e      	b.n	80172be <__swhatbuf_r+0x42>
 80172a0:	466a      	mov	r2, sp
 80172a2:	f000 f8c3 	bl	801742c <_fstat_r>
 80172a6:	2800      	cmp	r0, #0
 80172a8:	dbf1      	blt.n	801728e <__swhatbuf_r+0x12>
 80172aa:	9a01      	ldr	r2, [sp, #4]
 80172ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80172b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80172b4:	425a      	negs	r2, r3
 80172b6:	415a      	adcs	r2, r3
 80172b8:	602a      	str	r2, [r5, #0]
 80172ba:	e7ee      	b.n	801729a <__swhatbuf_r+0x1e>
 80172bc:	2340      	movs	r3, #64	; 0x40
 80172be:	2000      	movs	r0, #0
 80172c0:	6023      	str	r3, [r4, #0]
 80172c2:	b016      	add	sp, #88	; 0x58
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080172c8 <__smakebuf_r>:
 80172c8:	898b      	ldrh	r3, [r1, #12]
 80172ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80172cc:	079d      	lsls	r5, r3, #30
 80172ce:	4606      	mov	r6, r0
 80172d0:	460c      	mov	r4, r1
 80172d2:	d507      	bpl.n	80172e4 <__smakebuf_r+0x1c>
 80172d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80172d8:	6023      	str	r3, [r4, #0]
 80172da:	6123      	str	r3, [r4, #16]
 80172dc:	2301      	movs	r3, #1
 80172de:	6163      	str	r3, [r4, #20]
 80172e0:	b002      	add	sp, #8
 80172e2:	bd70      	pop	{r4, r5, r6, pc}
 80172e4:	ab01      	add	r3, sp, #4
 80172e6:	466a      	mov	r2, sp
 80172e8:	f7ff ffc8 	bl	801727c <__swhatbuf_r>
 80172ec:	9900      	ldr	r1, [sp, #0]
 80172ee:	4605      	mov	r5, r0
 80172f0:	4630      	mov	r0, r6
 80172f2:	f7ff fc4f 	bl	8016b94 <_malloc_r>
 80172f6:	b948      	cbnz	r0, 801730c <__smakebuf_r+0x44>
 80172f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172fc:	059a      	lsls	r2, r3, #22
 80172fe:	d4ef      	bmi.n	80172e0 <__smakebuf_r+0x18>
 8017300:	f023 0303 	bic.w	r3, r3, #3
 8017304:	f043 0302 	orr.w	r3, r3, #2
 8017308:	81a3      	strh	r3, [r4, #12]
 801730a:	e7e3      	b.n	80172d4 <__smakebuf_r+0xc>
 801730c:	4b0d      	ldr	r3, [pc, #52]	; (8017344 <__smakebuf_r+0x7c>)
 801730e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017310:	89a3      	ldrh	r3, [r4, #12]
 8017312:	6020      	str	r0, [r4, #0]
 8017314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017318:	81a3      	strh	r3, [r4, #12]
 801731a:	9b00      	ldr	r3, [sp, #0]
 801731c:	6163      	str	r3, [r4, #20]
 801731e:	9b01      	ldr	r3, [sp, #4]
 8017320:	6120      	str	r0, [r4, #16]
 8017322:	b15b      	cbz	r3, 801733c <__smakebuf_r+0x74>
 8017324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017328:	4630      	mov	r0, r6
 801732a:	f000 f891 	bl	8017450 <_isatty_r>
 801732e:	b128      	cbz	r0, 801733c <__smakebuf_r+0x74>
 8017330:	89a3      	ldrh	r3, [r4, #12]
 8017332:	f023 0303 	bic.w	r3, r3, #3
 8017336:	f043 0301 	orr.w	r3, r3, #1
 801733a:	81a3      	strh	r3, [r4, #12]
 801733c:	89a0      	ldrh	r0, [r4, #12]
 801733e:	4305      	orrs	r5, r0
 8017340:	81a5      	strh	r5, [r4, #12]
 8017342:	e7cd      	b.n	80172e0 <__smakebuf_r+0x18>
 8017344:	080170d5 	.word	0x080170d5

08017348 <__malloc_lock>:
 8017348:	4801      	ldr	r0, [pc, #4]	; (8017350 <__malloc_lock+0x8>)
 801734a:	f7ff bf95 	b.w	8017278 <__retarget_lock_acquire_recursive>
 801734e:	bf00      	nop
 8017350:	24005a88 	.word	0x24005a88

08017354 <__malloc_unlock>:
 8017354:	4801      	ldr	r0, [pc, #4]	; (801735c <__malloc_unlock+0x8>)
 8017356:	f7ff bf90 	b.w	801727a <__retarget_lock_release_recursive>
 801735a:	bf00      	nop
 801735c:	24005a88 	.word	0x24005a88

08017360 <__sread>:
 8017360:	b510      	push	{r4, lr}
 8017362:	460c      	mov	r4, r1
 8017364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017368:	f000 f894 	bl	8017494 <_read_r>
 801736c:	2800      	cmp	r0, #0
 801736e:	bfab      	itete	ge
 8017370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017372:	89a3      	ldrhlt	r3, [r4, #12]
 8017374:	181b      	addge	r3, r3, r0
 8017376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801737a:	bfac      	ite	ge
 801737c:	6563      	strge	r3, [r4, #84]	; 0x54
 801737e:	81a3      	strhlt	r3, [r4, #12]
 8017380:	bd10      	pop	{r4, pc}

08017382 <__swrite>:
 8017382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017386:	461f      	mov	r7, r3
 8017388:	898b      	ldrh	r3, [r1, #12]
 801738a:	05db      	lsls	r3, r3, #23
 801738c:	4605      	mov	r5, r0
 801738e:	460c      	mov	r4, r1
 8017390:	4616      	mov	r6, r2
 8017392:	d505      	bpl.n	80173a0 <__swrite+0x1e>
 8017394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017398:	2302      	movs	r3, #2
 801739a:	2200      	movs	r2, #0
 801739c:	f000 f868 	bl	8017470 <_lseek_r>
 80173a0:	89a3      	ldrh	r3, [r4, #12]
 80173a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80173aa:	81a3      	strh	r3, [r4, #12]
 80173ac:	4632      	mov	r2, r6
 80173ae:	463b      	mov	r3, r7
 80173b0:	4628      	mov	r0, r5
 80173b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173b6:	f000 b817 	b.w	80173e8 <_write_r>

080173ba <__sseek>:
 80173ba:	b510      	push	{r4, lr}
 80173bc:	460c      	mov	r4, r1
 80173be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c2:	f000 f855 	bl	8017470 <_lseek_r>
 80173c6:	1c43      	adds	r3, r0, #1
 80173c8:	89a3      	ldrh	r3, [r4, #12]
 80173ca:	bf15      	itete	ne
 80173cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80173ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80173d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80173d6:	81a3      	strheq	r3, [r4, #12]
 80173d8:	bf18      	it	ne
 80173da:	81a3      	strhne	r3, [r4, #12]
 80173dc:	bd10      	pop	{r4, pc}

080173de <__sclose>:
 80173de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173e2:	f000 b813 	b.w	801740c <_close_r>
	...

080173e8 <_write_r>:
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	4d07      	ldr	r5, [pc, #28]	; (8017408 <_write_r+0x20>)
 80173ec:	4604      	mov	r4, r0
 80173ee:	4608      	mov	r0, r1
 80173f0:	4611      	mov	r1, r2
 80173f2:	2200      	movs	r2, #0
 80173f4:	602a      	str	r2, [r5, #0]
 80173f6:	461a      	mov	r2, r3
 80173f8:	f7ec fc39 	bl	8003c6e <_write>
 80173fc:	1c43      	adds	r3, r0, #1
 80173fe:	d102      	bne.n	8017406 <_write_r+0x1e>
 8017400:	682b      	ldr	r3, [r5, #0]
 8017402:	b103      	cbz	r3, 8017406 <_write_r+0x1e>
 8017404:	6023      	str	r3, [r4, #0]
 8017406:	bd38      	pop	{r3, r4, r5, pc}
 8017408:	24005a8c 	.word	0x24005a8c

0801740c <_close_r>:
 801740c:	b538      	push	{r3, r4, r5, lr}
 801740e:	4d06      	ldr	r5, [pc, #24]	; (8017428 <_close_r+0x1c>)
 8017410:	2300      	movs	r3, #0
 8017412:	4604      	mov	r4, r0
 8017414:	4608      	mov	r0, r1
 8017416:	602b      	str	r3, [r5, #0]
 8017418:	f7ec fc45 	bl	8003ca6 <_close>
 801741c:	1c43      	adds	r3, r0, #1
 801741e:	d102      	bne.n	8017426 <_close_r+0x1a>
 8017420:	682b      	ldr	r3, [r5, #0]
 8017422:	b103      	cbz	r3, 8017426 <_close_r+0x1a>
 8017424:	6023      	str	r3, [r4, #0]
 8017426:	bd38      	pop	{r3, r4, r5, pc}
 8017428:	24005a8c 	.word	0x24005a8c

0801742c <_fstat_r>:
 801742c:	b538      	push	{r3, r4, r5, lr}
 801742e:	4d07      	ldr	r5, [pc, #28]	; (801744c <_fstat_r+0x20>)
 8017430:	2300      	movs	r3, #0
 8017432:	4604      	mov	r4, r0
 8017434:	4608      	mov	r0, r1
 8017436:	4611      	mov	r1, r2
 8017438:	602b      	str	r3, [r5, #0]
 801743a:	f7ec fc40 	bl	8003cbe <_fstat>
 801743e:	1c43      	adds	r3, r0, #1
 8017440:	d102      	bne.n	8017448 <_fstat_r+0x1c>
 8017442:	682b      	ldr	r3, [r5, #0]
 8017444:	b103      	cbz	r3, 8017448 <_fstat_r+0x1c>
 8017446:	6023      	str	r3, [r4, #0]
 8017448:	bd38      	pop	{r3, r4, r5, pc}
 801744a:	bf00      	nop
 801744c:	24005a8c 	.word	0x24005a8c

08017450 <_isatty_r>:
 8017450:	b538      	push	{r3, r4, r5, lr}
 8017452:	4d06      	ldr	r5, [pc, #24]	; (801746c <_isatty_r+0x1c>)
 8017454:	2300      	movs	r3, #0
 8017456:	4604      	mov	r4, r0
 8017458:	4608      	mov	r0, r1
 801745a:	602b      	str	r3, [r5, #0]
 801745c:	f7ec fc3f 	bl	8003cde <_isatty>
 8017460:	1c43      	adds	r3, r0, #1
 8017462:	d102      	bne.n	801746a <_isatty_r+0x1a>
 8017464:	682b      	ldr	r3, [r5, #0]
 8017466:	b103      	cbz	r3, 801746a <_isatty_r+0x1a>
 8017468:	6023      	str	r3, [r4, #0]
 801746a:	bd38      	pop	{r3, r4, r5, pc}
 801746c:	24005a8c 	.word	0x24005a8c

08017470 <_lseek_r>:
 8017470:	b538      	push	{r3, r4, r5, lr}
 8017472:	4d07      	ldr	r5, [pc, #28]	; (8017490 <_lseek_r+0x20>)
 8017474:	4604      	mov	r4, r0
 8017476:	4608      	mov	r0, r1
 8017478:	4611      	mov	r1, r2
 801747a:	2200      	movs	r2, #0
 801747c:	602a      	str	r2, [r5, #0]
 801747e:	461a      	mov	r2, r3
 8017480:	f7ec fc38 	bl	8003cf4 <_lseek>
 8017484:	1c43      	adds	r3, r0, #1
 8017486:	d102      	bne.n	801748e <_lseek_r+0x1e>
 8017488:	682b      	ldr	r3, [r5, #0]
 801748a:	b103      	cbz	r3, 801748e <_lseek_r+0x1e>
 801748c:	6023      	str	r3, [r4, #0]
 801748e:	bd38      	pop	{r3, r4, r5, pc}
 8017490:	24005a8c 	.word	0x24005a8c

08017494 <_read_r>:
 8017494:	b538      	push	{r3, r4, r5, lr}
 8017496:	4d07      	ldr	r5, [pc, #28]	; (80174b4 <_read_r+0x20>)
 8017498:	4604      	mov	r4, r0
 801749a:	4608      	mov	r0, r1
 801749c:	4611      	mov	r1, r2
 801749e:	2200      	movs	r2, #0
 80174a0:	602a      	str	r2, [r5, #0]
 80174a2:	461a      	mov	r2, r3
 80174a4:	f7ec fbc6 	bl	8003c34 <_read>
 80174a8:	1c43      	adds	r3, r0, #1
 80174aa:	d102      	bne.n	80174b2 <_read_r+0x1e>
 80174ac:	682b      	ldr	r3, [r5, #0]
 80174ae:	b103      	cbz	r3, 80174b2 <_read_r+0x1e>
 80174b0:	6023      	str	r3, [r4, #0]
 80174b2:	bd38      	pop	{r3, r4, r5, pc}
 80174b4:	24005a8c 	.word	0x24005a8c

080174b8 <_init>:
 80174b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ba:	bf00      	nop
 80174bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174be:	bc08      	pop	{r3}
 80174c0:	469e      	mov	lr, r3
 80174c2:	4770      	bx	lr

080174c4 <_fini>:
 80174c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174c6:	bf00      	nop
 80174c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174ca:	bc08      	pop	{r3}
 80174cc:	469e      	mov	lr, r3
 80174ce:	4770      	bx	lr
