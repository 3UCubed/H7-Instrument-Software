
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001572c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080159cc  080159cc  000259cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015dc4  08015dc4  00025dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015dcc  08015dcc  00025dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015dd0  08015dd0  00025dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08015dd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fdc  24000100  08015ed4  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050dc  08015ed4  000350dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032788  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548f  00000000  00000000  000628b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003094b  00000000  00000000  0007423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001944f6  00000000  00000000  000a4b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023907d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad64  00000000  00000000  002390d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080159b4 	.word	0x080159b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080159b4 	.word	0x080159b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 ff2a 	bl	80114f4 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 ff1f 	bl	80114f4 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 ff14 	bl	80114f4 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f014 fad2 	bl	8014c78 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000684 	.word	0x24000684
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	08015a0c 	.word	0x08015a0c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49f2      	ldr	r1, [pc, #968]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 80006fc:	48f2      	ldr	r0, [pc, #968]	; (8000ac8 <HAL_UART_RxCpltCallback+0x3d8>)
 80006fe:	f00e fa0f 	bl	800eb20 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bf0      	ldr	r3, [pc, #960]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2be0      	cmp	r3, #224	; 0xe0
 800070c:	f200 8416 	bhi.w	8000f3c <HAL_UART_RxCpltCallback+0x84c>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000ab1 	.word	0x08000ab1
 800071c:	08000aed 	.word	0x08000aed
 8000720:	08000b73 	.word	0x08000b73
 8000724:	08000b9d 	.word	0x08000b9d
 8000728:	08000bc5 	.word	0x08000bc5
 800072c:	08000bef 	.word	0x08000bef
 8000730:	08000c1b 	.word	0x08000c1b
 8000734:	08000c47 	.word	0x08000c47
 8000738:	08000c71 	.word	0x08000c71
 800073c:	08000ca3 	.word	0x08000ca3
 8000740:	08000cc5 	.word	0x08000cc5
 8000744:	08000ce1 	.word	0x08000ce1
 8000748:	08000cfd 	.word	0x08000cfd
 800074c:	08000d47 	.word	0x08000d47
 8000750:	08000e41 	.word	0x08000e41
 8000754:	08000e71 	.word	0x08000e71
 8000758:	08000a9d 	.word	0x08000a9d
 800075c:	08000ad9 	.word	0x08000ad9
 8000760:	08000b5d 	.word	0x08000b5d
 8000764:	08000b89 	.word	0x08000b89
 8000768:	08000bb1 	.word	0x08000bb1
 800076c:	08000bd9 	.word	0x08000bd9
 8000770:	08000c05 	.word	0x08000c05
 8000774:	08000c31 	.word	0x08000c31
 8000778:	08000c5d 	.word	0x08000c5d
 800077c:	08000c85 	.word	0x08000c85
 8000780:	08000cb7 	.word	0x08000cb7
 8000784:	08000cd3 	.word	0x08000cd3
 8000788:	08000cef 	.word	0x08000cef
 800078c:	08000d0b 	.word	0x08000d0b
 8000790:	08000d83 	.word	0x08000d83
 8000794:	08000e69 	.word	0x08000e69
 8000798:	08000f3d 	.word	0x08000f3d
 800079c:	08000f3d 	.word	0x08000f3d
 80007a0:	08000f3d 	.word	0x08000f3d
 80007a4:	08000f3d 	.word	0x08000f3d
 80007a8:	08000f3d 	.word	0x08000f3d
 80007ac:	08000f3d 	.word	0x08000f3d
 80007b0:	08000f3d 	.word	0x08000f3d
 80007b4:	08000f3d 	.word	0x08000f3d
 80007b8:	08000f3d 	.word	0x08000f3d
 80007bc:	08000f3d 	.word	0x08000f3d
 80007c0:	08000f3d 	.word	0x08000f3d
 80007c4:	08000f3d 	.word	0x08000f3d
 80007c8:	08000f3d 	.word	0x08000f3d
 80007cc:	08000f3d 	.word	0x08000f3d
 80007d0:	08000f3d 	.word	0x08000f3d
 80007d4:	08000f3d 	.word	0x08000f3d
 80007d8:	08000f3d 	.word	0x08000f3d
 80007dc:	08000f3d 	.word	0x08000f3d
 80007e0:	08000f3d 	.word	0x08000f3d
 80007e4:	08000f3d 	.word	0x08000f3d
 80007e8:	08000f3d 	.word	0x08000f3d
 80007ec:	08000f3d 	.word	0x08000f3d
 80007f0:	08000f3d 	.word	0x08000f3d
 80007f4:	08000f3d 	.word	0x08000f3d
 80007f8:	08000f3d 	.word	0x08000f3d
 80007fc:	08000f3d 	.word	0x08000f3d
 8000800:	08000f3d 	.word	0x08000f3d
 8000804:	08000f3d 	.word	0x08000f3d
 8000808:	08000f3d 	.word	0x08000f3d
 800080c:	08000f3d 	.word	0x08000f3d
 8000810:	08000f3d 	.word	0x08000f3d
 8000814:	08000f3d 	.word	0x08000f3d
 8000818:	08000f3d 	.word	0x08000f3d
 800081c:	08000f3d 	.word	0x08000f3d
 8000820:	08000f3d 	.word	0x08000f3d
 8000824:	08000f3d 	.word	0x08000f3d
 8000828:	08000f3d 	.word	0x08000f3d
 800082c:	08000f3d 	.word	0x08000f3d
 8000830:	08000f3d 	.word	0x08000f3d
 8000834:	08000f3d 	.word	0x08000f3d
 8000838:	08000f3d 	.word	0x08000f3d
 800083c:	08000f3d 	.word	0x08000f3d
 8000840:	08000f3d 	.word	0x08000f3d
 8000844:	08000f3d 	.word	0x08000f3d
 8000848:	08000f3d 	.word	0x08000f3d
 800084c:	08000f3d 	.word	0x08000f3d
 8000850:	08000f3d 	.word	0x08000f3d
 8000854:	08000f3d 	.word	0x08000f3d
 8000858:	08000f3d 	.word	0x08000f3d
 800085c:	08000f3d 	.word	0x08000f3d
 8000860:	08000f3d 	.word	0x08000f3d
 8000864:	08000f3d 	.word	0x08000f3d
 8000868:	08000f3d 	.word	0x08000f3d
 800086c:	08000f3d 	.word	0x08000f3d
 8000870:	08000f3d 	.word	0x08000f3d
 8000874:	08000f3d 	.word	0x08000f3d
 8000878:	08000f3d 	.word	0x08000f3d
 800087c:	08000f3d 	.word	0x08000f3d
 8000880:	08000f3d 	.word	0x08000f3d
 8000884:	08000f3d 	.word	0x08000f3d
 8000888:	08000f3d 	.word	0x08000f3d
 800088c:	08000f3d 	.word	0x08000f3d
 8000890:	08000f3d 	.word	0x08000f3d
 8000894:	08000f3d 	.word	0x08000f3d
 8000898:	08000f3d 	.word	0x08000f3d
 800089c:	08000f3d 	.word	0x08000f3d
 80008a0:	08000f3d 	.word	0x08000f3d
 80008a4:	08000f3d 	.word	0x08000f3d
 80008a8:	08000f3d 	.word	0x08000f3d
 80008ac:	08000f3d 	.word	0x08000f3d
 80008b0:	08000f3d 	.word	0x08000f3d
 80008b4:	08000f3d 	.word	0x08000f3d
 80008b8:	08000f3d 	.word	0x08000f3d
 80008bc:	08000f3d 	.word	0x08000f3d
 80008c0:	08000f3d 	.word	0x08000f3d
 80008c4:	08000f3d 	.word	0x08000f3d
 80008c8:	08000f3d 	.word	0x08000f3d
 80008cc:	08000f3d 	.word	0x08000f3d
 80008d0:	08000f3d 	.word	0x08000f3d
 80008d4:	08000f3d 	.word	0x08000f3d
 80008d8:	08000f3d 	.word	0x08000f3d
 80008dc:	08000f3d 	.word	0x08000f3d
 80008e0:	08000f3d 	.word	0x08000f3d
 80008e4:	08000f3d 	.word	0x08000f3d
 80008e8:	08000f3d 	.word	0x08000f3d
 80008ec:	08000f3d 	.word	0x08000f3d
 80008f0:	08000f3d 	.word	0x08000f3d
 80008f4:	08000f3d 	.word	0x08000f3d
 80008f8:	08000f3d 	.word	0x08000f3d
 80008fc:	08000f3d 	.word	0x08000f3d
 8000900:	08000f3d 	.word	0x08000f3d
 8000904:	08000f3d 	.word	0x08000f3d
 8000908:	08000f3d 	.word	0x08000f3d
 800090c:	08000f3d 	.word	0x08000f3d
 8000910:	08000f3d 	.word	0x08000f3d
 8000914:	08000f3d 	.word	0x08000f3d
 8000918:	08000f3d 	.word	0x08000f3d
 800091c:	08000f3d 	.word	0x08000f3d
 8000920:	08000f3d 	.word	0x08000f3d
 8000924:	08000f3d 	.word	0x08000f3d
 8000928:	08000f3d 	.word	0x08000f3d
 800092c:	08000f3d 	.word	0x08000f3d
 8000930:	08000f3d 	.word	0x08000f3d
 8000934:	08000f3d 	.word	0x08000f3d
 8000938:	08000f3d 	.word	0x08000f3d
 800093c:	08000f3d 	.word	0x08000f3d
 8000940:	08000f3d 	.word	0x08000f3d
 8000944:	08000f3d 	.word	0x08000f3d
 8000948:	08000f3d 	.word	0x08000f3d
 800094c:	08000f3d 	.word	0x08000f3d
 8000950:	08000f3d 	.word	0x08000f3d
 8000954:	08000f3d 	.word	0x08000f3d
 8000958:	08000f3d 	.word	0x08000f3d
 800095c:	08000f3d 	.word	0x08000f3d
 8000960:	08000f3d 	.word	0x08000f3d
 8000964:	08000f3d 	.word	0x08000f3d
 8000968:	08000f3d 	.word	0x08000f3d
 800096c:	08000f3d 	.word	0x08000f3d
 8000970:	08000f3d 	.word	0x08000f3d
 8000974:	08000f3d 	.word	0x08000f3d
 8000978:	08000f3d 	.word	0x08000f3d
 800097c:	08000f3d 	.word	0x08000f3d
 8000980:	08000f3d 	.word	0x08000f3d
 8000984:	08000f3d 	.word	0x08000f3d
 8000988:	08000f3d 	.word	0x08000f3d
 800098c:	08000f3d 	.word	0x08000f3d
 8000990:	08000f3d 	.word	0x08000f3d
 8000994:	08000f3d 	.word	0x08000f3d
 8000998:	08000f3d 	.word	0x08000f3d
 800099c:	08000f3d 	.word	0x08000f3d
 80009a0:	08000f3d 	.word	0x08000f3d
 80009a4:	08000f3d 	.word	0x08000f3d
 80009a8:	08000f3d 	.word	0x08000f3d
 80009ac:	08000f3d 	.word	0x08000f3d
 80009b0:	08000f3d 	.word	0x08000f3d
 80009b4:	08000f3d 	.word	0x08000f3d
 80009b8:	08000f3d 	.word	0x08000f3d
 80009bc:	08000f3d 	.word	0x08000f3d
 80009c0:	08000f3d 	.word	0x08000f3d
 80009c4:	08000f3d 	.word	0x08000f3d
 80009c8:	08000f3d 	.word	0x08000f3d
 80009cc:	08000f3d 	.word	0x08000f3d
 80009d0:	08000f3d 	.word	0x08000f3d
 80009d4:	08000f3d 	.word	0x08000f3d
 80009d8:	08000f3d 	.word	0x08000f3d
 80009dc:	08000f3d 	.word	0x08000f3d
 80009e0:	08000f3d 	.word	0x08000f3d
 80009e4:	08000f3d 	.word	0x08000f3d
 80009e8:	08000f3d 	.word	0x08000f3d
 80009ec:	08000f3d 	.word	0x08000f3d
 80009f0:	08000f3d 	.word	0x08000f3d
 80009f4:	08000f3d 	.word	0x08000f3d
 80009f8:	08000f3d 	.word	0x08000f3d
 80009fc:	08000f3d 	.word	0x08000f3d
 8000a00:	08000f3d 	.word	0x08000f3d
 8000a04:	08000f3d 	.word	0x08000f3d
 8000a08:	08000f3d 	.word	0x08000f3d
 8000a0c:	08000f3d 	.word	0x08000f3d
 8000a10:	08000f3d 	.word	0x08000f3d
 8000a14:	08000f3d 	.word	0x08000f3d
 8000a18:	08000f3d 	.word	0x08000f3d
 8000a1c:	08000f3d 	.word	0x08000f3d
 8000a20:	08000f3d 	.word	0x08000f3d
 8000a24:	08000f3d 	.word	0x08000f3d
 8000a28:	08000f3d 	.word	0x08000f3d
 8000a2c:	08000f3d 	.word	0x08000f3d
 8000a30:	08000f3d 	.word	0x08000f3d
 8000a34:	08000f3d 	.word	0x08000f3d
 8000a38:	08000f3d 	.word	0x08000f3d
 8000a3c:	08000f3d 	.word	0x08000f3d
 8000a40:	08000f3d 	.word	0x08000f3d
 8000a44:	08000f3d 	.word	0x08000f3d
 8000a48:	08000f3d 	.word	0x08000f3d
 8000a4c:	08000f3d 	.word	0x08000f3d
 8000a50:	08000f3d 	.word	0x08000f3d
 8000a54:	08000f3d 	.word	0x08000f3d
 8000a58:	08000edb 	.word	0x08000edb
 8000a5c:	08000f3d 	.word	0x08000f3d
 8000a60:	08000f3d 	.word	0x08000f3d
 8000a64:	08000f3d 	.word	0x08000f3d
 8000a68:	08000f3d 	.word	0x08000f3d
 8000a6c:	08000f3d 	.word	0x08000f3d
 8000a70:	08000f3d 	.word	0x08000f3d
 8000a74:	08000f3d 	.word	0x08000f3d
 8000a78:	08000f3d 	.word	0x08000f3d
 8000a7c:	08000f3d 	.word	0x08000f3d
 8000a80:	08000f3d 	.word	0x08000f3d
 8000a84:	08000f3d 	.word	0x08000f3d
 8000a88:	08000f3d 	.word	0x08000f3d
 8000a8c:	08000f3d 	.word	0x08000f3d
 8000a90:	08000f3d 	.word	0x08000f3d
 8000a94:	08000f3d 	.word	0x08000f3d
 8000a98:	08000e79 	.word	0x08000e79
	case 0x10: {
		printf("SDN1 ON\n");
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_UART_RxCpltCallback+0x3dc>)
 8000a9e:	f014 f8eb 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 feb7 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000aae:	e250      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_UART_RxCpltCallback+0x3e4>)
 8000ab2:	f014 f8e1 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 fead 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000ac2:	e246      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
 8000ac4:	24000688 	.word	0x24000688
 8000ac8:	240005cc 	.word	0x240005cc
 8000acc:	08015a24 	.word	0x08015a24
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	08015a2c 	.word	0x08015a2c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000ad8:	48b4      	ldr	r0, [pc, #720]	; (8000dac <HAL_UART_RxCpltCallback+0x6bc>)
 8000ada:	f014 f8cd 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ade:	4bb4      	ldr	r3, [pc, #720]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 fe99 	bl	800881c <HAL_GPIO_WritePin>

		break;
 8000aea:	e232      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000aec:	48b1      	ldr	r0, [pc, #708]	; (8000db4 <HAL_UART_RxCpltCallback+0x6c4>)
 8000aee:	f014 f8c3 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000af2:	4baf      	ldr	r3, [pc, #700]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000af4:	2120      	movs	r1, #32
 8000af6:	2200      	movs	r2, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fe8f 	bl	800881c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000afe:	4bac      	ldr	r3, [pc, #688]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	2200      	movs	r2, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fe89 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b0a:	4bab      	ldr	r3, [pc, #684]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	2200      	movs	r2, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fe82 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b18:	4ba7      	ldr	r3, [pc, #668]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fe7b 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b26:	4ba4      	ldr	r3, [pc, #656]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fe74 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b34:	4ba0      	ldr	r3, [pc, #640]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fe6e 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b40:	4b9d      	ldr	r3, [pc, #628]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	2200      	movs	r2, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fe68 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	2200      	movs	r2, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fe61 	bl	800881c <HAL_GPIO_WritePin>

		break;
 8000b5a:	e1fa      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b5c:	4897      	ldr	r0, [pc, #604]	; (8000dbc <HAL_UART_RxCpltCallback+0x6cc>)
 8000b5e:	f014 f88b 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b62:	4b95      	ldr	r3, [pc, #596]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fe56 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000b70:	e1ef      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b72:	4893      	ldr	r0, [pc, #588]	; (8000dc0 <HAL_UART_RxCpltCallback+0x6d0>)
 8000b74:	f014 f880 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b78:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 fe4b 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000b86:	e1e4      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b88:	488e      	ldr	r0, [pc, #568]	; (8000dc4 <HAL_UART_RxCpltCallback+0x6d4>)
 8000b8a:	f014 f875 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b8e:	4b8a      	ldr	r3, [pc, #552]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	2201      	movs	r2, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 fe41 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000b9a:	e1da      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b9c:	488a      	ldr	r0, [pc, #552]	; (8000dc8 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f014 f86b 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ba2:	4b85      	ldr	r3, [pc, #532]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 fe37 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000bae:	e1d0      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000bb0:	4886      	ldr	r0, [pc, #536]	; (8000dcc <HAL_UART_RxCpltCallback+0x6dc>)
 8000bb2:	f014 f861 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bb6:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 fe2d 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000bc2:	e1c6      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bc4:	4882      	ldr	r0, [pc, #520]	; (8000dd0 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bc6:	f014 f857 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bca:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 fe23 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000bd6:	e1bc      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd8:	487e      	ldr	r0, [pc, #504]	; (8000dd4 <HAL_UART_RxCpltCallback+0x6e4>)
 8000bda:	f014 f84d 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bde:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fe18 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000bec:	e1b1      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bee:	487a      	ldr	r0, [pc, #488]	; (8000dd8 <HAL_UART_RxCpltCallback+0x6e8>)
 8000bf0:	f014 f842 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 fe0d 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c02:	e1a6      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c04:	4875      	ldr	r0, [pc, #468]	; (8000ddc <HAL_UART_RxCpltCallback+0x6ec>)
 8000c06:	f014 f837 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0a:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	2201      	movs	r2, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 fe02 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c18:	e19b      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c1a:	4871      	ldr	r0, [pc, #452]	; (8000de0 <HAL_UART_RxCpltCallback+0x6f0>)
 8000c1c:	f014 f82c 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c20:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c26:	2200      	movs	r2, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 fdf7 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c2e:	e190      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c30:	486c      	ldr	r0, [pc, #432]	; (8000de4 <HAL_UART_RxCpltCallback+0x6f4>)
 8000c32:	f014 f821 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 fdec 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c44:	e185      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c46:	4868      	ldr	r0, [pc, #416]	; (8000de8 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c48:	f014 f816 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	2200      	movs	r2, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 fde1 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c5a:	e17a      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c5c:	4863      	ldr	r0, [pc, #396]	; (8000dec <HAL_UART_RxCpltCallback+0x6fc>)
 8000c5e:	f014 f80b 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	2201      	movs	r2, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f007 fdd7 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c6e:	e170      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c70:	485f      	ldr	r0, [pc, #380]	; (8000df0 <HAL_UART_RxCpltCallback+0x700>)
 8000c72:	f014 f801 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c76:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fdcd 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000c82:	e166      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c84:	485b      	ldr	r0, [pc, #364]	; (8000df4 <HAL_UART_RxCpltCallback+0x704>)
 8000c86:	f013 fff7 	bl	8014c78 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000c8a:	485b      	ldr	r0, [pc, #364]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000c8c:	f00c f92c 	bl	800cee8 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c90:	2300      	movs	r3, #0
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2320      	movs	r3, #32
 8000c96:	4a59      	ldr	r2, [pc, #356]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4859      	ldr	r0, [pc, #356]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000c9c:	f004 fa2e 	bl	80050fc <HAL_DAC_Start_DMA>
		break;
 8000ca0:	e157      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000ca2:	4858      	ldr	r0, [pc, #352]	; (8000e04 <HAL_UART_RxCpltCallback+0x714>)
 8000ca4:	f013 ffe8 	bl	8014c78 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000ca8:	4853      	ldr	r0, [pc, #332]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000caa:	f00c f98d 	bl	800cfc8 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4853      	ldr	r0, [pc, #332]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000cb2:	f004 fae3 	bl	800527c <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <HAL_UART_RxCpltCallback+0x718>)
 8000cb8:	f013 ffde 	bl	8014c78 <puts>
		ERPA_ON = 1;
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e146      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cc4:	4852      	ldr	r0, [pc, #328]	; (8000e10 <HAL_UART_RxCpltCallback+0x720>)
 8000cc6:	f013 ffd7 	bl	8014c78 <puts>
		ERPA_ON = 0;
 8000cca:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		break;
 8000cd0:	e13f      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cd2:	4850      	ldr	r0, [pc, #320]	; (8000e14 <HAL_UART_RxCpltCallback+0x724>)
 8000cd4:	f013 ffd0 	bl	8014c78 <puts>
		PMT_ON = 1;
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
		break;
 8000cde:	e138      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000ce0:	484e      	ldr	r0, [pc, #312]	; (8000e1c <HAL_UART_RxCpltCallback+0x72c>)
 8000ce2:	f013 ffc9 	bl	8014c78 <puts>
		PMT_ON = 0;
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		break;
 8000cec:	e131      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <HAL_UART_RxCpltCallback+0x730>)
 8000cf0:	f013 ffc2 	bl	8014c78 <puts>
		HK_ON = 1;
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e12a      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cfc:	484a      	ldr	r0, [pc, #296]	; (8000e28 <HAL_UART_RxCpltCallback+0x738>)
 8000cfe:	f013 ffbb 	bl	8014c78 <puts>
		HK_ON = 0;
 8000d02:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
		break;
 8000d08:	e123      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <HAL_UART_RxCpltCallback+0x73c>)
 8000d0c:	f013 ffb4 	bl	8014c78 <puts>
		if (step < 17) {
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	f200 8115 	bhi.w	8000f44 <HAL_UART_RxCpltCallback+0x854>
			step+=2;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d24:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	4832      	ldr	r0, [pc, #200]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d38:	f004 fb43 	bl	80053c2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4830      	ldr	r0, [pc, #192]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d40:	f004 f984 	bl	800504c <HAL_DAC_Start>
		}
		break;
 8000d44:	e0fe      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x854>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d46:	483b      	ldr	r0, [pc, #236]	; (8000e34 <HAL_UART_RxCpltCallback+0x744>)
 8000d48:	f013 ff96 	bl	8014c78 <puts>
		if (step > 3) {
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	f240 80f9 	bls.w	8000f48 <HAL_UART_RxCpltCallback+0x858>
			step-=2;
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d74:	f004 fb25 	bl	80053c2 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d7c:	f004 f966 	bl	800504c <HAL_DAC_Start>
		}
		break;
 8000d80:	e0e2      	b.n	8000f48 <HAL_UART_RxCpltCallback+0x858>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <HAL_UART_RxCpltCallback+0x748>)
 8000d84:	f013 ff78 	bl	8014c78 <puts>
		if (cadence <= 50000){
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f200 80db 	bhi.w	8000f4c <HAL_UART_RxCpltCallback+0x85c>
			cadence *= 2;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d9e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000daa:	e0cf      	b.n	8000f4c <HAL_UART_RxCpltCallback+0x85c>
 8000dac:	08015a38 	.word	0x08015a38
 8000db0:	58020400 	.word	0x58020400
 8000db4:	08015a44 	.word	0x08015a44
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	08015a50 	.word	0x08015a50
 8000dc0:	08015a5c 	.word	0x08015a5c
 8000dc4:	08015a6c 	.word	0x08015a6c
 8000dc8:	08015a78 	.word	0x08015a78
 8000dcc:	08015a84 	.word	0x08015a84
 8000dd0:	08015a90 	.word	0x08015a90
 8000dd4:	08015aa0 	.word	0x08015aa0
 8000dd8:	08015aac 	.word	0x08015aac
 8000ddc:	08015ab8 	.word	0x08015ab8
 8000de0:	08015ac4 	.word	0x08015ac4
 8000de4:	08015ad0 	.word	0x08015ad0
 8000de8:	08015ae0 	.word	0x08015ae0
 8000dec:	08015af0 	.word	0x08015af0
 8000df0:	08015afc 	.word	0x08015afc
 8000df4:	08015b0c 	.word	0x08015b0c
 8000df8:	24000534 	.word	0x24000534
 8000dfc:	24000008 	.word	0x24000008
 8000e00:	240002d4 	.word	0x240002d4
 8000e04:	08015b1c 	.word	0x08015b1c
 8000e08:	08015b2c 	.word	0x08015b2c
 8000e0c:	2400067f 	.word	0x2400067f
 8000e10:	08015b34 	.word	0x08015b34
 8000e14:	08015b40 	.word	0x08015b40
 8000e18:	2400067e 	.word	0x2400067e
 8000e1c:	08015b48 	.word	0x08015b48
 8000e20:	08015b50 	.word	0x08015b50
 8000e24:	24000680 	.word	0x24000680
 8000e28:	08015b58 	.word	0x08015b58
 8000e2c:	08015b60 	.word	0x08015b60
 8000e30:	24000004 	.word	0x24000004
 8000e34:	08015b68 	.word	0x08015b68
 8000e38:	08015b74 	.word	0x08015b74
 8000e3c:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e40:	4846      	ldr	r0, [pc, #280]	; (8000f5c <HAL_UART_RxCpltCallback+0x86c>)
 8000e42:	f013 ff19 	bl	8014c78 <puts>
		if (cadence >= 6250){
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_UART_RxCpltCallback+0x870>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d97e      	bls.n	8000f50 <HAL_UART_RxCpltCallback+0x860>
			cadence /= 2;
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_UART_RxCpltCallback+0x870>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <HAL_UART_RxCpltCallback+0x870>)
 8000e5a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_UART_RxCpltCallback+0x870>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e66:	e073      	b.n	8000f50 <HAL_UART_RxCpltCallback+0x860>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e68:	483e      	ldr	r0, [pc, #248]	; (8000f64 <HAL_UART_RxCpltCallback+0x874>)
 8000e6a:	f013 ff05 	bl	8014c78 <puts>
		// TODO: Exit stop mode
		break;
 8000e6e:	e070      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e70:	483d      	ldr	r0, [pc, #244]	; (8000f68 <HAL_UART_RxCpltCallback+0x878>)
 8000e72:	f013 ff01 	bl	8014c78 <puts>
		// TODO: Enter stop mode
		break;
 8000e76:	e06c      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e78:	483c      	ldr	r0, [pc, #240]	; (8000f6c <HAL_UART_RxCpltCallback+0x87c>)
 8000e7a:	f013 fefd 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <HAL_UART_RxCpltCallback+0x880>)
 8000e80:	2104      	movs	r1, #4
 8000e82:	2201      	movs	r2, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 fcc9 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_UART_RxCpltCallback+0x880>)
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f007 fcc3 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc10
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f007 fcbc 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f007 fcb6 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f007 fcb0 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fca9 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 fca2 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000ed8:	e03b      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000eda:	4827      	ldr	r0, [pc, #156]	; (8000f78 <HAL_UART_RxCpltCallback+0x888>)
 8000edc:	f013 fecc 	bl	8014c78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f007 fc97 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f007 fc90 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000efe:	2140      	movs	r1, #64	; 0x40
 8000f00:	2201      	movs	r2, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f007 fc8a 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f007 fc84 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc10
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_UART_RxCpltCallback+0x884>)
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 fc7d 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_UART_RxCpltCallback+0x880>)
 8000f24:	2120      	movs	r1, #32
 8000f26:	2201      	movs	r2, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fc77 	bl	800881c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_UART_RxCpltCallback+0x880>)
 8000f30:	2104      	movs	r1, #4
 8000f32:	2201      	movs	r2, #1
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fc71 	bl	800881c <HAL_GPIO_WritePin>
		break;
 8000f3a:	e00a      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
	}
	default:{
		printf("Unknown Command\n");
 8000f3c:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_UART_RxCpltCallback+0x88c>)
 8000f3e:	f013 fe9b 	bl	8014c78 <puts>
		break;
 8000f42:	e006      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
		break;
 8000f44:	bf00      	nop
 8000f46:	e004      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
		break;
 8000f48:	bf00      	nop
 8000f4a:	e002      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
		break;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <HAL_UART_RxCpltCallback+0x862>
		break;
 8000f50:	bf00      	nop
	}
	}
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08015b80 	.word	0x08015b80
 8000f60:	24000000 	.word	0x24000000
 8000f64:	08015b8c 	.word	0x08015b8c
 8000f68:	08015b9c 	.word	0x08015b9c
 8000f6c:	08015bac 	.word	0x08015bac
 8000f70:	58020400 	.word	0x58020400
 8000f74:	58020800 	.word	0x58020800
 8000f78:	08015bb8 	.word	0x08015bb8
 8000f7c:	08015bc4 	.word	0x08015bc4

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f84:	f002 face 	bl	8003524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f88:	f000 f89a 	bl	80010c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f8c:	f000 f918 	bl	80011c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 fe6a 	bl	8001c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f94:	f000 fe38 	bl	8001c08 <MX_DMA_Init>
  MX_TIM3_Init();
 8000f98:	f000 fd9c 	bl	8001ad4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f9c:	f000 fde8 	bl	8001b70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fa0:	f000 fb28 	bl	80015f4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fa4:	f000 fc1a 	bl	80017dc <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fa8:	f000 fd1e 	bl	80019e8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fac:	f000 fc6e 	bl	800188c <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fb0:	f000 fa5c 	bl	800146c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fb4:	f000 f934 	bl	8001220 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fb8:	f000 faea 	bl	8001590 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fbc:	f000 fbb6 	bl	800172c <MX_SPI1_Init>
  MX_RTC_Init();
 8000fc0:	f000 fb58 	bl	8001674 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  if (!handshake())
 8000fc4:	f000 feca 	bl	8001d5c <handshake>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <main+0x52>
  {
	  Error_Handler();
 8000fce:	f001 fbcd 	bl	800276c <Error_Handler>
  }


  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <main+0xec>)
 8000fd6:	f00c f897 	bl	800d108 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4824      	ldr	r0, [pc, #144]	; (8001070 <main+0xf0>)
 8000fde:	f00c f893 	bl	800d108 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4823      	ldr	r0, [pc, #140]	; (8001074 <main+0xf4>)
 8000fe6:	f00c f88f 	bl	800d108 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fea:	f010 f92d 	bl	8011248 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f010 fb28 	bl	8011648 <osMessageQueueNew>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <main+0xf8>)
 8000ffc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <main+0xfc>)
 8001000:	2100      	movs	r1, #0
 8001002:	481f      	ldr	r0, [pc, #124]	; (8001080 <main+0x100>)
 8001004:	f010 f96a 	bl	80112dc <osThreadNew>
 8001008:	4603      	mov	r3, r0
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <main+0x104>)
 800100c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <main+0x108>)
 8001010:	2100      	movs	r1, #0
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <main+0x10c>)
 8001014:	f010 f962 	bl	80112dc <osThreadNew>
 8001018:	4603      	mov	r3, r0
 800101a:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <main+0x110>)
 800101c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <main+0x114>)
 8001020:	2100      	movs	r1, #0
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <main+0x118>)
 8001024:	f010 f95a 	bl	80112dc <osThreadNew>
 8001028:	4603      	mov	r3, r0
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <main+0x11c>)
 800102c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <main+0x120>)
 8001030:	2100      	movs	r1, #0
 8001032:	481c      	ldr	r0, [pc, #112]	; (80010a4 <main+0x124>)
 8001034:	f010 f952 	bl	80112dc <osThreadNew>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <main+0x128>)
 800103c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <main+0x12c>)
 8001040:	2100      	movs	r1, #0
 8001042:	481b      	ldr	r0, [pc, #108]	; (80010b0 <main+0x130>)
 8001044:	f010 f94a 	bl	80112dc <osThreadNew>
 8001048:	4603      	mov	r3, r0
 800104a:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <main+0x134>)
 800104c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 800104e:	2000      	movs	r0, #0
 8001050:	f010 fa11 	bl	8011476 <osEventFlagsNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <main+0x138>)
 8001058:	6013      	str	r3, [r2, #0]
  system_setup();
 800105a:	f000 ff0d 	bl	8001e78 <system_setup>
  printf("Starting kernal...\n");
 800105e:	4817      	ldr	r0, [pc, #92]	; (80010bc <main+0x13c>)
 8001060:	f013 fe0a 	bl	8014c78 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001064:	f010 f914 	bl	8011290 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001068:	e7fe      	b.n	8001068 <main+0xe8>
 800106a:	bf00      	nop
 800106c:	240004e8 	.word	0x240004e8
 8001070:	24000534 	.word	0x24000534
 8001074:	24000580 	.word	0x24000580
 8001078:	24000674 	.word	0x24000674
 800107c:	08015c38 	.word	0x08015c38
 8001080:	080025fd 	.word	0x080025fd
 8001084:	24000660 	.word	0x24000660
 8001088:	08015c5c 	.word	0x08015c5c
 800108c:	08002641 	.word	0x08002641
 8001090:	24000664 	.word	0x24000664
 8001094:	08015c80 	.word	0x08015c80
 8001098:	08002685 	.word	0x08002685
 800109c:	24000668 	.word	0x24000668
 80010a0:	08015ca4 	.word	0x08015ca4
 80010a4:	080026c9 	.word	0x080026c9
 80010a8:	2400066c 	.word	0x2400066c
 80010ac:	08015cc8 	.word	0x08015cc8
 80010b0:	080026ed 	.word	0x080026ed
 80010b4:	24000670 	.word	0x24000670
 80010b8:	24000684 	.word	0x24000684
 80010bc:	08015bd4 	.word	0x08015bd4

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09c      	sub	sp, #112	; 0x70
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	224c      	movs	r2, #76	; 0x4c
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f013 fc64 	bl	801499c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2220      	movs	r2, #32
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f013 fc5e 	bl	801499c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010e0:	2002      	movs	r0, #2
 80010e2:	f007 fce9 	bl	8008ab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <SystemClock_Config+0xf8>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <SystemClock_Config+0xf8>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <SystemClock_Config+0xf8>)
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <SystemClock_Config+0xfc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <SystemClock_Config+0xfc>)
 800110a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <SystemClock_Config+0xfc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800111c:	bf00      	nop
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <SystemClock_Config+0xfc>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800112a:	d1f8      	bne.n	800111e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800112c:	230a      	movs	r3, #10
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001130:	2301      	movs	r3, #1
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001140:	2300      	movs	r3, #0
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001144:	2304      	movs	r3, #4
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001148:	230c      	movs	r3, #12
 800114a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800114c:	2304      	movs	r3, #4
 800114e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001158:	230c      	movs	r3, #12
 800115a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800115c:	2300      	movs	r3, #0
 800115e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fcdf 	bl	8008b2c <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001174:	f001 fafa 	bl	800276c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001178:	233f      	movs	r3, #63	; 0x3f
 800117a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117c:	2303      	movs	r3, #3
 800117e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2101      	movs	r1, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f008 f91e 	bl	80093e0 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xee>
  {
    Error_Handler();
 80011aa:	f001 fadf 	bl	800276c <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3770      	adds	r7, #112	; 0x70
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	58000400 	.word	0x58000400
 80011bc:	58024800 	.word	0x58024800

080011c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0b0      	sub	sp, #192	; 0xc0
 80011c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	22c0      	movs	r2, #192	; 0xc0
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f013 fbe5 	bl	801499c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80011de:	2304      	movs	r3, #4
 80011e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80011e2:	2309      	movs	r3, #9
 80011e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80011e6:	2304      	movs	r3, #4
 80011e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011f2:	23c0      	movs	r3, #192	; 0xc0
 80011f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011f6:	2320      	movs	r3, #32
 80011f8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80011fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4618      	mov	r0, r3
 800120a:	f008 fcb7 	bl	8009b7c <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001214:	f001 faaa 	bl	800276c <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	37c0      	adds	r7, #192	; 0xc0
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001244:	4b7c      	ldr	r3, [pc, #496]	; (8001438 <MX_ADC1_Init+0x218>)
 8001246:	4a7d      	ldr	r2, [pc, #500]	; (800143c <MX_ADC1_Init+0x21c>)
 8001248:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800124a:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <MX_ADC1_Init+0x218>)
 800124c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001250:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001252:	4b79      	ldr	r3, [pc, #484]	; (8001438 <MX_ADC1_Init+0x218>)
 8001254:	2208      	movs	r2, #8
 8001256:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001258:	4b77      	ldr	r3, [pc, #476]	; (8001438 <MX_ADC1_Init+0x218>)
 800125a:	2201      	movs	r2, #1
 800125c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125e:	4b76      	ldr	r3, [pc, #472]	; (8001438 <MX_ADC1_Init+0x218>)
 8001260:	2204      	movs	r2, #4
 8001262:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001264:	4b74      	ldr	r3, [pc, #464]	; (8001438 <MX_ADC1_Init+0x218>)
 8001266:	2200      	movs	r2, #0
 8001268:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800126a:	4b73      	ldr	r3, [pc, #460]	; (8001438 <MX_ADC1_Init+0x218>)
 800126c:	2201      	movs	r2, #1
 800126e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001270:	4b71      	ldr	r3, [pc, #452]	; (8001438 <MX_ADC1_Init+0x218>)
 8001272:	220b      	movs	r2, #11
 8001274:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001276:	4b70      	ldr	r3, [pc, #448]	; (8001438 <MX_ADC1_Init+0x218>)
 8001278:	2200      	movs	r2, #0
 800127a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127c:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <MX_ADC1_Init+0x218>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001282:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <MX_ADC1_Init+0x218>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <MX_ADC1_Init+0x218>)
 800128a:	2203      	movs	r2, #3
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800128e:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <MX_ADC1_Init+0x218>)
 8001290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001296:	4b68      	ldr	r3, [pc, #416]	; (8001438 <MX_ADC1_Init+0x218>)
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800129c:	4b66      	ldr	r3, [pc, #408]	; (8001438 <MX_ADC1_Init+0x218>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a4:	4864      	ldr	r0, [pc, #400]	; (8001438 <MX_ADC1_Init+0x218>)
 80012a6:	f002 fbc9 	bl	8003a3c <HAL_ADC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012b0:	f001 fa5c 	bl	800276c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	485e      	ldr	r0, [pc, #376]	; (8001438 <MX_ADC1_Init+0x218>)
 80012c0:	f003 fce4 	bl	8004c8c <HAL_ADCEx_MultiModeConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012ca:	f001 fa4f 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ce:	4b5c      	ldr	r3, [pc, #368]	; (8001440 <MX_ADC1_Init+0x220>)
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d2:	2306      	movs	r3, #6
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80012d6:	2307      	movs	r3, #7
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e0:	2304      	movs	r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4851      	ldr	r0, [pc, #324]	; (8001438 <MX_ADC1_Init+0x218>)
 80012f2:	f002 fe27 	bl	8003f44 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012fc:	f001 fa36 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <MX_ADC1_Init+0x224>)
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001304:	230c      	movs	r3, #12
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	484a      	ldr	r0, [pc, #296]	; (8001438 <MX_ADC1_Init+0x218>)
 800130e:	f002 fe19 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001318:	f001 fa28 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <MX_ADC1_Init+0x228>)
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001320:	2312      	movs	r3, #18
 8001322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4843      	ldr	r0, [pc, #268]	; (8001438 <MX_ADC1_Init+0x218>)
 800132a:	f002 fe0b 	bl	8003f44 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001334:	f001 fa1a 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <MX_ADC1_Init+0x22c>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800133c:	2318      	movs	r3, #24
 800133e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	483c      	ldr	r0, [pc, #240]	; (8001438 <MX_ADC1_Init+0x218>)
 8001346:	f002 fdfd 	bl	8003f44 <HAL_ADC_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001350:	f001 fa0c 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <MX_ADC1_Init+0x230>)
 8001356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4835      	ldr	r0, [pc, #212]	; (8001438 <MX_ADC1_Init+0x218>)
 8001364:	f002 fdee 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800136e:	f001 f9fd 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <MX_ADC1_Init+0x234>)
 8001374:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001376:	f44f 7383 	mov.w	r3, #262	; 0x106
 800137a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	482d      	ldr	r0, [pc, #180]	; (8001438 <MX_ADC1_Init+0x218>)
 8001382:	f002 fddf 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800138c:	f001 f9ee 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <MX_ADC1_Init+0x238>)
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001394:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4826      	ldr	r0, [pc, #152]	; (8001438 <MX_ADC1_Init+0x218>)
 80013a0:	f002 fdd0 	bl	8003f44 <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80013aa:	f001 f9df 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <MX_ADC1_Init+0x23c>)
 80013b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013b2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <MX_ADC1_Init+0x218>)
 80013be:	f002 fdc1 	bl	8003f44 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80013c8:	f001 f9d0 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_ADC1_Init+0x240>)
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80013d0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <MX_ADC1_Init+0x218>)
 80013dc:	f002 fdb2 	bl	8003f44 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80013e6:	f001 f9c1 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_ADC1_Init+0x244>)
 80013ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80013ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	480e      	ldr	r0, [pc, #56]	; (8001438 <MX_ADC1_Init+0x218>)
 80013fe:	f002 fda1 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8001408:	f001 f9b0 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_ADC1_Init+0x248>)
 800140e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001410:	f240 2306 	movw	r3, #518	; 0x206
 8001414:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001416:	2307      	movs	r3, #7
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_ADC1_Init+0x218>)
 8001420:	f002 fd90 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 800142a:	f001 f99f 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2400011c 	.word	0x2400011c
 800143c:	40022000 	.word	0x40022000
 8001440:	0c900008 	.word	0x0c900008
 8001444:	10c00010 	.word	0x10c00010
 8001448:	14f00020 	.word	0x14f00020
 800144c:	1d500080 	.word	0x1d500080
 8001450:	21800100 	.word	0x21800100
 8001454:	25b00200 	.word	0x25b00200
 8001458:	2a000400 	.word	0x2a000400
 800145c:	2e300800 	.word	0x2e300800
 8001460:	3ac04000 	.word	0x3ac04000
 8001464:	3ef08000 	.word	0x3ef08000
 8001468:	47520000 	.word	0x47520000

0800146c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <MX_ADC3_Init+0x110>)
 8001486:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <MX_ADC3_Init+0x114>)
 8001488:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <MX_ADC3_Init+0x110>)
 800148c:	2208      	movs	r2, #8
 800148e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <MX_ADC3_Init+0x110>)
 8001492:	2201      	movs	r2, #1
 8001494:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <MX_ADC3_Init+0x110>)
 8001498:	2204      	movs	r2, #4
 800149a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <MX_ADC3_Init+0x110>)
 800149e:	2200      	movs	r2, #0
 80014a0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <MX_ADC3_Init+0x110>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <MX_ADC3_Init+0x110>)
 80014aa:	2204      	movs	r2, #4
 80014ac:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <MX_ADC3_Init+0x110>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <MX_ADC3_Init+0x110>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_ADC3_Init+0x110>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_ADC3_Init+0x110>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_ADC3_Init+0x110>)
 80014c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_ADC3_Init+0x110>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_ADC3_Init+0x110>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014dc:	4827      	ldr	r0, [pc, #156]	; (800157c <MX_ADC3_Init+0x110>)
 80014de:	f002 faad 	bl	8003a3c <HAL_ADC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80014e8:	f001 f940 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_ADC3_Init+0x118>)
 80014ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f0:	2306      	movs	r3, #6
 80014f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80014f4:	2307      	movs	r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014fe:	2304      	movs	r3, #4
 8001500:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	481b      	ldr	r0, [pc, #108]	; (800157c <MX_ADC3_Init+0x110>)
 8001510:	f002 fd18 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800151a:	f001 f927 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_ADC3_Init+0x11c>)
 8001520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001522:	230c      	movs	r3, #12
 8001524:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_ADC3_Init+0x110>)
 800152c:	f002 fd0a 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001536:	f001 f919 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800153a:	2301      	movs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800153e:	2312      	movs	r3, #18
 8001540:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_ADC3_Init+0x110>)
 8001548:	f002 fcfc 	bl	8003f44 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001552:	f001 f90b 	bl	800276c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_ADC3_Init+0x120>)
 8001558:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800155a:	2318      	movs	r3, #24
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_ADC3_Init+0x110>)
 8001564:	f002 fcee 	bl	8003f44 <HAL_ADC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800156e:	f001 f8fd 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	24000180 	.word	0x24000180
 8001580:	58026000 	.word	0x58026000
 8001584:	cb840000 	.word	0xcb840000
 8001588:	cfb80000 	.word	0xcfb80000
 800158c:	04300002 	.word	0x04300002

08001590 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2224      	movs	r2, #36	; 0x24
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f013 f9fd 	bl	801499c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_DAC1_Init+0x5c>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_DAC1_Init+0x60>)
 80015a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <MX_DAC1_Init+0x5c>)
 80015aa:	f003 fd2d 	bl	8005008 <HAL_DAC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015b4:	f001 f8da 	bl	800276c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015bc:	230a      	movs	r3, #10
 80015be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_DAC1_Init+0x5c>)
 80015d4:	f003 ff48 	bl	8005468 <HAL_DAC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015de:	f001 f8c5 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	240002d4 	.word	0x240002d4
 80015f0:	40007400 	.word	0x40007400

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_I2C1_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_I2C1_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_I2C1_Init+0x74>)
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <MX_I2C1_Init+0x7c>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_I2C1_Init+0x74>)
 800160c:	2201      	movs	r2, #1
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_I2C1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <MX_I2C1_Init+0x74>)
 8001630:	f007 f90e 	bl	8008850 <HAL_I2C_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800163a:	f001 f897 	bl	800276c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <MX_I2C1_Init+0x74>)
 8001642:	f007 f9a1 	bl	8008988 <HAL_I2CEx_ConfigAnalogFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800164c:	f001 f88e 	bl	800276c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_I2C1_Init+0x74>)
 8001654:	f007 f9e3 	bl	8008a1e <HAL_I2CEx_ConfigDigitalFilter>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800165e:	f001 f885 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000360 	.word	0x24000360
 800166c:	40005400 	.word	0x40005400
 8001670:	00506682 	.word	0x00506682

08001674 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001688:	2300      	movs	r3, #0
 800168a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_RTC_Init+0xb0>)
 800168e:	4a26      	ldr	r2, [pc, #152]	; (8001728 <MX_RTC_Init+0xb4>)
 8001690:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_RTC_Init+0xb0>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_RTC_Init+0xb0>)
 800169a:	227f      	movs	r2, #127	; 0x7f
 800169c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_RTC_Init+0xb0>)
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_RTC_Init+0xb0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_RTC_Init+0xb0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_RTC_Init+0xb0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_RTC_Init+0xb0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <MX_RTC_Init+0xb0>)
 80016be:	f00a ff5b 	bl	800c578 <HAL_RTC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80016c8:	f001 f850 	bl	800276c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2201      	movs	r2, #1
 80016e4:	4619      	mov	r1, r3
 80016e6:	480f      	ldr	r0, [pc, #60]	; (8001724 <MX_RTC_Init+0xb0>)
 80016e8:	f00a ffc8 	bl	800c67c <HAL_RTC_SetTime>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80016f2:	f001 f83b 	bl	800276c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80016f6:	2305      	movs	r3, #5
 80016f8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80016fa:	2305      	movs	r3, #5
 80016fc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80016fe:	2331      	movs	r3, #49	; 0x31
 8001700:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001702:	2324      	movs	r3, #36	; 0x24
 8001704:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	2201      	movs	r2, #1
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_RTC_Init+0xb0>)
 800170e:	f00b f8af 	bl	800c870 <HAL_RTC_SetDate>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001718:	f001 f828 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	240003b4 	.word	0x240003b4
 8001728:	58004000 	.word	0x58004000

0800172c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <MX_SPI1_Init+0xac>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001738:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800173c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001740:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001744:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001748:	220f      	movs	r2, #15
 800174a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_SPI1_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_SPI1_Init+0xa8>)
 800175a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800175e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001762:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001766:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_SPI1_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_SPI1_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_SPI1_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_SPI1_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_SPI1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_SPI1_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_SPI1_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_SPI1_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_SPI1_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_SPI1_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_SPI1_Init+0xa8>)
 80017c0:	f00b f9fc 	bl	800cbbc <HAL_SPI_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80017ca:	f000 ffcf 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	240003d8 	.word	0x240003d8
 80017d8:	40013000 	.word	0x40013000

080017dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_SPI2_Init+0xa8>)
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <MX_SPI2_Init+0xac>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_SPI2_Init+0xa8>)
 80017e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_SPI2_Init+0xa8>)
 80017f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_SPI2_Init+0xa8>)
 80017f8:	220f      	movs	r2, #15
 80017fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <MX_SPI2_Init+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <MX_SPI2_Init+0xa8>)
 800180a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800180e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001810:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001812:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001816:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_SPI2_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_SPI2_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_SPI2_Init+0xa8>)
 800183a:	2200      	movs	r2, #0
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_SPI2_Init+0xa8>)
 800184c:	2200      	movs	r2, #0
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001852:	2200      	movs	r2, #0
 8001854:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_SPI2_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001864:	2200      	movs	r2, #0
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_SPI2_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_SPI2_Init+0xa8>)
 8001870:	f00b f9a4 	bl	800cbbc <HAL_SPI_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800187a:	f000 ff77 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24000460 	.word	0x24000460
 8001888:	40003800 	.word	0x40003800

0800188c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b09a      	sub	sp, #104	; 0x68
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	222c      	movs	r2, #44	; 0x2c
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f013 f868 	bl	801499c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018ce:	4a45      	ldr	r2, [pc, #276]	; (80019e4 <MX_TIM1_Init+0x158>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018d4:	225f      	movs	r2, #95	; 0x5f
 80018d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018e0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80018e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ec:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f8:	4839      	ldr	r0, [pc, #228]	; (80019e0 <MX_TIM1_Init+0x154>)
 80018fa:	f00b fa9e 	bl	800ce3a <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001904:	f000 ff32 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001912:	4619      	mov	r1, r3
 8001914:	4832      	ldr	r0, [pc, #200]	; (80019e0 <MX_TIM1_Init+0x154>)
 8001916:	f00c f8dd 	bl	800dad4 <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001920:	f000 ff24 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001924:	482e      	ldr	r0, [pc, #184]	; (80019e0 <MX_TIM1_Init+0x154>)
 8001926:	f00b fd49 	bl	800d3bc <HAL_TIM_PWM_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001930:	f000 ff1c 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001940:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001944:	4619      	mov	r1, r3
 8001946:	4826      	ldr	r0, [pc, #152]	; (80019e0 <MX_TIM1_Init+0x154>)
 8001948:	f00c fe1a 	bl	800e580 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001952:	f000 ff0b 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001956:	2360      	movs	r3, #96	; 0x60
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800195a:	f240 13df 	movw	r3, #479	; 0x1df
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001964:	2300      	movs	r3, #0
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM1_Init+0x154>)
 800197e:	f00b ff95 	bl	800d8ac <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001988:	f000 fef0 	bl	800276c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM1_Init+0x154>)
 80019c2:	f00c fe6b 	bl	800e69c <HAL_TIMEx_ConfigBreakDeadTime>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80019cc:	f000 fece 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM1_Init+0x154>)
 80019d2:	f001 fa59 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 80019d6:	bf00      	nop
 80019d8:	3768      	adds	r7, #104	; 0x68
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	240004e8 	.word	0x240004e8
 80019e4:	40010000 	.word	0x40010000

080019e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a24:	222f      	movs	r2, #47	; 0x2f
 8001a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a30:	f640 4234 	movw	r2, #3124	; 0xc34
 8001a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a42:	4823      	ldr	r0, [pc, #140]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a44:	f00b f9f9 	bl	800ce3a <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a4e:	f000 fe8d 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	481c      	ldr	r0, [pc, #112]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a60:	f00c f838 	bl	800dad4 <HAL_TIM_ConfigClockSource>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a6a:	f000 fe7f 	bl	800276c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a6e:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a70:	f00b fca4 	bl	800d3bc <HAL_TIM_PWM_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a7a:	f000 fe77 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001a8e:	f00c fd77 	bl	800e580 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a98:	f000 fe68 	bl	800276c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9c:	2360      	movs	r3, #96	; 0x60
 8001a9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	220c      	movs	r2, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001ab4:	f00b fefa 	bl	800d8ac <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001abe:	f000 fe55 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM2_Init+0xe8>)
 8001ac4:	f001 f9e0 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8001ac8:	bf00      	nop
 8001aca:	3738      	adds	r7, #56	; 0x38
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	24000534 	.word	0x24000534

08001ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <MX_TIM3_Init+0x98>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001afa:	222f      	movs	r2, #47	; 0x2f
 8001afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b18:	4813      	ldr	r0, [pc, #76]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b1a:	f00b f98e 	bl	800ce3a <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b24:	f000 fe22 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b36:	f00b ffcd 	bl	800dad4 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b40:	f000 fe14 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM3_Init+0x94>)
 8001b52:	f00c fd15 	bl	800e580 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b5c:	f000 fe06 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	24000580 	.word	0x24000580
 8001b6c:	40000400 	.word	0x40000400

08001b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <MX_USART1_UART_Init+0x94>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b7c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bba:	f00c fe0b 	bl	800e7d4 <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f000 fdd2 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bcc:	f00f fa2d 	bl	801102a <HAL_UARTEx_SetTxFifoThreshold>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bd6:	f000 fdc9 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bde:	f00f fa62 	bl	80110a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001be8:	f000 fdc0 	bl	800276c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bee:	f00f f9e3 	bl	8010fb8 <HAL_UARTEx_DisableFifoMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f000 fdb8 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	240005cc 	.word	0x240005cc
 8001c04:	40011000 	.word	0x40011000

08001c08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_DMA_Init+0x5c>)
 8001c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <MX_DMA_Init+0x5c>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_DMA_Init+0x5c>)
 8001c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2105      	movs	r1, #5
 8001c30:	200b      	movs	r0, #11
 8001c32:	f003 f9c1 	bl	8004fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c36:	200b      	movs	r0, #11
 8001c38:	f003 f9d8 	bl	8004fec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2105      	movs	r1, #5
 8001c40:	200c      	movs	r0, #12
 8001c42:	f003 f9b9 	bl	8004fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c46:	200c      	movs	r0, #12
 8001c48:	f003 f9d0 	bl	8004fec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2105      	movs	r1, #5
 8001c50:	2010      	movs	r0, #16
 8001c52:	f003 f9b1 	bl	8004fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c56:	2010      	movs	r0, #16
 8001c58:	f003 f9c8 	bl	8004fec <HAL_NVIC_EnableIRQ>

}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	58024400 	.word	0x58024400

08001c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_GPIO_Init+0xe8>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001cfc:	4815      	ldr	r0, [pc, #84]	; (8001d54 <MX_GPIO_Init+0xec>)
 8001cfe:	f006 fd8d 	bl	800881c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2164      	movs	r1, #100	; 0x64
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <MX_GPIO_Init+0xf0>)
 8001d08:	f006 fd88 	bl	800881c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d0c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d10:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <MX_GPIO_Init+0xec>)
 8001d26:	f006 fbb1 	bl	800848c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_GPIO_Init+0xf0>)
 8001d42:	f006 fba3 	bl	800848c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	58024400 	.word	0x58024400
 8001d54:	58020800 	.word	0x58020800
 8001d58:	58020400 	.word	0x58020400

08001d5c <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b090      	sub	sp, #64	; 0x40
 8001d60:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001d62:	230a      	movs	r3, #10
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001d66:	f107 011c 	add.w	r1, r7, #28
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	2209      	movs	r2, #9
 8001d6e:	4840      	ldr	r0, [pc, #256]	; (8001e70 <handshake+0x114>)
 8001d70:	f00c fe0e 	bl	800e990 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001d74:	7f3b      	ldrb	r3, [r7, #28]
 8001d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d1f1      	bne.n	8001d66 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001d82:	7f7b      	ldrb	r3, [r7, #29]
 8001d84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001d88:	7fbb      	ldrb	r3, [r7, #30]
 8001d8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001d94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001d9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001da0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001da4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001da8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001dc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001dc4:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001dc6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001dca:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001dcc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001dd0:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dd6:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001dd8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001ddc:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001dde:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001de2:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001de4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001de6:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4820      	ldr	r0, [pc, #128]	; (8001e74 <handshake+0x118>)
 8001df2:	f00a fd3d 	bl	800c870 <HAL_RTC_SetDate>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001dfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <handshake+0xac>
	{
	    Error_Handler();
 8001e04:	f000 fcb2 	bl	800276c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4819      	ldr	r0, [pc, #100]	; (8001e74 <handshake+0x118>)
 8001e10:	f00a fc34 	bl	800c67c <HAL_RTC_SetTime>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001e1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <handshake+0xca>
	{
	    Error_Handler();
 8001e22:	f000 fca3 	bl	800276c <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001e26:	23fa      	movs	r3, #250	; 0xfa
 8001e28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e48:	e009      	b.n	8001e5e <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001e4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e4e:	2364      	movs	r3, #100	; 0x64
 8001e50:	2205      	movs	r2, #5
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <handshake+0x114>)
 8001e54:	f00c fd0e 	bl	800e874 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dbf1      	blt.n	8001e4a <handshake+0xee>
	}

	return 1;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3740      	adds	r7, #64	; 0x40
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	240005cc 	.word	0x240005cc
 8001e74:	240003b4 	.word	0x240003b4

08001e78 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e80:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e86:	210c      	movs	r1, #12
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <system_setup+0x74>)
 8001e8a:	f00b faf9 	bl	800d480 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001e8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e96:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <system_setup+0x78>)
 8001e98:	f002 fe94 	bl	8004bc4 <HAL_ADCEx_Calibration_Start>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 8001ea2:	f000 fc63 	bl	800276c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001ea6:	220b      	movs	r2, #11
 8001ea8:	4912      	ldr	r1, [pc, #72]	; (8001ef4 <system_setup+0x7c>)
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <system_setup+0x78>)
 8001eac:	f001 ff68 	bl	8003d80 <HAL_ADC_Start_DMA>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001eb6:	f000 fc59 	bl	800276c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001eba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <system_setup+0x80>)
 8001ec4:	f002 fe7e 	bl	8004bc4 <HAL_ADCEx_Calibration_Start>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 8001ece:	f000 fc4d 	bl	800276c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	4909      	ldr	r1, [pc, #36]	; (8001efc <system_setup+0x84>)
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <system_setup+0x80>)
 8001ed8:	f001 ff52 	bl	8003d80 <HAL_ADC_Start_DMA>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001ee2:	f000 fc43 	bl	800276c <Error_Handler>
	  	}
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	24000534 	.word	0x24000534
 8001ef0:	2400011c 	.word	0x2400011c
 8001ef4:	24000700 	.word	0x24000700
 8001ef8:	24000180 	.word	0x24000180
 8001efc:	24000720 	.word	0x24000720

08001f00 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481d      	ldr	r0, [pc, #116]	; (8001f88 <getTimestamp+0x88>)
 8001f12:	f00a fc51 	bl	800c7b8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481a      	ldr	r0, [pc, #104]	; (8001f88 <getTimestamp+0x88>)
 8001f20:	f00a fd2e 	bl	800c980 <HAL_RTC_GetDate>
    uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f2a:	fb03 f202 	mul.w	r2, r3, r2
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <getTimestamp+0x88>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24



    buffer[0] = currentDate.Year;		// 0-99
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	701a      	strb	r2, [r3, #0]
    buffer[1] = currentDate.Month;		// 1-12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3301      	adds	r3, #1
 8001f46:	7b7a      	ldrb	r2, [r7, #13]
 8001f48:	701a      	strb	r2, [r3, #0]
    buffer[2] = currentDate.Date;		// 1-31
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	7bba      	ldrb	r2, [r7, #14]
 8001f50:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3303      	adds	r3, #3
 8001f56:	7c3a      	ldrb	r2, [r7, #16]
 8001f58:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	7c7a      	ldrb	r2, [r7, #17]
 8001f60:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3305      	adds	r3, #5
 8001f66:	7cba      	ldrb	r2, [r7, #18]
 8001f68:	701a      	strb	r2, [r3, #0]
    buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	0a1a      	lsrs	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3306      	adds	r3, #6
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]
    buffer[7] = milliseconds & 0xFF;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3307      	adds	r3, #7
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	240003b4 	.word	0x240003b4

08001f8c <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	4613      	mov	r3, r2
 8001f98:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f012 fcdf 	bl	8014960 <malloc>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	88fa      	ldrh	r2, [r7, #6]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f012 fce7 	bl	8014980 <memcpy>
    packet.size = size;
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fc2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001fd6:	bf00      	nop
 8001fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fdc:	483f      	ldr	r0, [pc, #252]	; (80020dc <sample_pmt+0x10c>)
 8001fde:	f006 fc05 	bl	80087ec <HAL_GPIO_ReadPin>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f7      	bne.n	8001fd8 <sample_pmt+0x8>
	}
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001fe8:	200e      	movs	r0, #14
 8001fea:	f012 fcb9 	bl	8014960 <malloc>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f012 fcb4 	bl	8014960 <malloc>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001ffc:	2008      	movs	r0, #8
 8001ffe:	f012 fcaf 	bl	8014960 <malloc>
 8002002:	4603      	mov	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff ff7a 	bl	8001f00 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	220e      	movs	r2, #14
 8002010:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	3301      	adds	r3, #1
 8002016:	220d      	movs	r2, #13
 8002018:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	22bb      	movs	r2, #187	; 0xbb
 800201e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	22bb      	movs	r2, #187	; 0xbb
 8002026:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <sample_pmt+0x110>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b29a      	uxth	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3302      	adds	r3, #2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <sample_pmt+0x110>)
 800203a:	881a      	ldrh	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3303      	adds	r3, #3
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3304      	adds	r3, #4
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3305      	adds	r3, #5
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	7852      	ldrb	r2, [r2, #1]
 8002056:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3306      	adds	r3, #6
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3307      	adds	r3, #7
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	7852      	ldrb	r2, [r2, #1]
 800206a:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3308      	adds	r3, #8
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	7892      	ldrb	r2, [r2, #2]
 8002074:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3309      	adds	r3, #9
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	78d2      	ldrb	r2, [r2, #3]
 800207e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	330a      	adds	r3, #10
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	7912      	ldrb	r2, [r2, #4]
 8002088:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	330b      	adds	r3, #11
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	7952      	ldrb	r2, [r2, #5]
 8002092:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	330c      	adds	r3, #12
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	7992      	ldrb	r2, [r2, #6]
 800209c:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	330d      	adds	r3, #13
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	79d2      	ldrb	r2, [r2, #7]
 80020a6:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	220e      	movs	r2, #14
 80020ac:	6979      	ldr	r1, [r7, #20]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff6c 	bl	8001f8c <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <sample_pmt+0x114>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	2300      	movs	r3, #0
 80020bc:	2200      	movs	r2, #0
 80020be:	f00f fb37 	bl	8011730 <osMessageQueuePut>
	free(buffer);
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f012 fc54 	bl	8014970 <free>
	free(pmt_spi);
 80020c8:	6938      	ldr	r0, [r7, #16]
 80020ca:	f012 fc51 	bl	8014970 <free>
	free(timestamp);
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f012 fc4e 	bl	8014970 <free>
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58020000 	.word	0x58020000
 80020e0:	24000678 	.word	0x24000678
 80020e4:	24000674 	.word	0x24000674

080020e8 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80020ee:	bf00      	nop
 80020f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f4:	4856      	ldr	r0, [pc, #344]	; (8002250 <sample_erpa+0x168>)
 80020f6:	f006 fb79 	bl	80087ec <HAL_GPIO_ReadPin>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f7      	bne.n	80020f0 <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002100:	2012      	movs	r0, #18
 8002102:	f012 fc2d 	bl	8014960 <malloc>
 8002106:	4603      	mov	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800210a:	2002      	movs	r0, #2
 800210c:	f012 fc28 	bl	8014960 <malloc>
 8002110:	4603      	mov	r3, r0
 8002112:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8002114:	2004      	movs	r0, #4
 8002116:	f012 fc23 	bl	8014960 <malloc>
 800211a:	4603      	mov	r3, r0
 800211c:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800211e:	2008      	movs	r0, #8
 8002120:	f012 fc1e 	bl	8014960 <malloc>
 8002124:	4603      	mov	r3, r0
 8002126:	60bb      	str	r3, [r7, #8]
    getTimestamp(timestamp);
 8002128:	68b8      	ldr	r0, [r7, #8]
 800212a:	f7ff fee9 	bl	8001f00 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	220e      	movs	r2, #14
 8002132:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	3301      	adds	r3, #1
 8002138:	220d      	movs	r2, #13
 800213a:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	22ee      	movs	r2, #238	; 0xee
 8002140:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3302      	adds	r3, #2
 8002146:	22dd      	movs	r2, #221	; 0xdd
 8002148:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	22aa      	movs	r2, #170	; 0xaa
 800214e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	22aa      	movs	r2, #170	; 0xaa
 8002156:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002158:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <sample_erpa+0x16c>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29a      	uxth	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3302      	adds	r3, #2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <sample_erpa+0x16c>)
 800216a:	881a      	ldrh	r2, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3303      	adds	r3, #3
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b29a      	uxth	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3304      	adds	r3, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3305      	adds	r3, #5
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3302      	adds	r3, #2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	b29a      	uxth	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3306      	adds	r3, #6
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3302      	adds	r3, #2
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3307      	adds	r3, #7
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3308      	adds	r3, #8
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3309      	adds	r3, #9
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	7852      	ldrb	r2, [r2, #1]
 80021c2:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	330a      	adds	r3, #10
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	330b      	adds	r3, #11
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	7852      	ldrb	r2, [r2, #1]
 80021d6:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	330c      	adds	r3, #12
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	7892      	ldrb	r2, [r2, #2]
 80021e0:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	330d      	adds	r3, #13
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	78d2      	ldrb	r2, [r2, #3]
 80021ea:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	330e      	adds	r3, #14
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	7912      	ldrb	r2, [r2, #4]
 80021f4:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	330f      	adds	r3, #15
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	7952      	ldrb	r2, [r2, #5]
 80021fe:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3310      	adds	r3, #16
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	7992      	ldrb	r2, [r2, #6]
 8002208:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3311      	adds	r3, #17
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	79d2      	ldrb	r2, [r2, #7]
 8002212:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002214:	463b      	mov	r3, r7
 8002216:	2212      	movs	r2, #18
 8002218:	6979      	ldr	r1, [r7, #20]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff feb6 	bl	8001f8c <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <sample_erpa+0x170>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	4639      	mov	r1, r7
 8002226:	2300      	movs	r3, #0
 8002228:	2200      	movs	r2, #0
 800222a:	f00f fa81 	bl	8011730 <osMessageQueuePut>
	free(buffer);
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f012 fb9e 	bl	8014970 <free>
	free(erpa_spi);
 8002234:	6938      	ldr	r0, [r7, #16]
 8002236:	f012 fb9b 	bl	8014970 <free>
	free(erpa_adc);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f012 fb98 	bl	8014970 <free>
	free(timestamp);
 8002240:	68b8      	ldr	r0, [r7, #8]
 8002242:	f012 fb95 	bl	8014970 <free>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	58020400 	.word	0x58020400
 8002254:	2400067a 	.word	0x2400067a
 8002258:	24000674 	.word	0x24000674

0800225c <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002262:	202e      	movs	r0, #46	; 0x2e
 8002264:	f012 fb7c 	bl	8014960 <malloc>
 8002268:	4603      	mov	r3, r0
 800226a:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 800226c:	2008      	movs	r0, #8
 800226e:	f012 fb77 	bl	8014960 <malloc>
 8002272:	4603      	mov	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8002276:	2012      	movs	r0, #18
 8002278:	f012 fb72 	bl	8014960 <malloc>
 800227c:	4603      	mov	r3, r0
 800227e:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002280:	2008      	movs	r0, #8
 8002282:	f012 fb6d 	bl	8014960 <malloc>
 8002286:	4603      	mov	r3, r0
 8002288:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800228a:	2008      	movs	r0, #8
 800228c:	f012 fb68 	bl	8014960 <malloc>
 8002290:	4603      	mov	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fe33 	bl	8001f00 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2211      	movs	r2, #17
 800229e:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	3302      	adds	r3, #2
 80022a4:	2212      	movs	r2, #18
 80022a6:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	3304      	adds	r3, #4
 80022ac:	2213      	movs	r2, #19
 80022ae:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3306      	adds	r3, #6
 80022b4:	2214      	movs	r2, #20
 80022b6:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	22a0      	movs	r2, #160	; 0xa0
 80022bc:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3302      	adds	r3, #2
 80022c2:	22a1      	movs	r2, #161	; 0xa1
 80022c4:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3304      	adds	r3, #4
 80022ca:	22a2      	movs	r2, #162	; 0xa2
 80022cc:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3306      	adds	r3, #6
 80022d2:	22a3      	movs	r2, #163	; 0xa3
 80022d4:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3308      	adds	r3, #8
 80022da:	22a4      	movs	r2, #164	; 0xa4
 80022dc:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	330a      	adds	r3, #10
 80022e2:	22a5      	movs	r2, #165	; 0xa5
 80022e4:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	330c      	adds	r3, #12
 80022ea:	22a6      	movs	r2, #166	; 0xa6
 80022ec:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	330e      	adds	r3, #14
 80022f2:	22a7      	movs	r2, #167	; 0xa7
 80022f4:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3310      	adds	r3, #16
 80022fa:	22a8      	movs	r2, #168	; 0xa8
 80022fc:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	22b0      	movs	r2, #176	; 0xb0
 8002302:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	3302      	adds	r3, #2
 8002308:	22b1      	movs	r2, #177	; 0xb1
 800230a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	3304      	adds	r3, #4
 8002310:	22b2      	movs	r2, #178	; 0xb2
 8002312:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3306      	adds	r3, #6
 8002318:	22b3      	movs	r2, #179	; 0xb3
 800231a:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	22cc      	movs	r2, #204	; 0xcc
 8002320:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	22cc      	movs	r2, #204	; 0xcc
 8002328:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800232a:	4ba5      	ldr	r3, [pc, #660]	; (80025c0 <sample_hk+0x364>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29a      	uxth	r2, r3
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3302      	adds	r3, #2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800233a:	4ba1      	ldr	r3, [pc, #644]	; (80025c0 <sample_hk+0x364>)
 800233c:	881a      	ldrh	r2, [r3, #0]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3303      	adds	r3, #3
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3302      	adds	r3, #2
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29a      	uxth	r2, r3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3304      	adds	r3, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	3302      	adds	r3, #2
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3305      	adds	r3, #5
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29a      	uxth	r2, r3
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3306      	adds	r3, #6
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3307      	adds	r3, #7
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002388:	121a      	asrs	r2, r3, #8
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3308      	adds	r3, #8
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3309      	adds	r3, #9
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3302      	adds	r3, #2
 80023a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a8:	121a      	asrs	r2, r3, #8
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	330a      	adds	r3, #10
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3302      	adds	r3, #2
 80023b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	330b      	adds	r3, #11
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	3304      	adds	r3, #4
 80023c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ca:	121a      	asrs	r2, r3, #8
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	330c      	adds	r3, #12
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	3304      	adds	r3, #4
 80023d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	330d      	adds	r3, #13
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	3306      	adds	r3, #6
 80023e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ec:	121a      	asrs	r2, r3, #8
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	330e      	adds	r3, #14
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	3306      	adds	r3, #6
 80023fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	330f      	adds	r3, #15
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29a      	uxth	r2, r3
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3310      	adds	r3, #16
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	881a      	ldrh	r2, [r3, #0]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3311      	adds	r3, #17
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3302      	adds	r3, #2
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29a      	uxth	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3312      	adds	r3, #18
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3302      	adds	r3, #2
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3313      	adds	r3, #19
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3304      	adds	r3, #4
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29a      	uxth	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	3314      	adds	r3, #20
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3304      	adds	r3, #4
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3315      	adds	r3, #21
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3306      	adds	r3, #6
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	b29a      	uxth	r2, r3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3316      	adds	r3, #22
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3306      	adds	r3, #6
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3317      	adds	r3, #23
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	330c      	adds	r3, #12
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b29a      	uxth	r2, r3
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3318      	adds	r3, #24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	330c      	adds	r3, #12
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3319      	adds	r3, #25
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3306      	adds	r3, #6
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	331a      	adds	r3, #26
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3306      	adds	r3, #6
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	331b      	adds	r3, #27
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3304      	adds	r3, #4
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	331c      	adds	r3, #28
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3304      	adds	r3, #4
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	331d      	adds	r3, #29
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	330e      	adds	r3, #14
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	331e      	adds	r3, #30
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	330e      	adds	r3, #14
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	331f      	adds	r3, #31
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3310      	adds	r3, #16
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	b29a      	uxth	r2, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	3320      	adds	r3, #32
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3310      	adds	r3, #16
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3321      	adds	r3, #33	; 0x21
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3308      	adds	r3, #8
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	b29a      	uxth	r2, r3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3322      	adds	r3, #34	; 0x22
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3308      	adds	r3, #8
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3323      	adds	r3, #35	; 0x23
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	330a      	adds	r3, #10
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29a      	uxth	r2, r3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3324      	adds	r3, #36	; 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	330a      	adds	r3, #10
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3325      	adds	r3, #37	; 0x25
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3326      	adds	r3, #38	; 0x26
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3327      	adds	r3, #39	; 0x27
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	7852      	ldrb	r2, [r2, #1]
 8002574:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3328      	adds	r3, #40	; 0x28
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	7892      	ldrb	r2, [r2, #2]
 800257e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3329      	adds	r3, #41	; 0x29
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	78d2      	ldrb	r2, [r2, #3]
 8002588:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	332a      	adds	r3, #42	; 0x2a
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	7912      	ldrb	r2, [r2, #4]
 8002592:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	332b      	adds	r3, #43	; 0x2b
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	7952      	ldrb	r2, [r2, #5]
 800259c:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	332c      	adds	r3, #44	; 0x2c
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	7992      	ldrb	r2, [r2, #6]
 80025a6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	332d      	adds	r3, #45	; 0x2d
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	79d2      	ldrb	r2, [r2, #7]
 80025b0:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	222e      	movs	r2, #46	; 0x2e
 80025b6:	69f9      	ldr	r1, [r7, #28]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fce7 	bl	8001f8c <create_packet>
 80025be:	e001      	b.n	80025c4 <sample_hk+0x368>
 80025c0:	2400067c 	.word	0x2400067c
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <sample_hk+0x39c>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	1d39      	adds	r1, r7, #4
 80025ca:	2300      	movs	r3, #0
 80025cc:	2200      	movs	r2, #0
 80025ce:	f00f f8af 	bl	8011730 <osMessageQueuePut>
	free(buffer);
 80025d2:	69f8      	ldr	r0, [r7, #28]
 80025d4:	f012 f9cc 	bl	8014970 <free>
	free(hk_i2c);
 80025d8:	69b8      	ldr	r0, [r7, #24]
 80025da:	f012 f9c9 	bl	8014970 <free>
	free(hk_adc1);
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f012 f9c6 	bl	8014970 <free>
	free(hk_adc3);
 80025e4:	6938      	ldr	r0, [r7, #16]
 80025e6:	f012 f9c3 	bl	8014970 <free>
	free(timestamp);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f012 f9c0 	bl	8014970 <free>
}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24000674 	.word	0x24000674

080025fc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <PMT_init+0x38>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260c:	2200      	movs	r2, #0
 800260e:	2101      	movs	r1, #1
 8002610:	f00e ffb4 	bl	801157c <osEventFlagsWait>
		if(PMT_ON){
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <PMT_init+0x3c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <PMT_init+0x30>
	    sample_pmt();
 800261c:	f7ff fcd8 	bl	8001fd0 <sample_pmt>
		pmt_seq++;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <PMT_init+0x40>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <PMT_init+0x40>)
 800262a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800262c:	f00e fee8 	bl	8011400 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002630:	e7e8      	b.n	8002604 <PMT_init+0x8>
 8002632:	bf00      	nop
 8002634:	24000684 	.word	0x24000684
 8002638:	2400067e 	.word	0x2400067e
 800263c:	24000678 	.word	0x24000678

08002640 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <ERPA_init+0x38>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002650:	2200      	movs	r2, #0
 8002652:	2102      	movs	r1, #2
 8002654:	f00e ff92 	bl	801157c <osEventFlagsWait>
	  if (ERPA_ON)
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <ERPA_init+0x3c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8002660:	f7ff fd42 	bl	80020e8 <sample_erpa>
		erpa_seq++;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <ERPA_init+0x40>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <ERPA_init+0x40>)
 800266e:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002670:	f00e fec6 	bl	8011400 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002674:	e7e8      	b.n	8002648 <ERPA_init+0x8>
 8002676:	bf00      	nop
 8002678:	24000684 	.word	0x24000684
 800267c:	2400067f 	.word	0x2400067f
 8002680:	2400067a 	.word	0x2400067a

08002684 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HK_init+0x38>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002694:	2200      	movs	r2, #0
 8002696:	2104      	movs	r1, #4
 8002698:	f00e ff70 	bl	801157c <osEventFlagsWait>
	  if(HK_ON)
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HK_init+0x3c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HK_init+0x30>
	  {
	    sample_hk();
 80026a4:	f7ff fdda 	bl	800225c <sample_hk>
		hk_seq++;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HK_init+0x40>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HK_init+0x40>)
 80026b2:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 80026b4:	f00e fea4 	bl	8011400 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026b8:	e7e8      	b.n	800268c <HK_init+0x8>
 80026ba:	bf00      	nop
 80026bc:	24000684 	.word	0x24000684
 80026c0:	24000680 	.word	0x24000680
 80026c4:	2400067c 	.word	0x2400067c

080026c8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80026d0:	2201      	movs	r2, #1
 80026d2:	4904      	ldr	r1, [pc, #16]	; (80026e4 <UART_RX_init+0x1c>)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <UART_RX_init+0x20>)
 80026d6:	f00c fa23 	bl	800eb20 <HAL_UART_Receive_IT>
		osDelay(5);
 80026da:	2005      	movs	r0, #5
 80026dc:	f00e feb0 	bl	8011440 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80026e0:	e7f6      	b.n	80026d0 <UART_RX_init+0x8>
 80026e2:	bf00      	nop
 80026e4:	24000688 	.word	0x24000688
 80026e8:	240005cc 	.word	0x240005cc

080026ec <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <UART_TX_init+0x50>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	f107 010c 	add.w	r1, r7, #12
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002700:	2200      	movs	r2, #0
 8002702:	f00f f875 	bl	80117f0 <osMessageQueueGet>
 8002706:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d113      	bne.n	8002736 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <UART_TX_init+0x50>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f00f f8ca 	bl	80118ac <osMessageQueueGetCount>
 8002718:	4603      	mov	r3, r0
 800271a:	4619      	mov	r1, r3
 800271c:	4808      	ldr	r0, [pc, #32]	; (8002740 <UART_TX_init+0x54>)
 800271e:	f012 fa25 	bl	8014b6c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8002722:	68f9      	ldr	r1, [r7, #12]
 8002724:	8a3a      	ldrh	r2, [r7, #16]
 8002726:	2364      	movs	r3, #100	; 0x64
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <UART_TX_init+0x58>)
 800272a:	f00c f8a3 	bl	800e874 <HAL_UART_Transmit>
	       free(msg.array);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4618      	mov	r0, r3
 8002732:	f012 f91d 	bl	8014970 <free>
	   }
	   osThreadYield();
 8002736:	f00e fe63 	bl	8011400 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 800273a:	e7db      	b.n	80026f4 <UART_TX_init+0x8>
 800273c:	24000674 	.word	0x24000674
 8002740:	08015c08 	.word	0x08015c08
 8002744:	240005cc 	.word	0x240005cc

08002748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800275a:	f000 ff1f 	bl	800359c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40001000 	.word	0x40001000

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002774:	e7fe      	b.n	8002774 <Error_Handler+0x8>
	...

08002778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_MspInit+0x38>)
 8002780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_MspInit+0x38>)
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_MspInit+0x38>)
 8002790:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	210f      	movs	r1, #15
 80027a0:	f06f 0001 	mvn.w	r0, #1
 80027a4:	f002 fc08 	bl	8004fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58024400 	.word	0x58024400

080027b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a7b      	ldr	r2, [pc, #492]	; (80029c0 <HAL_ADC_MspInit+0x20c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	f040 8091 	bne.w	80028fa <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027d8:	4b7a      	ldr	r3, [pc, #488]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 80027da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027de:	4a79      	ldr	r2, [pc, #484]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027e8:	4b76      	ldr	r3, [pc, #472]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 80027ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fc:	4a71      	ldr	r2, [pc, #452]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002806:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	4b6b      	ldr	r3, [pc, #428]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002838:	4a62      	ldr	r2, [pc, #392]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002842:	4b60      	ldr	r3, [pc, #384]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002850:	2333      	movs	r3, #51	; 0x33
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002854:	2303      	movs	r3, #3
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	4859      	ldr	r0, [pc, #356]	; (80029c8 <HAL_ADC_MspInit+0x214>)
 8002864:	f005 fe12 	bl	800848c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002868:	23ce      	movs	r3, #206	; 0xce
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286c:	2303      	movs	r3, #3
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	4854      	ldr	r0, [pc, #336]	; (80029cc <HAL_ADC_MspInit+0x218>)
 800287c:	f005 fe06 	bl	800848c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002880:	2303      	movs	r3, #3
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002884:	2303      	movs	r3, #3
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4619      	mov	r1, r3
 8002892:	484f      	ldr	r0, [pc, #316]	; (80029d0 <HAL_ADC_MspInit+0x21c>)
 8002894:	f005 fdfa 	bl	800848c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002898:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 800289a:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_ADC_MspInit+0x224>)
 800289c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800289e:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028a0:	2209      	movs	r2, #9
 80028a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a4:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028b0:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028b8:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028c0:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028c8:	4b42      	ldr	r3, [pc, #264]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028d0:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d6:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028dc:	483d      	ldr	r0, [pc, #244]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028de:	f002 ff99 	bl	8005814 <HAL_DMA_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80028e8:	f7ff ff40 	bl	800276c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a39      	ldr	r2, [pc, #228]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80028f2:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_ADC_MspInit+0x220>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80028f8:	e05e      	b.n	80029b8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <HAL_ADC_MspInit+0x228>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d159      	bne.n	80029b8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290a:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 800290c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_ADC_MspInit+0x210>)
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002940:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002944:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002948:	f000 fe54 	bl	80035f4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800294c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002950:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002954:	f000 fe4e 	bl	80035f4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_ADC_MspInit+0x230>)
 800295c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 8002960:	2273      	movs	r2, #115	; 0x73
 8002962:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 800296c:	2200      	movs	r2, #0
 800296e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 8002972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002976:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 800297a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 8002982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002986:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 800298a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 8002998:	2200      	movs	r2, #0
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800299c:	4810      	ldr	r0, [pc, #64]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 800299e:	f002 ff39 	bl	8005814 <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80029a8:	f7ff fee0 	bl	800276c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_ADC_MspInit+0x22c>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029b8:	bf00      	nop
 80029ba:	3738      	adds	r7, #56	; 0x38
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000
 80029c4:	58024400 	.word	0x58024400
 80029c8:	58020800 	.word	0x58020800
 80029cc:	58020000 	.word	0x58020000
 80029d0:	58020400 	.word	0x58020400
 80029d4:	240001e4 	.word	0x240001e4
 80029d8:	40020010 	.word	0x40020010
 80029dc:	58026000 	.word	0x58026000
 80029e0:	2400025c 	.word	0x2400025c
 80029e4:	40020028 	.word	0x40020028

080029e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_DAC_MspInit+0xf0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d161      	bne.n	8002ace <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002a0a:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_DAC_MspInit+0xf4>)
 8002a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a10:	4a32      	ldr	r2, [pc, #200]	; (8002adc <HAL_DAC_MspInit+0xf4>)
 8002a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a1a:	4b30      	ldr	r3, [pc, #192]	; (8002adc <HAL_DAC_MspInit+0xf4>)
 8002a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <HAL_DAC_MspInit+0xf4>)
 8002a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <HAL_DAC_MspInit+0xf4>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <HAL_DAC_MspInit+0xf4>)
 8002a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a46:	2310      	movs	r3, #16
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <HAL_DAC_MspInit+0xf8>)
 8002a5a:	f005 fd17 	bl	800848c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a60:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <HAL_DAC_MspInit+0x100>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a66:	2243      	movs	r2, #67	; 0x43
 8002a68:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a84:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002aa2:	4810      	ldr	r0, [pc, #64]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002aa4:	f002 feb6 	bl	8005814 <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002aae:	f7ff fe5d 	bl	800276c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_DAC_MspInit+0xfc>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2105      	movs	r1, #5
 8002ac2:	2036      	movs	r0, #54	; 0x36
 8002ac4:	f002 fa78 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ac8:	2036      	movs	r0, #54	; 0x36
 8002aca:	f002 fa8f 	bl	8004fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40007400 	.word	0x40007400
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	58020000 	.word	0x58020000
 8002ae4:	240002e8 	.word	0x240002e8
 8002ae8:	40020088 	.word	0x40020088

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0ba      	sub	sp, #232	; 0xe8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	22c0      	movs	r2, #192	; 0xc0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f011 ff45 	bl	801499c <memset>
  if(hi2c->Instance==I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <HAL_I2C_MspInit+0xc8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d146      	bne.n	8002baa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b1c:	f04f 0208 	mov.w	r2, #8
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	4618      	mov	r0, r3
 8002b34:	f007 f822 	bl	8009b7c <HAL_RCCEx_PeriphCLKConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b3e:	f7ff fe15 	bl	800276c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_I2C_MspInit+0xcc>)
 8002b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_I2C_MspInit+0xcc>)
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b52:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_I2C_MspInit+0xcc>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b68:	2312      	movs	r3, #18
 8002b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b84:	4619      	mov	r1, r3
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <HAL_I2C_MspInit+0xd0>)
 8002b88:	f005 fc80 	bl	800848c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_I2C_MspInit+0xcc>)
 8002b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_I2C_MspInit+0xcc>)
 8002b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_I2C_MspInit+0xcc>)
 8002b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002baa:	bf00      	nop
 8002bac:	37e8      	adds	r7, #232	; 0xe8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40005400 	.word	0x40005400
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	58020400 	.word	0x58020400

08002bc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0b2      	sub	sp, #200	; 0xc8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	22c0      	movs	r2, #192	; 0xc0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f011 fee3 	bl	801499c <memset>
  if(hrtc->Instance==RTC)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_RTC_MspInit+0x5c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d119      	bne.n	8002c14 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002be0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf4:	f107 0308 	add.w	r3, r7, #8
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 ffbf 	bl	8009b7c <HAL_RCCEx_PeriphCLKConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002c04:	f7ff fdb2 	bl	800276c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RTC_MspInit+0x60>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_RTC_MspInit+0x60>)
 8002c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c14:	bf00      	nop
 8002c16:	37c8      	adds	r7, #200	; 0xc8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	58004000 	.word	0x58004000
 8002c20:	58024400 	.word	0x58024400

08002c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b0bc      	sub	sp, #240	; 0xf0
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c3c:	f107 0318 	add.w	r3, r7, #24
 8002c40:	22c0      	movs	r2, #192	; 0xc0
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f011 fea9 	bl	801499c <memset>
  if(hspi->Instance==SPI1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_SPI_MspInit+0x15c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d145      	bne.n	8002ce0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f107 0318 	add.w	r3, r7, #24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f006 ff87 	bl	8009b7c <HAL_RCCEx_PeriphCLKConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002c74:	f7ff fd7a 	bl	800276c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c7e:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9c:	4a39      	ldr	r2, [pc, #228]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002cb4:	2318      	movs	r3, #24
 8002cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ccc:	2305      	movs	r3, #5
 8002cce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	482b      	ldr	r0, [pc, #172]	; (8002d88 <HAL_SPI_MspInit+0x164>)
 8002cda:	f005 fbd7 	bl	800848c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cde:	e04a      	b.n	8002d76 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <HAL_SPI_MspInit+0x168>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d145      	bne.n	8002d76 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cfa:	f107 0318 	add.w	r3, r7, #24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f006 ff3c 	bl	8009b7c <HAL_RCCEx_PeriphCLKConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002d0a:	f7ff fd2f 	bl	800276c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_SPI_MspInit+0x160>)
 8002d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d64:	2305      	movs	r3, #5
 8002d66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_SPI_MspInit+0x164>)
 8002d72:	f005 fb8b 	bl	800848c <HAL_GPIO_Init>
}
 8002d76:	bf00      	nop
 8002d78:	37f0      	adds	r7, #240	; 0xf0
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40013000 	.word	0x40013000
 8002d84:	58024400 	.word	0x58024400
 8002d88:	58020400 	.word	0x58020400
 8002d8c:	40003800 	.word	0x40003800

08002d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_TIM_Base_MspInit+0xec>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12f      	bne.n	8002e02 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002da8:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002db2:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2105      	movs	r1, #5
 8002dc4:	2018      	movs	r0, #24
 8002dc6:	f002 f8f7 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002dca:	2018      	movs	r0, #24
 8002dcc:	f002 f90e 	bl	8004fec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	2019      	movs	r0, #25
 8002dd6:	f002 f8ef 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002dda:	2019      	movs	r0, #25
 8002ddc:	f002 f906 	bl	8004fec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2105      	movs	r1, #5
 8002de4:	201a      	movs	r0, #26
 8002de6:	f002 f8e7 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002dea:	201a      	movs	r0, #26
 8002dec:	f002 f8fe 	bl	8004fec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2105      	movs	r1, #5
 8002df4:	201b      	movs	r0, #27
 8002df6:	f002 f8df 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002dfa:	201b      	movs	r0, #27
 8002dfc:	f002 f8f6 	bl	8004fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e00:	e038      	b.n	8002e74 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d117      	bne.n	8002e3c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	201c      	movs	r0, #28
 8002e30:	f002 f8c2 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e34:	201c      	movs	r0, #28
 8002e36:	f002 f8d9 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 8002e3a:	e01b      	b.n	8002e74 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_TIM_Base_MspInit+0xf4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d116      	bne.n	8002e74 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_TIM_Base_MspInit+0xf0>)
 8002e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2105      	movs	r1, #5
 8002e68:	201d      	movs	r0, #29
 8002e6a:	f002 f8a5 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e6e:	201d      	movs	r0, #29
 8002e70:	f002 f8bc 	bl	8004fec <HAL_NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	58024400 	.word	0x58024400
 8002e84:	40000400 	.word	0x40000400

08002e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_TIM_MspPostInit+0xb8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d120      	bne.n	8002eec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4818      	ldr	r0, [pc, #96]	; (8002f48 <HAL_TIM_MspPostInit+0xc0>)
 8002ee6:	f005 fad1 	bl	800848c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002eea:	e024      	b.n	8002f36 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d11f      	bne.n	8002f36 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_TIM_MspPostInit+0xbc>)
 8002f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f26:	2301      	movs	r3, #1
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4806      	ldr	r0, [pc, #24]	; (8002f4c <HAL_TIM_MspPostInit+0xc4>)
 8002f32:	f005 faab 	bl	800848c <HAL_GPIO_Init>
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58020000 	.word	0x58020000
 8002f4c:	58020400 	.word	0x58020400

08002f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0ba      	sub	sp, #232	; 0xe8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	22c0      	movs	r2, #192	; 0xc0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f011 fd13 	bl	801499c <memset>
  if(huart->Instance==USART1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <HAL_UART_MspInit+0xd8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d14e      	bne.n	800301e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f80:	f04f 0201 	mov.w	r2, #1
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f92:	f107 0310 	add.w	r3, r7, #16
 8002f96:	4618      	mov	r0, r3
 8002f98:	f006 fdf0 	bl	8009b7c <HAL_RCCEx_PeriphCLKConfig>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fa2:	f7ff fbe3 	bl	800276c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_UART_MspInit+0xdc>)
 8002fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_UART_MspInit+0xdc>)
 8002fae:	f043 0310 	orr.w	r3, r3, #16
 8002fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_UART_MspInit+0xdc>)
 8002fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <HAL_UART_MspInit+0xdc>)
 8002fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_UART_MspInit+0xdc>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_UART_MspInit+0xdc>)
 8002fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fe2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003002:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003006:	4619      	mov	r1, r3
 8003008:	4809      	ldr	r0, [pc, #36]	; (8003030 <HAL_UART_MspInit+0xe0>)
 800300a:	f005 fa3f 	bl	800848c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2105      	movs	r1, #5
 8003012:	2025      	movs	r0, #37	; 0x25
 8003014:	f001 ffd0 	bl	8004fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003018:	2025      	movs	r0, #37	; 0x25
 800301a:	f001 ffe7 	bl	8004fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800301e:	bf00      	nop
 8003020:	37e8      	adds	r7, #232	; 0xe8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40011000 	.word	0x40011000
 800302c:	58024400 	.word	0x58024400
 8003030:	58020000 	.word	0x58020000

08003034 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b090      	sub	sp, #64	; 0x40
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d827      	bhi.n	8003092 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003042:	2200      	movs	r2, #0
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	2036      	movs	r0, #54	; 0x36
 8003048:	f001 ffb6 	bl	8004fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800304c:	2036      	movs	r0, #54	; 0x36
 800304e:	f001 ffcd 	bl	8004fec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003052:	4a29      	ldr	r2, [pc, #164]	; (80030f8 <HAL_InitTick+0xc4>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_InitTick+0xc8>)
 800305a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305e:	4a27      	ldr	r2, [pc, #156]	; (80030fc <HAL_InitTick+0xc8>)
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003068:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_InitTick+0xc8>)
 800306a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003076:	f107 0210 	add.w	r2, r7, #16
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f006 fd39 	bl	8009af8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_InitTick+0x6a>
 8003090:	e001      	b.n	8003096 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e02b      	b.n	80030ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003096:	f006 fd03 	bl	8009aa0 <HAL_RCC_GetPCLK1Freq>
 800309a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800309c:	e004      	b.n	80030a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800309e:	f006 fcff 	bl	8009aa0 <HAL_RCC_GetPCLK1Freq>
 80030a2:	4603      	mov	r3, r0
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030aa:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_InitTick+0xcc>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0c9b      	lsrs	r3, r3, #18
 80030b2:	3b01      	subs	r3, #1
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_InitTick+0xd0>)
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <HAL_InitTick+0xd4>)
 80030ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_InitTick+0xd0>)
 80030be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80030c4:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <HAL_InitTick+0xd0>)
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_InitTick+0xd0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_InitTick+0xd0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80030d6:	480b      	ldr	r0, [pc, #44]	; (8003104 <HAL_InitTick+0xd0>)
 80030d8:	f009 feaf 	bl	800ce3a <HAL_TIM_Base_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030e2:	4808      	ldr	r0, [pc, #32]	; (8003104 <HAL_InitTick+0xd0>)
 80030e4:	f009 ff98 	bl	800d018 <HAL_TIM_Base_Start_IT>
 80030e8:	4603      	mov	r3, r0
 80030ea:	e000      	b.n	80030ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3740      	adds	r7, #64	; 0x40
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	24000090 	.word	0x24000090
 80030fc:	58024400 	.word	0x58024400
 8003100:	431bde83 	.word	0x431bde83
 8003104:	24000728 	.word	0x24000728
 8003108:	40001000 	.word	0x40001000

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003110:	e7fe      	b.n	8003110 <NMI_Handler+0x4>

08003112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <HardFault_Handler+0x4>

08003118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <MemManage_Handler+0x4>

0800311e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <BusFault_Handler+0x4>

08003124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <UsageFault_Handler+0x4>

0800312a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <DMA1_Stream0_IRQHandler+0x10>)
 800313e:	f003 fe93 	bl	8006e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	240001e4 	.word	0x240001e4

0800314c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <DMA1_Stream1_IRQHandler+0x10>)
 8003152:	f003 fe89 	bl	8006e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2400025c 	.word	0x2400025c

08003160 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Stream5_IRQHandler+0x10>)
 8003166:	f003 fe7f 	bl	8006e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	240002e8 	.word	0x240002e8

08003174 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <TIM1_BRK_IRQHandler+0x10>)
 800317a:	f00a fa8f 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	240004e8 	.word	0x240004e8

08003188 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <TIM1_UP_IRQHandler+0x10>)
 800318e:	f00a fa85 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	240004e8 	.word	0x240004e8

0800319c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <TIM1_TRG_COM_IRQHandler+0x10>)
 80031a2:	f00a fa7b 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	240004e8 	.word	0x240004e8

080031b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <TIM1_CC_IRQHandler+0x10>)
 80031b6:	f00a fa71 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	240004e8 	.word	0x240004e8

080031c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <TIM2_IRQHandler+0x10>)
 80031ca:	f00a fa67 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000534 	.word	0x24000534

080031d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <TIM3_IRQHandler+0x10>)
 80031de:	f00a fa5d 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	24000580 	.word	0x24000580

080031ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <USART1_IRQHandler+0x10>)
 80031f2:	f00b fce1 	bl	800ebb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	240005cc 	.word	0x240005cc

08003200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <TIM6_DAC_IRQHandler+0x20>)
 8003206:	791b      	ldrb	r3, [r3, #4]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800320e:	4804      	ldr	r0, [pc, #16]	; (8003220 <TIM6_DAC_IRQHandler+0x20>)
 8003210:	f002 f881 	bl	8005316 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <TIM6_DAC_IRQHandler+0x24>)
 8003216:	f00a fa41 	bl	800d69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	240002d4 	.word	0x240002d4
 8003224:	24000728 	.word	0x24000728

08003228 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <ITM_SendChar+0x48>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <ITM_SendChar+0x48>)
 8003238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <ITM_SendChar+0x4c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <ITM_SendChar+0x4c>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800324a:	bf00      	nop
 800324c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f8      	beq.n	800324c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800325a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000edfc 	.word	0xe000edfc
 8003274:	e0000e00 	.word	0xe0000e00

08003278 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e00a      	b.n	80032a0 <_read+0x28>
		*ptr++ = __io_getchar();
 800328a:	f3af 8000 	nop.w
 800328e:	4601      	mov	r1, r0
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	60ba      	str	r2, [r7, #8]
 8003296:	b2ca      	uxtb	r2, r1
 8003298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dbf0      	blt.n	800328a <_read+0x12>
	}

	return len;
 80032a8:	687b      	ldr	r3, [r7, #4]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e009      	b.n	80032d8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	60ba      	str	r2, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ffab 	bl	8003228 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	dbf1      	blt.n	80032c4 <_write+0x12>
	}
	return len;
 80032e0:	687b      	ldr	r3, [r7, #4]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <_close>:

int _close(int file) {
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <_fstat>:

int _fstat(int file, struct stat *st) {
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003312:	605a      	str	r2, [r3, #4]
	return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_isatty>:

int _isatty(int file) {
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003370:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <_sbrk+0x64>)
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <_sbrk+0x68>)
 8003374:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <_sbrk+0x40>
		errno = ENOMEM;
 8003384:	f011 fac2 	bl	801490c <__errno>
 8003388:	4603      	mov	r3, r0
 800338a:	220c      	movs	r2, #12
 800338c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003392:	e009      	b.n	80033a8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <_sbrk+0x64>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <_sbrk+0x64>)
 80033a4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	24080000 	.word	0x24080000
 80033b4:	00000400 	.word	0x00000400
 80033b8:	24000774 	.word	0x24000774
 80033bc:	240050e0 	.word	0x240050e0

080033c0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80033c4:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <SystemInit+0xe4>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	4a36      	ldr	r2, [pc, #216]	; (80034a4 <SystemInit+0xe4>)
 80033cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033d4:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <SystemInit+0xe8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d807      	bhi.n	80033f0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033e0:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <SystemInit+0xe8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 030f 	bic.w	r3, r3, #15
 80033e8:	4a2f      	ldr	r2, [pc, #188]	; (80034a8 <SystemInit+0xe8>)
 80033ea:	f043 0307 	orr.w	r3, r3, #7
 80033ee:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033f0:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <SystemInit+0xec>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <SystemInit+0xec>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <SystemInit+0xec>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <SystemInit+0xec>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4929      	ldr	r1, [pc, #164]	; (80034ac <SystemInit+0xec>)
 8003408:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <SystemInit+0xf0>)
 800340a:	4013      	ands	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <SystemInit+0xe8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <SystemInit+0xe8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <SystemInit+0xe8>)
 8003424:	f043 0307 	orr.w	r3, r3, #7
 8003428:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <SystemInit+0xec>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <SystemInit+0xec>)
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <SystemInit+0xec>)
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <SystemInit+0xec>)
 800343e:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <SystemInit+0xf4>)
 8003440:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003442:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <SystemInit+0xec>)
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <SystemInit+0xf8>)
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <SystemInit+0xec>)
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <SystemInit+0xfc>)
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800344e:	4b17      	ldr	r3, [pc, #92]	; (80034ac <SystemInit+0xec>)
 8003450:	2200      	movs	r2, #0
 8003452:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003454:	4b15      	ldr	r3, [pc, #84]	; (80034ac <SystemInit+0xec>)
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <SystemInit+0xfc>)
 8003458:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <SystemInit+0xec>)
 800345c:	2200      	movs	r2, #0
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <SystemInit+0xec>)
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <SystemInit+0xfc>)
 8003464:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <SystemInit+0xec>)
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <SystemInit+0xec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <SystemInit+0xec>)
 8003472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003476:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <SystemInit+0xec>)
 800347a:	2200      	movs	r2, #0
 800347c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <SystemInit+0x100>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <SystemInit+0x104>)
 8003484:	4013      	ands	r3, r2
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348a:	d202      	bcs.n	8003492 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <SystemInit+0x108>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <SystemInit+0x10c>)
 8003494:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00
 80034a8:	52002000 	.word	0x52002000
 80034ac:	58024400 	.word	0x58024400
 80034b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80034b4:	02020200 	.word	0x02020200
 80034b8:	01ff0000 	.word	0x01ff0000
 80034bc:	01010280 	.word	0x01010280
 80034c0:	5c001000 	.word	0x5c001000
 80034c4:	ffff0000 	.word	0xffff0000
 80034c8:	51008108 	.word	0x51008108
 80034cc:	52004000 	.word	0x52004000

080034d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034d4:	f7ff ff74 	bl	80033c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034d8:	480c      	ldr	r0, [pc, #48]	; (800350c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034da:	490d      	ldr	r1, [pc, #52]	; (8003510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e0:	e002      	b.n	80034e8 <LoopCopyDataInit>

080034e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e6:	3304      	adds	r3, #4

080034e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034ec:	d3f9      	bcc.n	80034e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f0:	4c0a      	ldr	r4, [pc, #40]	; (800351c <LoopFillZerobss+0x22>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f4:	e001      	b.n	80034fa <LoopFillZerobss>

080034f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f8:	3204      	adds	r2, #4

080034fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034fc:	d3fb      	bcc.n	80034f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034fe:	f011 fa0b 	bl	8014918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003502:	f7fd fd3d 	bl	8000f80 <main>
  bx  lr
 8003506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003508:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800350c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003510:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003514:	08015dd4 	.word	0x08015dd4
  ldr r2, =_sbss
 8003518:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800351c:	240050dc 	.word	0x240050dc

08003520 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003520:	e7fe      	b.n	8003520 <ADC3_IRQHandler>
	...

08003524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352a:	2003      	movs	r0, #3
 800352c:	f001 fd39 	bl	8004fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003530:	f006 f90c 	bl	800974c <HAL_RCC_GetSysClockFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <HAL_Init+0x68>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	4913      	ldr	r1, [pc, #76]	; (8003590 <HAL_Init+0x6c>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
 800354c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800354e:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_Init+0x68>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_Init+0x6c>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <HAL_Init+0x70>)
 8003566:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003568:	4a0b      	ldr	r2, [pc, #44]	; (8003598 <HAL_Init+0x74>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800356e:	2005      	movs	r0, #5
 8003570:	f7ff fd60 	bl	8003034 <HAL_InitTick>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e002      	b.n	8003584 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800357e:	f7ff f8fb 	bl	8002778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	58024400 	.word	0x58024400
 8003590:	08015cec 	.word	0x08015cec
 8003594:	2400008c 	.word	0x2400008c
 8003598:	24000088 	.word	0x24000088

0800359c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_IncTick+0x20>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_IncTick+0x24>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4413      	add	r3, r2
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_IncTick+0x24>)
 80035ae:	6013      	str	r3, [r2, #0]
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	24000094 	.word	0x24000094
 80035c0:	24000778 	.word	0x24000778

080035c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return uwTick;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_GetTick+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	24000778 	.word	0x24000778

080035dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_GetREVID+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0c1b      	lsrs	r3, r3, #16
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	5c001000 	.word	0x5c001000

080035f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	4904      	ldr	r1, [pc, #16]	; (800361c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	58000400 	.word	0x58000400

08003620 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	609a      	str	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	430b      	orrs	r3, r1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	611a      	str	r2, [r3, #16]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b087      	sub	sp, #28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3360      	adds	r3, #96	; 0x60
 800370a:	461a      	mov	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	431a      	orrs	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]
  }
}
 8003724:	bf00      	nop
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3330      	adds	r3, #48	; 0x30
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	4413      	add	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	211f      	movs	r1, #31
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	401a      	ands	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	f003 011f 	and.w	r1, r3, #31
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	431a      	orrs	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f023 0203 	bic.w	r2, r3, #3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3314      	adds	r3, #20
 80037e4:	461a      	mov	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	0e5b      	lsrs	r3, r3, #25
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0d1b      	lsrs	r3, r3, #20
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2107      	movs	r1, #7
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	401a      	ands	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0318 	and.w	r3, r3, #24
 800384e:	4908      	ldr	r1, [pc, #32]	; (8003870 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003850:	40d9      	lsrs	r1, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	400b      	ands	r3, r1
 8003856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800385a:	431a      	orrs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	000fffff 	.word	0x000fffff

08003874 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 031f 	and.w	r3, r3, #31
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800389e:	4013      	ands	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6093      	str	r3, [r2, #8]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	5fffffc0 	.word	0x5fffffc0

080038b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c8:	d101      	bne.n	80038ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <LL_ADC_EnableInternalRegulator+0x24>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	6fffffc0 	.word	0x6fffffc0

08003904 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003918:	d101      	bne.n	800391e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <LL_ADC_Enable+0x24>)
 800393a:	4013      	ands	r3, r2
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	7fffffc0 	.word	0x7fffffc0

08003954 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <LL_ADC_Disable+0x24>)
 8003962:	4013      	ands	r3, r2
 8003964:	f043 0202 	orr.w	r2, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	7fffffc0 	.word	0x7fffffc0

0800397c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <LL_ADC_IsEnabled+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_ADC_IsEnabled+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d101      	bne.n	80039ba <LL_ADC_IsDisableOngoing+0x18>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <LL_ADC_IsDisableOngoing+0x1a>
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <LL_ADC_REG_StartConversion+0x24>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	7fffffc0 	.word	0x7fffffc0

080039f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d101      	bne.n	8003a08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d101      	bne.n	8003a2e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e18f      	b.n	8003d76 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe fea5 	bl	80027b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff19 	bl	80038b4 <LL_ADC_IsDeepPowerDownEnabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff feff 	bl	8003890 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff34 	bl	8003904 <LL_ADC_IsInternalRegulatorEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff18 	bl	80038dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aac:	4b87      	ldr	r3, [pc, #540]	; (8003ccc <HAL_ADC_Init+0x290>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	099b      	lsrs	r3, r3, #6
 8003ab2:	4a87      	ldr	r2, [pc, #540]	; (8003cd0 <HAL_ADC_Init+0x294>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	3301      	adds	r3, #1
 8003abc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003abe:	e002      	b.n	8003ac6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f9      	bne.n	8003ac0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff17 	bl	8003904 <LL_ADC_IsInternalRegulatorEnabled>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10d      	bne.n	8003af8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f043 0210 	orr.w	r2, r3, #16
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff77 	bl	80039f0 <LL_ADC_REG_IsConversionOngoing>
 8003b02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8129 	bne.w	8003d64 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f040 8125 	bne.w	8003d64 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff24 	bl	800397c <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d136      	bne.n	8003ba8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_ADC_Init+0x298>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_ADC_Init+0x112>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_ADC_Init+0x29c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10e      	bne.n	8003b6c <HAL_ADC_Init+0x130>
 8003b4e:	4861      	ldr	r0, [pc, #388]	; (8003cd4 <HAL_ADC_Init+0x298>)
 8003b50:	f7ff ff14 	bl	800397c <LL_ADC_IsEnabled>
 8003b54:	4604      	mov	r4, r0
 8003b56:	4860      	ldr	r0, [pc, #384]	; (8003cd8 <HAL_ADC_Init+0x29c>)
 8003b58:	f7ff ff10 	bl	800397c <LL_ADC_IsEnabled>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4323      	orrs	r3, r4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e008      	b.n	8003b7e <HAL_ADC_Init+0x142>
 8003b6c:	485b      	ldr	r0, [pc, #364]	; (8003cdc <HAL_ADC_Init+0x2a0>)
 8003b6e:	f7ff ff05 	bl	800397c <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a53      	ldr	r2, [pc, #332]	; (8003cd4 <HAL_ADC_Init+0x298>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_ADC_Init+0x15a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <HAL_ADC_Init+0x29c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Init+0x15e>
 8003b96:	4a52      	ldr	r2, [pc, #328]	; (8003ce0 <HAL_ADC_Init+0x2a4>)
 8003b98:	e000      	b.n	8003b9c <HAL_ADC_Init+0x160>
 8003b9a:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_ADC_Init+0x2a8>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7ff fd3c 	bl	8003620 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ba8:	f7ff fd18 	bl	80035dc <HAL_GetREVID>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d914      	bls.n	8003be0 <HAL_ADC_Init+0x1a4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d110      	bne.n	8003be0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7d5b      	ldrb	r3, [r3, #21]
 8003bc2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bc8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7f1b      	ldrb	r3, [r3, #28]
 8003bd4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bd6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bd8:	f043 030c 	orr.w	r3, r3, #12
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	e00d      	b.n	8003bfc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7d5b      	ldrb	r3, [r3, #21]
 8003be4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bf0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7f1b      	ldrb	r3, [r3, #28]
 8003bf6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7f1b      	ldrb	r3, [r3, #28]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	045b      	lsls	r3, r3, #17
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <HAL_ADC_Init+0x2ac>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fed2 	bl	80039f0 <LL_ADC_REG_IsConversionOngoing>
 8003c4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fedf 	bl	8003a16 <LL_ADC_INJ_IsConversionOngoing>
 8003c58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d15f      	bne.n	8003d20 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d15c      	bne.n	8003d20 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7d1b      	ldrb	r3, [r3, #20]
 8003c6a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <HAL_ADC_Init+0x2b0>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d130      	bne.n	8003cf4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <HAL_ADC_Init+0x2b4>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0411      	lsls	r1, r2, #16
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cae:	4311      	orrs	r1, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	e01c      	b.n	8003d04 <HAL_ADC_Init+0x2c8>
 8003cca:	bf00      	nop
 8003ccc:	24000088 	.word	0x24000088
 8003cd0:	053e2d63 	.word	0x053e2d63
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40022100 	.word	0x40022100
 8003cdc:	58026000 	.word	0x58026000
 8003ce0:	40022300 	.word	0x40022300
 8003ce4:	58026300 	.word	0x58026300
 8003ce8:	fff0c003 	.word	0xfff0c003
 8003cec:	ffffbffc 	.word	0xffffbffc
 8003cf0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fdec 	bl	80048f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d10c      	bne.n	8003d42 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f023 010f 	bic.w	r1, r3, #15
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d40:	e007      	b.n	8003d52 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 020f 	bic.w	r2, r2, #15
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
 8003d62:	e007      	b.n	8003d74 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f043 0210 	orr.w	r2, r3, #16
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd90      	pop	{r4, r7, pc}
 8003d7e:	bf00      	nop

08003d80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a55      	ldr	r2, [pc, #340]	; (8003ee8 <HAL_ADC_Start_DMA+0x168>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_ADC_Start_DMA+0x20>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a54      	ldr	r2, [pc, #336]	; (8003eec <HAL_ADC_Start_DMA+0x16c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_Start_DMA+0x24>
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_ADC_Start_DMA+0x170>)
 8003da2:	e000      	b.n	8003da6 <HAL_ADC_Start_DMA+0x26>
 8003da4:	4b53      	ldr	r3, [pc, #332]	; (8003ef4 <HAL_ADC_Start_DMA+0x174>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fd64 	bl	8003874 <LL_ADC_GetMultimode>
 8003dac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fe1c 	bl	80039f0 <LL_ADC_REG_IsConversionOngoing>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 808c 	bne.w	8003ed8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Start_DMA+0x4e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e087      	b.n	8003ede <HAL_ADC_Start_DMA+0x15e>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d002      	beq.n	8003de8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d170      	bne.n	8003eca <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fc07 	bl	80045fc <ADC_Enable>
 8003dee:	4603      	mov	r3, r0
 8003df0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d163      	bne.n	8003ec0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_ADC_Start_DMA+0x178>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a37      	ldr	r2, [pc, #220]	; (8003eec <HAL_ADC_Start_DMA+0x16c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d002      	beq.n	8003e18 <HAL_ADC_Start_DMA+0x98>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	e000      	b.n	8003e1a <HAL_ADC_Start_DMA+0x9a>
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_ADC_Start_DMA+0x168>)
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d002      	beq.n	8003e28 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f023 0206 	bic.w	r2, r3, #6
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e4c:	e002      	b.n	8003e54 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_ADC_Start_DMA+0x17c>)
 8003e5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_ADC_Start_DMA+0x180>)
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <HAL_ADC_Start_DMA+0x184>)
 8003e6a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	221c      	movs	r2, #28
 8003e72:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0210 	orr.w	r2, r2, #16
 8003e8a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7ff fc89 	bl	80037ae <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f002 f80e 	bl	8005ecc <HAL_DMA_Start_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fd85 	bl	80039c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ebe:	e00d      	b.n	8003edc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003ec8:	e008      	b.n	8003edc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003ed6:	e001      	b.n	8003edc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40022100 	.word	0x40022100
 8003ef0:	40022300 	.word	0x40022300
 8003ef4:	58026300 	.word	0x58026300
 8003ef8:	fffff0fe 	.word	0xfffff0fe
 8003efc:	080047cf 	.word	0x080047cf
 8003f00:	080048a7 	.word	0x080048a7
 8003f04:	080048c3 	.word	0x080048c3

08003f08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b0a1      	sub	sp, #132	; 0x84
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a65      	ldr	r2, [pc, #404]	; (80040f4 <HAL_ADC_ConfigChannel+0x1b0>)
 8003f5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x2a>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e32e      	b.n	80045cc <HAL_ADC_ConfigChannel+0x688>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fd38 	bl	80039f0 <LL_ADC_REG_IsConversionOngoing>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 8313 	bne.w	80045ae <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	db2c      	blt.n	8003fea <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x6a>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	f003 031f 	and.w	r3, r3, #31
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	e016      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x98>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fbe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	e003      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fcc:	fab3 f383 	clz	r3, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	69d1      	ldr	r1, [r2, #28]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f7ff fbad 	bl	8003756 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fcf5 	bl	80039f0 <LL_ADC_REG_IsConversionOngoing>
 8004006:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fd02 	bl	8003a16 <LL_ADC_INJ_IsConversionOngoing>
 8004012:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 80b8 	bne.w	800418c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800401c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 80b4 	bne.w	800418c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	461a      	mov	r2, r3
 8004032:	f7ff fbcf 	bl	80037d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_ADC_ConfigChannel+0x1b4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800403e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004042:	d10b      	bne.n	800405c <HAL_ADC_ConfigChannel+0x118>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	e01d      	b.n	8004098 <HAL_ADC_ConfigChannel+0x154>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x13e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	e00a      	b.n	8004098 <HAL_ADC_ConfigChannel+0x154>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d02c      	beq.n	80040fc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b0:	f7ff faea 	bl	8003688 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6919      	ldr	r1, [r3, #16]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	7e5b      	ldrb	r3, [r3, #25]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x186>
 80040c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80040c8:	e000      	b.n	80040cc <HAL_ADC_ConfigChannel+0x188>
 80040ca:	2300      	movs	r3, #0
 80040cc:	461a      	mov	r2, r3
 80040ce:	f7ff fb14 	bl	80036fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	7e1b      	ldrb	r3, [r3, #24]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d102      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1a4>
 80040e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e6:	e000      	b.n	80040ea <HAL_ADC_ConfigChannel+0x1a6>
 80040e8:	2300      	movs	r3, #0
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7ff faec 	bl	80036c8 <LL_ADC_SetDataRightShift>
 80040f0:	e04c      	b.n	800418c <HAL_ADC_ConfigChannel+0x248>
 80040f2:	bf00      	nop
 80040f4:	47ff0000 	.word	0x47ff0000
 80040f8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	069b      	lsls	r3, r3, #26
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004142:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	069b      	lsls	r3, r3, #26
 8004154:	429a      	cmp	r2, r3
 8004156:	d107      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004166:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	069b      	lsls	r3, r3, #26
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800418a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fbf3 	bl	800397c <LL_ADC_IsEnabled>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8211 	bne.w	80045c0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f7ff fb3e 	bl	800382c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4aa1      	ldr	r2, [pc, #644]	; (800443c <HAL_ADC_ConfigChannel+0x4f8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f040 812e 	bne.w	8004418 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x2a0>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0e9b      	lsrs	r3, r3, #26
 80041d2:	3301      	adds	r3, #1
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2b09      	cmp	r3, #9
 80041da:	bf94      	ite	ls
 80041dc:	2301      	movls	r3, #1
 80041de:	2300      	movhi	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e019      	b.n	8004218 <HAL_ADC_ConfigChannel+0x2d4>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80041fc:	2320      	movs	r3, #32
 80041fe:	e003      	b.n	8004208 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3301      	adds	r3, #1
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2b09      	cmp	r3, #9
 8004210:	bf94      	ite	ls
 8004212:	2301      	movls	r3, #1
 8004214:	2300      	movhi	r3, #0
 8004216:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004218:	2b00      	cmp	r3, #0
 800421a:	d079      	beq.n	8004310 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	2b00      	cmp	r3, #0
 8004226:	d107      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x2f4>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	3301      	adds	r3, #1
 8004230:	069b      	lsls	r3, r3, #26
 8004232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004236:	e015      	b.n	8004264 <HAL_ADC_ConfigChannel+0x320>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004248:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3301      	adds	r3, #1
 800425e:	069b      	lsls	r3, r3, #26
 8004260:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x340>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	3301      	adds	r3, #1
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2101      	movs	r1, #1
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	e017      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x370>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800429c:	2320      	movs	r3, #32
 800429e:	e003      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80042a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	2101      	movs	r1, #1
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	ea42 0103 	orr.w	r1, r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <HAL_ADC_ConfigChannel+0x396>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	051b      	lsls	r3, r3, #20
 80042d8:	e018      	b.n	800430c <HAL_ADC_ConfigChannel+0x3c8>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e003      	b.n	80042fe <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800430c:	430b      	orrs	r3, r1
 800430e:	e07e      	b.n	800440e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_ADC_ConfigChannel+0x3e8>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	0e9b      	lsrs	r3, r3, #26
 8004322:	3301      	adds	r3, #1
 8004324:	069b      	lsls	r3, r3, #26
 8004326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800432a:	e015      	b.n	8004358 <HAL_ADC_ConfigChannel+0x414>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004344:	2320      	movs	r3, #32
 8004346:	e003      	b.n	8004350 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	3301      	adds	r3, #1
 8004352:	069b      	lsls	r3, r3, #26
 8004354:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x434>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0e9b      	lsrs	r3, r3, #26
 800436a:	3301      	adds	r3, #1
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	e017      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x464>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	61bb      	str	r3, [r7, #24]
  return result;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	e003      	b.n	800439c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	ea42 0103 	orr.w	r1, r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x490>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	3301      	adds	r3, #1
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	4613      	mov	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	3b1e      	subs	r3, #30
 80043cc:	051b      	lsls	r3, r3, #20
 80043ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043d2:	e01b      	b.n	800440c <HAL_ADC_ConfigChannel+0x4c8>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	60fb      	str	r3, [r7, #12]
  return result;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80043ec:	2320      	movs	r3, #32
 80043ee:	e003      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f003 021f 	and.w	r2, r3, #31
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	3b1e      	subs	r3, #30
 8004406:	051b      	lsls	r3, r3, #20
 8004408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800440c:	430b      	orrs	r3, r1
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	6892      	ldr	r2, [r2, #8]
 8004412:	4619      	mov	r1, r3
 8004414:	f7ff f9de 	bl	80037d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f280 80cf 	bge.w	80045c0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a06      	ldr	r2, [pc, #24]	; (8004440 <HAL_ADC_ConfigChannel+0x4fc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_ADC_ConfigChannel+0x4f2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a04      	ldr	r2, [pc, #16]	; (8004444 <HAL_ADC_ConfigChannel+0x500>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10a      	bne.n	800444c <HAL_ADC_ConfigChannel+0x508>
 8004436:	4b04      	ldr	r3, [pc, #16]	; (8004448 <HAL_ADC_ConfigChannel+0x504>)
 8004438:	e009      	b.n	800444e <HAL_ADC_ConfigChannel+0x50a>
 800443a:	bf00      	nop
 800443c:	47ff0000 	.word	0x47ff0000
 8004440:	40022000 	.word	0x40022000
 8004444:	40022100 	.word	0x40022100
 8004448:	40022300 	.word	0x40022300
 800444c:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <HAL_ADC_ConfigChannel+0x690>)
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f90c 	bl	800366c <LL_ADC_GetCommonPathInternalCh>
 8004454:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a5f      	ldr	r2, [pc, #380]	; (80045d8 <HAL_ADC_ConfigChannel+0x694>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_ADC_ConfigChannel+0x526>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5d      	ldr	r2, [pc, #372]	; (80045dc <HAL_ADC_ConfigChannel+0x698>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10e      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x544>
 800446a:	485b      	ldr	r0, [pc, #364]	; (80045d8 <HAL_ADC_ConfigChannel+0x694>)
 800446c:	f7ff fa86 	bl	800397c <LL_ADC_IsEnabled>
 8004470:	4604      	mov	r4, r0
 8004472:	485a      	ldr	r0, [pc, #360]	; (80045dc <HAL_ADC_ConfigChannel+0x698>)
 8004474:	f7ff fa82 	bl	800397c <LL_ADC_IsEnabled>
 8004478:	4603      	mov	r3, r0
 800447a:	4323      	orrs	r3, r4
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e008      	b.n	800449a <HAL_ADC_ConfigChannel+0x556>
 8004488:	4855      	ldr	r0, [pc, #340]	; (80045e0 <HAL_ADC_ConfigChannel+0x69c>)
 800448a:	f7ff fa77 	bl	800397c <LL_ADC_IsEnabled>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d07d      	beq.n	800459a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a50      	ldr	r2, [pc, #320]	; (80045e4 <HAL_ADC_ConfigChannel+0x6a0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d130      	bne.n	800450a <HAL_ADC_ConfigChannel+0x5c6>
 80044a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d12b      	bne.n	800450a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a4a      	ldr	r2, [pc, #296]	; (80045e0 <HAL_ADC_ConfigChannel+0x69c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	f040 8081 	bne.w	80045c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a45      	ldr	r2, [pc, #276]	; (80045d8 <HAL_ADC_ConfigChannel+0x694>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_ADC_ConfigChannel+0x58e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a43      	ldr	r2, [pc, #268]	; (80045dc <HAL_ADC_ConfigChannel+0x698>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x592>
 80044d2:	4a45      	ldr	r2, [pc, #276]	; (80045e8 <HAL_ADC_ConfigChannel+0x6a4>)
 80044d4:	e000      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x594>
 80044d6:	4a3f      	ldr	r2, [pc, #252]	; (80045d4 <HAL_ADC_ConfigChannel+0x690>)
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7ff f8b0 	bl	8003646 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e6:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_ADC_ConfigChannel+0x6a8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	4a40      	ldr	r2, [pc, #256]	; (80045f0 <HAL_ADC_ConfigChannel+0x6ac>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	3301      	adds	r3, #1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044fa:	e002      	b.n	8004502 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	3b01      	subs	r3, #1
 8004500:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f9      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004508:	e05a      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <HAL_ADC_ConfigChannel+0x6b0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d11e      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x60e>
 8004514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d119      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <HAL_ADC_ConfigChannel+0x69c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d14b      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <HAL_ADC_ConfigChannel+0x694>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_ADC_ConfigChannel+0x5f8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_ADC_ConfigChannel+0x698>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x5fc>
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <HAL_ADC_ConfigChannel+0x6a4>)
 800453e:	e000      	b.n	8004542 <HAL_ADC_ConfigChannel+0x5fe>
 8004540:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <HAL_ADC_ConfigChannel+0x690>)
 8004542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7ff f87b 	bl	8003646 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004550:	e036      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <HAL_ADC_ConfigChannel+0x6b4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d131      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d12c      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_ADC_ConfigChannel+0x69c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d127      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_ADC_ConfigChannel+0x694>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_ADC_ConfigChannel+0x640>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <HAL_ADC_ConfigChannel+0x698>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x644>
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004586:	e000      	b.n	800458a <HAL_ADC_ConfigChannel+0x646>
 8004588:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <HAL_ADC_ConfigChannel+0x690>)
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff f857 	bl	8003646 <LL_ADC_SetCommonPathInternalCh>
 8004598:	e012      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045ac:	e008      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3784      	adds	r7, #132	; 0x84
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd90      	pop	{r4, r7, pc}
 80045d4:	58026300 	.word	0x58026300
 80045d8:	40022000 	.word	0x40022000
 80045dc:	40022100 	.word	0x40022100
 80045e0:	58026000 	.word	0x58026000
 80045e4:	cb840000 	.word	0xcb840000
 80045e8:	40022300 	.word	0x40022300
 80045ec:	24000088 	.word	0x24000088
 80045f0:	053e2d63 	.word	0x053e2d63
 80045f4:	c7520000 	.word	0xc7520000
 80045f8:	cfb80000 	.word	0xcfb80000

080045fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff f9b7 	bl	800397c <LL_ADC_IsEnabled>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d16e      	bne.n	80046f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	4b38      	ldr	r3, [pc, #224]	; (80046fc <ADC_Enable+0x100>)
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f043 0210 	orr.w	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e05a      	b.n	80046f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f972 	bl	800392c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004648:	f7fe ffbc 	bl	80035c4 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2b      	ldr	r2, [pc, #172]	; (8004700 <ADC_Enable+0x104>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <ADC_Enable+0x66>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <ADC_Enable+0x108>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <ADC_Enable+0x6a>
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <ADC_Enable+0x10c>)
 8004664:	e000      	b.n	8004668 <ADC_Enable+0x6c>
 8004666:	4b29      	ldr	r3, [pc, #164]	; (800470c <ADC_Enable+0x110>)
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f903 	bl	8003874 <LL_ADC_GetMultimode>
 800466e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a23      	ldr	r2, [pc, #140]	; (8004704 <ADC_Enable+0x108>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d002      	beq.n	8004680 <ADC_Enable+0x84>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	e000      	b.n	8004682 <ADC_Enable+0x86>
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <ADC_Enable+0x104>)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	4293      	cmp	r3, r2
 8004688:	d02c      	beq.n	80046e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d130      	bne.n	80046f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004690:	e028      	b.n	80046e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff f970 	bl	800397c <LL_ADC_IsEnabled>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff f940 	bl	800392c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046ac:	f7fe ff8a 	bl	80035c4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d914      	bls.n	80046e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d00d      	beq.n	80046e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	f043 0210 	orr.w	r2, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d1cf      	bne.n	8004692 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	8000003f 	.word	0x8000003f
 8004700:	40022000 	.word	0x40022000
 8004704:	40022100 	.word	0x40022100
 8004708:	40022300 	.word	0x40022300
 800470c:	58026300 	.word	0x58026300

08004710 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f940 	bl	80039a2 <LL_ADC_IsDisableOngoing>
 8004722:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff f927 	bl	800397c <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d047      	beq.n	80047c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d144      	bne.n	80047c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030d 	and.w	r3, r3, #13
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10c      	bne.n	8004762 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff f901 	bl	8003954 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2203      	movs	r2, #3
 8004758:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800475a:	f7fe ff33 	bl	80035c4 <HAL_GetTick>
 800475e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004760:	e029      	b.n	80047b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	f043 0210 	orr.w	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e023      	b.n	80047c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800477e:	f7fe ff21 	bl	80035c4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d914      	bls.n	80047b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	f043 0210 	orr.w	r2, r3, #16
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e007      	b.n	80047c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1dc      	bne.n	800477e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d14b      	bne.n	8004880 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d021      	beq.n	8004846 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe ff92 	bl	8003730 <LL_ADC_REG_IsTriggerSourceSWStart>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d032      	beq.n	8004878 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d12b      	bne.n	8004878 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11f      	bne.n	8004878 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
 8004844:	e018      	b.n	8004878 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d111      	bne.n	8004878 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f043 0201 	orr.w	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fb45 	bl	8003f08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800487e:	e00e      	b.n	800489e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7ff fb4f 	bl	8003f30 <HAL_ADC_ErrorCallback>
}
 8004892:	e004      	b.n	800489e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff fb31 	bl	8003f1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff fb21 	bl	8003f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7a      	ldr	r2, [pc, #488]	; (8004af0 <ADC_ConfigureBoostMode+0x1f8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <ADC_ConfigureBoostMode+0x1c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a79      	ldr	r2, [pc, #484]	; (8004af4 <ADC_ConfigureBoostMode+0x1fc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <ADC_ConfigureBoostMode+0x30>
 8004914:	4b78      	ldr	r3, [pc, #480]	; (8004af8 <ADC_ConfigureBoostMode+0x200>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e008      	b.n	800493a <ADC_ConfigureBoostMode+0x42>
 8004928:	4b74      	ldr	r3, [pc, #464]	; (8004afc <ADC_ConfigureBoostMode+0x204>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01c      	beq.n	8004978 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800493e:	f005 f87f 	bl	8009a40 <HAL_RCC_GetHCLKFreq>
 8004942:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800494c:	d010      	beq.n	8004970 <ADC_ConfigureBoostMode+0x78>
 800494e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004952:	d873      	bhi.n	8004a3c <ADC_ConfigureBoostMode+0x144>
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d002      	beq.n	8004960 <ADC_ConfigureBoostMode+0x68>
 800495a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495e:	d16d      	bne.n	8004a3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	60fb      	str	r3, [r7, #12]
        break;
 800496e:	e068      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	60fb      	str	r3, [r7, #12]
        break;
 8004976:	e064      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004978:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	f006 fb06 	bl	800af90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004984:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800498e:	d051      	beq.n	8004a34 <ADC_ConfigureBoostMode+0x13c>
 8004990:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004994:	d854      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 8004996:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800499a:	d047      	beq.n	8004a2c <ADC_ConfigureBoostMode+0x134>
 800499c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80049a0:	d84e      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049a6:	d03d      	beq.n	8004a24 <ADC_ConfigureBoostMode+0x12c>
 80049a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80049ac:	d848      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b2:	d033      	beq.n	8004a1c <ADC_ConfigureBoostMode+0x124>
 80049b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b8:	d842      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049be:	d029      	beq.n	8004a14 <ADC_ConfigureBoostMode+0x11c>
 80049c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80049c4:	d83c      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049ca:	d01a      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80049d0:	d836      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049d6:	d014      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80049dc:	d830      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d00e      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e8:	d82a      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049ee:	d008      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049f4:	d824      	bhi.n	8004a40 <ADC_ConfigureBoostMode+0x148>
 80049f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049fa:	d002      	beq.n	8004a02 <ADC_ConfigureBoostMode+0x10a>
 80049fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a00:	d11e      	bne.n	8004a40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0c9b      	lsrs	r3, r3, #18
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	60fb      	str	r3, [r7, #12]
        break;
 8004a12:	e016      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
        break;
 8004a1a:	e012      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	60fb      	str	r3, [r7, #12]
        break;
 8004a22:	e00e      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	60fb      	str	r3, [r7, #12]
        break;
 8004a2a:	e00a      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
        break;
 8004a32:	e006      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	60fb      	str	r3, [r7, #12]
        break;
 8004a3a:	e002      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a3c:	bf00      	nop
 8004a3e:	e000      	b.n	8004a42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a40:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004a42:	f7fe fdcb 	bl	80035dc <HAL_GetREVID>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d815      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <ADC_ConfigureBoostMode+0x208>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d908      	bls.n	8004a6a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a66:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a68:	e03e      	b.n	8004ae8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a78:	609a      	str	r2, [r3, #8]
}
 8004a7a:	e035      	b.n	8004ae8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <ADC_ConfigureBoostMode+0x20c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d808      	bhi.n	8004a9c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a98:	609a      	str	r2, [r3, #8]
}
 8004a9a:	e025      	b.n	8004ae8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <ADC_ConfigureBoostMode+0x210>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d80a      	bhi.n	8004aba <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	e016      	b.n	8004ae8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <ADC_ConfigureBoostMode+0x214>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d80a      	bhi.n	8004ad8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	e007      	b.n	8004ae8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ae6:	609a      	str	r2, [r3, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40022000 	.word	0x40022000
 8004af4:	40022100 	.word	0x40022100
 8004af8:	40022300 	.word	0x40022300
 8004afc:	58026300 	.word	0x58026300
 8004b00:	01312d00 	.word	0x01312d00
 8004b04:	005f5e10 	.word	0x005f5e10
 8004b08:	00bebc20 	.word	0x00bebc20
 8004b0c:	017d7840 	.word	0x017d7840

08004b10 <LL_ADC_IsEnabled>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <LL_ADC_IsEnabled+0x18>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <LL_ADC_IsEnabled+0x1a>
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <LL_ADC_StartCalibration>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <LL_ADC_StartCalibration+0x38>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	3ffeffc0 	.word	0x3ffeffc0

08004b74 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b88:	d101      	bne.n	8004b8e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_ADC_REG_IsConversionOngoing>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d101      	bne.n	8004bb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADCEx_Calibration_Start+0x1e>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e04c      	b.n	8004c7c <HAL_ADCEx_Calibration_Start+0xb8>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fd90 	bl	8004710 <ADC_Disable>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d135      	bne.n	8004c66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	f043 0202 	orr.w	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff90 	bl	8004b38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c18:	e014      	b.n	8004c44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d30d      	bcc.n	8004c44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	f023 0312 	bic.w	r3, r3, #18
 8004c30:	f043 0210 	orr.w	r2, r3, #16
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e01b      	b.n	8004c7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff93 	bl	8004b74 <LL_ADC_IsCalibrationOnGoing>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e2      	bne.n	8004c1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f023 0303 	bic.w	r3, r3, #3
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
 8004c64:	e005      	b.n	8004c72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f043 0210 	orr.w	r2, r3, #16
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	ffffeefd 	.word	0xffffeefd
 8004c88:	25c3f800 	.word	0x25c3f800

08004c8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b09f      	sub	sp, #124	; 0x7c
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e0be      	b.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5c      	ldr	r2, [pc, #368]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d102      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cc4:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	e001      	b.n	8004cce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e09d      	b.n	8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff54 	bl	8004b9c <LL_ADC_REG_IsConversionOngoing>
 8004cf4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff4e 	bl	8004b9c <LL_ADC_REG_IsConversionOngoing>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d17f      	bne.n	8004e06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d17c      	bne.n	8004e06 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a47      	ldr	r2, [pc, #284]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a46      	ldr	r2, [pc, #280]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d20:	4b45      	ldr	r3, [pc, #276]	; (8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d22:	e000      	b.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d26:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d039      	beq.n	8004da4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a38      	ldr	r2, [pc, #224]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10e      	bne.n	8004d74 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d56:	4836      	ldr	r0, [pc, #216]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d58:	f7ff feda 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	4835      	ldr	r0, [pc, #212]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d60:	f7ff fed6 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4323      	orrs	r3, r4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e008      	b.n	8004d86 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004d74:	4832      	ldr	r0, [pc, #200]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d76:	f7ff fecb 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d047      	beq.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004da2:	e03a      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10e      	bne.n	8004de2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004dc4:	481a      	ldr	r0, [pc, #104]	; (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dc6:	f7ff fea3 	bl	8004b10 <LL_ADC_IsEnabled>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4819      	ldr	r0, [pc, #100]	; (8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dce:	f7ff fe9f 	bl	8004b10 <LL_ADC_IsEnabled>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4323      	orrs	r3, r4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e008      	b.n	8004df4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004de2:	4817      	ldr	r0, [pc, #92]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004de4:	f7ff fe94 	bl	8004b10 <LL_ADC_IsEnabled>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf0c      	ite	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	2300      	movne	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d010      	beq.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e02:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e04:	e009      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004e18:	e000      	b.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	377c      	adds	r7, #124	; 0x7c
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd90      	pop	{r4, r7, pc}
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40022100 	.word	0x40022100
 8004e38:	40022300 	.word	0x40022300
 8004e3c:	58026300 	.word	0x58026300
 8004e40:	58026000 	.word	0x58026000
 8004e44:	fffff0e0 	.word	0xfffff0e0

08004e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <__NVIC_SetPriorityGrouping+0x40>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e64:	4013      	ands	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <__NVIC_SetPriorityGrouping+0x44>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e76:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <__NVIC_SetPriorityGrouping+0x40>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	60d3      	str	r3, [r2, #12]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000ed00 	.word	0xe000ed00
 8004e8c:	05fa0000 	.word	0x05fa0000

08004e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	f003 0307 	and.w	r3, r3, #7
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	db0b      	blt.n	8004ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	f003 021f 	and.w	r2, r3, #31
 8004ec4:	4907      	ldr	r1, [pc, #28]	; (8004ee4 <__NVIC_EnableIRQ+0x38>)
 8004ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2001      	movs	r0, #1
 8004ece:	fa00 f202 	lsl.w	r2, r0, r2
 8004ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	e000e100 	.word	0xe000e100

08004ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	6039      	str	r1, [r7, #0]
 8004ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db0a      	blt.n	8004f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	490c      	ldr	r1, [pc, #48]	; (8004f34 <__NVIC_SetPriority+0x4c>)
 8004f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f10:	e00a      	b.n	8004f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	4908      	ldr	r1, [pc, #32]	; (8004f38 <__NVIC_SetPriority+0x50>)
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3b04      	subs	r3, #4
 8004f20:	0112      	lsls	r2, r2, #4
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	440b      	add	r3, r1
 8004f26:	761a      	strb	r2, [r3, #24]
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000e100 	.word	0xe000e100
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f1c3 0307 	rsb	r3, r3, #7
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	bf28      	it	cs
 8004f5a:	2304      	movcs	r3, #4
 8004f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d902      	bls.n	8004f6c <NVIC_EncodePriority+0x30>
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3b03      	subs	r3, #3
 8004f6a:	e000      	b.n	8004f6e <NVIC_EncodePriority+0x32>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43da      	mvns	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	401a      	ands	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8e:	43d9      	mvns	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	4313      	orrs	r3, r2
         );
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	; 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff4c 	bl	8004e48 <__NVIC_SetPriorityGrouping>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc6:	f7ff ff63 	bl	8004e90 <__NVIC_GetPriorityGrouping>
 8004fca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	6978      	ldr	r0, [r7, #20]
 8004fd2:	f7ff ffb3 	bl	8004f3c <NVIC_EncodePriority>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ff82 	bl	8004ee8 <__NVIC_SetPriority>
}
 8004fe4:	bf00      	nop
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ff56 	bl	8004eac <__NVIC_EnableIRQ>
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e014      	b.n	8005044 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	791b      	ldrb	r3, [r3, #4]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd fcdc 	bl	80029e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e046      	b.n	80050ee <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	795b      	ldrb	r3, [r3, #5]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_DAC_Start+0x20>
 8005068:	2302      	movs	r3, #2
 800506a:	e040      	b.n	80050ee <HAL_DAC_Start+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2201      	movs	r2, #1
 8005086:	409a      	lsls	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d11d      	bne.n	80050e0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	605a      	str	r2, [r3, #4]
 80050b4:	e014      	b.n	80050e0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2102      	movs	r1, #2
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d107      	bne.n	80050e0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0202 	orr.w	r2, r2, #2
 80050de:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0a2      	b.n	800525a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	795b      	ldrb	r3, [r3, #5]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_DAC_Start_DMA+0x24>
 800511c:	2302      	movs	r3, #2
 800511e:	e09c      	b.n	800525a <HAL_DAC_Start_DMA+0x15e>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2202      	movs	r2, #2
 800512a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d129      	bne.n	8005186 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a4b      	ldr	r2, [pc, #300]	; (8005264 <HAL_DAC_Start_DMA+0x168>)
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4a4a      	ldr	r2, [pc, #296]	; (8005268 <HAL_DAC_Start_DMA+0x16c>)
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4a49      	ldr	r2, [pc, #292]	; (800526c <HAL_DAC_Start_DMA+0x170>)
 8005148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005158:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_DAC_Start_DMA+0x6c>
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d005      	beq.n	8005172 <HAL_DAC_Start_DMA+0x76>
 8005166:	e009      	b.n	800517c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3308      	adds	r3, #8
 800516e:	613b      	str	r3, [r7, #16]
        break;
 8005170:	e033      	b.n	80051da <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	330c      	adds	r3, #12
 8005178:	613b      	str	r3, [r7, #16]
        break;
 800517a:	e02e      	b.n	80051da <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3310      	adds	r3, #16
 8005182:	613b      	str	r3, [r7, #16]
        break;
 8005184:	e029      	b.n	80051da <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	4a39      	ldr	r2, [pc, #228]	; (8005270 <HAL_DAC_Start_DMA+0x174>)
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	4a38      	ldr	r2, [pc, #224]	; (8005274 <HAL_DAC_Start_DMA+0x178>)
 8005194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	4a37      	ldr	r2, [pc, #220]	; (8005278 <HAL_DAC_Start_DMA+0x17c>)
 800519c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_DAC_Start_DMA+0xc0>
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d005      	beq.n	80051c6 <HAL_DAC_Start_DMA+0xca>
 80051ba:	e009      	b.n	80051d0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	613b      	str	r3, [r7, #16]
        break;
 80051c4:	e009      	b.n	80051da <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3318      	adds	r3, #24
 80051cc:	613b      	str	r3, [r7, #16]
        break;
 80051ce:	e004      	b.n	80051da <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	331c      	adds	r3, #28
 80051d6:	613b      	str	r3, [r7, #16]
        break;
 80051d8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d111      	bne.n	8005204 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6898      	ldr	r0, [r3, #8]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	f000 fe67 	bl	8005ecc <HAL_DMA_Start_IT>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]
 8005202:	e010      	b.n	8005226 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005212:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68d8      	ldr	r0, [r3, #12]
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	f000 fe55 	bl	8005ecc <HAL_DMA_Start_IT>
 8005222:	4603      	mov	r3, r0
 8005224:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2201      	movs	r2, #1
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e005      	b.n	8005258 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	080056ed 	.word	0x080056ed
 8005268:	0800570f 	.word	0x0800570f
 800526c:	0800572b 	.word	0x0800572b
 8005270:	080057a9 	.word	0x080057a9
 8005274:	080057cb 	.word	0x080057cb
 8005278:	080057e7 	.word	0x080057e7

0800527c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e03e      	b.n	800530e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6819      	ldr	r1, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43da      	mvns	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	400a      	ands	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2201      	movs	r2, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43da      	mvns	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	400a      	ands	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10d      	bne.n	80052ec <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f863 	bl	80063a0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e00c      	b.n	8005306 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f855 	bl	80063a0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005304:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01d      	beq.n	8005374 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d018      	beq.n	8005374 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f043 0201 	orr.w	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800535c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800536c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f86f 	bl	8005452 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01d      	beq.n	80053ba <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d018      	beq.n	80053ba <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2204      	movs	r2, #4
 800538c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f043 0202 	orr.w	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9ed 	bl	8005794 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e015      	b.n	800540a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3308      	adds	r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e004      	b.n	8005400 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	3314      	adds	r3, #20
 80053fe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	461a      	mov	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_DAC_ConfigChannel+0x1e>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e12a      	b.n	80056e0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	795b      	ldrb	r3, [r3, #5]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_DAC_ConfigChannel+0x2e>
 8005492:	2302      	movs	r3, #2
 8005494:	e124      	b.n	80056e0 <HAL_DAC_ConfigChannel+0x278>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2202      	movs	r2, #2
 80054a0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d17a      	bne.n	80055a0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80054aa:	f7fe f88b 	bl	80035c4 <HAL_GetTick>
 80054ae:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13d      	bne.n	8005532 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054b6:	e018      	b.n	80054ea <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054b8:	f7fe f884 	bl	80035c4 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d911      	bls.n	80054ea <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054cc:	4b86      	ldr	r3, [pc, #536]	; (80056e8 <HAL_DAC_ConfigChannel+0x280>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f043 0208 	orr.w	r2, r3, #8
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2203      	movs	r2, #3
 80054e4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e0fa      	b.n	80056e0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_DAC_ConfigChannel+0x280>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1df      	bne.n	80054b8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	6992      	ldr	r2, [r2, #24]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
 8005502:	e020      	b.n	8005546 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005504:	f7fe f85e 	bl	80035c4 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d90f      	bls.n	8005532 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	da0a      	bge.n	8005532 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f043 0208 	orr.w	r2, r3, #8
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2203      	movs	r2, #3
 800552c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0d6      	b.n	80056e0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	2b00      	cmp	r3, #0
 800553a:	dbe3      	blt.n	8005504 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	6992      	ldr	r2, [r2, #24]
 8005544:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	ea02 0103 	and.w	r1, r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	409a      	lsls	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	21ff      	movs	r1, #255	; 0xff
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	43db      	mvns	r3, r3
 8005588:	ea02 0103 	and.w	r1, r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	409a      	lsls	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d11d      	bne.n	80055e4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	221f      	movs	r2, #31
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2207      	movs	r2, #7
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d102      	bne.n	800560e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	e00f      	b.n	800562e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d102      	bne.n	800561c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005616:	2301      	movs	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
 800561a:	e008      	b.n	800562e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005624:	2301      	movs	r3, #1
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
 8005628:	e001      	b.n	800562e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6819      	ldr	r1, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	43da      	mvns	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	400a      	ands	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	22c0      	movs	r2, #192	; 0xc0
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	400a      	ands	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80056dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3728      	adds	r7, #40	; 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20008000 	.word	0x20008000

080056ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fe8b 	bl	8005416 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	711a      	strb	r2, [r3, #4]
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff fe84 	bl	800542a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f043 0204 	orr.w	r2, r3, #4
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fe7a 	bl	800543e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	711a      	strb	r2, [r3, #4]
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff ffce 	bl	8005758 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	711a      	strb	r2, [r3, #4]
}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff ffc7 	bl	800576c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f043 0204 	orr.w	r2, r3, #4
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ffbd 	bl	8005780 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	711a      	strb	r2, [r3, #4]
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800581c:	f7fd fed2 	bl	80035c4 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e316      	b.n	8005e5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a66      	ldr	r2, [pc, #408]	; (80059cc <HAL_DMA_Init+0x1b8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d04a      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a65      	ldr	r2, [pc, #404]	; (80059d0 <HAL_DMA_Init+0x1bc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d045      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a63      	ldr	r2, [pc, #396]	; (80059d4 <HAL_DMA_Init+0x1c0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d040      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a62      	ldr	r2, [pc, #392]	; (80059d8 <HAL_DMA_Init+0x1c4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d03b      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a60      	ldr	r2, [pc, #384]	; (80059dc <HAL_DMA_Init+0x1c8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d036      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5f      	ldr	r2, [pc, #380]	; (80059e0 <HAL_DMA_Init+0x1cc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d031      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5d      	ldr	r2, [pc, #372]	; (80059e4 <HAL_DMA_Init+0x1d0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02c      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a5c      	ldr	r2, [pc, #368]	; (80059e8 <HAL_DMA_Init+0x1d4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d027      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a5a      	ldr	r2, [pc, #360]	; (80059ec <HAL_DMA_Init+0x1d8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d022      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a59      	ldr	r2, [pc, #356]	; (80059f0 <HAL_DMA_Init+0x1dc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d01d      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a57      	ldr	r2, [pc, #348]	; (80059f4 <HAL_DMA_Init+0x1e0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a56      	ldr	r2, [pc, #344]	; (80059f8 <HAL_DMA_Init+0x1e4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a54      	ldr	r2, [pc, #336]	; (80059fc <HAL_DMA_Init+0x1e8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a53      	ldr	r2, [pc, #332]	; (8005a00 <HAL_DMA_Init+0x1ec>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a51      	ldr	r2, [pc, #324]	; (8005a04 <HAL_DMA_Init+0x1f0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_DMA_Init+0xb8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a50      	ldr	r2, [pc, #320]	; (8005a08 <HAL_DMA_Init+0x1f4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d101      	bne.n	80058d0 <HAL_DMA_Init+0xbc>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <HAL_DMA_Init+0xbe>
 80058d0:	2300      	movs	r3, #0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 813b 	beq.w	8005b4e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a37      	ldr	r2, [pc, #220]	; (80059cc <HAL_DMA_Init+0x1b8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04a      	beq.n	8005988 <HAL_DMA_Init+0x174>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a36      	ldr	r2, [pc, #216]	; (80059d0 <HAL_DMA_Init+0x1bc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d045      	beq.n	8005988 <HAL_DMA_Init+0x174>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a34      	ldr	r2, [pc, #208]	; (80059d4 <HAL_DMA_Init+0x1c0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d040      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a33      	ldr	r2, [pc, #204]	; (80059d8 <HAL_DMA_Init+0x1c4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d03b      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a31      	ldr	r2, [pc, #196]	; (80059dc <HAL_DMA_Init+0x1c8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d036      	beq.n	8005988 <HAL_DMA_Init+0x174>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a30      	ldr	r2, [pc, #192]	; (80059e0 <HAL_DMA_Init+0x1cc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d031      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2e      	ldr	r2, [pc, #184]	; (80059e4 <HAL_DMA_Init+0x1d0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02c      	beq.n	8005988 <HAL_DMA_Init+0x174>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2d      	ldr	r2, [pc, #180]	; (80059e8 <HAL_DMA_Init+0x1d4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d027      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <HAL_DMA_Init+0x1d8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <HAL_DMA_Init+0x1dc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01d      	beq.n	8005988 <HAL_DMA_Init+0x174>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <HAL_DMA_Init+0x1e0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <HAL_DMA_Init+0x1e4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a25      	ldr	r2, [pc, #148]	; (80059fc <HAL_DMA_Init+0x1e8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <HAL_DMA_Init+0x174>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <HAL_DMA_Init+0x1ec>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_DMA_Init+0x174>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <HAL_DMA_Init+0x1f0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_DMA_Init+0x174>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <HAL_DMA_Init+0x1f4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d108      	bne.n	800599a <HAL_DMA_Init+0x186>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e007      	b.n	80059aa <HAL_DMA_Init+0x196>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059aa:	e02f      	b.n	8005a0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059ac:	f7fd fe0a 	bl	80035c4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d928      	bls.n	8005a0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2203      	movs	r2, #3
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e246      	b.n	8005e5a <HAL_DMA_Init+0x646>
 80059cc:	40020010 	.word	0x40020010
 80059d0:	40020028 	.word	0x40020028
 80059d4:	40020040 	.word	0x40020040
 80059d8:	40020058 	.word	0x40020058
 80059dc:	40020070 	.word	0x40020070
 80059e0:	40020088 	.word	0x40020088
 80059e4:	400200a0 	.word	0x400200a0
 80059e8:	400200b8 	.word	0x400200b8
 80059ec:	40020410 	.word	0x40020410
 80059f0:	40020428 	.word	0x40020428
 80059f4:	40020440 	.word	0x40020440
 80059f8:	40020458 	.word	0x40020458
 80059fc:	40020470 	.word	0x40020470
 8005a00:	40020488 	.word	0x40020488
 8005a04:	400204a0 	.word	0x400204a0
 8005a08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1c8      	bne.n	80059ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4b83      	ldr	r3, [pc, #524]	; (8005c34 <HAL_DMA_Init+0x420>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d107      	bne.n	8005a70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a70:	4b71      	ldr	r3, [pc, #452]	; (8005c38 <HAL_DMA_Init+0x424>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b71      	ldr	r3, [pc, #452]	; (8005c3c <HAL_DMA_Init+0x428>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a7c:	d328      	bcc.n	8005ad0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b28      	cmp	r3, #40	; 0x28
 8005a84:	d903      	bls.n	8005a8e <HAL_DMA_Init+0x27a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a8c:	d917      	bls.n	8005abe <HAL_DMA_Init+0x2aa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b3e      	cmp	r3, #62	; 0x3e
 8005a94:	d903      	bls.n	8005a9e <HAL_DMA_Init+0x28a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b42      	cmp	r3, #66	; 0x42
 8005a9c:	d90f      	bls.n	8005abe <HAL_DMA_Init+0x2aa>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b46      	cmp	r3, #70	; 0x46
 8005aa4:	d903      	bls.n	8005aae <HAL_DMA_Init+0x29a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b48      	cmp	r3, #72	; 0x48
 8005aac:	d907      	bls.n	8005abe <HAL_DMA_Init+0x2aa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b4e      	cmp	r3, #78	; 0x4e
 8005ab4:	d905      	bls.n	8005ac2 <HAL_DMA_Init+0x2ae>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b52      	cmp	r3, #82	; 0x52
 8005abc:	d801      	bhi.n	8005ac2 <HAL_DMA_Init+0x2ae>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_DMA_Init+0x2b0>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ace:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d117      	bne.n	8005b2a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fb33 	bl	8008178 <DMA_CheckFifoParam>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2240      	movs	r2, #64	; 0x40
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e197      	b.n	8005e5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f002 fa6e 	bl	8008014 <DMA_CalcBaseAndBitshift>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	223f      	movs	r2, #63	; 0x3f
 8005b46:	409a      	lsls	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	e0cd      	b.n	8005cea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a3b      	ldr	r2, [pc, #236]	; (8005c40 <HAL_DMA_Init+0x42c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a39      	ldr	r2, [pc, #228]	; (8005c44 <HAL_DMA_Init+0x430>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <HAL_DMA_Init+0x434>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a36      	ldr	r2, [pc, #216]	; (8005c4c <HAL_DMA_Init+0x438>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a35      	ldr	r2, [pc, #212]	; (8005c50 <HAL_DMA_Init+0x43c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a33      	ldr	r2, [pc, #204]	; (8005c54 <HAL_DMA_Init+0x440>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a32      	ldr	r2, [pc, #200]	; (8005c58 <HAL_DMA_Init+0x444>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_DMA_Init+0x38a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <HAL_DMA_Init+0x448>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_DMA_Init+0x38e>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_DMA_Init+0x390>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8097 	beq.w	8005cd8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a24      	ldr	r2, [pc, #144]	; (8005c40 <HAL_DMA_Init+0x42c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d021      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <HAL_DMA_Init+0x430>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <HAL_DMA_Init+0x434>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d017      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <HAL_DMA_Init+0x438>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d012      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <HAL_DMA_Init+0x43c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00d      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_DMA_Init+0x440>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d008      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_DMA_Init+0x444>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <HAL_DMA_Init+0x3e4>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <HAL_DMA_Init+0x448>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <HAL_DMA_Init+0x44c>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d020      	beq.n	8005c64 <HAL_DMA_Init+0x450>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d102      	bne.n	8005c30 <HAL_DMA_Init+0x41c>
 8005c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c2e:	e01a      	b.n	8005c66 <HAL_DMA_Init+0x452>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e018      	b.n	8005c66 <HAL_DMA_Init+0x452>
 8005c34:	fe10803f 	.word	0xfe10803f
 8005c38:	5c001000 	.word	0x5c001000
 8005c3c:	ffff0000 	.word	0xffff0000
 8005c40:	58025408 	.word	0x58025408
 8005c44:	5802541c 	.word	0x5802541c
 8005c48:	58025430 	.word	0x58025430
 8005c4c:	58025444 	.word	0x58025444
 8005c50:	58025458 	.word	0x58025458
 8005c54:	5802546c 	.word	0x5802546c
 8005c58:	58025480 	.word	0x58025480
 8005c5c:	58025494 	.word	0x58025494
 8005c60:	fffe000f 	.word	0xfffe000f
 8005c64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b6e      	ldr	r3, [pc, #440]	; (8005e64 <HAL_DMA_Init+0x650>)
 8005cac:	4413      	add	r3, r2
 8005cae:	4a6e      	ldr	r2, [pc, #440]	; (8005e68 <HAL_DMA_Init+0x654>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	009a      	lsls	r2, r3, #2
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f002 f9a9 	bl	8008014 <DMA_CalcBaseAndBitshift>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2201      	movs	r2, #1
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	e008      	b.n	8005cea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e0b7      	b.n	8005e5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5f      	ldr	r2, [pc, #380]	; (8005e6c <HAL_DMA_Init+0x658>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d072      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	; (8005e70 <HAL_DMA_Init+0x65c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d06d      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a5c      	ldr	r2, [pc, #368]	; (8005e74 <HAL_DMA_Init+0x660>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d068      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a5a      	ldr	r2, [pc, #360]	; (8005e78 <HAL_DMA_Init+0x664>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d063      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a59      	ldr	r2, [pc, #356]	; (8005e7c <HAL_DMA_Init+0x668>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d05e      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a57      	ldr	r2, [pc, #348]	; (8005e80 <HAL_DMA_Init+0x66c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d059      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a56      	ldr	r2, [pc, #344]	; (8005e84 <HAL_DMA_Init+0x670>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d054      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a54      	ldr	r2, [pc, #336]	; (8005e88 <HAL_DMA_Init+0x674>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d04f      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a53      	ldr	r2, [pc, #332]	; (8005e8c <HAL_DMA_Init+0x678>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d04a      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a51      	ldr	r2, [pc, #324]	; (8005e90 <HAL_DMA_Init+0x67c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d045      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a50      	ldr	r2, [pc, #320]	; (8005e94 <HAL_DMA_Init+0x680>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d040      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a4e      	ldr	r2, [pc, #312]	; (8005e98 <HAL_DMA_Init+0x684>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d03b      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4d      	ldr	r2, [pc, #308]	; (8005e9c <HAL_DMA_Init+0x688>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d036      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a4b      	ldr	r2, [pc, #300]	; (8005ea0 <HAL_DMA_Init+0x68c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d031      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a4a      	ldr	r2, [pc, #296]	; (8005ea4 <HAL_DMA_Init+0x690>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d02c      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a48      	ldr	r2, [pc, #288]	; (8005ea8 <HAL_DMA_Init+0x694>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d027      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a47      	ldr	r2, [pc, #284]	; (8005eac <HAL_DMA_Init+0x698>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d022      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a45      	ldr	r2, [pc, #276]	; (8005eb0 <HAL_DMA_Init+0x69c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01d      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a44      	ldr	r2, [pc, #272]	; (8005eb4 <HAL_DMA_Init+0x6a0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d018      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a42      	ldr	r2, [pc, #264]	; (8005eb8 <HAL_DMA_Init+0x6a4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a41      	ldr	r2, [pc, #260]	; (8005ebc <HAL_DMA_Init+0x6a8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3f      	ldr	r2, [pc, #252]	; (8005ec0 <HAL_DMA_Init+0x6ac>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3e      	ldr	r2, [pc, #248]	; (8005ec4 <HAL_DMA_Init+0x6b0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_DMA_Init+0x5c6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a3c      	ldr	r2, [pc, #240]	; (8005ec8 <HAL_DMA_Init+0x6b4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_DMA_Init+0x5ca>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_DMA_Init+0x5cc>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d032      	beq.n	8005e4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 fa43 	bl	8008270 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d102      	bne.n	8005df8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <HAL_DMA_Init+0x624>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d80c      	bhi.n	8005e38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 fac0 	bl	80083a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	e008      	b.n	8005e4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	a7fdabf8 	.word	0xa7fdabf8
 8005e68:	cccccccd 	.word	0xcccccccd
 8005e6c:	40020010 	.word	0x40020010
 8005e70:	40020028 	.word	0x40020028
 8005e74:	40020040 	.word	0x40020040
 8005e78:	40020058 	.word	0x40020058
 8005e7c:	40020070 	.word	0x40020070
 8005e80:	40020088 	.word	0x40020088
 8005e84:	400200a0 	.word	0x400200a0
 8005e88:	400200b8 	.word	0x400200b8
 8005e8c:	40020410 	.word	0x40020410
 8005e90:	40020428 	.word	0x40020428
 8005e94:	40020440 	.word	0x40020440
 8005e98:	40020458 	.word	0x40020458
 8005e9c:	40020470 	.word	0x40020470
 8005ea0:	40020488 	.word	0x40020488
 8005ea4:	400204a0 	.word	0x400204a0
 8005ea8:	400204b8 	.word	0x400204b8
 8005eac:	58025408 	.word	0x58025408
 8005eb0:	5802541c 	.word	0x5802541c
 8005eb4:	58025430 	.word	0x58025430
 8005eb8:	58025444 	.word	0x58025444
 8005ebc:	58025458 	.word	0x58025458
 8005ec0:	5802546c 	.word	0x5802546c
 8005ec4:	58025480 	.word	0x58025480
 8005ec8:	58025494 	.word	0x58025494

08005ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e226      	b.n	8006336 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DMA_Start_IT+0x2a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e21f      	b.n	8006336 <HAL_DMA_Start_IT+0x46a>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	f040 820a 	bne.w	8006320 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a68      	ldr	r2, [pc, #416]	; (80060c0 <HAL_DMA_Start_IT+0x1f4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d04a      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a66      	ldr	r2, [pc, #408]	; (80060c4 <HAL_DMA_Start_IT+0x1f8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d045      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a65      	ldr	r2, [pc, #404]	; (80060c8 <HAL_DMA_Start_IT+0x1fc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d040      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a63      	ldr	r2, [pc, #396]	; (80060cc <HAL_DMA_Start_IT+0x200>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d03b      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a62      	ldr	r2, [pc, #392]	; (80060d0 <HAL_DMA_Start_IT+0x204>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d036      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_DMA_Start_IT+0x208>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d031      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5f      	ldr	r2, [pc, #380]	; (80060d8 <HAL_DMA_Start_IT+0x20c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d02c      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5d      	ldr	r2, [pc, #372]	; (80060dc <HAL_DMA_Start_IT+0x210>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d027      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5c      	ldr	r2, [pc, #368]	; (80060e0 <HAL_DMA_Start_IT+0x214>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d022      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5a      	ldr	r2, [pc, #360]	; (80060e4 <HAL_DMA_Start_IT+0x218>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01d      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a59      	ldr	r2, [pc, #356]	; (80060e8 <HAL_DMA_Start_IT+0x21c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d018      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a57      	ldr	r2, [pc, #348]	; (80060ec <HAL_DMA_Start_IT+0x220>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d013      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a56      	ldr	r2, [pc, #344]	; (80060f0 <HAL_DMA_Start_IT+0x224>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00e      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a54      	ldr	r2, [pc, #336]	; (80060f4 <HAL_DMA_Start_IT+0x228>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a53      	ldr	r2, [pc, #332]	; (80060f8 <HAL_DMA_Start_IT+0x22c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <HAL_DMA_Start_IT+0xee>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a51      	ldr	r2, [pc, #324]	; (80060fc <HAL_DMA_Start_IT+0x230>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d108      	bne.n	8005fcc <HAL_DMA_Start_IT+0x100>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e007      	b.n	8005fdc <HAL_DMA_Start_IT+0x110>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f001 fe6a 	bl	8007cbc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a34      	ldr	r2, [pc, #208]	; (80060c0 <HAL_DMA_Start_IT+0x1f4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d04a      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a33      	ldr	r2, [pc, #204]	; (80060c4 <HAL_DMA_Start_IT+0x1f8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d045      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a31      	ldr	r2, [pc, #196]	; (80060c8 <HAL_DMA_Start_IT+0x1fc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d040      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a30      	ldr	r2, [pc, #192]	; (80060cc <HAL_DMA_Start_IT+0x200>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d03b      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2e      	ldr	r2, [pc, #184]	; (80060d0 <HAL_DMA_Start_IT+0x204>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d036      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2d      	ldr	r2, [pc, #180]	; (80060d4 <HAL_DMA_Start_IT+0x208>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d031      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2b      	ldr	r2, [pc, #172]	; (80060d8 <HAL_DMA_Start_IT+0x20c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d02c      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <HAL_DMA_Start_IT+0x210>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d027      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a28      	ldr	r2, [pc, #160]	; (80060e0 <HAL_DMA_Start_IT+0x214>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a27      	ldr	r2, [pc, #156]	; (80060e4 <HAL_DMA_Start_IT+0x218>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d01d      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a25      	ldr	r2, [pc, #148]	; (80060e8 <HAL_DMA_Start_IT+0x21c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a24      	ldr	r2, [pc, #144]	; (80060ec <HAL_DMA_Start_IT+0x220>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <HAL_DMA_Start_IT+0x224>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <HAL_DMA_Start_IT+0x228>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_DMA_Start_IT+0x22c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_DMA_Start_IT+0x1bc>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <HAL_DMA_Start_IT+0x230>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <HAL_DMA_Start_IT+0x1c0>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <HAL_DMA_Start_IT+0x1c2>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d036      	beq.n	8006100 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 021e 	bic.w	r2, r3, #30
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0216 	orr.w	r2, r2, #22
 80060a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d03e      	beq.n	800612c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0208 	orr.w	r2, r2, #8
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e035      	b.n	800612c <HAL_DMA_Start_IT+0x260>
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 020e 	bic.w	r2, r3, #14
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 020a 	orr.w	r2, r2, #10
 8006112:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0204 	orr.w	r2, r2, #4
 800612a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a83      	ldr	r2, [pc, #524]	; (8006340 <HAL_DMA_Start_IT+0x474>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d072      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a82      	ldr	r2, [pc, #520]	; (8006344 <HAL_DMA_Start_IT+0x478>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d06d      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a80      	ldr	r2, [pc, #512]	; (8006348 <HAL_DMA_Start_IT+0x47c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d068      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a7f      	ldr	r2, [pc, #508]	; (800634c <HAL_DMA_Start_IT+0x480>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d063      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a7d      	ldr	r2, [pc, #500]	; (8006350 <HAL_DMA_Start_IT+0x484>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d05e      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7c      	ldr	r2, [pc, #496]	; (8006354 <HAL_DMA_Start_IT+0x488>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d059      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a7a      	ldr	r2, [pc, #488]	; (8006358 <HAL_DMA_Start_IT+0x48c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d054      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a79      	ldr	r2, [pc, #484]	; (800635c <HAL_DMA_Start_IT+0x490>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d04f      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a77      	ldr	r2, [pc, #476]	; (8006360 <HAL_DMA_Start_IT+0x494>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d04a      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a76      	ldr	r2, [pc, #472]	; (8006364 <HAL_DMA_Start_IT+0x498>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d045      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a74      	ldr	r2, [pc, #464]	; (8006368 <HAL_DMA_Start_IT+0x49c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d040      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a73      	ldr	r2, [pc, #460]	; (800636c <HAL_DMA_Start_IT+0x4a0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d03b      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a71      	ldr	r2, [pc, #452]	; (8006370 <HAL_DMA_Start_IT+0x4a4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d036      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a70      	ldr	r2, [pc, #448]	; (8006374 <HAL_DMA_Start_IT+0x4a8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d031      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a6e      	ldr	r2, [pc, #440]	; (8006378 <HAL_DMA_Start_IT+0x4ac>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d02c      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a6d      	ldr	r2, [pc, #436]	; (800637c <HAL_DMA_Start_IT+0x4b0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d027      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6b      	ldr	r2, [pc, #428]	; (8006380 <HAL_DMA_Start_IT+0x4b4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d022      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a6a      	ldr	r2, [pc, #424]	; (8006384 <HAL_DMA_Start_IT+0x4b8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d01d      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a68      	ldr	r2, [pc, #416]	; (8006388 <HAL_DMA_Start_IT+0x4bc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a67      	ldr	r2, [pc, #412]	; (800638c <HAL_DMA_Start_IT+0x4c0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a65      	ldr	r2, [pc, #404]	; (8006390 <HAL_DMA_Start_IT+0x4c4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a64      	ldr	r2, [pc, #400]	; (8006394 <HAL_DMA_Start_IT+0x4c8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a62      	ldr	r2, [pc, #392]	; (8006398 <HAL_DMA_Start_IT+0x4cc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_DMA_Start_IT+0x350>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a61      	ldr	r2, [pc, #388]	; (800639c <HAL_DMA_Start_IT+0x4d0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <HAL_DMA_Start_IT+0x354>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_DMA_Start_IT+0x356>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01a      	beq.n	800625c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006242:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a37      	ldr	r2, [pc, #220]	; (8006340 <HAL_DMA_Start_IT+0x474>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d04a      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a36      	ldr	r2, [pc, #216]	; (8006344 <HAL_DMA_Start_IT+0x478>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d045      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a34      	ldr	r2, [pc, #208]	; (8006348 <HAL_DMA_Start_IT+0x47c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d040      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a33      	ldr	r2, [pc, #204]	; (800634c <HAL_DMA_Start_IT+0x480>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d03b      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a31      	ldr	r2, [pc, #196]	; (8006350 <HAL_DMA_Start_IT+0x484>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d036      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a30      	ldr	r2, [pc, #192]	; (8006354 <HAL_DMA_Start_IT+0x488>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d031      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2e      	ldr	r2, [pc, #184]	; (8006358 <HAL_DMA_Start_IT+0x48c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d02c      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2d      	ldr	r2, [pc, #180]	; (800635c <HAL_DMA_Start_IT+0x490>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d027      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <HAL_DMA_Start_IT+0x494>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d022      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <HAL_DMA_Start_IT+0x498>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d01d      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a28      	ldr	r2, [pc, #160]	; (8006368 <HAL_DMA_Start_IT+0x49c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d018      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a27      	ldr	r2, [pc, #156]	; (800636c <HAL_DMA_Start_IT+0x4a0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d013      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <HAL_DMA_Start_IT+0x4a4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00e      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a24      	ldr	r2, [pc, #144]	; (8006374 <HAL_DMA_Start_IT+0x4a8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a22      	ldr	r2, [pc, #136]	; (8006378 <HAL_DMA_Start_IT+0x4ac>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_DMA_Start_IT+0x430>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a21      	ldr	r2, [pc, #132]	; (800637c <HAL_DMA_Start_IT+0x4b0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d108      	bne.n	800630e <HAL_DMA_Start_IT+0x442>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e012      	b.n	8006334 <HAL_DMA_Start_IT+0x468>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e009      	b.n	8006334 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40020010 	.word	0x40020010
 8006344:	40020028 	.word	0x40020028
 8006348:	40020040 	.word	0x40020040
 800634c:	40020058 	.word	0x40020058
 8006350:	40020070 	.word	0x40020070
 8006354:	40020088 	.word	0x40020088
 8006358:	400200a0 	.word	0x400200a0
 800635c:	400200b8 	.word	0x400200b8
 8006360:	40020410 	.word	0x40020410
 8006364:	40020428 	.word	0x40020428
 8006368:	40020440 	.word	0x40020440
 800636c:	40020458 	.word	0x40020458
 8006370:	40020470 	.word	0x40020470
 8006374:	40020488 	.word	0x40020488
 8006378:	400204a0 	.word	0x400204a0
 800637c:	400204b8 	.word	0x400204b8
 8006380:	58025408 	.word	0x58025408
 8006384:	5802541c 	.word	0x5802541c
 8006388:	58025430 	.word	0x58025430
 800638c:	58025444 	.word	0x58025444
 8006390:	58025458 	.word	0x58025458
 8006394:	5802546c 	.word	0x5802546c
 8006398:	58025480 	.word	0x58025480
 800639c:	58025494 	.word	0x58025494

080063a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063a8:	f7fd f90c 	bl	80035c4 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e2dc      	b.n	8006972 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d008      	beq.n	80063d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e2cd      	b.n	8006972 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a76      	ldr	r2, [pc, #472]	; (80065b4 <HAL_DMA_Abort+0x214>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d04a      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a74      	ldr	r2, [pc, #464]	; (80065b8 <HAL_DMA_Abort+0x218>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d045      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a73      	ldr	r2, [pc, #460]	; (80065bc <HAL_DMA_Abort+0x21c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d040      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a71      	ldr	r2, [pc, #452]	; (80065c0 <HAL_DMA_Abort+0x220>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d03b      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a70      	ldr	r2, [pc, #448]	; (80065c4 <HAL_DMA_Abort+0x224>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d036      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a6e      	ldr	r2, [pc, #440]	; (80065c8 <HAL_DMA_Abort+0x228>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d031      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a6d      	ldr	r2, [pc, #436]	; (80065cc <HAL_DMA_Abort+0x22c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d02c      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a6b      	ldr	r2, [pc, #428]	; (80065d0 <HAL_DMA_Abort+0x230>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d027      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6a      	ldr	r2, [pc, #424]	; (80065d4 <HAL_DMA_Abort+0x234>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a68      	ldr	r2, [pc, #416]	; (80065d8 <HAL_DMA_Abort+0x238>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01d      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a67      	ldr	r2, [pc, #412]	; (80065dc <HAL_DMA_Abort+0x23c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a65      	ldr	r2, [pc, #404]	; (80065e0 <HAL_DMA_Abort+0x240>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a64      	ldr	r2, [pc, #400]	; (80065e4 <HAL_DMA_Abort+0x244>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a62      	ldr	r2, [pc, #392]	; (80065e8 <HAL_DMA_Abort+0x248>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a61      	ldr	r2, [pc, #388]	; (80065ec <HAL_DMA_Abort+0x24c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_DMA_Abort+0xd6>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5f      	ldr	r2, [pc, #380]	; (80065f0 <HAL_DMA_Abort+0x250>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d101      	bne.n	800647a <HAL_DMA_Abort+0xda>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_DMA_Abort+0xdc>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d013      	beq.n	80064a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 021e 	bic.w	r2, r2, #30
 800648e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	e00a      	b.n	80064be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 020e 	bic.w	r2, r2, #14
 80064b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3c      	ldr	r2, [pc, #240]	; (80065b4 <HAL_DMA_Abort+0x214>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d072      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <HAL_DMA_Abort+0x218>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d06d      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a39      	ldr	r2, [pc, #228]	; (80065bc <HAL_DMA_Abort+0x21c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d068      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a37      	ldr	r2, [pc, #220]	; (80065c0 <HAL_DMA_Abort+0x220>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d063      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a36      	ldr	r2, [pc, #216]	; (80065c4 <HAL_DMA_Abort+0x224>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d05e      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a34      	ldr	r2, [pc, #208]	; (80065c8 <HAL_DMA_Abort+0x228>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d059      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a33      	ldr	r2, [pc, #204]	; (80065cc <HAL_DMA_Abort+0x22c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d054      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a31      	ldr	r2, [pc, #196]	; (80065d0 <HAL_DMA_Abort+0x230>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d04f      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a30      	ldr	r2, [pc, #192]	; (80065d4 <HAL_DMA_Abort+0x234>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d04a      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2e      	ldr	r2, [pc, #184]	; (80065d8 <HAL_DMA_Abort+0x238>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d045      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <HAL_DMA_Abort+0x23c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d040      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2b      	ldr	r2, [pc, #172]	; (80065e0 <HAL_DMA_Abort+0x240>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d03b      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <HAL_DMA_Abort+0x244>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d036      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <HAL_DMA_Abort+0x248>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d031      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a27      	ldr	r2, [pc, #156]	; (80065ec <HAL_DMA_Abort+0x24c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d02c      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <HAL_DMA_Abort+0x250>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d027      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <HAL_DMA_Abort+0x254>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <HAL_DMA_Abort+0x258>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a21      	ldr	r2, [pc, #132]	; (80065fc <HAL_DMA_Abort+0x25c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_DMA_Abort+0x260>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <HAL_DMA_Abort+0x264>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_DMA_Abort+0x268>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_DMA_Abort+0x26c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_DMA_Abort+0x20e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_DMA_Abort+0x270>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d132      	bne.n	8006614 <HAL_DMA_Abort+0x274>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e031      	b.n	8006616 <HAL_DMA_Abort+0x276>
 80065b2:	bf00      	nop
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8
 80065f4:	58025408 	.word	0x58025408
 80065f8:	5802541c 	.word	0x5802541c
 80065fc:	58025430 	.word	0x58025430
 8006600:	58025444 	.word	0x58025444
 8006604:	58025458 	.word	0x58025458
 8006608:	5802546c 	.word	0x5802546c
 800660c:	58025480 	.word	0x58025480
 8006610:	58025494 	.word	0x58025494
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006628:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6d      	ldr	r2, [pc, #436]	; (80067e4 <HAL_DMA_Abort+0x444>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d04a      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6b      	ldr	r2, [pc, #428]	; (80067e8 <HAL_DMA_Abort+0x448>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d045      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6a      	ldr	r2, [pc, #424]	; (80067ec <HAL_DMA_Abort+0x44c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d040      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a68      	ldr	r2, [pc, #416]	; (80067f0 <HAL_DMA_Abort+0x450>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d03b      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a67      	ldr	r2, [pc, #412]	; (80067f4 <HAL_DMA_Abort+0x454>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d036      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a65      	ldr	r2, [pc, #404]	; (80067f8 <HAL_DMA_Abort+0x458>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d031      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a64      	ldr	r2, [pc, #400]	; (80067fc <HAL_DMA_Abort+0x45c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d02c      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a62      	ldr	r2, [pc, #392]	; (8006800 <HAL_DMA_Abort+0x460>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a61      	ldr	r2, [pc, #388]	; (8006804 <HAL_DMA_Abort+0x464>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d022      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5f      	ldr	r2, [pc, #380]	; (8006808 <HAL_DMA_Abort+0x468>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a5e      	ldr	r2, [pc, #376]	; (800680c <HAL_DMA_Abort+0x46c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a5c      	ldr	r2, [pc, #368]	; (8006810 <HAL_DMA_Abort+0x470>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a5b      	ldr	r2, [pc, #364]	; (8006814 <HAL_DMA_Abort+0x474>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a59      	ldr	r2, [pc, #356]	; (8006818 <HAL_DMA_Abort+0x478>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a58      	ldr	r2, [pc, #352]	; (800681c <HAL_DMA_Abort+0x47c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_DMA_Abort+0x32a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a56      	ldr	r2, [pc, #344]	; (8006820 <HAL_DMA_Abort+0x480>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d108      	bne.n	80066dc <HAL_DMA_Abort+0x33c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	e007      	b.n	80066ec <HAL_DMA_Abort+0x34c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066ec:	e013      	b.n	8006716 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ee:	f7fc ff69 	bl	80035c4 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	d90c      	bls.n	8006716 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e12d      	b.n	8006972 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <HAL_DMA_Abort+0x444>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d04a      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a2d      	ldr	r2, [pc, #180]	; (80067e8 <HAL_DMA_Abort+0x448>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d045      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <HAL_DMA_Abort+0x44c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d040      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <HAL_DMA_Abort+0x450>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d03b      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <HAL_DMA_Abort+0x454>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d036      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <HAL_DMA_Abort+0x458>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d031      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a26      	ldr	r2, [pc, #152]	; (80067fc <HAL_DMA_Abort+0x45c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d02c      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a24      	ldr	r2, [pc, #144]	; (8006800 <HAL_DMA_Abort+0x460>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d027      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a23      	ldr	r2, [pc, #140]	; (8006804 <HAL_DMA_Abort+0x464>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a21      	ldr	r2, [pc, #132]	; (8006808 <HAL_DMA_Abort+0x468>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01d      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a20      	ldr	r2, [pc, #128]	; (800680c <HAL_DMA_Abort+0x46c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1e      	ldr	r2, [pc, #120]	; (8006810 <HAL_DMA_Abort+0x470>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <HAL_DMA_Abort+0x474>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_DMA_Abort+0x478>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1a      	ldr	r2, [pc, #104]	; (800681c <HAL_DMA_Abort+0x47c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_DMA_Abort+0x422>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a18      	ldr	r2, [pc, #96]	; (8006820 <HAL_DMA_Abort+0x480>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d101      	bne.n	80067c6 <HAL_DMA_Abort+0x426>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <HAL_DMA_Abort+0x428>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d02b      	beq.n	8006824 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	223f      	movs	r2, #63	; 0x3f
 80067dc:	409a      	lsls	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	e02a      	b.n	800683a <HAL_DMA_Abort+0x49a>
 80067e4:	40020010 	.word	0x40020010
 80067e8:	40020028 	.word	0x40020028
 80067ec:	40020040 	.word	0x40020040
 80067f0:	40020058 	.word	0x40020058
 80067f4:	40020070 	.word	0x40020070
 80067f8:	40020088 	.word	0x40020088
 80067fc:	400200a0 	.word	0x400200a0
 8006800:	400200b8 	.word	0x400200b8
 8006804:	40020410 	.word	0x40020410
 8006808:	40020428 	.word	0x40020428
 800680c:	40020440 	.word	0x40020440
 8006810:	40020458 	.word	0x40020458
 8006814:	40020470 	.word	0x40020470
 8006818:	40020488 	.word	0x40020488
 800681c:	400204a0 	.word	0x400204a0
 8006820:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2201      	movs	r2, #1
 8006834:	409a      	lsls	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a4f      	ldr	r2, [pc, #316]	; (800697c <HAL_DMA_Abort+0x5dc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d072      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a4d      	ldr	r2, [pc, #308]	; (8006980 <HAL_DMA_Abort+0x5e0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d06d      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a4c      	ldr	r2, [pc, #304]	; (8006984 <HAL_DMA_Abort+0x5e4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d068      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a4a      	ldr	r2, [pc, #296]	; (8006988 <HAL_DMA_Abort+0x5e8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d063      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a49      	ldr	r2, [pc, #292]	; (800698c <HAL_DMA_Abort+0x5ec>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d05e      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a47      	ldr	r2, [pc, #284]	; (8006990 <HAL_DMA_Abort+0x5f0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d059      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a46      	ldr	r2, [pc, #280]	; (8006994 <HAL_DMA_Abort+0x5f4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d054      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a44      	ldr	r2, [pc, #272]	; (8006998 <HAL_DMA_Abort+0x5f8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04f      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a43      	ldr	r2, [pc, #268]	; (800699c <HAL_DMA_Abort+0x5fc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d04a      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a41      	ldr	r2, [pc, #260]	; (80069a0 <HAL_DMA_Abort+0x600>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d045      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a40      	ldr	r2, [pc, #256]	; (80069a4 <HAL_DMA_Abort+0x604>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d040      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3e      	ldr	r2, [pc, #248]	; (80069a8 <HAL_DMA_Abort+0x608>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d03b      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <HAL_DMA_Abort+0x60c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d036      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a3b      	ldr	r2, [pc, #236]	; (80069b0 <HAL_DMA_Abort+0x610>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d031      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3a      	ldr	r2, [pc, #232]	; (80069b4 <HAL_DMA_Abort+0x614>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d02c      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a38      	ldr	r2, [pc, #224]	; (80069b8 <HAL_DMA_Abort+0x618>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d027      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a37      	ldr	r2, [pc, #220]	; (80069bc <HAL_DMA_Abort+0x61c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d022      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a35      	ldr	r2, [pc, #212]	; (80069c0 <HAL_DMA_Abort+0x620>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d01d      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a34      	ldr	r2, [pc, #208]	; (80069c4 <HAL_DMA_Abort+0x624>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d018      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a32      	ldr	r2, [pc, #200]	; (80069c8 <HAL_DMA_Abort+0x628>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a31      	ldr	r2, [pc, #196]	; (80069cc <HAL_DMA_Abort+0x62c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00e      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a2f      	ldr	r2, [pc, #188]	; (80069d0 <HAL_DMA_Abort+0x630>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d009      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a2e      	ldr	r2, [pc, #184]	; (80069d4 <HAL_DMA_Abort+0x634>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <HAL_DMA_Abort+0x58a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a2c      	ldr	r2, [pc, #176]	; (80069d8 <HAL_DMA_Abort+0x638>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <HAL_DMA_Abort+0x58e>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <HAL_DMA_Abort+0x590>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d015      	beq.n	8006960 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800693c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006954:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800695e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40020010 	.word	0x40020010
 8006980:	40020028 	.word	0x40020028
 8006984:	40020040 	.word	0x40020040
 8006988:	40020058 	.word	0x40020058
 800698c:	40020070 	.word	0x40020070
 8006990:	40020088 	.word	0x40020088
 8006994:	400200a0 	.word	0x400200a0
 8006998:	400200b8 	.word	0x400200b8
 800699c:	40020410 	.word	0x40020410
 80069a0:	40020428 	.word	0x40020428
 80069a4:	40020440 	.word	0x40020440
 80069a8:	40020458 	.word	0x40020458
 80069ac:	40020470 	.word	0x40020470
 80069b0:	40020488 	.word	0x40020488
 80069b4:	400204a0 	.word	0x400204a0
 80069b8:	400204b8 	.word	0x400204b8
 80069bc:	58025408 	.word	0x58025408
 80069c0:	5802541c 	.word	0x5802541c
 80069c4:	58025430 	.word	0x58025430
 80069c8:	58025444 	.word	0x58025444
 80069cc:	58025458 	.word	0x58025458
 80069d0:	5802546c 	.word	0x5802546c
 80069d4:	58025480 	.word	0x58025480
 80069d8:	58025494 	.word	0x58025494

080069dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e237      	b.n	8006e5e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d004      	beq.n	8006a04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e22c      	b.n	8006e5e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a5c      	ldr	r2, [pc, #368]	; (8006b7c <HAL_DMA_Abort_IT+0x1a0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d04a      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a5b      	ldr	r2, [pc, #364]	; (8006b80 <HAL_DMA_Abort_IT+0x1a4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d045      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a59      	ldr	r2, [pc, #356]	; (8006b84 <HAL_DMA_Abort_IT+0x1a8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d040      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a58      	ldr	r2, [pc, #352]	; (8006b88 <HAL_DMA_Abort_IT+0x1ac>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d03b      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a56      	ldr	r2, [pc, #344]	; (8006b8c <HAL_DMA_Abort_IT+0x1b0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d036      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a55      	ldr	r2, [pc, #340]	; (8006b90 <HAL_DMA_Abort_IT+0x1b4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d031      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a53      	ldr	r2, [pc, #332]	; (8006b94 <HAL_DMA_Abort_IT+0x1b8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d02c      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a52      	ldr	r2, [pc, #328]	; (8006b98 <HAL_DMA_Abort_IT+0x1bc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d027      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a50      	ldr	r2, [pc, #320]	; (8006b9c <HAL_DMA_Abort_IT+0x1c0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d022      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a4f      	ldr	r2, [pc, #316]	; (8006ba0 <HAL_DMA_Abort_IT+0x1c4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d01d      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a4d      	ldr	r2, [pc, #308]	; (8006ba4 <HAL_DMA_Abort_IT+0x1c8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a4c      	ldr	r2, [pc, #304]	; (8006ba8 <HAL_DMA_Abort_IT+0x1cc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a4a      	ldr	r2, [pc, #296]	; (8006bac <HAL_DMA_Abort_IT+0x1d0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a49      	ldr	r2, [pc, #292]	; (8006bb0 <HAL_DMA_Abort_IT+0x1d4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a47      	ldr	r2, [pc, #284]	; (8006bb4 <HAL_DMA_Abort_IT+0x1d8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_DMA_Abort_IT+0xc8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a46      	ldr	r2, [pc, #280]	; (8006bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d101      	bne.n	8006aa8 <HAL_DMA_Abort_IT+0xcc>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <HAL_DMA_Abort_IT+0xce>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8086 	beq.w	8006bbc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2f      	ldr	r2, [pc, #188]	; (8006b7c <HAL_DMA_Abort_IT+0x1a0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d04a      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2e      	ldr	r2, [pc, #184]	; (8006b80 <HAL_DMA_Abort_IT+0x1a4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d045      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2c      	ldr	r2, [pc, #176]	; (8006b84 <HAL_DMA_Abort_IT+0x1a8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d040      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2b      	ldr	r2, [pc, #172]	; (8006b88 <HAL_DMA_Abort_IT+0x1ac>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d03b      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a29      	ldr	r2, [pc, #164]	; (8006b8c <HAL_DMA_Abort_IT+0x1b0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d036      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a28      	ldr	r2, [pc, #160]	; (8006b90 <HAL_DMA_Abort_IT+0x1b4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d031      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a26      	ldr	r2, [pc, #152]	; (8006b94 <HAL_DMA_Abort_IT+0x1b8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d02c      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a25      	ldr	r2, [pc, #148]	; (8006b98 <HAL_DMA_Abort_IT+0x1bc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d027      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a23      	ldr	r2, [pc, #140]	; (8006b9c <HAL_DMA_Abort_IT+0x1c0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d022      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <HAL_DMA_Abort_IT+0x1c4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d01d      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <HAL_DMA_Abort_IT+0x1c8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d018      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ba8 <HAL_DMA_Abort_IT+0x1cc>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1d      	ldr	r2, [pc, #116]	; (8006bac <HAL_DMA_Abort_IT+0x1d0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00e      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_DMA_Abort_IT+0x1d4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d009      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <HAL_DMA_Abort_IT+0x1d8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_DMA_Abort_IT+0x17c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d108      	bne.n	8006b6a <HAL_DMA_Abort_IT+0x18e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e178      	b.n	8006e5c <HAL_DMA_Abort_IT+0x480>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e16f      	b.n	8006e5c <HAL_DMA_Abort_IT+0x480>
 8006b7c:	40020010 	.word	0x40020010
 8006b80:	40020028 	.word	0x40020028
 8006b84:	40020040 	.word	0x40020040
 8006b88:	40020058 	.word	0x40020058
 8006b8c:	40020070 	.word	0x40020070
 8006b90:	40020088 	.word	0x40020088
 8006b94:	400200a0 	.word	0x400200a0
 8006b98:	400200b8 	.word	0x400200b8
 8006b9c:	40020410 	.word	0x40020410
 8006ba0:	40020428 	.word	0x40020428
 8006ba4:	40020440 	.word	0x40020440
 8006ba8:	40020458 	.word	0x40020458
 8006bac:	40020470 	.word	0x40020470
 8006bb0:	40020488 	.word	0x40020488
 8006bb4:	400204a0 	.word	0x400204a0
 8006bb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 020e 	bic.w	r2, r2, #14
 8006bca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a6c      	ldr	r2, [pc, #432]	; (8006d84 <HAL_DMA_Abort_IT+0x3a8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d04a      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6b      	ldr	r2, [pc, #428]	; (8006d88 <HAL_DMA_Abort_IT+0x3ac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d045      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a69      	ldr	r2, [pc, #420]	; (8006d8c <HAL_DMA_Abort_IT+0x3b0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d040      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a68      	ldr	r2, [pc, #416]	; (8006d90 <HAL_DMA_Abort_IT+0x3b4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d03b      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a66      	ldr	r2, [pc, #408]	; (8006d94 <HAL_DMA_Abort_IT+0x3b8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d036      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a65      	ldr	r2, [pc, #404]	; (8006d98 <HAL_DMA_Abort_IT+0x3bc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d031      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a63      	ldr	r2, [pc, #396]	; (8006d9c <HAL_DMA_Abort_IT+0x3c0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d02c      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a62      	ldr	r2, [pc, #392]	; (8006da0 <HAL_DMA_Abort_IT+0x3c4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d027      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a60      	ldr	r2, [pc, #384]	; (8006da4 <HAL_DMA_Abort_IT+0x3c8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d022      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a5f      	ldr	r2, [pc, #380]	; (8006da8 <HAL_DMA_Abort_IT+0x3cc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d01d      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a5d      	ldr	r2, [pc, #372]	; (8006dac <HAL_DMA_Abort_IT+0x3d0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d018      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a5c      	ldr	r2, [pc, #368]	; (8006db0 <HAL_DMA_Abort_IT+0x3d4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a5a      	ldr	r2, [pc, #360]	; (8006db4 <HAL_DMA_Abort_IT+0x3d8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00e      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a59      	ldr	r2, [pc, #356]	; (8006db8 <HAL_DMA_Abort_IT+0x3dc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a57      	ldr	r2, [pc, #348]	; (8006dbc <HAL_DMA_Abort_IT+0x3e0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d004      	beq.n	8006c6c <HAL_DMA_Abort_IT+0x290>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a56      	ldr	r2, [pc, #344]	; (8006dc0 <HAL_DMA_Abort_IT+0x3e4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d108      	bne.n	8006c7e <HAL_DMA_Abort_IT+0x2a2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0201 	bic.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e007      	b.n	8006c8e <HAL_DMA_Abort_IT+0x2b2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0201 	bic.w	r2, r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a3c      	ldr	r2, [pc, #240]	; (8006d84 <HAL_DMA_Abort_IT+0x3a8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d072      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a3a      	ldr	r2, [pc, #232]	; (8006d88 <HAL_DMA_Abort_IT+0x3ac>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d06d      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a39      	ldr	r2, [pc, #228]	; (8006d8c <HAL_DMA_Abort_IT+0x3b0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d068      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a37      	ldr	r2, [pc, #220]	; (8006d90 <HAL_DMA_Abort_IT+0x3b4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d063      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a36      	ldr	r2, [pc, #216]	; (8006d94 <HAL_DMA_Abort_IT+0x3b8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d05e      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a34      	ldr	r2, [pc, #208]	; (8006d98 <HAL_DMA_Abort_IT+0x3bc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d059      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a33      	ldr	r2, [pc, #204]	; (8006d9c <HAL_DMA_Abort_IT+0x3c0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d054      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a31      	ldr	r2, [pc, #196]	; (8006da0 <HAL_DMA_Abort_IT+0x3c4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d04f      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a30      	ldr	r2, [pc, #192]	; (8006da4 <HAL_DMA_Abort_IT+0x3c8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d04a      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a2e      	ldr	r2, [pc, #184]	; (8006da8 <HAL_DMA_Abort_IT+0x3cc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d045      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <HAL_DMA_Abort_IT+0x3d0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d040      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2b      	ldr	r2, [pc, #172]	; (8006db0 <HAL_DMA_Abort_IT+0x3d4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d03b      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2a      	ldr	r2, [pc, #168]	; (8006db4 <HAL_DMA_Abort_IT+0x3d8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d036      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a28      	ldr	r2, [pc, #160]	; (8006db8 <HAL_DMA_Abort_IT+0x3dc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d031      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a27      	ldr	r2, [pc, #156]	; (8006dbc <HAL_DMA_Abort_IT+0x3e0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d02c      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a25      	ldr	r2, [pc, #148]	; (8006dc0 <HAL_DMA_Abort_IT+0x3e4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d027      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a24      	ldr	r2, [pc, #144]	; (8006dc4 <HAL_DMA_Abort_IT+0x3e8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d022      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a22      	ldr	r2, [pc, #136]	; (8006dc8 <HAL_DMA_Abort_IT+0x3ec>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01d      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a21      	ldr	r2, [pc, #132]	; (8006dcc <HAL_DMA_Abort_IT+0x3f0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <HAL_DMA_Abort_IT+0x3f4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <HAL_DMA_Abort_IT+0x3f8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <HAL_DMA_Abort_IT+0x3fc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <HAL_DMA_Abort_IT+0x400>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_DMA_Abort_IT+0x3a2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a19      	ldr	r2, [pc, #100]	; (8006de0 <HAL_DMA_Abort_IT+0x404>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d132      	bne.n	8006de4 <HAL_DMA_Abort_IT+0x408>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e031      	b.n	8006de6 <HAL_DMA_Abort_IT+0x40a>
 8006d82:	bf00      	nop
 8006d84:	40020010 	.word	0x40020010
 8006d88:	40020028 	.word	0x40020028
 8006d8c:	40020040 	.word	0x40020040
 8006d90:	40020058 	.word	0x40020058
 8006d94:	40020070 	.word	0x40020070
 8006d98:	40020088 	.word	0x40020088
 8006d9c:	400200a0 	.word	0x400200a0
 8006da0:	400200b8 	.word	0x400200b8
 8006da4:	40020410 	.word	0x40020410
 8006da8:	40020428 	.word	0x40020428
 8006dac:	40020440 	.word	0x40020440
 8006db0:	40020458 	.word	0x40020458
 8006db4:	40020470 	.word	0x40020470
 8006db8:	40020488 	.word	0x40020488
 8006dbc:	400204a0 	.word	0x400204a0
 8006dc0:	400204b8 	.word	0x400204b8
 8006dc4:	58025408 	.word	0x58025408
 8006dc8:	5802541c 	.word	0x5802541c
 8006dcc:	58025430 	.word	0x58025430
 8006dd0:	58025444 	.word	0x58025444
 8006dd4:	58025458 	.word	0x58025458
 8006dd8:	5802546c 	.word	0x5802546c
 8006ddc:	58025480 	.word	0x58025480
 8006de0:	58025494 	.word	0x58025494
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d028      	beq.n	8006e3c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006df8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2201      	movs	r2, #1
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop

08006e68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e74:	4b67      	ldr	r3, [pc, #412]	; (8007014 <HAL_DMA_IRQHandler+0x1ac>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a67      	ldr	r2, [pc, #412]	; (8007018 <HAL_DMA_IRQHandler+0x1b0>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a5f      	ldr	r2, [pc, #380]	; (800701c <HAL_DMA_IRQHandler+0x1b4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d04a      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a5d      	ldr	r2, [pc, #372]	; (8007020 <HAL_DMA_IRQHandler+0x1b8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d045      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a5c      	ldr	r2, [pc, #368]	; (8007024 <HAL_DMA_IRQHandler+0x1bc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d040      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a5a      	ldr	r2, [pc, #360]	; (8007028 <HAL_DMA_IRQHandler+0x1c0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d03b      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a59      	ldr	r2, [pc, #356]	; (800702c <HAL_DMA_IRQHandler+0x1c4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d036      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a57      	ldr	r2, [pc, #348]	; (8007030 <HAL_DMA_IRQHandler+0x1c8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d031      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a56      	ldr	r2, [pc, #344]	; (8007034 <HAL_DMA_IRQHandler+0x1cc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d02c      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a54      	ldr	r2, [pc, #336]	; (8007038 <HAL_DMA_IRQHandler+0x1d0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d027      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a53      	ldr	r2, [pc, #332]	; (800703c <HAL_DMA_IRQHandler+0x1d4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d022      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a51      	ldr	r2, [pc, #324]	; (8007040 <HAL_DMA_IRQHandler+0x1d8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d01d      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a50      	ldr	r2, [pc, #320]	; (8007044 <HAL_DMA_IRQHandler+0x1dc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a4e      	ldr	r2, [pc, #312]	; (8007048 <HAL_DMA_IRQHandler+0x1e0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a4d      	ldr	r2, [pc, #308]	; (800704c <HAL_DMA_IRQHandler+0x1e4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a4b      	ldr	r2, [pc, #300]	; (8007050 <HAL_DMA_IRQHandler+0x1e8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a4a      	ldr	r2, [pc, #296]	; (8007054 <HAL_DMA_IRQHandler+0x1ec>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_DMA_IRQHandler+0xd2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a48      	ldr	r2, [pc, #288]	; (8007058 <HAL_DMA_IRQHandler+0x1f0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d101      	bne.n	8006f3e <HAL_DMA_IRQHandler+0xd6>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <HAL_DMA_IRQHandler+0xd8>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 842b 	beq.w	800779c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2208      	movs	r2, #8
 8006f50:	409a      	lsls	r2, r3
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80a2 	beq.w	80070a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a2e      	ldr	r2, [pc, #184]	; (800701c <HAL_DMA_IRQHandler+0x1b4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d04a      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <HAL_DMA_IRQHandler+0x1b8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d045      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a2b      	ldr	r2, [pc, #172]	; (8007024 <HAL_DMA_IRQHandler+0x1bc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d040      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2a      	ldr	r2, [pc, #168]	; (8007028 <HAL_DMA_IRQHandler+0x1c0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d03b      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a28      	ldr	r2, [pc, #160]	; (800702c <HAL_DMA_IRQHandler+0x1c4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d036      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a27      	ldr	r2, [pc, #156]	; (8007030 <HAL_DMA_IRQHandler+0x1c8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d031      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a25      	ldr	r2, [pc, #148]	; (8007034 <HAL_DMA_IRQHandler+0x1cc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d02c      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a24      	ldr	r2, [pc, #144]	; (8007038 <HAL_DMA_IRQHandler+0x1d0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d027      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a22      	ldr	r2, [pc, #136]	; (800703c <HAL_DMA_IRQHandler+0x1d4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_DMA_IRQHandler+0x1d8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d01d      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <HAL_DMA_IRQHandler+0x1dc>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <HAL_DMA_IRQHandler+0x1e0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1c      	ldr	r2, [pc, #112]	; (800704c <HAL_DMA_IRQHandler+0x1e4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <HAL_DMA_IRQHandler+0x1e8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a19      	ldr	r2, [pc, #100]	; (8007054 <HAL_DMA_IRQHandler+0x1ec>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x194>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_DMA_IRQHandler+0x1f0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d12f      	bne.n	800705c <HAL_DMA_IRQHandler+0x1f4>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	e02e      	b.n	8007070 <HAL_DMA_IRQHandler+0x208>
 8007012:	bf00      	nop
 8007014:	24000088 	.word	0x24000088
 8007018:	1b4e81b5 	.word	0x1b4e81b5
 800701c:	40020010 	.word	0x40020010
 8007020:	40020028 	.word	0x40020028
 8007024:	40020040 	.word	0x40020040
 8007028:	40020058 	.word	0x40020058
 800702c:	40020070 	.word	0x40020070
 8007030:	40020088 	.word	0x40020088
 8007034:	400200a0 	.word	0x400200a0
 8007038:	400200b8 	.word	0x400200b8
 800703c:	40020410 	.word	0x40020410
 8007040:	40020428 	.word	0x40020428
 8007044:	40020440 	.word	0x40020440
 8007048:	40020458 	.word	0x40020458
 800704c:	40020470 	.word	0x40020470
 8007050:	40020488 	.word	0x40020488
 8007054:	400204a0 	.word	0x400204a0
 8007058:	400204b8 	.word	0x400204b8
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0204 	bic.w	r2, r2, #4
 8007082:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	2208      	movs	r2, #8
 800708e:	409a      	lsls	r2, r3
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d06e      	beq.n	8007194 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a69      	ldr	r2, [pc, #420]	; (8007260 <HAL_DMA_IRQHandler+0x3f8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d04a      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a67      	ldr	r2, [pc, #412]	; (8007264 <HAL_DMA_IRQHandler+0x3fc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d045      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a66      	ldr	r2, [pc, #408]	; (8007268 <HAL_DMA_IRQHandler+0x400>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d040      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a64      	ldr	r2, [pc, #400]	; (800726c <HAL_DMA_IRQHandler+0x404>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d03b      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a63      	ldr	r2, [pc, #396]	; (8007270 <HAL_DMA_IRQHandler+0x408>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d036      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a61      	ldr	r2, [pc, #388]	; (8007274 <HAL_DMA_IRQHandler+0x40c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d031      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a60      	ldr	r2, [pc, #384]	; (8007278 <HAL_DMA_IRQHandler+0x410>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d02c      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5e      	ldr	r2, [pc, #376]	; (800727c <HAL_DMA_IRQHandler+0x414>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d027      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5d      	ldr	r2, [pc, #372]	; (8007280 <HAL_DMA_IRQHandler+0x418>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d022      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5b      	ldr	r2, [pc, #364]	; (8007284 <HAL_DMA_IRQHandler+0x41c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d01d      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a5a      	ldr	r2, [pc, #360]	; (8007288 <HAL_DMA_IRQHandler+0x420>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d018      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a58      	ldr	r2, [pc, #352]	; (800728c <HAL_DMA_IRQHandler+0x424>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d013      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a57      	ldr	r2, [pc, #348]	; (8007290 <HAL_DMA_IRQHandler+0x428>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00e      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a55      	ldr	r2, [pc, #340]	; (8007294 <HAL_DMA_IRQHandler+0x42c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d009      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a54      	ldr	r2, [pc, #336]	; (8007298 <HAL_DMA_IRQHandler+0x430>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d004      	beq.n	8007156 <HAL_DMA_IRQHandler+0x2ee>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a52      	ldr	r2, [pc, #328]	; (800729c <HAL_DMA_IRQHandler+0x434>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d10a      	bne.n	800716c <HAL_DMA_IRQHandler+0x304>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007160:	2b00      	cmp	r3, #0
 8007162:	bf14      	ite	ne
 8007164:	2301      	movne	r3, #1
 8007166:	2300      	moveq	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	e003      	b.n	8007174 <HAL_DMA_IRQHandler+0x30c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2201      	movs	r2, #1
 8007182:	409a      	lsls	r2, r3
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	f043 0202 	orr.w	r2, r3, #2
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	2204      	movs	r2, #4
 800719e:	409a      	lsls	r2, r3
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	4013      	ands	r3, r2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 808f 	beq.w	80072c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2c      	ldr	r2, [pc, #176]	; (8007260 <HAL_DMA_IRQHandler+0x3f8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d04a      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	; (8007264 <HAL_DMA_IRQHandler+0x3fc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d045      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a29      	ldr	r2, [pc, #164]	; (8007268 <HAL_DMA_IRQHandler+0x400>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d040      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a27      	ldr	r2, [pc, #156]	; (800726c <HAL_DMA_IRQHandler+0x404>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d03b      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a26      	ldr	r2, [pc, #152]	; (8007270 <HAL_DMA_IRQHandler+0x408>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d036      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a24      	ldr	r2, [pc, #144]	; (8007274 <HAL_DMA_IRQHandler+0x40c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d031      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a23      	ldr	r2, [pc, #140]	; (8007278 <HAL_DMA_IRQHandler+0x410>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d02c      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a21      	ldr	r2, [pc, #132]	; (800727c <HAL_DMA_IRQHandler+0x414>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d027      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a20      	ldr	r2, [pc, #128]	; (8007280 <HAL_DMA_IRQHandler+0x418>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d022      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <HAL_DMA_IRQHandler+0x41c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d01d      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <HAL_DMA_IRQHandler+0x420>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d018      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1b      	ldr	r2, [pc, #108]	; (800728c <HAL_DMA_IRQHandler+0x424>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1a      	ldr	r2, [pc, #104]	; (8007290 <HAL_DMA_IRQHandler+0x428>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00e      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a18      	ldr	r2, [pc, #96]	; (8007294 <HAL_DMA_IRQHandler+0x42c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d009      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a17      	ldr	r2, [pc, #92]	; (8007298 <HAL_DMA_IRQHandler+0x430>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d004      	beq.n	800724a <HAL_DMA_IRQHandler+0x3e2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a15      	ldr	r2, [pc, #84]	; (800729c <HAL_DMA_IRQHandler+0x434>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d12a      	bne.n	80072a0 <HAL_DMA_IRQHandler+0x438>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	bf14      	ite	ne
 8007258:	2301      	movne	r3, #1
 800725a:	2300      	moveq	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	e023      	b.n	80072a8 <HAL_DMA_IRQHandler+0x440>
 8007260:	40020010 	.word	0x40020010
 8007264:	40020028 	.word	0x40020028
 8007268:	40020040 	.word	0x40020040
 800726c:	40020058 	.word	0x40020058
 8007270:	40020070 	.word	0x40020070
 8007274:	40020088 	.word	0x40020088
 8007278:	400200a0 	.word	0x400200a0
 800727c:	400200b8 	.word	0x400200b8
 8007280:	40020410 	.word	0x40020410
 8007284:	40020428 	.word	0x40020428
 8007288:	40020440 	.word	0x40020440
 800728c:	40020458 	.word	0x40020458
 8007290:	40020470 	.word	0x40020470
 8007294:	40020488 	.word	0x40020488
 8007298:	400204a0 	.word	0x400204a0
 800729c:	400204b8 	.word	0x400204b8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00d      	beq.n	80072c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	2204      	movs	r2, #4
 80072b6:	409a      	lsls	r2, r3
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c0:	f043 0204 	orr.w	r2, r3, #4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2210      	movs	r2, #16
 80072d2:	409a      	lsls	r2, r3
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	4013      	ands	r3, r2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 80a6 	beq.w	800742a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a85      	ldr	r2, [pc, #532]	; (80074f8 <HAL_DMA_IRQHandler+0x690>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d04a      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a83      	ldr	r2, [pc, #524]	; (80074fc <HAL_DMA_IRQHandler+0x694>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d045      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a82      	ldr	r2, [pc, #520]	; (8007500 <HAL_DMA_IRQHandler+0x698>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d040      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a80      	ldr	r2, [pc, #512]	; (8007504 <HAL_DMA_IRQHandler+0x69c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d03b      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7f      	ldr	r2, [pc, #508]	; (8007508 <HAL_DMA_IRQHandler+0x6a0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d036      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a7d      	ldr	r2, [pc, #500]	; (800750c <HAL_DMA_IRQHandler+0x6a4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d031      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a7c      	ldr	r2, [pc, #496]	; (8007510 <HAL_DMA_IRQHandler+0x6a8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d02c      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a7a      	ldr	r2, [pc, #488]	; (8007514 <HAL_DMA_IRQHandler+0x6ac>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d027      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a79      	ldr	r2, [pc, #484]	; (8007518 <HAL_DMA_IRQHandler+0x6b0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d022      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a77      	ldr	r2, [pc, #476]	; (800751c <HAL_DMA_IRQHandler+0x6b4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a76      	ldr	r2, [pc, #472]	; (8007520 <HAL_DMA_IRQHandler+0x6b8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a74      	ldr	r2, [pc, #464]	; (8007524 <HAL_DMA_IRQHandler+0x6bc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a73      	ldr	r2, [pc, #460]	; (8007528 <HAL_DMA_IRQHandler+0x6c0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a71      	ldr	r2, [pc, #452]	; (800752c <HAL_DMA_IRQHandler+0x6c4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a70      	ldr	r2, [pc, #448]	; (8007530 <HAL_DMA_IRQHandler+0x6c8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_DMA_IRQHandler+0x516>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a6e      	ldr	r2, [pc, #440]	; (8007534 <HAL_DMA_IRQHandler+0x6cc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d10a      	bne.n	8007394 <HAL_DMA_IRQHandler+0x52c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	bf14      	ite	ne
 800738c:	2301      	movne	r3, #1
 800738e:	2300      	moveq	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	e009      	b.n	80073a8 <HAL_DMA_IRQHandler+0x540>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bf14      	ite	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	2300      	moveq	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d03e      	beq.n	800742a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2210      	movs	r2, #16
 80073b6:	409a      	lsls	r2, r3
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d018      	beq.n	80073fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d024      	beq.n	800742a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	e01f      	b.n	800742a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01b      	beq.n	800742a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
 80073fa:	e016      	b.n	800742a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d107      	bne.n	800741a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0208 	bic.w	r2, r2, #8
 8007418:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	2220      	movs	r2, #32
 8007434:	409a      	lsls	r2, r3
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4013      	ands	r3, r2
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8110 	beq.w	8007660 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a2c      	ldr	r2, [pc, #176]	; (80074f8 <HAL_DMA_IRQHandler+0x690>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d04a      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a2b      	ldr	r2, [pc, #172]	; (80074fc <HAL_DMA_IRQHandler+0x694>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d045      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a29      	ldr	r2, [pc, #164]	; (8007500 <HAL_DMA_IRQHandler+0x698>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d040      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a28      	ldr	r2, [pc, #160]	; (8007504 <HAL_DMA_IRQHandler+0x69c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d03b      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a26      	ldr	r2, [pc, #152]	; (8007508 <HAL_DMA_IRQHandler+0x6a0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d036      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a25      	ldr	r2, [pc, #148]	; (800750c <HAL_DMA_IRQHandler+0x6a4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d031      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a23      	ldr	r2, [pc, #140]	; (8007510 <HAL_DMA_IRQHandler+0x6a8>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d02c      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a22      	ldr	r2, [pc, #136]	; (8007514 <HAL_DMA_IRQHandler+0x6ac>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d027      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a20      	ldr	r2, [pc, #128]	; (8007518 <HAL_DMA_IRQHandler+0x6b0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d022      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1f      	ldr	r2, [pc, #124]	; (800751c <HAL_DMA_IRQHandler+0x6b4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d01d      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1d      	ldr	r2, [pc, #116]	; (8007520 <HAL_DMA_IRQHandler+0x6b8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d018      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <HAL_DMA_IRQHandler+0x6bc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <HAL_DMA_IRQHandler+0x6c0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00e      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a19      	ldr	r2, [pc, #100]	; (800752c <HAL_DMA_IRQHandler+0x6c4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d009      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a17      	ldr	r2, [pc, #92]	; (8007530 <HAL_DMA_IRQHandler+0x6c8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d004      	beq.n	80074e0 <HAL_DMA_IRQHandler+0x678>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a16      	ldr	r2, [pc, #88]	; (8007534 <HAL_DMA_IRQHandler+0x6cc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d12b      	bne.n	8007538 <HAL_DMA_IRQHandler+0x6d0>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf14      	ite	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	2300      	moveq	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	e02a      	b.n	800754c <HAL_DMA_IRQHandler+0x6e4>
 80074f6:	bf00      	nop
 80074f8:	40020010 	.word	0x40020010
 80074fc:	40020028 	.word	0x40020028
 8007500:	40020040 	.word	0x40020040
 8007504:	40020058 	.word	0x40020058
 8007508:	40020070 	.word	0x40020070
 800750c:	40020088 	.word	0x40020088
 8007510:	400200a0 	.word	0x400200a0
 8007514:	400200b8 	.word	0x400200b8
 8007518:	40020410 	.word	0x40020410
 800751c:	40020428 	.word	0x40020428
 8007520:	40020440 	.word	0x40020440
 8007524:	40020458 	.word	0x40020458
 8007528:	40020470 	.word	0x40020470
 800752c:	40020488 	.word	0x40020488
 8007530:	400204a0 	.word	0x400204a0
 8007534:	400204b8 	.word	0x400204b8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8087 	beq.w	8007660 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2220      	movs	r2, #32
 800755c:	409a      	lsls	r2, r3
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b04      	cmp	r3, #4
 800756c:	d139      	bne.n	80075e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0216 	bic.w	r2, r2, #22
 800757c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800758c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <HAL_DMA_IRQHandler+0x736>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0208 	bic.w	r2, r2, #8
 80075ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	223f      	movs	r2, #63	; 0x3f
 80075b8:	409a      	lsls	r2, r3
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 834a 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
          }
          return;
 80075e0:	e344      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d018      	beq.n	8007622 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d108      	bne.n	8007610 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02c      	beq.n	8007660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	e027      	b.n	8007660 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d023      	beq.n	8007660 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
 8007620:	e01e      	b.n	8007660 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10f      	bne.n	8007650 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0210 	bic.w	r2, r2, #16
 800763e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8306 	beq.w	8007c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8088 	beq.w	8007788 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a7a      	ldr	r2, [pc, #488]	; (8007870 <HAL_DMA_IRQHandler+0xa08>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d04a      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a79      	ldr	r2, [pc, #484]	; (8007874 <HAL_DMA_IRQHandler+0xa0c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d045      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a77      	ldr	r2, [pc, #476]	; (8007878 <HAL_DMA_IRQHandler+0xa10>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d040      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a76      	ldr	r2, [pc, #472]	; (800787c <HAL_DMA_IRQHandler+0xa14>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d03b      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a74      	ldr	r2, [pc, #464]	; (8007880 <HAL_DMA_IRQHandler+0xa18>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d036      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a73      	ldr	r2, [pc, #460]	; (8007884 <HAL_DMA_IRQHandler+0xa1c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d031      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a71      	ldr	r2, [pc, #452]	; (8007888 <HAL_DMA_IRQHandler+0xa20>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02c      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a70      	ldr	r2, [pc, #448]	; (800788c <HAL_DMA_IRQHandler+0xa24>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d027      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a6e      	ldr	r2, [pc, #440]	; (8007890 <HAL_DMA_IRQHandler+0xa28>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d022      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a6d      	ldr	r2, [pc, #436]	; (8007894 <HAL_DMA_IRQHandler+0xa2c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d01d      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a6b      	ldr	r2, [pc, #428]	; (8007898 <HAL_DMA_IRQHandler+0xa30>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d018      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a6a      	ldr	r2, [pc, #424]	; (800789c <HAL_DMA_IRQHandler+0xa34>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a68      	ldr	r2, [pc, #416]	; (80078a0 <HAL_DMA_IRQHandler+0xa38>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00e      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a67      	ldr	r2, [pc, #412]	; (80078a4 <HAL_DMA_IRQHandler+0xa3c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d009      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a65      	ldr	r2, [pc, #404]	; (80078a8 <HAL_DMA_IRQHandler+0xa40>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <HAL_DMA_IRQHandler+0x8b8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a64      	ldr	r2, [pc, #400]	; (80078ac <HAL_DMA_IRQHandler+0xa44>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d108      	bne.n	8007732 <HAL_DMA_IRQHandler+0x8ca>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	e007      	b.n	8007742 <HAL_DMA_IRQHandler+0x8da>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	429a      	cmp	r2, r3
 800774c:	d307      	bcc.n	800775e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f2      	bne.n	8007742 <HAL_DMA_IRQHandler+0x8da>
 800775c:	e000      	b.n	8007760 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800775e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2203      	movs	r2, #3
 8007772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007776:	e003      	b.n	8007780 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8272 	beq.w	8007c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	e26c      	b.n	8007c76 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a43      	ldr	r2, [pc, #268]	; (80078b0 <HAL_DMA_IRQHandler+0xa48>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d022      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a42      	ldr	r2, [pc, #264]	; (80078b4 <HAL_DMA_IRQHandler+0xa4c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d01d      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a40      	ldr	r2, [pc, #256]	; (80078b8 <HAL_DMA_IRQHandler+0xa50>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d018      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a3f      	ldr	r2, [pc, #252]	; (80078bc <HAL_DMA_IRQHandler+0xa54>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3d      	ldr	r2, [pc, #244]	; (80078c0 <HAL_DMA_IRQHandler+0xa58>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00e      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3c      	ldr	r2, [pc, #240]	; (80078c4 <HAL_DMA_IRQHandler+0xa5c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d009      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3a      	ldr	r2, [pc, #232]	; (80078c8 <HAL_DMA_IRQHandler+0xa60>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_DMA_IRQHandler+0x984>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a39      	ldr	r2, [pc, #228]	; (80078cc <HAL_DMA_IRQHandler+0xa64>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d101      	bne.n	80077f0 <HAL_DMA_IRQHandler+0x988>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <HAL_DMA_IRQHandler+0x98a>
 80077f0:	2300      	movs	r3, #0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 823f 	beq.w	8007c76 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2204      	movs	r2, #4
 800780a:	409a      	lsls	r2, r3
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4013      	ands	r3, r2
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 80cd 	beq.w	80079b0 <HAL_DMA_IRQHandler+0xb48>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80c7 	beq.w	80079b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	2204      	movs	r2, #4
 800782c:	409a      	lsls	r2, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d049      	beq.n	80078d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8210 	beq.w	8007c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007858:	e20a      	b.n	8007c70 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8206 	beq.w	8007c70 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800786c:	e200      	b.n	8007c70 <HAL_DMA_IRQHandler+0xe08>
 800786e:	bf00      	nop
 8007870:	40020010 	.word	0x40020010
 8007874:	40020028 	.word	0x40020028
 8007878:	40020040 	.word	0x40020040
 800787c:	40020058 	.word	0x40020058
 8007880:	40020070 	.word	0x40020070
 8007884:	40020088 	.word	0x40020088
 8007888:	400200a0 	.word	0x400200a0
 800788c:	400200b8 	.word	0x400200b8
 8007890:	40020410 	.word	0x40020410
 8007894:	40020428 	.word	0x40020428
 8007898:	40020440 	.word	0x40020440
 800789c:	40020458 	.word	0x40020458
 80078a0:	40020470 	.word	0x40020470
 80078a4:	40020488 	.word	0x40020488
 80078a8:	400204a0 	.word	0x400204a0
 80078ac:	400204b8 	.word	0x400204b8
 80078b0:	58025408 	.word	0x58025408
 80078b4:	5802541c 	.word	0x5802541c
 80078b8:	58025430 	.word	0x58025430
 80078bc:	58025444 	.word	0x58025444
 80078c0:	58025458 	.word	0x58025458
 80078c4:	5802546c 	.word	0x5802546c
 80078c8:	58025480 	.word	0x58025480
 80078cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d160      	bne.n	800799c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a7f      	ldr	r2, [pc, #508]	; (8007adc <HAL_DMA_IRQHandler+0xc74>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d04a      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a7d      	ldr	r2, [pc, #500]	; (8007ae0 <HAL_DMA_IRQHandler+0xc78>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d045      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a7c      	ldr	r2, [pc, #496]	; (8007ae4 <HAL_DMA_IRQHandler+0xc7c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d040      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a7a      	ldr	r2, [pc, #488]	; (8007ae8 <HAL_DMA_IRQHandler+0xc80>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d03b      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a79      	ldr	r2, [pc, #484]	; (8007aec <HAL_DMA_IRQHandler+0xc84>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d036      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a77      	ldr	r2, [pc, #476]	; (8007af0 <HAL_DMA_IRQHandler+0xc88>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d031      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a76      	ldr	r2, [pc, #472]	; (8007af4 <HAL_DMA_IRQHandler+0xc8c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d02c      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a74      	ldr	r2, [pc, #464]	; (8007af8 <HAL_DMA_IRQHandler+0xc90>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d027      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a73      	ldr	r2, [pc, #460]	; (8007afc <HAL_DMA_IRQHandler+0xc94>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d022      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a71      	ldr	r2, [pc, #452]	; (8007b00 <HAL_DMA_IRQHandler+0xc98>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d01d      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a70      	ldr	r2, [pc, #448]	; (8007b04 <HAL_DMA_IRQHandler+0xc9c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d018      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a6e      	ldr	r2, [pc, #440]	; (8007b08 <HAL_DMA_IRQHandler+0xca0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a6d      	ldr	r2, [pc, #436]	; (8007b0c <HAL_DMA_IRQHandler+0xca4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00e      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6b      	ldr	r2, [pc, #428]	; (8007b10 <HAL_DMA_IRQHandler+0xca8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d009      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a6a      	ldr	r2, [pc, #424]	; (8007b14 <HAL_DMA_IRQHandler+0xcac>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d004      	beq.n	800797a <HAL_DMA_IRQHandler+0xb12>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a68      	ldr	r2, [pc, #416]	; (8007b18 <HAL_DMA_IRQHandler+0xcb0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d108      	bne.n	800798c <HAL_DMA_IRQHandler+0xb24>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0208 	bic.w	r2, r2, #8
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e007      	b.n	800799c <HAL_DMA_IRQHandler+0xb34>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0204 	bic.w	r2, r2, #4
 800799a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8165 	beq.w	8007c70 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ae:	e15f      	b.n	8007c70 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2202      	movs	r2, #2
 80079ba:	409a      	lsls	r2, r3
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	4013      	ands	r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80c5 	beq.w	8007b50 <HAL_DMA_IRQHandler+0xce8>
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80bf 	beq.w	8007b50 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	2202      	movs	r2, #2
 80079dc:	409a      	lsls	r2, r3
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d018      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 813a 	beq.w	8007c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a08:	e134      	b.n	8007c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 8130 	beq.w	8007c74 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a1c:	e12a      	b.n	8007c74 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 8089 	bne.w	8007b3c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a2b      	ldr	r2, [pc, #172]	; (8007adc <HAL_DMA_IRQHandler+0xc74>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d04a      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a29      	ldr	r2, [pc, #164]	; (8007ae0 <HAL_DMA_IRQHandler+0xc78>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d045      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a28      	ldr	r2, [pc, #160]	; (8007ae4 <HAL_DMA_IRQHandler+0xc7c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d040      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a26      	ldr	r2, [pc, #152]	; (8007ae8 <HAL_DMA_IRQHandler+0xc80>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d03b      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a25      	ldr	r2, [pc, #148]	; (8007aec <HAL_DMA_IRQHandler+0xc84>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d036      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a23      	ldr	r2, [pc, #140]	; (8007af0 <HAL_DMA_IRQHandler+0xc88>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d031      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a22      	ldr	r2, [pc, #136]	; (8007af4 <HAL_DMA_IRQHandler+0xc8c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d02c      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a20      	ldr	r2, [pc, #128]	; (8007af8 <HAL_DMA_IRQHandler+0xc90>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d027      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1f      	ldr	r2, [pc, #124]	; (8007afc <HAL_DMA_IRQHandler+0xc94>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1d      	ldr	r2, [pc, #116]	; (8007b00 <HAL_DMA_IRQHandler+0xc98>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d01d      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <HAL_DMA_IRQHandler+0xc9c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d018      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <HAL_DMA_IRQHandler+0xca0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a19      	ldr	r2, [pc, #100]	; (8007b0c <HAL_DMA_IRQHandler+0xca4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00e      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <HAL_DMA_IRQHandler+0xca8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d009      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <HAL_DMA_IRQHandler+0xcac>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d004      	beq.n	8007aca <HAL_DMA_IRQHandler+0xc62>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <HAL_DMA_IRQHandler+0xcb0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d128      	bne.n	8007b1c <HAL_DMA_IRQHandler+0xcb4>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0214 	bic.w	r2, r2, #20
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e027      	b.n	8007b2c <HAL_DMA_IRQHandler+0xcc4>
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 020a 	bic.w	r2, r2, #10
 8007b2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8097 	beq.w	8007c74 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b4e:	e091      	b.n	8007c74 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2208      	movs	r2, #8
 8007b5a:	409a      	lsls	r2, r3
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8088 	beq.w	8007c76 <HAL_DMA_IRQHandler+0xe0e>
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8082 	beq.w	8007c76 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a41      	ldr	r2, [pc, #260]	; (8007c7c <HAL_DMA_IRQHandler+0xe14>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d04a      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a3f      	ldr	r2, [pc, #252]	; (8007c80 <HAL_DMA_IRQHandler+0xe18>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d045      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a3e      	ldr	r2, [pc, #248]	; (8007c84 <HAL_DMA_IRQHandler+0xe1c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d040      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a3c      	ldr	r2, [pc, #240]	; (8007c88 <HAL_DMA_IRQHandler+0xe20>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d03b      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a3b      	ldr	r2, [pc, #236]	; (8007c8c <HAL_DMA_IRQHandler+0xe24>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d036      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a39      	ldr	r2, [pc, #228]	; (8007c90 <HAL_DMA_IRQHandler+0xe28>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d031      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a38      	ldr	r2, [pc, #224]	; (8007c94 <HAL_DMA_IRQHandler+0xe2c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d02c      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a36      	ldr	r2, [pc, #216]	; (8007c98 <HAL_DMA_IRQHandler+0xe30>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d027      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a35      	ldr	r2, [pc, #212]	; (8007c9c <HAL_DMA_IRQHandler+0xe34>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d022      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a33      	ldr	r2, [pc, #204]	; (8007ca0 <HAL_DMA_IRQHandler+0xe38>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01d      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a32      	ldr	r2, [pc, #200]	; (8007ca4 <HAL_DMA_IRQHandler+0xe3c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d018      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a30      	ldr	r2, [pc, #192]	; (8007ca8 <HAL_DMA_IRQHandler+0xe40>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d013      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2f      	ldr	r2, [pc, #188]	; (8007cac <HAL_DMA_IRQHandler+0xe44>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d00e      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a2d      	ldr	r2, [pc, #180]	; (8007cb0 <HAL_DMA_IRQHandler+0xe48>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d009      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a2c      	ldr	r2, [pc, #176]	; (8007cb4 <HAL_DMA_IRQHandler+0xe4c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d004      	beq.n	8007c12 <HAL_DMA_IRQHandler+0xdaa>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <HAL_DMA_IRQHandler+0xe50>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d108      	bne.n	8007c24 <HAL_DMA_IRQHandler+0xdbc>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 021c 	bic.w	r2, r2, #28
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e007      	b.n	8007c34 <HAL_DMA_IRQHandler+0xdcc>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 020e 	bic.w	r2, r2, #14
 8007c32:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	409a      	lsls	r2, r3
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d009      	beq.n	8007c76 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
 8007c6a:	e004      	b.n	8007c76 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c6c:	bf00      	nop
 8007c6e:	e002      	b.n	8007c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c70:	bf00      	nop
 8007c72:	e000      	b.n	8007c76 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c74:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c76:	3728      	adds	r7, #40	; 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40020010 	.word	0x40020010
 8007c80:	40020028 	.word	0x40020028
 8007c84:	40020040 	.word	0x40020040
 8007c88:	40020058 	.word	0x40020058
 8007c8c:	40020070 	.word	0x40020070
 8007c90:	40020088 	.word	0x40020088
 8007c94:	400200a0 	.word	0x400200a0
 8007c98:	400200b8 	.word	0x400200b8
 8007c9c:	40020410 	.word	0x40020410
 8007ca0:	40020428 	.word	0x40020428
 8007ca4:	40020440 	.word	0x40020440
 8007ca8:	40020458 	.word	0x40020458
 8007cac:	40020470 	.word	0x40020470
 8007cb0:	40020488 	.word	0x40020488
 8007cb4:	400204a0 	.word	0x400204a0
 8007cb8:	400204b8 	.word	0x400204b8

08007cbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a7f      	ldr	r2, [pc, #508]	; (8007ed8 <DMA_SetConfig+0x21c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d072      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a7d      	ldr	r2, [pc, #500]	; (8007edc <DMA_SetConfig+0x220>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d06d      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a7c      	ldr	r2, [pc, #496]	; (8007ee0 <DMA_SetConfig+0x224>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d068      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a7a      	ldr	r2, [pc, #488]	; (8007ee4 <DMA_SetConfig+0x228>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d063      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a79      	ldr	r2, [pc, #484]	; (8007ee8 <DMA_SetConfig+0x22c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d05e      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a77      	ldr	r2, [pc, #476]	; (8007eec <DMA_SetConfig+0x230>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d059      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a76      	ldr	r2, [pc, #472]	; (8007ef0 <DMA_SetConfig+0x234>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d054      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a74      	ldr	r2, [pc, #464]	; (8007ef4 <DMA_SetConfig+0x238>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d04f      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a73      	ldr	r2, [pc, #460]	; (8007ef8 <DMA_SetConfig+0x23c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d04a      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a71      	ldr	r2, [pc, #452]	; (8007efc <DMA_SetConfig+0x240>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d045      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a70      	ldr	r2, [pc, #448]	; (8007f00 <DMA_SetConfig+0x244>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d040      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a6e      	ldr	r2, [pc, #440]	; (8007f04 <DMA_SetConfig+0x248>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d03b      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a6d      	ldr	r2, [pc, #436]	; (8007f08 <DMA_SetConfig+0x24c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d036      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a6b      	ldr	r2, [pc, #428]	; (8007f0c <DMA_SetConfig+0x250>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d031      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a6a      	ldr	r2, [pc, #424]	; (8007f10 <DMA_SetConfig+0x254>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d02c      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a68      	ldr	r2, [pc, #416]	; (8007f14 <DMA_SetConfig+0x258>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d027      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a67      	ldr	r2, [pc, #412]	; (8007f18 <DMA_SetConfig+0x25c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d022      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a65      	ldr	r2, [pc, #404]	; (8007f1c <DMA_SetConfig+0x260>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01d      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a64      	ldr	r2, [pc, #400]	; (8007f20 <DMA_SetConfig+0x264>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d018      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a62      	ldr	r2, [pc, #392]	; (8007f24 <DMA_SetConfig+0x268>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a61      	ldr	r2, [pc, #388]	; (8007f28 <DMA_SetConfig+0x26c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00e      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a5f      	ldr	r2, [pc, #380]	; (8007f2c <DMA_SetConfig+0x270>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d009      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a5e      	ldr	r2, [pc, #376]	; (8007f30 <DMA_SetConfig+0x274>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d004      	beq.n	8007dc6 <DMA_SetConfig+0x10a>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a5c      	ldr	r2, [pc, #368]	; (8007f34 <DMA_SetConfig+0x278>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d101      	bne.n	8007dca <DMA_SetConfig+0x10e>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <DMA_SetConfig+0x110>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00d      	beq.n	8007dec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007dd8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007dea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a39      	ldr	r2, [pc, #228]	; (8007ed8 <DMA_SetConfig+0x21c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d04a      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a38      	ldr	r2, [pc, #224]	; (8007edc <DMA_SetConfig+0x220>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d045      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a36      	ldr	r2, [pc, #216]	; (8007ee0 <DMA_SetConfig+0x224>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d040      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a35      	ldr	r2, [pc, #212]	; (8007ee4 <DMA_SetConfig+0x228>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d03b      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <DMA_SetConfig+0x22c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d036      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a32      	ldr	r2, [pc, #200]	; (8007eec <DMA_SetConfig+0x230>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d031      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a30      	ldr	r2, [pc, #192]	; (8007ef0 <DMA_SetConfig+0x234>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d02c      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a2f      	ldr	r2, [pc, #188]	; (8007ef4 <DMA_SetConfig+0x238>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d027      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a2d      	ldr	r2, [pc, #180]	; (8007ef8 <DMA_SetConfig+0x23c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d022      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a2c      	ldr	r2, [pc, #176]	; (8007efc <DMA_SetConfig+0x240>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d01d      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <DMA_SetConfig+0x244>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d018      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <DMA_SetConfig+0x248>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a27      	ldr	r2, [pc, #156]	; (8007f08 <DMA_SetConfig+0x24c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00e      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <DMA_SetConfig+0x250>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d009      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a24      	ldr	r2, [pc, #144]	; (8007f10 <DMA_SetConfig+0x254>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <DMA_SetConfig+0x1d0>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a23      	ldr	r2, [pc, #140]	; (8007f14 <DMA_SetConfig+0x258>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d101      	bne.n	8007e90 <DMA_SetConfig+0x1d4>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <DMA_SetConfig+0x1d6>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d059      	beq.n	8007f4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9a:	f003 031f 	and.w	r3, r3, #31
 8007e9e:	223f      	movs	r2, #63	; 0x3f
 8007ea0:	409a      	lsls	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eb4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d138      	bne.n	8007f38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ed6:	e086      	b.n	8007fe6 <DMA_SetConfig+0x32a>
 8007ed8:	40020010 	.word	0x40020010
 8007edc:	40020028 	.word	0x40020028
 8007ee0:	40020040 	.word	0x40020040
 8007ee4:	40020058 	.word	0x40020058
 8007ee8:	40020070 	.word	0x40020070
 8007eec:	40020088 	.word	0x40020088
 8007ef0:	400200a0 	.word	0x400200a0
 8007ef4:	400200b8 	.word	0x400200b8
 8007ef8:	40020410 	.word	0x40020410
 8007efc:	40020428 	.word	0x40020428
 8007f00:	40020440 	.word	0x40020440
 8007f04:	40020458 	.word	0x40020458
 8007f08:	40020470 	.word	0x40020470
 8007f0c:	40020488 	.word	0x40020488
 8007f10:	400204a0 	.word	0x400204a0
 8007f14:	400204b8 	.word	0x400204b8
 8007f18:	58025408 	.word	0x58025408
 8007f1c:	5802541c 	.word	0x5802541c
 8007f20:	58025430 	.word	0x58025430
 8007f24:	58025444 	.word	0x58025444
 8007f28:	58025458 	.word	0x58025458
 8007f2c:	5802546c 	.word	0x5802546c
 8007f30:	58025480 	.word	0x58025480
 8007f34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	60da      	str	r2, [r3, #12]
}
 8007f48:	e04d      	b.n	8007fe6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <DMA_SetConfig+0x338>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d022      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a27      	ldr	r2, [pc, #156]	; (8007ff8 <DMA_SetConfig+0x33c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d01d      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a26      	ldr	r2, [pc, #152]	; (8007ffc <DMA_SetConfig+0x340>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d018      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a24      	ldr	r2, [pc, #144]	; (8008000 <DMA_SetConfig+0x344>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a23      	ldr	r2, [pc, #140]	; (8008004 <DMA_SetConfig+0x348>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00e      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a21      	ldr	r2, [pc, #132]	; (8008008 <DMA_SetConfig+0x34c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d009      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a20      	ldr	r2, [pc, #128]	; (800800c <DMA_SetConfig+0x350>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d004      	beq.n	8007f9a <DMA_SetConfig+0x2de>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1e      	ldr	r2, [pc, #120]	; (8008010 <DMA_SetConfig+0x354>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d101      	bne.n	8007f9e <DMA_SetConfig+0x2e2>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <DMA_SetConfig+0x2e4>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d020      	beq.n	8007fe6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	2201      	movs	r2, #1
 8007fae:	409a      	lsls	r2, r3
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d108      	bne.n	8007fd6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	60da      	str	r2, [r3, #12]
}
 8007fd4:	e007      	b.n	8007fe6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	60da      	str	r2, [r3, #12]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	58025408 	.word	0x58025408
 8007ff8:	5802541c 	.word	0x5802541c
 8007ffc:	58025430 	.word	0x58025430
 8008000:	58025444 	.word	0x58025444
 8008004:	58025458 	.word	0x58025458
 8008008:	5802546c 	.word	0x5802546c
 800800c:	58025480 	.word	0x58025480
 8008010:	58025494 	.word	0x58025494

08008014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a42      	ldr	r2, [pc, #264]	; (800812c <DMA_CalcBaseAndBitshift+0x118>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d04a      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a41      	ldr	r2, [pc, #260]	; (8008130 <DMA_CalcBaseAndBitshift+0x11c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d045      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a3f      	ldr	r2, [pc, #252]	; (8008134 <DMA_CalcBaseAndBitshift+0x120>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d040      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a3e      	ldr	r2, [pc, #248]	; (8008138 <DMA_CalcBaseAndBitshift+0x124>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d03b      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a3c      	ldr	r2, [pc, #240]	; (800813c <DMA_CalcBaseAndBitshift+0x128>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d036      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a3b      	ldr	r2, [pc, #236]	; (8008140 <DMA_CalcBaseAndBitshift+0x12c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d031      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a39      	ldr	r2, [pc, #228]	; (8008144 <DMA_CalcBaseAndBitshift+0x130>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d02c      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a38      	ldr	r2, [pc, #224]	; (8008148 <DMA_CalcBaseAndBitshift+0x134>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d027      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a36      	ldr	r2, [pc, #216]	; (800814c <DMA_CalcBaseAndBitshift+0x138>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d022      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a35      	ldr	r2, [pc, #212]	; (8008150 <DMA_CalcBaseAndBitshift+0x13c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d01d      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a33      	ldr	r2, [pc, #204]	; (8008154 <DMA_CalcBaseAndBitshift+0x140>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d018      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a32      	ldr	r2, [pc, #200]	; (8008158 <DMA_CalcBaseAndBitshift+0x144>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a30      	ldr	r2, [pc, #192]	; (800815c <DMA_CalcBaseAndBitshift+0x148>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00e      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a2f      	ldr	r2, [pc, #188]	; (8008160 <DMA_CalcBaseAndBitshift+0x14c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d009      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a2d      	ldr	r2, [pc, #180]	; (8008164 <DMA_CalcBaseAndBitshift+0x150>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <DMA_CalcBaseAndBitshift+0xa8>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a2c      	ldr	r2, [pc, #176]	; (8008168 <DMA_CalcBaseAndBitshift+0x154>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d101      	bne.n	80080c0 <DMA_CalcBaseAndBitshift+0xac>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <DMA_CalcBaseAndBitshift+0xae>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d024      	beq.n	8008110 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	3b10      	subs	r3, #16
 80080ce:	4a27      	ldr	r2, [pc, #156]	; (800816c <DMA_CalcBaseAndBitshift+0x158>)
 80080d0:	fba2 2303 	umull	r2, r3, r2, r3
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	4a24      	ldr	r2, [pc, #144]	; (8008170 <DMA_CalcBaseAndBitshift+0x15c>)
 80080e0:	5cd3      	ldrb	r3, [r2, r3]
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d908      	bls.n	8008100 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	4b1f      	ldr	r3, [pc, #124]	; (8008174 <DMA_CalcBaseAndBitshift+0x160>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	659a      	str	r2, [r3, #88]	; 0x58
 80080fe:	e00d      	b.n	800811c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <DMA_CalcBaseAndBitshift+0x160>)
 8008108:	4013      	ands	r3, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	6593      	str	r3, [r2, #88]	; 0x58
 800810e:	e005      	b.n	800811c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	40020010 	.word	0x40020010
 8008130:	40020028 	.word	0x40020028
 8008134:	40020040 	.word	0x40020040
 8008138:	40020058 	.word	0x40020058
 800813c:	40020070 	.word	0x40020070
 8008140:	40020088 	.word	0x40020088
 8008144:	400200a0 	.word	0x400200a0
 8008148:	400200b8 	.word	0x400200b8
 800814c:	40020410 	.word	0x40020410
 8008150:	40020428 	.word	0x40020428
 8008154:	40020440 	.word	0x40020440
 8008158:	40020458 	.word	0x40020458
 800815c:	40020470 	.word	0x40020470
 8008160:	40020488 	.word	0x40020488
 8008164:	400204a0 	.word	0x400204a0
 8008168:	400204b8 	.word	0x400204b8
 800816c:	aaaaaaab 	.word	0xaaaaaaab
 8008170:	08015cfc 	.word	0x08015cfc
 8008174:	fffffc00 	.word	0xfffffc00

08008178 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d120      	bne.n	80081ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	2b03      	cmp	r3, #3
 8008192:	d858      	bhi.n	8008246 <DMA_CheckFifoParam+0xce>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <DMA_CheckFifoParam+0x24>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081ad 	.word	0x080081ad
 80081a0:	080081bf 	.word	0x080081bf
 80081a4:	080081ad 	.word	0x080081ad
 80081a8:	08008247 	.word	0x08008247
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d048      	beq.n	800824a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081bc:	e045      	b.n	800824a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081c6:	d142      	bne.n	800824e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081cc:	e03f      	b.n	800824e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d6:	d123      	bne.n	8008220 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d838      	bhi.n	8008252 <DMA_CheckFifoParam+0xda>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <DMA_CheckFifoParam+0x70>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	080081ff 	.word	0x080081ff
 80081f0:	080081f9 	.word	0x080081f9
 80081f4:	08008211 	.word	0x08008211
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]
        break;
 80081fc:	e030      	b.n	8008260 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d025      	beq.n	8008256 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800820e:	e022      	b.n	8008256 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008218:	d11f      	bne.n	800825a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800821e:	e01c      	b.n	800825a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	2b02      	cmp	r3, #2
 8008226:	d902      	bls.n	800822e <DMA_CheckFifoParam+0xb6>
 8008228:	2b03      	cmp	r3, #3
 800822a:	d003      	beq.n	8008234 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800822c:	e018      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
        break;
 8008232:	e015      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00e      	beq.n	800825e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
    break;
 8008244:	e00b      	b.n	800825e <DMA_CheckFifoParam+0xe6>
        break;
 8008246:	bf00      	nop
 8008248:	e00a      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        break;
 800824a:	bf00      	nop
 800824c:	e008      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        break;
 800824e:	bf00      	nop
 8008250:	e006      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        break;
 8008252:	bf00      	nop
 8008254:	e004      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        break;
 8008256:	bf00      	nop
 8008258:	e002      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
        break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <DMA_CheckFifoParam+0xe8>
    break;
 800825e:	bf00      	nop
    }
  }

  return status;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a38      	ldr	r2, [pc, #224]	; (8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d022      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a36      	ldr	r2, [pc, #216]	; (8008368 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01d      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a35      	ldr	r2, [pc, #212]	; (800836c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d018      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a33      	ldr	r2, [pc, #204]	; (8008370 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a32      	ldr	r2, [pc, #200]	; (8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00e      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a30      	ldr	r2, [pc, #192]	; (8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d009      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a2f      	ldr	r2, [pc, #188]	; (800837c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d004      	beq.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a2d      	ldr	r2, [pc, #180]	; (8008380 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d101      	bne.n	80082d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082d2:	2300      	movs	r3, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01a      	beq.n	800830e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	3b08      	subs	r3, #8
 80082e0:	4a28      	ldr	r2, [pc, #160]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	091b      	lsrs	r3, r3, #4
 80082e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4b26      	ldr	r3, [pc, #152]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	461a      	mov	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a24      	ldr	r2, [pc, #144]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f003 031f 	and.w	r3, r3, #31
 8008304:	2201      	movs	r2, #1
 8008306:	409a      	lsls	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800830c:	e024      	b.n	8008358 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	3b10      	subs	r3, #16
 8008316:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008318:	fba2 2303 	umull	r2, r3, r2, r3
 800831c:	091b      	lsrs	r3, r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4a1c      	ldr	r2, [pc, #112]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d806      	bhi.n	8008336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4a1b      	ldr	r2, [pc, #108]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d902      	bls.n	8008336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3308      	adds	r3, #8
 8008334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4b18      	ldr	r3, [pc, #96]	; (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008348:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f003 031f 	and.w	r3, r3, #31
 8008350:	2201      	movs	r2, #1
 8008352:	409a      	lsls	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008358:	bf00      	nop
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	58025408 	.word	0x58025408
 8008368:	5802541c 	.word	0x5802541c
 800836c:	58025430 	.word	0x58025430
 8008370:	58025444 	.word	0x58025444
 8008374:	58025458 	.word	0x58025458
 8008378:	5802546c 	.word	0x5802546c
 800837c:	58025480 	.word	0x58025480
 8008380:	58025494 	.word	0x58025494
 8008384:	cccccccd 	.word	0xcccccccd
 8008388:	16009600 	.word	0x16009600
 800838c:	58025880 	.word	0x58025880
 8008390:	aaaaaaab 	.word	0xaaaaaaab
 8008394:	400204b8 	.word	0x400204b8
 8008398:	4002040f 	.word	0x4002040f
 800839c:	10008200 	.word	0x10008200
 80083a0:	40020880 	.word	0x40020880

080083a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d04a      	beq.n	8008450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d847      	bhi.n	8008450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a25      	ldr	r2, [pc, #148]	; (800845c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a24      	ldr	r2, [pc, #144]	; (8008460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d01d      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a22      	ldr	r2, [pc, #136]	; (8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d018      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a21      	ldr	r2, [pc, #132]	; (8008468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1f      	ldr	r2, [pc, #124]	; (800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00e      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d009      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1c      	ldr	r2, [pc, #112]	; (8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1b      	ldr	r2, [pc, #108]	; (8008478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d101      	bne.n	8008414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a15      	ldr	r2, [pc, #84]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800842c:	671a      	str	r2, [r3, #112]	; 0x70
 800842e:	e009      	b.n	8008444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4b14      	ldr	r3, [pc, #80]	; (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a11      	ldr	r2, [pc, #68]	; (8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008442:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3b01      	subs	r3, #1
 8008448:	2201      	movs	r2, #1
 800844a:	409a      	lsls	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008450:	bf00      	nop
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	58025408 	.word	0x58025408
 8008460:	5802541c 	.word	0x5802541c
 8008464:	58025430 	.word	0x58025430
 8008468:	58025444 	.word	0x58025444
 800846c:	58025458 	.word	0x58025458
 8008470:	5802546c 	.word	0x5802546c
 8008474:	58025480 	.word	0x58025480
 8008478:	58025494 	.word	0x58025494
 800847c:	1600963f 	.word	0x1600963f
 8008480:	58025940 	.word	0x58025940
 8008484:	1000823f 	.word	0x1000823f
 8008488:	40020940 	.word	0x40020940

0800848c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800848c:	b480      	push	{r7}
 800848e:	b089      	sub	sp, #36	; 0x24
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800849a:	4b89      	ldr	r3, [pc, #548]	; (80086c0 <HAL_GPIO_Init+0x234>)
 800849c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800849e:	e194      	b.n	80087ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	2101      	movs	r1, #1
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ac:	4013      	ands	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 8186 	beq.w	80087c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d005      	beq.n	80084d0 <HAL_GPIO_Init+0x44>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f003 0303 	and.w	r3, r3, #3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d130      	bne.n	8008532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	2203      	movs	r2, #3
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	43db      	mvns	r3, r3
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	4013      	ands	r3, r2
 80084e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008506:	2201      	movs	r2, #1
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4013      	ands	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	091b      	lsrs	r3, r3, #4
 800851c:	f003 0201 	and.w	r2, r3, #1
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	fa02 f303 	lsl.w	r3, r2, r3
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	4313      	orrs	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	2b03      	cmp	r3, #3
 800853c:	d017      	beq.n	800856e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	2203      	movs	r2, #3
 800854a:	fa02 f303 	lsl.w	r3, r2, r3
 800854e:	43db      	mvns	r3, r3
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4013      	ands	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	fa02 f303 	lsl.w	r3, r2, r3
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	4313      	orrs	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	2b02      	cmp	r3, #2
 8008578:	d123      	bne.n	80085c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	08da      	lsrs	r2, r3, #3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3208      	adds	r2, #8
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	220f      	movs	r2, #15
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	43db      	mvns	r3, r3
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	4013      	ands	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	08da      	lsrs	r2, r3, #3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3208      	adds	r2, #8
 80085bc:	69b9      	ldr	r1, [r7, #24]
 80085be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	2203      	movs	r2, #3
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4013      	ands	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 0203 	and.w	r2, r3, #3
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80e0 	beq.w	80087c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008604:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <HAL_GPIO_Init+0x238>)
 8008606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800860a:	4a2e      	ldr	r2, [pc, #184]	; (80086c4 <HAL_GPIO_Init+0x238>)
 800860c:	f043 0302 	orr.w	r3, r3, #2
 8008610:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008614:	4b2b      	ldr	r3, [pc, #172]	; (80086c4 <HAL_GPIO_Init+0x238>)
 8008616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008622:	4a29      	ldr	r2, [pc, #164]	; (80086c8 <HAL_GPIO_Init+0x23c>)
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	089b      	lsrs	r3, r3, #2
 8008628:	3302      	adds	r3, #2
 800862a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	220f      	movs	r2, #15
 800863a:	fa02 f303 	lsl.w	r3, r2, r3
 800863e:	43db      	mvns	r3, r3
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	4013      	ands	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a20      	ldr	r2, [pc, #128]	; (80086cc <HAL_GPIO_Init+0x240>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d052      	beq.n	80086f4 <HAL_GPIO_Init+0x268>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <HAL_GPIO_Init+0x244>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d031      	beq.n	80086ba <HAL_GPIO_Init+0x22e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a1e      	ldr	r2, [pc, #120]	; (80086d4 <HAL_GPIO_Init+0x248>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d02b      	beq.n	80086b6 <HAL_GPIO_Init+0x22a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a1d      	ldr	r2, [pc, #116]	; (80086d8 <HAL_GPIO_Init+0x24c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d025      	beq.n	80086b2 <HAL_GPIO_Init+0x226>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a1c      	ldr	r2, [pc, #112]	; (80086dc <HAL_GPIO_Init+0x250>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d01f      	beq.n	80086ae <HAL_GPIO_Init+0x222>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a1b      	ldr	r2, [pc, #108]	; (80086e0 <HAL_GPIO_Init+0x254>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d019      	beq.n	80086aa <HAL_GPIO_Init+0x21e>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <HAL_GPIO_Init+0x258>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d013      	beq.n	80086a6 <HAL_GPIO_Init+0x21a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a19      	ldr	r2, [pc, #100]	; (80086e8 <HAL_GPIO_Init+0x25c>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00d      	beq.n	80086a2 <HAL_GPIO_Init+0x216>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a18      	ldr	r2, [pc, #96]	; (80086ec <HAL_GPIO_Init+0x260>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d007      	beq.n	800869e <HAL_GPIO_Init+0x212>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a17      	ldr	r2, [pc, #92]	; (80086f0 <HAL_GPIO_Init+0x264>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d101      	bne.n	800869a <HAL_GPIO_Init+0x20e>
 8008696:	2309      	movs	r3, #9
 8008698:	e02d      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 800869a:	230a      	movs	r3, #10
 800869c:	e02b      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 800869e:	2308      	movs	r3, #8
 80086a0:	e029      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086a2:	2307      	movs	r3, #7
 80086a4:	e027      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086a6:	2306      	movs	r3, #6
 80086a8:	e025      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086aa:	2305      	movs	r3, #5
 80086ac:	e023      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086ae:	2304      	movs	r3, #4
 80086b0:	e021      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086b2:	2303      	movs	r3, #3
 80086b4:	e01f      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086b6:	2302      	movs	r3, #2
 80086b8:	e01d      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e01b      	b.n	80086f6 <HAL_GPIO_Init+0x26a>
 80086be:	bf00      	nop
 80086c0:	58000080 	.word	0x58000080
 80086c4:	58024400 	.word	0x58024400
 80086c8:	58000400 	.word	0x58000400
 80086cc:	58020000 	.word	0x58020000
 80086d0:	58020400 	.word	0x58020400
 80086d4:	58020800 	.word	0x58020800
 80086d8:	58020c00 	.word	0x58020c00
 80086dc:	58021000 	.word	0x58021000
 80086e0:	58021400 	.word	0x58021400
 80086e4:	58021800 	.word	0x58021800
 80086e8:	58021c00 	.word	0x58021c00
 80086ec:	58022000 	.word	0x58022000
 80086f0:	58022400 	.word	0x58022400
 80086f4:	2300      	movs	r3, #0
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	f002 0203 	and.w	r2, r2, #3
 80086fc:	0092      	lsls	r2, r2, #2
 80086fe:	4093      	lsls	r3, r2
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008706:	4938      	ldr	r1, [pc, #224]	; (80087e8 <HAL_GPIO_Init+0x35c>)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	089b      	lsrs	r3, r3, #2
 800870c:	3302      	adds	r3, #2
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	43db      	mvns	r3, r3
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	4013      	ands	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800873a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	43db      	mvns	r3, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	43db      	mvns	r3, r3
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4013      	ands	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	43db      	mvns	r3, r3
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	4013      	ands	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	3301      	adds	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	fa22 f303 	lsr.w	r3, r2, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f47f ae63 	bne.w	80084a0 <HAL_GPIO_Init+0x14>
  }
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	3724      	adds	r7, #36	; 0x24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	58000400 	.word	0x58000400

080087ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	887b      	ldrh	r3, [r7, #2]
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
 8008808:	e001      	b.n	800880e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	807b      	strh	r3, [r7, #2]
 8008828:	4613      	mov	r3, r2
 800882a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800882c:	787b      	ldrb	r3, [r7, #1]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008832:	887a      	ldrh	r2, [r7, #2]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008838:	e003      	b.n	8008842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800883a:	887b      	ldrh	r3, [r7, #2]
 800883c:	041a      	lsls	r2, r3, #16
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	619a      	str	r2, [r3, #24]
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e08b      	b.n	800897a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fa f938 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2224      	movs	r2, #36	; 0x24
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0201 	bic.w	r2, r2, #1
 8008892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d107      	bne.n	80088ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c6:	609a      	str	r2, [r3, #8]
 80088c8:	e006      	b.n	80088d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80088d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d108      	bne.n	80088f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ee:	605a      	str	r2, [r3, #4]
 80088f0:	e007      	b.n	8008902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6859      	ldr	r1, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <HAL_I2C_Init+0x134>)
 800890e:	430b      	orrs	r3, r1
 8008910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69d9      	ldr	r1, [r3, #28]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a1a      	ldr	r2, [r3, #32]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 0201 	orr.w	r2, r2, #1
 800895a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	02008000 	.word	0x02008000

08008988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b20      	cmp	r3, #32
 800899c:	d138      	bne.n	8008a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e032      	b.n	8008a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2224      	movs	r2, #36	; 0x24
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0201 	bic.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e000      	b.n	8008a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
  }
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b085      	sub	sp, #20
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d139      	bne.n	8008aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e033      	b.n	8008aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2224      	movs	r2, #36	; 0x24
 8008a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0201 	bic.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e000      	b.n	8008aaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008aa8:	2302      	movs	r3, #2
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ac0:	4b19      	ldr	r3, [pc, #100]	; (8008b28 <HAL_PWREx_ConfigSupply+0x70>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d00a      	beq.n	8008ae2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008acc:	4b16      	ldr	r3, [pc, #88]	; (8008b28 <HAL_PWREx_ConfigSupply+0x70>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d001      	beq.n	8008ade <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e01f      	b.n	8008b1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e01d      	b.n	8008b1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008ae2:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <HAL_PWREx_ConfigSupply+0x70>)
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f023 0207 	bic.w	r2, r3, #7
 8008aea:	490f      	ldr	r1, [pc, #60]	; (8008b28 <HAL_PWREx_ConfigSupply+0x70>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008af2:	f7fa fd67 	bl	80035c4 <HAL_GetTick>
 8008af6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008af8:	e009      	b.n	8008b0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008afa:	f7fa fd63 	bl	80035c4 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b08:	d901      	bls.n	8008b0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e007      	b.n	8008b1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <HAL_PWREx_ConfigSupply+0x70>)
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b1a:	d1ee      	bne.n	8008afa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	58024800 	.word	0x58024800

08008b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f000 bc48 	b.w	80093d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 8088 	beq.w	8008c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b4e:	4b99      	ldr	r3, [pc, #612]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b58:	4b96      	ldr	r3, [pc, #600]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d007      	beq.n	8008b74 <HAL_RCC_OscConfig+0x48>
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	2b18      	cmp	r3, #24
 8008b68:	d111      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62>
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d10c      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b74:	4b8f      	ldr	r3, [pc, #572]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d06d      	beq.n	8008c5c <HAL_RCC_OscConfig+0x130>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d169      	bne.n	8008c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f000 bc21 	b.w	80093d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b96:	d106      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x7a>
 8008b98:	4b86      	ldr	r3, [pc, #536]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a85      	ldr	r2, [pc, #532]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba2:	6013      	str	r3, [r2, #0]
 8008ba4:	e02e      	b.n	8008c04 <HAL_RCC_OscConfig+0xd8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x9c>
 8008bae:	4b81      	ldr	r3, [pc, #516]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a80      	ldr	r2, [pc, #512]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b7e      	ldr	r3, [pc, #504]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a7d      	ldr	r2, [pc, #500]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	e01d      	b.n	8008c04 <HAL_RCC_OscConfig+0xd8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bd0:	d10c      	bne.n	8008bec <HAL_RCC_OscConfig+0xc0>
 8008bd2:	4b78      	ldr	r3, [pc, #480]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a77      	ldr	r2, [pc, #476]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4b75      	ldr	r3, [pc, #468]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a74      	ldr	r2, [pc, #464]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e00b      	b.n	8008c04 <HAL_RCC_OscConfig+0xd8>
 8008bec:	4b71      	ldr	r3, [pc, #452]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a70      	ldr	r2, [pc, #448]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4b6e      	ldr	r3, [pc, #440]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a6d      	ldr	r2, [pc, #436]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d013      	beq.n	8008c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0c:	f7fa fcda 	bl	80035c4 <HAL_GetTick>
 8008c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c12:	e008      	b.n	8008c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c14:	f7fa fcd6 	bl	80035c4 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b64      	cmp	r3, #100	; 0x64
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e3d4      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c26:	4b63      	ldr	r3, [pc, #396]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0f0      	beq.n	8008c14 <HAL_RCC_OscConfig+0xe8>
 8008c32:	e014      	b.n	8008c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c34:	f7fa fcc6 	bl	80035c4 <HAL_GetTick>
 8008c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c3c:	f7fa fcc2 	bl	80035c4 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b64      	cmp	r3, #100	; 0x64
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e3c0      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c4e:	4b59      	ldr	r3, [pc, #356]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f0      	bne.n	8008c3c <HAL_RCC_OscConfig+0x110>
 8008c5a:	e000      	b.n	8008c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80ca 	beq.w	8008e00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c6c:	4b51      	ldr	r3, [pc, #324]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c76:	4b4f      	ldr	r3, [pc, #316]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d007      	beq.n	8008c92 <HAL_RCC_OscConfig+0x166>
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	2b18      	cmp	r3, #24
 8008c86:	d156      	bne.n	8008d36 <HAL_RCC_OscConfig+0x20a>
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d151      	bne.n	8008d36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c92:	4b48      	ldr	r3, [pc, #288]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d005      	beq.n	8008caa <HAL_RCC_OscConfig+0x17e>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e392      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008caa:	4b42      	ldr	r3, [pc, #264]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f023 0219 	bic.w	r2, r3, #25
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	493f      	ldr	r1, [pc, #252]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cbc:	f7fa fc82 	bl	80035c4 <HAL_GetTick>
 8008cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cc4:	f7fa fc7e 	bl	80035c4 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e37c      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cd6:	4b37      	ldr	r3, [pc, #220]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0304 	and.w	r3, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f0      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce2:	f7fa fc7b 	bl	80035dc <HAL_GetREVID>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d817      	bhi.n	8008d20 <HAL_RCC_OscConfig+0x1f4>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d108      	bne.n	8008d0a <HAL_RCC_OscConfig+0x1de>
 8008cf8:	4b2e      	ldr	r3, [pc, #184]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d00:	4a2c      	ldr	r2, [pc, #176]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d08:	e07a      	b.n	8008e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d0a:	4b2a      	ldr	r3, [pc, #168]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	031b      	lsls	r3, r3, #12
 8008d18:	4926      	ldr	r1, [pc, #152]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d1e:	e06f      	b.n	8008e00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d20:	4b24      	ldr	r3, [pc, #144]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	061b      	lsls	r3, r3, #24
 8008d2e:	4921      	ldr	r1, [pc, #132]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d34:	e064      	b.n	8008e00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d047      	beq.n	8008dce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d3e:	4b1d      	ldr	r3, [pc, #116]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f023 0219 	bic.w	r2, r3, #25
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	491a      	ldr	r1, [pc, #104]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d50:	f7fa fc38 	bl	80035c4 <HAL_GetTick>
 8008d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d58:	f7fa fc34 	bl	80035c4 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e332      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d0f0      	beq.n	8008d58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d76:	f7fa fc31 	bl	80035dc <HAL_GetREVID>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d819      	bhi.n	8008db8 <HAL_RCC_OscConfig+0x28c>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d108      	bne.n	8008d9e <HAL_RCC_OscConfig+0x272>
 8008d8c:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d94:	4a07      	ldr	r2, [pc, #28]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9a:	6053      	str	r3, [r2, #4]
 8008d9c:	e030      	b.n	8008e00 <HAL_RCC_OscConfig+0x2d4>
 8008d9e:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	031b      	lsls	r3, r3, #12
 8008dac:	4901      	ldr	r1, [pc, #4]	; (8008db4 <HAL_RCC_OscConfig+0x288>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	604b      	str	r3, [r1, #4]
 8008db2:	e025      	b.n	8008e00 <HAL_RCC_OscConfig+0x2d4>
 8008db4:	58024400 	.word	0x58024400
 8008db8:	4b9a      	ldr	r3, [pc, #616]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	061b      	lsls	r3, r3, #24
 8008dc6:	4997      	ldr	r1, [pc, #604]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	604b      	str	r3, [r1, #4]
 8008dcc:	e018      	b.n	8008e00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dce:	4b95      	ldr	r3, [pc, #596]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a94      	ldr	r2, [pc, #592]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dda:	f7fa fbf3 	bl	80035c4 <HAL_GetTick>
 8008dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008de0:	e008      	b.n	8008df4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008de2:	f7fa fbef 	bl	80035c4 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e2ed      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008df4:	4b8b      	ldr	r3, [pc, #556]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1f0      	bne.n	8008de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80a9 	beq.w	8008f60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e0e:	4b85      	ldr	r3, [pc, #532]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e18:	4b82      	ldr	r3, [pc, #520]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d007      	beq.n	8008e34 <HAL_RCC_OscConfig+0x308>
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	2b18      	cmp	r3, #24
 8008e28:	d13a      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x374>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d135      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e34:	4b7b      	ldr	r3, [pc, #492]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_RCC_OscConfig+0x320>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	2b80      	cmp	r3, #128	; 0x80
 8008e46:	d001      	beq.n	8008e4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e2c1      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e4c:	f7fa fbc6 	bl	80035dc <HAL_GetREVID>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d817      	bhi.n	8008e8a <HAL_RCC_OscConfig+0x35e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	2b20      	cmp	r3, #32
 8008e60:	d108      	bne.n	8008e74 <HAL_RCC_OscConfig+0x348>
 8008e62:	4b70      	ldr	r3, [pc, #448]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e6a:	4a6e      	ldr	r2, [pc, #440]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e72:	e075      	b.n	8008f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e74:	4b6b      	ldr	r3, [pc, #428]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	069b      	lsls	r3, r3, #26
 8008e82:	4968      	ldr	r1, [pc, #416]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e88:	e06a      	b.n	8008f60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e8a:	4b66      	ldr	r3, [pc, #408]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	061b      	lsls	r3, r3, #24
 8008e98:	4962      	ldr	r1, [pc, #392]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e9e:	e05f      	b.n	8008f60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d042      	beq.n	8008f2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ea8:	4b5e      	ldr	r3, [pc, #376]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a5d      	ldr	r2, [pc, #372]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb4:	f7fa fb86 	bl	80035c4 <HAL_GetTick>
 8008eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ebc:	f7fa fb82 	bl	80035c4 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e280      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ece:	4b55      	ldr	r3, [pc, #340]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f0      	beq.n	8008ebc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008eda:	f7fa fb7f 	bl	80035dc <HAL_GetREVID>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d817      	bhi.n	8008f18 <HAL_RCC_OscConfig+0x3ec>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d108      	bne.n	8008f02 <HAL_RCC_OscConfig+0x3d6>
 8008ef0:	4b4c      	ldr	r3, [pc, #304]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ef8:	4a4a      	ldr	r2, [pc, #296]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008efa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008efe:	6053      	str	r3, [r2, #4]
 8008f00:	e02e      	b.n	8008f60 <HAL_RCC_OscConfig+0x434>
 8008f02:	4b48      	ldr	r3, [pc, #288]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	069b      	lsls	r3, r3, #26
 8008f10:	4944      	ldr	r1, [pc, #272]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	604b      	str	r3, [r1, #4]
 8008f16:	e023      	b.n	8008f60 <HAL_RCC_OscConfig+0x434>
 8008f18:	4b42      	ldr	r3, [pc, #264]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	493f      	ldr	r1, [pc, #252]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60cb      	str	r3, [r1, #12]
 8008f2c:	e018      	b.n	8008f60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f2e:	4b3d      	ldr	r3, [pc, #244]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a3c      	ldr	r2, [pc, #240]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3a:	f7fa fb43 	bl	80035c4 <HAL_GetTick>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f42:	f7fa fb3f 	bl	80035c4 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e23d      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f54:	4b33      	ldr	r3, [pc, #204]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f0      	bne.n	8008f42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d036      	beq.n	8008fda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d019      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f74:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f78:	4a2a      	ldr	r2, [pc, #168]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f80:	f7fa fb20 	bl	80035c4 <HAL_GetTick>
 8008f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f86:	e008      	b.n	8008f9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f88:	f7fa fb1c 	bl	80035c4 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e21a      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f9a:	4b22      	ldr	r3, [pc, #136]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0f0      	beq.n	8008f88 <HAL_RCC_OscConfig+0x45c>
 8008fa6:	e018      	b.n	8008fda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fac:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb4:	f7fa fb06 	bl	80035c4 <HAL_GetTick>
 8008fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fba:	e008      	b.n	8008fce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fbc:	f7fa fb02 	bl	80035c4 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e200      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fce:	4b15      	ldr	r3, [pc, #84]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1f0      	bne.n	8008fbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d039      	beq.n	800905a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01c      	beq.n	8009028 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fee:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a0c      	ldr	r2, [pc, #48]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8008ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ff8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ffa:	f7fa fae3 	bl	80035c4 <HAL_GetTick>
 8008ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009000:	e008      	b.n	8009014 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009002:	f7fa fadf 	bl	80035c4 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e1dd      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009014:	4b03      	ldr	r3, [pc, #12]	; (8009024 <HAL_RCC_OscConfig+0x4f8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f0      	beq.n	8009002 <HAL_RCC_OscConfig+0x4d6>
 8009020:	e01b      	b.n	800905a <HAL_RCC_OscConfig+0x52e>
 8009022:	bf00      	nop
 8009024:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009028:	4b9b      	ldr	r3, [pc, #620]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a9a      	ldr	r2, [pc, #616]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800902e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009034:	f7fa fac6 	bl	80035c4 <HAL_GetTick>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800903c:	f7fa fac2 	bl	80035c4 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e1c0      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800904e:	4b92      	ldr	r3, [pc, #584]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f0      	bne.n	800903c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0304 	and.w	r3, r3, #4
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 8081 	beq.w	800916a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009068:	4b8c      	ldr	r3, [pc, #560]	; (800929c <HAL_RCC_OscConfig+0x770>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a8b      	ldr	r2, [pc, #556]	; (800929c <HAL_RCC_OscConfig+0x770>)
 800906e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009074:	f7fa faa6 	bl	80035c4 <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800907c:	f7fa faa2 	bl	80035c4 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b64      	cmp	r3, #100	; 0x64
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e1a0      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800908e:	4b83      	ldr	r3, [pc, #524]	; (800929c <HAL_RCC_OscConfig+0x770>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0f0      	beq.n	800907c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d106      	bne.n	80090b0 <HAL_RCC_OscConfig+0x584>
 80090a2:	4b7d      	ldr	r3, [pc, #500]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	4a7c      	ldr	r2, [pc, #496]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	6713      	str	r3, [r2, #112]	; 0x70
 80090ae:	e02d      	b.n	800910c <HAL_RCC_OscConfig+0x5e0>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10c      	bne.n	80090d2 <HAL_RCC_OscConfig+0x5a6>
 80090b8:	4b77      	ldr	r3, [pc, #476]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090bc:	4a76      	ldr	r2, [pc, #472]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090be:	f023 0301 	bic.w	r3, r3, #1
 80090c2:	6713      	str	r3, [r2, #112]	; 0x70
 80090c4:	4b74      	ldr	r3, [pc, #464]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c8:	4a73      	ldr	r2, [pc, #460]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090ca:	f023 0304 	bic.w	r3, r3, #4
 80090ce:	6713      	str	r3, [r2, #112]	; 0x70
 80090d0:	e01c      	b.n	800910c <HAL_RCC_OscConfig+0x5e0>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	d10c      	bne.n	80090f4 <HAL_RCC_OscConfig+0x5c8>
 80090da:	4b6f      	ldr	r3, [pc, #444]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	4a6e      	ldr	r2, [pc, #440]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090e0:	f043 0304 	orr.w	r3, r3, #4
 80090e4:	6713      	str	r3, [r2, #112]	; 0x70
 80090e6:	4b6c      	ldr	r3, [pc, #432]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	4a6b      	ldr	r2, [pc, #428]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6713      	str	r3, [r2, #112]	; 0x70
 80090f2:	e00b      	b.n	800910c <HAL_RCC_OscConfig+0x5e0>
 80090f4:	4b68      	ldr	r3, [pc, #416]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f8:	4a67      	ldr	r2, [pc, #412]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80090fa:	f023 0301 	bic.w	r3, r3, #1
 80090fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009100:	4b65      	ldr	r3, [pc, #404]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009104:	4a64      	ldr	r2, [pc, #400]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009106:	f023 0304 	bic.w	r3, r3, #4
 800910a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d015      	beq.n	8009140 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009114:	f7fa fa56 	bl	80035c4 <HAL_GetTick>
 8009118:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800911a:	e00a      	b.n	8009132 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800911c:	f7fa fa52 	bl	80035c4 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	f241 3288 	movw	r2, #5000	; 0x1388
 800912a:	4293      	cmp	r3, r2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e14e      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009132:	4b59      	ldr	r3, [pc, #356]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0ee      	beq.n	800911c <HAL_RCC_OscConfig+0x5f0>
 800913e:	e014      	b.n	800916a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009140:	f7fa fa40 	bl	80035c4 <HAL_GetTick>
 8009144:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009146:	e00a      	b.n	800915e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009148:	f7fa fa3c 	bl	80035c4 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f241 3288 	movw	r2, #5000	; 0x1388
 8009156:	4293      	cmp	r3, r2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e138      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800915e:	4b4e      	ldr	r3, [pc, #312]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1ee      	bne.n	8009148 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 812d 	beq.w	80093ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009174:	4b48      	ldr	r3, [pc, #288]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800917c:	2b18      	cmp	r3, #24
 800917e:	f000 80bd 	beq.w	80092fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	2b02      	cmp	r3, #2
 8009188:	f040 809e 	bne.w	80092c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800918c:	4b42      	ldr	r3, [pc, #264]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a41      	ldr	r2, [pc, #260]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fa fa14 	bl	80035c4 <HAL_GetTick>
 800919c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091a0:	f7fa fa10 	bl	80035c4 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e10e      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091b2:	4b39      	ldr	r3, [pc, #228]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f0      	bne.n	80091a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091be:	4b36      	ldr	r3, [pc, #216]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80091c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091c2:	4b37      	ldr	r3, [pc, #220]	; (80092a0 <HAL_RCC_OscConfig+0x774>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091ce:	0112      	lsls	r2, r2, #4
 80091d0:	430a      	orrs	r2, r1
 80091d2:	4931      	ldr	r1, [pc, #196]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	628b      	str	r3, [r1, #40]	; 0x28
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	3b01      	subs	r3, #1
 80091de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e6:	3b01      	subs	r3, #1
 80091e8:	025b      	lsls	r3, r3, #9
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	431a      	orrs	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	3b01      	subs	r3, #1
 80091f4:	041b      	lsls	r3, r3, #16
 80091f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009200:	3b01      	subs	r3, #1
 8009202:	061b      	lsls	r3, r3, #24
 8009204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009208:	4923      	ldr	r1, [pc, #140]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800920a:	4313      	orrs	r3, r2
 800920c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800920e:	4b22      	ldr	r3, [pc, #136]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	4a21      	ldr	r2, [pc, #132]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800921a:	4b1f      	ldr	r3, [pc, #124]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800921c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800921e:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <HAL_RCC_OscConfig+0x778>)
 8009220:	4013      	ands	r3, r2
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009226:	00d2      	lsls	r2, r2, #3
 8009228:	491b      	ldr	r1, [pc, #108]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800922a:	4313      	orrs	r3, r2
 800922c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800922e:	4b1a      	ldr	r3, [pc, #104]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	f023 020c 	bic.w	r2, r3, #12
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	4917      	ldr	r1, [pc, #92]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800923c:	4313      	orrs	r3, r2
 800923e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009240:	4b15      	ldr	r3, [pc, #84]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	f023 0202 	bic.w	r2, r3, #2
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924c:	4912      	ldr	r1, [pc, #72]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800924e:	4313      	orrs	r3, r2
 8009250:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	4a10      	ldr	r2, [pc, #64]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800925c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800925e:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800926a:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009274:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009276:	4b08      	ldr	r3, [pc, #32]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	4a07      	ldr	r2, [pc, #28]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 800927c:	f043 0301 	orr.w	r3, r3, #1
 8009280:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a04      	ldr	r2, [pc, #16]	; (8009298 <HAL_RCC_OscConfig+0x76c>)
 8009288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800928c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928e:	f7fa f999 	bl	80035c4 <HAL_GetTick>
 8009292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009294:	e011      	b.n	80092ba <HAL_RCC_OscConfig+0x78e>
 8009296:	bf00      	nop
 8009298:	58024400 	.word	0x58024400
 800929c:	58024800 	.word	0x58024800
 80092a0:	fffffc0c 	.word	0xfffffc0c
 80092a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092a8:	f7fa f98c 	bl	80035c4 <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e08a      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092ba:	4b47      	ldr	r3, [pc, #284]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0f0      	beq.n	80092a8 <HAL_RCC_OscConfig+0x77c>
 80092c6:	e082      	b.n	80093ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092c8:	4b43      	ldr	r3, [pc, #268]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a42      	ldr	r2, [pc, #264]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80092ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d4:	f7fa f976 	bl	80035c4 <HAL_GetTick>
 80092d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092dc:	f7fa f972 	bl	80035c4 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e070      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092ee:	4b3a      	ldr	r3, [pc, #232]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1f0      	bne.n	80092dc <HAL_RCC_OscConfig+0x7b0>
 80092fa:	e068      	b.n	80093ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092fc:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009302:	4b35      	ldr	r3, [pc, #212]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2b01      	cmp	r3, #1
 800930e:	d031      	beq.n	8009374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f003 0203 	and.w	r2, r3, #3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800931a:	429a      	cmp	r2, r3
 800931c:	d12a      	bne.n	8009374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	091b      	lsrs	r3, r3, #4
 8009322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800932a:	429a      	cmp	r2, r3
 800932c:	d122      	bne.n	8009374 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800933a:	429a      	cmp	r2, r3
 800933c:	d11a      	bne.n	8009374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	0a5b      	lsrs	r3, r3, #9
 8009342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800934c:	429a      	cmp	r2, r3
 800934e:	d111      	bne.n	8009374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800935e:	429a      	cmp	r2, r3
 8009360:	d108      	bne.n	8009374 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	0e1b      	lsrs	r3, r3, #24
 8009366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009370:	429a      	cmp	r2, r3
 8009372:	d001      	beq.n	8009378 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e02b      	b.n	80093d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009378:	4b17      	ldr	r3, [pc, #92]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	08db      	lsrs	r3, r3, #3
 800937e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009382:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	429a      	cmp	r2, r3
 800938c:	d01f      	beq.n	80093ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	4a11      	ldr	r2, [pc, #68]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800939a:	f7fa f913 	bl	80035c4 <HAL_GetTick>
 800939e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80093a0:	bf00      	nop
 80093a2:	f7fa f90f 	bl	80035c4 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d0f9      	beq.n	80093a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093ae:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80093b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b2:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <HAL_RCC_OscConfig+0x8b0>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093ba:	00d2      	lsls	r2, r2, #3
 80093bc:	4906      	ldr	r1, [pc, #24]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80093c2:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	4a04      	ldr	r2, [pc, #16]	; (80093d8 <HAL_RCC_OscConfig+0x8ac>)
 80093c8:	f043 0301 	orr.w	r3, r3, #1
 80093cc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3730      	adds	r7, #48	; 0x30
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	58024400 	.word	0x58024400
 80093dc:	ffff0007 	.word	0xffff0007

080093e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e19c      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093f4:	4b8a      	ldr	r3, [pc, #552]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d910      	bls.n	8009424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009402:	4b87      	ldr	r3, [pc, #540]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f023 020f 	bic.w	r2, r3, #15
 800940a:	4985      	ldr	r1, [pc, #532]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	4313      	orrs	r3, r2
 8009410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009412:	4b83      	ldr	r3, [pc, #524]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d001      	beq.n	8009424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e184      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d010      	beq.n	8009452 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	4b7b      	ldr	r3, [pc, #492]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800943c:	429a      	cmp	r2, r3
 800943e:	d908      	bls.n	8009452 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009440:	4b78      	ldr	r3, [pc, #480]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	4975      	ldr	r1, [pc, #468]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 800944e:	4313      	orrs	r3, r2
 8009450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d010      	beq.n	8009480 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695a      	ldr	r2, [r3, #20]
 8009462:	4b70      	ldr	r3, [pc, #448]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800946a:	429a      	cmp	r2, r3
 800946c:	d908      	bls.n	8009480 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800946e:	4b6d      	ldr	r3, [pc, #436]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	496a      	ldr	r1, [pc, #424]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 800947c:	4313      	orrs	r3, r2
 800947e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0310 	and.w	r3, r3, #16
 8009488:	2b00      	cmp	r3, #0
 800948a:	d010      	beq.n	80094ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	699a      	ldr	r2, [r3, #24]
 8009490:	4b64      	ldr	r3, [pc, #400]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009498:	429a      	cmp	r2, r3
 800949a:	d908      	bls.n	80094ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800949c:	4b61      	ldr	r3, [pc, #388]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	495e      	ldr	r1, [pc, #376]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0320 	and.w	r3, r3, #32
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d010      	beq.n	80094dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69da      	ldr	r2, [r3, #28]
 80094be:	4b59      	ldr	r3, [pc, #356]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d908      	bls.n	80094dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80094ca:	4b56      	ldr	r3, [pc, #344]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	4953      	ldr	r1, [pc, #332]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d010      	beq.n	800950a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	4b4d      	ldr	r3, [pc, #308]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f003 030f 	and.w	r3, r3, #15
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d908      	bls.n	800950a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094f8:	4b4a      	ldr	r3, [pc, #296]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f023 020f 	bic.w	r2, r3, #15
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	4947      	ldr	r1, [pc, #284]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009506:	4313      	orrs	r3, r2
 8009508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d055      	beq.n	80095c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009516:	4b43      	ldr	r3, [pc, #268]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	4940      	ldr	r1, [pc, #256]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009524:	4313      	orrs	r3, r2
 8009526:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d107      	bne.n	8009540 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009530:	4b3c      	ldr	r3, [pc, #240]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d121      	bne.n	8009580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e0f6      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b03      	cmp	r3, #3
 8009546:	d107      	bne.n	8009558 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009548:	4b36      	ldr	r3, [pc, #216]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d115      	bne.n	8009580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e0ea      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d107      	bne.n	8009570 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009560:	4b30      	ldr	r3, [pc, #192]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009568:	2b00      	cmp	r3, #0
 800956a:	d109      	bne.n	8009580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0de      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009570:	4b2c      	ldr	r3, [pc, #176]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0d6      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009580:	4b28      	ldr	r3, [pc, #160]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	f023 0207 	bic.w	r2, r3, #7
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4925      	ldr	r1, [pc, #148]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 800958e:	4313      	orrs	r3, r2
 8009590:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009592:	f7fa f817 	bl	80035c4 <HAL_GetTick>
 8009596:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009598:	e00a      	b.n	80095b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800959a:	f7fa f813 	bl	80035c4 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e0be      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095b0:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	429a      	cmp	r2, r3
 80095c0:	d1eb      	bne.n	800959a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d010      	beq.n	80095f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	4b14      	ldr	r3, [pc, #80]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	429a      	cmp	r2, r3
 80095dc:	d208      	bcs.n	80095f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	f023 020f 	bic.w	r2, r3, #15
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	490e      	ldr	r1, [pc, #56]	; (8009624 <HAL_RCC_ClockConfig+0x244>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d214      	bcs.n	8009628 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095fe:	4b08      	ldr	r3, [pc, #32]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f023 020f 	bic.w	r2, r3, #15
 8009606:	4906      	ldr	r1, [pc, #24]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	4313      	orrs	r3, r2
 800960c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800960e:	4b04      	ldr	r3, [pc, #16]	; (8009620 <HAL_RCC_ClockConfig+0x240>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d005      	beq.n	8009628 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e086      	b.n	800972e <HAL_RCC_ClockConfig+0x34e>
 8009620:	52002000 	.word	0x52002000
 8009624:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	d010      	beq.n	8009656 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691a      	ldr	r2, [r3, #16]
 8009638:	4b3f      	ldr	r3, [pc, #252]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009640:	429a      	cmp	r2, r3
 8009642:	d208      	bcs.n	8009656 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009644:	4b3c      	ldr	r3, [pc, #240]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	4939      	ldr	r1, [pc, #228]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009652:	4313      	orrs	r3, r2
 8009654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d010      	beq.n	8009684 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695a      	ldr	r2, [r3, #20]
 8009666:	4b34      	ldr	r3, [pc, #208]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800966e:	429a      	cmp	r2, r3
 8009670:	d208      	bcs.n	8009684 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009672:	4b31      	ldr	r3, [pc, #196]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	492e      	ldr	r1, [pc, #184]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009680:	4313      	orrs	r3, r2
 8009682:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	d010      	beq.n	80096b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699a      	ldr	r2, [r3, #24]
 8009694:	4b28      	ldr	r3, [pc, #160]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800969c:	429a      	cmp	r2, r3
 800969e:	d208      	bcs.n	80096b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096a0:	4b25      	ldr	r3, [pc, #148]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	4922      	ldr	r1, [pc, #136]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d010      	beq.n	80096e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69da      	ldr	r2, [r3, #28]
 80096c2:	4b1d      	ldr	r3, [pc, #116]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d208      	bcs.n	80096e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096ce:	4b1a      	ldr	r3, [pc, #104]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	4917      	ldr	r1, [pc, #92]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096e0:	f000 f834 	bl	800974c <HAL_RCC_GetSysClockFreq>
 80096e4:	4602      	mov	r2, r0
 80096e6:	4b14      	ldr	r3, [pc, #80]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	0a1b      	lsrs	r3, r3, #8
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	4912      	ldr	r1, [pc, #72]	; (800973c <HAL_RCC_ClockConfig+0x35c>)
 80096f2:	5ccb      	ldrb	r3, [r1, r3]
 80096f4:	f003 031f 	and.w	r3, r3, #31
 80096f8:	fa22 f303 	lsr.w	r3, r2, r3
 80096fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096fe:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <HAL_RCC_ClockConfig+0x358>)
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	4a0d      	ldr	r2, [pc, #52]	; (800973c <HAL_RCC_ClockConfig+0x35c>)
 8009708:	5cd3      	ldrb	r3, [r2, r3]
 800970a:	f003 031f 	and.w	r3, r3, #31
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	fa22 f303 	lsr.w	r3, r2, r3
 8009714:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <HAL_RCC_ClockConfig+0x360>)
 8009716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009718:	4a0a      	ldr	r2, [pc, #40]	; (8009744 <HAL_RCC_ClockConfig+0x364>)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800971e:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <HAL_RCC_ClockConfig+0x368>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f7f9 fc86 	bl	8003034 <HAL_InitTick>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	58024400 	.word	0x58024400
 800973c:	08015cec 	.word	0x08015cec
 8009740:	2400008c 	.word	0x2400008c
 8009744:	24000088 	.word	0x24000088
 8009748:	24000090 	.word	0x24000090

0800974c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800974c:	b480      	push	{r7}
 800974e:	b089      	sub	sp, #36	; 0x24
 8009750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009752:	4bb3      	ldr	r3, [pc, #716]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800975a:	2b18      	cmp	r3, #24
 800975c:	f200 8155 	bhi.w	8009a0a <HAL_RCC_GetSysClockFreq+0x2be>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	080097cd 	.word	0x080097cd
 800976c:	08009a0b 	.word	0x08009a0b
 8009770:	08009a0b 	.word	0x08009a0b
 8009774:	08009a0b 	.word	0x08009a0b
 8009778:	08009a0b 	.word	0x08009a0b
 800977c:	08009a0b 	.word	0x08009a0b
 8009780:	08009a0b 	.word	0x08009a0b
 8009784:	08009a0b 	.word	0x08009a0b
 8009788:	080097f3 	.word	0x080097f3
 800978c:	08009a0b 	.word	0x08009a0b
 8009790:	08009a0b 	.word	0x08009a0b
 8009794:	08009a0b 	.word	0x08009a0b
 8009798:	08009a0b 	.word	0x08009a0b
 800979c:	08009a0b 	.word	0x08009a0b
 80097a0:	08009a0b 	.word	0x08009a0b
 80097a4:	08009a0b 	.word	0x08009a0b
 80097a8:	080097f9 	.word	0x080097f9
 80097ac:	08009a0b 	.word	0x08009a0b
 80097b0:	08009a0b 	.word	0x08009a0b
 80097b4:	08009a0b 	.word	0x08009a0b
 80097b8:	08009a0b 	.word	0x08009a0b
 80097bc:	08009a0b 	.word	0x08009a0b
 80097c0:	08009a0b 	.word	0x08009a0b
 80097c4:	08009a0b 	.word	0x08009a0b
 80097c8:	080097ff 	.word	0x080097ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097cc:	4b94      	ldr	r3, [pc, #592]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097d8:	4b91      	ldr	r3, [pc, #580]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	08db      	lsrs	r3, r3, #3
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	4a90      	ldr	r2, [pc, #576]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097e4:	fa22 f303 	lsr.w	r3, r2, r3
 80097e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80097ea:	e111      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097ec:	4b8d      	ldr	r3, [pc, #564]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097ee:	61bb      	str	r3, [r7, #24]
      break;
 80097f0:	e10e      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80097f2:	4b8d      	ldr	r3, [pc, #564]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097f4:	61bb      	str	r3, [r7, #24]
      break;
 80097f6:	e10b      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80097f8:	4b8c      	ldr	r3, [pc, #560]	; (8009a2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80097fa:	61bb      	str	r3, [r7, #24]
      break;
 80097fc:	e108      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097fe:	4b88      	ldr	r3, [pc, #544]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009808:	4b85      	ldr	r3, [pc, #532]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	091b      	lsrs	r3, r3, #4
 800980e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009814:	4b82      	ldr	r3, [pc, #520]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800981e:	4b80      	ldr	r3, [pc, #512]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009822:	08db      	lsrs	r3, r3, #3
 8009824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80e1 	beq.w	8009a04 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b02      	cmp	r3, #2
 8009846:	f000 8083 	beq.w	8009950 <HAL_RCC_GetSysClockFreq+0x204>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b02      	cmp	r3, #2
 800984e:	f200 80a1 	bhi.w	8009994 <HAL_RCC_GetSysClockFreq+0x248>
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_RCC_GetSysClockFreq+0x114>
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d056      	beq.n	800990c <HAL_RCC_GetSysClockFreq+0x1c0>
 800985e:	e099      	b.n	8009994 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009860:	4b6f      	ldr	r3, [pc, #444]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d02d      	beq.n	80098c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986c:	4b6c      	ldr	r3, [pc, #432]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	08db      	lsrs	r3, r3, #3
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	4a6b      	ldr	r2, [pc, #428]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b62      	ldr	r3, [pc, #392]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80098c6:	e087      	b.n	80099d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a34 <HAL_RCC_GetSysClockFreq+0x2e8>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b51      	ldr	r3, [pc, #324]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800990a:	e065      	b.n	80099d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b40      	ldr	r3, [pc, #256]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009932:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800994e:	e043      	b.n	80099d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a3c <HAL_RCC_GetSysClockFreq+0x2f0>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b2f      	ldr	r3, [pc, #188]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a02 	vldr	s12, [r7, #8]
 8009976:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009992:	e021      	b.n	80099d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a38 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b1e      	ldr	r3, [pc, #120]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80099d8:	4b11      	ldr	r3, [pc, #68]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	0a5b      	lsrs	r3, r3, #9
 80099de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e2:	3301      	adds	r3, #1
 80099e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	ee07 3a90 	vmov	s15, r3
 80099ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fc:	ee17 3a90 	vmov	r3, s15
 8009a00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a02:	e005      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61bb      	str	r3, [r7, #24]
      break;
 8009a08:	e002      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009a0a:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a0c:	61bb      	str	r3, [r7, #24]
      break;
 8009a0e:	bf00      	nop
  }

  return sysclockfreq;
 8009a10:	69bb      	ldr	r3, [r7, #24]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3724      	adds	r7, #36	; 0x24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	58024400 	.word	0x58024400
 8009a24:	03d09000 	.word	0x03d09000
 8009a28:	003d0900 	.word	0x003d0900
 8009a2c:	017d7840 	.word	0x017d7840
 8009a30:	46000000 	.word	0x46000000
 8009a34:	4c742400 	.word	0x4c742400
 8009a38:	4a742400 	.word	0x4a742400
 8009a3c:	4bbebc20 	.word	0x4bbebc20

08009a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a46:	f7ff fe81 	bl	800974c <HAL_RCC_GetSysClockFreq>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	0a1b      	lsrs	r3, r3, #8
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	490f      	ldr	r1, [pc, #60]	; (8009a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a58:	5ccb      	ldrb	r3, [r1, r3]
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a64:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a6e:	5cd3      	ldrb	r3, [r2, r3]
 8009a70:	f003 031f 	and.w	r3, r3, #31
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7a:	4a07      	ldr	r2, [pc, #28]	; (8009a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a7e:	4a07      	ldr	r2, [pc, #28]	; (8009a9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a84:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a86:	681b      	ldr	r3, [r3, #0]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	58024400 	.word	0x58024400
 8009a94:	08015cec 	.word	0x08015cec
 8009a98:	2400008c 	.word	0x2400008c
 8009a9c:	24000088 	.word	0x24000088

08009aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009aa4:	f7ff ffcc 	bl	8009a40 <HAL_RCC_GetHCLKFreq>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	091b      	lsrs	r3, r3, #4
 8009ab0:	f003 0307 	and.w	r3, r3, #7
 8009ab4:	4904      	ldr	r1, [pc, #16]	; (8009ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ab6:	5ccb      	ldrb	r3, [r1, r3]
 8009ab8:	f003 031f 	and.w	r3, r3, #31
 8009abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	58024400 	.word	0x58024400
 8009ac8:	08015cec 	.word	0x08015cec

08009acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009ad0:	f7ff ffb6 	bl	8009a40 <HAL_RCC_GetHCLKFreq>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	4904      	ldr	r1, [pc, #16]	; (8009af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009ae2:	5ccb      	ldrb	r3, [r1, r3]
 8009ae4:	f003 031f 	and.w	r3, r3, #31
 8009ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	58024400 	.word	0x58024400
 8009af4:	08015cec 	.word	0x08015cec

08009af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	223f      	movs	r2, #63	; 0x3f
 8009b06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b08:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 0207 	and.w	r2, r3, #7
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009b14:	4b17      	ldr	r3, [pc, #92]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009b20:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	f003 020f 	and.w	r2, r3, #15
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009b2c:	4b11      	ldr	r3, [pc, #68]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009b38:	4b0e      	ldr	r3, [pc, #56]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009b44:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009b50:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <HAL_RCC_GetClockConfig+0x7c>)
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b5c:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <HAL_RCC_GetClockConfig+0x80>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 020f 	and.w	r2, r3, #15
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	601a      	str	r2, [r3, #0]
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	58024400 	.word	0x58024400
 8009b78:	52002000 	.word	0x52002000

08009b7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b80:	b0ca      	sub	sp, #296	; 0x128
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009ba0:	2500      	movs	r5, #0
 8009ba2:	ea54 0305 	orrs.w	r3, r4, r5
 8009ba6:	d049      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bb2:	d02f      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bb8:	d828      	bhi.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bbe:	d01a      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc4:	d822      	bhi.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bce:	d007      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009bd0:	e01c      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd2:	4bb8      	ldr	r3, [pc, #736]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	4ab7      	ldr	r2, [pc, #732]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bde:	e01a      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be4:	3308      	adds	r3, #8
 8009be6:	2102      	movs	r1, #2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f002 fb61 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bf4:	e00f      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfa:	3328      	adds	r3, #40	; 0x28
 8009bfc:	2102      	movs	r1, #2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f002 fc08 	bl	800c414 <RCCEx_PLL3_Config>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c0a:	e004      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c12:	e000      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c1e:	4ba5      	ldr	r3, [pc, #660]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c2c:	4aa1      	ldr	r2, [pc, #644]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	6513      	str	r3, [r2, #80]	; 0x50
 8009c32:	e003      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009c48:	f04f 0900 	mov.w	r9, #0
 8009c4c:	ea58 0309 	orrs.w	r3, r8, r9
 8009c50:	d047      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d82a      	bhi.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c5c:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c79 	.word	0x08009c79
 8009c68:	08009c87 	.word	0x08009c87
 8009c6c:	08009c9d 	.word	0x08009c9d
 8009c70:	08009cbb 	.word	0x08009cbb
 8009c74:	08009cbb 	.word	0x08009cbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c78:	4b8e      	ldr	r3, [pc, #568]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	4a8d      	ldr	r2, [pc, #564]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c84:	e01a      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f002 fb0e 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c9a:	e00f      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca0:	3328      	adds	r3, #40	; 0x28
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f002 fbb5 	bl	800c414 <RCCEx_PLL3_Config>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cc4:	4b7b      	ldr	r3, [pc, #492]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc8:	f023 0107 	bic.w	r1, r3, #7
 8009ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd2:	4a78      	ldr	r2, [pc, #480]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8009cd8:	e003      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009cee:	f04f 0b00 	mov.w	fp, #0
 8009cf2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009cf6:	d04c      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d02:	d030      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d08:	d829      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8009d0c:	d02d      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8009d10:	d825      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d12:	2b80      	cmp	r3, #128	; 0x80
 8009d14:	d018      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009d16:	2b80      	cmp	r3, #128	; 0x80
 8009d18:	d821      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d1e:	2b40      	cmp	r3, #64	; 0x40
 8009d20:	d007      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d22:	e01c      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d24:	4b63      	ldr	r3, [pc, #396]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	4a62      	ldr	r2, [pc, #392]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d30:	e01c      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d36:	3308      	adds	r3, #8
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f002 fab8 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d46:	e011      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4c:	3328      	adds	r3, #40	; 0x28
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f002 fb5f 	bl	800c414 <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d5c:	e006      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d64:	e002      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d66:	bf00      	nop
 8009d68:	e000      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009d74:	4b4f      	ldr	r3, [pc, #316]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d78:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d82:	4a4c      	ldr	r2, [pc, #304]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d84:	430b      	orrs	r3, r1
 8009d86:	6513      	str	r3, [r2, #80]	; 0x50
 8009d88:	e003      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009d9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009da2:	2300      	movs	r3, #0
 8009da4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009da8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009dac:	460b      	mov	r3, r1
 8009dae:	4313      	orrs	r3, r2
 8009db0:	d053      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dbe:	d035      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009dc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dc4:	d82e      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dca:	d031      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009dcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dd0:	d828      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dd6:	d01a      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ddc:	d822      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009de6:	d007      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009de8:	e01c      	b.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dea:	4b32      	ldr	r3, [pc, #200]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	4a31      	ldr	r2, [pc, #196]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009df6:	e01c      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 fa55 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e0c:	e011      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e12:	3328      	adds	r3, #40	; 0x28
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f002 fafc 	bl	800c414 <RCCEx_PLL3_Config>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e22:	e006      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e2a:	e002      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e2c:	bf00      	nop
 8009e2e:	e000      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e3a:	4b1e      	ldr	r3, [pc, #120]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009e74:	460b      	mov	r3, r1
 8009e76:	4313      	orrs	r3, r2
 8009e78:	d056      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e86:	d038      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e8c:	d831      	bhi.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e92:	d034      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009e94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e98:	d82b      	bhi.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e9e:	d01d      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ea4:	d825      	bhi.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009eaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eae:	d00a      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009eb0:	e01f      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eb2:	bf00      	nop
 8009eb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb8:	4ba2      	ldr	r3, [pc, #648]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4aa1      	ldr	r2, [pc, #644]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ec4:	e01c      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	3308      	adds	r3, #8
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f002 f9ee 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009eda:	e011      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee0:	3328      	adds	r3, #40	; 0x28
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f002 fa95 	bl	800c414 <RCCEx_PLL3_Config>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ef0:	e006      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ef8:	e002      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009efa:	bf00      	nop
 8009efc:	e000      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f08:	4b8e      	ldr	r3, [pc, #568]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f18:	4a8a      	ldr	r2, [pc, #552]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8009f1e:	e003      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009f3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009f42:	460b      	mov	r3, r1
 8009f44:	4313      	orrs	r3, r2
 8009f46:	d03a      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4e:	2b30      	cmp	r3, #48	; 0x30
 8009f50:	d01f      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f52:	2b30      	cmp	r3, #48	; 0x30
 8009f54:	d819      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	d00c      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d815      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d019      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009f62:	2b10      	cmp	r3, #16
 8009f64:	d111      	bne.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f66:	4b77      	ldr	r3, [pc, #476]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4a76      	ldr	r2, [pc, #472]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f72:	e011      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f78:	3308      	adds	r3, #8
 8009f7a:	2102      	movs	r1, #2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f002 f997 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009f82:	4603      	mov	r3, r0
 8009f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f88:	e006      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f90:	e002      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f92:	bf00      	nop
 8009f94:	e000      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fa0:	4b68      	ldr	r3, [pc, #416]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fae:	4a65      	ldr	r2, [pc, #404]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fb4:	e003      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009fca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009fd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	d051      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fe8:	d035      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fee:	d82e      	bhi.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ff4:	d031      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ff6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ffa:	d828      	bhi.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a000:	d01a      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a006:	d822      	bhi.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a010:	d007      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a012:	e01c      	b.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a014:	4b4b      	ldr	r3, [pc, #300]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a4a      	ldr	r2, [pc, #296]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a020:	e01c      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a026:	3308      	adds	r3, #8
 800a028:	2100      	movs	r1, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f002 f940 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a030:	4603      	mov	r3, r0
 800a032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a036:	e011      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03c:	3328      	adds	r3, #40	; 0x28
 800a03e:	2100      	movs	r1, #0
 800a040:	4618      	mov	r0, r3
 800a042:	f002 f9e7 	bl	800c414 <RCCEx_PLL3_Config>
 800a046:	4603      	mov	r3, r0
 800a048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a04c:	e006      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a054:	e002      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a056:	bf00      	nop
 800a058:	e000      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a05c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a064:	4b37      	ldr	r3, [pc, #220]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a068:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a072:	4a34      	ldr	r2, [pc, #208]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a074:	430b      	orrs	r3, r1
 800a076:	6513      	str	r3, [r2, #80]	; 0x50
 800a078:	e003      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a07e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a08e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a092:	2300      	movs	r3, #0
 800a094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a098:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a09c:	460b      	mov	r3, r1
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	d056      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0ac:	d033      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a0ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0b2:	d82c      	bhi.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0b8:	d02f      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a0ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0be:	d826      	bhi.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0c4:	d02b      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a0c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0ca:	d820      	bhi.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0d0:	d012      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a0d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0d6:	d81a      	bhi.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d022      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e0:	d115      	bne.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f002 f8e0 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0f6:	e015      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fc:	3328      	adds	r3, #40	; 0x28
 800a0fe:	2101      	movs	r1, #1
 800a100:	4618      	mov	r0, r3
 800a102:	f002 f987 	bl	800c414 <RCCEx_PLL3_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a10c:	e00a      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a114:	e006      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a116:	bf00      	nop
 800a118:	e004      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a11a:	bf00      	nop
 800a11c:	e002      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a11e:	bf00      	nop
 800a120:	e000      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10d      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a12c:	4b05      	ldr	r3, [pc, #20]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a130:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a13a:	4a02      	ldr	r2, [pc, #8]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a13c:	430b      	orrs	r3, r1
 800a13e:	6513      	str	r3, [r2, #80]	; 0x50
 800a140:	e006      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a142:	bf00      	nop
 800a144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a14c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a15c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a160:	2300      	movs	r3, #0
 800a162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a166:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d055      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a17c:	d033      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a17e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a182:	d82c      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a188:	d02f      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18e:	d826      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a194:	d02b      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a19a:	d820      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a0:	d012      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a6:	d81a      	bhi.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d022      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a1ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1b0:	d115      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f002 f878 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1c6:	e015      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1cc:	3328      	adds	r3, #40	; 0x28
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f002 f91f 	bl	800c414 <RCCEx_PLL3_Config>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1dc:	e00a      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1e4:	e006      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1e6:	bf00      	nop
 800a1e8:	e004      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1ea:	bf00      	nop
 800a1ec:	e002      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1ee:	bf00      	nop
 800a1f0:	e000      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10b      	bne.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a1fc:	4ba3      	ldr	r3, [pc, #652]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a200:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a208:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a20c:	4a9f      	ldr	r2, [pc, #636]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a20e:	430b      	orrs	r3, r1
 800a210:	6593      	str	r3, [r2, #88]	; 0x58
 800a212:	e003      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a22c:	2300      	movs	r3, #0
 800a22e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a236:	460b      	mov	r3, r1
 800a238:	4313      	orrs	r3, r2
 800a23a:	d037      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a246:	d00e      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a24c:	d816      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d018      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a256:	d111      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a258:	4b8c      	ldr	r3, [pc, #560]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25c:	4a8b      	ldr	r2, [pc, #556]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a264:	e00f      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26a:	3308      	adds	r3, #8
 800a26c:	2101      	movs	r1, #1
 800a26e:	4618      	mov	r0, r3
 800a270:	f002 f81e 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a274:	4603      	mov	r3, r0
 800a276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a27a:	e004      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a282:	e000      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10a      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a28e:	4b7f      	ldr	r3, [pc, #508]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a292:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29c:	4a7b      	ldr	r2, [pc, #492]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	6513      	str	r3, [r2, #80]	; 0x50
 800a2a2:	e003      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a2c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	d039      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d81c      	bhi.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a2d6:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a319 	.word	0x0800a319
 800a2e0:	0800a2ed 	.word	0x0800a2ed
 800a2e4:	0800a2fb 	.word	0x0800a2fb
 800a2e8:	0800a319 	.word	0x0800a319
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ec:	4b67      	ldr	r3, [pc, #412]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f0:	4a66      	ldr	r2, [pc, #408]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2f8:	e00f      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fe:	3308      	adds	r3, #8
 800a300:	2102      	movs	r1, #2
 800a302:	4618      	mov	r0, r3
 800a304:	f001 ffd4 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a308:	4603      	mov	r3, r0
 800a30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a30e:	e004      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a316:	e000      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10a      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a322:	4b5a      	ldr	r3, [pc, #360]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a326:	f023 0103 	bic.w	r1, r3, #3
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a32e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a330:	4a56      	ldr	r2, [pc, #344]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a332:	430b      	orrs	r3, r1
 800a334:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a336:	e003      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a33c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a34c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a350:	2300      	movs	r3, #0
 800a352:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a35a:	460b      	mov	r3, r1
 800a35c:	4313      	orrs	r3, r2
 800a35e:	f000 809f 	beq.w	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a362:	4b4b      	ldr	r3, [pc, #300]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a4a      	ldr	r2, [pc, #296]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a36c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a36e:	f7f9 f929 	bl	80035c4 <HAL_GetTick>
 800a372:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a376:	e00b      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a378:	f7f9 f924 	bl	80035c4 <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	2b64      	cmp	r3, #100	; 0x64
 800a386:	d903      	bls.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a38e:	e005      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a390:	4b3f      	ldr	r3, [pc, #252]	; (800a490 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d0ed      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a39c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d179      	bne.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3a4:	4b39      	ldr	r3, [pc, #228]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3b0:	4053      	eors	r3, r2
 800a3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d015      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3ba:	4b34      	ldr	r3, [pc, #208]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3c6:	4b31      	ldr	r3, [pc, #196]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ca:	4a30      	ldr	r2, [pc, #192]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3d0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3d2:	4b2e      	ldr	r3, [pc, #184]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	4a2d      	ldr	r2, [pc, #180]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3dc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3de:	4a2b      	ldr	r2, [pc, #172]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f2:	d118      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f4:	f7f9 f8e6 	bl	80035c4 <HAL_GetTick>
 800a3f8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3fc:	e00d      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3fe:	f7f9 f8e1 	bl	80035c4 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a408:	1ad2      	subs	r2, r2, r3
 800a40a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a40e:	429a      	cmp	r2, r3
 800a410:	d903      	bls.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a418:	e005      	b.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a41a:	4b1c      	ldr	r3, [pc, #112]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0eb      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d129      	bne.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a43e:	d10e      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a440:	4b12      	ldr	r3, [pc, #72]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a450:	091a      	lsrs	r2, r3, #4
 800a452:	4b10      	ldr	r3, [pc, #64]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a454:	4013      	ands	r3, r2
 800a456:	4a0d      	ldr	r2, [pc, #52]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a458:	430b      	orrs	r3, r1
 800a45a:	6113      	str	r3, [r2, #16]
 800a45c:	e005      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a45e:	4b0b      	ldr	r3, [pc, #44]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a464:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a468:	6113      	str	r3, [r2, #16]
 800a46a:	4b08      	ldr	r3, [pc, #32]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a46c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a47a:	4a04      	ldr	r2, [pc, #16]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6713      	str	r3, [r2, #112]	; 0x70
 800a480:	e00e      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a48a:	e009      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a48c:	58024400 	.word	0x58024400
 800a490:	58024800 	.word	0x58024800
 800a494:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f002 0301 	and.w	r3, r2, #1
 800a4ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	f000 8089 	beq.w	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c8:	2b28      	cmp	r3, #40	; 0x28
 800a4ca:	d86b      	bhi.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a4cc:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d2:	bf00      	nop
 800a4d4:	0800a5ad 	.word	0x0800a5ad
 800a4d8:	0800a5a5 	.word	0x0800a5a5
 800a4dc:	0800a5a5 	.word	0x0800a5a5
 800a4e0:	0800a5a5 	.word	0x0800a5a5
 800a4e4:	0800a5a5 	.word	0x0800a5a5
 800a4e8:	0800a5a5 	.word	0x0800a5a5
 800a4ec:	0800a5a5 	.word	0x0800a5a5
 800a4f0:	0800a5a5 	.word	0x0800a5a5
 800a4f4:	0800a579 	.word	0x0800a579
 800a4f8:	0800a5a5 	.word	0x0800a5a5
 800a4fc:	0800a5a5 	.word	0x0800a5a5
 800a500:	0800a5a5 	.word	0x0800a5a5
 800a504:	0800a5a5 	.word	0x0800a5a5
 800a508:	0800a5a5 	.word	0x0800a5a5
 800a50c:	0800a5a5 	.word	0x0800a5a5
 800a510:	0800a5a5 	.word	0x0800a5a5
 800a514:	0800a58f 	.word	0x0800a58f
 800a518:	0800a5a5 	.word	0x0800a5a5
 800a51c:	0800a5a5 	.word	0x0800a5a5
 800a520:	0800a5a5 	.word	0x0800a5a5
 800a524:	0800a5a5 	.word	0x0800a5a5
 800a528:	0800a5a5 	.word	0x0800a5a5
 800a52c:	0800a5a5 	.word	0x0800a5a5
 800a530:	0800a5a5 	.word	0x0800a5a5
 800a534:	0800a5ad 	.word	0x0800a5ad
 800a538:	0800a5a5 	.word	0x0800a5a5
 800a53c:	0800a5a5 	.word	0x0800a5a5
 800a540:	0800a5a5 	.word	0x0800a5a5
 800a544:	0800a5a5 	.word	0x0800a5a5
 800a548:	0800a5a5 	.word	0x0800a5a5
 800a54c:	0800a5a5 	.word	0x0800a5a5
 800a550:	0800a5a5 	.word	0x0800a5a5
 800a554:	0800a5ad 	.word	0x0800a5ad
 800a558:	0800a5a5 	.word	0x0800a5a5
 800a55c:	0800a5a5 	.word	0x0800a5a5
 800a560:	0800a5a5 	.word	0x0800a5a5
 800a564:	0800a5a5 	.word	0x0800a5a5
 800a568:	0800a5a5 	.word	0x0800a5a5
 800a56c:	0800a5a5 	.word	0x0800a5a5
 800a570:	0800a5a5 	.word	0x0800a5a5
 800a574:	0800a5ad 	.word	0x0800a5ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57c:	3308      	adds	r3, #8
 800a57e:	2101      	movs	r1, #1
 800a580:	4618      	mov	r0, r3
 800a582:	f001 fe95 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a586:	4603      	mov	r3, r0
 800a588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a58c:	e00f      	b.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a592:	3328      	adds	r3, #40	; 0x28
 800a594:	2101      	movs	r1, #1
 800a596:	4618      	mov	r0, r3
 800a598:	f001 ff3c 	bl	800c414 <RCCEx_PLL3_Config>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5a2:	e004      	b.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5aa:	e000      	b.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5b6:	4bbf      	ldr	r3, [pc, #764]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ba:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c4:	4abb      	ldr	r2, [pc, #748]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	6553      	str	r3, [r2, #84]	; 0x54
 800a5ca:	e003      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	f002 0302 	and.w	r3, r2, #2
 800a5e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a5ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	d041      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	d824      	bhi.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a5fe:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a604:	0800a651 	.word	0x0800a651
 800a608:	0800a61d 	.word	0x0800a61d
 800a60c:	0800a633 	.word	0x0800a633
 800a610:	0800a651 	.word	0x0800a651
 800a614:	0800a651 	.word	0x0800a651
 800a618:	0800a651 	.word	0x0800a651
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a620:	3308      	adds	r3, #8
 800a622:	2101      	movs	r1, #1
 800a624:	4618      	mov	r0, r3
 800a626:	f001 fe43 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a630:	e00f      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a636:	3328      	adds	r3, #40	; 0x28
 800a638:	2101      	movs	r1, #1
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 feea 	bl	800c414 <RCCEx_PLL3_Config>
 800a640:	4603      	mov	r3, r0
 800a642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a646:	e004      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a64e:	e000      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a650:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a65a:	4b96      	ldr	r3, [pc, #600]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f023 0107 	bic.w	r1, r3, #7
 800a662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a668:	4a92      	ldr	r2, [pc, #584]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a66a:	430b      	orrs	r3, r1
 800a66c:	6553      	str	r3, [r2, #84]	; 0x54
 800a66e:	e003      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f002 0304 	and.w	r3, r2, #4
 800a684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a688:	2300      	movs	r3, #0
 800a68a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a68e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a692:	460b      	mov	r3, r1
 800a694:	4313      	orrs	r3, r2
 800a696:	d044      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6a0:	2b05      	cmp	r3, #5
 800a6a2:	d825      	bhi.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6f9 	.word	0x0800a6f9
 800a6b0:	0800a6c5 	.word	0x0800a6c5
 800a6b4:	0800a6db 	.word	0x0800a6db
 800a6b8:	0800a6f9 	.word	0x0800a6f9
 800a6bc:	0800a6f9 	.word	0x0800a6f9
 800a6c0:	0800a6f9 	.word	0x0800a6f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 fdef 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6d8:	e00f      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6de:	3328      	adds	r3, #40	; 0x28
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fe96 	bl	800c414 <RCCEx_PLL3_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6ee:	e004      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6f6:	e000      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a702:	4b6c      	ldr	r3, [pc, #432]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	f023 0107 	bic.w	r1, r3, #7
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a712:	4a68      	ldr	r2, [pc, #416]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6593      	str	r3, [r2, #88]	; 0x58
 800a718:	e003      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a71e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f002 0320 	and.w	r3, r2, #32
 800a72e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a732:	2300      	movs	r3, #0
 800a734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a73c:	460b      	mov	r3, r1
 800a73e:	4313      	orrs	r3, r2
 800a740:	d055      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a74e:	d033      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a754:	d82c      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a75a:	d02f      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a760:	d826      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a762:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a766:	d02b      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a76c:	d820      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a76e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a772:	d012      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a778:	d81a      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d022      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a77e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a782:	d115      	bne.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a788:	3308      	adds	r3, #8
 800a78a:	2100      	movs	r1, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 fd8f 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a798:	e015      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79e:	3328      	adds	r3, #40	; 0x28
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 fe36 	bl	800c414 <RCCEx_PLL3_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7ae:	e00a      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7b6:	e006      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7b8:	bf00      	nop
 800a7ba:	e004      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7bc:	bf00      	nop
 800a7be:	e002      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10b      	bne.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7ce:	4b39      	ldr	r3, [pc, #228]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7de:	4a35      	ldr	r2, [pc, #212]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	6553      	str	r3, [r2, #84]	; 0x54
 800a7e4:	e003      	b.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a7fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7fe:	2300      	movs	r3, #0
 800a800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a808:	460b      	mov	r3, r1
 800a80a:	4313      	orrs	r3, r2
 800a80c:	d058      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a81a:	d033      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a81c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a820:	d82c      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a826:	d02f      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a82c:	d826      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a832:	d02b      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a838:	d820      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a83e:	d012      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a844:	d81a      	bhi.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d022      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a84e:	d115      	bne.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a854:	3308      	adds	r3, #8
 800a856:	2100      	movs	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 fd29 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a85e:	4603      	mov	r3, r0
 800a860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a864:	e015      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86a:	3328      	adds	r3, #40	; 0x28
 800a86c:	2102      	movs	r1, #2
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 fdd0 	bl	800c414 <RCCEx_PLL3_Config>
 800a874:	4603      	mov	r3, r0
 800a876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a87a:	e00a      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a882:	e006      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a884:	bf00      	nop
 800a886:	e004      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a888:	bf00      	nop
 800a88a:	e002      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a88c:	bf00      	nop
 800a88e:	e000      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10e      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a89a:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8aa:	4a02      	ldr	r2, [pc, #8]	; (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	6593      	str	r3, [r2, #88]	; 0x58
 800a8b0:	e006      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a8b2:	bf00      	nop
 800a8b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a8cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	d055      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8ec:	d033      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a8ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8f2:	d82c      	bhi.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f8:	d02f      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8fe:	d826      	bhi.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a904:	d02b      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a90a:	d820      	bhi.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a910:	d012      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a916:	d81a      	bhi.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d022      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a920:	d115      	bne.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a926:	3308      	adds	r3, #8
 800a928:	2100      	movs	r1, #0
 800a92a:	4618      	mov	r0, r3
 800a92c:	f001 fcc0 	bl	800c2b0 <RCCEx_PLL2_Config>
 800a930:	4603      	mov	r3, r0
 800a932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a936:	e015      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a93c:	3328      	adds	r3, #40	; 0x28
 800a93e:	2102      	movs	r1, #2
 800a940:	4618      	mov	r0, r3
 800a942:	f001 fd67 	bl	800c414 <RCCEx_PLL3_Config>
 800a946:	4603      	mov	r3, r0
 800a948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a94c:	e00a      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a954:	e006      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a956:	bf00      	nop
 800a958:	e004      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a95a:	bf00      	nop
 800a95c:	e002      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a95e:	bf00      	nop
 800a960:	e000      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a962:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10b      	bne.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a96c:	4ba1      	ldr	r3, [pc, #644]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a970:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a97c:	4a9d      	ldr	r2, [pc, #628]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a97e:	430b      	orrs	r3, r1
 800a980:	6593      	str	r3, [r2, #88]	; 0x58
 800a982:	e003      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a988:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f002 0308 	and.w	r3, r2, #8
 800a998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a99c:	2300      	movs	r3, #0
 800a99e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	d01e      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b8:	d10c      	bne.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9be:	3328      	adds	r3, #40	; 0x28
 800a9c0:	2102      	movs	r1, #2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 fd26 	bl	800c414 <RCCEx_PLL3_Config>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9d4:	4b87      	ldr	r3, [pc, #540]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e4:	4a83      	ldr	r2, [pc, #524]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9e6:	430b      	orrs	r3, r1
 800a9e8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f002 0310 	and.w	r3, r2, #16
 800a9f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aa04:	460b      	mov	r3, r1
 800aa06:	4313      	orrs	r3, r2
 800aa08:	d01e      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa16:	d10c      	bne.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1c:	3328      	adds	r3, #40	; 0x28
 800aa1e:	2102      	movs	r1, #2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 fcf7 	bl	800c414 <RCCEx_PLL3_Config>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa32:	4b70      	ldr	r3, [pc, #448]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa42:	4a6c      	ldr	r2, [pc, #432]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa44:	430b      	orrs	r3, r1
 800aa46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aa62:	460b      	mov	r3, r1
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d03e      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa74:	d022      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aa76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa7a:	d81b      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aa80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa84:	d00b      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aa86:	e015      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 fc0d 	bl	800c2b0 <RCCEx_PLL2_Config>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa9c:	e00f      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa2:	3328      	adds	r3, #40	; 0x28
 800aaa4:	2102      	movs	r1, #2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 fcb4 	bl	800c414 <RCCEx_PLL3_Config>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aab2:	e004      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaba:	e000      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aabc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10b      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aac6:	4b4b      	ldr	r3, [pc, #300]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aad6:	4a47      	ldr	r2, [pc, #284]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aad8:	430b      	orrs	r3, r1
 800aada:	6593      	str	r3, [r2, #88]	; 0x58
 800aadc:	e003      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800aaf2:	67bb      	str	r3, [r7, #120]	; 0x78
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaf8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d03b      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab0e:	d01f      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ab10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab14:	d818      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ab16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab1a:	d003      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab20:	d007      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab22:	e011      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab24:	4b33      	ldr	r3, [pc, #204]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	4a32      	ldr	r2, [pc, #200]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab30:	e00f      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab36:	3328      	adds	r3, #40	; 0x28
 800ab38:	2101      	movs	r1, #1
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f001 fc6a 	bl	800c414 <RCCEx_PLL3_Config>
 800ab40:	4603      	mov	r3, r0
 800ab42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab46:	e004      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab4e:	e000      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10b      	bne.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab5a:	4b26      	ldr	r3, [pc, #152]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6a:	4a22      	ldr	r2, [pc, #136]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	6553      	str	r3, [r2, #84]	; 0x54
 800ab70:	e003      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ab86:	673b      	str	r3, [r7, #112]	; 0x70
 800ab88:	2300      	movs	r3, #0
 800ab8a:	677b      	str	r3, [r7, #116]	; 0x74
 800ab8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ab90:	460b      	mov	r3, r1
 800ab92:	4313      	orrs	r3, r2
 800ab94:	d034      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ab96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba4:	d007      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aba6:	e011      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba8:	4b12      	ldr	r3, [pc, #72]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	4a11      	ldr	r2, [pc, #68]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abb4:	e00e      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abba:	3308      	adds	r3, #8
 800abbc:	2102      	movs	r1, #2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fb76 	bl	800c2b0 <RCCEx_PLL2_Config>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abca:	e003      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10d      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800abdc:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abea:	4a02      	ldr	r2, [pc, #8]	; (800abf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abec:	430b      	orrs	r3, r1
 800abee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abf0:	e006      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800abf2:	bf00      	nop
 800abf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ac0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac0e:	2300      	movs	r3, #0
 800ac10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ac16:	460b      	mov	r3, r1
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	d00c      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac20:	3328      	adds	r3, #40	; 0x28
 800ac22:	2102      	movs	r1, #2
 800ac24:	4618      	mov	r0, r3
 800ac26:	f001 fbf5 	bl	800c414 <RCCEx_PLL3_Config>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ac42:	663b      	str	r3, [r7, #96]	; 0x60
 800ac44:	2300      	movs	r3, #0
 800ac46:	667b      	str	r3, [r7, #100]	; 0x64
 800ac48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	d038      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac5e:	d018      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ac60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac64:	d811      	bhi.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac6a:	d014      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ac6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac70:	d80b      	bhi.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d011      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d106      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac7c:	4bc3      	ldr	r3, [pc, #780]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	4ac2      	ldr	r2, [pc, #776]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ac88:	e008      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac90:	e004      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac92:	bf00      	nop
 800ac94:	e002      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac96:	bf00      	nop
 800ac98:	e000      	b.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ac9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10b      	bne.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aca4:	4bb9      	ldr	r3, [pc, #740]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acb4:	4ab5      	ldr	r2, [pc, #724]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acb6:	430b      	orrs	r3, r1
 800acb8:	6553      	str	r3, [r2, #84]	; 0x54
 800acba:	e003      	b.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800acd0:	65bb      	str	r3, [r7, #88]	; 0x58
 800acd2:	2300      	movs	r3, #0
 800acd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800acda:	460b      	mov	r3, r1
 800acdc:	4313      	orrs	r3, r2
 800acde:	d009      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ace0:	4baa      	ldr	r3, [pc, #680]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ace2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ace8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acee:	4aa7      	ldr	r2, [pc, #668]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acf0:	430b      	orrs	r3, r1
 800acf2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800acf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ad00:	653b      	str	r3, [r7, #80]	; 0x50
 800ad02:	2300      	movs	r3, #0
 800ad04:	657b      	str	r3, [r7, #84]	; 0x54
 800ad06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	d00a      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad10:	4b9e      	ldr	r3, [pc, #632]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ad20:	4a9a      	ldr	r2, [pc, #616]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad22:	430b      	orrs	r3, r1
 800ad24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ad32:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad34:	2300      	movs	r3, #0
 800ad36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	d009      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad42:	4b92      	ldr	r3, [pc, #584]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad46:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ad4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad50:	4a8e      	ldr	r2, [pc, #568]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad52:	430b      	orrs	r3, r1
 800ad54:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ad62:	643b      	str	r3, [r7, #64]	; 0x40
 800ad64:	2300      	movs	r3, #0
 800ad66:	647b      	str	r3, [r7, #68]	; 0x44
 800ad68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	d00e      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad72:	4b86      	ldr	r3, [pc, #536]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	4a85      	ldr	r2, [pc, #532]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad7c:	6113      	str	r3, [r2, #16]
 800ad7e:	4b83      	ldr	r3, [pc, #524]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad80:	6919      	ldr	r1, [r3, #16]
 800ad82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad8a:	4a80      	ldr	r2, [pc, #512]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ad9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad9e:	2300      	movs	r3, #0
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ada2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ada6:	460b      	mov	r3, r1
 800ada8:	4313      	orrs	r3, r2
 800adaa:	d009      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adac:	4b77      	ldr	r3, [pc, #476]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adba:	4a74      	ldr	r2, [pc, #464]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adbc:	430b      	orrs	r3, r1
 800adbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800adcc:	633b      	str	r3, [r7, #48]	; 0x30
 800adce:	2300      	movs	r3, #0
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
 800add2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800add6:	460b      	mov	r3, r1
 800add8:	4313      	orrs	r3, r2
 800adda:	d00a      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800addc:	4b6b      	ldr	r3, [pc, #428]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ade4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adec:	4a67      	ldr	r2, [pc, #412]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adee:	430b      	orrs	r3, r1
 800adf0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800adf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	2100      	movs	r1, #0
 800adfc:	62b9      	str	r1, [r7, #40]	; 0x28
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	d011      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae12:	3308      	adds	r3, #8
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 fa4a 	bl	800c2b0 <RCCEx_PLL2_Config>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	6239      	str	r1, [r7, #32]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
 800ae44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	d011      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae52:	3308      	adds	r3, #8
 800ae54:	2101      	movs	r1, #1
 800ae56:	4618      	mov	r0, r3
 800ae58:	f001 fa2a 	bl	800c2b0 <RCCEx_PLL2_Config>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	61b9      	str	r1, [r7, #24]
 800ae7e:	f003 0304 	and.w	r3, r3, #4
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	d011      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae92:	3308      	adds	r3, #8
 800ae94:	2102      	movs	r1, #2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 fa0a 	bl	800c2b0 <RCCEx_PLL2_Config>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aeb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	2100      	movs	r1, #0
 800aebc:	6139      	str	r1, [r7, #16]
 800aebe:	f003 0308 	and.w	r3, r3, #8
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aec8:	460b      	mov	r3, r1
 800aeca:	4313      	orrs	r3, r2
 800aecc:	d011      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed2:	3328      	adds	r3, #40	; 0x28
 800aed4:	2100      	movs	r1, #0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 fa9c 	bl	800c414 <RCCEx_PLL3_Config>
 800aedc:	4603      	mov	r3, r0
 800aede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aee2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	2100      	movs	r1, #0
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	f003 0310 	and.w	r3, r3, #16
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af08:	460b      	mov	r3, r1
 800af0a:	4313      	orrs	r3, r2
 800af0c:	d011      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af12:	3328      	adds	r3, #40	; 0x28
 800af14:	2101      	movs	r1, #1
 800af16:	4618      	mov	r0, r3
 800af18:	f001 fa7c 	bl	800c414 <RCCEx_PLL3_Config>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	2100      	movs	r1, #0
 800af3c:	6039      	str	r1, [r7, #0]
 800af3e:	f003 0320 	and.w	r3, r3, #32
 800af42:	607b      	str	r3, [r7, #4]
 800af44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af48:	460b      	mov	r3, r1
 800af4a:	4313      	orrs	r3, r2
 800af4c:	d011      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af52:	3328      	adds	r3, #40	; 0x28
 800af54:	2102      	movs	r1, #2
 800af56:	4618      	mov	r0, r3
 800af58:	f001 fa5c 	bl	800c414 <RCCEx_PLL3_Config>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800af72:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	e000      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
}
 800af80:	4618      	mov	r0, r3
 800af82:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800af86:	46bd      	mov	sp, r7
 800af88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af8c:	58024400 	.word	0x58024400

0800af90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b090      	sub	sp, #64	; 0x40
 800af94:	af00      	add	r7, sp, #0
 800af96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800afa2:	430b      	orrs	r3, r1
 800afa4:	f040 8094 	bne.w	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afa8:	4b9e      	ldr	r3, [pc, #632]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afac:	f003 0307 	and.w	r3, r3, #7
 800afb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	f200 8087 	bhi.w	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd5 	.word	0x0800afd5
 800afc4:	0800affd 	.word	0x0800affd
 800afc8:	0800b025 	.word	0x0800b025
 800afcc:	0800b0c1 	.word	0x0800b0c1
 800afd0:	0800b04d 	.word	0x0800b04d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afd4:	4b93      	ldr	r3, [pc, #588]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe0:	d108      	bne.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afe6:	4618      	mov	r0, r3
 800afe8:	f001 f810 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff0:	f000 bd45 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff8:	f000 bd41 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800affc:	4b89      	ldr	r3, [pc, #548]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b008:	d108      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b00a:	f107 0318 	add.w	r3, r7, #24
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fd54 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b018:	f000 bd31 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b020:	f000 bd2d 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b024:	4b7f      	ldr	r3, [pc, #508]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b02c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b030:	d108      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b032:	f107 030c 	add.w	r3, r7, #12
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fe94 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b040:	f000 bd1d 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b048:	f000 bd19 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b04c:	4b75      	ldr	r3, [pc, #468]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b054:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b056:	4b73      	ldr	r3, [pc, #460]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0304 	and.w	r3, r3, #4
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d10c      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b064:	2b00      	cmp	r3, #0
 800b066:	d109      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b068:	4b6e      	ldr	r3, [pc, #440]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	08db      	lsrs	r3, r3, #3
 800b06e:	f003 0303 	and.w	r3, r3, #3
 800b072:	4a6d      	ldr	r2, [pc, #436]	; (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b074:	fa22 f303 	lsr.w	r3, r2, r3
 800b078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b07a:	e01f      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b07c:	4b69      	ldr	r3, [pc, #420]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b088:	d106      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b090:	d102      	bne.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b092:	4b66      	ldr	r3, [pc, #408]	; (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b096:	e011      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b098:	4b62      	ldr	r3, [pc, #392]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0a4:	d106      	bne.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0ac:	d102      	bne.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0ae:	4b60      	ldr	r3, [pc, #384]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0b2:	e003      	b.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0b8:	f000 bce1 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0bc:	f000 bcdf 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0c0:	4b5c      	ldr	r3, [pc, #368]	; (800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c4:	f000 bcdb 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0cc:	f000 bcd7 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	f040 80ad 	bne.w	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b0de:	4b51      	ldr	r3, [pc, #324]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b0e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ee:	d056      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f6:	f200 8090 	bhi.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	2bc0      	cmp	r3, #192	; 0xc0
 800b0fe:	f000 8088 	beq.w	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	2bc0      	cmp	r3, #192	; 0xc0
 800b106:	f200 8088 	bhi.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	2b80      	cmp	r3, #128	; 0x80
 800b10e:	d032      	beq.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	2b80      	cmp	r3, #128	; 0x80
 800b114:	f200 8081 	bhi.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	2b40      	cmp	r3, #64	; 0x40
 800b122:	d014      	beq.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b124:	e079      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b126:	4b3f      	ldr	r3, [pc, #252]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b12e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b132:	d108      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 ff67 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b142:	f000 bc9c 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b14a:	f000 bc98 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b14e:	4b35      	ldr	r3, [pc, #212]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b15a:	d108      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b15c:	f107 0318 	add.w	r3, r7, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fcab 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b16a:	f000 bc88 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b172:	f000 bc84 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b176:	4b2b      	ldr	r3, [pc, #172]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b182:	d108      	bne.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b184:	f107 030c 	add.w	r3, r7, #12
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 fdeb 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b192:	f000 bc74 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b19a:	f000 bc70 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b19e:	4b21      	ldr	r3, [pc, #132]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1a8:	4b1e      	ldr	r3, [pc, #120]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0304 	and.w	r3, r3, #4
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d10c      	bne.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d109      	bne.n	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1ba:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	08db      	lsrs	r3, r3, #3
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	4a18      	ldr	r2, [pc, #96]	; (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1cc:	e01f      	b.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1ce:	4b15      	ldr	r3, [pc, #84]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1da:	d106      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e2:	d102      	bne.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1e4:	4b11      	ldr	r3, [pc, #68]	; (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1e8:	e011      	b.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1f6:	d106      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1fe:	d102      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b200:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b204:	e003      	b.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b20a:	f000 bc38 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b20e:	f000 bc36 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b216:	f000 bc32 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21e:	f000 bc2e 	b.w	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b222:	bf00      	nop
 800b224:	58024400 	.word	0x58024400
 800b228:	03d09000 	.word	0x03d09000
 800b22c:	003d0900 	.word	0x003d0900
 800b230:	017d7840 	.word	0x017d7840
 800b234:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b23c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b240:	430b      	orrs	r3, r1
 800b242:	f040 809c 	bne.w	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b246:	4b9e      	ldr	r3, [pc, #632]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b24e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b256:	d054      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b25e:	f200 808b 	bhi.w	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b268:	f000 8083 	beq.w	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b272:	f200 8081 	bhi.w	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b27c:	d02f      	beq.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b284:	d878      	bhi.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d004      	beq.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b292:	d012      	beq.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b294:	e070      	b.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b296:	4b8a      	ldr	r3, [pc, #552]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b29e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2a2:	d107      	bne.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 feaf 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2b2:	e3e4      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b8:	e3e1      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2ba:	4b81      	ldr	r3, [pc, #516]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c6:	d107      	bne.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c8:	f107 0318 	add.w	r3, r7, #24
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 fbf5 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d6:	e3d2      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2dc:	e3cf      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2de:	4b78      	ldr	r3, [pc, #480]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ea:	d107      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ec:	f107 030c 	add.w	r3, r7, #12
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 fd37 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2fa:	e3c0      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b300:	e3bd      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b302:	4b6f      	ldr	r3, [pc, #444]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b30a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b30c:	4b6c      	ldr	r3, [pc, #432]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b04      	cmp	r3, #4
 800b316:	d10c      	bne.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b31e:	4b68      	ldr	r3, [pc, #416]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	08db      	lsrs	r3, r3, #3
 800b324:	f003 0303 	and.w	r3, r3, #3
 800b328:	4a66      	ldr	r2, [pc, #408]	; (800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b32a:	fa22 f303 	lsr.w	r3, r2, r3
 800b32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b330:	e01e      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b332:	4b63      	ldr	r3, [pc, #396]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b33e:	d106      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b346:	d102      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b348:	4b5f      	ldr	r3, [pc, #380]	; (800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34c:	e010      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b34e:	4b5c      	ldr	r3, [pc, #368]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b35a:	d106      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b362:	d102      	bne.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b364:	4b59      	ldr	r3, [pc, #356]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b368:	e002      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b36e:	e386      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b370:	e385      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b372:	4b57      	ldr	r3, [pc, #348]	; (800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b376:	e382      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b37c:	e37f      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b382:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b386:	430b      	orrs	r3, r1
 800b388:	f040 80a7 	bne.w	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b38c:	4b4c      	ldr	r3, [pc, #304]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b390:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b394:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b39c:	d055      	beq.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3a4:	f200 8096 	bhi.w	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ae:	f000 8084 	beq.w	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3b8:	f200 808c 	bhi.w	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c2:	d030      	beq.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ca:	f200 8083 	bhi.w	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d004      	beq.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3da:	d012      	beq.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b3dc:	e07a      	b.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3de:	4b38      	ldr	r3, [pc, #224]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ea:	d107      	bne.n	800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fe0b 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3fa:	e340      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b400:	e33d      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b402:	4b2f      	ldr	r3, [pc, #188]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b40e:	d107      	bne.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b410:	f107 0318 	add.w	r3, r7, #24
 800b414:	4618      	mov	r0, r3
 800b416:	f000 fb51 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b41e:	e32e      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b424:	e32b      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b426:	4b26      	ldr	r3, [pc, #152]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b432:	d107      	bne.n	800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b434:	f107 030c 	add.w	r3, r7, #12
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fc93 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b442:	e31c      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b444:	2300      	movs	r3, #0
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b448:	e319      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b44a:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b44e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b452:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b454:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	d10c      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	2b00      	cmp	r3, #0
 800b464:	d109      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b466:	4b16      	ldr	r3, [pc, #88]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	08db      	lsrs	r3, r3, #3
 800b46c:	f003 0303 	and.w	r3, r3, #3
 800b470:	4a14      	ldr	r2, [pc, #80]	; (800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b472:	fa22 f303 	lsr.w	r3, r2, r3
 800b476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b478:	e01e      	b.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b486:	d106      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b48e:	d102      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b490:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b494:	e010      	b.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b496:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a2:	d106      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4aa:	d102      	bne.n	800b4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4ac:	4b07      	ldr	r3, [pc, #28]	; (800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b0:	e002      	b.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4b6:	e2e2      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4b8:	e2e1      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4be:	e2de      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	03d09000 	.word	0x03d09000
 800b4c8:	003d0900 	.word	0x003d0900
 800b4cc:	017d7840 	.word	0x017d7840
 800b4d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d8:	e2d1      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4de:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	f040 809c 	bne.w	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b4e8:	4b93      	ldr	r3, [pc, #588]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b4f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4f8:	d054      	beq.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b500:	f200 808b 	bhi.w	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b50a:	f000 8083 	beq.w	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b514:	f200 8081 	bhi.w	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b51e:	d02f      	beq.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b526:	d878      	bhi.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b534:	d012      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b536:	e070      	b.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b538:	4b7f      	ldr	r3, [pc, #508]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b544:	d107      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fd5e 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b554:	e293      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b55a:	e290      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b55c:	4b76      	ldr	r3, [pc, #472]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b568:	d107      	bne.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b56a:	f107 0318 	add.w	r3, r7, #24
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 faa4 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b578:	e281      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b57e:	e27e      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b580:	4b6d      	ldr	r3, [pc, #436]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b58c:	d107      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58e:	f107 030c 	add.w	r3, r7, #12
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fbe6 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b59c:	e26f      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a2:	e26c      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5a4:	4b64      	ldr	r3, [pc, #400]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5ae:	4b62      	ldr	r3, [pc, #392]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d10c      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5c0:	4b5d      	ldr	r3, [pc, #372]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	08db      	lsrs	r3, r3, #3
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	4a5c      	ldr	r2, [pc, #368]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5d2:	e01e      	b.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5d4:	4b58      	ldr	r3, [pc, #352]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5e0:	d106      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5e8:	d102      	bne.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5ea:	4b55      	ldr	r3, [pc, #340]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ee:	e010      	b.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5f0:	4b51      	ldr	r3, [pc, #324]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5fc:	d106      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b604:	d102      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b606:	4b4f      	ldr	r3, [pc, #316]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b60a:	e002      	b.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b610:	e235      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b612:	e234      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b614:	4b4c      	ldr	r3, [pc, #304]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b618:	e231      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b61e:	e22e      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b624:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b628:	430b      	orrs	r3, r1
 800b62a:	f040 808f 	bne.w	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b62e:	4b42      	ldr	r3, [pc, #264]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b632:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b636:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b63e:	d06b      	beq.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b646:	d874      	bhi.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b64e:	d056      	beq.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b656:	d86c      	bhi.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b65e:	d03b      	beq.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b666:	d864      	bhi.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b66e:	d021      	beq.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b676:	d85c      	bhi.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d004      	beq.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b684:	d004      	beq.n	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b686:	e054      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b688:	f7fe fa0a 	bl	8009aa0 <HAL_RCC_GetPCLK1Freq>
 800b68c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b68e:	e1f6      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b690:	4b29      	ldr	r3, [pc, #164]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b69c:	d107      	bne.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b69e:	f107 0318 	add.w	r3, r7, #24
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 fa0a 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ac:	e1e7      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6b2:	e1e4      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6b4:	4b20      	ldr	r3, [pc, #128]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c0:	d107      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6c2:	f107 030c 	add.w	r3, r7, #12
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 fb4c 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d0:	e1d5      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d6:	e1d2      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d109      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6e4:	4b14      	ldr	r3, [pc, #80]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	08db      	lsrs	r3, r3, #3
 800b6ea:	f003 0303 	and.w	r3, r3, #3
 800b6ee:	4a13      	ldr	r2, [pc, #76]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f6:	e1c2      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6fc:	e1bf      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6fe:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70a:	d102      	bne.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b70c:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b710:	e1b5      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b716:	e1b2      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b718:	4b07      	ldr	r3, [pc, #28]	; (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b724:	d102      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b726:	4b07      	ldr	r3, [pc, #28]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72a:	e1a8      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b730:	e1a5      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b736:	e1a2      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b738:	58024400 	.word	0x58024400
 800b73c:	03d09000 	.word	0x03d09000
 800b740:	003d0900 	.word	0x003d0900
 800b744:	017d7840 	.word	0x017d7840
 800b748:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b74c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b750:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b754:	430b      	orrs	r3, r1
 800b756:	d173      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b758:	4b9c      	ldr	r3, [pc, #624]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b760:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b768:	d02f      	beq.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b770:	d863      	bhi.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b77e:	d012      	beq.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b780:	e05b      	b.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b782:	4b92      	ldr	r3, [pc, #584]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b78a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b78e:	d107      	bne.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b790:	f107 0318 	add.w	r3, r7, #24
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f991 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b79e:	e16e      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7a4:	e16b      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7a6:	4b89      	ldr	r3, [pc, #548]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b2:	d107      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7b4:	f107 030c 	add.w	r3, r7, #12
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 fad3 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c2:	e15c      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c8:	e159      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7ca:	4b80      	ldr	r3, [pc, #512]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7d4:	4b7d      	ldr	r3, [pc, #500]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0304 	and.w	r3, r3, #4
 800b7dc:	2b04      	cmp	r3, #4
 800b7de:	d10c      	bne.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d109      	bne.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7e6:	4b79      	ldr	r3, [pc, #484]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	08db      	lsrs	r3, r3, #3
 800b7ec:	f003 0303 	and.w	r3, r3, #3
 800b7f0:	4a77      	ldr	r2, [pc, #476]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7f8:	e01e      	b.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7fa:	4b74      	ldr	r3, [pc, #464]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b806:	d106      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b80e:	d102      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b810:	4b70      	ldr	r3, [pc, #448]	; (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b814:	e010      	b.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b816:	4b6d      	ldr	r3, [pc, #436]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b81e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b822:	d106      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b82a:	d102      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b82c:	4b6a      	ldr	r3, [pc, #424]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b830:	e002      	b.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b836:	e122      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b838:	e121      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b83e:	e11e      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b844:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b848:	430b      	orrs	r3, r1
 800b84a:	d133      	bne.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b84c:	4b5f      	ldr	r3, [pc, #380]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b854:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b862:	d012      	beq.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b864:	e023      	b.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b866:	4b59      	ldr	r3, [pc, #356]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b86e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b872:	d107      	bne.n	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 fbc7 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b882:	e0fc      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b888:	e0f9      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b88a:	4b50      	ldr	r3, [pc, #320]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b896:	d107      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b898:	f107 0318 	add.w	r3, r7, #24
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 f90d 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8a6:	e0ea      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ac:	e0e7      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b2:	e0e4      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8b8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	f040 808d 	bne.w	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b8c2:	4b42      	ldr	r3, [pc, #264]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b8ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8d2:	d06b      	beq.n	800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8da:	d874      	bhi.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e2:	d056      	beq.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ea:	d86c      	bhi.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8f2:	d03b      	beq.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8fa:	d864      	bhi.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b902:	d021      	beq.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90a:	d85c      	bhi.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d004      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b918:	d004      	beq.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b91a:	e054      	b.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b91c:	f000 f8b8 	bl	800ba90 <HAL_RCCEx_GetD3PCLK1Freq>
 800b920:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b922:	e0ac      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b924:	4b29      	ldr	r3, [pc, #164]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b92c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b930:	d107      	bne.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b932:	f107 0318 	add.w	r3, r7, #24
 800b936:	4618      	mov	r0, r3
 800b938:	f000 f8c0 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b940:	e09d      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b946:	e09a      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b948:	4b20      	ldr	r3, [pc, #128]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b954:	d107      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fa02 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b964:	e08b      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b96a:	e088      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b96c:	4b17      	ldr	r3, [pc, #92]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b04      	cmp	r3, #4
 800b976:	d109      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b978:	4b14      	ldr	r3, [pc, #80]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	08db      	lsrs	r3, r3, #3
 800b97e:	f003 0303 	and.w	r3, r3, #3
 800b982:	4a13      	ldr	r2, [pc, #76]	; (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b984:	fa22 f303 	lsr.w	r3, r2, r3
 800b988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98a:	e078      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b990:	e075      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b992:	4b0e      	ldr	r3, [pc, #56]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b99e:	d102      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	; (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a4:	e06b      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9aa:	e068      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9ac:	4b07      	ldr	r3, [pc, #28]	; (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9b8:	d102      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b9ba:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9be:	e05e      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9c4:	e05b      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ca:	e058      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	03d09000 	.word	0x03d09000
 800b9d4:	003d0900 	.word	0x003d0900
 800b9d8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9e0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	d148      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b9e8:	4b27      	ldr	r3, [pc, #156]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9f8:	d02a      	beq.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba00:	d838      	bhi.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d004      	beq.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba0e:	d00d      	beq.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ba10:	e030      	b.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba12:	4b1d      	ldr	r3, [pc, #116]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba1e:	d102      	bne.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ba22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba24:	e02b      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba2a:	e028      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba2c:	4b16      	ldr	r3, [pc, #88]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba38:	d107      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fae4 	bl	800c00c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba48:	e019      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba4e:	e016      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba50:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba5c:	d107      	bne.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba5e:	f107 0318 	add.w	r3, r7, #24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f82a 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba6c:	e007      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba72:	e004      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba78:	e001      	b.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ba7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3740      	adds	r7, #64	; 0x40
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	017d7840 	.word	0x017d7840

0800ba90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba94:	f7fd ffd4 	bl	8009a40 <HAL_RCC_GetHCLKFreq>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba9c:	6a1b      	ldr	r3, [r3, #32]
 800ba9e:	091b      	lsrs	r3, r3, #4
 800baa0:	f003 0307 	and.w	r3, r3, #7
 800baa4:	4904      	ldr	r1, [pc, #16]	; (800bab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800baa6:	5ccb      	ldrb	r3, [r1, r3]
 800baa8:	f003 031f 	and.w	r3, r3, #31
 800baac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	58024400 	.word	0x58024400
 800bab8:	08015cec 	.word	0x08015cec

0800babc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800babc:	b480      	push	{r7}
 800babe:	b089      	sub	sp, #36	; 0x24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bac4:	4ba1      	ldr	r3, [pc, #644]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bace:	4b9f      	ldr	r3, [pc, #636]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad2:	0b1b      	lsrs	r3, r3, #12
 800bad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bada:	4b9c      	ldr	r3, [pc, #624]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	091b      	lsrs	r3, r3, #4
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bae6:	4b99      	ldr	r3, [pc, #612]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baea:	08db      	lsrs	r3, r3, #3
 800baec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 8111 	beq.w	800bd2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	f000 8083 	beq.w	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	f200 80a1 	bhi.w	800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d056      	beq.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb26:	e099      	b.n	800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb28:	4b88      	ldr	r3, [pc, #544]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0320 	and.w	r3, r3, #32
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d02d      	beq.n	800bb90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb34:	4b85      	ldr	r3, [pc, #532]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	08db      	lsrs	r3, r3, #3
 800bb3a:	f003 0303 	and.w	r3, r3, #3
 800bb3e:	4a84      	ldr	r2, [pc, #528]	; (800bd50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb40:	fa22 f303 	lsr.w	r3, r2, r3
 800bb44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	ee07 3a90 	vmov	s15, r3
 800bb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	ee07 3a90 	vmov	s15, r3
 800bb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5e:	4b7b      	ldr	r3, [pc, #492]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb8e:	e087      	b.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b6a      	ldr	r3, [pc, #424]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbd2:	e065      	b.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe6:	4b59      	ldr	r3, [pc, #356]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc16:	e043      	b.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bd60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2a:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc5a:	e021      	b.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b37      	ldr	r3, [pc, #220]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bca0:	4b2a      	ldr	r3, [pc, #168]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca4:	0a5b      	lsrs	r3, r3, #9
 800bca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcba:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc6:	ee17 2a90 	vmov	r2, s15
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bcce:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd2:	0c1b      	lsrs	r3, r3, #16
 800bcd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd8:	ee07 3a90 	vmov	s15, r3
 800bcdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcf4:	ee17 2a90 	vmov	r2, s15
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bcfc:	4b13      	ldr	r3, [pc, #76]	; (800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd00:	0e1b      	lsrs	r3, r3, #24
 800bd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd06:	ee07 3a90 	vmov	s15, r3
 800bd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd16:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd22:	ee17 2a90 	vmov	r2, s15
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd2a:	e008      	b.n	800bd3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	609a      	str	r2, [r3, #8]
}
 800bd3e:	bf00      	nop
 800bd40:	3724      	adds	r7, #36	; 0x24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	03d09000 	.word	0x03d09000
 800bd54:	46000000 	.word	0x46000000
 800bd58:	4c742400 	.word	0x4c742400
 800bd5c:	4a742400 	.word	0x4a742400
 800bd60:	4bbebc20 	.word	0x4bbebc20

0800bd64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b089      	sub	sp, #36	; 0x24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd6c:	4ba1      	ldr	r3, [pc, #644]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd70:	f003 0303 	and.w	r3, r3, #3
 800bd74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd76:	4b9f      	ldr	r3, [pc, #636]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7a:	0d1b      	lsrs	r3, r3, #20
 800bd7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd82:	4b9c      	ldr	r3, [pc, #624]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd86:	0a1b      	lsrs	r3, r3, #8
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd8e:	4b99      	ldr	r3, [pc, #612]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	08db      	lsrs	r3, r3, #3
 800bd94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	fb02 f303 	mul.w	r3, r2, r3
 800bd9e:	ee07 3a90 	vmov	s15, r3
 800bda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f000 8111 	beq.w	800bfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	f000 8083 	beq.w	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	f200 80a1 	bhi.w	800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d003      	beq.n	800bdd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d056      	beq.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bdce:	e099      	b.n	800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdd0:	4b88      	ldr	r3, [pc, #544]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0320 	and.w	r3, r3, #32
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d02d      	beq.n	800be38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bddc:	4b85      	ldr	r3, [pc, #532]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	08db      	lsrs	r3, r3, #3
 800bde2:	f003 0303 	and.w	r3, r3, #3
 800bde6:	4a84      	ldr	r2, [pc, #528]	; (800bff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bde8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	ee07 3a90 	vmov	s15, r3
 800bdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be06:	4b7b      	ldr	r3, [pc, #492]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be16:	ed97 6a03 	vldr	s12, [r7, #12]
 800be1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be36:	e087      	b.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b6a      	ldr	r3, [pc, #424]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be7a:	e065      	b.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8e:	4b59      	ldr	r3, [pc, #356]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bebe:	e043      	b.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed2:	4b48      	ldr	r3, [pc, #288]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800befa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf02:	e021      	b.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf16:	4b37      	ldr	r3, [pc, #220]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf26:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf48:	4b2a      	ldr	r3, [pc, #168]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4c:	0a5b      	lsrs	r3, r3, #9
 800bf4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf62:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf6e:	ee17 2a90 	vmov	r2, s15
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf76:	4b1f      	ldr	r3, [pc, #124]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	0c1b      	lsrs	r3, r3, #16
 800bf7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf80:	ee07 3a90 	vmov	s15, r3
 800bf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf90:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf9c:	ee17 2a90 	vmov	r2, s15
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bfa4:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa8:	0e1b      	lsrs	r3, r3, #24
 800bfaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfca:	ee17 2a90 	vmov	r2, s15
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bfd2:	e008      	b.n	800bfe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	609a      	str	r2, [r3, #8]
}
 800bfe6:	bf00      	nop
 800bfe8:	3724      	adds	r7, #36	; 0x24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	58024400 	.word	0x58024400
 800bff8:	03d09000 	.word	0x03d09000
 800bffc:	46000000 	.word	0x46000000
 800c000:	4c742400 	.word	0x4c742400
 800c004:	4a742400 	.word	0x4a742400
 800c008:	4bbebc20 	.word	0x4bbebc20

0800c00c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b089      	sub	sp, #36	; 0x24
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c014:	4ba0      	ldr	r3, [pc, #640]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c018:	f003 0303 	and.w	r3, r3, #3
 800c01c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c01e:	4b9e      	ldr	r3, [pc, #632]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c022:	091b      	lsrs	r3, r3, #4
 800c024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c028:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c02a:	4b9b      	ldr	r3, [pc, #620]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c034:	4b98      	ldr	r3, [pc, #608]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c038:	08db      	lsrs	r3, r3, #3
 800c03a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	fb02 f303 	mul.w	r3, r2, r3
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c04c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 8111 	beq.w	800c27a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	f000 8083 	beq.w	800c166 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2b02      	cmp	r3, #2
 800c064:	f200 80a1 	bhi.w	800c1aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d056      	beq.n	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c074:	e099      	b.n	800c1aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c076:	4b88      	ldr	r3, [pc, #544]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 0320 	and.w	r3, r3, #32
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d02d      	beq.n	800c0de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c082:	4b85      	ldr	r3, [pc, #532]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	08db      	lsrs	r3, r3, #3
 800c088:	f003 0303 	and.w	r3, r3, #3
 800c08c:	4a83      	ldr	r2, [pc, #524]	; (800c29c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c08e:	fa22 f303 	lsr.w	r3, r2, r3
 800c092:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ac:	4b7a      	ldr	r3, [pc, #488]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b4:	ee07 3a90 	vmov	s15, r3
 800c0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0dc:	e087      	b.n	800c1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f0:	4b69      	ldr	r3, [pc, #420]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c100:	ed97 6a03 	vldr	s12, [r7, #12]
 800c104:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c120:	e065      	b.n	800c1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	ee07 3a90 	vmov	s15, r3
 800c128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c134:	4b58      	ldr	r3, [pc, #352]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13c:	ee07 3a90 	vmov	s15, r3
 800c140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c144:	ed97 6a03 	vldr	s12, [r7, #12]
 800c148:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c164:	e043      	b.n	800c1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	ee07 3a90 	vmov	s15, r3
 800c16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c170:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c2ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c178:	4b47      	ldr	r3, [pc, #284]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c180:	ee07 3a90 	vmov	s15, r3
 800c184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c188:	ed97 6a03 	vldr	s12, [r7, #12]
 800c18c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1a8:	e021      	b.n	800c1ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	ee07 3a90 	vmov	s15, r3
 800c1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1bc:	4b36      	ldr	r3, [pc, #216]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c1ee:	4b2a      	ldr	r3, [pc, #168]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f2:	0a5b      	lsrs	r3, r3, #9
 800c1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c204:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c208:	edd7 6a07 	vldr	s13, [r7, #28]
 800c20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c214:	ee17 2a90 	vmov	r2, s15
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c21c:	4b1e      	ldr	r3, [pc, #120]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c226:	ee07 3a90 	vmov	s15, r3
 800c22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c232:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c236:	edd7 6a07 	vldr	s13, [r7, #28]
 800c23a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c23e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c242:	ee17 2a90 	vmov	r2, s15
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c24a:	4b13      	ldr	r3, [pc, #76]	; (800c298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24e:	0e1b      	lsrs	r3, r3, #24
 800c250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c254:	ee07 3a90 	vmov	s15, r3
 800c258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c260:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c264:	edd7 6a07 	vldr	s13, [r7, #28]
 800c268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c26c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c270:	ee17 2a90 	vmov	r2, s15
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c278:	e008      	b.n	800c28c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	609a      	str	r2, [r3, #8]
}
 800c28c:	bf00      	nop
 800c28e:	3724      	adds	r7, #36	; 0x24
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	58024400 	.word	0x58024400
 800c29c:	03d09000 	.word	0x03d09000
 800c2a0:	46000000 	.word	0x46000000
 800c2a4:	4c742400 	.word	0x4c742400
 800c2a8:	4a742400 	.word	0x4a742400
 800c2ac:	4bbebc20 	.word	0x4bbebc20

0800c2b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2be:	4b53      	ldr	r3, [pc, #332]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	f003 0303 	and.w	r3, r3, #3
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d101      	bne.n	800c2ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e099      	b.n	800c402 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c2ce:	4b4f      	ldr	r3, [pc, #316]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a4e      	ldr	r2, [pc, #312]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c2d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2da:	f7f7 f973 	bl	80035c4 <HAL_GetTick>
 800c2de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2e0:	e008      	b.n	800c2f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2e2:	f7f7 f96f 	bl	80035c4 <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d901      	bls.n	800c2f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e086      	b.n	800c402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2f4:	4b45      	ldr	r3, [pc, #276]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1f0      	bne.n	800c2e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c300:	4b42      	ldr	r3, [pc, #264]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	031b      	lsls	r3, r3, #12
 800c30e:	493f      	ldr	r1, [pc, #252]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c310:	4313      	orrs	r3, r2
 800c312:	628b      	str	r3, [r1, #40]	; 0x28
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	3b01      	subs	r3, #1
 800c31a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	3b01      	subs	r3, #1
 800c324:	025b      	lsls	r3, r3, #9
 800c326:	b29b      	uxth	r3, r3
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	3b01      	subs	r3, #1
 800c330:	041b      	lsls	r3, r3, #16
 800c332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c336:	431a      	orrs	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	061b      	lsls	r3, r3, #24
 800c340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c344:	4931      	ldr	r1, [pc, #196]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c346:	4313      	orrs	r3, r2
 800c348:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c34a:	4b30      	ldr	r3, [pc, #192]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	492d      	ldr	r1, [pc, #180]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c35c:	4b2b      	ldr	r3, [pc, #172]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	f023 0220 	bic.w	r2, r3, #32
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	4928      	ldr	r1, [pc, #160]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c36e:	4b27      	ldr	r3, [pc, #156]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c372:	4a26      	ldr	r2, [pc, #152]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c374:	f023 0310 	bic.w	r3, r3, #16
 800c378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c37a:	4b24      	ldr	r3, [pc, #144]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c37c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c37e:	4b24      	ldr	r3, [pc, #144]	; (800c410 <RCCEx_PLL2_Config+0x160>)
 800c380:	4013      	ands	r3, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	69d2      	ldr	r2, [r2, #28]
 800c386:	00d2      	lsls	r2, r2, #3
 800c388:	4920      	ldr	r1, [pc, #128]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c38a:	4313      	orrs	r3, r2
 800c38c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c38e:	4b1f      	ldr	r3, [pc, #124]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	4a1e      	ldr	r2, [pc, #120]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c394:	f043 0310 	orr.w	r3, r3, #16
 800c398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d106      	bne.n	800c3ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	4a19      	ldr	r2, [pc, #100]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3ac:	e00f      	b.n	800c3ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d106      	bne.n	800c3c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	4a14      	ldr	r2, [pc, #80]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3c0:	e005      	b.n	800c3ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c6:	4a11      	ldr	r2, [pc, #68]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c3ce:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a0e      	ldr	r2, [pc, #56]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3da:	f7f7 f8f3 	bl	80035c4 <HAL_GetTick>
 800c3de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3e0:	e008      	b.n	800c3f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3e2:	f7f7 f8ef 	bl	80035c4 <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d901      	bls.n	800c3f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e006      	b.n	800c402 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <RCCEx_PLL2_Config+0x15c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0f0      	beq.n	800c3e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	58024400 	.word	0x58024400
 800c410:	ffff0007 	.word	0xffff0007

0800c414 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c422:	4b53      	ldr	r3, [pc, #332]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	2b03      	cmp	r3, #3
 800c42c:	d101      	bne.n	800c432 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	e099      	b.n	800c566 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c432:	4b4f      	ldr	r3, [pc, #316]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a4e      	ldr	r2, [pc, #312]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c43c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c43e:	f7f7 f8c1 	bl	80035c4 <HAL_GetTick>
 800c442:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c444:	e008      	b.n	800c458 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c446:	f7f7 f8bd 	bl	80035c4 <HAL_GetTick>
 800c44a:	4602      	mov	r2, r0
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	2b02      	cmp	r3, #2
 800c452:	d901      	bls.n	800c458 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c454:	2303      	movs	r3, #3
 800c456:	e086      	b.n	800c566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c458:	4b45      	ldr	r3, [pc, #276]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1f0      	bne.n	800c446 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c464:	4b42      	ldr	r3, [pc, #264]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c468:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	051b      	lsls	r3, r3, #20
 800c472:	493f      	ldr	r1, [pc, #252]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c474:	4313      	orrs	r3, r2
 800c476:	628b      	str	r3, [r1, #40]	; 0x28
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	3b01      	subs	r3, #1
 800c488:	025b      	lsls	r3, r3, #9
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	431a      	orrs	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	3b01      	subs	r3, #1
 800c494:	041b      	lsls	r3, r3, #16
 800c496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c49a:	431a      	orrs	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	061b      	lsls	r3, r3, #24
 800c4a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c4a8:	4931      	ldr	r1, [pc, #196]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c4ae:	4b30      	ldr	r3, [pc, #192]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	492d      	ldr	r1, [pc, #180]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c4c0:	4b2b      	ldr	r3, [pc, #172]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	4928      	ldr	r1, [pc, #160]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c4d2:	4b27      	ldr	r3, [pc, #156]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d6:	4a26      	ldr	r2, [pc, #152]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c4de:	4b24      	ldr	r3, [pc, #144]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <RCCEx_PLL3_Config+0x160>)
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	69d2      	ldr	r2, [r2, #28]
 800c4ea:	00d2      	lsls	r2, r2, #3
 800c4ec:	4920      	ldr	r1, [pc, #128]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c4f2:	4b1f      	ldr	r3, [pc, #124]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f6:	4a1e      	ldr	r2, [pc, #120]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c4f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d106      	bne.n	800c512 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c504:	4b1a      	ldr	r3, [pc, #104]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c508:	4a19      	ldr	r2, [pc, #100]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c50a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c50e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c510:	e00f      	b.n	800c532 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d106      	bne.n	800c526 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c518:	4b15      	ldr	r3, [pc, #84]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	4a14      	ldr	r2, [pc, #80]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c51e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c522:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c524:	e005      	b.n	800c532 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c526:	4b12      	ldr	r3, [pc, #72]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52a:	4a11      	ldr	r2, [pc, #68]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c52c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c532:	4b0f      	ldr	r3, [pc, #60]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a0e      	ldr	r2, [pc, #56]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c53c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c53e:	f7f7 f841 	bl	80035c4 <HAL_GetTick>
 800c542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c544:	e008      	b.n	800c558 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c546:	f7f7 f83d 	bl	80035c4 <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d901      	bls.n	800c558 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e006      	b.n	800c566 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <RCCEx_PLL3_Config+0x15c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d0f0      	beq.n	800c546 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	58024400 	.word	0x58024400
 800c574:	ffff0007 	.word	0xffff0007

0800c578 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d071      	beq.n	800c66e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7f6 fb0e 	bl	8002bc0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	f003 0310 	and.w	r3, r3, #16
 800c5b6:	2b10      	cmp	r3, #16
 800c5b8:	d050      	beq.n	800c65c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	22ca      	movs	r2, #202	; 0xca
 800c5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2253      	movs	r2, #83	; 0x53
 800c5c8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fa4a 	bl	800ca64 <RTC_EnterInitMode>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d124      	bne.n	800c624 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6899      	ldr	r1, [r3, #8]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	4b24      	ldr	r3, [pc, #144]	; (800c678 <HAL_RTC_Init+0x100>)
 800c5e6:	400b      	ands	r3, r1
 800c5e8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6899      	ldr	r1, [r3, #8]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	431a      	orrs	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	430a      	orrs	r2, r1
 800c606:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	0419      	lsls	r1, r3, #16
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68da      	ldr	r2, [r3, #12]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	430a      	orrs	r2, r1
 800c618:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fa56 	bl	800cacc <RTC_ExitInitMode>
 800c620:	4603      	mov	r3, r0
 800c622:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c624:	7bfb      	ldrb	r3, [r7, #15]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d113      	bne.n	800c652 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0203 	bic.w	r2, r2, #3
 800c638:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	69da      	ldr	r2, [r3, #28]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	431a      	orrs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	430a      	orrs	r2, r1
 800c650:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	22ff      	movs	r2, #255	; 0xff
 800c658:	625a      	str	r2, [r3, #36]	; 0x24
 800c65a:	e001      	b.n	800c660 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d103      	bne.n	800c66e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	ff8fffbf 	.word	0xff8fffbf

0800c67c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d101      	bne.n	800c696 <HAL_RTC_SetTime+0x1a>
 800c692:	2302      	movs	r3, #2
 800c694:	e089      	b.n	800c7aa <HAL_RTC_SetTime+0x12e>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	22ca      	movs	r2, #202	; 0xca
 800c6ac:	625a      	str	r2, [r3, #36]	; 0x24
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2253      	movs	r2, #83	; 0x53
 800c6b4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 f9d4 	bl	800ca64 <RTC_EnterInitMode>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c6c0:	7cfb      	ldrb	r3, [r7, #19]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d161      	bne.n	800c78a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d126      	bne.n	800c71a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d102      	bne.n	800c6e0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 fa2f 	bl	800cb48 <RTC_ByteToBcd2>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	785b      	ldrb	r3, [r3, #1]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fa28 	bl	800cb48 <RTC_ByteToBcd2>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c6fc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	789b      	ldrb	r3, [r3, #2]
 800c702:	4618      	mov	r0, r3
 800c704:	f000 fa20 	bl	800cb48 <RTC_ByteToBcd2>
 800c708:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c70a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	78db      	ldrb	r3, [r3, #3]
 800c712:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c714:	4313      	orrs	r3, r2
 800c716:	617b      	str	r3, [r7, #20]
 800c718:	e018      	b.n	800c74c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d102      	bne.n	800c72e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2200      	movs	r2, #0
 800c72c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	785b      	ldrb	r3, [r3, #1]
 800c738:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c73a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c740:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	78db      	ldrb	r3, [r3, #3]
 800c746:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c748:	4313      	orrs	r3, r2
 800c74a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	6979      	ldr	r1, [r7, #20]
 800c752:	4b18      	ldr	r3, [pc, #96]	; (800c7b4 <HAL_RTC_SetTime+0x138>)
 800c754:	400b      	ands	r3, r1
 800c756:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c766:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6899      	ldr	r1, [r3, #8]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	68da      	ldr	r2, [r3, #12]
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	431a      	orrs	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	430a      	orrs	r2, r1
 800c77e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 f9a3 	bl	800cacc <RTC_ExitInitMode>
 800c786:	4603      	mov	r3, r0
 800c788:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	22ff      	movs	r2, #255	; 0xff
 800c790:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c792:	7cfb      	ldrb	r3, [r7, #19]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d103      	bne.n	800c7a0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c7a8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd90      	pop	{r4, r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	007f7f7f 	.word	0x007f7f7f

0800c7b8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	4b22      	ldr	r3, [pc, #136]	; (800c86c <HAL_RTC_GetTime+0xb4>)
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	0c1b      	lsrs	r3, r3, #16
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	0a1b      	lsrs	r3, r3, #8
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c802:	b2da      	uxtb	r2, r3
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c810:	b2da      	uxtb	r2, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	0d9b      	lsrs	r3, r3, #22
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	b2da      	uxtb	r2, r3
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d11a      	bne.n	800c862 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f9a9 	bl	800cb88 <RTC_Bcd2ToByte>
 800c836:	4603      	mov	r3, r0
 800c838:	461a      	mov	r2, r3
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	785b      	ldrb	r3, [r3, #1]
 800c842:	4618      	mov	r0, r3
 800c844:	f000 f9a0 	bl	800cb88 <RTC_Bcd2ToByte>
 800c848:	4603      	mov	r3, r0
 800c84a:	461a      	mov	r2, r3
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	789b      	ldrb	r3, [r3, #2]
 800c854:	4618      	mov	r0, r3
 800c856:	f000 f997 	bl	800cb88 <RTC_Bcd2ToByte>
 800c85a:	4603      	mov	r3, r0
 800c85c:	461a      	mov	r2, r3
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	007f7f7f 	.word	0x007f7f7f

0800c870 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d101      	bne.n	800c88a <HAL_RTC_SetDate+0x1a>
 800c886:	2302      	movs	r3, #2
 800c888:	e073      	b.n	800c972 <HAL_RTC_SetDate+0x102>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2202      	movs	r2, #2
 800c896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10e      	bne.n	800c8be <HAL_RTC_SetDate+0x4e>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d008      	beq.n	800c8be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	f023 0310 	bic.w	r3, r3, #16
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	330a      	adds	r3, #10
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d11c      	bne.n	800c8fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	78db      	ldrb	r3, [r3, #3]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f93d 	bl	800cb48 <RTC_ByteToBcd2>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	785b      	ldrb	r3, [r3, #1]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 f936 	bl	800cb48 <RTC_ByteToBcd2>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	789b      	ldrb	r3, [r3, #2]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f92e 	bl	800cb48 <RTC_ByteToBcd2>
 800c8ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c8ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	617b      	str	r3, [r7, #20]
 800c8fc:	e00e      	b.n	800c91c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	78db      	ldrb	r3, [r3, #3]
 800c902:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	785b      	ldrb	r3, [r3, #1]
 800c908:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c90a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c910:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c918:	4313      	orrs	r3, r2
 800c91a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	22ca      	movs	r2, #202	; 0xca
 800c922:	625a      	str	r2, [r3, #36]	; 0x24
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2253      	movs	r2, #83	; 0x53
 800c92a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 f899 	bl	800ca64 <RTC_EnterInitMode>
 800c932:	4603      	mov	r3, r0
 800c934:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c936:	7cfb      	ldrb	r3, [r7, #19]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	6979      	ldr	r1, [r7, #20]
 800c942:	4b0e      	ldr	r3, [pc, #56]	; (800c97c <HAL_RTC_SetDate+0x10c>)
 800c944:	400b      	ands	r3, r1
 800c946:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f000 f8bf 	bl	800cacc <RTC_ExitInitMode>
 800c94e:	4603      	mov	r3, r0
 800c950:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	22ff      	movs	r2, #255	; 0xff
 800c958:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c95a:	7cfb      	ldrb	r3, [r7, #19]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c970:	7cfb      	ldrb	r3, [r7, #19]


}
 800c972:	4618      	mov	r0, r3
 800c974:	371c      	adds	r7, #28
 800c976:	46bd      	mov	sp, r7
 800c978:	bd90      	pop	{r4, r7, pc}
 800c97a:	bf00      	nop
 800c97c:	00ffff3f 	.word	0x00ffff3f

0800c980 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	4b21      	ldr	r3, [pc, #132]	; (800ca18 <HAL_RTC_GetDate+0x98>)
 800c994:	4013      	ands	r3, r2
 800c996:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	0c1b      	lsrs	r3, r3, #16
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	0a1b      	lsrs	r3, r3, #8
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	f003 031f 	and.w	r3, r3, #31
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	0b5b      	lsrs	r3, r3, #13
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d11a      	bne.n	800ca0c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	78db      	ldrb	r3, [r3, #3]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 f8d4 	bl	800cb88 <RTC_Bcd2ToByte>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	785b      	ldrb	r3, [r3, #1]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f8cb 	bl	800cb88 <RTC_Bcd2ToByte>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	789b      	ldrb	r3, [r3, #2]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 f8c2 	bl	800cb88 <RTC_Bcd2ToByte>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461a      	mov	r2, r3
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	00ffff3f 	.word	0x00ffff3f

0800ca1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a0d      	ldr	r2, [pc, #52]	; (800ca60 <HAL_RTC_WaitForSynchro+0x44>)
 800ca2a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ca2c:	f7f6 fdca 	bl	80035c4 <HAL_GetTick>
 800ca30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca32:	e009      	b.n	800ca48 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ca34:	f7f6 fdc6 	bl	80035c4 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca42:	d901      	bls.n	800ca48 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e007      	b.n	800ca58 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	f003 0320 	and.w	r3, r3, #32
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0ee      	beq.n	800ca34 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	0003ff5f 	.word	0x0003ff5f

0800ca64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d120      	bne.n	800cac0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca86:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ca88:	f7f6 fd9c 	bl	80035c4 <HAL_GetTick>
 800ca8c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ca8e:	e00d      	b.n	800caac <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ca90:	f7f6 fd98 	bl	80035c4 <HAL_GetTick>
 800ca94:	4602      	mov	r2, r0
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca9e:	d905      	bls.n	800caac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800caa0:	2303      	movs	r3, #3
 800caa2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2203      	movs	r2, #3
 800caa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d102      	bne.n	800cac0 <RTC_EnterInitMode+0x5c>
 800caba:	7bfb      	ldrb	r3, [r7, #15]
 800cabc:	2b03      	cmp	r3, #3
 800cabe:	d1e7      	bne.n	800ca90 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cad8:	4b1a      	ldr	r3, [pc, #104]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	4a19      	ldr	r2, [pc, #100]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cae2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cae4:	4b17      	ldr	r3, [pc, #92]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f003 0320 	and.w	r3, r3, #32
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10c      	bne.n	800cb0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff ff93 	bl	800ca1c <HAL_RTC_WaitForSynchro>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d01e      	beq.n	800cb3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2203      	movs	r2, #3
 800cb00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cb04:	2303      	movs	r3, #3
 800cb06:	73fb      	strb	r3, [r7, #15]
 800cb08:	e017      	b.n	800cb3a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb0a:	4b0e      	ldr	r3, [pc, #56]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	4a0d      	ldr	r2, [pc, #52]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cb10:	f023 0320 	bic.w	r3, r3, #32
 800cb14:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff ff80 	bl	800ca1c <HAL_RTC_WaitForSynchro>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d005      	beq.n	800cb2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2203      	movs	r2, #3
 800cb26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cb2e:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <RTC_ExitInitMode+0x78>)
 800cb34:	f043 0320 	orr.w	r3, r3, #32
 800cb38:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	58004000 	.word	0x58004000

0800cb48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cb56:	79fb      	ldrb	r3, [r7, #7]
 800cb58:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cb5a:	e005      	b.n	800cb68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cb62:	7afb      	ldrb	r3, [r7, #11]
 800cb64:	3b0a      	subs	r3, #10
 800cb66:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cb68:	7afb      	ldrb	r3, [r7, #11]
 800cb6a:	2b09      	cmp	r3, #9
 800cb6c:	d8f6      	bhi.n	800cb5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	011b      	lsls	r3, r3, #4
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	7afb      	ldrb	r3, [r7, #11]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	b2db      	uxtb	r3, r3
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	091b      	lsrs	r3, r3, #4
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	461a      	mov	r2, r3
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	4413      	add	r3, r2
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cba2:	79fb      	ldrb	r3, [r7, #7]
 800cba4:	f003 030f 	and.w	r3, r3, #15
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	4413      	add	r3, r2
 800cbae:	b2db      	uxtb	r3, r3
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e10f      	b.n	800cdee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a87      	ldr	r2, [pc, #540]	; (800cdf8 <HAL_SPI_Init+0x23c>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d00f      	beq.n	800cbfe <HAL_SPI_Init+0x42>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a86      	ldr	r2, [pc, #536]	; (800cdfc <HAL_SPI_Init+0x240>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d00a      	beq.n	800cbfe <HAL_SPI_Init+0x42>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a84      	ldr	r2, [pc, #528]	; (800ce00 <HAL_SPI_Init+0x244>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d005      	beq.n	800cbfe <HAL_SPI_Init+0x42>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	2b0f      	cmp	r3, #15
 800cbf8:	d901      	bls.n	800cbfe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e0f7      	b.n	800cdee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f900 	bl	800ce04 <SPI_GetPacketSize>
 800cc04:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a7b      	ldr	r2, [pc, #492]	; (800cdf8 <HAL_SPI_Init+0x23c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d00c      	beq.n	800cc2a <HAL_SPI_Init+0x6e>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a79      	ldr	r2, [pc, #484]	; (800cdfc <HAL_SPI_Init+0x240>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d007      	beq.n	800cc2a <HAL_SPI_Init+0x6e>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a78      	ldr	r2, [pc, #480]	; (800ce00 <HAL_SPI_Init+0x244>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d002      	beq.n	800cc2a <HAL_SPI_Init+0x6e>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	d811      	bhi.n	800cc4e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cc2e:	4a72      	ldr	r2, [pc, #456]	; (800cdf8 <HAL_SPI_Init+0x23c>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d009      	beq.n	800cc48 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a70      	ldr	r2, [pc, #448]	; (800cdfc <HAL_SPI_Init+0x240>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d004      	beq.n	800cc48 <HAL_SPI_Init+0x8c>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a6f      	ldr	r2, [pc, #444]	; (800ce00 <HAL_SPI_Init+0x244>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d104      	bne.n	800cc52 <HAL_SPI_Init+0x96>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b10      	cmp	r3, #16
 800cc4c:	d901      	bls.n	800cc52 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e0cd      	b.n	800cdee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d106      	bne.n	800cc6c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7f5 ffdc 	bl	8002c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2202      	movs	r2, #2
 800cc70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 0201 	bic.w	r2, r2, #1
 800cc82:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cc8e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc98:	d119      	bne.n	800ccce <HAL_SPI_Init+0x112>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cca2:	d103      	bne.n	800ccac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d008      	beq.n	800ccbe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10c      	bne.n	800ccce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ccb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccbc:	d107      	bne.n	800ccce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cccc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00f      	beq.n	800ccfa <HAL_SPI_Init+0x13e>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	2b06      	cmp	r3, #6
 800cce0:	d90b      	bls.n	800ccfa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	430a      	orrs	r2, r1
 800ccf6:	601a      	str	r2, [r3, #0]
 800ccf8:	e007      	b.n	800cd0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69da      	ldr	r2, [r3, #28]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd12:	431a      	orrs	r2, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	431a      	orrs	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1c:	ea42 0103 	orr.w	r1, r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	68da      	ldr	r2, [r3, #12]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd34:	431a      	orrs	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	431a      	orrs	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	431a      	orrs	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	431a      	orrs	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	431a      	orrs	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd6a:	ea42 0103 	orr.w	r1, r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d113      	bne.n	800cdaa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cda8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f022 0201 	bic.w	r2, r2, #1
 800cdb8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00a      	beq.n	800cddc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	40013000 	.word	0x40013000
 800cdfc:	40003800 	.word	0x40003800
 800ce00:	40003c00 	.word	0x40003c00

0800ce04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce10:	095b      	lsrs	r3, r3, #5
 800ce12:	3301      	adds	r3, #1
 800ce14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	3307      	adds	r3, #7
 800ce22:	08db      	lsrs	r3, r3, #3
 800ce24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	fb02 f303 	mul.w	r3, r2, r3
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d101      	bne.n	800ce4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e049      	b.n	800cee0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7f5 ff95 	bl	8002d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2202      	movs	r2, #2
 800ce6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3304      	adds	r3, #4
 800ce76:	4619      	mov	r1, r3
 800ce78:	4610      	mov	r0, r2
 800ce7a:	f000 ff41 	bl	800dd00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d001      	beq.n	800cf00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e04c      	b.n	800cf9a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2202      	movs	r2, #2
 800cf04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a26      	ldr	r2, [pc, #152]	; (800cfa8 <HAL_TIM_Base_Start+0xc0>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d022      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf1a:	d01d      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a22      	ldr	r2, [pc, #136]	; (800cfac <HAL_TIM_Base_Start+0xc4>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d018      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a21      	ldr	r2, [pc, #132]	; (800cfb0 <HAL_TIM_Base_Start+0xc8>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d013      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a1f      	ldr	r2, [pc, #124]	; (800cfb4 <HAL_TIM_Base_Start+0xcc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d00e      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a1e      	ldr	r2, [pc, #120]	; (800cfb8 <HAL_TIM_Base_Start+0xd0>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d009      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a1c      	ldr	r2, [pc, #112]	; (800cfbc <HAL_TIM_Base_Start+0xd4>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d004      	beq.n	800cf58 <HAL_TIM_Base_Start+0x70>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a1b      	ldr	r2, [pc, #108]	; (800cfc0 <HAL_TIM_Base_Start+0xd8>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d115      	bne.n	800cf84 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	689a      	ldr	r2, [r3, #8]
 800cf5e:	4b19      	ldr	r3, [pc, #100]	; (800cfc4 <HAL_TIM_Base_Start+0xdc>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b06      	cmp	r3, #6
 800cf68:	d015      	beq.n	800cf96 <HAL_TIM_Base_Start+0xae>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf70:	d011      	beq.n	800cf96 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f042 0201 	orr.w	r2, r2, #1
 800cf80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf82:	e008      	b.n	800cf96 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f042 0201 	orr.w	r2, r2, #1
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	e000      	b.n	800cf98 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	40010000 	.word	0x40010000
 800cfac:	40000400 	.word	0x40000400
 800cfb0:	40000800 	.word	0x40000800
 800cfb4:	40000c00 	.word	0x40000c00
 800cfb8:	40010400 	.word	0x40010400
 800cfbc:	40001800 	.word	0x40001800
 800cfc0:	40014000 	.word	0x40014000
 800cfc4:	00010007 	.word	0x00010007

0800cfc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6a1a      	ldr	r2, [r3, #32]
 800cfd6:	f241 1311 	movw	r3, #4369	; 0x1111
 800cfda:	4013      	ands	r3, r2
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10f      	bne.n	800d000 <HAL_TIM_Base_Stop+0x38>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6a1a      	ldr	r2, [r3, #32]
 800cfe6:	f240 4344 	movw	r3, #1092	; 0x444
 800cfea:	4013      	ands	r3, r2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d107      	bne.n	800d000 <HAL_TIM_Base_Stop+0x38>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 0201 	bic.w	r2, r2, #1
 800cffe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
	...

0800d018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d001      	beq.n	800d030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e054      	b.n	800d0da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68da      	ldr	r2, [r3, #12]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f042 0201 	orr.w	r2, r2, #1
 800d046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d022      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d05a:	d01d      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a22      	ldr	r2, [pc, #136]	; (800d0ec <HAL_TIM_Base_Start_IT+0xd4>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d018      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a21      	ldr	r2, [pc, #132]	; (800d0f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d013      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a1f      	ldr	r2, [pc, #124]	; (800d0f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d00e      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a1e      	ldr	r2, [pc, #120]	; (800d0f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d009      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a1c      	ldr	r2, [pc, #112]	; (800d0fc <HAL_TIM_Base_Start_IT+0xe4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d004      	beq.n	800d098 <HAL_TIM_Base_Start_IT+0x80>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a1b      	ldr	r2, [pc, #108]	; (800d100 <HAL_TIM_Base_Start_IT+0xe8>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d115      	bne.n	800d0c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	689a      	ldr	r2, [r3, #8]
 800d09e:	4b19      	ldr	r3, [pc, #100]	; (800d104 <HAL_TIM_Base_Start_IT+0xec>)
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b06      	cmp	r3, #6
 800d0a8:	d015      	beq.n	800d0d6 <HAL_TIM_Base_Start_IT+0xbe>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0b0:	d011      	beq.n	800d0d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f042 0201 	orr.w	r2, r2, #1
 800d0c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0c2:	e008      	b.n	800d0d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f042 0201 	orr.w	r2, r2, #1
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	e000      	b.n	800d0d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3714      	adds	r7, #20
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	40010000 	.word	0x40010000
 800d0ec:	40000400 	.word	0x40000400
 800d0f0:	40000800 	.word	0x40000800
 800d0f4:	40000c00 	.word	0x40000c00
 800d0f8:	40010400 	.word	0x40010400
 800d0fc:	40001800 	.word	0x40001800
 800d100:	40014000 	.word	0x40014000
 800d104:	00010007 	.word	0x00010007

0800d108 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d109      	bne.n	800d130 <HAL_TIM_OC_Start_IT+0x28>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b01      	cmp	r3, #1
 800d126:	bf14      	ite	ne
 800d128:	2301      	movne	r3, #1
 800d12a:	2300      	moveq	r3, #0
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	e03c      	b.n	800d1aa <HAL_TIM_OC_Start_IT+0xa2>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b04      	cmp	r3, #4
 800d134:	d109      	bne.n	800d14a <HAL_TIM_OC_Start_IT+0x42>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b01      	cmp	r3, #1
 800d140:	bf14      	ite	ne
 800d142:	2301      	movne	r3, #1
 800d144:	2300      	moveq	r3, #0
 800d146:	b2db      	uxtb	r3, r3
 800d148:	e02f      	b.n	800d1aa <HAL_TIM_OC_Start_IT+0xa2>
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	2b08      	cmp	r3, #8
 800d14e:	d109      	bne.n	800d164 <HAL_TIM_OC_Start_IT+0x5c>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b01      	cmp	r3, #1
 800d15a:	bf14      	ite	ne
 800d15c:	2301      	movne	r3, #1
 800d15e:	2300      	moveq	r3, #0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	e022      	b.n	800d1aa <HAL_TIM_OC_Start_IT+0xa2>
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	2b0c      	cmp	r3, #12
 800d168:	d109      	bne.n	800d17e <HAL_TIM_OC_Start_IT+0x76>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b01      	cmp	r3, #1
 800d174:	bf14      	ite	ne
 800d176:	2301      	movne	r3, #1
 800d178:	2300      	moveq	r3, #0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	e015      	b.n	800d1aa <HAL_TIM_OC_Start_IT+0xa2>
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b10      	cmp	r3, #16
 800d182:	d109      	bne.n	800d198 <HAL_TIM_OC_Start_IT+0x90>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	bf14      	ite	ne
 800d190:	2301      	movne	r3, #1
 800d192:	2300      	moveq	r3, #0
 800d194:	b2db      	uxtb	r3, r3
 800d196:	e008      	b.n	800d1aa <HAL_TIM_OC_Start_IT+0xa2>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	bf14      	ite	ne
 800d1a4:	2301      	movne	r3, #1
 800d1a6:	2300      	moveq	r3, #0
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e0ec      	b.n	800d38c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d104      	bne.n	800d1c2 <HAL_TIM_OC_Start_IT+0xba>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1c0:	e023      	b.n	800d20a <HAL_TIM_OC_Start_IT+0x102>
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b04      	cmp	r3, #4
 800d1c6:	d104      	bne.n	800d1d2 <HAL_TIM_OC_Start_IT+0xca>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1d0:	e01b      	b.n	800d20a <HAL_TIM_OC_Start_IT+0x102>
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d104      	bne.n	800d1e2 <HAL_TIM_OC_Start_IT+0xda>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1e0:	e013      	b.n	800d20a <HAL_TIM_OC_Start_IT+0x102>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b0c      	cmp	r3, #12
 800d1e6:	d104      	bne.n	800d1f2 <HAL_TIM_OC_Start_IT+0xea>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1f0:	e00b      	b.n	800d20a <HAL_TIM_OC_Start_IT+0x102>
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b10      	cmp	r3, #16
 800d1f6:	d104      	bne.n	800d202 <HAL_TIM_OC_Start_IT+0xfa>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d200:	e003      	b.n	800d20a <HAL_TIM_OC_Start_IT+0x102>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2202      	movs	r2, #2
 800d206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b0c      	cmp	r3, #12
 800d20e:	d841      	bhi.n	800d294 <HAL_TIM_OC_Start_IT+0x18c>
 800d210:	a201      	add	r2, pc, #4	; (adr r2, 800d218 <HAL_TIM_OC_Start_IT+0x110>)
 800d212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d216:	bf00      	nop
 800d218:	0800d24d 	.word	0x0800d24d
 800d21c:	0800d295 	.word	0x0800d295
 800d220:	0800d295 	.word	0x0800d295
 800d224:	0800d295 	.word	0x0800d295
 800d228:	0800d25f 	.word	0x0800d25f
 800d22c:	0800d295 	.word	0x0800d295
 800d230:	0800d295 	.word	0x0800d295
 800d234:	0800d295 	.word	0x0800d295
 800d238:	0800d271 	.word	0x0800d271
 800d23c:	0800d295 	.word	0x0800d295
 800d240:	0800d295 	.word	0x0800d295
 800d244:	0800d295 	.word	0x0800d295
 800d248:	0800d283 	.word	0x0800d283
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f042 0202 	orr.w	r2, r2, #2
 800d25a:	60da      	str	r2, [r3, #12]
      break;
 800d25c:	e01d      	b.n	800d29a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68da      	ldr	r2, [r3, #12]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f042 0204 	orr.w	r2, r2, #4
 800d26c:	60da      	str	r2, [r3, #12]
      break;
 800d26e:	e014      	b.n	800d29a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68da      	ldr	r2, [r3, #12]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f042 0208 	orr.w	r2, r2, #8
 800d27e:	60da      	str	r2, [r3, #12]
      break;
 800d280:	e00b      	b.n	800d29a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	68da      	ldr	r2, [r3, #12]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f042 0210 	orr.w	r2, r2, #16
 800d290:	60da      	str	r2, [r3, #12]
      break;
 800d292:	e002      	b.n	800d29a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	73fb      	strb	r3, [r7, #15]
      break;
 800d298:	bf00      	nop
  }

  if (status == HAL_OK)
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d174      	bne.n	800d38a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f001 f943 	bl	800e534 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a38      	ldr	r2, [pc, #224]	; (800d394 <HAL_TIM_OC_Start_IT+0x28c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d013      	beq.n	800d2e0 <HAL_TIM_OC_Start_IT+0x1d8>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a36      	ldr	r2, [pc, #216]	; (800d398 <HAL_TIM_OC_Start_IT+0x290>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d00e      	beq.n	800d2e0 <HAL_TIM_OC_Start_IT+0x1d8>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a35      	ldr	r2, [pc, #212]	; (800d39c <HAL_TIM_OC_Start_IT+0x294>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d009      	beq.n	800d2e0 <HAL_TIM_OC_Start_IT+0x1d8>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a33      	ldr	r2, [pc, #204]	; (800d3a0 <HAL_TIM_OC_Start_IT+0x298>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d004      	beq.n	800d2e0 <HAL_TIM_OC_Start_IT+0x1d8>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a32      	ldr	r2, [pc, #200]	; (800d3a4 <HAL_TIM_OC_Start_IT+0x29c>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d101      	bne.n	800d2e4 <HAL_TIM_OC_Start_IT+0x1dc>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e000      	b.n	800d2e6 <HAL_TIM_OC_Start_IT+0x1de>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d007      	beq.n	800d2fa <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a25      	ldr	r2, [pc, #148]	; (800d394 <HAL_TIM_OC_Start_IT+0x28c>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d022      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d30c:	d01d      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a25      	ldr	r2, [pc, #148]	; (800d3a8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d018      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a23      	ldr	r2, [pc, #140]	; (800d3ac <HAL_TIM_OC_Start_IT+0x2a4>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d013      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a22      	ldr	r2, [pc, #136]	; (800d3b0 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d00e      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a19      	ldr	r2, [pc, #100]	; (800d398 <HAL_TIM_OC_Start_IT+0x290>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d009      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a1e      	ldr	r2, [pc, #120]	; (800d3b4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d004      	beq.n	800d34a <HAL_TIM_OC_Start_IT+0x242>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a15      	ldr	r2, [pc, #84]	; (800d39c <HAL_TIM_OC_Start_IT+0x294>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d115      	bne.n	800d376 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	4b19      	ldr	r3, [pc, #100]	; (800d3b8 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d352:	4013      	ands	r3, r2
 800d354:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2b06      	cmp	r3, #6
 800d35a:	d015      	beq.n	800d388 <HAL_TIM_OC_Start_IT+0x280>
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d362:	d011      	beq.n	800d388 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f042 0201 	orr.w	r2, r2, #1
 800d372:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d374:	e008      	b.n	800d388 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f042 0201 	orr.w	r2, r2, #1
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	e000      	b.n	800d38a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d388:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	40010000 	.word	0x40010000
 800d398:	40010400 	.word	0x40010400
 800d39c:	40014000 	.word	0x40014000
 800d3a0:	40014400 	.word	0x40014400
 800d3a4:	40014800 	.word	0x40014800
 800d3a8:	40000400 	.word	0x40000400
 800d3ac:	40000800 	.word	0x40000800
 800d3b0:	40000c00 	.word	0x40000c00
 800d3b4:	40001800 	.word	0x40001800
 800d3b8:	00010007 	.word	0x00010007

0800d3bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e049      	b.n	800d462 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f841 	bl	800d46a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f000 fc80 	bl	800dd00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b083      	sub	sp, #12
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d472:	bf00      	nop
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
	...

0800d480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d109      	bne.n	800d4a4 <HAL_TIM_PWM_Start+0x24>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b01      	cmp	r3, #1
 800d49a:	bf14      	ite	ne
 800d49c:	2301      	movne	r3, #1
 800d49e:	2300      	moveq	r3, #0
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	e03c      	b.n	800d51e <HAL_TIM_PWM_Start+0x9e>
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	d109      	bne.n	800d4be <HAL_TIM_PWM_Start+0x3e>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	bf14      	ite	ne
 800d4b6:	2301      	movne	r3, #1
 800d4b8:	2300      	moveq	r3, #0
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	e02f      	b.n	800d51e <HAL_TIM_PWM_Start+0x9e>
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2b08      	cmp	r3, #8
 800d4c2:	d109      	bne.n	800d4d8 <HAL_TIM_PWM_Start+0x58>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	bf14      	ite	ne
 800d4d0:	2301      	movne	r3, #1
 800d4d2:	2300      	moveq	r3, #0
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	e022      	b.n	800d51e <HAL_TIM_PWM_Start+0x9e>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b0c      	cmp	r3, #12
 800d4dc:	d109      	bne.n	800d4f2 <HAL_TIM_PWM_Start+0x72>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	bf14      	ite	ne
 800d4ea:	2301      	movne	r3, #1
 800d4ec:	2300      	moveq	r3, #0
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	e015      	b.n	800d51e <HAL_TIM_PWM_Start+0x9e>
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b10      	cmp	r3, #16
 800d4f6:	d109      	bne.n	800d50c <HAL_TIM_PWM_Start+0x8c>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b01      	cmp	r3, #1
 800d502:	bf14      	ite	ne
 800d504:	2301      	movne	r3, #1
 800d506:	2300      	moveq	r3, #0
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	e008      	b.n	800d51e <HAL_TIM_PWM_Start+0x9e>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d512:	b2db      	uxtb	r3, r3
 800d514:	2b01      	cmp	r3, #1
 800d516:	bf14      	ite	ne
 800d518:	2301      	movne	r3, #1
 800d51a:	2300      	moveq	r3, #0
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e0a1      	b.n	800d66a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d104      	bne.n	800d536 <HAL_TIM_PWM_Start+0xb6>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2202      	movs	r2, #2
 800d530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d534:	e023      	b.n	800d57e <HAL_TIM_PWM_Start+0xfe>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d104      	bne.n	800d546 <HAL_TIM_PWM_Start+0xc6>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2202      	movs	r2, #2
 800d540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d544:	e01b      	b.n	800d57e <HAL_TIM_PWM_Start+0xfe>
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d104      	bne.n	800d556 <HAL_TIM_PWM_Start+0xd6>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2202      	movs	r2, #2
 800d550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d554:	e013      	b.n	800d57e <HAL_TIM_PWM_Start+0xfe>
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b0c      	cmp	r3, #12
 800d55a:	d104      	bne.n	800d566 <HAL_TIM_PWM_Start+0xe6>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2202      	movs	r2, #2
 800d560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d564:	e00b      	b.n	800d57e <HAL_TIM_PWM_Start+0xfe>
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b10      	cmp	r3, #16
 800d56a:	d104      	bne.n	800d576 <HAL_TIM_PWM_Start+0xf6>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2202      	movs	r2, #2
 800d570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d574:	e003      	b.n	800d57e <HAL_TIM_PWM_Start+0xfe>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2202      	movs	r2, #2
 800d57a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2201      	movs	r2, #1
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	4618      	mov	r0, r3
 800d588:	f000 ffd4 	bl	800e534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a38      	ldr	r2, [pc, #224]	; (800d674 <HAL_TIM_PWM_Start+0x1f4>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d013      	beq.n	800d5be <HAL_TIM_PWM_Start+0x13e>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a37      	ldr	r2, [pc, #220]	; (800d678 <HAL_TIM_PWM_Start+0x1f8>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d00e      	beq.n	800d5be <HAL_TIM_PWM_Start+0x13e>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a35      	ldr	r2, [pc, #212]	; (800d67c <HAL_TIM_PWM_Start+0x1fc>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d009      	beq.n	800d5be <HAL_TIM_PWM_Start+0x13e>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a34      	ldr	r2, [pc, #208]	; (800d680 <HAL_TIM_PWM_Start+0x200>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d004      	beq.n	800d5be <HAL_TIM_PWM_Start+0x13e>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a32      	ldr	r2, [pc, #200]	; (800d684 <HAL_TIM_PWM_Start+0x204>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d101      	bne.n	800d5c2 <HAL_TIM_PWM_Start+0x142>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e000      	b.n	800d5c4 <HAL_TIM_PWM_Start+0x144>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d007      	beq.n	800d5d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a25      	ldr	r2, [pc, #148]	; (800d674 <HAL_TIM_PWM_Start+0x1f4>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d022      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ea:	d01d      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a25      	ldr	r2, [pc, #148]	; (800d688 <HAL_TIM_PWM_Start+0x208>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d018      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a24      	ldr	r2, [pc, #144]	; (800d68c <HAL_TIM_PWM_Start+0x20c>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d013      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a22      	ldr	r2, [pc, #136]	; (800d690 <HAL_TIM_PWM_Start+0x210>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d00e      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a1a      	ldr	r2, [pc, #104]	; (800d678 <HAL_TIM_PWM_Start+0x1f8>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d009      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a1e      	ldr	r2, [pc, #120]	; (800d694 <HAL_TIM_PWM_Start+0x214>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d004      	beq.n	800d628 <HAL_TIM_PWM_Start+0x1a8>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a16      	ldr	r2, [pc, #88]	; (800d67c <HAL_TIM_PWM_Start+0x1fc>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d115      	bne.n	800d654 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	689a      	ldr	r2, [r3, #8]
 800d62e:	4b1a      	ldr	r3, [pc, #104]	; (800d698 <HAL_TIM_PWM_Start+0x218>)
 800d630:	4013      	ands	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2b06      	cmp	r3, #6
 800d638:	d015      	beq.n	800d666 <HAL_TIM_PWM_Start+0x1e6>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d640:	d011      	beq.n	800d666 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f042 0201 	orr.w	r2, r2, #1
 800d650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d652:	e008      	b.n	800d666 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f042 0201 	orr.w	r2, r2, #1
 800d662:	601a      	str	r2, [r3, #0]
 800d664:	e000      	b.n	800d668 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d666:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	40010000 	.word	0x40010000
 800d678:	40010400 	.word	0x40010400
 800d67c:	40014000 	.word	0x40014000
 800d680:	40014400 	.word	0x40014400
 800d684:	40014800 	.word	0x40014800
 800d688:	40000400 	.word	0x40000400
 800d68c:	40000800 	.word	0x40000800
 800d690:	40000c00 	.word	0x40000c00
 800d694:	40001800 	.word	0x40001800
 800d698:	00010007 	.word	0x00010007

0800d69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d020      	beq.n	800d700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f003 0302 	and.w	r3, r3, #2
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d01b      	beq.n	800d700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f06f 0202 	mvn.w	r2, #2
 800d6d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	f003 0303 	and.w	r3, r3, #3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d003      	beq.n	800d6ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 faec 	bl	800dcc4 <HAL_TIM_IC_CaptureCallback>
 800d6ec:	e005      	b.n	800d6fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7f2 ffc8 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 faef 	bl	800dcd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f003 0304 	and.w	r3, r3, #4
 800d706:	2b00      	cmp	r3, #0
 800d708:	d020      	beq.n	800d74c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f003 0304 	and.w	r3, r3, #4
 800d710:	2b00      	cmp	r3, #0
 800d712:	d01b      	beq.n	800d74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f06f 0204 	mvn.w	r2, #4
 800d71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2202      	movs	r2, #2
 800d722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d003      	beq.n	800d73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 fac6 	bl	800dcc4 <HAL_TIM_IC_CaptureCallback>
 800d738:	e005      	b.n	800d746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7f2 ffa2 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fac9 	bl	800dcd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	f003 0308 	and.w	r3, r3, #8
 800d752:	2b00      	cmp	r3, #0
 800d754:	d020      	beq.n	800d798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f003 0308 	and.w	r3, r3, #8
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d01b      	beq.n	800d798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f06f 0208 	mvn.w	r2, #8
 800d768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2204      	movs	r2, #4
 800d76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 faa0 	bl	800dcc4 <HAL_TIM_IC_CaptureCallback>
 800d784:	e005      	b.n	800d792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7f2 ff7c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 faa3 	bl	800dcd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	f003 0310 	and.w	r3, r3, #16
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d020      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f003 0310 	and.w	r3, r3, #16
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d01b      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f06f 0210 	mvn.w	r2, #16
 800d7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2208      	movs	r2, #8
 800d7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	69db      	ldr	r3, [r3, #28]
 800d7c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fa7a 	bl	800dcc4 <HAL_TIM_IC_CaptureCallback>
 800d7d0:	e005      	b.n	800d7de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7f2 ff56 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fa7d 	bl	800dcd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00c      	beq.n	800d808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f06f 0201 	mvn.w	r2, #1
 800d800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7f4 ffa0 	bl	8002748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d104      	bne.n	800d81c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00c      	beq.n	800d836 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d822:	2b00      	cmp	r3, #0
 800d824:	d007      	beq.n	800d836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 ffbb 	bl	800e7ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00c      	beq.n	800d85a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d846:	2b00      	cmp	r3, #0
 800d848:	d007      	beq.n	800d85a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 ffb3 	bl	800e7c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00c      	beq.n	800d87e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d007      	beq.n	800d87e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 fa37 	bl	800dcec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	f003 0320 	and.w	r3, r3, #32
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00c      	beq.n	800d8a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f003 0320 	and.w	r3, r3, #32
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d007      	beq.n	800d8a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f06f 0220 	mvn.w	r2, #32
 800d89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 ff7b 	bl	800e798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d101      	bne.n	800d8ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	e0ff      	b.n	800daca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b14      	cmp	r3, #20
 800d8d6:	f200 80f0 	bhi.w	800daba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d935 	.word	0x0800d935
 800d8e4:	0800dabb 	.word	0x0800dabb
 800d8e8:	0800dabb 	.word	0x0800dabb
 800d8ec:	0800dabb 	.word	0x0800dabb
 800d8f0:	0800d975 	.word	0x0800d975
 800d8f4:	0800dabb 	.word	0x0800dabb
 800d8f8:	0800dabb 	.word	0x0800dabb
 800d8fc:	0800dabb 	.word	0x0800dabb
 800d900:	0800d9b7 	.word	0x0800d9b7
 800d904:	0800dabb 	.word	0x0800dabb
 800d908:	0800dabb 	.word	0x0800dabb
 800d90c:	0800dabb 	.word	0x0800dabb
 800d910:	0800d9f7 	.word	0x0800d9f7
 800d914:	0800dabb 	.word	0x0800dabb
 800d918:	0800dabb 	.word	0x0800dabb
 800d91c:	0800dabb 	.word	0x0800dabb
 800d920:	0800da39 	.word	0x0800da39
 800d924:	0800dabb 	.word	0x0800dabb
 800d928:	0800dabb 	.word	0x0800dabb
 800d92c:	0800dabb 	.word	0x0800dabb
 800d930:	0800da79 	.word	0x0800da79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68b9      	ldr	r1, [r7, #8]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 fa86 	bl	800de4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	699a      	ldr	r2, [r3, #24]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0208 	orr.w	r2, r2, #8
 800d94e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	699a      	ldr	r2, [r3, #24]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f022 0204 	bic.w	r2, r2, #4
 800d95e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6999      	ldr	r1, [r3, #24]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	691a      	ldr	r2, [r3, #16]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	430a      	orrs	r2, r1
 800d970:	619a      	str	r2, [r3, #24]
      break;
 800d972:	e0a5      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68b9      	ldr	r1, [r7, #8]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 faf6 	bl	800df6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	699a      	ldr	r2, [r3, #24]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d98e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	699a      	ldr	r2, [r3, #24]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d99e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6999      	ldr	r1, [r3, #24]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	021a      	lsls	r2, r3, #8
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	619a      	str	r2, [r3, #24]
      break;
 800d9b4:	e084      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68b9      	ldr	r1, [r7, #8]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 fb5f 	bl	800e080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69da      	ldr	r2, [r3, #28]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f042 0208 	orr.w	r2, r2, #8
 800d9d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	69da      	ldr	r2, [r3, #28]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f022 0204 	bic.w	r2, r2, #4
 800d9e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	69d9      	ldr	r1, [r3, #28]
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	691a      	ldr	r2, [r3, #16]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	61da      	str	r2, [r3, #28]
      break;
 800d9f4:	e064      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68b9      	ldr	r1, [r7, #8]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f000 fbc7 	bl	800e190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	69da      	ldr	r2, [r3, #28]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	69d9      	ldr	r1, [r3, #28]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	021a      	lsls	r2, r3, #8
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	430a      	orrs	r2, r1
 800da34:	61da      	str	r2, [r3, #28]
      break;
 800da36:	e043      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68b9      	ldr	r1, [r7, #8]
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 fc10 	bl	800e264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f042 0208 	orr.w	r2, r2, #8
 800da52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f022 0204 	bic.w	r2, r2, #4
 800da62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	691a      	ldr	r2, [r3, #16]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	430a      	orrs	r2, r1
 800da74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800da76:	e023      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 fc54 	bl	800e32c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	021a      	lsls	r2, r3, #8
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dab8:	e002      	b.n	800dac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	75fb      	strb	r3, [r7, #23]
      break;
 800dabe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop

0800dad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d101      	bne.n	800daf0 <HAL_TIM_ConfigClockSource+0x1c>
 800daec:	2302      	movs	r3, #2
 800daee:	e0dc      	b.n	800dcaa <HAL_TIM_ConfigClockSource+0x1d6>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	4b6a      	ldr	r3, [pc, #424]	; (800dcb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800db0c:	4013      	ands	r3, r2
 800db0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a64      	ldr	r2, [pc, #400]	; (800dcb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db26:	4293      	cmp	r3, r2
 800db28:	f000 80a9 	beq.w	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800db2c:	4a62      	ldr	r2, [pc, #392]	; (800dcb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	f200 80ae 	bhi.w	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db34:	4a61      	ldr	r2, [pc, #388]	; (800dcbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800db36:	4293      	cmp	r3, r2
 800db38:	f000 80a1 	beq.w	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800db3c:	4a5f      	ldr	r2, [pc, #380]	; (800dcbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	f200 80a6 	bhi.w	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db44:	4a5e      	ldr	r2, [pc, #376]	; (800dcc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db46:	4293      	cmp	r3, r2
 800db48:	f000 8099 	beq.w	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800db4c:	4a5c      	ldr	r2, [pc, #368]	; (800dcc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	f200 809e 	bhi.w	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db58:	f000 8091 	beq.w	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800db5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db60:	f200 8096 	bhi.w	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db68:	f000 8089 	beq.w	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800db6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db70:	f200 808e 	bhi.w	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db78:	d03e      	beq.n	800dbf8 <HAL_TIM_ConfigClockSource+0x124>
 800db7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db7e:	f200 8087 	bhi.w	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db86:	f000 8086 	beq.w	800dc96 <HAL_TIM_ConfigClockSource+0x1c2>
 800db8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db8e:	d87f      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db90:	2b70      	cmp	r3, #112	; 0x70
 800db92:	d01a      	beq.n	800dbca <HAL_TIM_ConfigClockSource+0xf6>
 800db94:	2b70      	cmp	r3, #112	; 0x70
 800db96:	d87b      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800db98:	2b60      	cmp	r3, #96	; 0x60
 800db9a:	d050      	beq.n	800dc3e <HAL_TIM_ConfigClockSource+0x16a>
 800db9c:	2b60      	cmp	r3, #96	; 0x60
 800db9e:	d877      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba0:	2b50      	cmp	r3, #80	; 0x50
 800dba2:	d03c      	beq.n	800dc1e <HAL_TIM_ConfigClockSource+0x14a>
 800dba4:	2b50      	cmp	r3, #80	; 0x50
 800dba6:	d873      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba8:	2b40      	cmp	r3, #64	; 0x40
 800dbaa:	d058      	beq.n	800dc5e <HAL_TIM_ConfigClockSource+0x18a>
 800dbac:	2b40      	cmp	r3, #64	; 0x40
 800dbae:	d86f      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb0:	2b30      	cmp	r3, #48	; 0x30
 800dbb2:	d064      	beq.n	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb4:	2b30      	cmp	r3, #48	; 0x30
 800dbb6:	d86b      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb8:	2b20      	cmp	r3, #32
 800dbba:	d060      	beq.n	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbbc:	2b20      	cmp	r3, #32
 800dbbe:	d867      	bhi.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d05c      	beq.n	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbc4:	2b10      	cmp	r3, #16
 800dbc6:	d05a      	beq.n	800dc7e <HAL_TIM_ConfigClockSource+0x1aa>
 800dbc8:	e062      	b.n	800dc90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6818      	ldr	r0, [r3, #0]
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	6899      	ldr	r1, [r3, #8]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	f000 fc8b 	bl	800e4f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dbec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	609a      	str	r2, [r3, #8]
      break;
 800dbf6:	e04f      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6818      	ldr	r0, [r3, #0]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	6899      	ldr	r1, [r3, #8]
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	f000 fc74 	bl	800e4f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc1a:	609a      	str	r2, [r3, #8]
      break;
 800dc1c:	e03c      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6818      	ldr	r0, [r3, #0]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	6859      	ldr	r1, [r3, #4]
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f000 fbe4 	bl	800e3f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2150      	movs	r1, #80	; 0x50
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 fc3e 	bl	800e4b8 <TIM_ITRx_SetConfig>
      break;
 800dc3c:	e02c      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	6859      	ldr	r1, [r3, #4]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f000 fc03 	bl	800e456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2160      	movs	r1, #96	; 0x60
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fc2e 	bl	800e4b8 <TIM_ITRx_SetConfig>
      break;
 800dc5c:	e01c      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	6859      	ldr	r1, [r3, #4]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f000 fbc4 	bl	800e3f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2140      	movs	r1, #64	; 0x40
 800dc76:	4618      	mov	r0, r3
 800dc78:	f000 fc1e 	bl	800e4b8 <TIM_ITRx_SetConfig>
      break;
 800dc7c:	e00c      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4619      	mov	r1, r3
 800dc88:	4610      	mov	r0, r2
 800dc8a:	f000 fc15 	bl	800e4b8 <TIM_ITRx_SetConfig>
      break;
 800dc8e:	e003      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	73fb      	strb	r3, [r7, #15]
      break;
 800dc94:	e000      	b.n	800dc98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	ffceff88 	.word	0xffceff88
 800dcb8:	00100040 	.word	0x00100040
 800dcbc:	00100030 	.word	0x00100030
 800dcc0:	00100020 	.word	0x00100020

0800dcc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a46      	ldr	r2, [pc, #280]	; (800de2c <TIM_Base_SetConfig+0x12c>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d013      	beq.n	800dd40 <TIM_Base_SetConfig+0x40>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd1e:	d00f      	beq.n	800dd40 <TIM_Base_SetConfig+0x40>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a43      	ldr	r2, [pc, #268]	; (800de30 <TIM_Base_SetConfig+0x130>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d00b      	beq.n	800dd40 <TIM_Base_SetConfig+0x40>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a42      	ldr	r2, [pc, #264]	; (800de34 <TIM_Base_SetConfig+0x134>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d007      	beq.n	800dd40 <TIM_Base_SetConfig+0x40>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a41      	ldr	r2, [pc, #260]	; (800de38 <TIM_Base_SetConfig+0x138>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d003      	beq.n	800dd40 <TIM_Base_SetConfig+0x40>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a40      	ldr	r2, [pc, #256]	; (800de3c <TIM_Base_SetConfig+0x13c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d108      	bne.n	800dd52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a35      	ldr	r2, [pc, #212]	; (800de2c <TIM_Base_SetConfig+0x12c>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d01f      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd60:	d01b      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a32      	ldr	r2, [pc, #200]	; (800de30 <TIM_Base_SetConfig+0x130>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d017      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a31      	ldr	r2, [pc, #196]	; (800de34 <TIM_Base_SetConfig+0x134>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d013      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a30      	ldr	r2, [pc, #192]	; (800de38 <TIM_Base_SetConfig+0x138>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d00f      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a2f      	ldr	r2, [pc, #188]	; (800de3c <TIM_Base_SetConfig+0x13c>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d00b      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a2e      	ldr	r2, [pc, #184]	; (800de40 <TIM_Base_SetConfig+0x140>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d007      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4a2d      	ldr	r2, [pc, #180]	; (800de44 <TIM_Base_SetConfig+0x144>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d003      	beq.n	800dd9a <TIM_Base_SetConfig+0x9a>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4a2c      	ldr	r2, [pc, #176]	; (800de48 <TIM_Base_SetConfig+0x148>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d108      	bne.n	800ddac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dda0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	689a      	ldr	r2, [r3, #8]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a16      	ldr	r2, [pc, #88]	; (800de2c <TIM_Base_SetConfig+0x12c>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d00f      	beq.n	800ddf8 <TIM_Base_SetConfig+0xf8>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4a18      	ldr	r2, [pc, #96]	; (800de3c <TIM_Base_SetConfig+0x13c>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d00b      	beq.n	800ddf8 <TIM_Base_SetConfig+0xf8>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4a17      	ldr	r2, [pc, #92]	; (800de40 <TIM_Base_SetConfig+0x140>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d007      	beq.n	800ddf8 <TIM_Base_SetConfig+0xf8>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a16      	ldr	r2, [pc, #88]	; (800de44 <TIM_Base_SetConfig+0x144>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d003      	beq.n	800ddf8 <TIM_Base_SetConfig+0xf8>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a15      	ldr	r2, [pc, #84]	; (800de48 <TIM_Base_SetConfig+0x148>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d103      	bne.n	800de00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	691a      	ldr	r2, [r3, #16]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d105      	bne.n	800de1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	f023 0201 	bic.w	r2, r3, #1
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	611a      	str	r2, [r3, #16]
  }
}
 800de1e:	bf00      	nop
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	40010000 	.word	0x40010000
 800de30:	40000400 	.word	0x40000400
 800de34:	40000800 	.word	0x40000800
 800de38:	40000c00 	.word	0x40000c00
 800de3c:	40010400 	.word	0x40010400
 800de40:	40014000 	.word	0x40014000
 800de44:	40014400 	.word	0x40014400
 800de48:	40014800 	.word	0x40014800

0800de4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b087      	sub	sp, #28
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a1b      	ldr	r3, [r3, #32]
 800de5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	f023 0201 	bic.w	r2, r3, #1
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	4b37      	ldr	r3, [pc, #220]	; (800df54 <TIM_OC1_SetConfig+0x108>)
 800de78:	4013      	ands	r3, r2
 800de7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f023 0303 	bic.w	r3, r3, #3
 800de82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f023 0302 	bic.w	r3, r3, #2
 800de94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a2d      	ldr	r2, [pc, #180]	; (800df58 <TIM_OC1_SetConfig+0x10c>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d00f      	beq.n	800dec8 <TIM_OC1_SetConfig+0x7c>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a2c      	ldr	r2, [pc, #176]	; (800df5c <TIM_OC1_SetConfig+0x110>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d00b      	beq.n	800dec8 <TIM_OC1_SetConfig+0x7c>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a2b      	ldr	r2, [pc, #172]	; (800df60 <TIM_OC1_SetConfig+0x114>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d007      	beq.n	800dec8 <TIM_OC1_SetConfig+0x7c>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a2a      	ldr	r2, [pc, #168]	; (800df64 <TIM_OC1_SetConfig+0x118>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d003      	beq.n	800dec8 <TIM_OC1_SetConfig+0x7c>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a29      	ldr	r2, [pc, #164]	; (800df68 <TIM_OC1_SetConfig+0x11c>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d10c      	bne.n	800dee2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f023 0308 	bic.w	r3, r3, #8
 800dece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	f023 0304 	bic.w	r3, r3, #4
 800dee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a1c      	ldr	r2, [pc, #112]	; (800df58 <TIM_OC1_SetConfig+0x10c>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d00f      	beq.n	800df0a <TIM_OC1_SetConfig+0xbe>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a1b      	ldr	r2, [pc, #108]	; (800df5c <TIM_OC1_SetConfig+0x110>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d00b      	beq.n	800df0a <TIM_OC1_SetConfig+0xbe>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a1a      	ldr	r2, [pc, #104]	; (800df60 <TIM_OC1_SetConfig+0x114>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d007      	beq.n	800df0a <TIM_OC1_SetConfig+0xbe>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a19      	ldr	r2, [pc, #100]	; (800df64 <TIM_OC1_SetConfig+0x118>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d003      	beq.n	800df0a <TIM_OC1_SetConfig+0xbe>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a18      	ldr	r2, [pc, #96]	; (800df68 <TIM_OC1_SetConfig+0x11c>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d111      	bne.n	800df2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	4313      	orrs	r3, r2
 800df22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	697a      	ldr	r2, [r7, #20]
 800df46:	621a      	str	r2, [r3, #32]
}
 800df48:	bf00      	nop
 800df4a:	371c      	adds	r7, #28
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	fffeff8f 	.word	0xfffeff8f
 800df58:	40010000 	.word	0x40010000
 800df5c:	40010400 	.word	0x40010400
 800df60:	40014000 	.word	0x40014000
 800df64:	40014400 	.word	0x40014400
 800df68:	40014800 	.word	0x40014800

0800df6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b087      	sub	sp, #28
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a1b      	ldr	r3, [r3, #32]
 800df80:	f023 0210 	bic.w	r2, r3, #16
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	4b34      	ldr	r3, [pc, #208]	; (800e068 <TIM_OC2_SetConfig+0xfc>)
 800df98:	4013      	ands	r3, r2
 800df9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	021b      	lsls	r3, r3, #8
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f023 0320 	bic.w	r3, r3, #32
 800dfb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	011b      	lsls	r3, r3, #4
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a29      	ldr	r2, [pc, #164]	; (800e06c <TIM_OC2_SetConfig+0x100>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d003      	beq.n	800dfd4 <TIM_OC2_SetConfig+0x68>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a28      	ldr	r2, [pc, #160]	; (800e070 <TIM_OC2_SetConfig+0x104>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d10d      	bne.n	800dff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	011b      	lsls	r3, r3, #4
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4a1e      	ldr	r2, [pc, #120]	; (800e06c <TIM_OC2_SetConfig+0x100>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d00f      	beq.n	800e018 <TIM_OC2_SetConfig+0xac>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4a1d      	ldr	r2, [pc, #116]	; (800e070 <TIM_OC2_SetConfig+0x104>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d00b      	beq.n	800e018 <TIM_OC2_SetConfig+0xac>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4a1c      	ldr	r2, [pc, #112]	; (800e074 <TIM_OC2_SetConfig+0x108>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d007      	beq.n	800e018 <TIM_OC2_SetConfig+0xac>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4a1b      	ldr	r2, [pc, #108]	; (800e078 <TIM_OC2_SetConfig+0x10c>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d003      	beq.n	800e018 <TIM_OC2_SetConfig+0xac>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4a1a      	ldr	r2, [pc, #104]	; (800e07c <TIM_OC2_SetConfig+0x110>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d113      	bne.n	800e040 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e01e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	695b      	ldr	r3, [r3, #20]
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	4313      	orrs	r3, r2
 800e032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	621a      	str	r2, [r3, #32]
}
 800e05a:	bf00      	nop
 800e05c:	371c      	adds	r7, #28
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	feff8fff 	.word	0xfeff8fff
 800e06c:	40010000 	.word	0x40010000
 800e070:	40010400 	.word	0x40010400
 800e074:	40014000 	.word	0x40014000
 800e078:	40014400 	.word	0x40014400
 800e07c:	40014800 	.word	0x40014800

0800e080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e080:	b480      	push	{r7}
 800e082:	b087      	sub	sp, #28
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a1b      	ldr	r3, [r3, #32]
 800e094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	69db      	ldr	r3, [r3, #28]
 800e0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	4b33      	ldr	r3, [pc, #204]	; (800e178 <TIM_OC3_SetConfig+0xf8>)
 800e0ac:	4013      	ands	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f023 0303 	bic.w	r3, r3, #3
 800e0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e0c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	021b      	lsls	r3, r3, #8
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a28      	ldr	r2, [pc, #160]	; (800e17c <TIM_OC3_SetConfig+0xfc>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d003      	beq.n	800e0e6 <TIM_OC3_SetConfig+0x66>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4a27      	ldr	r2, [pc, #156]	; (800e180 <TIM_OC3_SetConfig+0x100>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d10d      	bne.n	800e102 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	021b      	lsls	r3, r3, #8
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	4a1d      	ldr	r2, [pc, #116]	; (800e17c <TIM_OC3_SetConfig+0xfc>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d00f      	beq.n	800e12a <TIM_OC3_SetConfig+0xaa>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	4a1c      	ldr	r2, [pc, #112]	; (800e180 <TIM_OC3_SetConfig+0x100>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d00b      	beq.n	800e12a <TIM_OC3_SetConfig+0xaa>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4a1b      	ldr	r2, [pc, #108]	; (800e184 <TIM_OC3_SetConfig+0x104>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d007      	beq.n	800e12a <TIM_OC3_SetConfig+0xaa>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4a1a      	ldr	r2, [pc, #104]	; (800e188 <TIM_OC3_SetConfig+0x108>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d003      	beq.n	800e12a <TIM_OC3_SetConfig+0xaa>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a19      	ldr	r2, [pc, #100]	; (800e18c <TIM_OC3_SetConfig+0x10c>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d113      	bne.n	800e152 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	011b      	lsls	r3, r3, #4
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	4313      	orrs	r3, r2
 800e144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	011b      	lsls	r3, r3, #4
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	4313      	orrs	r3, r2
 800e150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	693a      	ldr	r2, [r7, #16]
 800e156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	697a      	ldr	r2, [r7, #20]
 800e16a:	621a      	str	r2, [r3, #32]
}
 800e16c:	bf00      	nop
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr
 800e178:	fffeff8f 	.word	0xfffeff8f
 800e17c:	40010000 	.word	0x40010000
 800e180:	40010400 	.word	0x40010400
 800e184:	40014000 	.word	0x40014000
 800e188:	40014400 	.word	0x40014400
 800e18c:	40014800 	.word	0x40014800

0800e190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e190:	b480      	push	{r7}
 800e192:	b087      	sub	sp, #28
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a1b      	ldr	r3, [r3, #32]
 800e19e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	4b24      	ldr	r3, [pc, #144]	; (800e24c <TIM_OC4_SetConfig+0xbc>)
 800e1bc:	4013      	ands	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	021b      	lsls	r3, r3, #8
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e1da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	031b      	lsls	r3, r3, #12
 800e1e2:	693a      	ldr	r2, [r7, #16]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4a19      	ldr	r2, [pc, #100]	; (800e250 <TIM_OC4_SetConfig+0xc0>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d00f      	beq.n	800e210 <TIM_OC4_SetConfig+0x80>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a18      	ldr	r2, [pc, #96]	; (800e254 <TIM_OC4_SetConfig+0xc4>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d00b      	beq.n	800e210 <TIM_OC4_SetConfig+0x80>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4a17      	ldr	r2, [pc, #92]	; (800e258 <TIM_OC4_SetConfig+0xc8>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d007      	beq.n	800e210 <TIM_OC4_SetConfig+0x80>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a16      	ldr	r2, [pc, #88]	; (800e25c <TIM_OC4_SetConfig+0xcc>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d003      	beq.n	800e210 <TIM_OC4_SetConfig+0x80>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a15      	ldr	r2, [pc, #84]	; (800e260 <TIM_OC4_SetConfig+0xd0>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d109      	bne.n	800e224 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	695b      	ldr	r3, [r3, #20]
 800e21c:	019b      	lsls	r3, r3, #6
 800e21e:	697a      	ldr	r2, [r7, #20]
 800e220:	4313      	orrs	r3, r2
 800e222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	697a      	ldr	r2, [r7, #20]
 800e228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	685a      	ldr	r2, [r3, #4]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	693a      	ldr	r2, [r7, #16]
 800e23c:	621a      	str	r2, [r3, #32]
}
 800e23e:	bf00      	nop
 800e240:	371c      	adds	r7, #28
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	feff8fff 	.word	0xfeff8fff
 800e250:	40010000 	.word	0x40010000
 800e254:	40010400 	.word	0x40010400
 800e258:	40014000 	.word	0x40014000
 800e25c:	40014400 	.word	0x40014400
 800e260:	40014800 	.word	0x40014800

0800e264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e264:	b480      	push	{r7}
 800e266:	b087      	sub	sp, #28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a1b      	ldr	r3, [r3, #32]
 800e278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4b21      	ldr	r3, [pc, #132]	; (800e314 <TIM_OC5_SetConfig+0xb0>)
 800e290:	4013      	ands	r3, r2
 800e292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e2a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	041b      	lsls	r3, r3, #16
 800e2ac:	693a      	ldr	r2, [r7, #16]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a18      	ldr	r2, [pc, #96]	; (800e318 <TIM_OC5_SetConfig+0xb4>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d00f      	beq.n	800e2da <TIM_OC5_SetConfig+0x76>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4a17      	ldr	r2, [pc, #92]	; (800e31c <TIM_OC5_SetConfig+0xb8>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d00b      	beq.n	800e2da <TIM_OC5_SetConfig+0x76>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a16      	ldr	r2, [pc, #88]	; (800e320 <TIM_OC5_SetConfig+0xbc>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d007      	beq.n	800e2da <TIM_OC5_SetConfig+0x76>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4a15      	ldr	r2, [pc, #84]	; (800e324 <TIM_OC5_SetConfig+0xc0>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d003      	beq.n	800e2da <TIM_OC5_SetConfig+0x76>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a14      	ldr	r2, [pc, #80]	; (800e328 <TIM_OC5_SetConfig+0xc4>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d109      	bne.n	800e2ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	695b      	ldr	r3, [r3, #20]
 800e2e6:	021b      	lsls	r3, r3, #8
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	621a      	str	r2, [r3, #32]
}
 800e308:	bf00      	nop
 800e30a:	371c      	adds	r7, #28
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	fffeff8f 	.word	0xfffeff8f
 800e318:	40010000 	.word	0x40010000
 800e31c:	40010400 	.word	0x40010400
 800e320:	40014000 	.word	0x40014000
 800e324:	40014400 	.word	0x40014400
 800e328:	40014800 	.word	0x40014800

0800e32c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b087      	sub	sp, #28
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a1b      	ldr	r3, [r3, #32]
 800e340:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4b22      	ldr	r3, [pc, #136]	; (800e3e0 <TIM_OC6_SetConfig+0xb4>)
 800e358:	4013      	ands	r3, r2
 800e35a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	021b      	lsls	r3, r3, #8
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	4313      	orrs	r3, r2
 800e366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	689b      	ldr	r3, [r3, #8]
 800e374:	051b      	lsls	r3, r3, #20
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	4313      	orrs	r3, r2
 800e37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a19      	ldr	r2, [pc, #100]	; (800e3e4 <TIM_OC6_SetConfig+0xb8>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d00f      	beq.n	800e3a4 <TIM_OC6_SetConfig+0x78>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a18      	ldr	r2, [pc, #96]	; (800e3e8 <TIM_OC6_SetConfig+0xbc>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d00b      	beq.n	800e3a4 <TIM_OC6_SetConfig+0x78>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	4a17      	ldr	r2, [pc, #92]	; (800e3ec <TIM_OC6_SetConfig+0xc0>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d007      	beq.n	800e3a4 <TIM_OC6_SetConfig+0x78>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a16      	ldr	r2, [pc, #88]	; (800e3f0 <TIM_OC6_SetConfig+0xc4>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d003      	beq.n	800e3a4 <TIM_OC6_SetConfig+0x78>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4a15      	ldr	r2, [pc, #84]	; (800e3f4 <TIM_OC6_SetConfig+0xc8>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d109      	bne.n	800e3b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	029b      	lsls	r3, r3, #10
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	697a      	ldr	r2, [r7, #20]
 800e3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	621a      	str	r2, [r3, #32]
}
 800e3d2:	bf00      	nop
 800e3d4:	371c      	adds	r7, #28
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	feff8fff 	.word	0xfeff8fff
 800e3e4:	40010000 	.word	0x40010000
 800e3e8:	40010400 	.word	0x40010400
 800e3ec:	40014000 	.word	0x40014000
 800e3f0:	40014400 	.word	0x40014400
 800e3f4:	40014800 	.word	0x40014800

0800e3f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b087      	sub	sp, #28
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6a1b      	ldr	r3, [r3, #32]
 800e408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	6a1b      	ldr	r3, [r3, #32]
 800e40e:	f023 0201 	bic.w	r2, r3, #1
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	011b      	lsls	r3, r3, #4
 800e428:	693a      	ldr	r2, [r7, #16]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f023 030a 	bic.w	r3, r3, #10
 800e434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	4313      	orrs	r3, r2
 800e43c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	693a      	ldr	r2, [r7, #16]
 800e442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	621a      	str	r2, [r3, #32]
}
 800e44a:	bf00      	nop
 800e44c:	371c      	adds	r7, #28
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e456:	b480      	push	{r7}
 800e458:	b087      	sub	sp, #28
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	60f8      	str	r0, [r7, #12]
 800e45e:	60b9      	str	r1, [r7, #8]
 800e460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6a1b      	ldr	r3, [r3, #32]
 800e46c:	f023 0210 	bic.w	r2, r3, #16
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	031b      	lsls	r3, r3, #12
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	4313      	orrs	r3, r2
 800e48a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e492:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	011b      	lsls	r3, r3, #4
 800e498:	697a      	ldr	r2, [r7, #20]
 800e49a:	4313      	orrs	r3, r2
 800e49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	693a      	ldr	r2, [r7, #16]
 800e4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	621a      	str	r2, [r3, #32]
}
 800e4aa:	bf00      	nop
 800e4ac:	371c      	adds	r7, #28
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
	...

0800e4b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	4b09      	ldr	r3, [pc, #36]	; (800e4f0 <TIM_ITRx_SetConfig+0x38>)
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4d0:	683a      	ldr	r2, [r7, #0]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	f043 0307 	orr.w	r3, r3, #7
 800e4da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	609a      	str	r2, [r3, #8]
}
 800e4e2:	bf00      	nop
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	ffcfff8f 	.word	0xffcfff8f

0800e4f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b087      	sub	sp, #28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
 800e500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	689b      	ldr	r3, [r3, #8]
 800e506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e50e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	021a      	lsls	r2, r3, #8
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	431a      	orrs	r2, r3
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	4313      	orrs	r3, r2
 800e51c:	697a      	ldr	r2, [r7, #20]
 800e51e:	4313      	orrs	r3, r2
 800e520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	609a      	str	r2, [r3, #8]
}
 800e528:	bf00      	nop
 800e52a:	371c      	adds	r7, #28
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	f003 031f 	and.w	r3, r3, #31
 800e546:	2201      	movs	r2, #1
 800e548:	fa02 f303 	lsl.w	r3, r2, r3
 800e54c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6a1a      	ldr	r2, [r3, #32]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	43db      	mvns	r3, r3
 800e556:	401a      	ands	r2, r3
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6a1a      	ldr	r2, [r3, #32]
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	f003 031f 	and.w	r3, r3, #31
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	fa01 f303 	lsl.w	r3, r1, r3
 800e56c:	431a      	orrs	r2, r3
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	621a      	str	r2, [r3, #32]
}
 800e572:	bf00      	nop
 800e574:	371c      	adds	r7, #28
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr
	...

0800e580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e590:	2b01      	cmp	r3, #1
 800e592:	d101      	bne.n	800e598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e594:	2302      	movs	r3, #2
 800e596:	e06d      	b.n	800e674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a30      	ldr	r2, [pc, #192]	; (800e680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d004      	beq.n	800e5cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a2f      	ldr	r2, [pc, #188]	; (800e684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d108      	bne.n	800e5de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e5d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a20      	ldr	r2, [pc, #128]	; (800e680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d022      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e60a:	d01d      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a1d      	ldr	r2, [pc, #116]	; (800e688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d018      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a1c      	ldr	r2, [pc, #112]	; (800e68c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d013      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a1a      	ldr	r2, [pc, #104]	; (800e690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d00e      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a15      	ldr	r2, [pc, #84]	; (800e684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d009      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a16      	ldr	r2, [pc, #88]	; (800e694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d004      	beq.n	800e648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a15      	ldr	r2, [pc, #84]	; (800e698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d10c      	bne.n	800e662 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e64e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	4313      	orrs	r3, r2
 800e658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2201      	movs	r2, #1
 800e666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e672:	2300      	movs	r3, #0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr
 800e680:	40010000 	.word	0x40010000
 800e684:	40010400 	.word	0x40010400
 800e688:	40000400 	.word	0x40000400
 800e68c:	40000800 	.word	0x40000800
 800e690:	40000c00 	.word	0x40000c00
 800e694:	40001800 	.word	0x40001800
 800e698:	40014000 	.word	0x40014000

0800e69c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d101      	bne.n	800e6b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e6b4:	2302      	movs	r3, #2
 800e6b6:	e065      	b.n	800e784 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	4313      	orrs	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	695b      	ldr	r3, [r3, #20]
 800e710:	4313      	orrs	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71e:	4313      	orrs	r3, r2
 800e720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	699b      	ldr	r3, [r3, #24]
 800e72c:	041b      	lsls	r3, r3, #16
 800e72e:	4313      	orrs	r3, r2
 800e730:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a16      	ldr	r2, [pc, #88]	; (800e790 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d004      	beq.n	800e746 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a14      	ldr	r2, [pc, #80]	; (800e794 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d115      	bne.n	800e772 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e750:	051b      	lsls	r3, r3, #20
 800e752:	4313      	orrs	r3, r2
 800e754:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	69db      	ldr	r3, [r3, #28]
 800e760:	4313      	orrs	r3, r2
 800e762:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	6a1b      	ldr	r3, [r3, #32]
 800e76e:	4313      	orrs	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	40010000 	.word	0x40010000
 800e794:	40010400 	.word	0x40010400

0800e798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e7c8:	bf00      	nop
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d101      	bne.n	800e7e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e042      	b.n	800e86c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d106      	bne.n	800e7fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7f4 fba9 	bl	8002f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2224      	movs	r2, #36	; 0x24
 800e802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f022 0201 	bic.w	r2, r2, #1
 800e814:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f001 fb0c 	bl	800fe3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fda1 	bl	800f36c <UART_SetConfig>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d101      	bne.n	800e834 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	e01b      	b.n	800e86c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685a      	ldr	r2, [r3, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	689a      	ldr	r2, [r3, #8]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f042 0201 	orr.w	r2, r2, #1
 800e862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f001 fb8b 	bl	800ff80 <UART_CheckIdleState>
 800e86a:	4603      	mov	r3, r0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b08a      	sub	sp, #40	; 0x28
 800e878:	af02      	add	r7, sp, #8
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	4613      	mov	r3, r2
 800e882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e88a:	2b20      	cmp	r3, #32
 800e88c:	d17b      	bne.n	800e986 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <HAL_UART_Transmit+0x26>
 800e894:	88fb      	ldrh	r3, [r7, #6]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	e074      	b.n	800e988 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2221      	movs	r2, #33	; 0x21
 800e8aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e8ae:	f7f4 fe89 	bl	80035c4 <HAL_GetTick>
 800e8b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	88fa      	ldrh	r2, [r7, #6]
 800e8b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	88fa      	ldrh	r2, [r7, #6]
 800e8c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8cc:	d108      	bne.n	800e8e0 <HAL_UART_Transmit+0x6c>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d104      	bne.n	800e8e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	61bb      	str	r3, [r7, #24]
 800e8de:	e003      	b.n	800e8e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e8e8:	e030      	b.n	800e94c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	2180      	movs	r1, #128	; 0x80
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f001 fbed 	bl	80100d4 <UART_WaitOnFlagUntilTimeout>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d005      	beq.n	800e90c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2220      	movs	r2, #32
 800e904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e908:	2303      	movs	r3, #3
 800e90a:	e03d      	b.n	800e988 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10b      	bne.n	800e92a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e920:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	3302      	adds	r3, #2
 800e926:	61bb      	str	r3, [r7, #24]
 800e928:	e007      	b.n	800e93a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	781a      	ldrb	r2, [r3, #0]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	3301      	adds	r3, #1
 800e938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e940:	b29b      	uxth	r3, r3
 800e942:	3b01      	subs	r3, #1
 800e944:	b29a      	uxth	r2, r3
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e952:	b29b      	uxth	r3, r3
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1c8      	bne.n	800e8ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2200      	movs	r2, #0
 800e960:	2140      	movs	r1, #64	; 0x40
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f001 fbb6 	bl	80100d4 <UART_WaitOnFlagUntilTimeout>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d005      	beq.n	800e97a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2220      	movs	r2, #32
 800e972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e976:	2303      	movs	r3, #3
 800e978:	e006      	b.n	800e988 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2220      	movs	r2, #32
 800e97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e000      	b.n	800e988 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e986:	2302      	movs	r3, #2
  }
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3720      	adds	r7, #32
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b08a      	sub	sp, #40	; 0x28
 800e994:	af02      	add	r7, sp, #8
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	4613      	mov	r3, r2
 800e99e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9a6:	2b20      	cmp	r3, #32
 800e9a8:	f040 80b5 	bne.w	800eb16 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <HAL_UART_Receive+0x28>
 800e9b2:	88fb      	ldrh	r3, [r7, #6]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e0ad      	b.n	800eb18 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2222      	movs	r2, #34	; 0x22
 800e9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e9d2:	f7f4 fdf7 	bl	80035c4 <HAL_GetTick>
 800e9d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	88fa      	ldrh	r2, [r7, #6]
 800e9dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	88fa      	ldrh	r2, [r7, #6]
 800e9e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9f0:	d10e      	bne.n	800ea10 <HAL_UART_Receive+0x80>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d105      	bne.n	800ea06 <HAL_UART_Receive+0x76>
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ea00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea04:	e02d      	b.n	800ea62 <HAL_UART_Receive+0xd2>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	22ff      	movs	r2, #255	; 0xff
 800ea0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea0e:	e028      	b.n	800ea62 <HAL_UART_Receive+0xd2>
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d10d      	bne.n	800ea34 <HAL_UART_Receive+0xa4>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d104      	bne.n	800ea2a <HAL_UART_Receive+0x9a>
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	22ff      	movs	r2, #255	; 0xff
 800ea24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea28:	e01b      	b.n	800ea62 <HAL_UART_Receive+0xd2>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	227f      	movs	r2, #127	; 0x7f
 800ea2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea32:	e016      	b.n	800ea62 <HAL_UART_Receive+0xd2>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea3c:	d10d      	bne.n	800ea5a <HAL_UART_Receive+0xca>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d104      	bne.n	800ea50 <HAL_UART_Receive+0xc0>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	227f      	movs	r2, #127	; 0x7f
 800ea4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea4e:	e008      	b.n	800ea62 <HAL_UART_Receive+0xd2>
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	223f      	movs	r2, #63	; 0x3f
 800ea54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ea58:	e003      	b.n	800ea62 <HAL_UART_Receive+0xd2>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea68:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea72:	d108      	bne.n	800ea86 <HAL_UART_Receive+0xf6>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d104      	bne.n	800ea86 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	61bb      	str	r3, [r7, #24]
 800ea84:	e003      	b.n	800ea8e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ea8e:	e036      	b.n	800eafe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2200      	movs	r2, #0
 800ea98:	2120      	movs	r1, #32
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	f001 fb1a 	bl	80100d4 <UART_WaitOnFlagUntilTimeout>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d005      	beq.n	800eab2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2220      	movs	r2, #32
 800eaaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800eaae:	2303      	movs	r3, #3
 800eab0:	e032      	b.n	800eb18 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10c      	bne.n	800ead2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	8a7b      	ldrh	r3, [r7, #18]
 800eac2:	4013      	ands	r3, r2
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	3302      	adds	r3, #2
 800eace:	61bb      	str	r3, [r7, #24]
 800ead0:	e00c      	b.n	800eaec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead8:	b2da      	uxtb	r2, r3
 800eada:	8a7b      	ldrh	r3, [r7, #18]
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	4013      	ands	r3, r2
 800eae0:	b2da      	uxtb	r2, r3
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	3301      	adds	r3, #1
 800eaea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1c2      	bne.n	800ea90 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	e000      	b.n	800eb18 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800eb16:	2302      	movs	r3, #2
  }
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3720      	adds	r7, #32
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	; 0x28
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb34:	2b20      	cmp	r3, #32
 800eb36:	d137      	bne.n	800eba8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <HAL_UART_Receive_IT+0x24>
 800eb3e:	88fb      	ldrh	r3, [r7, #6]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d101      	bne.n	800eb48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	e030      	b.n	800ebaa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4a18      	ldr	r2, [pc, #96]	; (800ebb4 <HAL_UART_Receive_IT+0x94>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d01f      	beq.n	800eb98 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d018      	beq.n	800eb98 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	e853 3f00 	ldrex	r3, [r3]
 800eb72:	613b      	str	r3, [r7, #16]
   return(result);
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eb7a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	461a      	mov	r2, r3
 800eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb84:	623b      	str	r3, [r7, #32]
 800eb86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb88:	69f9      	ldr	r1, [r7, #28]
 800eb8a:	6a3a      	ldr	r2, [r7, #32]
 800eb8c:	e841 2300 	strex	r3, r2, [r1]
 800eb90:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1e6      	bne.n	800eb66 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb98:	88fb      	ldrh	r3, [r7, #6]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	68b9      	ldr	r1, [r7, #8]
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f001 fb06 	bl	80101b0 <UART_Start_Receive_IT>
 800eba4:	4603      	mov	r3, r0
 800eba6:	e000      	b.n	800ebaa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eba8:	2302      	movs	r3, #2
  }
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3728      	adds	r7, #40	; 0x28
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	58000c00 	.word	0x58000c00

0800ebb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b0ba      	sub	sp, #232	; 0xe8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	69db      	ldr	r3, [r3, #28]
 800ebc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ebde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ebe2:	f640 030f 	movw	r3, #2063	; 0x80f
 800ebe6:	4013      	ands	r3, r2
 800ebe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ebec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d11b      	bne.n	800ec2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ebf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebf8:	f003 0320 	and.w	r3, r3, #32
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d015      	beq.n	800ec2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec04:	f003 0320 	and.w	r3, r3, #32
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d105      	bne.n	800ec18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d009      	beq.n	800ec2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 8377 	beq.w	800f310 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	4798      	blx	r3
      }
      return;
 800ec2a:	e371      	b.n	800f310 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ec2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f000 8123 	beq.w	800ee7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ec36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ec3a:	4b8d      	ldr	r3, [pc, #564]	; (800ee70 <HAL_UART_IRQHandler+0x2b8>)
 800ec3c:	4013      	ands	r3, r2
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d106      	bne.n	800ec50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ec42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ec46:	4b8b      	ldr	r3, [pc, #556]	; (800ee74 <HAL_UART_IRQHandler+0x2bc>)
 800ec48:	4013      	ands	r3, r2
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 8116 	beq.w	800ee7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec54:	f003 0301 	and.w	r3, r3, #1
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d011      	beq.n	800ec80 <HAL_UART_IRQHandler+0xc8>
 800ec5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00b      	beq.n	800ec80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec76:	f043 0201 	orr.w	r2, r3, #1
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec84:	f003 0302 	and.w	r3, r3, #2
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d011      	beq.n	800ecb0 <HAL_UART_IRQHandler+0xf8>
 800ec8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d00b      	beq.n	800ecb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eca6:	f043 0204 	orr.w	r2, r3, #4
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d011      	beq.n	800ece0 <HAL_UART_IRQHandler+0x128>
 800ecbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecc0:	f003 0301 	and.w	r3, r3, #1
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00b      	beq.n	800ece0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2204      	movs	r2, #4
 800ecce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecd6:	f043 0202 	orr.w	r2, r3, #2
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ece0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ece4:	f003 0308 	and.w	r3, r3, #8
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d017      	beq.n	800ed1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ecec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecf0:	f003 0320 	and.w	r3, r3, #32
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d105      	bne.n	800ed04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ecf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ecfc:	4b5c      	ldr	r3, [pc, #368]	; (800ee70 <HAL_UART_IRQHandler+0x2b8>)
 800ecfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00b      	beq.n	800ed1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2208      	movs	r2, #8
 800ed0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed12:	f043 0208 	orr.w	r2, r3, #8
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d012      	beq.n	800ed4e <HAL_UART_IRQHandler+0x196>
 800ed28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00c      	beq.n	800ed4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed44:	f043 0220 	orr.w	r2, r3, #32
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f000 82dd 	beq.w	800f314 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed5e:	f003 0320 	and.w	r3, r3, #32
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d013      	beq.n	800ed8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed6a:	f003 0320 	and.w	r3, r3, #32
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d105      	bne.n	800ed7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d007      	beq.n	800ed8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda2:	2b40      	cmp	r3, #64	; 0x40
 800eda4:	d005      	beq.n	800edb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eda6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800edaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d054      	beq.n	800ee5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f001 fb1e 	bl	80103f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edc2:	2b40      	cmp	r3, #64	; 0x40
 800edc4:	d146      	bne.n	800ee54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3308      	adds	r3, #8
 800edcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800edd4:	e853 3f00 	ldrex	r3, [r3]
 800edd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ede0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ede4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	3308      	adds	r3, #8
 800edee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800edf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800edf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800edfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee02:	e841 2300 	strex	r3, r2, [r1]
 800ee06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1d9      	bne.n	800edc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d017      	beq.n	800ee4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee22:	4a15      	ldr	r2, [pc, #84]	; (800ee78 <HAL_UART_IRQHandler+0x2c0>)
 800ee24:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f7 fdd5 	bl	80069dc <HAL_DMA_Abort_IT>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d019      	beq.n	800ee6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ee46:	4610      	mov	r0, r2
 800ee48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee4a:	e00f      	b.n	800ee6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fa77 	bl	800f340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee52:	e00b      	b.n	800ee6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 fa73 	bl	800f340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee5a:	e007      	b.n	800ee6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 fa6f 	bl	800f340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ee6a:	e253      	b.n	800f314 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee6c:	bf00      	nop
    return;
 800ee6e:	e251      	b.n	800f314 <HAL_UART_IRQHandler+0x75c>
 800ee70:	10000001 	.word	0x10000001
 800ee74:	04000120 	.word	0x04000120
 800ee78:	080104c1 	.word	0x080104c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	f040 81e7 	bne.w	800f254 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ee86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee8a:	f003 0310 	and.w	r3, r3, #16
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f000 81e0 	beq.w	800f254 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ee94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee98:	f003 0310 	and.w	r3, r3, #16
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 81d9 	beq.w	800f254 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2210      	movs	r2, #16
 800eea8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeb4:	2b40      	cmp	r3, #64	; 0x40
 800eeb6:	f040 8151 	bne.w	800f15c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a96      	ldr	r2, [pc, #600]	; (800f11c <HAL_UART_IRQHandler+0x564>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d068      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a93      	ldr	r2, [pc, #588]	; (800f120 <HAL_UART_IRQHandler+0x568>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d061      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a91      	ldr	r2, [pc, #580]	; (800f124 <HAL_UART_IRQHandler+0x56c>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d05a      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a8e      	ldr	r2, [pc, #568]	; (800f128 <HAL_UART_IRQHandler+0x570>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d053      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a8c      	ldr	r2, [pc, #560]	; (800f12c <HAL_UART_IRQHandler+0x574>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d04c      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4a89      	ldr	r2, [pc, #548]	; (800f130 <HAL_UART_IRQHandler+0x578>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d045      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a87      	ldr	r2, [pc, #540]	; (800f134 <HAL_UART_IRQHandler+0x57c>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d03e      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a84      	ldr	r2, [pc, #528]	; (800f138 <HAL_UART_IRQHandler+0x580>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d037      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a82      	ldr	r2, [pc, #520]	; (800f13c <HAL_UART_IRQHandler+0x584>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d030      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a7f      	ldr	r2, [pc, #508]	; (800f140 <HAL_UART_IRQHandler+0x588>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d029      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a7d      	ldr	r2, [pc, #500]	; (800f144 <HAL_UART_IRQHandler+0x58c>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d022      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a7a      	ldr	r2, [pc, #488]	; (800f148 <HAL_UART_IRQHandler+0x590>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d01b      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a78      	ldr	r2, [pc, #480]	; (800f14c <HAL_UART_IRQHandler+0x594>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d014      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4a75      	ldr	r2, [pc, #468]	; (800f150 <HAL_UART_IRQHandler+0x598>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00d      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a73      	ldr	r2, [pc, #460]	; (800f154 <HAL_UART_IRQHandler+0x59c>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d006      	beq.n	800ef9a <HAL_UART_IRQHandler+0x3e2>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a70      	ldr	r2, [pc, #448]	; (800f158 <HAL_UART_IRQHandler+0x5a0>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d106      	bne.n	800efa8 <HAL_UART_IRQHandler+0x3f0>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	e005      	b.n	800efb4 <HAL_UART_IRQHandler+0x3fc>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800efb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f000 81ab 	beq.w	800f318 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efcc:	429a      	cmp	r2, r3
 800efce:	f080 81a3 	bcs.w	800f318 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800efd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe2:	69db      	ldr	r3, [r3, #28]
 800efe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efe8:	f000 8087 	beq.w	800f0fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eff8:	e853 3f00 	ldrex	r3, [r3]
 800effc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	461a      	mov	r2, r3
 800f012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f01a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f01e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f026:	e841 2300 	strex	r3, r2, [r1]
 800f02a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f02e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1da      	bne.n	800efec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	3308      	adds	r3, #8
 800f03c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f040:	e853 3f00 	ldrex	r3, [r3]
 800f044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f048:	f023 0301 	bic.w	r3, r3, #1
 800f04c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3308      	adds	r3, #8
 800f056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f05a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f05e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f066:	e841 2300 	strex	r3, r2, [r1]
 800f06a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1e1      	bne.n	800f036 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3308      	adds	r3, #8
 800f078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f07c:	e853 3f00 	ldrex	r3, [r3]
 800f080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3308      	adds	r3, #8
 800f092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f096:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f09c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f09e:	e841 2300 	strex	r3, r2, [r1]
 800f0a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1e3      	bne.n	800f072 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2220      	movs	r2, #32
 800f0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0c8:	f023 0310 	bic.w	r3, r3, #16
 800f0cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0da:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0e2:	e841 2300 	strex	r3, r2, [r1]
 800f0e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1e4      	bne.n	800f0b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f7 f953 	bl	80063a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	b29b      	uxth	r3, r3
 800f112:	4619      	mov	r1, r3
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f91d 	bl	800f354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f11a:	e0fd      	b.n	800f318 <HAL_UART_IRQHandler+0x760>
 800f11c:	40020010 	.word	0x40020010
 800f120:	40020028 	.word	0x40020028
 800f124:	40020040 	.word	0x40020040
 800f128:	40020058 	.word	0x40020058
 800f12c:	40020070 	.word	0x40020070
 800f130:	40020088 	.word	0x40020088
 800f134:	400200a0 	.word	0x400200a0
 800f138:	400200b8 	.word	0x400200b8
 800f13c:	40020410 	.word	0x40020410
 800f140:	40020428 	.word	0x40020428
 800f144:	40020440 	.word	0x40020440
 800f148:	40020458 	.word	0x40020458
 800f14c:	40020470 	.word	0x40020470
 800f150:	40020488 	.word	0x40020488
 800f154:	400204a0 	.word	0x400204a0
 800f158:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f168:	b29b      	uxth	r3, r3
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f176:	b29b      	uxth	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 80cf 	beq.w	800f31c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f17e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 80ca 	beq.w	800f31c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f190:	e853 3f00 	ldrex	r3, [r3]
 800f194:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f19c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f1ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1b2:	e841 2300 	strex	r3, r2, [r1]
 800f1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1e4      	bne.n	800f188 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	e853 3f00 	ldrex	r3, [r3]
 800f1cc:	623b      	str	r3, [r7, #32]
   return(result);
 800f1ce:	6a3a      	ldr	r2, [r7, #32]
 800f1d0:	4b55      	ldr	r3, [pc, #340]	; (800f328 <HAL_UART_IRQHandler+0x770>)
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3308      	adds	r3, #8
 800f1de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f1e2:	633a      	str	r2, [r7, #48]	; 0x30
 800f1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ea:	e841 2300 	strex	r3, r2, [r1]
 800f1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e3      	bne.n	800f1be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2220      	movs	r2, #32
 800f1fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	e853 3f00 	ldrex	r3, [r3]
 800f216:	60fb      	str	r3, [r7, #12]
   return(result);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f023 0310 	bic.w	r3, r3, #16
 800f21e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	461a      	mov	r2, r3
 800f228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f22c:	61fb      	str	r3, [r7, #28]
 800f22e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f230:	69b9      	ldr	r1, [r7, #24]
 800f232:	69fa      	ldr	r2, [r7, #28]
 800f234:	e841 2300 	strex	r3, r2, [r1]
 800f238:	617b      	str	r3, [r7, #20]
   return(result);
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1e4      	bne.n	800f20a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2202      	movs	r2, #2
 800f244:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f24a:	4619      	mov	r1, r3
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f881 	bl	800f354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f252:	e063      	b.n	800f31c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00e      	beq.n	800f27e <HAL_UART_IRQHandler+0x6c6>
 800f260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d008      	beq.n	800f27e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f001 fe80 	bl	8010f7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f27c:	e051      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f286:	2b00      	cmp	r3, #0
 800f288:	d014      	beq.n	800f2b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f292:	2b00      	cmp	r3, #0
 800f294:	d105      	bne.n	800f2a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f29a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d008      	beq.n	800f2b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d03a      	beq.n	800f320 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	4798      	blx	r3
    }
    return;
 800f2b2:	e035      	b.n	800f320 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d009      	beq.n	800f2d4 <HAL_UART_IRQHandler+0x71c>
 800f2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d003      	beq.n	800f2d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f001 f90d 	bl	80104ec <UART_EndTransmit_IT>
    return;
 800f2d2:	e026      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d009      	beq.n	800f2f4 <HAL_UART_IRQHandler+0x73c>
 800f2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d003      	beq.n	800f2f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f001 fe59 	bl	8010fa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2f2:	e016      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d010      	beq.n	800f322 <HAL_UART_IRQHandler+0x76a>
 800f300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f304:	2b00      	cmp	r3, #0
 800f306:	da0c      	bge.n	800f322 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f001 fe41 	bl	8010f90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f30e:	e008      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
      return;
 800f310:	bf00      	nop
 800f312:	e006      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
    return;
 800f314:	bf00      	nop
 800f316:	e004      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
      return;
 800f318:	bf00      	nop
 800f31a:	e002      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
      return;
 800f31c:	bf00      	nop
 800f31e:	e000      	b.n	800f322 <HAL_UART_IRQHandler+0x76a>
    return;
 800f320:	bf00      	nop
  }
}
 800f322:	37e8      	adds	r7, #232	; 0xe8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	effffffe 	.word	0xeffffffe

0800f32c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f36c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f370:	b092      	sub	sp, #72	; 0x48
 800f372:	af00      	add	r7, sp, #0
 800f374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	689a      	ldr	r2, [r3, #8]
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	431a      	orrs	r2, r3
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	695b      	ldr	r3, [r3, #20]
 800f38a:	431a      	orrs	r2, r3
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	69db      	ldr	r3, [r3, #28]
 800f390:	4313      	orrs	r3, r2
 800f392:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4bbe      	ldr	r3, [pc, #760]	; (800f694 <UART_SetConfig+0x328>)
 800f39c:	4013      	ands	r3, r2
 800f39e:	697a      	ldr	r2, [r7, #20]
 800f3a0:	6812      	ldr	r2, [r2, #0]
 800f3a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3a4:	430b      	orrs	r3, r1
 800f3a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	68da      	ldr	r2, [r3, #12]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	430a      	orrs	r2, r1
 800f3bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4ab3      	ldr	r2, [pc, #716]	; (800f698 <UART_SetConfig+0x32c>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d004      	beq.n	800f3d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	689a      	ldr	r2, [r3, #8]
 800f3de:	4baf      	ldr	r3, [pc, #700]	; (800f69c <UART_SetConfig+0x330>)
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	6812      	ldr	r2, [r2, #0]
 800f3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3e8:	430b      	orrs	r3, r1
 800f3ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f2:	f023 010f 	bic.w	r1, r3, #15
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	430a      	orrs	r2, r1
 800f400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4aa6      	ldr	r2, [pc, #664]	; (800f6a0 <UART_SetConfig+0x334>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d177      	bne.n	800f4fc <UART_SetConfig+0x190>
 800f40c:	4ba5      	ldr	r3, [pc, #660]	; (800f6a4 <UART_SetConfig+0x338>)
 800f40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f414:	2b28      	cmp	r3, #40	; 0x28
 800f416:	d86d      	bhi.n	800f4f4 <UART_SetConfig+0x188>
 800f418:	a201      	add	r2, pc, #4	; (adr r2, 800f420 <UART_SetConfig+0xb4>)
 800f41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41e:	bf00      	nop
 800f420:	0800f4c5 	.word	0x0800f4c5
 800f424:	0800f4f5 	.word	0x0800f4f5
 800f428:	0800f4f5 	.word	0x0800f4f5
 800f42c:	0800f4f5 	.word	0x0800f4f5
 800f430:	0800f4f5 	.word	0x0800f4f5
 800f434:	0800f4f5 	.word	0x0800f4f5
 800f438:	0800f4f5 	.word	0x0800f4f5
 800f43c:	0800f4f5 	.word	0x0800f4f5
 800f440:	0800f4cd 	.word	0x0800f4cd
 800f444:	0800f4f5 	.word	0x0800f4f5
 800f448:	0800f4f5 	.word	0x0800f4f5
 800f44c:	0800f4f5 	.word	0x0800f4f5
 800f450:	0800f4f5 	.word	0x0800f4f5
 800f454:	0800f4f5 	.word	0x0800f4f5
 800f458:	0800f4f5 	.word	0x0800f4f5
 800f45c:	0800f4f5 	.word	0x0800f4f5
 800f460:	0800f4d5 	.word	0x0800f4d5
 800f464:	0800f4f5 	.word	0x0800f4f5
 800f468:	0800f4f5 	.word	0x0800f4f5
 800f46c:	0800f4f5 	.word	0x0800f4f5
 800f470:	0800f4f5 	.word	0x0800f4f5
 800f474:	0800f4f5 	.word	0x0800f4f5
 800f478:	0800f4f5 	.word	0x0800f4f5
 800f47c:	0800f4f5 	.word	0x0800f4f5
 800f480:	0800f4dd 	.word	0x0800f4dd
 800f484:	0800f4f5 	.word	0x0800f4f5
 800f488:	0800f4f5 	.word	0x0800f4f5
 800f48c:	0800f4f5 	.word	0x0800f4f5
 800f490:	0800f4f5 	.word	0x0800f4f5
 800f494:	0800f4f5 	.word	0x0800f4f5
 800f498:	0800f4f5 	.word	0x0800f4f5
 800f49c:	0800f4f5 	.word	0x0800f4f5
 800f4a0:	0800f4e5 	.word	0x0800f4e5
 800f4a4:	0800f4f5 	.word	0x0800f4f5
 800f4a8:	0800f4f5 	.word	0x0800f4f5
 800f4ac:	0800f4f5 	.word	0x0800f4f5
 800f4b0:	0800f4f5 	.word	0x0800f4f5
 800f4b4:	0800f4f5 	.word	0x0800f4f5
 800f4b8:	0800f4f5 	.word	0x0800f4f5
 800f4bc:	0800f4f5 	.word	0x0800f4f5
 800f4c0:	0800f4ed 	.word	0x0800f4ed
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ca:	e222      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4cc:	2304      	movs	r3, #4
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d2:	e21e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4d4:	2308      	movs	r3, #8
 800f4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4da:	e21a      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4dc:	2310      	movs	r3, #16
 800f4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e2:	e216      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4e4:	2320      	movs	r3, #32
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ea:	e212      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4ec:	2340      	movs	r3, #64	; 0x40
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4f2:	e20e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4f4:	2380      	movs	r3, #128	; 0x80
 800f4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fa:	e20a      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a69      	ldr	r2, [pc, #420]	; (800f6a8 <UART_SetConfig+0x33c>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d130      	bne.n	800f568 <UART_SetConfig+0x1fc>
 800f506:	4b67      	ldr	r3, [pc, #412]	; (800f6a4 <UART_SetConfig+0x338>)
 800f508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f50a:	f003 0307 	and.w	r3, r3, #7
 800f50e:	2b05      	cmp	r3, #5
 800f510:	d826      	bhi.n	800f560 <UART_SetConfig+0x1f4>
 800f512:	a201      	add	r2, pc, #4	; (adr r2, 800f518 <UART_SetConfig+0x1ac>)
 800f514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f518:	0800f531 	.word	0x0800f531
 800f51c:	0800f539 	.word	0x0800f539
 800f520:	0800f541 	.word	0x0800f541
 800f524:	0800f549 	.word	0x0800f549
 800f528:	0800f551 	.word	0x0800f551
 800f52c:	0800f559 	.word	0x0800f559
 800f530:	2300      	movs	r3, #0
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f536:	e1ec      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f538:	2304      	movs	r3, #4
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e1e8      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f540:	2308      	movs	r3, #8
 800f542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f546:	e1e4      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f548:	2310      	movs	r3, #16
 800f54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f54e:	e1e0      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f550:	2320      	movs	r3, #32
 800f552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f556:	e1dc      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f558:	2340      	movs	r3, #64	; 0x40
 800f55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f55e:	e1d8      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f560:	2380      	movs	r3, #128	; 0x80
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f566:	e1d4      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a4f      	ldr	r2, [pc, #316]	; (800f6ac <UART_SetConfig+0x340>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d130      	bne.n	800f5d4 <UART_SetConfig+0x268>
 800f572:	4b4c      	ldr	r3, [pc, #304]	; (800f6a4 <UART_SetConfig+0x338>)
 800f574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f576:	f003 0307 	and.w	r3, r3, #7
 800f57a:	2b05      	cmp	r3, #5
 800f57c:	d826      	bhi.n	800f5cc <UART_SetConfig+0x260>
 800f57e:	a201      	add	r2, pc, #4	; (adr r2, 800f584 <UART_SetConfig+0x218>)
 800f580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f584:	0800f59d 	.word	0x0800f59d
 800f588:	0800f5a5 	.word	0x0800f5a5
 800f58c:	0800f5ad 	.word	0x0800f5ad
 800f590:	0800f5b5 	.word	0x0800f5b5
 800f594:	0800f5bd 	.word	0x0800f5bd
 800f598:	0800f5c5 	.word	0x0800f5c5
 800f59c:	2300      	movs	r3, #0
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a2:	e1b6      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5a4:	2304      	movs	r3, #4
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e1b2      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5ac:	2308      	movs	r3, #8
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5b2:	e1ae      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5b4:	2310      	movs	r3, #16
 800f5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ba:	e1aa      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5bc:	2320      	movs	r3, #32
 800f5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5c2:	e1a6      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5c4:	2340      	movs	r3, #64	; 0x40
 800f5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ca:	e1a2      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5cc:	2380      	movs	r3, #128	; 0x80
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d2:	e19e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4a35      	ldr	r2, [pc, #212]	; (800f6b0 <UART_SetConfig+0x344>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d130      	bne.n	800f640 <UART_SetConfig+0x2d4>
 800f5de:	4b31      	ldr	r3, [pc, #196]	; (800f6a4 <UART_SetConfig+0x338>)
 800f5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5e2:	f003 0307 	and.w	r3, r3, #7
 800f5e6:	2b05      	cmp	r3, #5
 800f5e8:	d826      	bhi.n	800f638 <UART_SetConfig+0x2cc>
 800f5ea:	a201      	add	r2, pc, #4	; (adr r2, 800f5f0 <UART_SetConfig+0x284>)
 800f5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f0:	0800f609 	.word	0x0800f609
 800f5f4:	0800f611 	.word	0x0800f611
 800f5f8:	0800f619 	.word	0x0800f619
 800f5fc:	0800f621 	.word	0x0800f621
 800f600:	0800f629 	.word	0x0800f629
 800f604:	0800f631 	.word	0x0800f631
 800f608:	2300      	movs	r3, #0
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60e:	e180      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f610:	2304      	movs	r3, #4
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f616:	e17c      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f618:	2308      	movs	r3, #8
 800f61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f61e:	e178      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f620:	2310      	movs	r3, #16
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f626:	e174      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f628:	2320      	movs	r3, #32
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f62e:	e170      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f630:	2340      	movs	r3, #64	; 0x40
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f636:	e16c      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f638:	2380      	movs	r3, #128	; 0x80
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63e:	e168      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a1b      	ldr	r2, [pc, #108]	; (800f6b4 <UART_SetConfig+0x348>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d142      	bne.n	800f6d0 <UART_SetConfig+0x364>
 800f64a:	4b16      	ldr	r3, [pc, #88]	; (800f6a4 <UART_SetConfig+0x338>)
 800f64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64e:	f003 0307 	and.w	r3, r3, #7
 800f652:	2b05      	cmp	r3, #5
 800f654:	d838      	bhi.n	800f6c8 <UART_SetConfig+0x35c>
 800f656:	a201      	add	r2, pc, #4	; (adr r2, 800f65c <UART_SetConfig+0x2f0>)
 800f658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65c:	0800f675 	.word	0x0800f675
 800f660:	0800f67d 	.word	0x0800f67d
 800f664:	0800f685 	.word	0x0800f685
 800f668:	0800f68d 	.word	0x0800f68d
 800f66c:	0800f6b9 	.word	0x0800f6b9
 800f670:	0800f6c1 	.word	0x0800f6c1
 800f674:	2300      	movs	r3, #0
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67a:	e14a      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f67c:	2304      	movs	r3, #4
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f682:	e146      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f684:	2308      	movs	r3, #8
 800f686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68a:	e142      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f68c:	2310      	movs	r3, #16
 800f68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f692:	e13e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f694:	cfff69f3 	.word	0xcfff69f3
 800f698:	58000c00 	.word	0x58000c00
 800f69c:	11fff4ff 	.word	0x11fff4ff
 800f6a0:	40011000 	.word	0x40011000
 800f6a4:	58024400 	.word	0x58024400
 800f6a8:	40004400 	.word	0x40004400
 800f6ac:	40004800 	.word	0x40004800
 800f6b0:	40004c00 	.word	0x40004c00
 800f6b4:	40005000 	.word	0x40005000
 800f6b8:	2320      	movs	r3, #32
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6be:	e128      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f6c0:	2340      	movs	r3, #64	; 0x40
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c6:	e124      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f6c8:	2380      	movs	r3, #128	; 0x80
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ce:	e120      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4acb      	ldr	r2, [pc, #812]	; (800fa04 <UART_SetConfig+0x698>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d176      	bne.n	800f7c8 <UART_SetConfig+0x45c>
 800f6da:	4bcb      	ldr	r3, [pc, #812]	; (800fa08 <UART_SetConfig+0x69c>)
 800f6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6e2:	2b28      	cmp	r3, #40	; 0x28
 800f6e4:	d86c      	bhi.n	800f7c0 <UART_SetConfig+0x454>
 800f6e6:	a201      	add	r2, pc, #4	; (adr r2, 800f6ec <UART_SetConfig+0x380>)
 800f6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ec:	0800f791 	.word	0x0800f791
 800f6f0:	0800f7c1 	.word	0x0800f7c1
 800f6f4:	0800f7c1 	.word	0x0800f7c1
 800f6f8:	0800f7c1 	.word	0x0800f7c1
 800f6fc:	0800f7c1 	.word	0x0800f7c1
 800f700:	0800f7c1 	.word	0x0800f7c1
 800f704:	0800f7c1 	.word	0x0800f7c1
 800f708:	0800f7c1 	.word	0x0800f7c1
 800f70c:	0800f799 	.word	0x0800f799
 800f710:	0800f7c1 	.word	0x0800f7c1
 800f714:	0800f7c1 	.word	0x0800f7c1
 800f718:	0800f7c1 	.word	0x0800f7c1
 800f71c:	0800f7c1 	.word	0x0800f7c1
 800f720:	0800f7c1 	.word	0x0800f7c1
 800f724:	0800f7c1 	.word	0x0800f7c1
 800f728:	0800f7c1 	.word	0x0800f7c1
 800f72c:	0800f7a1 	.word	0x0800f7a1
 800f730:	0800f7c1 	.word	0x0800f7c1
 800f734:	0800f7c1 	.word	0x0800f7c1
 800f738:	0800f7c1 	.word	0x0800f7c1
 800f73c:	0800f7c1 	.word	0x0800f7c1
 800f740:	0800f7c1 	.word	0x0800f7c1
 800f744:	0800f7c1 	.word	0x0800f7c1
 800f748:	0800f7c1 	.word	0x0800f7c1
 800f74c:	0800f7a9 	.word	0x0800f7a9
 800f750:	0800f7c1 	.word	0x0800f7c1
 800f754:	0800f7c1 	.word	0x0800f7c1
 800f758:	0800f7c1 	.word	0x0800f7c1
 800f75c:	0800f7c1 	.word	0x0800f7c1
 800f760:	0800f7c1 	.word	0x0800f7c1
 800f764:	0800f7c1 	.word	0x0800f7c1
 800f768:	0800f7c1 	.word	0x0800f7c1
 800f76c:	0800f7b1 	.word	0x0800f7b1
 800f770:	0800f7c1 	.word	0x0800f7c1
 800f774:	0800f7c1 	.word	0x0800f7c1
 800f778:	0800f7c1 	.word	0x0800f7c1
 800f77c:	0800f7c1 	.word	0x0800f7c1
 800f780:	0800f7c1 	.word	0x0800f7c1
 800f784:	0800f7c1 	.word	0x0800f7c1
 800f788:	0800f7c1 	.word	0x0800f7c1
 800f78c:	0800f7b9 	.word	0x0800f7b9
 800f790:	2301      	movs	r3, #1
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e0bc      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f798:	2304      	movs	r3, #4
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e0b8      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a6:	e0b4      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f7a8:	2310      	movs	r3, #16
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ae:	e0b0      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f7b0:	2320      	movs	r3, #32
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b6:	e0ac      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f7b8:	2340      	movs	r3, #64	; 0x40
 800f7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7be:	e0a8      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f7c0:	2380      	movs	r3, #128	; 0x80
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c6:	e0a4      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a8f      	ldr	r2, [pc, #572]	; (800fa0c <UART_SetConfig+0x6a0>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d130      	bne.n	800f834 <UART_SetConfig+0x4c8>
 800f7d2:	4b8d      	ldr	r3, [pc, #564]	; (800fa08 <UART_SetConfig+0x69c>)
 800f7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d6:	f003 0307 	and.w	r3, r3, #7
 800f7da:	2b05      	cmp	r3, #5
 800f7dc:	d826      	bhi.n	800f82c <UART_SetConfig+0x4c0>
 800f7de:	a201      	add	r2, pc, #4	; (adr r2, 800f7e4 <UART_SetConfig+0x478>)
 800f7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e4:	0800f7fd 	.word	0x0800f7fd
 800f7e8:	0800f805 	.word	0x0800f805
 800f7ec:	0800f80d 	.word	0x0800f80d
 800f7f0:	0800f815 	.word	0x0800f815
 800f7f4:	0800f81d 	.word	0x0800f81d
 800f7f8:	0800f825 	.word	0x0800f825
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e086      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f804:	2304      	movs	r3, #4
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e082      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f80c:	2308      	movs	r3, #8
 800f80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f812:	e07e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f814:	2310      	movs	r3, #16
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81a:	e07a      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f81c:	2320      	movs	r3, #32
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f822:	e076      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f824:	2340      	movs	r3, #64	; 0x40
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82a:	e072      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f82c:	2380      	movs	r3, #128	; 0x80
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f832:	e06e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a75      	ldr	r2, [pc, #468]	; (800fa10 <UART_SetConfig+0x6a4>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d130      	bne.n	800f8a0 <UART_SetConfig+0x534>
 800f83e:	4b72      	ldr	r3, [pc, #456]	; (800fa08 <UART_SetConfig+0x69c>)
 800f840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	2b05      	cmp	r3, #5
 800f848:	d826      	bhi.n	800f898 <UART_SetConfig+0x52c>
 800f84a:	a201      	add	r2, pc, #4	; (adr r2, 800f850 <UART_SetConfig+0x4e4>)
 800f84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f850:	0800f869 	.word	0x0800f869
 800f854:	0800f871 	.word	0x0800f871
 800f858:	0800f879 	.word	0x0800f879
 800f85c:	0800f881 	.word	0x0800f881
 800f860:	0800f889 	.word	0x0800f889
 800f864:	0800f891 	.word	0x0800f891
 800f868:	2300      	movs	r3, #0
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e050      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f870:	2304      	movs	r3, #4
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e04c      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f878:	2308      	movs	r3, #8
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87e:	e048      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f880:	2310      	movs	r3, #16
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f886:	e044      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f888:	2320      	movs	r3, #32
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88e:	e040      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f890:	2340      	movs	r3, #64	; 0x40
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f896:	e03c      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f898:	2380      	movs	r3, #128	; 0x80
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89e:	e038      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a5b      	ldr	r2, [pc, #364]	; (800fa14 <UART_SetConfig+0x6a8>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d130      	bne.n	800f90c <UART_SetConfig+0x5a0>
 800f8aa:	4b57      	ldr	r3, [pc, #348]	; (800fa08 <UART_SetConfig+0x69c>)
 800f8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ae:	f003 0307 	and.w	r3, r3, #7
 800f8b2:	2b05      	cmp	r3, #5
 800f8b4:	d826      	bhi.n	800f904 <UART_SetConfig+0x598>
 800f8b6:	a201      	add	r2, pc, #4	; (adr r2, 800f8bc <UART_SetConfig+0x550>)
 800f8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8bc:	0800f8d5 	.word	0x0800f8d5
 800f8c0:	0800f8dd 	.word	0x0800f8dd
 800f8c4:	0800f8e5 	.word	0x0800f8e5
 800f8c8:	0800f8ed 	.word	0x0800f8ed
 800f8cc:	0800f8f5 	.word	0x0800f8f5
 800f8d0:	0800f8fd 	.word	0x0800f8fd
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e01a      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f8dc:	2304      	movs	r3, #4
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e016      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f8e4:	2308      	movs	r3, #8
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ea:	e012      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f2:	e00e      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f8f4:	2320      	movs	r3, #32
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fa:	e00a      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f8fc:	2340      	movs	r3, #64	; 0x40
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f902:	e006      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f904:	2380      	movs	r3, #128	; 0x80
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e002      	b.n	800f912 <UART_SetConfig+0x5a6>
 800f90c:	2380      	movs	r3, #128	; 0x80
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a3f      	ldr	r2, [pc, #252]	; (800fa14 <UART_SetConfig+0x6a8>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	f040 80f8 	bne.w	800fb0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f91e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f922:	2b20      	cmp	r3, #32
 800f924:	dc46      	bgt.n	800f9b4 <UART_SetConfig+0x648>
 800f926:	2b02      	cmp	r3, #2
 800f928:	f2c0 8082 	blt.w	800fa30 <UART_SetConfig+0x6c4>
 800f92c:	3b02      	subs	r3, #2
 800f92e:	2b1e      	cmp	r3, #30
 800f930:	d87e      	bhi.n	800fa30 <UART_SetConfig+0x6c4>
 800f932:	a201      	add	r2, pc, #4	; (adr r2, 800f938 <UART_SetConfig+0x5cc>)
 800f934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f938:	0800f9bb 	.word	0x0800f9bb
 800f93c:	0800fa31 	.word	0x0800fa31
 800f940:	0800f9c3 	.word	0x0800f9c3
 800f944:	0800fa31 	.word	0x0800fa31
 800f948:	0800fa31 	.word	0x0800fa31
 800f94c:	0800fa31 	.word	0x0800fa31
 800f950:	0800f9d3 	.word	0x0800f9d3
 800f954:	0800fa31 	.word	0x0800fa31
 800f958:	0800fa31 	.word	0x0800fa31
 800f95c:	0800fa31 	.word	0x0800fa31
 800f960:	0800fa31 	.word	0x0800fa31
 800f964:	0800fa31 	.word	0x0800fa31
 800f968:	0800fa31 	.word	0x0800fa31
 800f96c:	0800fa31 	.word	0x0800fa31
 800f970:	0800f9e3 	.word	0x0800f9e3
 800f974:	0800fa31 	.word	0x0800fa31
 800f978:	0800fa31 	.word	0x0800fa31
 800f97c:	0800fa31 	.word	0x0800fa31
 800f980:	0800fa31 	.word	0x0800fa31
 800f984:	0800fa31 	.word	0x0800fa31
 800f988:	0800fa31 	.word	0x0800fa31
 800f98c:	0800fa31 	.word	0x0800fa31
 800f990:	0800fa31 	.word	0x0800fa31
 800f994:	0800fa31 	.word	0x0800fa31
 800f998:	0800fa31 	.word	0x0800fa31
 800f99c:	0800fa31 	.word	0x0800fa31
 800f9a0:	0800fa31 	.word	0x0800fa31
 800f9a4:	0800fa31 	.word	0x0800fa31
 800f9a8:	0800fa31 	.word	0x0800fa31
 800f9ac:	0800fa31 	.word	0x0800fa31
 800f9b0:	0800fa23 	.word	0x0800fa23
 800f9b4:	2b40      	cmp	r3, #64	; 0x40
 800f9b6:	d037      	beq.n	800fa28 <UART_SetConfig+0x6bc>
 800f9b8:	e03a      	b.n	800fa30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f9ba:	f7fc f869 	bl	800ba90 <HAL_RCCEx_GetD3PCLK1Freq>
 800f9be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9c0:	e03c      	b.n	800fa3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fc f878 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9d0:	e034      	b.n	800fa3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9d2:	f107 0318 	add.w	r3, r7, #24
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fc f9c4 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e0:	e02c      	b.n	800fa3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9e2:	4b09      	ldr	r3, [pc, #36]	; (800fa08 <UART_SetConfig+0x69c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f003 0320 	and.w	r3, r3, #32
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d016      	beq.n	800fa1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9ee:	4b06      	ldr	r3, [pc, #24]	; (800fa08 <UART_SetConfig+0x69c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	08db      	lsrs	r3, r3, #3
 800f9f4:	f003 0303 	and.w	r3, r3, #3
 800f9f8:	4a07      	ldr	r2, [pc, #28]	; (800fa18 <UART_SetConfig+0x6ac>)
 800f9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa00:	e01c      	b.n	800fa3c <UART_SetConfig+0x6d0>
 800fa02:	bf00      	nop
 800fa04:	40011400 	.word	0x40011400
 800fa08:	58024400 	.word	0x58024400
 800fa0c:	40007800 	.word	0x40007800
 800fa10:	40007c00 	.word	0x40007c00
 800fa14:	58000c00 	.word	0x58000c00
 800fa18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fa1c:	4b9d      	ldr	r3, [pc, #628]	; (800fc94 <UART_SetConfig+0x928>)
 800fa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa20:	e00c      	b.n	800fa3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa22:	4b9d      	ldr	r3, [pc, #628]	; (800fc98 <UART_SetConfig+0x92c>)
 800fa24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa26:	e009      	b.n	800fa3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa2e:	e005      	b.n	800fa3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fa30:	2300      	movs	r3, #0
 800fa32:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 81de 	beq.w	800fe00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa48:	4a94      	ldr	r2, [pc, #592]	; (800fc9c <UART_SetConfig+0x930>)
 800fa4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa52:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa56:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	4413      	add	r3, r2
 800fa62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d305      	bcc.n	800fa74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d903      	bls.n	800fa7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fa74:	2301      	movs	r3, #1
 800fa76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa7a:	e1c1      	b.n	800fe00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7e:	2200      	movs	r2, #0
 800fa80:	60bb      	str	r3, [r7, #8]
 800fa82:	60fa      	str	r2, [r7, #12]
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa88:	4a84      	ldr	r2, [pc, #528]	; (800fc9c <UART_SetConfig+0x930>)
 800fa8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	2200      	movs	r2, #0
 800fa92:	603b      	str	r3, [r7, #0]
 800fa94:	607a      	str	r2, [r7, #4]
 800fa96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa9e:	f7f0 fc6f 	bl	8000380 <__aeabi_uldivmod>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	4610      	mov	r0, r2
 800faa8:	4619      	mov	r1, r3
 800faaa:	f04f 0200 	mov.w	r2, #0
 800faae:	f04f 0300 	mov.w	r3, #0
 800fab2:	020b      	lsls	r3, r1, #8
 800fab4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fab8:	0202      	lsls	r2, r0, #8
 800faba:	6979      	ldr	r1, [r7, #20]
 800fabc:	6849      	ldr	r1, [r1, #4]
 800fabe:	0849      	lsrs	r1, r1, #1
 800fac0:	2000      	movs	r0, #0
 800fac2:	460c      	mov	r4, r1
 800fac4:	4605      	mov	r5, r0
 800fac6:	eb12 0804 	adds.w	r8, r2, r4
 800faca:	eb43 0905 	adc.w	r9, r3, r5
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	469a      	mov	sl, r3
 800fad6:	4693      	mov	fp, r2
 800fad8:	4652      	mov	r2, sl
 800fada:	465b      	mov	r3, fp
 800fadc:	4640      	mov	r0, r8
 800fade:	4649      	mov	r1, r9
 800fae0:	f7f0 fc4e 	bl	8000380 <__aeabi_uldivmod>
 800fae4:	4602      	mov	r2, r0
 800fae6:	460b      	mov	r3, r1
 800fae8:	4613      	mov	r3, r2
 800faea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800faf2:	d308      	bcc.n	800fb06 <UART_SetConfig+0x79a>
 800faf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fafa:	d204      	bcs.n	800fb06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb02:	60da      	str	r2, [r3, #12]
 800fb04:	e17c      	b.n	800fe00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb0c:	e178      	b.n	800fe00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb16:	f040 80c5 	bne.w	800fca4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fb1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb1e:	2b20      	cmp	r3, #32
 800fb20:	dc48      	bgt.n	800fbb4 <UART_SetConfig+0x848>
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	db7b      	blt.n	800fc1e <UART_SetConfig+0x8b2>
 800fb26:	2b20      	cmp	r3, #32
 800fb28:	d879      	bhi.n	800fc1e <UART_SetConfig+0x8b2>
 800fb2a:	a201      	add	r2, pc, #4	; (adr r2, 800fb30 <UART_SetConfig+0x7c4>)
 800fb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb30:	0800fbbb 	.word	0x0800fbbb
 800fb34:	0800fbc3 	.word	0x0800fbc3
 800fb38:	0800fc1f 	.word	0x0800fc1f
 800fb3c:	0800fc1f 	.word	0x0800fc1f
 800fb40:	0800fbcb 	.word	0x0800fbcb
 800fb44:	0800fc1f 	.word	0x0800fc1f
 800fb48:	0800fc1f 	.word	0x0800fc1f
 800fb4c:	0800fc1f 	.word	0x0800fc1f
 800fb50:	0800fbdb 	.word	0x0800fbdb
 800fb54:	0800fc1f 	.word	0x0800fc1f
 800fb58:	0800fc1f 	.word	0x0800fc1f
 800fb5c:	0800fc1f 	.word	0x0800fc1f
 800fb60:	0800fc1f 	.word	0x0800fc1f
 800fb64:	0800fc1f 	.word	0x0800fc1f
 800fb68:	0800fc1f 	.word	0x0800fc1f
 800fb6c:	0800fc1f 	.word	0x0800fc1f
 800fb70:	0800fbeb 	.word	0x0800fbeb
 800fb74:	0800fc1f 	.word	0x0800fc1f
 800fb78:	0800fc1f 	.word	0x0800fc1f
 800fb7c:	0800fc1f 	.word	0x0800fc1f
 800fb80:	0800fc1f 	.word	0x0800fc1f
 800fb84:	0800fc1f 	.word	0x0800fc1f
 800fb88:	0800fc1f 	.word	0x0800fc1f
 800fb8c:	0800fc1f 	.word	0x0800fc1f
 800fb90:	0800fc1f 	.word	0x0800fc1f
 800fb94:	0800fc1f 	.word	0x0800fc1f
 800fb98:	0800fc1f 	.word	0x0800fc1f
 800fb9c:	0800fc1f 	.word	0x0800fc1f
 800fba0:	0800fc1f 	.word	0x0800fc1f
 800fba4:	0800fc1f 	.word	0x0800fc1f
 800fba8:	0800fc1f 	.word	0x0800fc1f
 800fbac:	0800fc1f 	.word	0x0800fc1f
 800fbb0:	0800fc11 	.word	0x0800fc11
 800fbb4:	2b40      	cmp	r3, #64	; 0x40
 800fbb6:	d02e      	beq.n	800fc16 <UART_SetConfig+0x8aa>
 800fbb8:	e031      	b.n	800fc1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbba:	f7f9 ff71 	bl	8009aa0 <HAL_RCC_GetPCLK1Freq>
 800fbbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fbc0:	e033      	b.n	800fc2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbc2:	f7f9 ff83 	bl	8009acc <HAL_RCC_GetPCLK2Freq>
 800fbc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fbc8:	e02f      	b.n	800fc2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fb ff74 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbd8:	e027      	b.n	800fc2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbda:	f107 0318 	add.w	r3, r7, #24
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fc f8c0 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbe8:	e01f      	b.n	800fc2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbea:	4b2d      	ldr	r3, [pc, #180]	; (800fca0 <UART_SetConfig+0x934>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0320 	and.w	r3, r3, #32
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d009      	beq.n	800fc0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbf6:	4b2a      	ldr	r3, [pc, #168]	; (800fca0 <UART_SetConfig+0x934>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	08db      	lsrs	r3, r3, #3
 800fbfc:	f003 0303 	and.w	r3, r3, #3
 800fc00:	4a24      	ldr	r2, [pc, #144]	; (800fc94 <UART_SetConfig+0x928>)
 800fc02:	fa22 f303 	lsr.w	r3, r2, r3
 800fc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc08:	e00f      	b.n	800fc2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc0a:	4b22      	ldr	r3, [pc, #136]	; (800fc94 <UART_SetConfig+0x928>)
 800fc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc0e:	e00c      	b.n	800fc2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc10:	4b21      	ldr	r3, [pc, #132]	; (800fc98 <UART_SetConfig+0x92c>)
 800fc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc14:	e009      	b.n	800fc2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc1c:	e005      	b.n	800fc2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f000 80e7 	beq.w	800fe00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc36:	4a19      	ldr	r2, [pc, #100]	; (800fc9c <UART_SetConfig+0x930>)
 800fc38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc40:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc44:	005a      	lsls	r2, r3, #1
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	085b      	lsrs	r3, r3, #1
 800fc4c:	441a      	add	r2, r3
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5a:	2b0f      	cmp	r3, #15
 800fc5c:	d916      	bls.n	800fc8c <UART_SetConfig+0x920>
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc64:	d212      	bcs.n	800fc8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	f023 030f 	bic.w	r3, r3, #15
 800fc6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc72:	085b      	lsrs	r3, r3, #1
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc88:	60da      	str	r2, [r3, #12]
 800fc8a:	e0b9      	b.n	800fe00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc92:	e0b5      	b.n	800fe00 <UART_SetConfig+0xa94>
 800fc94:	03d09000 	.word	0x03d09000
 800fc98:	003d0900 	.word	0x003d0900
 800fc9c:	08015d04 	.word	0x08015d04
 800fca0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fca4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fca8:	2b20      	cmp	r3, #32
 800fcaa:	dc49      	bgt.n	800fd40 <UART_SetConfig+0x9d4>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	db7c      	blt.n	800fdaa <UART_SetConfig+0xa3e>
 800fcb0:	2b20      	cmp	r3, #32
 800fcb2:	d87a      	bhi.n	800fdaa <UART_SetConfig+0xa3e>
 800fcb4:	a201      	add	r2, pc, #4	; (adr r2, 800fcbc <UART_SetConfig+0x950>)
 800fcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcba:	bf00      	nop
 800fcbc:	0800fd47 	.word	0x0800fd47
 800fcc0:	0800fd4f 	.word	0x0800fd4f
 800fcc4:	0800fdab 	.word	0x0800fdab
 800fcc8:	0800fdab 	.word	0x0800fdab
 800fccc:	0800fd57 	.word	0x0800fd57
 800fcd0:	0800fdab 	.word	0x0800fdab
 800fcd4:	0800fdab 	.word	0x0800fdab
 800fcd8:	0800fdab 	.word	0x0800fdab
 800fcdc:	0800fd67 	.word	0x0800fd67
 800fce0:	0800fdab 	.word	0x0800fdab
 800fce4:	0800fdab 	.word	0x0800fdab
 800fce8:	0800fdab 	.word	0x0800fdab
 800fcec:	0800fdab 	.word	0x0800fdab
 800fcf0:	0800fdab 	.word	0x0800fdab
 800fcf4:	0800fdab 	.word	0x0800fdab
 800fcf8:	0800fdab 	.word	0x0800fdab
 800fcfc:	0800fd77 	.word	0x0800fd77
 800fd00:	0800fdab 	.word	0x0800fdab
 800fd04:	0800fdab 	.word	0x0800fdab
 800fd08:	0800fdab 	.word	0x0800fdab
 800fd0c:	0800fdab 	.word	0x0800fdab
 800fd10:	0800fdab 	.word	0x0800fdab
 800fd14:	0800fdab 	.word	0x0800fdab
 800fd18:	0800fdab 	.word	0x0800fdab
 800fd1c:	0800fdab 	.word	0x0800fdab
 800fd20:	0800fdab 	.word	0x0800fdab
 800fd24:	0800fdab 	.word	0x0800fdab
 800fd28:	0800fdab 	.word	0x0800fdab
 800fd2c:	0800fdab 	.word	0x0800fdab
 800fd30:	0800fdab 	.word	0x0800fdab
 800fd34:	0800fdab 	.word	0x0800fdab
 800fd38:	0800fdab 	.word	0x0800fdab
 800fd3c:	0800fd9d 	.word	0x0800fd9d
 800fd40:	2b40      	cmp	r3, #64	; 0x40
 800fd42:	d02e      	beq.n	800fda2 <UART_SetConfig+0xa36>
 800fd44:	e031      	b.n	800fdaa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd46:	f7f9 feab 	bl	8009aa0 <HAL_RCC_GetPCLK1Freq>
 800fd4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd4c:	e033      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd4e:	f7f9 febd 	bl	8009acc <HAL_RCC_GetPCLK2Freq>
 800fd52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd54:	e02f      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fb feae 	bl	800babc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd64:	e027      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd66:	f107 0318 	add.w	r3, r7, #24
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fb fffa 	bl	800bd64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd74:	e01f      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd76:	4b2d      	ldr	r3, [pc, #180]	; (800fe2c <UART_SetConfig+0xac0>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f003 0320 	and.w	r3, r3, #32
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d009      	beq.n	800fd96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd82:	4b2a      	ldr	r3, [pc, #168]	; (800fe2c <UART_SetConfig+0xac0>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	08db      	lsrs	r3, r3, #3
 800fd88:	f003 0303 	and.w	r3, r3, #3
 800fd8c:	4a28      	ldr	r2, [pc, #160]	; (800fe30 <UART_SetConfig+0xac4>)
 800fd8e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd94:	e00f      	b.n	800fdb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fd96:	4b26      	ldr	r3, [pc, #152]	; (800fe30 <UART_SetConfig+0xac4>)
 800fd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd9a:	e00c      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd9c:	4b25      	ldr	r3, [pc, #148]	; (800fe34 <UART_SetConfig+0xac8>)
 800fd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fda0:	e009      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fda2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fda8:	e005      	b.n	800fdb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fdb4:	bf00      	nop
    }

    if (pclk != 0U)
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d021      	beq.n	800fe00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc0:	4a1d      	ldr	r2, [pc, #116]	; (800fe38 <UART_SetConfig+0xacc>)
 800fdc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdca:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	085b      	lsrs	r3, r3, #1
 800fdd4:	441a      	add	r2, r3
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	2b0f      	cmp	r3, #15
 800fde4:	d909      	bls.n	800fdfa <UART_SetConfig+0xa8e>
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdec:	d205      	bcs.n	800fdfa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	60da      	str	r2, [r3, #12]
 800fdf8:	e002      	b.n	800fe00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	2201      	movs	r2, #1
 800fe04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	2200      	movs	r2, #0
 800fe14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fe1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3748      	adds	r7, #72	; 0x48
 800fe24:	46bd      	mov	sp, r7
 800fe26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe2a:	bf00      	nop
 800fe2c:	58024400 	.word	0x58024400
 800fe30:	03d09000 	.word	0x03d09000
 800fe34:	003d0900 	.word	0x003d0900
 800fe38:	08015d04 	.word	0x08015d04

0800fe3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe48:	f003 0308 	and.w	r3, r3, #8
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00a      	beq.n	800fe66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	430a      	orrs	r2, r1
 800fe64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00a      	beq.n	800fe88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	430a      	orrs	r2, r1
 800fe86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00a      	beq.n	800feaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	430a      	orrs	r2, r1
 800fea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feae:	f003 0304 	and.w	r3, r3, #4
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00a      	beq.n	800fecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	430a      	orrs	r2, r1
 800feca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed0:	f003 0310 	and.w	r3, r3, #16
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00a      	beq.n	800feee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	430a      	orrs	r2, r1
 800feec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef2:	f003 0320 	and.w	r3, r3, #32
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00a      	beq.n	800ff10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	430a      	orrs	r2, r1
 800ff0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d01a      	beq.n	800ff52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	430a      	orrs	r2, r1
 800ff30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff3a:	d10a      	bne.n	800ff52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d00a      	beq.n	800ff74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	430a      	orrs	r2, r1
 800ff72:	605a      	str	r2, [r3, #4]
  }
}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b098      	sub	sp, #96	; 0x60
 800ff84:	af02      	add	r7, sp, #8
 800ff86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff90:	f7f3 fb18 	bl	80035c4 <HAL_GetTick>
 800ff94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f003 0308 	and.w	r3, r3, #8
 800ffa0:	2b08      	cmp	r3, #8
 800ffa2:	d12f      	bne.n	8010004 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffac:	2200      	movs	r2, #0
 800ffae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f88e 	bl	80100d4 <UART_WaitOnFlagUntilTimeout>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d022      	beq.n	8010004 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc6:	e853 3f00 	ldrex	r3, [r3]
 800ffca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffd2:	653b      	str	r3, [r7, #80]	; 0x50
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffdc:	647b      	str	r3, [r7, #68]	; 0x44
 800ffde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffe4:	e841 2300 	strex	r3, r2, [r1]
 800ffe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1e6      	bne.n	800ffbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2220      	movs	r2, #32
 800fff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010000:	2303      	movs	r3, #3
 8010002:	e063      	b.n	80100cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f003 0304 	and.w	r3, r3, #4
 801000e:	2b04      	cmp	r3, #4
 8010010:	d149      	bne.n	80100a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010012:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801001a:	2200      	movs	r2, #0
 801001c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f857 	bl	80100d4 <UART_WaitOnFlagUntilTimeout>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d03c      	beq.n	80100a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010034:	e853 3f00 	ldrex	r3, [r3]
 8010038:	623b      	str	r3, [r7, #32]
   return(result);
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	461a      	mov	r2, r3
 8010048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801004a:	633b      	str	r3, [r7, #48]	; 0x30
 801004c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801004e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010052:	e841 2300 	strex	r3, r2, [r1]
 8010056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1e6      	bne.n	801002c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	3308      	adds	r3, #8
 8010064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	e853 3f00 	ldrex	r3, [r3]
 801006c:	60fb      	str	r3, [r7, #12]
   return(result);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f023 0301 	bic.w	r3, r3, #1
 8010074:	64bb      	str	r3, [r7, #72]	; 0x48
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	3308      	adds	r3, #8
 801007c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801007e:	61fa      	str	r2, [r7, #28]
 8010080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010082:	69b9      	ldr	r1, [r7, #24]
 8010084:	69fa      	ldr	r2, [r7, #28]
 8010086:	e841 2300 	strex	r3, r2, [r1]
 801008a:	617b      	str	r3, [r7, #20]
   return(result);
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1e5      	bne.n	801005e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2220      	movs	r2, #32
 8010096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80100a2:	2303      	movs	r3, #3
 80100a4:	e012      	b.n	80100cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2220      	movs	r2, #32
 80100aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2220      	movs	r2, #32
 80100b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3758      	adds	r7, #88	; 0x58
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	603b      	str	r3, [r7, #0]
 80100e0:	4613      	mov	r3, r2
 80100e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100e4:	e04f      	b.n	8010186 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100ec:	d04b      	beq.n	8010186 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100ee:	f7f3 fa69 	bl	80035c4 <HAL_GetTick>
 80100f2:	4602      	mov	r2, r0
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	69ba      	ldr	r2, [r7, #24]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d302      	bcc.n	8010104 <UART_WaitOnFlagUntilTimeout+0x30>
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d101      	bne.n	8010108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010104:	2303      	movs	r3, #3
 8010106:	e04e      	b.n	80101a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f003 0304 	and.w	r3, r3, #4
 8010112:	2b00      	cmp	r3, #0
 8010114:	d037      	beq.n	8010186 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	2b80      	cmp	r3, #128	; 0x80
 801011a:	d034      	beq.n	8010186 <UART_WaitOnFlagUntilTimeout+0xb2>
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	2b40      	cmp	r3, #64	; 0x40
 8010120:	d031      	beq.n	8010186 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	69db      	ldr	r3, [r3, #28]
 8010128:	f003 0308 	and.w	r3, r3, #8
 801012c:	2b08      	cmp	r3, #8
 801012e:	d110      	bne.n	8010152 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2208      	movs	r2, #8
 8010136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f000 f95b 	bl	80103f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2208      	movs	r2, #8
 8010142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	e029      	b.n	80101a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69db      	ldr	r3, [r3, #28]
 8010158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801015c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010160:	d111      	bne.n	8010186 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801016a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f000 f941 	bl	80103f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2220      	movs	r2, #32
 8010176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2200      	movs	r2, #0
 801017e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010182:	2303      	movs	r3, #3
 8010184:	e00f      	b.n	80101a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	69da      	ldr	r2, [r3, #28]
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	4013      	ands	r3, r2
 8010190:	68ba      	ldr	r2, [r7, #8]
 8010192:	429a      	cmp	r2, r3
 8010194:	bf0c      	ite	eq
 8010196:	2301      	moveq	r3, #1
 8010198:	2300      	movne	r3, #0
 801019a:	b2db      	uxtb	r3, r3
 801019c:	461a      	mov	r2, r3
 801019e:	79fb      	ldrb	r3, [r7, #7]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d0a0      	beq.n	80100e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
	...

080101b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b0a3      	sub	sp, #140	; 0x8c
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	4613      	mov	r3, r2
 80101bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	68ba      	ldr	r2, [r7, #8]
 80101c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	88fa      	ldrh	r2, [r7, #6]
 80101c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	88fa      	ldrh	r2, [r7, #6]
 80101d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2200      	movs	r2, #0
 80101d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	689b      	ldr	r3, [r3, #8]
 80101de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101e2:	d10e      	bne.n	8010202 <UART_Start_Receive_IT+0x52>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	691b      	ldr	r3, [r3, #16]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d105      	bne.n	80101f8 <UART_Start_Receive_IT+0x48>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80101f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101f6:	e02d      	b.n	8010254 <UART_Start_Receive_IT+0xa4>
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	22ff      	movs	r2, #255	; 0xff
 80101fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010200:	e028      	b.n	8010254 <UART_Start_Receive_IT+0xa4>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10d      	bne.n	8010226 <UART_Start_Receive_IT+0x76>
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d104      	bne.n	801021c <UART_Start_Receive_IT+0x6c>
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	22ff      	movs	r2, #255	; 0xff
 8010216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801021a:	e01b      	b.n	8010254 <UART_Start_Receive_IT+0xa4>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	227f      	movs	r2, #127	; 0x7f
 8010220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010224:	e016      	b.n	8010254 <UART_Start_Receive_IT+0xa4>
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801022e:	d10d      	bne.n	801024c <UART_Start_Receive_IT+0x9c>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d104      	bne.n	8010242 <UART_Start_Receive_IT+0x92>
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	227f      	movs	r2, #127	; 0x7f
 801023c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010240:	e008      	b.n	8010254 <UART_Start_Receive_IT+0xa4>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	223f      	movs	r2, #63	; 0x3f
 8010246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801024a:	e003      	b.n	8010254 <UART_Start_Receive_IT+0xa4>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2200      	movs	r2, #0
 8010250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2222      	movs	r2, #34	; 0x22
 8010260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	3308      	adds	r3, #8
 801026a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801026c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801026e:	e853 3f00 	ldrex	r3, [r3]
 8010272:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010276:	f043 0301 	orr.w	r3, r3, #1
 801027a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	3308      	adds	r3, #8
 8010284:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010288:	673a      	str	r2, [r7, #112]	; 0x70
 801028a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801028e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010290:	e841 2300 	strex	r3, r2, [r1]
 8010294:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010298:	2b00      	cmp	r3, #0
 801029a:	d1e3      	bne.n	8010264 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102a4:	d14f      	bne.n	8010346 <UART_Start_Receive_IT+0x196>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102ac:	88fa      	ldrh	r2, [r7, #6]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d349      	bcc.n	8010346 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102ba:	d107      	bne.n	80102cc <UART_Start_Receive_IT+0x11c>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d103      	bne.n	80102cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	4a47      	ldr	r2, [pc, #284]	; (80103e4 <UART_Start_Receive_IT+0x234>)
 80102c8:	675a      	str	r2, [r3, #116]	; 0x74
 80102ca:	e002      	b.n	80102d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	4a46      	ldr	r2, [pc, #280]	; (80103e8 <UART_Start_Receive_IT+0x238>)
 80102d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d01a      	beq.n	8010310 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e2:	e853 3f00 	ldrex	r3, [r3]
 80102e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010300:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010302:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010304:	e841 2300 	strex	r3, r2, [r1]
 8010308:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801030a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1e4      	bne.n	80102da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	3308      	adds	r3, #8
 8010316:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801031a:	e853 3f00 	ldrex	r3, [r3]
 801031e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010326:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	3308      	adds	r3, #8
 801032e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010330:	64ba      	str	r2, [r7, #72]	; 0x48
 8010332:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010334:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010338:	e841 2300 	strex	r3, r2, [r1]
 801033c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801033e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1e5      	bne.n	8010310 <UART_Start_Receive_IT+0x160>
 8010344:	e046      	b.n	80103d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	689b      	ldr	r3, [r3, #8]
 801034a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801034e:	d107      	bne.n	8010360 <UART_Start_Receive_IT+0x1b0>
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	691b      	ldr	r3, [r3, #16]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d103      	bne.n	8010360 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4a24      	ldr	r2, [pc, #144]	; (80103ec <UART_Start_Receive_IT+0x23c>)
 801035c:	675a      	str	r2, [r3, #116]	; 0x74
 801035e:	e002      	b.n	8010366 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	4a23      	ldr	r2, [pc, #140]	; (80103f0 <UART_Start_Receive_IT+0x240>)
 8010364:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d019      	beq.n	80103a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	e853 3f00 	ldrex	r3, [r3]
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010382:	677b      	str	r3, [r7, #116]	; 0x74
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	461a      	mov	r2, r3
 801038a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801038c:	637b      	str	r3, [r7, #52]	; 0x34
 801038e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010394:	e841 2300 	strex	r3, r2, [r1]
 8010398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039c:	2b00      	cmp	r3, #0
 801039e:	d1e6      	bne.n	801036e <UART_Start_Receive_IT+0x1be>
 80103a0:	e018      	b.n	80103d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	e853 3f00 	ldrex	r3, [r3]
 80103ae:	613b      	str	r3, [r7, #16]
   return(result);
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	f043 0320 	orr.w	r3, r3, #32
 80103b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	461a      	mov	r2, r3
 80103be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103c0:	623b      	str	r3, [r7, #32]
 80103c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	6a3a      	ldr	r2, [r7, #32]
 80103c8:	e841 2300 	strex	r3, r2, [r1]
 80103cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e6      	bne.n	80103a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	378c      	adds	r7, #140	; 0x8c
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	08010c15 	.word	0x08010c15
 80103e8:	080108b5 	.word	0x080108b5
 80103ec:	080106fd 	.word	0x080106fd
 80103f0:	08010545 	.word	0x08010545

080103f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b095      	sub	sp, #84	; 0x54
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010404:	e853 3f00 	ldrex	r3, [r3]
 8010408:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801041a:	643b      	str	r3, [r7, #64]	; 0x40
 801041c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010422:	e841 2300 	strex	r3, r2, [r1]
 8010426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e6      	bne.n	80103fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3308      	adds	r3, #8
 8010434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010436:	6a3b      	ldr	r3, [r7, #32]
 8010438:	e853 3f00 	ldrex	r3, [r3]
 801043c:	61fb      	str	r3, [r7, #28]
   return(result);
 801043e:	69fa      	ldr	r2, [r7, #28]
 8010440:	4b1e      	ldr	r3, [pc, #120]	; (80104bc <UART_EndRxTransfer+0xc8>)
 8010442:	4013      	ands	r3, r2
 8010444:	64bb      	str	r3, [r7, #72]	; 0x48
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	3308      	adds	r3, #8
 801044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801044e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010456:	e841 2300 	strex	r3, r2, [r1]
 801045a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1e5      	bne.n	801042e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010466:	2b01      	cmp	r3, #1
 8010468:	d118      	bne.n	801049c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	e853 3f00 	ldrex	r3, [r3]
 8010476:	60bb      	str	r3, [r7, #8]
   return(result);
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	f023 0310 	bic.w	r3, r3, #16
 801047e:	647b      	str	r3, [r7, #68]	; 0x44
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	461a      	mov	r2, r3
 8010486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010488:	61bb      	str	r3, [r7, #24]
 801048a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048c:	6979      	ldr	r1, [r7, #20]
 801048e:	69ba      	ldr	r2, [r7, #24]
 8010490:	e841 2300 	strex	r3, r2, [r1]
 8010494:	613b      	str	r3, [r7, #16]
   return(result);
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1e6      	bne.n	801046a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2220      	movs	r2, #32
 80104a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80104b0:	bf00      	nop
 80104b2:	3754      	adds	r7, #84	; 0x54
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr
 80104bc:	effffffe 	.word	0xeffffffe

080104c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2200      	movs	r2, #0
 80104da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7fe ff2e 	bl	800f340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104e4:	bf00      	nop
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b088      	sub	sp, #32
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	e853 3f00 	ldrex	r3, [r3]
 8010500:	60bb      	str	r3, [r7, #8]
   return(result);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010508:	61fb      	str	r3, [r7, #28]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	461a      	mov	r2, r3
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	61bb      	str	r3, [r7, #24]
 8010514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010516:	6979      	ldr	r1, [r7, #20]
 8010518:	69ba      	ldr	r2, [r7, #24]
 801051a:	e841 2300 	strex	r3, r2, [r1]
 801051e:	613b      	str	r3, [r7, #16]
   return(result);
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1e6      	bne.n	80104f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2220      	movs	r2, #32
 801052a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7fe fef9 	bl	800f32c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801053a:	bf00      	nop
 801053c:	3720      	adds	r7, #32
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
	...

08010544 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b09c      	sub	sp, #112	; 0x70
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010552:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801055c:	2b22      	cmp	r3, #34	; 0x22
 801055e:	f040 80be 	bne.w	80106de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010568:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801056c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010570:	b2d9      	uxtb	r1, r3
 8010572:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010576:	b2da      	uxtb	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801057c:	400a      	ands	r2, r1
 801057e:	b2d2      	uxtb	r2, r2
 8010580:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010592:	b29b      	uxth	r3, r3
 8010594:	3b01      	subs	r3, #1
 8010596:	b29a      	uxth	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f040 80a1 	bne.w	80106ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105b4:	e853 3f00 	ldrex	r3, [r3]
 80105b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80105ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	461a      	mov	r2, r3
 80105c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80105cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105d2:	e841 2300 	strex	r3, r2, [r1]
 80105d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1e6      	bne.n	80105ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3308      	adds	r3, #8
 80105e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	e853 3f00 	ldrex	r3, [r3]
 80105ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80105ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f0:	f023 0301 	bic.w	r3, r3, #1
 80105f4:	667b      	str	r3, [r7, #100]	; 0x64
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3308      	adds	r3, #8
 80105fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105fe:	647a      	str	r2, [r7, #68]	; 0x44
 8010600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010606:	e841 2300 	strex	r3, r2, [r1]
 801060a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801060c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1e5      	bne.n	80105de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2220      	movs	r2, #32
 8010616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4a33      	ldr	r2, [pc, #204]	; (80106f8 <UART_RxISR_8BIT+0x1b4>)
 801062c:	4293      	cmp	r3, r2
 801062e:	d01f      	beq.n	8010670 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d018      	beq.n	8010670 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010646:	e853 3f00 	ldrex	r3, [r3]
 801064a:	623b      	str	r3, [r7, #32]
   return(result);
 801064c:	6a3b      	ldr	r3, [r7, #32]
 801064e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010652:	663b      	str	r3, [r7, #96]	; 0x60
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	461a      	mov	r2, r3
 801065a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801065c:	633b      	str	r3, [r7, #48]	; 0x30
 801065e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010664:	e841 2300 	strex	r3, r2, [r1]
 8010668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1e6      	bne.n	801063e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010674:	2b01      	cmp	r3, #1
 8010676:	d12e      	bne.n	80106d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2200      	movs	r2, #0
 801067c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	e853 3f00 	ldrex	r3, [r3]
 801068a:	60fb      	str	r3, [r7, #12]
   return(result);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f023 0310 	bic.w	r3, r3, #16
 8010692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	461a      	mov	r2, r3
 801069a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801069c:	61fb      	str	r3, [r7, #28]
 801069e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a0:	69b9      	ldr	r1, [r7, #24]
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	e841 2300 	strex	r3, r2, [r1]
 80106a8:	617b      	str	r3, [r7, #20]
   return(result);
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e6      	bne.n	801067e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	69db      	ldr	r3, [r3, #28]
 80106b6:	f003 0310 	and.w	r3, r3, #16
 80106ba:	2b10      	cmp	r3, #16
 80106bc:	d103      	bne.n	80106c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2210      	movs	r2, #16
 80106c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106cc:	4619      	mov	r1, r3
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fe fe40 	bl	800f354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106d4:	e00b      	b.n	80106ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7f0 f80a 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80106dc:	e007      	b.n	80106ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	699a      	ldr	r2, [r3, #24]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f042 0208 	orr.w	r2, r2, #8
 80106ec:	619a      	str	r2, [r3, #24]
}
 80106ee:	bf00      	nop
 80106f0:	3770      	adds	r7, #112	; 0x70
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	58000c00 	.word	0x58000c00

080106fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b09c      	sub	sp, #112	; 0x70
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801070a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010714:	2b22      	cmp	r3, #34	; 0x22
 8010716:	f040 80be 	bne.w	8010896 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010720:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010728:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801072a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801072e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010732:	4013      	ands	r3, r2
 8010734:	b29a      	uxth	r2, r3
 8010736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010738:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801073e:	1c9a      	adds	r2, r3, #2
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801074a:	b29b      	uxth	r3, r3
 801074c:	3b01      	subs	r3, #1
 801074e:	b29a      	uxth	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801075c:	b29b      	uxth	r3, r3
 801075e:	2b00      	cmp	r3, #0
 8010760:	f040 80a1 	bne.w	80108a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076c:	e853 3f00 	ldrex	r3, [r3]
 8010770:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010778:	667b      	str	r3, [r7, #100]	; 0x64
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	461a      	mov	r2, r3
 8010780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010782:	657b      	str	r3, [r7, #84]	; 0x54
 8010784:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010786:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801078a:	e841 2300 	strex	r3, r2, [r1]
 801078e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010792:	2b00      	cmp	r3, #0
 8010794:	d1e6      	bne.n	8010764 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3308      	adds	r3, #8
 801079c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a0:	e853 3f00 	ldrex	r3, [r3]
 80107a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80107a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a8:	f023 0301 	bic.w	r3, r3, #1
 80107ac:	663b      	str	r3, [r7, #96]	; 0x60
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	3308      	adds	r3, #8
 80107b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107b6:	643a      	str	r2, [r7, #64]	; 0x40
 80107b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80107bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107be:	e841 2300 	strex	r3, r2, [r1]
 80107c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1e5      	bne.n	8010796 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2220      	movs	r2, #32
 80107ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	4a33      	ldr	r2, [pc, #204]	; (80108b0 <UART_RxISR_16BIT+0x1b4>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d01f      	beq.n	8010828 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d018      	beq.n	8010828 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	e853 3f00 	ldrex	r3, [r3]
 8010802:	61fb      	str	r3, [r7, #28]
   return(result);
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801080a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	461a      	mov	r2, r3
 8010812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010816:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801081a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801081c:	e841 2300 	strex	r3, r2, [r1]
 8010820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1e6      	bne.n	80107f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801082c:	2b01      	cmp	r3, #1
 801082e:	d12e      	bne.n	801088e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	e853 3f00 	ldrex	r3, [r3]
 8010842:	60bb      	str	r3, [r7, #8]
   return(result);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	f023 0310 	bic.w	r3, r3, #16
 801084a:	65bb      	str	r3, [r7, #88]	; 0x58
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	461a      	mov	r2, r3
 8010852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010854:	61bb      	str	r3, [r7, #24]
 8010856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010858:	6979      	ldr	r1, [r7, #20]
 801085a:	69ba      	ldr	r2, [r7, #24]
 801085c:	e841 2300 	strex	r3, r2, [r1]
 8010860:	613b      	str	r3, [r7, #16]
   return(result);
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1e6      	bne.n	8010836 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	69db      	ldr	r3, [r3, #28]
 801086e:	f003 0310 	and.w	r3, r3, #16
 8010872:	2b10      	cmp	r3, #16
 8010874:	d103      	bne.n	801087e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2210      	movs	r2, #16
 801087c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7fe fd64 	bl	800f354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801088c:	e00b      	b.n	80108a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7ef ff2e 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 8010894:	e007      	b.n	80108a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	699a      	ldr	r2, [r3, #24]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f042 0208 	orr.w	r2, r2, #8
 80108a4:	619a      	str	r2, [r3, #24]
}
 80108a6:	bf00      	nop
 80108a8:	3770      	adds	r7, #112	; 0x70
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	58000c00 	.word	0x58000c00

080108b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b0ac      	sub	sp, #176	; 0xb0
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	69db      	ldr	r3, [r3, #28]
 80108cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	689b      	ldr	r3, [r3, #8]
 80108e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108ea:	2b22      	cmp	r3, #34	; 0x22
 80108ec:	f040 8180 	bne.w	8010bf0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108f6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80108fa:	e123      	b.n	8010b44 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010902:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010906:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801090a:	b2d9      	uxtb	r1, r3
 801090c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010910:	b2da      	uxtb	r2, r3
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010916:	400a      	ands	r2, r1
 8010918:	b2d2      	uxtb	r2, r2
 801091a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801092c:	b29b      	uxth	r3, r3
 801092e:	3b01      	subs	r3, #1
 8010930:	b29a      	uxth	r2, r3
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	69db      	ldr	r3, [r3, #28]
 801093e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010946:	f003 0307 	and.w	r3, r3, #7
 801094a:	2b00      	cmp	r3, #0
 801094c:	d053      	beq.n	80109f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801094e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010952:	f003 0301 	and.w	r3, r3, #1
 8010956:	2b00      	cmp	r3, #0
 8010958:	d011      	beq.n	801097e <UART_RxISR_8BIT_FIFOEN+0xca>
 801095a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801095e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00b      	beq.n	801097e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2201      	movs	r2, #1
 801096c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010974:	f043 0201 	orr.w	r2, r3, #1
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801097e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b00      	cmp	r3, #0
 8010988:	d011      	beq.n	80109ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 801098a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801098e:	f003 0301 	and.w	r3, r3, #1
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00b      	beq.n	80109ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2202      	movs	r2, #2
 801099c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109a4:	f043 0204 	orr.w	r2, r3, #4
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109b2:	f003 0304 	and.w	r3, r3, #4
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d011      	beq.n	80109de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80109ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80109be:	f003 0301 	and.w	r3, r3, #1
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00b      	beq.n	80109de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2204      	movs	r2, #4
 80109cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109d4:	f043 0202 	orr.w	r2, r3, #2
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d006      	beq.n	80109f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7fe fca9 	bl	800f340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2200      	movs	r2, #0
 80109f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f040 80a0 	bne.w	8010b44 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a0c:	e853 3f00 	ldrex	r3, [r3]
 8010a10:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	461a      	mov	r2, r3
 8010a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010a28:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010a2c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010a2e:	e841 2300 	strex	r3, r2, [r1]
 8010a32:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1e4      	bne.n	8010a04 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	3308      	adds	r3, #8
 8010a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a44:	e853 3f00 	ldrex	r3, [r3]
 8010a48:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a4c:	4b6e      	ldr	r3, [pc, #440]	; (8010c08 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010a4e:	4013      	ands	r3, r2
 8010a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	3308      	adds	r3, #8
 8010a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a5e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010a60:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010a64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1e3      	bne.n	8010a3a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2220      	movs	r2, #32
 8010a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a60      	ldr	r2, [pc, #384]	; (8010c0c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d021      	beq.n	8010ad4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d01a      	beq.n	8010ad4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aa6:	e853 3f00 	ldrex	r3, [r3]
 8010aaa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	461a      	mov	r2, r3
 8010abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8010ac2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ac6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ac8:	e841 2300 	strex	r3, r2, [r1]
 8010acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1e4      	bne.n	8010a9e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d130      	bne.n	8010b3e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aea:	e853 3f00 	ldrex	r3, [r3]
 8010aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af2:	f023 0310 	bic.w	r3, r3, #16
 8010af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b04:	643b      	str	r3, [r7, #64]	; 0x40
 8010b06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b0c:	e841 2300 	strex	r3, r2, [r1]
 8010b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1e4      	bne.n	8010ae2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	69db      	ldr	r3, [r3, #28]
 8010b1e:	f003 0310 	and.w	r3, r3, #16
 8010b22:	2b10      	cmp	r3, #16
 8010b24:	d103      	bne.n	8010b2e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2210      	movs	r2, #16
 8010b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b34:	4619      	mov	r1, r3
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7fe fc0c 	bl	800f354 <HAL_UARTEx_RxEventCallback>
 8010b3c:	e002      	b.n	8010b44 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7ef fdd6 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010b44:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d006      	beq.n	8010b5a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010b50:	f003 0320 	and.w	r3, r3, #32
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f47f aed1 	bne.w	80108fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010b64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d049      	beq.n	8010c00 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b72:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d242      	bcs.n	8010c00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	3308      	adds	r3, #8
 8010b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	e853 3f00 	ldrex	r3, [r3]
 8010b88:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3308      	adds	r3, #8
 8010b9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ba6:	e841 2300 	strex	r3, r2, [r1]
 8010baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d1e3      	bne.n	8010b7a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4a16      	ldr	r2, [pc, #88]	; (8010c10 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010bb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	e853 3f00 	ldrex	r3, [r3]
 8010bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	f043 0320 	orr.w	r3, r3, #32
 8010bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bda:	61bb      	str	r3, [r7, #24]
 8010bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bde:	6979      	ldr	r1, [r7, #20]
 8010be0:	69ba      	ldr	r2, [r7, #24]
 8010be2:	e841 2300 	strex	r3, r2, [r1]
 8010be6:	613b      	str	r3, [r7, #16]
   return(result);
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1e4      	bne.n	8010bb8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010bee:	e007      	b.n	8010c00 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	699a      	ldr	r2, [r3, #24]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f042 0208 	orr.w	r2, r2, #8
 8010bfe:	619a      	str	r2, [r3, #24]
}
 8010c00:	bf00      	nop
 8010c02:	37b0      	adds	r7, #176	; 0xb0
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	effffffe 	.word	0xeffffffe
 8010c0c:	58000c00 	.word	0x58000c00
 8010c10:	08010545 	.word	0x08010545

08010c14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b0ae      	sub	sp, #184	; 0xb8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c22:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	69db      	ldr	r3, [r3, #28]
 8010c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c4a:	2b22      	cmp	r3, #34	; 0x22
 8010c4c:	f040 8184 	bne.w	8010f58 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c56:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c5a:	e127      	b.n	8010eac <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c62:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010c6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010c72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010c76:	4013      	ands	r3, r2
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c84:	1c9a      	adds	r2, r3, #2
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	3b01      	subs	r3, #1
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	69db      	ldr	r3, [r3, #28]
 8010ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010caa:	f003 0307 	and.w	r3, r3, #7
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d053      	beq.n	8010d5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010cb6:	f003 0301 	and.w	r3, r3, #1
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d011      	beq.n	8010ce2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d00b      	beq.n	8010ce2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cd8:	f043 0201 	orr.w	r2, r3, #1
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ce6:	f003 0302 	and.w	r3, r3, #2
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d011      	beq.n	8010d12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cf2:	f003 0301 	and.w	r3, r3, #1
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00b      	beq.n	8010d12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2202      	movs	r2, #2
 8010d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d08:	f043 0204 	orr.w	r2, r3, #4
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d16:	f003 0304 	and.w	r3, r3, #4
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d011      	beq.n	8010d42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d22:	f003 0301 	and.w	r3, r3, #1
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00b      	beq.n	8010d42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d38:	f043 0202 	orr.w	r2, r3, #2
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d006      	beq.n	8010d5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7fe faf7 	bl	800f340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2200      	movs	r2, #0
 8010d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f040 80a2 	bne.w	8010eac <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d70:	e853 3f00 	ldrex	r3, [r3]
 8010d74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	461a      	mov	r2, r3
 8010d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d96:	e841 2300 	strex	r3, r2, [r1]
 8010d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1e2      	bne.n	8010d68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	3308      	adds	r3, #8
 8010da8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dac:	e853 3f00 	ldrex	r3, [r3]
 8010db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010db2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010db4:	4b6e      	ldr	r3, [pc, #440]	; (8010f70 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010db6:	4013      	ands	r3, r2
 8010db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	3308      	adds	r3, #8
 8010dc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010dce:	e841 2300 	strex	r3, r2, [r1]
 8010dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1e3      	bne.n	8010da2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2220      	movs	r2, #32
 8010dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	4a60      	ldr	r2, [pc, #384]	; (8010f74 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d021      	beq.n	8010e3c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d01a      	beq.n	8010e3c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e0e:	e853 3f00 	ldrex	r3, [r3]
 8010e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	461a      	mov	r2, r3
 8010e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e30:	e841 2300 	strex	r3, r2, [r1]
 8010e34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1e4      	bne.n	8010e06 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d130      	bne.n	8010ea6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2200      	movs	r2, #0
 8010e48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	e853 3f00 	ldrex	r3, [r3]
 8010e56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e5a:	f023 0310 	bic.w	r3, r3, #16
 8010e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	461a      	mov	r2, r3
 8010e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8010e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e74:	e841 2300 	strex	r3, r2, [r1]
 8010e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1e4      	bne.n	8010e4a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	69db      	ldr	r3, [r3, #28]
 8010e86:	f003 0310 	and.w	r3, r3, #16
 8010e8a:	2b10      	cmp	r3, #16
 8010e8c:	d103      	bne.n	8010e96 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2210      	movs	r2, #16
 8010e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f7fe fa58 	bl	800f354 <HAL_UARTEx_RxEventCallback>
 8010ea4:	e002      	b.n	8010eac <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ef fc22 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010eac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d006      	beq.n	8010ec2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010eb8:	f003 0320 	and.w	r3, r3, #32
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f47f aecd 	bne.w	8010c5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ec8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010ecc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d049      	beq.n	8010f68 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010eda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d242      	bcs.n	8010f68 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	3308      	adds	r3, #8
 8010ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	e853 3f00 	ldrex	r3, [r3]
 8010ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ef2:	6a3b      	ldr	r3, [r7, #32]
 8010ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	3308      	adds	r3, #8
 8010f02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010f06:	633a      	str	r2, [r7, #48]	; 0x30
 8010f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f0e:	e841 2300 	strex	r3, r2, [r1]
 8010f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d1e3      	bne.n	8010ee2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4a16      	ldr	r2, [pc, #88]	; (8010f78 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010f1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	e853 3f00 	ldrex	r3, [r3]
 8010f2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f043 0320 	orr.w	r3, r3, #32
 8010f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f42:	61fb      	str	r3, [r7, #28]
 8010f44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f46:	69b9      	ldr	r1, [r7, #24]
 8010f48:	69fa      	ldr	r2, [r7, #28]
 8010f4a:	e841 2300 	strex	r3, r2, [r1]
 8010f4e:	617b      	str	r3, [r7, #20]
   return(result);
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d1e4      	bne.n	8010f20 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f56:	e007      	b.n	8010f68 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	699a      	ldr	r2, [r3, #24]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f042 0208 	orr.w	r2, r2, #8
 8010f66:	619a      	str	r2, [r3, #24]
}
 8010f68:	bf00      	nop
 8010f6a:	37b8      	adds	r7, #184	; 0xb8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	effffffe 	.word	0xeffffffe
 8010f74:	58000c00 	.word	0x58000c00
 8010f78:	080106fd 	.word	0x080106fd

08010f7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010f84:	bf00      	nop
 8010f86:	370c      	adds	r7, #12
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8e:	4770      	bx	lr

08010f90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010fac:	bf00      	nop
 8010fae:	370c      	adds	r7, #12
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	b085      	sub	sp, #20
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d101      	bne.n	8010fce <HAL_UARTEx_DisableFifoMode+0x16>
 8010fca:	2302      	movs	r3, #2
 8010fcc:	e027      	b.n	801101e <HAL_UARTEx_DisableFifoMode+0x66>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2224      	movs	r2, #36	; 0x24
 8010fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f022 0201 	bic.w	r2, r2, #1
 8010ff4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010ffc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2220      	movs	r2, #32
 8011010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3714      	adds	r7, #20
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr

0801102a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b084      	sub	sp, #16
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
 8011032:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801103a:	2b01      	cmp	r3, #1
 801103c:	d101      	bne.n	8011042 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801103e:	2302      	movs	r3, #2
 8011040:	e02d      	b.n	801109e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2201      	movs	r2, #1
 8011046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2224      	movs	r2, #36	; 0x24
 801104e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f022 0201 	bic.w	r2, r2, #1
 8011068:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	430a      	orrs	r2, r1
 801107c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 f850 	bl	8011124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2220      	movs	r2, #32
 8011090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2200      	movs	r2, #0
 8011098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b084      	sub	sp, #16
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d101      	bne.n	80110be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110ba:	2302      	movs	r3, #2
 80110bc:	e02d      	b.n	801111a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2201      	movs	r2, #1
 80110c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2224      	movs	r2, #36	; 0x24
 80110ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f022 0201 	bic.w	r2, r2, #1
 80110e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	430a      	orrs	r2, r1
 80110f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 f812 	bl	8011124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2220      	movs	r2, #32
 801110c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2200      	movs	r2, #0
 8011114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
	...

08011124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011124:	b480      	push	{r7}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011130:	2b00      	cmp	r3, #0
 8011132:	d108      	bne.n	8011146 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2201      	movs	r2, #1
 8011140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011144:	e031      	b.n	80111aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011146:	2310      	movs	r3, #16
 8011148:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801114a:	2310      	movs	r3, #16
 801114c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	0e5b      	lsrs	r3, r3, #25
 8011156:	b2db      	uxtb	r3, r3
 8011158:	f003 0307 	and.w	r3, r3, #7
 801115c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	0f5b      	lsrs	r3, r3, #29
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 0307 	and.w	r3, r3, #7
 801116c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801116e:	7bbb      	ldrb	r3, [r7, #14]
 8011170:	7b3a      	ldrb	r2, [r7, #12]
 8011172:	4911      	ldr	r1, [pc, #68]	; (80111b8 <UARTEx_SetNbDataToProcess+0x94>)
 8011174:	5c8a      	ldrb	r2, [r1, r2]
 8011176:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801117a:	7b3a      	ldrb	r2, [r7, #12]
 801117c:	490f      	ldr	r1, [pc, #60]	; (80111bc <UARTEx_SetNbDataToProcess+0x98>)
 801117e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011180:	fb93 f3f2 	sdiv	r3, r3, r2
 8011184:	b29a      	uxth	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801118c:	7bfb      	ldrb	r3, [r7, #15]
 801118e:	7b7a      	ldrb	r2, [r7, #13]
 8011190:	4909      	ldr	r1, [pc, #36]	; (80111b8 <UARTEx_SetNbDataToProcess+0x94>)
 8011192:	5c8a      	ldrb	r2, [r1, r2]
 8011194:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011198:	7b7a      	ldrb	r2, [r7, #13]
 801119a:	4908      	ldr	r1, [pc, #32]	; (80111bc <UARTEx_SetNbDataToProcess+0x98>)
 801119c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801119e:	fb93 f3f2 	sdiv	r3, r3, r2
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111aa:	bf00      	nop
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	08015d1c 	.word	0x08015d1c
 80111bc:	08015d24 	.word	0x08015d24

080111c0 <__NVIC_SetPriority>:
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	4603      	mov	r3, r0
 80111c8:	6039      	str	r1, [r7, #0]
 80111ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80111cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	db0a      	blt.n	80111ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	490c      	ldr	r1, [pc, #48]	; (801120c <__NVIC_SetPriority+0x4c>)
 80111da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111de:	0112      	lsls	r2, r2, #4
 80111e0:	b2d2      	uxtb	r2, r2
 80111e2:	440b      	add	r3, r1
 80111e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80111e8:	e00a      	b.n	8011200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	4908      	ldr	r1, [pc, #32]	; (8011210 <__NVIC_SetPriority+0x50>)
 80111f0:	88fb      	ldrh	r3, [r7, #6]
 80111f2:	f003 030f 	and.w	r3, r3, #15
 80111f6:	3b04      	subs	r3, #4
 80111f8:	0112      	lsls	r2, r2, #4
 80111fa:	b2d2      	uxtb	r2, r2
 80111fc:	440b      	add	r3, r1
 80111fe:	761a      	strb	r2, [r3, #24]
}
 8011200:	bf00      	nop
 8011202:	370c      	adds	r7, #12
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr
 801120c:	e000e100 	.word	0xe000e100
 8011210:	e000ed00 	.word	0xe000ed00

08011214 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011214:	b580      	push	{r7, lr}
 8011216:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011218:	4b05      	ldr	r3, [pc, #20]	; (8011230 <SysTick_Handler+0x1c>)
 801121a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801121c:	f002 fada 	bl	80137d4 <xTaskGetSchedulerState>
 8011220:	4603      	mov	r3, r0
 8011222:	2b01      	cmp	r3, #1
 8011224:	d001      	beq.n	801122a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011226:	f003 f8f7 	bl	8014418 <xPortSysTickHandler>
  }
}
 801122a:	bf00      	nop
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	e000e010 	.word	0xe000e010

08011234 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011234:	b580      	push	{r7, lr}
 8011236:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011238:	2100      	movs	r1, #0
 801123a:	f06f 0004 	mvn.w	r0, #4
 801123e:	f7ff ffbf 	bl	80111c0 <__NVIC_SetPriority>
#endif
}
 8011242:	bf00      	nop
 8011244:	bd80      	pop	{r7, pc}
	...

08011248 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801124e:	f3ef 8305 	mrs	r3, IPSR
 8011252:	603b      	str	r3, [r7, #0]
  return(result);
 8011254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011256:	2b00      	cmp	r3, #0
 8011258:	d003      	beq.n	8011262 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801125a:	f06f 0305 	mvn.w	r3, #5
 801125e:	607b      	str	r3, [r7, #4]
 8011260:	e00c      	b.n	801127c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011262:	4b0a      	ldr	r3, [pc, #40]	; (801128c <osKernelInitialize+0x44>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d105      	bne.n	8011276 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801126a:	4b08      	ldr	r3, [pc, #32]	; (801128c <osKernelInitialize+0x44>)
 801126c:	2201      	movs	r2, #1
 801126e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011270:	2300      	movs	r3, #0
 8011272:	607b      	str	r3, [r7, #4]
 8011274:	e002      	b.n	801127c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801127a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801127c:	687b      	ldr	r3, [r7, #4]
}
 801127e:	4618      	mov	r0, r3
 8011280:	370c      	adds	r7, #12
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	2400077c 	.word	0x2400077c

08011290 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011296:	f3ef 8305 	mrs	r3, IPSR
 801129a:	603b      	str	r3, [r7, #0]
  return(result);
 801129c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d003      	beq.n	80112aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80112a2:	f06f 0305 	mvn.w	r3, #5
 80112a6:	607b      	str	r3, [r7, #4]
 80112a8:	e010      	b.n	80112cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80112aa:	4b0b      	ldr	r3, [pc, #44]	; (80112d8 <osKernelStart+0x48>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d109      	bne.n	80112c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80112b2:	f7ff ffbf 	bl	8011234 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80112b6:	4b08      	ldr	r3, [pc, #32]	; (80112d8 <osKernelStart+0x48>)
 80112b8:	2202      	movs	r2, #2
 80112ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80112bc:	f001 fda4 	bl	8012e08 <vTaskStartScheduler>
      stat = osOK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	607b      	str	r3, [r7, #4]
 80112c4:	e002      	b.n	80112cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80112c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80112cc:	687b      	ldr	r3, [r7, #4]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	2400077c 	.word	0x2400077c

080112dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80112dc:	b580      	push	{r7, lr}
 80112de:	b08e      	sub	sp, #56	; 0x38
 80112e0:	af04      	add	r7, sp, #16
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80112e8:	2300      	movs	r3, #0
 80112ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112ec:	f3ef 8305 	mrs	r3, IPSR
 80112f0:	617b      	str	r3, [r7, #20]
  return(result);
 80112f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d17e      	bne.n	80113f6 <osThreadNew+0x11a>
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d07b      	beq.n	80113f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80112fe:	2380      	movs	r3, #128	; 0x80
 8011300:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011302:	2318      	movs	r3, #24
 8011304:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011306:	2300      	movs	r3, #0
 8011308:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801130e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d045      	beq.n	80113a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d002      	beq.n	8011324 <osThreadNew+0x48>
        name = attr->name;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	699b      	ldr	r3, [r3, #24]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d002      	beq.n	8011332 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	699b      	ldr	r3, [r3, #24]
 8011330:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d008      	beq.n	801134a <osThreadNew+0x6e>
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	2b38      	cmp	r3, #56	; 0x38
 801133c:	d805      	bhi.n	801134a <osThreadNew+0x6e>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	f003 0301 	and.w	r3, r3, #1
 8011346:	2b00      	cmp	r3, #0
 8011348:	d001      	beq.n	801134e <osThreadNew+0x72>
        return (NULL);
 801134a:	2300      	movs	r3, #0
 801134c:	e054      	b.n	80113f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d003      	beq.n	801135e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	695b      	ldr	r3, [r3, #20]
 801135a:	089b      	lsrs	r3, r3, #2
 801135c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00e      	beq.n	8011384 <osThreadNew+0xa8>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	2b5b      	cmp	r3, #91	; 0x5b
 801136c:	d90a      	bls.n	8011384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011372:	2b00      	cmp	r3, #0
 8011374:	d006      	beq.n	8011384 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	695b      	ldr	r3, [r3, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d002      	beq.n	8011384 <osThreadNew+0xa8>
        mem = 1;
 801137e:	2301      	movs	r3, #1
 8011380:	61bb      	str	r3, [r7, #24]
 8011382:	e010      	b.n	80113a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d10c      	bne.n	80113a6 <osThreadNew+0xca>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d108      	bne.n	80113a6 <osThreadNew+0xca>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	691b      	ldr	r3, [r3, #16]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d104      	bne.n	80113a6 <osThreadNew+0xca>
          mem = 0;
 801139c:	2300      	movs	r3, #0
 801139e:	61bb      	str	r3, [r7, #24]
 80113a0:	e001      	b.n	80113a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d110      	bne.n	80113ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80113b4:	9202      	str	r2, [sp, #8]
 80113b6:	9301      	str	r3, [sp, #4]
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	6a3a      	ldr	r2, [r7, #32]
 80113c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f001 fb4a 	bl	8012a5c <xTaskCreateStatic>
 80113c8:	4603      	mov	r3, r0
 80113ca:	613b      	str	r3, [r7, #16]
 80113cc:	e013      	b.n	80113f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d110      	bne.n	80113f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	f107 0310 	add.w	r3, r7, #16
 80113dc:	9301      	str	r3, [sp, #4]
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	9300      	str	r3, [sp, #0]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f001 fb95 	bl	8012b16 <xTaskCreate>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d001      	beq.n	80113f6 <osThreadNew+0x11a>
            hTask = NULL;
 80113f2:	2300      	movs	r3, #0
 80113f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80113f6:	693b      	ldr	r3, [r7, #16]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3728      	adds	r7, #40	; 0x28
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011406:	f3ef 8305 	mrs	r3, IPSR
 801140a:	603b      	str	r3, [r7, #0]
  return(result);
 801140c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801140e:	2b00      	cmp	r3, #0
 8011410:	d003      	beq.n	801141a <osThreadYield+0x1a>
    stat = osErrorISR;
 8011412:	f06f 0305 	mvn.w	r3, #5
 8011416:	607b      	str	r3, [r7, #4]
 8011418:	e009      	b.n	801142e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801141a:	2300      	movs	r3, #0
 801141c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801141e:	4b07      	ldr	r3, [pc, #28]	; (801143c <osThreadYield+0x3c>)
 8011420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	f3bf 8f4f 	dsb	sy
 801142a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801142e:	687b      	ldr	r3, [r7, #4]
}
 8011430:	4618      	mov	r0, r3
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	e000ed04 	.word	0xe000ed04

08011440 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011448:	f3ef 8305 	mrs	r3, IPSR
 801144c:	60bb      	str	r3, [r7, #8]
  return(result);
 801144e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011450:	2b00      	cmp	r3, #0
 8011452:	d003      	beq.n	801145c <osDelay+0x1c>
    stat = osErrorISR;
 8011454:	f06f 0305 	mvn.w	r3, #5
 8011458:	60fb      	str	r3, [r7, #12]
 801145a:	e007      	b.n	801146c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801145c:	2300      	movs	r3, #0
 801145e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d002      	beq.n	801146c <osDelay+0x2c>
      vTaskDelay(ticks);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f001 fc9a 	bl	8012da0 <vTaskDelay>
    }
  }

  return (stat);
 801146c:	68fb      	ldr	r3, [r7, #12]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3710      	adds	r7, #16
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8011476:	b580      	push	{r7, lr}
 8011478:	b086      	sub	sp, #24
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801147e:	2300      	movs	r3, #0
 8011480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011482:	f3ef 8305 	mrs	r3, IPSR
 8011486:	60fb      	str	r3, [r7, #12]
  return(result);
 8011488:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801148a:	2b00      	cmp	r3, #0
 801148c:	d12d      	bne.n	80114ea <osEventFlagsNew+0x74>
    mem = -1;
 801148e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011492:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d015      	beq.n	80114c6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d006      	beq.n	80114b0 <osEventFlagsNew+0x3a>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	2b1f      	cmp	r3, #31
 80114a8:	d902      	bls.n	80114b0 <osEventFlagsNew+0x3a>
        mem = 1;
 80114aa:	2301      	movs	r3, #1
 80114ac:	613b      	str	r3, [r7, #16]
 80114ae:	e00c      	b.n	80114ca <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	689b      	ldr	r3, [r3, #8]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d108      	bne.n	80114ca <osEventFlagsNew+0x54>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d104      	bne.n	80114ca <osEventFlagsNew+0x54>
          mem = 0;
 80114c0:	2300      	movs	r3, #0
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	e001      	b.n	80114ca <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d106      	bne.n	80114de <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	689b      	ldr	r3, [r3, #8]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f000 fa3d 	bl	8011954 <xEventGroupCreateStatic>
 80114da:	6178      	str	r0, [r7, #20]
 80114dc:	e005      	b.n	80114ea <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d102      	bne.n	80114ea <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80114e4:	f000 fa6d 	bl	80119c2 <xEventGroupCreate>
 80114e8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80114ea:	697b      	ldr	r3, [r7, #20]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b086      	sub	sp, #24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011502:	693b      	ldr	r3, [r7, #16]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d004      	beq.n	8011512 <osEventFlagsSet+0x1e>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801150e:	2b00      	cmp	r3, #0
 8011510:	d003      	beq.n	801151a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8011512:	f06f 0303 	mvn.w	r3, #3
 8011516:	617b      	str	r3, [r7, #20]
 8011518:	e028      	b.n	801156c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801151a:	f3ef 8305 	mrs	r3, IPSR
 801151e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011520:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011522:	2b00      	cmp	r3, #0
 8011524:	d01d      	beq.n	8011562 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8011526:	2300      	movs	r3, #0
 8011528:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801152a:	f107 0308 	add.w	r3, r7, #8
 801152e:	461a      	mov	r2, r3
 8011530:	6839      	ldr	r1, [r7, #0]
 8011532:	6938      	ldr	r0, [r7, #16]
 8011534:	f000 fbe8 	bl	8011d08 <xEventGroupSetBitsFromISR>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d103      	bne.n	8011546 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801153e:	f06f 0302 	mvn.w	r3, #2
 8011542:	617b      	str	r3, [r7, #20]
 8011544:	e012      	b.n	801156c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00d      	beq.n	801156c <osEventFlagsSet+0x78>
 8011550:	4b09      	ldr	r3, [pc, #36]	; (8011578 <osEventFlagsSet+0x84>)
 8011552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	f3bf 8f6f 	isb	sy
 8011560:	e004      	b.n	801156c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8011562:	6839      	ldr	r1, [r7, #0]
 8011564:	6938      	ldr	r0, [r7, #16]
 8011566:	f000 fb15 	bl	8011b94 <xEventGroupSetBits>
 801156a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801156c:	697b      	ldr	r3, [r7, #20]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3718      	adds	r7, #24
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	e000ed04 	.word	0xe000ed04

0801157c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801157c:	b580      	push	{r7, lr}
 801157e:	b08c      	sub	sp, #48	; 0x30
 8011580:	af02      	add	r7, sp, #8
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
 8011588:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <osEventFlagsWait+0x22>
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801159a:	2b00      	cmp	r3, #0
 801159c:	d003      	beq.n	80115a6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801159e:	f06f 0303 	mvn.w	r3, #3
 80115a2:	61fb      	str	r3, [r7, #28]
 80115a4:	e04b      	b.n	801163e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115a6:	f3ef 8305 	mrs	r3, IPSR
 80115aa:	617b      	str	r3, [r7, #20]
  return(result);
 80115ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d003      	beq.n	80115ba <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80115b2:	f06f 0305 	mvn.w	r3, #5
 80115b6:	61fb      	str	r3, [r7, #28]
 80115b8:	e041      	b.n	801163e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f003 0301 	and.w	r3, r3, #1
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d002      	beq.n	80115ca <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80115c4:	2301      	movs	r3, #1
 80115c6:	627b      	str	r3, [r7, #36]	; 0x24
 80115c8:	e001      	b.n	80115ce <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80115ca:	2300      	movs	r3, #0
 80115cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f003 0302 	and.w	r3, r3, #2
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d002      	beq.n	80115de <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80115d8:	2300      	movs	r3, #0
 80115da:	623b      	str	r3, [r7, #32]
 80115dc:	e001      	b.n	80115e2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80115de:	2301      	movs	r3, #1
 80115e0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e8:	6a3a      	ldr	r2, [r7, #32]
 80115ea:	68b9      	ldr	r1, [r7, #8]
 80115ec:	69b8      	ldr	r0, [r7, #24]
 80115ee:	f000 fa03 	bl	80119f8 <xEventGroupWaitBits>
 80115f2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f003 0301 	and.w	r3, r3, #1
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d010      	beq.n	8011620 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80115fe:	68ba      	ldr	r2, [r7, #8]
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	4013      	ands	r3, r2
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	429a      	cmp	r2, r3
 8011608:	d019      	beq.n	801163e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d003      	beq.n	8011618 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011610:	f06f 0301 	mvn.w	r3, #1
 8011614:	61fb      	str	r3, [r7, #28]
 8011616:	e012      	b.n	801163e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011618:	f06f 0302 	mvn.w	r3, #2
 801161c:	61fb      	str	r3, [r7, #28]
 801161e:	e00e      	b.n	801163e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	4013      	ands	r3, r2
 8011626:	2b00      	cmp	r3, #0
 8011628:	d109      	bne.n	801163e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d003      	beq.n	8011638 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011630:	f06f 0301 	mvn.w	r3, #1
 8011634:	61fb      	str	r3, [r7, #28]
 8011636:	e002      	b.n	801163e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011638:	f06f 0302 	mvn.w	r3, #2
 801163c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801163e:	69fb      	ldr	r3, [r7, #28]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3728      	adds	r7, #40	; 0x28
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011648:	b580      	push	{r7, lr}
 801164a:	b08a      	sub	sp, #40	; 0x28
 801164c:	af02      	add	r7, sp, #8
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	60b9      	str	r1, [r7, #8]
 8011652:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011654:	2300      	movs	r3, #0
 8011656:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011658:	f3ef 8305 	mrs	r3, IPSR
 801165c:	613b      	str	r3, [r7, #16]
  return(result);
 801165e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011660:	2b00      	cmp	r3, #0
 8011662:	d15f      	bne.n	8011724 <osMessageQueueNew+0xdc>
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d05c      	beq.n	8011724 <osMessageQueueNew+0xdc>
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d059      	beq.n	8011724 <osMessageQueueNew+0xdc>
    mem = -1;
 8011670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011674:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d029      	beq.n	80116d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d012      	beq.n	80116aa <osMessageQueueNew+0x62>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	2b4f      	cmp	r3, #79	; 0x4f
 801168a:	d90e      	bls.n	80116aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00a      	beq.n	80116aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	695a      	ldr	r2, [r3, #20]
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	68b9      	ldr	r1, [r7, #8]
 801169c:	fb01 f303 	mul.w	r3, r1, r3
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d302      	bcc.n	80116aa <osMessageQueueNew+0x62>
        mem = 1;
 80116a4:	2301      	movs	r3, #1
 80116a6:	61bb      	str	r3, [r7, #24]
 80116a8:	e014      	b.n	80116d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d110      	bne.n	80116d4 <osMessageQueueNew+0x8c>
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d10c      	bne.n	80116d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d108      	bne.n	80116d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	695b      	ldr	r3, [r3, #20]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d104      	bne.n	80116d4 <osMessageQueueNew+0x8c>
          mem = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	61bb      	str	r3, [r7, #24]
 80116ce:	e001      	b.n	80116d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80116d0:	2300      	movs	r3, #0
 80116d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d10b      	bne.n	80116f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	691a      	ldr	r2, [r3, #16]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	2100      	movs	r1, #0
 80116e4:	9100      	str	r1, [sp, #0]
 80116e6:	68b9      	ldr	r1, [r7, #8]
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f000 fc3d 	bl	8011f68 <xQueueGenericCreateStatic>
 80116ee:	61f8      	str	r0, [r7, #28]
 80116f0:	e008      	b.n	8011704 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d105      	bne.n	8011704 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80116f8:	2200      	movs	r2, #0
 80116fa:	68b9      	ldr	r1, [r7, #8]
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f000 fcab 	bl	8012058 <xQueueGenericCreate>
 8011702:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00c      	beq.n	8011724 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d003      	beq.n	8011718 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	617b      	str	r3, [r7, #20]
 8011716:	e001      	b.n	801171c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011718:	2300      	movs	r3, #0
 801171a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801171c:	6979      	ldr	r1, [r7, #20]
 801171e:	69f8      	ldr	r0, [r7, #28]
 8011720:	f001 f93e 	bl	80129a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011724:	69fb      	ldr	r3, [r7, #28]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3720      	adds	r7, #32
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
	...

08011730 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011730:	b580      	push	{r7, lr}
 8011732:	b088      	sub	sp, #32
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	603b      	str	r3, [r7, #0]
 801173c:	4613      	mov	r3, r2
 801173e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011744:	2300      	movs	r3, #0
 8011746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011748:	f3ef 8305 	mrs	r3, IPSR
 801174c:	617b      	str	r3, [r7, #20]
  return(result);
 801174e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011750:	2b00      	cmp	r3, #0
 8011752:	d028      	beq.n	80117a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d005      	beq.n	8011766 <osMessageQueuePut+0x36>
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d002      	beq.n	8011766 <osMessageQueuePut+0x36>
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d003      	beq.n	801176e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011766:	f06f 0303 	mvn.w	r3, #3
 801176a:	61fb      	str	r3, [r7, #28]
 801176c:	e038      	b.n	80117e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801176e:	2300      	movs	r3, #0
 8011770:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011772:	f107 0210 	add.w	r2, r7, #16
 8011776:	2300      	movs	r3, #0
 8011778:	68b9      	ldr	r1, [r7, #8]
 801177a:	69b8      	ldr	r0, [r7, #24]
 801177c:	f000 fdc8 	bl	8012310 <xQueueGenericSendFromISR>
 8011780:	4603      	mov	r3, r0
 8011782:	2b01      	cmp	r3, #1
 8011784:	d003      	beq.n	801178e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011786:	f06f 0302 	mvn.w	r3, #2
 801178a:	61fb      	str	r3, [r7, #28]
 801178c:	e028      	b.n	80117e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d025      	beq.n	80117e0 <osMessageQueuePut+0xb0>
 8011794:	4b15      	ldr	r3, [pc, #84]	; (80117ec <osMessageQueuePut+0xbc>)
 8011796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	e01c      	b.n	80117e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d002      	beq.n	80117b2 <osMessageQueuePut+0x82>
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d103      	bne.n	80117ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80117b2:	f06f 0303 	mvn.w	r3, #3
 80117b6:	61fb      	str	r3, [r7, #28]
 80117b8:	e012      	b.n	80117e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80117ba:	2300      	movs	r3, #0
 80117bc:	683a      	ldr	r2, [r7, #0]
 80117be:	68b9      	ldr	r1, [r7, #8]
 80117c0:	69b8      	ldr	r0, [r7, #24]
 80117c2:	f000 fca7 	bl	8012114 <xQueueGenericSend>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d009      	beq.n	80117e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d003      	beq.n	80117da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80117d2:	f06f 0301 	mvn.w	r3, #1
 80117d6:	61fb      	str	r3, [r7, #28]
 80117d8:	e002      	b.n	80117e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80117da:	f06f 0302 	mvn.w	r3, #2
 80117de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80117e0:	69fb      	ldr	r3, [r7, #28]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3720      	adds	r7, #32
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	e000ed04 	.word	0xe000ed04

080117f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011802:	2300      	movs	r3, #0
 8011804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011806:	f3ef 8305 	mrs	r3, IPSR
 801180a:	617b      	str	r3, [r7, #20]
  return(result);
 801180c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801180e:	2b00      	cmp	r3, #0
 8011810:	d028      	beq.n	8011864 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d005      	beq.n	8011824 <osMessageQueueGet+0x34>
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d002      	beq.n	8011824 <osMessageQueueGet+0x34>
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d003      	beq.n	801182c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011824:	f06f 0303 	mvn.w	r3, #3
 8011828:	61fb      	str	r3, [r7, #28]
 801182a:	e037      	b.n	801189c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801182c:	2300      	movs	r3, #0
 801182e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011830:	f107 0310 	add.w	r3, r7, #16
 8011834:	461a      	mov	r2, r3
 8011836:	68b9      	ldr	r1, [r7, #8]
 8011838:	69b8      	ldr	r0, [r7, #24]
 801183a:	f000 fee5 	bl	8012608 <xQueueReceiveFromISR>
 801183e:	4603      	mov	r3, r0
 8011840:	2b01      	cmp	r3, #1
 8011842:	d003      	beq.n	801184c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011844:	f06f 0302 	mvn.w	r3, #2
 8011848:	61fb      	str	r3, [r7, #28]
 801184a:	e027      	b.n	801189c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d024      	beq.n	801189c <osMessageQueueGet+0xac>
 8011852:	4b15      	ldr	r3, [pc, #84]	; (80118a8 <osMessageQueueGet+0xb8>)
 8011854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	e01b      	b.n	801189c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <osMessageQueueGet+0x80>
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d103      	bne.n	8011878 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011870:	f06f 0303 	mvn.w	r3, #3
 8011874:	61fb      	str	r3, [r7, #28]
 8011876:	e011      	b.n	801189c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	68b9      	ldr	r1, [r7, #8]
 801187c:	69b8      	ldr	r0, [r7, #24]
 801187e:	f000 fde3 	bl	8012448 <xQueueReceive>
 8011882:	4603      	mov	r3, r0
 8011884:	2b01      	cmp	r3, #1
 8011886:	d009      	beq.n	801189c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d003      	beq.n	8011896 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801188e:	f06f 0301 	mvn.w	r3, #1
 8011892:	61fb      	str	r3, [r7, #28]
 8011894:	e002      	b.n	801189c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011896:	f06f 0302 	mvn.w	r3, #2
 801189a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801189c:	69fb      	ldr	r3, [r7, #28]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3720      	adds	r7, #32
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	e000ed04 	.word	0xe000ed04

080118ac <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b086      	sub	sp, #24
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d102      	bne.n	80118c4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80118be:	2300      	movs	r3, #0
 80118c0:	617b      	str	r3, [r7, #20]
 80118c2:	e00e      	b.n	80118e2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118c4:	f3ef 8305 	mrs	r3, IPSR
 80118c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80118ca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d004      	beq.n	80118da <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80118d0:	6938      	ldr	r0, [r7, #16]
 80118d2:	f000 ff37 	bl	8012744 <uxQueueMessagesWaitingFromISR>
 80118d6:	6178      	str	r0, [r7, #20]
 80118d8:	e003      	b.n	80118e2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80118da:	6938      	ldr	r0, [r7, #16]
 80118dc:	f000 ff14 	bl	8012708 <uxQueueMessagesWaiting>
 80118e0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80118e2:	697b      	ldr	r3, [r7, #20]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80118ec:	b480      	push	{r7}
 80118ee:	b085      	sub	sp, #20
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	4a07      	ldr	r2, [pc, #28]	; (8011918 <vApplicationGetIdleTaskMemory+0x2c>)
 80118fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	4a06      	ldr	r2, [pc, #24]	; (801191c <vApplicationGetIdleTaskMemory+0x30>)
 8011902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2280      	movs	r2, #128	; 0x80
 8011908:	601a      	str	r2, [r3, #0]
}
 801190a:	bf00      	nop
 801190c:	3714      	adds	r7, #20
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	24000780 	.word	0x24000780
 801191c:	240007dc 	.word	0x240007dc

08011920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011920:	b480      	push	{r7}
 8011922:	b085      	sub	sp, #20
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	4a07      	ldr	r2, [pc, #28]	; (801194c <vApplicationGetTimerTaskMemory+0x2c>)
 8011930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	4a06      	ldr	r2, [pc, #24]	; (8011950 <vApplicationGetTimerTaskMemory+0x30>)
 8011936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801193e:	601a      	str	r2, [r3, #0]
}
 8011940:	bf00      	nop
 8011942:	3714      	adds	r7, #20
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	240009dc 	.word	0x240009dc
 8011950:	24000a38 	.word	0x24000a38

08011954 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10a      	bne.n	8011978 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011974:	bf00      	nop
 8011976:	e7fe      	b.n	8011976 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011978:	2320      	movs	r3, #32
 801197a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	2b20      	cmp	r3, #32
 8011980:	d00a      	beq.n	8011998 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	60fb      	str	r3, [r7, #12]
}
 8011994:	bf00      	nop
 8011996:	e7fe      	b.n	8011996 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d00a      	beq.n	80119b8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	2200      	movs	r2, #0
 80119a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	3304      	adds	r3, #4
 80119ac:	4618      	mov	r0, r3
 80119ae:	f000 f9bf 	bl	8011d30 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2201      	movs	r2, #1
 80119b6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80119b8:	697b      	ldr	r3, [r7, #20]
	}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3718      	adds	r7, #24
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}

080119c2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b082      	sub	sp, #8
 80119c6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80119c8:	2020      	movs	r0, #32
 80119ca:	f002 fdb5 	bl	8014538 <pvPortMalloc>
 80119ce:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00a      	beq.n	80119ec <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	3304      	adds	r3, #4
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 f9a5 	bl	8011d30 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80119ec:	687b      	ldr	r3, [r7, #4]
	}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
	...

080119f8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b090      	sub	sp, #64	; 0x40
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	607a      	str	r2, [r7, #4]
 8011a04:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10a      	bne.n	8011a2e <xEventGroupWaitBits+0x36>
	__asm volatile
 8011a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1c:	f383 8811 	msr	BASEPRI, r3
 8011a20:	f3bf 8f6f 	isb	sy
 8011a24:	f3bf 8f4f 	dsb	sy
 8011a28:	623b      	str	r3, [r7, #32]
}
 8011a2a:	bf00      	nop
 8011a2c:	e7fe      	b.n	8011a2c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d00a      	beq.n	8011a4e <xEventGroupWaitBits+0x56>
	__asm volatile
 8011a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3c:	f383 8811 	msr	BASEPRI, r3
 8011a40:	f3bf 8f6f 	isb	sy
 8011a44:	f3bf 8f4f 	dsb	sy
 8011a48:	61fb      	str	r3, [r7, #28]
}
 8011a4a:	bf00      	nop
 8011a4c:	e7fe      	b.n	8011a4c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10a      	bne.n	8011a6a <xEventGroupWaitBits+0x72>
	__asm volatile
 8011a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	61bb      	str	r3, [r7, #24]
}
 8011a66:	bf00      	nop
 8011a68:	e7fe      	b.n	8011a68 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a6a:	f001 feb3 	bl	80137d4 <xTaskGetSchedulerState>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d102      	bne.n	8011a7a <xEventGroupWaitBits+0x82>
 8011a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d101      	bne.n	8011a7e <xEventGroupWaitBits+0x86>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e000      	b.n	8011a80 <xEventGroupWaitBits+0x88>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d10a      	bne.n	8011a9a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a88:	f383 8811 	msr	BASEPRI, r3
 8011a8c:	f3bf 8f6f 	isb	sy
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	617b      	str	r3, [r7, #20]
}
 8011a96:	bf00      	nop
 8011a98:	e7fe      	b.n	8011a98 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011a9a:	f001 fa1b 	bl	8012ed4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011aa4:	683a      	ldr	r2, [r7, #0]
 8011aa6:	68b9      	ldr	r1, [r7, #8]
 8011aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aaa:	f000 f90b 	bl	8011cc4 <prvTestWaitCondition>
 8011aae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00e      	beq.n	8011ad4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011aba:	2300      	movs	r3, #0
 8011abc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d028      	beq.n	8011b16 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac6:	681a      	ldr	r2, [r3, #0]
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	43db      	mvns	r3, r3
 8011acc:	401a      	ands	r2, r3
 8011ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	e020      	b.n	8011b16 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d104      	bne.n	8011ae4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011adc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011ade:	2301      	movs	r3, #1
 8011ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8011ae2:	e018      	b.n	8011b16 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d003      	beq.n	8011af2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011af0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d003      	beq.n	8011b00 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011afe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b02:	1d18      	adds	r0, r3, #4
 8011b04:	68ba      	ldr	r2, [r7, #8]
 8011b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	f001 fbd9 	bl	80132c4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011b16:	f001 f9eb 	bl	8012ef0 <xTaskResumeAll>
 8011b1a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d031      	beq.n	8011b86 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d107      	bne.n	8011b38 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011b28:	4b19      	ldr	r3, [pc, #100]	; (8011b90 <xEventGroupWaitBits+0x198>)
 8011b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b2e:	601a      	str	r2, [r3, #0]
 8011b30:	f3bf 8f4f 	dsb	sy
 8011b34:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011b38:	f001 fed8 	bl	80138ec <uxTaskResetEventItemValue>
 8011b3c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d11a      	bne.n	8011b7e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011b48:	f002 fbd4 	bl	80142f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011b52:	683a      	ldr	r2, [r7, #0]
 8011b54:	68b9      	ldr	r1, [r7, #8]
 8011b56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b58:	f000 f8b4 	bl	8011cc4 <prvTestWaitCondition>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d009      	beq.n	8011b76 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d006      	beq.n	8011b76 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	43db      	mvns	r3, r3
 8011b70:	401a      	ands	r2, r3
 8011b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b74:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011b76:	2301      	movs	r3, #1
 8011b78:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011b7a:	f002 fbeb 	bl	8014354 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011b84:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3740      	adds	r7, #64	; 0x40
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	e000ed04 	.word	0xe000ed04

08011b94 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b08e      	sub	sp, #56	; 0x38
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10a      	bne.n	8011bc6 <xEventGroupSetBits+0x32>
	__asm volatile
 8011bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb4:	f383 8811 	msr	BASEPRI, r3
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	613b      	str	r3, [r7, #16]
}
 8011bc2:	bf00      	nop
 8011bc4:	e7fe      	b.n	8011bc4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00a      	beq.n	8011be6 <xEventGroupSetBits+0x52>
	__asm volatile
 8011bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd4:	f383 8811 	msr	BASEPRI, r3
 8011bd8:	f3bf 8f6f 	isb	sy
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	60fb      	str	r3, [r7, #12]
}
 8011be2:	bf00      	nop
 8011be4:	e7fe      	b.n	8011be4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be8:	3304      	adds	r3, #4
 8011bea:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bee:	3308      	adds	r3, #8
 8011bf0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011bf2:	f001 f96f 	bl	8012ed4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	431a      	orrs	r2, r3
 8011c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c06:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011c08:	e03c      	b.n	8011c84 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011c16:	2300      	movs	r3, #0
 8011c18:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011c20:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011c28:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d108      	bne.n	8011c46 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	69bb      	ldr	r3, [r7, #24]
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00b      	beq.n	8011c58 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011c40:	2301      	movs	r3, #1
 8011c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c44:	e008      	b.n	8011c58 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	4013      	ands	r3, r2
 8011c4e:	69ba      	ldr	r2, [r7, #24]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d101      	bne.n	8011c58 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011c54:	2301      	movs	r3, #1
 8011c56:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d010      	beq.n	8011c80 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d003      	beq.n	8011c70 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011c78:	4619      	mov	r1, r3
 8011c7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011c7c:	f001 fbee 	bl	801345c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d1be      	bne.n	8011c0a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c92:	43db      	mvns	r3, r3
 8011c94:	401a      	ands	r2, r3
 8011c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c98:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011c9a:	f001 f929 	bl	8012ef0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca0:	681b      	ldr	r3, [r3, #0]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3738      	adds	r7, #56	; 0x38
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b082      	sub	sp, #8
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7ff ff6c 	bl	8011b94 <xEventGroupSetBits>
}
 8011cbc:	bf00      	nop
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b087      	sub	sp, #28
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d107      	bne.n	8011cea <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011cda:	68fa      	ldr	r2, [r7, #12]
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	4013      	ands	r3, r2
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d00a      	beq.n	8011cfa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	617b      	str	r3, [r7, #20]
 8011ce8:	e007      	b.n	8011cfa <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011cea:	68fa      	ldr	r2, [r7, #12]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	4013      	ands	r3, r2
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d101      	bne.n	8011cfa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011cfa:	697b      	ldr	r3, [r7, #20]
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	371c      	adds	r7, #28
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr

08011d08 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	68f9      	ldr	r1, [r7, #12]
 8011d1a:	4804      	ldr	r0, [pc, #16]	; (8011d2c <xEventGroupSetBitsFromISR+0x24>)
 8011d1c:	f002 f9a0 	bl	8014060 <xTimerPendFunctionCallFromISR>
 8011d20:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011d22:	697b      	ldr	r3, [r7, #20]
	}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	08011cab 	.word	0x08011cab

08011d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011d30:	b480      	push	{r7}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f103 0208 	add.w	r2, r3, #8
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f103 0208 	add.w	r2, r3, #8
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f103 0208 	add.w	r2, r3, #8
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2200      	movs	r2, #0
 8011d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d64:	bf00      	nop
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d7e:	bf00      	nop
 8011d80:	370c      	adds	r7, #12
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr

08011d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d8a:	b480      	push	{r7}
 8011d8c:	b085      	sub	sp, #20
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	6078      	str	r0, [r7, #4]
 8011d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	689a      	ldr	r2, [r3, #8]
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	683a      	ldr	r2, [r7, #0]
 8011db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	1c5a      	adds	r2, r3, #1
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	601a      	str	r2, [r3, #0]
}
 8011dc6:	bf00      	nop
 8011dc8:	3714      	adds	r7, #20
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b085      	sub	sp, #20
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
 8011dda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011de8:	d103      	bne.n	8011df2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	691b      	ldr	r3, [r3, #16]
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	e00c      	b.n	8011e0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	3308      	adds	r3, #8
 8011df6:	60fb      	str	r3, [r7, #12]
 8011df8:	e002      	b.n	8011e00 <vListInsert+0x2e>
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	60fb      	str	r3, [r7, #12]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68ba      	ldr	r2, [r7, #8]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d2f6      	bcs.n	8011dfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	685a      	ldr	r2, [r3, #4]
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	683a      	ldr	r2, [r7, #0]
 8011e26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	1c5a      	adds	r2, r3, #1
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	601a      	str	r2, [r3, #0]
}
 8011e38:	bf00      	nop
 8011e3a:	3714      	adds	r7, #20
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr

08011e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	691b      	ldr	r3, [r3, #16]
 8011e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	6892      	ldr	r2, [r2, #8]
 8011e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	6852      	ldr	r2, [r2, #4]
 8011e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d103      	bne.n	8011e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	689a      	ldr	r2, [r3, #8]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	1e5a      	subs	r2, r3, #1
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10a      	bne.n	8011ec2 <xQueueGenericReset+0x2a>
	__asm volatile
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	60bb      	str	r3, [r7, #8]
}
 8011ebe:	bf00      	nop
 8011ec0:	e7fe      	b.n	8011ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011ec2:	f002 fa17 	bl	80142f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ece:	68f9      	ldr	r1, [r7, #12]
 8011ed0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ed2:	fb01 f303 	mul.w	r3, r1, r3
 8011ed6:	441a      	add	r2, r3
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	68f9      	ldr	r1, [r7, #12]
 8011ef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ef8:	fb01 f303 	mul.w	r3, r1, r3
 8011efc:	441a      	add	r2, r3
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	22ff      	movs	r2, #255	; 0xff
 8011f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	22ff      	movs	r2, #255	; 0xff
 8011f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d114      	bne.n	8011f42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d01a      	beq.n	8011f56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	3310      	adds	r3, #16
 8011f24:	4618      	mov	r0, r3
 8011f26:	f001 fa35 	bl	8013394 <xTaskRemoveFromEventList>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d012      	beq.n	8011f56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011f30:	4b0c      	ldr	r3, [pc, #48]	; (8011f64 <xQueueGenericReset+0xcc>)
 8011f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f36:	601a      	str	r2, [r3, #0]
 8011f38:	f3bf 8f4f 	dsb	sy
 8011f3c:	f3bf 8f6f 	isb	sy
 8011f40:	e009      	b.n	8011f56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	3310      	adds	r3, #16
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7ff fef2 	bl	8011d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	3324      	adds	r3, #36	; 0x24
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7ff feed 	bl	8011d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011f56:	f002 f9fd 	bl	8014354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011f5a:	2301      	movs	r3, #1
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	e000ed04 	.word	0xe000ed04

08011f68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b08e      	sub	sp, #56	; 0x38
 8011f6c:	af02      	add	r7, sp, #8
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	607a      	str	r2, [r7, #4]
 8011f74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10a      	bne.n	8011f92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f80:	f383 8811 	msr	BASEPRI, r3
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	f3bf 8f4f 	dsb	sy
 8011f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011f8e:	bf00      	nop
 8011f90:	e7fe      	b.n	8011f90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d10a      	bne.n	8011fae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011faa:	bf00      	nop
 8011fac:	e7fe      	b.n	8011fac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d002      	beq.n	8011fba <xQueueGenericCreateStatic+0x52>
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d001      	beq.n	8011fbe <xQueueGenericCreateStatic+0x56>
 8011fba:	2301      	movs	r3, #1
 8011fbc:	e000      	b.n	8011fc0 <xQueueGenericCreateStatic+0x58>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10a      	bne.n	8011fda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc8:	f383 8811 	msr	BASEPRI, r3
 8011fcc:	f3bf 8f6f 	isb	sy
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	623b      	str	r3, [r7, #32]
}
 8011fd6:	bf00      	nop
 8011fd8:	e7fe      	b.n	8011fd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d102      	bne.n	8011fe6 <xQueueGenericCreateStatic+0x7e>
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <xQueueGenericCreateStatic+0x82>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	e000      	b.n	8011fec <xQueueGenericCreateStatic+0x84>
 8011fea:	2300      	movs	r3, #0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10a      	bne.n	8012006 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff4:	f383 8811 	msr	BASEPRI, r3
 8011ff8:	f3bf 8f6f 	isb	sy
 8011ffc:	f3bf 8f4f 	dsb	sy
 8012000:	61fb      	str	r3, [r7, #28]
}
 8012002:	bf00      	nop
 8012004:	e7fe      	b.n	8012004 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012006:	2350      	movs	r3, #80	; 0x50
 8012008:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b50      	cmp	r3, #80	; 0x50
 801200e:	d00a      	beq.n	8012026 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012014:	f383 8811 	msr	BASEPRI, r3
 8012018:	f3bf 8f6f 	isb	sy
 801201c:	f3bf 8f4f 	dsb	sy
 8012020:	61bb      	str	r3, [r7, #24]
}
 8012022:	bf00      	nop
 8012024:	e7fe      	b.n	8012024 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012026:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202e:	2b00      	cmp	r3, #0
 8012030:	d00d      	beq.n	801204e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012034:	2201      	movs	r2, #1
 8012036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801203a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	4613      	mov	r3, r2
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	68b9      	ldr	r1, [r7, #8]
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	f000 f83f 	bl	80120cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012050:	4618      	mov	r0, r3
 8012052:	3730      	adds	r7, #48	; 0x30
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012058:	b580      	push	{r7, lr}
 801205a:	b08a      	sub	sp, #40	; 0x28
 801205c:	af02      	add	r7, sp, #8
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	4613      	mov	r3, r2
 8012064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10a      	bne.n	8012082 <xQueueGenericCreate+0x2a>
	__asm volatile
 801206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012070:	f383 8811 	msr	BASEPRI, r3
 8012074:	f3bf 8f6f 	isb	sy
 8012078:	f3bf 8f4f 	dsb	sy
 801207c:	613b      	str	r3, [r7, #16]
}
 801207e:	bf00      	nop
 8012080:	e7fe      	b.n	8012080 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	68ba      	ldr	r2, [r7, #8]
 8012086:	fb02 f303 	mul.w	r3, r2, r3
 801208a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	3350      	adds	r3, #80	; 0x50
 8012090:	4618      	mov	r0, r3
 8012092:	f002 fa51 	bl	8014538 <pvPortMalloc>
 8012096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d011      	beq.n	80120c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	3350      	adds	r3, #80	; 0x50
 80120a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80120a8:	69bb      	ldr	r3, [r7, #24]
 80120aa:	2200      	movs	r2, #0
 80120ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120b0:	79fa      	ldrb	r2, [r7, #7]
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	9300      	str	r3, [sp, #0]
 80120b6:	4613      	mov	r3, r2
 80120b8:	697a      	ldr	r2, [r7, #20]
 80120ba:	68b9      	ldr	r1, [r7, #8]
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f000 f805 	bl	80120cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80120c2:	69bb      	ldr	r3, [r7, #24]
	}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3720      	adds	r7, #32
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
 80120d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d103      	bne.n	80120e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	69ba      	ldr	r2, [r7, #24]
 80120e4:	601a      	str	r2, [r3, #0]
 80120e6:	e002      	b.n	80120ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	68fa      	ldr	r2, [r7, #12]
 80120f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80120f4:	69bb      	ldr	r3, [r7, #24]
 80120f6:	68ba      	ldr	r2, [r7, #8]
 80120f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80120fa:	2101      	movs	r1, #1
 80120fc:	69b8      	ldr	r0, [r7, #24]
 80120fe:	f7ff fecb 	bl	8011e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	78fa      	ldrb	r2, [r7, #3]
 8012106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801210a:	bf00      	nop
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
	...

08012114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b08e      	sub	sp, #56	; 0x38
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
 8012120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012122:	2300      	movs	r3, #0
 8012124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10a      	bne.n	8012146 <xQueueGenericSend+0x32>
	__asm volatile
 8012130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012142:	bf00      	nop
 8012144:	e7fe      	b.n	8012144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d103      	bne.n	8012154 <xQueueGenericSend+0x40>
 801214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012150:	2b00      	cmp	r3, #0
 8012152:	d101      	bne.n	8012158 <xQueueGenericSend+0x44>
 8012154:	2301      	movs	r3, #1
 8012156:	e000      	b.n	801215a <xQueueGenericSend+0x46>
 8012158:	2300      	movs	r3, #0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d10a      	bne.n	8012174 <xQueueGenericSend+0x60>
	__asm volatile
 801215e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012162:	f383 8811 	msr	BASEPRI, r3
 8012166:	f3bf 8f6f 	isb	sy
 801216a:	f3bf 8f4f 	dsb	sy
 801216e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012170:	bf00      	nop
 8012172:	e7fe      	b.n	8012172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2b02      	cmp	r3, #2
 8012178:	d103      	bne.n	8012182 <xQueueGenericSend+0x6e>
 801217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801217e:	2b01      	cmp	r3, #1
 8012180:	d101      	bne.n	8012186 <xQueueGenericSend+0x72>
 8012182:	2301      	movs	r3, #1
 8012184:	e000      	b.n	8012188 <xQueueGenericSend+0x74>
 8012186:	2300      	movs	r3, #0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d10a      	bne.n	80121a2 <xQueueGenericSend+0x8e>
	__asm volatile
 801218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012190:	f383 8811 	msr	BASEPRI, r3
 8012194:	f3bf 8f6f 	isb	sy
 8012198:	f3bf 8f4f 	dsb	sy
 801219c:	623b      	str	r3, [r7, #32]
}
 801219e:	bf00      	nop
 80121a0:	e7fe      	b.n	80121a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121a2:	f001 fb17 	bl	80137d4 <xTaskGetSchedulerState>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d102      	bne.n	80121b2 <xQueueGenericSend+0x9e>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d101      	bne.n	80121b6 <xQueueGenericSend+0xa2>
 80121b2:	2301      	movs	r3, #1
 80121b4:	e000      	b.n	80121b8 <xQueueGenericSend+0xa4>
 80121b6:	2300      	movs	r3, #0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d10a      	bne.n	80121d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	f383 8811 	msr	BASEPRI, r3
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	61fb      	str	r3, [r7, #28]
}
 80121ce:	bf00      	nop
 80121d0:	e7fe      	b.n	80121d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121d2:	f002 f88f 	bl	80142f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80121d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121de:	429a      	cmp	r2, r3
 80121e0:	d302      	bcc.n	80121e8 <xQueueGenericSend+0xd4>
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d129      	bne.n	801223c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80121e8:	683a      	ldr	r2, [r7, #0]
 80121ea:	68b9      	ldr	r1, [r7, #8]
 80121ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121ee:	f000 fac7 	bl	8012780 <prvCopyDataToQueue>
 80121f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80121f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d010      	beq.n	801221e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80121fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121fe:	3324      	adds	r3, #36	; 0x24
 8012200:	4618      	mov	r0, r3
 8012202:	f001 f8c7 	bl	8013394 <xTaskRemoveFromEventList>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d013      	beq.n	8012234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801220c:	4b3f      	ldr	r3, [pc, #252]	; (801230c <xQueueGenericSend+0x1f8>)
 801220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	f3bf 8f6f 	isb	sy
 801221c:	e00a      	b.n	8012234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012220:	2b00      	cmp	r3, #0
 8012222:	d007      	beq.n	8012234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012224:	4b39      	ldr	r3, [pc, #228]	; (801230c <xQueueGenericSend+0x1f8>)
 8012226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801222a:	601a      	str	r2, [r3, #0]
 801222c:	f3bf 8f4f 	dsb	sy
 8012230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012234:	f002 f88e 	bl	8014354 <vPortExitCritical>
				return pdPASS;
 8012238:	2301      	movs	r3, #1
 801223a:	e063      	b.n	8012304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d103      	bne.n	801224a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012242:	f002 f887 	bl	8014354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012246:	2300      	movs	r3, #0
 8012248:	e05c      	b.n	8012304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224c:	2b00      	cmp	r3, #0
 801224e:	d106      	bne.n	801225e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012250:	f107 0314 	add.w	r3, r7, #20
 8012254:	4618      	mov	r0, r3
 8012256:	f001 f963 	bl	8013520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801225a:	2301      	movs	r3, #1
 801225c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801225e:	f002 f879 	bl	8014354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012262:	f000 fe37 	bl	8012ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012266:	f002 f845 	bl	80142f4 <vPortEnterCritical>
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012270:	b25b      	sxtb	r3, r3
 8012272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012276:	d103      	bne.n	8012280 <xQueueGenericSend+0x16c>
 8012278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227a:	2200      	movs	r2, #0
 801227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012286:	b25b      	sxtb	r3, r3
 8012288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801228c:	d103      	bne.n	8012296 <xQueueGenericSend+0x182>
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	2200      	movs	r2, #0
 8012292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012296:	f002 f85d 	bl	8014354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801229a:	1d3a      	adds	r2, r7, #4
 801229c:	f107 0314 	add.w	r3, r7, #20
 80122a0:	4611      	mov	r1, r2
 80122a2:	4618      	mov	r0, r3
 80122a4:	f001 f952 	bl	801354c <xTaskCheckForTimeOut>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d124      	bne.n	80122f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80122ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122b0:	f000 fb5e 	bl	8012970 <prvIsQueueFull>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d018      	beq.n	80122ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80122ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122bc:	3310      	adds	r3, #16
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f000 ffda 	bl	801327c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80122c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ca:	f000 fae9 	bl	80128a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80122ce:	f000 fe0f 	bl	8012ef0 <xTaskResumeAll>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f47f af7c 	bne.w	80121d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80122da:	4b0c      	ldr	r3, [pc, #48]	; (801230c <xQueueGenericSend+0x1f8>)
 80122dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	e772      	b.n	80121d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80122ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ee:	f000 fad7 	bl	80128a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122f2:	f000 fdfd 	bl	8012ef0 <xTaskResumeAll>
 80122f6:	e76c      	b.n	80121d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80122f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122fa:	f000 fad1 	bl	80128a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122fe:	f000 fdf7 	bl	8012ef0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012304:	4618      	mov	r0, r3
 8012306:	3738      	adds	r7, #56	; 0x38
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	e000ed04 	.word	0xe000ed04

08012310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b090      	sub	sp, #64	; 0x40
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
 801231c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10a      	bne.n	801233e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232c:	f383 8811 	msr	BASEPRI, r3
 8012330:	f3bf 8f6f 	isb	sy
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801233a:	bf00      	nop
 801233c:	e7fe      	b.n	801233c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d103      	bne.n	801234c <xQueueGenericSendFromISR+0x3c>
 8012344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012348:	2b00      	cmp	r3, #0
 801234a:	d101      	bne.n	8012350 <xQueueGenericSendFromISR+0x40>
 801234c:	2301      	movs	r3, #1
 801234e:	e000      	b.n	8012352 <xQueueGenericSendFromISR+0x42>
 8012350:	2300      	movs	r3, #0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d10a      	bne.n	801236c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235a:	f383 8811 	msr	BASEPRI, r3
 801235e:	f3bf 8f6f 	isb	sy
 8012362:	f3bf 8f4f 	dsb	sy
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012368:	bf00      	nop
 801236a:	e7fe      	b.n	801236a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	2b02      	cmp	r3, #2
 8012370:	d103      	bne.n	801237a <xQueueGenericSendFromISR+0x6a>
 8012372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012376:	2b01      	cmp	r3, #1
 8012378:	d101      	bne.n	801237e <xQueueGenericSendFromISR+0x6e>
 801237a:	2301      	movs	r3, #1
 801237c:	e000      	b.n	8012380 <xQueueGenericSendFromISR+0x70>
 801237e:	2300      	movs	r3, #0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10a      	bne.n	801239a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012388:	f383 8811 	msr	BASEPRI, r3
 801238c:	f3bf 8f6f 	isb	sy
 8012390:	f3bf 8f4f 	dsb	sy
 8012394:	623b      	str	r3, [r7, #32]
}
 8012396:	bf00      	nop
 8012398:	e7fe      	b.n	8012398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801239a:	f002 f88d 	bl	80144b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801239e:	f3ef 8211 	mrs	r2, BASEPRI
 80123a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a6:	f383 8811 	msr	BASEPRI, r3
 80123aa:	f3bf 8f6f 	isb	sy
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	61fa      	str	r2, [r7, #28]
 80123b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80123b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80123ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d302      	bcc.n	80123cc <xQueueGenericSendFromISR+0xbc>
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	2b02      	cmp	r3, #2
 80123ca:	d12f      	bne.n	801242c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80123cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80123dc:	683a      	ldr	r2, [r7, #0]
 80123de:	68b9      	ldr	r1, [r7, #8]
 80123e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123e2:	f000 f9cd 	bl	8012780 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80123e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80123ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123ee:	d112      	bne.n	8012416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d016      	beq.n	8012426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fa:	3324      	adds	r3, #36	; 0x24
 80123fc:	4618      	mov	r0, r3
 80123fe:	f000 ffc9 	bl	8013394 <xTaskRemoveFromEventList>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d00e      	beq.n	8012426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00b      	beq.n	8012426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2201      	movs	r2, #1
 8012412:	601a      	str	r2, [r3, #0]
 8012414:	e007      	b.n	8012426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801241a:	3301      	adds	r3, #1
 801241c:	b2db      	uxtb	r3, r3
 801241e:	b25a      	sxtb	r2, r3
 8012420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012426:	2301      	movs	r3, #1
 8012428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801242a:	e001      	b.n	8012430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801242c:	2300      	movs	r3, #0
 801242e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801243a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801243c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801243e:	4618      	mov	r0, r3
 8012440:	3740      	adds	r7, #64	; 0x40
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
	...

08012448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b08c      	sub	sp, #48	; 0x30
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012454:	2300      	movs	r3, #0
 8012456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245e:	2b00      	cmp	r3, #0
 8012460:	d10a      	bne.n	8012478 <xQueueReceive+0x30>
	__asm volatile
 8012462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012466:	f383 8811 	msr	BASEPRI, r3
 801246a:	f3bf 8f6f 	isb	sy
 801246e:	f3bf 8f4f 	dsb	sy
 8012472:	623b      	str	r3, [r7, #32]
}
 8012474:	bf00      	nop
 8012476:	e7fe      	b.n	8012476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d103      	bne.n	8012486 <xQueueReceive+0x3e>
 801247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012482:	2b00      	cmp	r3, #0
 8012484:	d101      	bne.n	801248a <xQueueReceive+0x42>
 8012486:	2301      	movs	r3, #1
 8012488:	e000      	b.n	801248c <xQueueReceive+0x44>
 801248a:	2300      	movs	r3, #0
 801248c:	2b00      	cmp	r3, #0
 801248e:	d10a      	bne.n	80124a6 <xQueueReceive+0x5e>
	__asm volatile
 8012490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012494:	f383 8811 	msr	BASEPRI, r3
 8012498:	f3bf 8f6f 	isb	sy
 801249c:	f3bf 8f4f 	dsb	sy
 80124a0:	61fb      	str	r3, [r7, #28]
}
 80124a2:	bf00      	nop
 80124a4:	e7fe      	b.n	80124a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124a6:	f001 f995 	bl	80137d4 <xTaskGetSchedulerState>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d102      	bne.n	80124b6 <xQueueReceive+0x6e>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d101      	bne.n	80124ba <xQueueReceive+0x72>
 80124b6:	2301      	movs	r3, #1
 80124b8:	e000      	b.n	80124bc <xQueueReceive+0x74>
 80124ba:	2300      	movs	r3, #0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10a      	bne.n	80124d6 <xQueueReceive+0x8e>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	61bb      	str	r3, [r7, #24]
}
 80124d2:	bf00      	nop
 80124d4:	e7fe      	b.n	80124d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124d6:	f001 ff0d 	bl	80142f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80124e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d01f      	beq.n	8012526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80124e6:	68b9      	ldr	r1, [r7, #8]
 80124e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124ea:	f000 f9b3 	bl	8012854 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	1e5a      	subs	r2, r3, #1
 80124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	691b      	ldr	r3, [r3, #16]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d00f      	beq.n	801251e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012500:	3310      	adds	r3, #16
 8012502:	4618      	mov	r0, r3
 8012504:	f000 ff46 	bl	8013394 <xTaskRemoveFromEventList>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d007      	beq.n	801251e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801250e:	4b3d      	ldr	r3, [pc, #244]	; (8012604 <xQueueReceive+0x1bc>)
 8012510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012514:	601a      	str	r2, [r3, #0]
 8012516:	f3bf 8f4f 	dsb	sy
 801251a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801251e:	f001 ff19 	bl	8014354 <vPortExitCritical>
				return pdPASS;
 8012522:	2301      	movs	r3, #1
 8012524:	e069      	b.n	80125fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d103      	bne.n	8012534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801252c:	f001 ff12 	bl	8014354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012530:	2300      	movs	r3, #0
 8012532:	e062      	b.n	80125fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012536:	2b00      	cmp	r3, #0
 8012538:	d106      	bne.n	8012548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801253a:	f107 0310 	add.w	r3, r7, #16
 801253e:	4618      	mov	r0, r3
 8012540:	f000 ffee 	bl	8013520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012544:	2301      	movs	r3, #1
 8012546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012548:	f001 ff04 	bl	8014354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801254c:	f000 fcc2 	bl	8012ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012550:	f001 fed0 	bl	80142f4 <vPortEnterCritical>
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801255a:	b25b      	sxtb	r3, r3
 801255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012560:	d103      	bne.n	801256a <xQueueReceive+0x122>
 8012562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012564:	2200      	movs	r2, #0
 8012566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012570:	b25b      	sxtb	r3, r3
 8012572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012576:	d103      	bne.n	8012580 <xQueueReceive+0x138>
 8012578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801257a:	2200      	movs	r2, #0
 801257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012580:	f001 fee8 	bl	8014354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012584:	1d3a      	adds	r2, r7, #4
 8012586:	f107 0310 	add.w	r3, r7, #16
 801258a:	4611      	mov	r1, r2
 801258c:	4618      	mov	r0, r3
 801258e:	f000 ffdd 	bl	801354c <xTaskCheckForTimeOut>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	d123      	bne.n	80125e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801259a:	f000 f9d3 	bl	8012944 <prvIsQueueEmpty>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d017      	beq.n	80125d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80125a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a6:	3324      	adds	r3, #36	; 0x24
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	4611      	mov	r1, r2
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 fe65 	bl	801327c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80125b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125b4:	f000 f974 	bl	80128a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80125b8:	f000 fc9a 	bl	8012ef0 <xTaskResumeAll>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d189      	bne.n	80124d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80125c2:	4b10      	ldr	r3, [pc, #64]	; (8012604 <xQueueReceive+0x1bc>)
 80125c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125c8:	601a      	str	r2, [r3, #0]
 80125ca:	f3bf 8f4f 	dsb	sy
 80125ce:	f3bf 8f6f 	isb	sy
 80125d2:	e780      	b.n	80124d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80125d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125d6:	f000 f963 	bl	80128a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125da:	f000 fc89 	bl	8012ef0 <xTaskResumeAll>
 80125de:	e77a      	b.n	80124d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80125e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125e2:	f000 f95d 	bl	80128a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125e6:	f000 fc83 	bl	8012ef0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125ec:	f000 f9aa 	bl	8012944 <prvIsQueueEmpty>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f43f af6f 	beq.w	80124d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80125f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3730      	adds	r7, #48	; 0x30
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	e000ed04 	.word	0xe000ed04

08012608 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b08e      	sub	sp, #56	; 0x38
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10a      	bne.n	8012634 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012622:	f383 8811 	msr	BASEPRI, r3
 8012626:	f3bf 8f6f 	isb	sy
 801262a:	f3bf 8f4f 	dsb	sy
 801262e:	623b      	str	r3, [r7, #32]
}
 8012630:	bf00      	nop
 8012632:	e7fe      	b.n	8012632 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d103      	bne.n	8012642 <xQueueReceiveFromISR+0x3a>
 801263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801263e:	2b00      	cmp	r3, #0
 8012640:	d101      	bne.n	8012646 <xQueueReceiveFromISR+0x3e>
 8012642:	2301      	movs	r3, #1
 8012644:	e000      	b.n	8012648 <xQueueReceiveFromISR+0x40>
 8012646:	2300      	movs	r3, #0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d10a      	bne.n	8012662 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012650:	f383 8811 	msr	BASEPRI, r3
 8012654:	f3bf 8f6f 	isb	sy
 8012658:	f3bf 8f4f 	dsb	sy
 801265c:	61fb      	str	r3, [r7, #28]
}
 801265e:	bf00      	nop
 8012660:	e7fe      	b.n	8012660 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012662:	f001 ff29 	bl	80144b8 <vPortValidateInterruptPriority>
	__asm volatile
 8012666:	f3ef 8211 	mrs	r2, BASEPRI
 801266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266e:	f383 8811 	msr	BASEPRI, r3
 8012672:	f3bf 8f6f 	isb	sy
 8012676:	f3bf 8f4f 	dsb	sy
 801267a:	61ba      	str	r2, [r7, #24]
 801267c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801267e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012680:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012686:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268a:	2b00      	cmp	r3, #0
 801268c:	d02f      	beq.n	80126ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012698:	68b9      	ldr	r1, [r7, #8]
 801269a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801269c:	f000 f8da 	bl	8012854 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80126a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a2:	1e5a      	subs	r2, r3, #1
 80126a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80126a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126b0:	d112      	bne.n	80126d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	691b      	ldr	r3, [r3, #16]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d016      	beq.n	80126e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126bc:	3310      	adds	r3, #16
 80126be:	4618      	mov	r0, r3
 80126c0:	f000 fe68 	bl	8013394 <xTaskRemoveFromEventList>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d00e      	beq.n	80126e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00b      	beq.n	80126e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2201      	movs	r2, #1
 80126d4:	601a      	str	r2, [r3, #0]
 80126d6:	e007      	b.n	80126e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80126d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126dc:	3301      	adds	r3, #1
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	b25a      	sxtb	r2, r3
 80126e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80126e8:	2301      	movs	r3, #1
 80126ea:	637b      	str	r3, [r7, #52]	; 0x34
 80126ec:	e001      	b.n	80126f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80126ee:	2300      	movs	r3, #0
 80126f0:	637b      	str	r3, [r7, #52]	; 0x34
 80126f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	f383 8811 	msr	BASEPRI, r3
}
 80126fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80126fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012700:	4618      	mov	r0, r3
 8012702:	3738      	adds	r7, #56	; 0x38
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d10a      	bne.n	801272c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	60bb      	str	r3, [r7, #8]
}
 8012728:	bf00      	nop
 801272a:	e7fe      	b.n	801272a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801272c:	f001 fde2 	bl	80142f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012734:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012736:	f001 fe0d 	bl	8014354 <vPortExitCritical>

	return uxReturn;
 801273a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801273c:	4618      	mov	r0, r3
 801273e:	3710      	adds	r7, #16
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012744:	b480      	push	{r7}
 8012746:	b087      	sub	sp, #28
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d10a      	bne.n	801276c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8012756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801275a:	f383 8811 	msr	BASEPRI, r3
 801275e:	f3bf 8f6f 	isb	sy
 8012762:	f3bf 8f4f 	dsb	sy
 8012766:	60fb      	str	r3, [r7, #12]
}
 8012768:	bf00      	nop
 801276a:	e7fe      	b.n	801276a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012770:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012772:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012774:	4618      	mov	r0, r3
 8012776:	371c      	adds	r7, #28
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801278c:	2300      	movs	r3, #0
 801278e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012794:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801279a:	2b00      	cmp	r3, #0
 801279c:	d10d      	bne.n	80127ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d14d      	bne.n	8012842 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	4618      	mov	r0, r3
 80127ac:	f001 f830 	bl	8013810 <xTaskPriorityDisinherit>
 80127b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2200      	movs	r2, #0
 80127b6:	609a      	str	r2, [r3, #8]
 80127b8:	e043      	b.n	8012842 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d119      	bne.n	80127f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6858      	ldr	r0, [r3, #4]
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127c8:	461a      	mov	r2, r3
 80127ca:	68b9      	ldr	r1, [r7, #8]
 80127cc:	f002 f8d8 	bl	8014980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d8:	441a      	add	r2, r3
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	685a      	ldr	r2, [r3, #4]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d32b      	bcc.n	8012842 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	605a      	str	r2, [r3, #4]
 80127f2:	e026      	b.n	8012842 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	68d8      	ldr	r0, [r3, #12]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127fc:	461a      	mov	r2, r3
 80127fe:	68b9      	ldr	r1, [r7, #8]
 8012800:	f002 f8be 	bl	8014980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	68da      	ldr	r2, [r3, #12]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801280c:	425b      	negs	r3, r3
 801280e:	441a      	add	r2, r3
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	68da      	ldr	r2, [r3, #12]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	429a      	cmp	r2, r3
 801281e:	d207      	bcs.n	8012830 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	689a      	ldr	r2, [r3, #8]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012828:	425b      	negs	r3, r3
 801282a:	441a      	add	r2, r3
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b02      	cmp	r3, #2
 8012834:	d105      	bne.n	8012842 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	3b01      	subs	r3, #1
 8012840:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	1c5a      	adds	r2, r3, #1
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801284a:	697b      	ldr	r3, [r7, #20]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3718      	adds	r7, #24
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012862:	2b00      	cmp	r3, #0
 8012864:	d018      	beq.n	8012898 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	68da      	ldr	r2, [r3, #12]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801286e:	441a      	add	r2, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	68da      	ldr	r2, [r3, #12]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	689b      	ldr	r3, [r3, #8]
 801287c:	429a      	cmp	r2, r3
 801287e:	d303      	bcc.n	8012888 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68d9      	ldr	r1, [r3, #12]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012890:	461a      	mov	r2, r3
 8012892:	6838      	ldr	r0, [r7, #0]
 8012894:	f002 f874 	bl	8014980 <memcpy>
	}
}
 8012898:	bf00      	nop
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80128a8:	f001 fd24 	bl	80142f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128b4:	e011      	b.n	80128da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d012      	beq.n	80128e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	3324      	adds	r3, #36	; 0x24
 80128c2:	4618      	mov	r0, r3
 80128c4:	f000 fd66 	bl	8013394 <xTaskRemoveFromEventList>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80128ce:	f000 fe9f 	bl	8013610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80128d2:	7bfb      	ldrb	r3, [r7, #15]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	dce9      	bgt.n	80128b6 <prvUnlockQueue+0x16>
 80128e2:	e000      	b.n	80128e6 <prvUnlockQueue+0x46>
					break;
 80128e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	22ff      	movs	r2, #255	; 0xff
 80128ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80128ee:	f001 fd31 	bl	8014354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80128f2:	f001 fcff 	bl	80142f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128fe:	e011      	b.n	8012924 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d012      	beq.n	801292e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	3310      	adds	r3, #16
 801290c:	4618      	mov	r0, r3
 801290e:	f000 fd41 	bl	8013394 <xTaskRemoveFromEventList>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d001      	beq.n	801291c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012918:	f000 fe7a 	bl	8013610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801291c:	7bbb      	ldrb	r3, [r7, #14]
 801291e:	3b01      	subs	r3, #1
 8012920:	b2db      	uxtb	r3, r3
 8012922:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012928:	2b00      	cmp	r3, #0
 801292a:	dce9      	bgt.n	8012900 <prvUnlockQueue+0x60>
 801292c:	e000      	b.n	8012930 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801292e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	22ff      	movs	r2, #255	; 0xff
 8012934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012938:	f001 fd0c 	bl	8014354 <vPortExitCritical>
}
 801293c:	bf00      	nop
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801294c:	f001 fcd2 	bl	80142f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012954:	2b00      	cmp	r3, #0
 8012956:	d102      	bne.n	801295e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012958:	2301      	movs	r3, #1
 801295a:	60fb      	str	r3, [r7, #12]
 801295c:	e001      	b.n	8012962 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801295e:	2300      	movs	r3, #0
 8012960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012962:	f001 fcf7 	bl	8014354 <vPortExitCritical>

	return xReturn;
 8012966:	68fb      	ldr	r3, [r7, #12]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3710      	adds	r7, #16
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012978:	f001 fcbc 	bl	80142f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012984:	429a      	cmp	r2, r3
 8012986:	d102      	bne.n	801298e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012988:	2301      	movs	r3, #1
 801298a:	60fb      	str	r3, [r7, #12]
 801298c:	e001      	b.n	8012992 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801298e:	2300      	movs	r3, #0
 8012990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012992:	f001 fcdf 	bl	8014354 <vPortExitCritical>

	return xReturn;
 8012996:	68fb      	ldr	r3, [r7, #12]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80129a0:	b480      	push	{r7}
 80129a2:	b085      	sub	sp, #20
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80129aa:	2300      	movs	r3, #0
 80129ac:	60fb      	str	r3, [r7, #12]
 80129ae:	e014      	b.n	80129da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80129b0:	4a0f      	ldr	r2, [pc, #60]	; (80129f0 <vQueueAddToRegistry+0x50>)
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d10b      	bne.n	80129d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80129bc:	490c      	ldr	r1, [pc, #48]	; (80129f0 <vQueueAddToRegistry+0x50>)
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	683a      	ldr	r2, [r7, #0]
 80129c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80129c6:	4a0a      	ldr	r2, [pc, #40]	; (80129f0 <vQueueAddToRegistry+0x50>)
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	00db      	lsls	r3, r3, #3
 80129cc:	4413      	add	r3, r2
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80129d2:	e006      	b.n	80129e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	3301      	adds	r3, #1
 80129d8:	60fb      	str	r3, [r7, #12]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2b07      	cmp	r3, #7
 80129de:	d9e7      	bls.n	80129b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80129e0:	bf00      	nop
 80129e2:	bf00      	nop
 80129e4:	3714      	adds	r7, #20
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop
 80129f0:	24000e38 	.word	0x24000e38

080129f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b086      	sub	sp, #24
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	60f8      	str	r0, [r7, #12]
 80129fc:	60b9      	str	r1, [r7, #8]
 80129fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012a04:	f001 fc76 	bl	80142f4 <vPortEnterCritical>
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a0e:	b25b      	sxtb	r3, r3
 8012a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a14:	d103      	bne.n	8012a1e <vQueueWaitForMessageRestricted+0x2a>
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a24:	b25b      	sxtb	r3, r3
 8012a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a2a:	d103      	bne.n	8012a34 <vQueueWaitForMessageRestricted+0x40>
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a34:	f001 fc8e 	bl	8014354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d106      	bne.n	8012a4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	3324      	adds	r3, #36	; 0x24
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	68b9      	ldr	r1, [r7, #8]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f000 fc77 	bl	801333c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012a4e:	6978      	ldr	r0, [r7, #20]
 8012a50:	f7ff ff26 	bl	80128a0 <prvUnlockQueue>
	}
 8012a54:	bf00      	nop
 8012a56:	3718      	adds	r7, #24
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b08e      	sub	sp, #56	; 0x38
 8012a60:	af04      	add	r7, sp, #16
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	607a      	str	r2, [r7, #4]
 8012a68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d10a      	bne.n	8012a86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
 8012a80:	623b      	str	r3, [r7, #32]
}
 8012a82:	bf00      	nop
 8012a84:	e7fe      	b.n	8012a84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10a      	bne.n	8012aa2 <xTaskCreateStatic+0x46>
	__asm volatile
 8012a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a90:	f383 8811 	msr	BASEPRI, r3
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	61fb      	str	r3, [r7, #28]
}
 8012a9e:	bf00      	nop
 8012aa0:	e7fe      	b.n	8012aa0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012aa2:	235c      	movs	r3, #92	; 0x5c
 8012aa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	2b5c      	cmp	r3, #92	; 0x5c
 8012aaa:	d00a      	beq.n	8012ac2 <xTaskCreateStatic+0x66>
	__asm volatile
 8012aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab0:	f383 8811 	msr	BASEPRI, r3
 8012ab4:	f3bf 8f6f 	isb	sy
 8012ab8:	f3bf 8f4f 	dsb	sy
 8012abc:	61bb      	str	r3, [r7, #24]
}
 8012abe:	bf00      	nop
 8012ac0:	e7fe      	b.n	8012ac0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012ac2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01e      	beq.n	8012b08 <xTaskCreateStatic+0xac>
 8012aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d01b      	beq.n	8012b08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ad8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012adc:	2202      	movs	r2, #2
 8012ade:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	9303      	str	r3, [sp, #12]
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	9302      	str	r3, [sp, #8]
 8012aea:	f107 0314 	add.w	r3, r7, #20
 8012aee:	9301      	str	r3, [sp, #4]
 8012af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af2:	9300      	str	r3, [sp, #0]
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	68b9      	ldr	r1, [r7, #8]
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	f000 f850 	bl	8012ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b02:	f000 f8dd 	bl	8012cc0 <prvAddNewTaskToReadyList>
 8012b06:	e001      	b.n	8012b0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012b0c:	697b      	ldr	r3, [r7, #20]
	}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3728      	adds	r7, #40	; 0x28
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b08c      	sub	sp, #48	; 0x30
 8012b1a:	af04      	add	r7, sp, #16
 8012b1c:	60f8      	str	r0, [r7, #12]
 8012b1e:	60b9      	str	r1, [r7, #8]
 8012b20:	603b      	str	r3, [r7, #0]
 8012b22:	4613      	mov	r3, r2
 8012b24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012b26:	88fb      	ldrh	r3, [r7, #6]
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f001 fd04 	bl	8014538 <pvPortMalloc>
 8012b30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00e      	beq.n	8012b56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012b38:	205c      	movs	r0, #92	; 0x5c
 8012b3a:	f001 fcfd 	bl	8014538 <pvPortMalloc>
 8012b3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d003      	beq.n	8012b4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012b46:	69fb      	ldr	r3, [r7, #28]
 8012b48:	697a      	ldr	r2, [r7, #20]
 8012b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8012b4c:	e005      	b.n	8012b5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012b4e:	6978      	ldr	r0, [r7, #20]
 8012b50:	f001 fdbe 	bl	80146d0 <vPortFree>
 8012b54:	e001      	b.n	8012b5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012b56:	2300      	movs	r3, #0
 8012b58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012b5a:	69fb      	ldr	r3, [r7, #28]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d017      	beq.n	8012b90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	2200      	movs	r2, #0
 8012b64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012b68:	88fa      	ldrh	r2, [r7, #6]
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	9303      	str	r3, [sp, #12]
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	9302      	str	r3, [sp, #8]
 8012b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b74:	9301      	str	r3, [sp, #4]
 8012b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	68b9      	ldr	r1, [r7, #8]
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	f000 f80e 	bl	8012ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b84:	69f8      	ldr	r0, [r7, #28]
 8012b86:	f000 f89b 	bl	8012cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	61bb      	str	r3, [r7, #24]
 8012b8e:	e002      	b.n	8012b96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012b96:	69bb      	ldr	r3, [r7, #24]
	}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3720      	adds	r7, #32
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b088      	sub	sp, #32
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
 8012bac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	21a5      	movs	r1, #165	; 0xa5
 8012bba:	f001 feef 	bl	801499c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bc2:	6879      	ldr	r1, [r7, #4]
 8012bc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012bc8:	440b      	add	r3, r1
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	4413      	add	r3, r2
 8012bce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	f023 0307 	bic.w	r3, r3, #7
 8012bd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	f003 0307 	and.w	r3, r3, #7
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d00a      	beq.n	8012bf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be6:	f383 8811 	msr	BASEPRI, r3
 8012bea:	f3bf 8f6f 	isb	sy
 8012bee:	f3bf 8f4f 	dsb	sy
 8012bf2:	617b      	str	r3, [r7, #20]
}
 8012bf4:	bf00      	nop
 8012bf6:	e7fe      	b.n	8012bf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d01f      	beq.n	8012c3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012bfe:	2300      	movs	r3, #0
 8012c00:	61fb      	str	r3, [r7, #28]
 8012c02:	e012      	b.n	8012c2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012c04:	68ba      	ldr	r2, [r7, #8]
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	4413      	add	r3, r2
 8012c0a:	7819      	ldrb	r1, [r3, #0]
 8012c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	4413      	add	r3, r2
 8012c12:	3334      	adds	r3, #52	; 0x34
 8012c14:	460a      	mov	r2, r1
 8012c16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d006      	beq.n	8012c32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	3301      	adds	r3, #1
 8012c28:	61fb      	str	r3, [r7, #28]
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	2b0f      	cmp	r3, #15
 8012c2e:	d9e9      	bls.n	8012c04 <prvInitialiseNewTask+0x64>
 8012c30:	e000      	b.n	8012c34 <prvInitialiseNewTask+0x94>
			{
				break;
 8012c32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c36:	2200      	movs	r2, #0
 8012c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012c3c:	e003      	b.n	8012c46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c40:	2200      	movs	r2, #0
 8012c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	2b37      	cmp	r3, #55	; 0x37
 8012c4a:	d901      	bls.n	8012c50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012c4c:	2337      	movs	r3, #55	; 0x37
 8012c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c5e:	2200      	movs	r2, #0
 8012c60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c64:	3304      	adds	r3, #4
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7ff f882 	bl	8011d70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6e:	3318      	adds	r3, #24
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7ff f87d 	bl	8011d70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8e:	2200      	movs	r2, #0
 8012c90:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c94:	2200      	movs	r2, #0
 8012c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	68f9      	ldr	r1, [r7, #12]
 8012c9e:	69b8      	ldr	r0, [r7, #24]
 8012ca0:	f001 f9fe 	bl	80140a0 <pxPortInitialiseStack>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d002      	beq.n	8012cb6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cb6:	bf00      	nop
 8012cb8:	3720      	adds	r7, #32
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012cc8:	f001 fb14 	bl	80142f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012ccc:	4b2d      	ldr	r3, [pc, #180]	; (8012d84 <prvAddNewTaskToReadyList+0xc4>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	4a2c      	ldr	r2, [pc, #176]	; (8012d84 <prvAddNewTaskToReadyList+0xc4>)
 8012cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012cd6:	4b2c      	ldr	r3, [pc, #176]	; (8012d88 <prvAddNewTaskToReadyList+0xc8>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d109      	bne.n	8012cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012cde:	4a2a      	ldr	r2, [pc, #168]	; (8012d88 <prvAddNewTaskToReadyList+0xc8>)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012ce4:	4b27      	ldr	r3, [pc, #156]	; (8012d84 <prvAddNewTaskToReadyList+0xc4>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b01      	cmp	r3, #1
 8012cea:	d110      	bne.n	8012d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012cec:	f000 fcb4 	bl	8013658 <prvInitialiseTaskLists>
 8012cf0:	e00d      	b.n	8012d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012cf2:	4b26      	ldr	r3, [pc, #152]	; (8012d8c <prvAddNewTaskToReadyList+0xcc>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d109      	bne.n	8012d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012cfa:	4b23      	ldr	r3, [pc, #140]	; (8012d88 <prvAddNewTaskToReadyList+0xc8>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d802      	bhi.n	8012d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012d08:	4a1f      	ldr	r2, [pc, #124]	; (8012d88 <prvAddNewTaskToReadyList+0xc8>)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012d0e:	4b20      	ldr	r3, [pc, #128]	; (8012d90 <prvAddNewTaskToReadyList+0xd0>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	3301      	adds	r3, #1
 8012d14:	4a1e      	ldr	r2, [pc, #120]	; (8012d90 <prvAddNewTaskToReadyList+0xd0>)
 8012d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012d18:	4b1d      	ldr	r3, [pc, #116]	; (8012d90 <prvAddNewTaskToReadyList+0xd0>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d24:	4b1b      	ldr	r3, [pc, #108]	; (8012d94 <prvAddNewTaskToReadyList+0xd4>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d903      	bls.n	8012d34 <prvAddNewTaskToReadyList+0x74>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d30:	4a18      	ldr	r2, [pc, #96]	; (8012d94 <prvAddNewTaskToReadyList+0xd4>)
 8012d32:	6013      	str	r3, [r2, #0]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d38:	4613      	mov	r3, r2
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	4413      	add	r3, r2
 8012d3e:	009b      	lsls	r3, r3, #2
 8012d40:	4a15      	ldr	r2, [pc, #84]	; (8012d98 <prvAddNewTaskToReadyList+0xd8>)
 8012d42:	441a      	add	r2, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	3304      	adds	r3, #4
 8012d48:	4619      	mov	r1, r3
 8012d4a:	4610      	mov	r0, r2
 8012d4c:	f7ff f81d 	bl	8011d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012d50:	f001 fb00 	bl	8014354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012d54:	4b0d      	ldr	r3, [pc, #52]	; (8012d8c <prvAddNewTaskToReadyList+0xcc>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00e      	beq.n	8012d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012d5c:	4b0a      	ldr	r3, [pc, #40]	; (8012d88 <prvAddNewTaskToReadyList+0xc8>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d207      	bcs.n	8012d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012d6a:	4b0c      	ldr	r3, [pc, #48]	; (8012d9c <prvAddNewTaskToReadyList+0xdc>)
 8012d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	f3bf 8f4f 	dsb	sy
 8012d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d7a:	bf00      	nop
 8012d7c:	3708      	adds	r7, #8
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	2400134c 	.word	0x2400134c
 8012d88:	24000e78 	.word	0x24000e78
 8012d8c:	24001358 	.word	0x24001358
 8012d90:	24001368 	.word	0x24001368
 8012d94:	24001354 	.word	0x24001354
 8012d98:	24000e7c 	.word	0x24000e7c
 8012d9c:	e000ed04 	.word	0xe000ed04

08012da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012da8:	2300      	movs	r3, #0
 8012daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d017      	beq.n	8012de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012db2:	4b13      	ldr	r3, [pc, #76]	; (8012e00 <vTaskDelay+0x60>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00a      	beq.n	8012dd0 <vTaskDelay+0x30>
	__asm volatile
 8012dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dbe:	f383 8811 	msr	BASEPRI, r3
 8012dc2:	f3bf 8f6f 	isb	sy
 8012dc6:	f3bf 8f4f 	dsb	sy
 8012dca:	60bb      	str	r3, [r7, #8]
}
 8012dcc:	bf00      	nop
 8012dce:	e7fe      	b.n	8012dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012dd0:	f000 f880 	bl	8012ed4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012dd4:	2100      	movs	r1, #0
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f000 fda0 	bl	801391c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ddc:	f000 f888 	bl	8012ef0 <xTaskResumeAll>
 8012de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d107      	bne.n	8012df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012de8:	4b06      	ldr	r3, [pc, #24]	; (8012e04 <vTaskDelay+0x64>)
 8012dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dee:	601a      	str	r2, [r3, #0]
 8012df0:	f3bf 8f4f 	dsb	sy
 8012df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012df8:	bf00      	nop
 8012dfa:	3710      	adds	r7, #16
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	24001374 	.word	0x24001374
 8012e04:	e000ed04 	.word	0xe000ed04

08012e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b08a      	sub	sp, #40	; 0x28
 8012e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012e0e:	2300      	movs	r3, #0
 8012e10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012e12:	2300      	movs	r3, #0
 8012e14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012e16:	463a      	mov	r2, r7
 8012e18:	1d39      	adds	r1, r7, #4
 8012e1a:	f107 0308 	add.w	r3, r7, #8
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fe fd64 	bl	80118ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012e24:	6839      	ldr	r1, [r7, #0]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	68ba      	ldr	r2, [r7, #8]
 8012e2a:	9202      	str	r2, [sp, #8]
 8012e2c:	9301      	str	r3, [sp, #4]
 8012e2e:	2300      	movs	r3, #0
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	2300      	movs	r3, #0
 8012e34:	460a      	mov	r2, r1
 8012e36:	4921      	ldr	r1, [pc, #132]	; (8012ebc <vTaskStartScheduler+0xb4>)
 8012e38:	4821      	ldr	r0, [pc, #132]	; (8012ec0 <vTaskStartScheduler+0xb8>)
 8012e3a:	f7ff fe0f 	bl	8012a5c <xTaskCreateStatic>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	4a20      	ldr	r2, [pc, #128]	; (8012ec4 <vTaskStartScheduler+0xbc>)
 8012e42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012e44:	4b1f      	ldr	r3, [pc, #124]	; (8012ec4 <vTaskStartScheduler+0xbc>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d002      	beq.n	8012e52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	617b      	str	r3, [r7, #20]
 8012e50:	e001      	b.n	8012e56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012e52:	2300      	movs	r3, #0
 8012e54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d102      	bne.n	8012e62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012e5c:	f000 fdb2 	bl	80139c4 <xTimerCreateTimerTask>
 8012e60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d116      	bne.n	8012e96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e6c:	f383 8811 	msr	BASEPRI, r3
 8012e70:	f3bf 8f6f 	isb	sy
 8012e74:	f3bf 8f4f 	dsb	sy
 8012e78:	613b      	str	r3, [r7, #16]
}
 8012e7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012e7c:	4b12      	ldr	r3, [pc, #72]	; (8012ec8 <vTaskStartScheduler+0xc0>)
 8012e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012e84:	4b11      	ldr	r3, [pc, #68]	; (8012ecc <vTaskStartScheduler+0xc4>)
 8012e86:	2201      	movs	r2, #1
 8012e88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012e8a:	4b11      	ldr	r3, [pc, #68]	; (8012ed0 <vTaskStartScheduler+0xc8>)
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012e90:	f001 f98e 	bl	80141b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012e94:	e00e      	b.n	8012eb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e9c:	d10a      	bne.n	8012eb4 <vTaskStartScheduler+0xac>
	__asm volatile
 8012e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea2:	f383 8811 	msr	BASEPRI, r3
 8012ea6:	f3bf 8f6f 	isb	sy
 8012eaa:	f3bf 8f4f 	dsb	sy
 8012eae:	60fb      	str	r3, [r7, #12]
}
 8012eb0:	bf00      	nop
 8012eb2:	e7fe      	b.n	8012eb2 <vTaskStartScheduler+0xaa>
}
 8012eb4:	bf00      	nop
 8012eb6:	3718      	adds	r7, #24
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	08015c20 	.word	0x08015c20
 8012ec0:	08013629 	.word	0x08013629
 8012ec4:	24001370 	.word	0x24001370
 8012ec8:	2400136c 	.word	0x2400136c
 8012ecc:	24001358 	.word	0x24001358
 8012ed0:	24001350 	.word	0x24001350

08012ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012ed8:	4b04      	ldr	r3, [pc, #16]	; (8012eec <vTaskSuspendAll+0x18>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	3301      	adds	r3, #1
 8012ede:	4a03      	ldr	r2, [pc, #12]	; (8012eec <vTaskSuspendAll+0x18>)
 8012ee0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012ee2:	bf00      	nop
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr
 8012eec:	24001374 	.word	0x24001374

08012ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012efa:	2300      	movs	r3, #0
 8012efc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012efe:	4b42      	ldr	r3, [pc, #264]	; (8013008 <xTaskResumeAll+0x118>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d10a      	bne.n	8012f1c <xTaskResumeAll+0x2c>
	__asm volatile
 8012f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0a:	f383 8811 	msr	BASEPRI, r3
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	603b      	str	r3, [r7, #0]
}
 8012f18:	bf00      	nop
 8012f1a:	e7fe      	b.n	8012f1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012f1c:	f001 f9ea 	bl	80142f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012f20:	4b39      	ldr	r3, [pc, #228]	; (8013008 <xTaskResumeAll+0x118>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	4a38      	ldr	r2, [pc, #224]	; (8013008 <xTaskResumeAll+0x118>)
 8012f28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f2a:	4b37      	ldr	r3, [pc, #220]	; (8013008 <xTaskResumeAll+0x118>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d162      	bne.n	8012ff8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012f32:	4b36      	ldr	r3, [pc, #216]	; (801300c <xTaskResumeAll+0x11c>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d05e      	beq.n	8012ff8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f3a:	e02f      	b.n	8012f9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f3c:	4b34      	ldr	r3, [pc, #208]	; (8013010 <xTaskResumeAll+0x120>)
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	3318      	adds	r3, #24
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7fe ff7b 	bl	8011e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	3304      	adds	r3, #4
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe ff76 	bl	8011e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5c:	4b2d      	ldr	r3, [pc, #180]	; (8013014 <xTaskResumeAll+0x124>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d903      	bls.n	8012f6c <xTaskResumeAll+0x7c>
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f68:	4a2a      	ldr	r2, [pc, #168]	; (8013014 <xTaskResumeAll+0x124>)
 8012f6a:	6013      	str	r3, [r2, #0]
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f70:	4613      	mov	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4413      	add	r3, r2
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	4a27      	ldr	r2, [pc, #156]	; (8013018 <xTaskResumeAll+0x128>)
 8012f7a:	441a      	add	r2, r3
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	3304      	adds	r3, #4
 8012f80:	4619      	mov	r1, r3
 8012f82:	4610      	mov	r0, r2
 8012f84:	f7fe ff01 	bl	8011d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f8c:	4b23      	ldr	r3, [pc, #140]	; (801301c <xTaskResumeAll+0x12c>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d302      	bcc.n	8012f9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012f96:	4b22      	ldr	r3, [pc, #136]	; (8013020 <xTaskResumeAll+0x130>)
 8012f98:	2201      	movs	r2, #1
 8012f9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f9c:	4b1c      	ldr	r3, [pc, #112]	; (8013010 <xTaskResumeAll+0x120>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d1cb      	bne.n	8012f3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d001      	beq.n	8012fae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012faa:	f000 fbf3 	bl	8013794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012fae:	4b1d      	ldr	r3, [pc, #116]	; (8013024 <xTaskResumeAll+0x134>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d010      	beq.n	8012fdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012fba:	f000 f847 	bl	801304c <xTaskIncrementTick>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d002      	beq.n	8012fca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012fc4:	4b16      	ldr	r3, [pc, #88]	; (8013020 <xTaskResumeAll+0x130>)
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1f1      	bne.n	8012fba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012fd6:	4b13      	ldr	r3, [pc, #76]	; (8013024 <xTaskResumeAll+0x134>)
 8012fd8:	2200      	movs	r2, #0
 8012fda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012fdc:	4b10      	ldr	r3, [pc, #64]	; (8013020 <xTaskResumeAll+0x130>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d009      	beq.n	8012ff8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012fe8:	4b0f      	ldr	r3, [pc, #60]	; (8013028 <xTaskResumeAll+0x138>)
 8012fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fee:	601a      	str	r2, [r3, #0]
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012ff8:	f001 f9ac 	bl	8014354 <vPortExitCritical>

	return xAlreadyYielded;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop
 8013008:	24001374 	.word	0x24001374
 801300c:	2400134c 	.word	0x2400134c
 8013010:	2400130c 	.word	0x2400130c
 8013014:	24001354 	.word	0x24001354
 8013018:	24000e7c 	.word	0x24000e7c
 801301c:	24000e78 	.word	0x24000e78
 8013020:	24001360 	.word	0x24001360
 8013024:	2400135c 	.word	0x2400135c
 8013028:	e000ed04 	.word	0xe000ed04

0801302c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801302c:	b480      	push	{r7}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013032:	4b05      	ldr	r3, [pc, #20]	; (8013048 <xTaskGetTickCount+0x1c>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013038:	687b      	ldr	r3, [r7, #4]
}
 801303a:	4618      	mov	r0, r3
 801303c:	370c      	adds	r7, #12
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	24001350 	.word	0x24001350

0801304c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b086      	sub	sp, #24
 8013050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013052:	2300      	movs	r3, #0
 8013054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013056:	4b4f      	ldr	r3, [pc, #316]	; (8013194 <xTaskIncrementTick+0x148>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	f040 808f 	bne.w	801317e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013060:	4b4d      	ldr	r3, [pc, #308]	; (8013198 <xTaskIncrementTick+0x14c>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	3301      	adds	r3, #1
 8013066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013068:	4a4b      	ldr	r2, [pc, #300]	; (8013198 <xTaskIncrementTick+0x14c>)
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d120      	bne.n	80130b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013074:	4b49      	ldr	r3, [pc, #292]	; (801319c <xTaskIncrementTick+0x150>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d00a      	beq.n	8013094 <xTaskIncrementTick+0x48>
	__asm volatile
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	603b      	str	r3, [r7, #0]
}
 8013090:	bf00      	nop
 8013092:	e7fe      	b.n	8013092 <xTaskIncrementTick+0x46>
 8013094:	4b41      	ldr	r3, [pc, #260]	; (801319c <xTaskIncrementTick+0x150>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	60fb      	str	r3, [r7, #12]
 801309a:	4b41      	ldr	r3, [pc, #260]	; (80131a0 <xTaskIncrementTick+0x154>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4a3f      	ldr	r2, [pc, #252]	; (801319c <xTaskIncrementTick+0x150>)
 80130a0:	6013      	str	r3, [r2, #0]
 80130a2:	4a3f      	ldr	r2, [pc, #252]	; (80131a0 <xTaskIncrementTick+0x154>)
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	6013      	str	r3, [r2, #0]
 80130a8:	4b3e      	ldr	r3, [pc, #248]	; (80131a4 <xTaskIncrementTick+0x158>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	3301      	adds	r3, #1
 80130ae:	4a3d      	ldr	r2, [pc, #244]	; (80131a4 <xTaskIncrementTick+0x158>)
 80130b0:	6013      	str	r3, [r2, #0]
 80130b2:	f000 fb6f 	bl	8013794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80130b6:	4b3c      	ldr	r3, [pc, #240]	; (80131a8 <xTaskIncrementTick+0x15c>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	693a      	ldr	r2, [r7, #16]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d349      	bcc.n	8013154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130c0:	4b36      	ldr	r3, [pc, #216]	; (801319c <xTaskIncrementTick+0x150>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d104      	bne.n	80130d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130ca:	4b37      	ldr	r3, [pc, #220]	; (80131a8 <xTaskIncrementTick+0x15c>)
 80130cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130d0:	601a      	str	r2, [r3, #0]
					break;
 80130d2:	e03f      	b.n	8013154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130d4:	4b31      	ldr	r3, [pc, #196]	; (801319c <xTaskIncrementTick+0x150>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80130e4:	693a      	ldr	r2, [r7, #16]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d203      	bcs.n	80130f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80130ec:	4a2e      	ldr	r2, [pc, #184]	; (80131a8 <xTaskIncrementTick+0x15c>)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80130f2:	e02f      	b.n	8013154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	3304      	adds	r3, #4
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fe fea3 	bl	8011e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013102:	2b00      	cmp	r3, #0
 8013104:	d004      	beq.n	8013110 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	3318      	adds	r3, #24
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe fe9a 	bl	8011e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013114:	4b25      	ldr	r3, [pc, #148]	; (80131ac <xTaskIncrementTick+0x160>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	429a      	cmp	r2, r3
 801311a:	d903      	bls.n	8013124 <xTaskIncrementTick+0xd8>
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013120:	4a22      	ldr	r2, [pc, #136]	; (80131ac <xTaskIncrementTick+0x160>)
 8013122:	6013      	str	r3, [r2, #0]
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013128:	4613      	mov	r3, r2
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	4413      	add	r3, r2
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	4a1f      	ldr	r2, [pc, #124]	; (80131b0 <xTaskIncrementTick+0x164>)
 8013132:	441a      	add	r2, r3
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	3304      	adds	r3, #4
 8013138:	4619      	mov	r1, r3
 801313a:	4610      	mov	r0, r2
 801313c:	f7fe fe25 	bl	8011d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013144:	4b1b      	ldr	r3, [pc, #108]	; (80131b4 <xTaskIncrementTick+0x168>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801314a:	429a      	cmp	r2, r3
 801314c:	d3b8      	bcc.n	80130c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801314e:	2301      	movs	r3, #1
 8013150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013152:	e7b5      	b.n	80130c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013154:	4b17      	ldr	r3, [pc, #92]	; (80131b4 <xTaskIncrementTick+0x168>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801315a:	4915      	ldr	r1, [pc, #84]	; (80131b0 <xTaskIncrementTick+0x164>)
 801315c:	4613      	mov	r3, r2
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	4413      	add	r3, r2
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	440b      	add	r3, r1
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d901      	bls.n	8013170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801316c:	2301      	movs	r3, #1
 801316e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013170:	4b11      	ldr	r3, [pc, #68]	; (80131b8 <xTaskIncrementTick+0x16c>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d007      	beq.n	8013188 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013178:	2301      	movs	r3, #1
 801317a:	617b      	str	r3, [r7, #20]
 801317c:	e004      	b.n	8013188 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801317e:	4b0f      	ldr	r3, [pc, #60]	; (80131bc <xTaskIncrementTick+0x170>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	3301      	adds	r3, #1
 8013184:	4a0d      	ldr	r2, [pc, #52]	; (80131bc <xTaskIncrementTick+0x170>)
 8013186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013188:	697b      	ldr	r3, [r7, #20]
}
 801318a:	4618      	mov	r0, r3
 801318c:	3718      	adds	r7, #24
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	24001374 	.word	0x24001374
 8013198:	24001350 	.word	0x24001350
 801319c:	24001304 	.word	0x24001304
 80131a0:	24001308 	.word	0x24001308
 80131a4:	24001364 	.word	0x24001364
 80131a8:	2400136c 	.word	0x2400136c
 80131ac:	24001354 	.word	0x24001354
 80131b0:	24000e7c 	.word	0x24000e7c
 80131b4:	24000e78 	.word	0x24000e78
 80131b8:	24001360 	.word	0x24001360
 80131bc:	2400135c 	.word	0x2400135c

080131c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80131c0:	b480      	push	{r7}
 80131c2:	b085      	sub	sp, #20
 80131c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80131c6:	4b28      	ldr	r3, [pc, #160]	; (8013268 <vTaskSwitchContext+0xa8>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d003      	beq.n	80131d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80131ce:	4b27      	ldr	r3, [pc, #156]	; (801326c <vTaskSwitchContext+0xac>)
 80131d0:	2201      	movs	r2, #1
 80131d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80131d4:	e041      	b.n	801325a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80131d6:	4b25      	ldr	r3, [pc, #148]	; (801326c <vTaskSwitchContext+0xac>)
 80131d8:	2200      	movs	r2, #0
 80131da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131dc:	4b24      	ldr	r3, [pc, #144]	; (8013270 <vTaskSwitchContext+0xb0>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	60fb      	str	r3, [r7, #12]
 80131e2:	e010      	b.n	8013206 <vTaskSwitchContext+0x46>
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d10a      	bne.n	8013200 <vTaskSwitchContext+0x40>
	__asm volatile
 80131ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ee:	f383 8811 	msr	BASEPRI, r3
 80131f2:	f3bf 8f6f 	isb	sy
 80131f6:	f3bf 8f4f 	dsb	sy
 80131fa:	607b      	str	r3, [r7, #4]
}
 80131fc:	bf00      	nop
 80131fe:	e7fe      	b.n	80131fe <vTaskSwitchContext+0x3e>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	3b01      	subs	r3, #1
 8013204:	60fb      	str	r3, [r7, #12]
 8013206:	491b      	ldr	r1, [pc, #108]	; (8013274 <vTaskSwitchContext+0xb4>)
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	4613      	mov	r3, r2
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	4413      	add	r3, r2
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	440b      	add	r3, r1
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d0e4      	beq.n	80131e4 <vTaskSwitchContext+0x24>
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	4613      	mov	r3, r2
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4413      	add	r3, r2
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	4a13      	ldr	r2, [pc, #76]	; (8013274 <vTaskSwitchContext+0xb4>)
 8013226:	4413      	add	r3, r2
 8013228:	60bb      	str	r3, [r7, #8]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	685a      	ldr	r2, [r3, #4]
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	605a      	str	r2, [r3, #4]
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	685a      	ldr	r2, [r3, #4]
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	3308      	adds	r3, #8
 801323c:	429a      	cmp	r2, r3
 801323e:	d104      	bne.n	801324a <vTaskSwitchContext+0x8a>
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	685a      	ldr	r2, [r3, #4]
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	605a      	str	r2, [r3, #4]
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	4a09      	ldr	r2, [pc, #36]	; (8013278 <vTaskSwitchContext+0xb8>)
 8013252:	6013      	str	r3, [r2, #0]
 8013254:	4a06      	ldr	r2, [pc, #24]	; (8013270 <vTaskSwitchContext+0xb0>)
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	6013      	str	r3, [r2, #0]
}
 801325a:	bf00      	nop
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop
 8013268:	24001374 	.word	0x24001374
 801326c:	24001360 	.word	0x24001360
 8013270:	24001354 	.word	0x24001354
 8013274:	24000e7c 	.word	0x24000e7c
 8013278:	24000e78 	.word	0x24000e78

0801327c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d10a      	bne.n	80132a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013290:	f383 8811 	msr	BASEPRI, r3
 8013294:	f3bf 8f6f 	isb	sy
 8013298:	f3bf 8f4f 	dsb	sy
 801329c:	60fb      	str	r3, [r7, #12]
}
 801329e:	bf00      	nop
 80132a0:	e7fe      	b.n	80132a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80132a2:	4b07      	ldr	r3, [pc, #28]	; (80132c0 <vTaskPlaceOnEventList+0x44>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	3318      	adds	r3, #24
 80132a8:	4619      	mov	r1, r3
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f7fe fd91 	bl	8011dd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80132b0:	2101      	movs	r1, #1
 80132b2:	6838      	ldr	r0, [r7, #0]
 80132b4:	f000 fb32 	bl	801391c <prvAddCurrentTaskToDelayedList>
}
 80132b8:	bf00      	nop
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	24000e78 	.word	0x24000e78

080132c4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d10a      	bne.n	80132ec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80132d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132da:	f383 8811 	msr	BASEPRI, r3
 80132de:	f3bf 8f6f 	isb	sy
 80132e2:	f3bf 8f4f 	dsb	sy
 80132e6:	617b      	str	r3, [r7, #20]
}
 80132e8:	bf00      	nop
 80132ea:	e7fe      	b.n	80132ea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80132ec:	4b11      	ldr	r3, [pc, #68]	; (8013334 <vTaskPlaceOnUnorderedEventList+0x70>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10a      	bne.n	801330a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80132f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f8:	f383 8811 	msr	BASEPRI, r3
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	613b      	str	r3, [r7, #16]
}
 8013306:	bf00      	nop
 8013308:	e7fe      	b.n	8013308 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801330a:	4b0b      	ldr	r3, [pc, #44]	; (8013338 <vTaskPlaceOnUnorderedEventList+0x74>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8013314:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013316:	4b08      	ldr	r3, [pc, #32]	; (8013338 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	3318      	adds	r3, #24
 801331c:	4619      	mov	r1, r3
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	f7fe fd33 	bl	8011d8a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013324:	2101      	movs	r1, #1
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f000 faf8 	bl	801391c <prvAddCurrentTaskToDelayedList>
}
 801332c:	bf00      	nop
 801332e:	3718      	adds	r7, #24
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	24001374 	.word	0x24001374
 8013338:	24000e78 	.word	0x24000e78

0801333c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801333c:	b580      	push	{r7, lr}
 801333e:	b086      	sub	sp, #24
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	60b9      	str	r1, [r7, #8]
 8013346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d10a      	bne.n	8013364 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013352:	f383 8811 	msr	BASEPRI, r3
 8013356:	f3bf 8f6f 	isb	sy
 801335a:	f3bf 8f4f 	dsb	sy
 801335e:	617b      	str	r3, [r7, #20]
}
 8013360:	bf00      	nop
 8013362:	e7fe      	b.n	8013362 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013364:	4b0a      	ldr	r3, [pc, #40]	; (8013390 <vTaskPlaceOnEventListRestricted+0x54>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	3318      	adds	r3, #24
 801336a:	4619      	mov	r1, r3
 801336c:	68f8      	ldr	r0, [r7, #12]
 801336e:	f7fe fd0c 	bl	8011d8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801337c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801337e:	6879      	ldr	r1, [r7, #4]
 8013380:	68b8      	ldr	r0, [r7, #8]
 8013382:	f000 facb 	bl	801391c <prvAddCurrentTaskToDelayedList>
	}
 8013386:	bf00      	nop
 8013388:	3718      	adds	r7, #24
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	24000e78 	.word	0x24000e78

08013394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d10a      	bne.n	80133c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80133aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	60fb      	str	r3, [r7, #12]
}
 80133bc:	bf00      	nop
 80133be:	e7fe      	b.n	80133be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	3318      	adds	r3, #24
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fe fd3d 	bl	8011e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133ca:	4b1e      	ldr	r3, [pc, #120]	; (8013444 <xTaskRemoveFromEventList+0xb0>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d11d      	bne.n	801340e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	3304      	adds	r3, #4
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fe fd34 	bl	8011e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e0:	4b19      	ldr	r3, [pc, #100]	; (8013448 <xTaskRemoveFromEventList+0xb4>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d903      	bls.n	80133f0 <xTaskRemoveFromEventList+0x5c>
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ec:	4a16      	ldr	r2, [pc, #88]	; (8013448 <xTaskRemoveFromEventList+0xb4>)
 80133ee:	6013      	str	r3, [r2, #0]
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133f4:	4613      	mov	r3, r2
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	4413      	add	r3, r2
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4a13      	ldr	r2, [pc, #76]	; (801344c <xTaskRemoveFromEventList+0xb8>)
 80133fe:	441a      	add	r2, r3
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	3304      	adds	r3, #4
 8013404:	4619      	mov	r1, r3
 8013406:	4610      	mov	r0, r2
 8013408:	f7fe fcbf 	bl	8011d8a <vListInsertEnd>
 801340c:	e005      	b.n	801341a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	3318      	adds	r3, #24
 8013412:	4619      	mov	r1, r3
 8013414:	480e      	ldr	r0, [pc, #56]	; (8013450 <xTaskRemoveFromEventList+0xbc>)
 8013416:	f7fe fcb8 	bl	8011d8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801341e:	4b0d      	ldr	r3, [pc, #52]	; (8013454 <xTaskRemoveFromEventList+0xc0>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013424:	429a      	cmp	r2, r3
 8013426:	d905      	bls.n	8013434 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013428:	2301      	movs	r3, #1
 801342a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801342c:	4b0a      	ldr	r3, [pc, #40]	; (8013458 <xTaskRemoveFromEventList+0xc4>)
 801342e:	2201      	movs	r2, #1
 8013430:	601a      	str	r2, [r3, #0]
 8013432:	e001      	b.n	8013438 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013434:	2300      	movs	r3, #0
 8013436:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013438:	697b      	ldr	r3, [r7, #20]
}
 801343a:	4618      	mov	r0, r3
 801343c:	3718      	adds	r7, #24
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	24001374 	.word	0x24001374
 8013448:	24001354 	.word	0x24001354
 801344c:	24000e7c 	.word	0x24000e7c
 8013450:	2400130c 	.word	0x2400130c
 8013454:	24000e78 	.word	0x24000e78
 8013458:	24001360 	.word	0x24001360

0801345c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b086      	sub	sp, #24
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8013466:	4b29      	ldr	r3, [pc, #164]	; (801350c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d10a      	bne.n	8013484 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013472:	f383 8811 	msr	BASEPRI, r3
 8013476:	f3bf 8f6f 	isb	sy
 801347a:	f3bf 8f4f 	dsb	sy
 801347e:	613b      	str	r3, [r7, #16]
}
 8013480:	bf00      	nop
 8013482:	e7fe      	b.n	8013482 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d10a      	bne.n	80134b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349e:	f383 8811 	msr	BASEPRI, r3
 80134a2:	f3bf 8f6f 	isb	sy
 80134a6:	f3bf 8f4f 	dsb	sy
 80134aa:	60fb      	str	r3, [r7, #12]
}
 80134ac:	bf00      	nop
 80134ae:	e7fe      	b.n	80134ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f7fe fcc7 	bl	8011e44 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	3304      	adds	r3, #4
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fe fcc2 	bl	8011e44 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134c4:	4b12      	ldr	r3, [pc, #72]	; (8013510 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d903      	bls.n	80134d4 <vTaskRemoveFromUnorderedEventList+0x78>
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d0:	4a0f      	ldr	r2, [pc, #60]	; (8013510 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80134d2:	6013      	str	r3, [r2, #0]
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d8:	4613      	mov	r3, r2
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4413      	add	r3, r2
 80134de:	009b      	lsls	r3, r3, #2
 80134e0:	4a0c      	ldr	r2, [pc, #48]	; (8013514 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80134e2:	441a      	add	r2, r3
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	3304      	adds	r3, #4
 80134e8:	4619      	mov	r1, r3
 80134ea:	4610      	mov	r0, r2
 80134ec:	f7fe fc4d 	bl	8011d8a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f4:	4b08      	ldr	r3, [pc, #32]	; (8013518 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d902      	bls.n	8013504 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80134fe:	4b07      	ldr	r3, [pc, #28]	; (801351c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013500:	2201      	movs	r2, #1
 8013502:	601a      	str	r2, [r3, #0]
	}
}
 8013504:	bf00      	nop
 8013506:	3718      	adds	r7, #24
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	24001374 	.word	0x24001374
 8013510:	24001354 	.word	0x24001354
 8013514:	24000e7c 	.word	0x24000e7c
 8013518:	24000e78 	.word	0x24000e78
 801351c:	24001360 	.word	0x24001360

08013520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013528:	4b06      	ldr	r3, [pc, #24]	; (8013544 <vTaskInternalSetTimeOutState+0x24>)
 801352a:	681a      	ldr	r2, [r3, #0]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013530:	4b05      	ldr	r3, [pc, #20]	; (8013548 <vTaskInternalSetTimeOutState+0x28>)
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	605a      	str	r2, [r3, #4]
}
 8013538:	bf00      	nop
 801353a:	370c      	adds	r7, #12
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr
 8013544:	24001364 	.word	0x24001364
 8013548:	24001350 	.word	0x24001350

0801354c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b088      	sub	sp, #32
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d10a      	bne.n	8013572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013560:	f383 8811 	msr	BASEPRI, r3
 8013564:	f3bf 8f6f 	isb	sy
 8013568:	f3bf 8f4f 	dsb	sy
 801356c:	613b      	str	r3, [r7, #16]
}
 801356e:	bf00      	nop
 8013570:	e7fe      	b.n	8013570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d10a      	bne.n	801358e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357c:	f383 8811 	msr	BASEPRI, r3
 8013580:	f3bf 8f6f 	isb	sy
 8013584:	f3bf 8f4f 	dsb	sy
 8013588:	60fb      	str	r3, [r7, #12]
}
 801358a:	bf00      	nop
 801358c:	e7fe      	b.n	801358c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801358e:	f000 feb1 	bl	80142f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013592:	4b1d      	ldr	r3, [pc, #116]	; (8013608 <xTaskCheckForTimeOut+0xbc>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	685b      	ldr	r3, [r3, #4]
 801359c:	69ba      	ldr	r2, [r7, #24]
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135aa:	d102      	bne.n	80135b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80135ac:	2300      	movs	r3, #0
 80135ae:	61fb      	str	r3, [r7, #28]
 80135b0:	e023      	b.n	80135fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	4b15      	ldr	r3, [pc, #84]	; (801360c <xTaskCheckForTimeOut+0xc0>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d007      	beq.n	80135ce <xTaskCheckForTimeOut+0x82>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	69ba      	ldr	r2, [r7, #24]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d302      	bcc.n	80135ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80135c8:	2301      	movs	r3, #1
 80135ca:	61fb      	str	r3, [r7, #28]
 80135cc:	e015      	b.n	80135fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	697a      	ldr	r2, [r7, #20]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d20b      	bcs.n	80135f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	1ad2      	subs	r2, r2, r3
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f7ff ff9b 	bl	8013520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80135ea:	2300      	movs	r3, #0
 80135ec:	61fb      	str	r3, [r7, #28]
 80135ee:	e004      	b.n	80135fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	2200      	movs	r2, #0
 80135f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80135f6:	2301      	movs	r3, #1
 80135f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80135fa:	f000 feab 	bl	8014354 <vPortExitCritical>

	return xReturn;
 80135fe:	69fb      	ldr	r3, [r7, #28]
}
 8013600:	4618      	mov	r0, r3
 8013602:	3720      	adds	r7, #32
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	24001350 	.word	0x24001350
 801360c:	24001364 	.word	0x24001364

08013610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013610:	b480      	push	{r7}
 8013612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013614:	4b03      	ldr	r3, [pc, #12]	; (8013624 <vTaskMissedYield+0x14>)
 8013616:	2201      	movs	r2, #1
 8013618:	601a      	str	r2, [r3, #0]
}
 801361a:	bf00      	nop
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr
 8013624:	24001360 	.word	0x24001360

08013628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013630:	f000 f852 	bl	80136d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013634:	4b06      	ldr	r3, [pc, #24]	; (8013650 <prvIdleTask+0x28>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2b01      	cmp	r3, #1
 801363a:	d9f9      	bls.n	8013630 <prvIdleTask+0x8>
			{
				taskYIELD();
 801363c:	4b05      	ldr	r3, [pc, #20]	; (8013654 <prvIdleTask+0x2c>)
 801363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013642:	601a      	str	r2, [r3, #0]
 8013644:	f3bf 8f4f 	dsb	sy
 8013648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801364c:	e7f0      	b.n	8013630 <prvIdleTask+0x8>
 801364e:	bf00      	nop
 8013650:	24000e7c 	.word	0x24000e7c
 8013654:	e000ed04 	.word	0xe000ed04

08013658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801365e:	2300      	movs	r3, #0
 8013660:	607b      	str	r3, [r7, #4]
 8013662:	e00c      	b.n	801367e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	4613      	mov	r3, r2
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	4413      	add	r3, r2
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4a12      	ldr	r2, [pc, #72]	; (80136b8 <prvInitialiseTaskLists+0x60>)
 8013670:	4413      	add	r3, r2
 8013672:	4618      	mov	r0, r3
 8013674:	f7fe fb5c 	bl	8011d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3301      	adds	r3, #1
 801367c:	607b      	str	r3, [r7, #4]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2b37      	cmp	r3, #55	; 0x37
 8013682:	d9ef      	bls.n	8013664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013684:	480d      	ldr	r0, [pc, #52]	; (80136bc <prvInitialiseTaskLists+0x64>)
 8013686:	f7fe fb53 	bl	8011d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801368a:	480d      	ldr	r0, [pc, #52]	; (80136c0 <prvInitialiseTaskLists+0x68>)
 801368c:	f7fe fb50 	bl	8011d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013690:	480c      	ldr	r0, [pc, #48]	; (80136c4 <prvInitialiseTaskLists+0x6c>)
 8013692:	f7fe fb4d 	bl	8011d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013696:	480c      	ldr	r0, [pc, #48]	; (80136c8 <prvInitialiseTaskLists+0x70>)
 8013698:	f7fe fb4a 	bl	8011d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801369c:	480b      	ldr	r0, [pc, #44]	; (80136cc <prvInitialiseTaskLists+0x74>)
 801369e:	f7fe fb47 	bl	8011d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80136a2:	4b0b      	ldr	r3, [pc, #44]	; (80136d0 <prvInitialiseTaskLists+0x78>)
 80136a4:	4a05      	ldr	r2, [pc, #20]	; (80136bc <prvInitialiseTaskLists+0x64>)
 80136a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80136a8:	4b0a      	ldr	r3, [pc, #40]	; (80136d4 <prvInitialiseTaskLists+0x7c>)
 80136aa:	4a05      	ldr	r2, [pc, #20]	; (80136c0 <prvInitialiseTaskLists+0x68>)
 80136ac:	601a      	str	r2, [r3, #0]
}
 80136ae:	bf00      	nop
 80136b0:	3708      	adds	r7, #8
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	24000e7c 	.word	0x24000e7c
 80136bc:	240012dc 	.word	0x240012dc
 80136c0:	240012f0 	.word	0x240012f0
 80136c4:	2400130c 	.word	0x2400130c
 80136c8:	24001320 	.word	0x24001320
 80136cc:	24001338 	.word	0x24001338
 80136d0:	24001304 	.word	0x24001304
 80136d4:	24001308 	.word	0x24001308

080136d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80136de:	e019      	b.n	8013714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80136e0:	f000 fe08 	bl	80142f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136e4:	4b10      	ldr	r3, [pc, #64]	; (8013728 <prvCheckTasksWaitingTermination+0x50>)
 80136e6:	68db      	ldr	r3, [r3, #12]
 80136e8:	68db      	ldr	r3, [r3, #12]
 80136ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	3304      	adds	r3, #4
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fe fba7 	bl	8011e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80136f6:	4b0d      	ldr	r3, [pc, #52]	; (801372c <prvCheckTasksWaitingTermination+0x54>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	3b01      	subs	r3, #1
 80136fc:	4a0b      	ldr	r2, [pc, #44]	; (801372c <prvCheckTasksWaitingTermination+0x54>)
 80136fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013700:	4b0b      	ldr	r3, [pc, #44]	; (8013730 <prvCheckTasksWaitingTermination+0x58>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	3b01      	subs	r3, #1
 8013706:	4a0a      	ldr	r2, [pc, #40]	; (8013730 <prvCheckTasksWaitingTermination+0x58>)
 8013708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801370a:	f000 fe23 	bl	8014354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 f810 	bl	8013734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013714:	4b06      	ldr	r3, [pc, #24]	; (8013730 <prvCheckTasksWaitingTermination+0x58>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d1e1      	bne.n	80136e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801371c:	bf00      	nop
 801371e:	bf00      	nop
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	24001320 	.word	0x24001320
 801372c:	2400134c 	.word	0x2400134c
 8013730:	24001334 	.word	0x24001334

08013734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013742:	2b00      	cmp	r3, #0
 8013744:	d108      	bne.n	8013758 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801374a:	4618      	mov	r0, r3
 801374c:	f000 ffc0 	bl	80146d0 <vPortFree>
				vPortFree( pxTCB );
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f000 ffbd 	bl	80146d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013756:	e018      	b.n	801378a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801375e:	2b01      	cmp	r3, #1
 8013760:	d103      	bne.n	801376a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 ffb4 	bl	80146d0 <vPortFree>
	}
 8013768:	e00f      	b.n	801378a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013770:	2b02      	cmp	r3, #2
 8013772:	d00a      	beq.n	801378a <prvDeleteTCB+0x56>
	__asm volatile
 8013774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013778:	f383 8811 	msr	BASEPRI, r3
 801377c:	f3bf 8f6f 	isb	sy
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	60fb      	str	r3, [r7, #12]
}
 8013786:	bf00      	nop
 8013788:	e7fe      	b.n	8013788 <prvDeleteTCB+0x54>
	}
 801378a:	bf00      	nop
 801378c:	3710      	adds	r7, #16
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
	...

08013794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801379a:	4b0c      	ldr	r3, [pc, #48]	; (80137cc <prvResetNextTaskUnblockTime+0x38>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d104      	bne.n	80137ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80137a4:	4b0a      	ldr	r3, [pc, #40]	; (80137d0 <prvResetNextTaskUnblockTime+0x3c>)
 80137a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80137aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80137ac:	e008      	b.n	80137c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137ae:	4b07      	ldr	r3, [pc, #28]	; (80137cc <prvResetNextTaskUnblockTime+0x38>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	4a04      	ldr	r2, [pc, #16]	; (80137d0 <prvResetNextTaskUnblockTime+0x3c>)
 80137be:	6013      	str	r3, [r2, #0]
}
 80137c0:	bf00      	nop
 80137c2:	370c      	adds	r7, #12
 80137c4:	46bd      	mov	sp, r7
 80137c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ca:	4770      	bx	lr
 80137cc:	24001304 	.word	0x24001304
 80137d0:	2400136c 	.word	0x2400136c

080137d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80137da:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <xTaskGetSchedulerState+0x34>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d102      	bne.n	80137e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80137e2:	2301      	movs	r3, #1
 80137e4:	607b      	str	r3, [r7, #4]
 80137e6:	e008      	b.n	80137fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137e8:	4b08      	ldr	r3, [pc, #32]	; (801380c <xTaskGetSchedulerState+0x38>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d102      	bne.n	80137f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80137f0:	2302      	movs	r3, #2
 80137f2:	607b      	str	r3, [r7, #4]
 80137f4:	e001      	b.n	80137fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80137f6:	2300      	movs	r3, #0
 80137f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80137fa:	687b      	ldr	r3, [r7, #4]
	}
 80137fc:	4618      	mov	r0, r3
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr
 8013808:	24001358 	.word	0x24001358
 801380c:	24001374 	.word	0x24001374

08013810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013810:	b580      	push	{r7, lr}
 8013812:	b086      	sub	sp, #24
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801381c:	2300      	movs	r3, #0
 801381e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d056      	beq.n	80138d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013826:	4b2e      	ldr	r3, [pc, #184]	; (80138e0 <xTaskPriorityDisinherit+0xd0>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	693a      	ldr	r2, [r7, #16]
 801382c:	429a      	cmp	r2, r3
 801382e:	d00a      	beq.n	8013846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013834:	f383 8811 	msr	BASEPRI, r3
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	60fb      	str	r3, [r7, #12]
}
 8013842:	bf00      	nop
 8013844:	e7fe      	b.n	8013844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801384a:	2b00      	cmp	r3, #0
 801384c:	d10a      	bne.n	8013864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	60bb      	str	r3, [r7, #8]
}
 8013860:	bf00      	nop
 8013862:	e7fe      	b.n	8013862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013868:	1e5a      	subs	r2, r3, #1
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013876:	429a      	cmp	r2, r3
 8013878:	d02c      	beq.n	80138d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801387e:	2b00      	cmp	r3, #0
 8013880:	d128      	bne.n	80138d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	3304      	adds	r3, #4
 8013886:	4618      	mov	r0, r3
 8013888:	f7fe fadc 	bl	8011e44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138a4:	4b0f      	ldr	r3, [pc, #60]	; (80138e4 <xTaskPriorityDisinherit+0xd4>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d903      	bls.n	80138b4 <xTaskPriorityDisinherit+0xa4>
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b0:	4a0c      	ldr	r2, [pc, #48]	; (80138e4 <xTaskPriorityDisinherit+0xd4>)
 80138b2:	6013      	str	r3, [r2, #0]
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138b8:	4613      	mov	r3, r2
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	4413      	add	r3, r2
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	4a09      	ldr	r2, [pc, #36]	; (80138e8 <xTaskPriorityDisinherit+0xd8>)
 80138c2:	441a      	add	r2, r3
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	3304      	adds	r3, #4
 80138c8:	4619      	mov	r1, r3
 80138ca:	4610      	mov	r0, r2
 80138cc:	f7fe fa5d 	bl	8011d8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80138d0:	2301      	movs	r3, #1
 80138d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138d4:	697b      	ldr	r3, [r7, #20]
	}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3718      	adds	r7, #24
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	24000e78 	.word	0x24000e78
 80138e4:	24001354 	.word	0x24001354
 80138e8:	24000e7c 	.word	0x24000e7c

080138ec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80138ec:	b480      	push	{r7}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80138f2:	4b09      	ldr	r3, [pc, #36]	; (8013918 <uxTaskResetEventItemValue+0x2c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	699b      	ldr	r3, [r3, #24]
 80138f8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138fa:	4b07      	ldr	r3, [pc, #28]	; (8013918 <uxTaskResetEventItemValue+0x2c>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013900:	4b05      	ldr	r3, [pc, #20]	; (8013918 <uxTaskResetEventItemValue+0x2c>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013908:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801390a:	687b      	ldr	r3, [r7, #4]
}
 801390c:	4618      	mov	r0, r3
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr
 8013918:	24000e78 	.word	0x24000e78

0801391c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013926:	4b21      	ldr	r3, [pc, #132]	; (80139ac <prvAddCurrentTaskToDelayedList+0x90>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801392c:	4b20      	ldr	r3, [pc, #128]	; (80139b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	3304      	adds	r3, #4
 8013932:	4618      	mov	r0, r3
 8013934:	f7fe fa86 	bl	8011e44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801393e:	d10a      	bne.n	8013956 <prvAddCurrentTaskToDelayedList+0x3a>
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d007      	beq.n	8013956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013946:	4b1a      	ldr	r3, [pc, #104]	; (80139b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	3304      	adds	r3, #4
 801394c:	4619      	mov	r1, r3
 801394e:	4819      	ldr	r0, [pc, #100]	; (80139b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8013950:	f7fe fa1b 	bl	8011d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013954:	e026      	b.n	80139a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013956:	68fa      	ldr	r2, [r7, #12]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	4413      	add	r3, r2
 801395c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801395e:	4b14      	ldr	r3, [pc, #80]	; (80139b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013966:	68ba      	ldr	r2, [r7, #8]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	429a      	cmp	r2, r3
 801396c:	d209      	bcs.n	8013982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801396e:	4b12      	ldr	r3, [pc, #72]	; (80139b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	4b0f      	ldr	r3, [pc, #60]	; (80139b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	3304      	adds	r3, #4
 8013978:	4619      	mov	r1, r3
 801397a:	4610      	mov	r0, r2
 801397c:	f7fe fa29 	bl	8011dd2 <vListInsert>
}
 8013980:	e010      	b.n	80139a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013982:	4b0e      	ldr	r3, [pc, #56]	; (80139bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	4b0a      	ldr	r3, [pc, #40]	; (80139b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	3304      	adds	r3, #4
 801398c:	4619      	mov	r1, r3
 801398e:	4610      	mov	r0, r2
 8013990:	f7fe fa1f 	bl	8011dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013994:	4b0a      	ldr	r3, [pc, #40]	; (80139c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	429a      	cmp	r2, r3
 801399c:	d202      	bcs.n	80139a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801399e:	4a08      	ldr	r2, [pc, #32]	; (80139c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	6013      	str	r3, [r2, #0]
}
 80139a4:	bf00      	nop
 80139a6:	3710      	adds	r7, #16
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	24001350 	.word	0x24001350
 80139b0:	24000e78 	.word	0x24000e78
 80139b4:	24001338 	.word	0x24001338
 80139b8:	24001308 	.word	0x24001308
 80139bc:	24001304 	.word	0x24001304
 80139c0:	2400136c 	.word	0x2400136c

080139c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b08a      	sub	sp, #40	; 0x28
 80139c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80139ca:	2300      	movs	r3, #0
 80139cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80139ce:	f000 fb07 	bl	8013fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80139d2:	4b1c      	ldr	r3, [pc, #112]	; (8013a44 <xTimerCreateTimerTask+0x80>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d021      	beq.n	8013a1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80139da:	2300      	movs	r3, #0
 80139dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80139de:	2300      	movs	r3, #0
 80139e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80139e2:	1d3a      	adds	r2, r7, #4
 80139e4:	f107 0108 	add.w	r1, r7, #8
 80139e8:	f107 030c 	add.w	r3, r7, #12
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7fd ff97 	bl	8011920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80139f2:	6879      	ldr	r1, [r7, #4]
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	9202      	str	r2, [sp, #8]
 80139fa:	9301      	str	r3, [sp, #4]
 80139fc:	2302      	movs	r3, #2
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	2300      	movs	r3, #0
 8013a02:	460a      	mov	r2, r1
 8013a04:	4910      	ldr	r1, [pc, #64]	; (8013a48 <xTimerCreateTimerTask+0x84>)
 8013a06:	4811      	ldr	r0, [pc, #68]	; (8013a4c <xTimerCreateTimerTask+0x88>)
 8013a08:	f7ff f828 	bl	8012a5c <xTaskCreateStatic>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	4a10      	ldr	r2, [pc, #64]	; (8013a50 <xTimerCreateTimerTask+0x8c>)
 8013a10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013a12:	4b0f      	ldr	r3, [pc, #60]	; (8013a50 <xTimerCreateTimerTask+0x8c>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d001      	beq.n	8013a1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10a      	bne.n	8013a3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	613b      	str	r3, [r7, #16]
}
 8013a36:	bf00      	nop
 8013a38:	e7fe      	b.n	8013a38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013a3a:	697b      	ldr	r3, [r7, #20]
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3718      	adds	r7, #24
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	240013a8 	.word	0x240013a8
 8013a48:	08015c28 	.word	0x08015c28
 8013a4c:	08013b89 	.word	0x08013b89
 8013a50:	240013ac 	.word	0x240013ac

08013a54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08a      	sub	sp, #40	; 0x28
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	60b9      	str	r1, [r7, #8]
 8013a5e:	607a      	str	r2, [r7, #4]
 8013a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013a62:	2300      	movs	r3, #0
 8013a64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d10a      	bne.n	8013a82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a70:	f383 8811 	msr	BASEPRI, r3
 8013a74:	f3bf 8f6f 	isb	sy
 8013a78:	f3bf 8f4f 	dsb	sy
 8013a7c:	623b      	str	r3, [r7, #32]
}
 8013a7e:	bf00      	nop
 8013a80:	e7fe      	b.n	8013a80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013a82:	4b1a      	ldr	r3, [pc, #104]	; (8013aec <xTimerGenericCommand+0x98>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d02a      	beq.n	8013ae0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	2b05      	cmp	r3, #5
 8013a9a:	dc18      	bgt.n	8013ace <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013a9c:	f7ff fe9a 	bl	80137d4 <xTaskGetSchedulerState>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d109      	bne.n	8013aba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013aa6:	4b11      	ldr	r3, [pc, #68]	; (8013aec <xTimerGenericCommand+0x98>)
 8013aa8:	6818      	ldr	r0, [r3, #0]
 8013aaa:	f107 0110 	add.w	r1, r7, #16
 8013aae:	2300      	movs	r3, #0
 8013ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ab2:	f7fe fb2f 	bl	8012114 <xQueueGenericSend>
 8013ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8013ab8:	e012      	b.n	8013ae0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013aba:	4b0c      	ldr	r3, [pc, #48]	; (8013aec <xTimerGenericCommand+0x98>)
 8013abc:	6818      	ldr	r0, [r3, #0]
 8013abe:	f107 0110 	add.w	r1, r7, #16
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	f7fe fb25 	bl	8012114 <xQueueGenericSend>
 8013aca:	6278      	str	r0, [r7, #36]	; 0x24
 8013acc:	e008      	b.n	8013ae0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013ace:	4b07      	ldr	r3, [pc, #28]	; (8013aec <xTimerGenericCommand+0x98>)
 8013ad0:	6818      	ldr	r0, [r3, #0]
 8013ad2:	f107 0110 	add.w	r1, r7, #16
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	683a      	ldr	r2, [r7, #0]
 8013ada:	f7fe fc19 	bl	8012310 <xQueueGenericSendFromISR>
 8013ade:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3728      	adds	r7, #40	; 0x28
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	240013a8 	.word	0x240013a8

08013af0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b088      	sub	sp, #32
 8013af4:	af02      	add	r7, sp, #8
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013afa:	4b22      	ldr	r3, [pc, #136]	; (8013b84 <prvProcessExpiredTimer+0x94>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	68db      	ldr	r3, [r3, #12]
 8013b02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	3304      	adds	r3, #4
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fe f99b 	bl	8011e44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b14:	f003 0304 	and.w	r3, r3, #4
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d022      	beq.n	8013b62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	699a      	ldr	r2, [r3, #24]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	18d1      	adds	r1, r2, r3
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	683a      	ldr	r2, [r7, #0]
 8013b28:	6978      	ldr	r0, [r7, #20]
 8013b2a:	f000 f8d1 	bl	8013cd0 <prvInsertTimerInActiveList>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d01f      	beq.n	8013b74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b34:	2300      	movs	r3, #0
 8013b36:	9300      	str	r3, [sp, #0]
 8013b38:	2300      	movs	r3, #0
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	2100      	movs	r1, #0
 8013b3e:	6978      	ldr	r0, [r7, #20]
 8013b40:	f7ff ff88 	bl	8013a54 <xTimerGenericCommand>
 8013b44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d113      	bne.n	8013b74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b50:	f383 8811 	msr	BASEPRI, r3
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	60fb      	str	r3, [r7, #12]
}
 8013b5e:	bf00      	nop
 8013b60:	e7fe      	b.n	8013b60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b68:	f023 0301 	bic.w	r3, r3, #1
 8013b6c:	b2da      	uxtb	r2, r3
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	6a1b      	ldr	r3, [r3, #32]
 8013b78:	6978      	ldr	r0, [r7, #20]
 8013b7a:	4798      	blx	r3
}
 8013b7c:	bf00      	nop
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	240013a0 	.word	0x240013a0

08013b88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013b90:	f107 0308 	add.w	r3, r7, #8
 8013b94:	4618      	mov	r0, r3
 8013b96:	f000 f857 	bl	8013c48 <prvGetNextExpireTime>
 8013b9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	68f8      	ldr	r0, [r7, #12]
 8013ba2:	f000 f803 	bl	8013bac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013ba6:	f000 f8d5 	bl	8013d54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013baa:	e7f1      	b.n	8013b90 <prvTimerTask+0x8>

08013bac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013bb6:	f7ff f98d 	bl	8012ed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013bba:	f107 0308 	add.w	r3, r7, #8
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f000 f866 	bl	8013c90 <prvSampleTimeNow>
 8013bc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d130      	bne.n	8013c2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d10a      	bne.n	8013be8 <prvProcessTimerOrBlockTask+0x3c>
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d806      	bhi.n	8013be8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013bda:	f7ff f989 	bl	8012ef0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013bde:	68f9      	ldr	r1, [r7, #12]
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ff ff85 	bl	8013af0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013be6:	e024      	b.n	8013c32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d008      	beq.n	8013c00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013bee:	4b13      	ldr	r3, [pc, #76]	; (8013c3c <prvProcessTimerOrBlockTask+0x90>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d101      	bne.n	8013bfc <prvProcessTimerOrBlockTask+0x50>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	e000      	b.n	8013bfe <prvProcessTimerOrBlockTask+0x52>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013c00:	4b0f      	ldr	r3, [pc, #60]	; (8013c40 <prvProcessTimerOrBlockTask+0x94>)
 8013c02:	6818      	ldr	r0, [r3, #0]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	1ad3      	subs	r3, r2, r3
 8013c0a:	683a      	ldr	r2, [r7, #0]
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	f7fe fef1 	bl	80129f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013c12:	f7ff f96d 	bl	8012ef0 <xTaskResumeAll>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10a      	bne.n	8013c32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013c1c:	4b09      	ldr	r3, [pc, #36]	; (8013c44 <prvProcessTimerOrBlockTask+0x98>)
 8013c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c22:	601a      	str	r2, [r3, #0]
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	f3bf 8f6f 	isb	sy
}
 8013c2c:	e001      	b.n	8013c32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013c2e:	f7ff f95f 	bl	8012ef0 <xTaskResumeAll>
}
 8013c32:	bf00      	nop
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	240013a4 	.word	0x240013a4
 8013c40:	240013a8 	.word	0x240013a8
 8013c44:	e000ed04 	.word	0xe000ed04

08013c48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b085      	sub	sp, #20
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013c50:	4b0e      	ldr	r3, [pc, #56]	; (8013c8c <prvGetNextExpireTime+0x44>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d101      	bne.n	8013c5e <prvGetNextExpireTime+0x16>
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	e000      	b.n	8013c60 <prvGetNextExpireTime+0x18>
 8013c5e:	2200      	movs	r2, #0
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d105      	bne.n	8013c78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013c6c:	4b07      	ldr	r3, [pc, #28]	; (8013c8c <prvGetNextExpireTime+0x44>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	60fb      	str	r3, [r7, #12]
 8013c76:	e001      	b.n	8013c7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3714      	adds	r7, #20
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop
 8013c8c:	240013a0 	.word	0x240013a0

08013c90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013c98:	f7ff f9c8 	bl	801302c <xTaskGetTickCount>
 8013c9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013c9e:	4b0b      	ldr	r3, [pc, #44]	; (8013ccc <prvSampleTimeNow+0x3c>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d205      	bcs.n	8013cb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ca8:	f000 f936 	bl	8013f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	601a      	str	r2, [r3, #0]
 8013cb2:	e002      	b.n	8013cba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013cba:	4a04      	ldr	r2, [pc, #16]	; (8013ccc <prvSampleTimeNow+0x3c>)
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	240013b0 	.word	0x240013b0

08013cd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b086      	sub	sp, #24
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	60f8      	str	r0, [r7, #12]
 8013cd8:	60b9      	str	r1, [r7, #8]
 8013cda:	607a      	str	r2, [r7, #4]
 8013cdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	68ba      	ldr	r2, [r7, #8]
 8013ce6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	68fa      	ldr	r2, [r7, #12]
 8013cec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013cee:	68ba      	ldr	r2, [r7, #8]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d812      	bhi.n	8013d1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cf6:	687a      	ldr	r2, [r7, #4]
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	1ad2      	subs	r2, r2, r3
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	699b      	ldr	r3, [r3, #24]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d302      	bcc.n	8013d0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013d04:	2301      	movs	r3, #1
 8013d06:	617b      	str	r3, [r7, #20]
 8013d08:	e01b      	b.n	8013d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013d0a:	4b10      	ldr	r3, [pc, #64]	; (8013d4c <prvInsertTimerInActiveList+0x7c>)
 8013d0c:	681a      	ldr	r2, [r3, #0]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	3304      	adds	r3, #4
 8013d12:	4619      	mov	r1, r3
 8013d14:	4610      	mov	r0, r2
 8013d16:	f7fe f85c 	bl	8011dd2 <vListInsert>
 8013d1a:	e012      	b.n	8013d42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d206      	bcs.n	8013d32 <prvInsertTimerInActiveList+0x62>
 8013d24:	68ba      	ldr	r2, [r7, #8]
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d302      	bcc.n	8013d32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	617b      	str	r3, [r7, #20]
 8013d30:	e007      	b.n	8013d42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d32:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <prvInsertTimerInActiveList+0x80>)
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	3304      	adds	r3, #4
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4610      	mov	r0, r2
 8013d3e:	f7fe f848 	bl	8011dd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013d42:	697b      	ldr	r3, [r7, #20]
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3718      	adds	r7, #24
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	240013a4 	.word	0x240013a4
 8013d50:	240013a0 	.word	0x240013a0

08013d54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b08e      	sub	sp, #56	; 0x38
 8013d58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d5a:	e0ca      	b.n	8013ef2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	da18      	bge.n	8013d94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013d62:	1d3b      	adds	r3, r7, #4
 8013d64:	3304      	adds	r3, #4
 8013d66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d10a      	bne.n	8013d84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d72:	f383 8811 	msr	BASEPRI, r3
 8013d76:	f3bf 8f6f 	isb	sy
 8013d7a:	f3bf 8f4f 	dsb	sy
 8013d7e:	61fb      	str	r3, [r7, #28]
}
 8013d80:	bf00      	nop
 8013d82:	e7fe      	b.n	8013d82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d8a:	6850      	ldr	r0, [r2, #4]
 8013d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d8e:	6892      	ldr	r2, [r2, #8]
 8013d90:	4611      	mov	r1, r2
 8013d92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	f2c0 80aa 	blt.w	8013ef0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da2:	695b      	ldr	r3, [r3, #20]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d004      	beq.n	8013db2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013daa:	3304      	adds	r3, #4
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fe f849 	bl	8011e44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013db2:	463b      	mov	r3, r7
 8013db4:	4618      	mov	r0, r3
 8013db6:	f7ff ff6b 	bl	8013c90 <prvSampleTimeNow>
 8013dba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2b09      	cmp	r3, #9
 8013dc0:	f200 8097 	bhi.w	8013ef2 <prvProcessReceivedCommands+0x19e>
 8013dc4:	a201      	add	r2, pc, #4	; (adr r2, 8013dcc <prvProcessReceivedCommands+0x78>)
 8013dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dca:	bf00      	nop
 8013dcc:	08013df5 	.word	0x08013df5
 8013dd0:	08013df5 	.word	0x08013df5
 8013dd4:	08013df5 	.word	0x08013df5
 8013dd8:	08013e69 	.word	0x08013e69
 8013ddc:	08013e7d 	.word	0x08013e7d
 8013de0:	08013ec7 	.word	0x08013ec7
 8013de4:	08013df5 	.word	0x08013df5
 8013de8:	08013df5 	.word	0x08013df5
 8013dec:	08013e69 	.word	0x08013e69
 8013df0:	08013e7d 	.word	0x08013e7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dfa:	f043 0301 	orr.w	r3, r3, #1
 8013dfe:	b2da      	uxtb	r2, r3
 8013e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013e06:	68ba      	ldr	r2, [r7, #8]
 8013e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e0a:	699b      	ldr	r3, [r3, #24]
 8013e0c:	18d1      	adds	r1, r2, r3
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e14:	f7ff ff5c 	bl	8013cd0 <prvInsertTimerInActiveList>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d069      	beq.n	8013ef2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e20:	6a1b      	ldr	r3, [r3, #32]
 8013e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e2c:	f003 0304 	and.w	r3, r3, #4
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d05e      	beq.n	8013ef2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e38:	699b      	ldr	r3, [r3, #24]
 8013e3a:	441a      	add	r2, r3
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	2300      	movs	r3, #0
 8013e42:	2100      	movs	r1, #0
 8013e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e46:	f7ff fe05 	bl	8013a54 <xTimerGenericCommand>
 8013e4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013e4c:	6a3b      	ldr	r3, [r7, #32]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d14f      	bne.n	8013ef2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e56:	f383 8811 	msr	BASEPRI, r3
 8013e5a:	f3bf 8f6f 	isb	sy
 8013e5e:	f3bf 8f4f 	dsb	sy
 8013e62:	61bb      	str	r3, [r7, #24]
}
 8013e64:	bf00      	nop
 8013e66:	e7fe      	b.n	8013e66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e6e:	f023 0301 	bic.w	r3, r3, #1
 8013e72:	b2da      	uxtb	r2, r3
 8013e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013e7a:	e03a      	b.n	8013ef2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e82:	f043 0301 	orr.w	r3, r3, #1
 8013e86:	b2da      	uxtb	r2, r3
 8013e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013e8e:	68ba      	ldr	r2, [r7, #8]
 8013e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e96:	699b      	ldr	r3, [r3, #24]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d10a      	bne.n	8013eb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea0:	f383 8811 	msr	BASEPRI, r3
 8013ea4:	f3bf 8f6f 	isb	sy
 8013ea8:	f3bf 8f4f 	dsb	sy
 8013eac:	617b      	str	r3, [r7, #20]
}
 8013eae:	bf00      	nop
 8013eb0:	e7fe      	b.n	8013eb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb4:	699a      	ldr	r2, [r3, #24]
 8013eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb8:	18d1      	adds	r1, r2, r3
 8013eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ec0:	f7ff ff06 	bl	8013cd0 <prvInsertTimerInActiveList>
					break;
 8013ec4:	e015      	b.n	8013ef2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ecc:	f003 0302 	and.w	r3, r3, #2
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d103      	bne.n	8013edc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ed6:	f000 fbfb 	bl	80146d0 <vPortFree>
 8013eda:	e00a      	b.n	8013ef2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ee2:	f023 0301 	bic.w	r3, r3, #1
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013eee:	e000      	b.n	8013ef2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013ef2:	4b08      	ldr	r3, [pc, #32]	; (8013f14 <prvProcessReceivedCommands+0x1c0>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	1d39      	adds	r1, r7, #4
 8013ef8:	2200      	movs	r2, #0
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fe faa4 	bl	8012448 <xQueueReceive>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	f47f af2a 	bne.w	8013d5c <prvProcessReceivedCommands+0x8>
	}
}
 8013f08:	bf00      	nop
 8013f0a:	bf00      	nop
 8013f0c:	3730      	adds	r7, #48	; 0x30
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	240013a8 	.word	0x240013a8

08013f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b088      	sub	sp, #32
 8013f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013f1e:	e048      	b.n	8013fb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013f20:	4b2d      	ldr	r3, [pc, #180]	; (8013fd8 <prvSwitchTimerLists+0xc0>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f2a:	4b2b      	ldr	r3, [pc, #172]	; (8013fd8 <prvSwitchTimerLists+0xc0>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	68db      	ldr	r3, [r3, #12]
 8013f30:	68db      	ldr	r3, [r3, #12]
 8013f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3304      	adds	r3, #4
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7fd ff83 	bl	8011e44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6a1b      	ldr	r3, [r3, #32]
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f4c:	f003 0304 	and.w	r3, r3, #4
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d02e      	beq.n	8013fb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	699b      	ldr	r3, [r3, #24]
 8013f58:	693a      	ldr	r2, [r7, #16]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013f5e:	68ba      	ldr	r2, [r7, #8]
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d90e      	bls.n	8013f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	68ba      	ldr	r2, [r7, #8]
 8013f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	68fa      	ldr	r2, [r7, #12]
 8013f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f72:	4b19      	ldr	r3, [pc, #100]	; (8013fd8 <prvSwitchTimerLists+0xc0>)
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	3304      	adds	r3, #4
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	4610      	mov	r0, r2
 8013f7e:	f7fd ff28 	bl	8011dd2 <vListInsert>
 8013f82:	e016      	b.n	8013fb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013f84:	2300      	movs	r3, #0
 8013f86:	9300      	str	r3, [sp, #0]
 8013f88:	2300      	movs	r3, #0
 8013f8a:	693a      	ldr	r2, [r7, #16]
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f7ff fd60 	bl	8013a54 <xTimerGenericCommand>
 8013f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d10a      	bne.n	8013fb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa0:	f383 8811 	msr	BASEPRI, r3
 8013fa4:	f3bf 8f6f 	isb	sy
 8013fa8:	f3bf 8f4f 	dsb	sy
 8013fac:	603b      	str	r3, [r7, #0]
}
 8013fae:	bf00      	nop
 8013fb0:	e7fe      	b.n	8013fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013fb2:	4b09      	ldr	r3, [pc, #36]	; (8013fd8 <prvSwitchTimerLists+0xc0>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1b1      	bne.n	8013f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013fbc:	4b06      	ldr	r3, [pc, #24]	; (8013fd8 <prvSwitchTimerLists+0xc0>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013fc2:	4b06      	ldr	r3, [pc, #24]	; (8013fdc <prvSwitchTimerLists+0xc4>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	4a04      	ldr	r2, [pc, #16]	; (8013fd8 <prvSwitchTimerLists+0xc0>)
 8013fc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013fca:	4a04      	ldr	r2, [pc, #16]	; (8013fdc <prvSwitchTimerLists+0xc4>)
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	6013      	str	r3, [r2, #0]
}
 8013fd0:	bf00      	nop
 8013fd2:	3718      	adds	r7, #24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	240013a0 	.word	0x240013a0
 8013fdc:	240013a4 	.word	0x240013a4

08013fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013fe6:	f000 f985 	bl	80142f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013fea:	4b15      	ldr	r3, [pc, #84]	; (8014040 <prvCheckForValidListAndQueue+0x60>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d120      	bne.n	8014034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013ff2:	4814      	ldr	r0, [pc, #80]	; (8014044 <prvCheckForValidListAndQueue+0x64>)
 8013ff4:	f7fd fe9c 	bl	8011d30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013ff8:	4813      	ldr	r0, [pc, #76]	; (8014048 <prvCheckForValidListAndQueue+0x68>)
 8013ffa:	f7fd fe99 	bl	8011d30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013ffe:	4b13      	ldr	r3, [pc, #76]	; (801404c <prvCheckForValidListAndQueue+0x6c>)
 8014000:	4a10      	ldr	r2, [pc, #64]	; (8014044 <prvCheckForValidListAndQueue+0x64>)
 8014002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014004:	4b12      	ldr	r3, [pc, #72]	; (8014050 <prvCheckForValidListAndQueue+0x70>)
 8014006:	4a10      	ldr	r2, [pc, #64]	; (8014048 <prvCheckForValidListAndQueue+0x68>)
 8014008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801400a:	2300      	movs	r3, #0
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	4b11      	ldr	r3, [pc, #68]	; (8014054 <prvCheckForValidListAndQueue+0x74>)
 8014010:	4a11      	ldr	r2, [pc, #68]	; (8014058 <prvCheckForValidListAndQueue+0x78>)
 8014012:	2110      	movs	r1, #16
 8014014:	200a      	movs	r0, #10
 8014016:	f7fd ffa7 	bl	8011f68 <xQueueGenericCreateStatic>
 801401a:	4603      	mov	r3, r0
 801401c:	4a08      	ldr	r2, [pc, #32]	; (8014040 <prvCheckForValidListAndQueue+0x60>)
 801401e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014020:	4b07      	ldr	r3, [pc, #28]	; (8014040 <prvCheckForValidListAndQueue+0x60>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d005      	beq.n	8014034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014028:	4b05      	ldr	r3, [pc, #20]	; (8014040 <prvCheckForValidListAndQueue+0x60>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	490b      	ldr	r1, [pc, #44]	; (801405c <prvCheckForValidListAndQueue+0x7c>)
 801402e:	4618      	mov	r0, r3
 8014030:	f7fe fcb6 	bl	80129a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014034:	f000 f98e 	bl	8014354 <vPortExitCritical>
}
 8014038:	bf00      	nop
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	240013a8 	.word	0x240013a8
 8014044:	24001378 	.word	0x24001378
 8014048:	2400138c 	.word	0x2400138c
 801404c:	240013a0 	.word	0x240013a0
 8014050:	240013a4 	.word	0x240013a4
 8014054:	24001454 	.word	0x24001454
 8014058:	240013b4 	.word	0x240013b4
 801405c:	08015c30 	.word	0x08015c30

08014060 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014060:	b580      	push	{r7, lr}
 8014062:	b08a      	sub	sp, #40	; 0x28
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801406e:	f06f 0301 	mvn.w	r3, #1
 8014072:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014080:	4b06      	ldr	r3, [pc, #24]	; (801409c <xTimerPendFunctionCallFromISR+0x3c>)
 8014082:	6818      	ldr	r0, [r3, #0]
 8014084:	f107 0114 	add.w	r1, r7, #20
 8014088:	2300      	movs	r3, #0
 801408a:	683a      	ldr	r2, [r7, #0]
 801408c:	f7fe f940 	bl	8012310 <xQueueGenericSendFromISR>
 8014090:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8014092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014094:	4618      	mov	r0, r3
 8014096:	3728      	adds	r7, #40	; 0x28
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	240013a8 	.word	0x240013a8

080140a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80140a0:	b480      	push	{r7}
 80140a2:	b085      	sub	sp, #20
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	60f8      	str	r0, [r7, #12]
 80140a8:	60b9      	str	r1, [r7, #8]
 80140aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	3b04      	subs	r3, #4
 80140b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80140b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	3b04      	subs	r3, #4
 80140be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	f023 0201 	bic.w	r2, r3, #1
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	3b04      	subs	r3, #4
 80140ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80140d0:	4a0c      	ldr	r2, [pc, #48]	; (8014104 <pxPortInitialiseStack+0x64>)
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	3b14      	subs	r3, #20
 80140da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80140dc:	687a      	ldr	r2, [r7, #4]
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	3b04      	subs	r3, #4
 80140e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f06f 0202 	mvn.w	r2, #2
 80140ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	3b20      	subs	r3, #32
 80140f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80140f6:	68fb      	ldr	r3, [r7, #12]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3714      	adds	r7, #20
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr
 8014104:	08014109 	.word	0x08014109

08014108 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014108:	b480      	push	{r7}
 801410a:	b085      	sub	sp, #20
 801410c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801410e:	2300      	movs	r3, #0
 8014110:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014112:	4b12      	ldr	r3, [pc, #72]	; (801415c <prvTaskExitError+0x54>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801411a:	d00a      	beq.n	8014132 <prvTaskExitError+0x2a>
	__asm volatile
 801411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014120:	f383 8811 	msr	BASEPRI, r3
 8014124:	f3bf 8f6f 	isb	sy
 8014128:	f3bf 8f4f 	dsb	sy
 801412c:	60fb      	str	r3, [r7, #12]
}
 801412e:	bf00      	nop
 8014130:	e7fe      	b.n	8014130 <prvTaskExitError+0x28>
	__asm volatile
 8014132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014136:	f383 8811 	msr	BASEPRI, r3
 801413a:	f3bf 8f6f 	isb	sy
 801413e:	f3bf 8f4f 	dsb	sy
 8014142:	60bb      	str	r3, [r7, #8]
}
 8014144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014146:	bf00      	nop
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d0fc      	beq.n	8014148 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801414e:	bf00      	nop
 8014150:	bf00      	nop
 8014152:	3714      	adds	r7, #20
 8014154:	46bd      	mov	sp, r7
 8014156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415a:	4770      	bx	lr
 801415c:	24000098 	.word	0x24000098

08014160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014160:	4b07      	ldr	r3, [pc, #28]	; (8014180 <pxCurrentTCBConst2>)
 8014162:	6819      	ldr	r1, [r3, #0]
 8014164:	6808      	ldr	r0, [r1, #0]
 8014166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416a:	f380 8809 	msr	PSP, r0
 801416e:	f3bf 8f6f 	isb	sy
 8014172:	f04f 0000 	mov.w	r0, #0
 8014176:	f380 8811 	msr	BASEPRI, r0
 801417a:	4770      	bx	lr
 801417c:	f3af 8000 	nop.w

08014180 <pxCurrentTCBConst2>:
 8014180:	24000e78 	.word	0x24000e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014184:	bf00      	nop
 8014186:	bf00      	nop

08014188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014188:	4808      	ldr	r0, [pc, #32]	; (80141ac <prvPortStartFirstTask+0x24>)
 801418a:	6800      	ldr	r0, [r0, #0]
 801418c:	6800      	ldr	r0, [r0, #0]
 801418e:	f380 8808 	msr	MSP, r0
 8014192:	f04f 0000 	mov.w	r0, #0
 8014196:	f380 8814 	msr	CONTROL, r0
 801419a:	b662      	cpsie	i
 801419c:	b661      	cpsie	f
 801419e:	f3bf 8f4f 	dsb	sy
 80141a2:	f3bf 8f6f 	isb	sy
 80141a6:	df00      	svc	0
 80141a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80141aa:	bf00      	nop
 80141ac:	e000ed08 	.word	0xe000ed08

080141b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b086      	sub	sp, #24
 80141b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80141b6:	4b46      	ldr	r3, [pc, #280]	; (80142d0 <xPortStartScheduler+0x120>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	4a46      	ldr	r2, [pc, #280]	; (80142d4 <xPortStartScheduler+0x124>)
 80141bc:	4293      	cmp	r3, r2
 80141be:	d10a      	bne.n	80141d6 <xPortStartScheduler+0x26>
	__asm volatile
 80141c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c4:	f383 8811 	msr	BASEPRI, r3
 80141c8:	f3bf 8f6f 	isb	sy
 80141cc:	f3bf 8f4f 	dsb	sy
 80141d0:	613b      	str	r3, [r7, #16]
}
 80141d2:	bf00      	nop
 80141d4:	e7fe      	b.n	80141d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80141d6:	4b3e      	ldr	r3, [pc, #248]	; (80142d0 <xPortStartScheduler+0x120>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	4a3f      	ldr	r2, [pc, #252]	; (80142d8 <xPortStartScheduler+0x128>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d10a      	bne.n	80141f6 <xPortStartScheduler+0x46>
	__asm volatile
 80141e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e4:	f383 8811 	msr	BASEPRI, r3
 80141e8:	f3bf 8f6f 	isb	sy
 80141ec:	f3bf 8f4f 	dsb	sy
 80141f0:	60fb      	str	r3, [r7, #12]
}
 80141f2:	bf00      	nop
 80141f4:	e7fe      	b.n	80141f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80141f6:	4b39      	ldr	r3, [pc, #228]	; (80142dc <xPortStartScheduler+0x12c>)
 80141f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	b2db      	uxtb	r3, r3
 8014200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	22ff      	movs	r2, #255	; 0xff
 8014206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	b2db      	uxtb	r3, r3
 801420e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014210:	78fb      	ldrb	r3, [r7, #3]
 8014212:	b2db      	uxtb	r3, r3
 8014214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014218:	b2da      	uxtb	r2, r3
 801421a:	4b31      	ldr	r3, [pc, #196]	; (80142e0 <xPortStartScheduler+0x130>)
 801421c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801421e:	4b31      	ldr	r3, [pc, #196]	; (80142e4 <xPortStartScheduler+0x134>)
 8014220:	2207      	movs	r2, #7
 8014222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014224:	e009      	b.n	801423a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014226:	4b2f      	ldr	r3, [pc, #188]	; (80142e4 <xPortStartScheduler+0x134>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	3b01      	subs	r3, #1
 801422c:	4a2d      	ldr	r2, [pc, #180]	; (80142e4 <xPortStartScheduler+0x134>)
 801422e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014230:	78fb      	ldrb	r3, [r7, #3]
 8014232:	b2db      	uxtb	r3, r3
 8014234:	005b      	lsls	r3, r3, #1
 8014236:	b2db      	uxtb	r3, r3
 8014238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801423a:	78fb      	ldrb	r3, [r7, #3]
 801423c:	b2db      	uxtb	r3, r3
 801423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014242:	2b80      	cmp	r3, #128	; 0x80
 8014244:	d0ef      	beq.n	8014226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014246:	4b27      	ldr	r3, [pc, #156]	; (80142e4 <xPortStartScheduler+0x134>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f1c3 0307 	rsb	r3, r3, #7
 801424e:	2b04      	cmp	r3, #4
 8014250:	d00a      	beq.n	8014268 <xPortStartScheduler+0xb8>
	__asm volatile
 8014252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014256:	f383 8811 	msr	BASEPRI, r3
 801425a:	f3bf 8f6f 	isb	sy
 801425e:	f3bf 8f4f 	dsb	sy
 8014262:	60bb      	str	r3, [r7, #8]
}
 8014264:	bf00      	nop
 8014266:	e7fe      	b.n	8014266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014268:	4b1e      	ldr	r3, [pc, #120]	; (80142e4 <xPortStartScheduler+0x134>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	021b      	lsls	r3, r3, #8
 801426e:	4a1d      	ldr	r2, [pc, #116]	; (80142e4 <xPortStartScheduler+0x134>)
 8014270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014272:	4b1c      	ldr	r3, [pc, #112]	; (80142e4 <xPortStartScheduler+0x134>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801427a:	4a1a      	ldr	r2, [pc, #104]	; (80142e4 <xPortStartScheduler+0x134>)
 801427c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	b2da      	uxtb	r2, r3
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014286:	4b18      	ldr	r3, [pc, #96]	; (80142e8 <xPortStartScheduler+0x138>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4a17      	ldr	r2, [pc, #92]	; (80142e8 <xPortStartScheduler+0x138>)
 801428c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014292:	4b15      	ldr	r3, [pc, #84]	; (80142e8 <xPortStartScheduler+0x138>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	4a14      	ldr	r2, [pc, #80]	; (80142e8 <xPortStartScheduler+0x138>)
 8014298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801429c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801429e:	f000 f8dd 	bl	801445c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80142a2:	4b12      	ldr	r3, [pc, #72]	; (80142ec <xPortStartScheduler+0x13c>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80142a8:	f000 f8fc 	bl	80144a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80142ac:	4b10      	ldr	r3, [pc, #64]	; (80142f0 <xPortStartScheduler+0x140>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	4a0f      	ldr	r2, [pc, #60]	; (80142f0 <xPortStartScheduler+0x140>)
 80142b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80142b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80142b8:	f7ff ff66 	bl	8014188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80142bc:	f7fe ff80 	bl	80131c0 <vTaskSwitchContext>
	prvTaskExitError();
 80142c0:	f7ff ff22 	bl	8014108 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80142c4:	2300      	movs	r3, #0
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3718      	adds	r7, #24
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	e000ed00 	.word	0xe000ed00
 80142d4:	410fc271 	.word	0x410fc271
 80142d8:	410fc270 	.word	0x410fc270
 80142dc:	e000e400 	.word	0xe000e400
 80142e0:	240014a4 	.word	0x240014a4
 80142e4:	240014a8 	.word	0x240014a8
 80142e8:	e000ed20 	.word	0xe000ed20
 80142ec:	24000098 	.word	0x24000098
 80142f0:	e000ef34 	.word	0xe000ef34

080142f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
	__asm volatile
 80142fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142fe:	f383 8811 	msr	BASEPRI, r3
 8014302:	f3bf 8f6f 	isb	sy
 8014306:	f3bf 8f4f 	dsb	sy
 801430a:	607b      	str	r3, [r7, #4]
}
 801430c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801430e:	4b0f      	ldr	r3, [pc, #60]	; (801434c <vPortEnterCritical+0x58>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	3301      	adds	r3, #1
 8014314:	4a0d      	ldr	r2, [pc, #52]	; (801434c <vPortEnterCritical+0x58>)
 8014316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014318:	4b0c      	ldr	r3, [pc, #48]	; (801434c <vPortEnterCritical+0x58>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	2b01      	cmp	r3, #1
 801431e:	d10f      	bne.n	8014340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014320:	4b0b      	ldr	r3, [pc, #44]	; (8014350 <vPortEnterCritical+0x5c>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	b2db      	uxtb	r3, r3
 8014326:	2b00      	cmp	r3, #0
 8014328:	d00a      	beq.n	8014340 <vPortEnterCritical+0x4c>
	__asm volatile
 801432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432e:	f383 8811 	msr	BASEPRI, r3
 8014332:	f3bf 8f6f 	isb	sy
 8014336:	f3bf 8f4f 	dsb	sy
 801433a:	603b      	str	r3, [r7, #0]
}
 801433c:	bf00      	nop
 801433e:	e7fe      	b.n	801433e <vPortEnterCritical+0x4a>
	}
}
 8014340:	bf00      	nop
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr
 801434c:	24000098 	.word	0x24000098
 8014350:	e000ed04 	.word	0xe000ed04

08014354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801435a:	4b12      	ldr	r3, [pc, #72]	; (80143a4 <vPortExitCritical+0x50>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d10a      	bne.n	8014378 <vPortExitCritical+0x24>
	__asm volatile
 8014362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014366:	f383 8811 	msr	BASEPRI, r3
 801436a:	f3bf 8f6f 	isb	sy
 801436e:	f3bf 8f4f 	dsb	sy
 8014372:	607b      	str	r3, [r7, #4]
}
 8014374:	bf00      	nop
 8014376:	e7fe      	b.n	8014376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014378:	4b0a      	ldr	r3, [pc, #40]	; (80143a4 <vPortExitCritical+0x50>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	3b01      	subs	r3, #1
 801437e:	4a09      	ldr	r2, [pc, #36]	; (80143a4 <vPortExitCritical+0x50>)
 8014380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014382:	4b08      	ldr	r3, [pc, #32]	; (80143a4 <vPortExitCritical+0x50>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d105      	bne.n	8014396 <vPortExitCritical+0x42>
 801438a:	2300      	movs	r3, #0
 801438c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	f383 8811 	msr	BASEPRI, r3
}
 8014394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014396:	bf00      	nop
 8014398:	370c      	adds	r7, #12
 801439a:	46bd      	mov	sp, r7
 801439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop
 80143a4:	24000098 	.word	0x24000098
	...

080143b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80143b0:	f3ef 8009 	mrs	r0, PSP
 80143b4:	f3bf 8f6f 	isb	sy
 80143b8:	4b15      	ldr	r3, [pc, #84]	; (8014410 <pxCurrentTCBConst>)
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	f01e 0f10 	tst.w	lr, #16
 80143c0:	bf08      	it	eq
 80143c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80143c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ca:	6010      	str	r0, [r2, #0]
 80143cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80143d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80143d4:	f380 8811 	msr	BASEPRI, r0
 80143d8:	f3bf 8f4f 	dsb	sy
 80143dc:	f3bf 8f6f 	isb	sy
 80143e0:	f7fe feee 	bl	80131c0 <vTaskSwitchContext>
 80143e4:	f04f 0000 	mov.w	r0, #0
 80143e8:	f380 8811 	msr	BASEPRI, r0
 80143ec:	bc09      	pop	{r0, r3}
 80143ee:	6819      	ldr	r1, [r3, #0]
 80143f0:	6808      	ldr	r0, [r1, #0]
 80143f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f6:	f01e 0f10 	tst.w	lr, #16
 80143fa:	bf08      	it	eq
 80143fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014400:	f380 8809 	msr	PSP, r0
 8014404:	f3bf 8f6f 	isb	sy
 8014408:	4770      	bx	lr
 801440a:	bf00      	nop
 801440c:	f3af 8000 	nop.w

08014410 <pxCurrentTCBConst>:
 8014410:	24000e78 	.word	0x24000e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014414:	bf00      	nop
 8014416:	bf00      	nop

08014418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
	__asm volatile
 801441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014422:	f383 8811 	msr	BASEPRI, r3
 8014426:	f3bf 8f6f 	isb	sy
 801442a:	f3bf 8f4f 	dsb	sy
 801442e:	607b      	str	r3, [r7, #4]
}
 8014430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014432:	f7fe fe0b 	bl	801304c <xTaskIncrementTick>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d003      	beq.n	8014444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801443c:	4b06      	ldr	r3, [pc, #24]	; (8014458 <xPortSysTickHandler+0x40>)
 801443e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014442:	601a      	str	r2, [r3, #0]
 8014444:	2300      	movs	r3, #0
 8014446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	f383 8811 	msr	BASEPRI, r3
}
 801444e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	e000ed04 	.word	0xe000ed04

0801445c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801445c:	b480      	push	{r7}
 801445e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014460:	4b0b      	ldr	r3, [pc, #44]	; (8014490 <vPortSetupTimerInterrupt+0x34>)
 8014462:	2200      	movs	r2, #0
 8014464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014466:	4b0b      	ldr	r3, [pc, #44]	; (8014494 <vPortSetupTimerInterrupt+0x38>)
 8014468:	2200      	movs	r2, #0
 801446a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801446c:	4b0a      	ldr	r3, [pc, #40]	; (8014498 <vPortSetupTimerInterrupt+0x3c>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	4a0a      	ldr	r2, [pc, #40]	; (801449c <vPortSetupTimerInterrupt+0x40>)
 8014472:	fba2 2303 	umull	r2, r3, r2, r3
 8014476:	099b      	lsrs	r3, r3, #6
 8014478:	4a09      	ldr	r2, [pc, #36]	; (80144a0 <vPortSetupTimerInterrupt+0x44>)
 801447a:	3b01      	subs	r3, #1
 801447c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801447e:	4b04      	ldr	r3, [pc, #16]	; (8014490 <vPortSetupTimerInterrupt+0x34>)
 8014480:	2207      	movs	r2, #7
 8014482:	601a      	str	r2, [r3, #0]
}
 8014484:	bf00      	nop
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop
 8014490:	e000e010 	.word	0xe000e010
 8014494:	e000e018 	.word	0xe000e018
 8014498:	24000088 	.word	0x24000088
 801449c:	10624dd3 	.word	0x10624dd3
 80144a0:	e000e014 	.word	0xe000e014

080144a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80144a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80144b4 <vPortEnableVFP+0x10>
 80144a8:	6801      	ldr	r1, [r0, #0]
 80144aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80144ae:	6001      	str	r1, [r0, #0]
 80144b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80144b2:	bf00      	nop
 80144b4:	e000ed88 	.word	0xe000ed88

080144b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80144b8:	b480      	push	{r7}
 80144ba:	b085      	sub	sp, #20
 80144bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80144be:	f3ef 8305 	mrs	r3, IPSR
 80144c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	2b0f      	cmp	r3, #15
 80144c8:	d914      	bls.n	80144f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80144ca:	4a17      	ldr	r2, [pc, #92]	; (8014528 <vPortValidateInterruptPriority+0x70>)
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	4413      	add	r3, r2
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80144d4:	4b15      	ldr	r3, [pc, #84]	; (801452c <vPortValidateInterruptPriority+0x74>)
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	7afa      	ldrb	r2, [r7, #11]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d20a      	bcs.n	80144f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80144de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	607b      	str	r3, [r7, #4]
}
 80144f0:	bf00      	nop
 80144f2:	e7fe      	b.n	80144f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80144f4:	4b0e      	ldr	r3, [pc, #56]	; (8014530 <vPortValidateInterruptPriority+0x78>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80144fc:	4b0d      	ldr	r3, [pc, #52]	; (8014534 <vPortValidateInterruptPriority+0x7c>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	429a      	cmp	r2, r3
 8014502:	d90a      	bls.n	801451a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014508:	f383 8811 	msr	BASEPRI, r3
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f3bf 8f4f 	dsb	sy
 8014514:	603b      	str	r3, [r7, #0]
}
 8014516:	bf00      	nop
 8014518:	e7fe      	b.n	8014518 <vPortValidateInterruptPriority+0x60>
	}
 801451a:	bf00      	nop
 801451c:	3714      	adds	r7, #20
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	e000e3f0 	.word	0xe000e3f0
 801452c:	240014a4 	.word	0x240014a4
 8014530:	e000ed0c 	.word	0xe000ed0c
 8014534:	240014a8 	.word	0x240014a8

08014538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b08a      	sub	sp, #40	; 0x28
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014540:	2300      	movs	r3, #0
 8014542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014544:	f7fe fcc6 	bl	8012ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014548:	4b5b      	ldr	r3, [pc, #364]	; (80146b8 <pvPortMalloc+0x180>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d101      	bne.n	8014554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014550:	f000 f920 	bl	8014794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014554:	4b59      	ldr	r3, [pc, #356]	; (80146bc <pvPortMalloc+0x184>)
 8014556:	681a      	ldr	r2, [r3, #0]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	4013      	ands	r3, r2
 801455c:	2b00      	cmp	r3, #0
 801455e:	f040 8093 	bne.w	8014688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d01d      	beq.n	80145a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014568:	2208      	movs	r2, #8
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	4413      	add	r3, r2
 801456e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f003 0307 	and.w	r3, r3, #7
 8014576:	2b00      	cmp	r3, #0
 8014578:	d014      	beq.n	80145a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f023 0307 	bic.w	r3, r3, #7
 8014580:	3308      	adds	r3, #8
 8014582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f003 0307 	and.w	r3, r3, #7
 801458a:	2b00      	cmp	r3, #0
 801458c:	d00a      	beq.n	80145a4 <pvPortMalloc+0x6c>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	617b      	str	r3, [r7, #20]
}
 80145a0:	bf00      	nop
 80145a2:	e7fe      	b.n	80145a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d06e      	beq.n	8014688 <pvPortMalloc+0x150>
 80145aa:	4b45      	ldr	r3, [pc, #276]	; (80146c0 <pvPortMalloc+0x188>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d869      	bhi.n	8014688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80145b4:	4b43      	ldr	r3, [pc, #268]	; (80146c4 <pvPortMalloc+0x18c>)
 80145b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80145b8:	4b42      	ldr	r3, [pc, #264]	; (80146c4 <pvPortMalloc+0x18c>)
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80145be:	e004      	b.n	80145ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80145c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80145c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80145ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d903      	bls.n	80145dc <pvPortMalloc+0xa4>
 80145d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d1f1      	bne.n	80145c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80145dc:	4b36      	ldr	r3, [pc, #216]	; (80146b8 <pvPortMalloc+0x180>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d050      	beq.n	8014688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80145e6:	6a3b      	ldr	r3, [r7, #32]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2208      	movs	r2, #8
 80145ec:	4413      	add	r3, r2
 80145ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	6a3b      	ldr	r3, [r7, #32]
 80145f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80145f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fa:	685a      	ldr	r2, [r3, #4]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	1ad2      	subs	r2, r2, r3
 8014600:	2308      	movs	r3, #8
 8014602:	005b      	lsls	r3, r3, #1
 8014604:	429a      	cmp	r2, r3
 8014606:	d91f      	bls.n	8014648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4413      	add	r3, r2
 801460e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	f003 0307 	and.w	r3, r3, #7
 8014616:	2b00      	cmp	r3, #0
 8014618:	d00a      	beq.n	8014630 <pvPortMalloc+0xf8>
	__asm volatile
 801461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801461e:	f383 8811 	msr	BASEPRI, r3
 8014622:	f3bf 8f6f 	isb	sy
 8014626:	f3bf 8f4f 	dsb	sy
 801462a:	613b      	str	r3, [r7, #16]
}
 801462c:	bf00      	nop
 801462e:	e7fe      	b.n	801462e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014632:	685a      	ldr	r2, [r3, #4]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	1ad2      	subs	r2, r2, r3
 8014638:	69bb      	ldr	r3, [r7, #24]
 801463a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014642:	69b8      	ldr	r0, [r7, #24]
 8014644:	f000 f908 	bl	8014858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014648:	4b1d      	ldr	r3, [pc, #116]	; (80146c0 <pvPortMalloc+0x188>)
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	4a1b      	ldr	r2, [pc, #108]	; (80146c0 <pvPortMalloc+0x188>)
 8014654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014656:	4b1a      	ldr	r3, [pc, #104]	; (80146c0 <pvPortMalloc+0x188>)
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	4b1b      	ldr	r3, [pc, #108]	; (80146c8 <pvPortMalloc+0x190>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	429a      	cmp	r2, r3
 8014660:	d203      	bcs.n	801466a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014662:	4b17      	ldr	r3, [pc, #92]	; (80146c0 <pvPortMalloc+0x188>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4a18      	ldr	r2, [pc, #96]	; (80146c8 <pvPortMalloc+0x190>)
 8014668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466c:	685a      	ldr	r2, [r3, #4]
 801466e:	4b13      	ldr	r3, [pc, #76]	; (80146bc <pvPortMalloc+0x184>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	431a      	orrs	r2, r3
 8014674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467a:	2200      	movs	r2, #0
 801467c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801467e:	4b13      	ldr	r3, [pc, #76]	; (80146cc <pvPortMalloc+0x194>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	3301      	adds	r3, #1
 8014684:	4a11      	ldr	r2, [pc, #68]	; (80146cc <pvPortMalloc+0x194>)
 8014686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014688:	f7fe fc32 	bl	8012ef0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	f003 0307 	and.w	r3, r3, #7
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <pvPortMalloc+0x174>
	__asm volatile
 8014696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801469a:	f383 8811 	msr	BASEPRI, r3
 801469e:	f3bf 8f6f 	isb	sy
 80146a2:	f3bf 8f4f 	dsb	sy
 80146a6:	60fb      	str	r3, [r7, #12]
}
 80146a8:	bf00      	nop
 80146aa:	e7fe      	b.n	80146aa <pvPortMalloc+0x172>
	return pvReturn;
 80146ac:	69fb      	ldr	r3, [r7, #28]
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3728      	adds	r7, #40	; 0x28
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	240050b4 	.word	0x240050b4
 80146bc:	240050c8 	.word	0x240050c8
 80146c0:	240050b8 	.word	0x240050b8
 80146c4:	240050ac 	.word	0x240050ac
 80146c8:	240050bc 	.word	0x240050bc
 80146cc:	240050c0 	.word	0x240050c0

080146d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d04d      	beq.n	801477e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80146e2:	2308      	movs	r3, #8
 80146e4:	425b      	negs	r3, r3
 80146e6:	697a      	ldr	r2, [r7, #20]
 80146e8:	4413      	add	r3, r2
 80146ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	685a      	ldr	r2, [r3, #4]
 80146f4:	4b24      	ldr	r3, [pc, #144]	; (8014788 <vPortFree+0xb8>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4013      	ands	r3, r2
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d10a      	bne.n	8014714 <vPortFree+0x44>
	__asm volatile
 80146fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014702:	f383 8811 	msr	BASEPRI, r3
 8014706:	f3bf 8f6f 	isb	sy
 801470a:	f3bf 8f4f 	dsb	sy
 801470e:	60fb      	str	r3, [r7, #12]
}
 8014710:	bf00      	nop
 8014712:	e7fe      	b.n	8014712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d00a      	beq.n	8014732 <vPortFree+0x62>
	__asm volatile
 801471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014720:	f383 8811 	msr	BASEPRI, r3
 8014724:	f3bf 8f6f 	isb	sy
 8014728:	f3bf 8f4f 	dsb	sy
 801472c:	60bb      	str	r3, [r7, #8]
}
 801472e:	bf00      	nop
 8014730:	e7fe      	b.n	8014730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014732:	693b      	ldr	r3, [r7, #16]
 8014734:	685a      	ldr	r2, [r3, #4]
 8014736:	4b14      	ldr	r3, [pc, #80]	; (8014788 <vPortFree+0xb8>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4013      	ands	r3, r2
 801473c:	2b00      	cmp	r3, #0
 801473e:	d01e      	beq.n	801477e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014740:	693b      	ldr	r3, [r7, #16]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d11a      	bne.n	801477e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	685a      	ldr	r2, [r3, #4]
 801474c:	4b0e      	ldr	r3, [pc, #56]	; (8014788 <vPortFree+0xb8>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	43db      	mvns	r3, r3
 8014752:	401a      	ands	r2, r3
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014758:	f7fe fbbc 	bl	8012ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	685a      	ldr	r2, [r3, #4]
 8014760:	4b0a      	ldr	r3, [pc, #40]	; (801478c <vPortFree+0xbc>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	4413      	add	r3, r2
 8014766:	4a09      	ldr	r2, [pc, #36]	; (801478c <vPortFree+0xbc>)
 8014768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801476a:	6938      	ldr	r0, [r7, #16]
 801476c:	f000 f874 	bl	8014858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014770:	4b07      	ldr	r3, [pc, #28]	; (8014790 <vPortFree+0xc0>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	3301      	adds	r3, #1
 8014776:	4a06      	ldr	r2, [pc, #24]	; (8014790 <vPortFree+0xc0>)
 8014778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801477a:	f7fe fbb9 	bl	8012ef0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801477e:	bf00      	nop
 8014780:	3718      	adds	r7, #24
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	240050c8 	.word	0x240050c8
 801478c:	240050b8 	.word	0x240050b8
 8014790:	240050c4 	.word	0x240050c4

08014794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014794:	b480      	push	{r7}
 8014796:	b085      	sub	sp, #20
 8014798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801479a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801479e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80147a0:	4b27      	ldr	r3, [pc, #156]	; (8014840 <prvHeapInit+0xac>)
 80147a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	f003 0307 	and.w	r3, r3, #7
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00c      	beq.n	80147c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	3307      	adds	r3, #7
 80147b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f023 0307 	bic.w	r3, r3, #7
 80147ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80147bc:	68ba      	ldr	r2, [r7, #8]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	1ad3      	subs	r3, r2, r3
 80147c2:	4a1f      	ldr	r2, [pc, #124]	; (8014840 <prvHeapInit+0xac>)
 80147c4:	4413      	add	r3, r2
 80147c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80147cc:	4a1d      	ldr	r2, [pc, #116]	; (8014844 <prvHeapInit+0xb0>)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80147d2:	4b1c      	ldr	r3, [pc, #112]	; (8014844 <prvHeapInit+0xb0>)
 80147d4:	2200      	movs	r2, #0
 80147d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	68ba      	ldr	r2, [r7, #8]
 80147dc:	4413      	add	r3, r2
 80147de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80147e0:	2208      	movs	r2, #8
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	1a9b      	subs	r3, r3, r2
 80147e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	f023 0307 	bic.w	r3, r3, #7
 80147ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	4a15      	ldr	r2, [pc, #84]	; (8014848 <prvHeapInit+0xb4>)
 80147f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80147f6:	4b14      	ldr	r3, [pc, #80]	; (8014848 <prvHeapInit+0xb4>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	2200      	movs	r2, #0
 80147fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80147fe:	4b12      	ldr	r3, [pc, #72]	; (8014848 <prvHeapInit+0xb4>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	2200      	movs	r2, #0
 8014804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	68fa      	ldr	r2, [r7, #12]
 801480e:	1ad2      	subs	r2, r2, r3
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014814:	4b0c      	ldr	r3, [pc, #48]	; (8014848 <prvHeapInit+0xb4>)
 8014816:	681a      	ldr	r2, [r3, #0]
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	4a0a      	ldr	r2, [pc, #40]	; (801484c <prvHeapInit+0xb8>)
 8014822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	4a09      	ldr	r2, [pc, #36]	; (8014850 <prvHeapInit+0xbc>)
 801482a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801482c:	4b09      	ldr	r3, [pc, #36]	; (8014854 <prvHeapInit+0xc0>)
 801482e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014832:	601a      	str	r2, [r3, #0]
}
 8014834:	bf00      	nop
 8014836:	3714      	adds	r7, #20
 8014838:	46bd      	mov	sp, r7
 801483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483e:	4770      	bx	lr
 8014840:	240014ac 	.word	0x240014ac
 8014844:	240050ac 	.word	0x240050ac
 8014848:	240050b4 	.word	0x240050b4
 801484c:	240050bc 	.word	0x240050bc
 8014850:	240050b8 	.word	0x240050b8
 8014854:	240050c8 	.word	0x240050c8

08014858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014858:	b480      	push	{r7}
 801485a:	b085      	sub	sp, #20
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014860:	4b28      	ldr	r3, [pc, #160]	; (8014904 <prvInsertBlockIntoFreeList+0xac>)
 8014862:	60fb      	str	r3, [r7, #12]
 8014864:	e002      	b.n	801486c <prvInsertBlockIntoFreeList+0x14>
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	60fb      	str	r3, [r7, #12]
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	687a      	ldr	r2, [r7, #4]
 8014872:	429a      	cmp	r2, r3
 8014874:	d8f7      	bhi.n	8014866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	68ba      	ldr	r2, [r7, #8]
 8014880:	4413      	add	r3, r2
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	429a      	cmp	r2, r3
 8014886:	d108      	bne.n	801489a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	685a      	ldr	r2, [r3, #4]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	685b      	ldr	r3, [r3, #4]
 8014890:	441a      	add	r2, r3
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	441a      	add	r2, r3
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d118      	bne.n	80148e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	4b15      	ldr	r3, [pc, #84]	; (8014908 <prvInsertBlockIntoFreeList+0xb0>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d00d      	beq.n	80148d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	685a      	ldr	r2, [r3, #4]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	441a      	add	r2, r3
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	601a      	str	r2, [r3, #0]
 80148d4:	e008      	b.n	80148e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80148d6:	4b0c      	ldr	r3, [pc, #48]	; (8014908 <prvInsertBlockIntoFreeList+0xb0>)
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	601a      	str	r2, [r3, #0]
 80148de:	e003      	b.n	80148e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681a      	ldr	r2, [r3, #0]
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d002      	beq.n	80148f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80148f6:	bf00      	nop
 80148f8:	3714      	adds	r7, #20
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop
 8014904:	240050ac 	.word	0x240050ac
 8014908:	240050b4 	.word	0x240050b4

0801490c <__errno>:
 801490c:	4b01      	ldr	r3, [pc, #4]	; (8014914 <__errno+0x8>)
 801490e:	6818      	ldr	r0, [r3, #0]
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop
 8014914:	2400009c 	.word	0x2400009c

08014918 <__libc_init_array>:
 8014918:	b570      	push	{r4, r5, r6, lr}
 801491a:	4d0d      	ldr	r5, [pc, #52]	; (8014950 <__libc_init_array+0x38>)
 801491c:	4c0d      	ldr	r4, [pc, #52]	; (8014954 <__libc_init_array+0x3c>)
 801491e:	1b64      	subs	r4, r4, r5
 8014920:	10a4      	asrs	r4, r4, #2
 8014922:	2600      	movs	r6, #0
 8014924:	42a6      	cmp	r6, r4
 8014926:	d109      	bne.n	801493c <__libc_init_array+0x24>
 8014928:	4d0b      	ldr	r5, [pc, #44]	; (8014958 <__libc_init_array+0x40>)
 801492a:	4c0c      	ldr	r4, [pc, #48]	; (801495c <__libc_init_array+0x44>)
 801492c:	f001 f842 	bl	80159b4 <_init>
 8014930:	1b64      	subs	r4, r4, r5
 8014932:	10a4      	asrs	r4, r4, #2
 8014934:	2600      	movs	r6, #0
 8014936:	42a6      	cmp	r6, r4
 8014938:	d105      	bne.n	8014946 <__libc_init_array+0x2e>
 801493a:	bd70      	pop	{r4, r5, r6, pc}
 801493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014940:	4798      	blx	r3
 8014942:	3601      	adds	r6, #1
 8014944:	e7ee      	b.n	8014924 <__libc_init_array+0xc>
 8014946:	f855 3b04 	ldr.w	r3, [r5], #4
 801494a:	4798      	blx	r3
 801494c:	3601      	adds	r6, #1
 801494e:	e7f2      	b.n	8014936 <__libc_init_array+0x1e>
 8014950:	08015dcc 	.word	0x08015dcc
 8014954:	08015dcc 	.word	0x08015dcc
 8014958:	08015dcc 	.word	0x08015dcc
 801495c:	08015dd0 	.word	0x08015dd0

08014960 <malloc>:
 8014960:	4b02      	ldr	r3, [pc, #8]	; (801496c <malloc+0xc>)
 8014962:	4601      	mov	r1, r0
 8014964:	6818      	ldr	r0, [r3, #0]
 8014966:	f000 b88d 	b.w	8014a84 <_malloc_r>
 801496a:	bf00      	nop
 801496c:	2400009c 	.word	0x2400009c

08014970 <free>:
 8014970:	4b02      	ldr	r3, [pc, #8]	; (801497c <free+0xc>)
 8014972:	4601      	mov	r1, r0
 8014974:	6818      	ldr	r0, [r3, #0]
 8014976:	f000 b819 	b.w	80149ac <_free_r>
 801497a:	bf00      	nop
 801497c:	2400009c 	.word	0x2400009c

08014980 <memcpy>:
 8014980:	440a      	add	r2, r1
 8014982:	4291      	cmp	r1, r2
 8014984:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014988:	d100      	bne.n	801498c <memcpy+0xc>
 801498a:	4770      	bx	lr
 801498c:	b510      	push	{r4, lr}
 801498e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014996:	4291      	cmp	r1, r2
 8014998:	d1f9      	bne.n	801498e <memcpy+0xe>
 801499a:	bd10      	pop	{r4, pc}

0801499c <memset>:
 801499c:	4402      	add	r2, r0
 801499e:	4603      	mov	r3, r0
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d100      	bne.n	80149a6 <memset+0xa>
 80149a4:	4770      	bx	lr
 80149a6:	f803 1b01 	strb.w	r1, [r3], #1
 80149aa:	e7f9      	b.n	80149a0 <memset+0x4>

080149ac <_free_r>:
 80149ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149ae:	2900      	cmp	r1, #0
 80149b0:	d044      	beq.n	8014a3c <_free_r+0x90>
 80149b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149b6:	9001      	str	r0, [sp, #4]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	f1a1 0404 	sub.w	r4, r1, #4
 80149be:	bfb8      	it	lt
 80149c0:	18e4      	addlt	r4, r4, r3
 80149c2:	f000 fc51 	bl	8015268 <__malloc_lock>
 80149c6:	4a1e      	ldr	r2, [pc, #120]	; (8014a40 <_free_r+0x94>)
 80149c8:	9801      	ldr	r0, [sp, #4]
 80149ca:	6813      	ldr	r3, [r2, #0]
 80149cc:	b933      	cbnz	r3, 80149dc <_free_r+0x30>
 80149ce:	6063      	str	r3, [r4, #4]
 80149d0:	6014      	str	r4, [r2, #0]
 80149d2:	b003      	add	sp, #12
 80149d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149d8:	f000 bc4c 	b.w	8015274 <__malloc_unlock>
 80149dc:	42a3      	cmp	r3, r4
 80149de:	d908      	bls.n	80149f2 <_free_r+0x46>
 80149e0:	6825      	ldr	r5, [r4, #0]
 80149e2:	1961      	adds	r1, r4, r5
 80149e4:	428b      	cmp	r3, r1
 80149e6:	bf01      	itttt	eq
 80149e8:	6819      	ldreq	r1, [r3, #0]
 80149ea:	685b      	ldreq	r3, [r3, #4]
 80149ec:	1949      	addeq	r1, r1, r5
 80149ee:	6021      	streq	r1, [r4, #0]
 80149f0:	e7ed      	b.n	80149ce <_free_r+0x22>
 80149f2:	461a      	mov	r2, r3
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	b10b      	cbz	r3, 80149fc <_free_r+0x50>
 80149f8:	42a3      	cmp	r3, r4
 80149fa:	d9fa      	bls.n	80149f2 <_free_r+0x46>
 80149fc:	6811      	ldr	r1, [r2, #0]
 80149fe:	1855      	adds	r5, r2, r1
 8014a00:	42a5      	cmp	r5, r4
 8014a02:	d10b      	bne.n	8014a1c <_free_r+0x70>
 8014a04:	6824      	ldr	r4, [r4, #0]
 8014a06:	4421      	add	r1, r4
 8014a08:	1854      	adds	r4, r2, r1
 8014a0a:	42a3      	cmp	r3, r4
 8014a0c:	6011      	str	r1, [r2, #0]
 8014a0e:	d1e0      	bne.n	80149d2 <_free_r+0x26>
 8014a10:	681c      	ldr	r4, [r3, #0]
 8014a12:	685b      	ldr	r3, [r3, #4]
 8014a14:	6053      	str	r3, [r2, #4]
 8014a16:	4421      	add	r1, r4
 8014a18:	6011      	str	r1, [r2, #0]
 8014a1a:	e7da      	b.n	80149d2 <_free_r+0x26>
 8014a1c:	d902      	bls.n	8014a24 <_free_r+0x78>
 8014a1e:	230c      	movs	r3, #12
 8014a20:	6003      	str	r3, [r0, #0]
 8014a22:	e7d6      	b.n	80149d2 <_free_r+0x26>
 8014a24:	6825      	ldr	r5, [r4, #0]
 8014a26:	1961      	adds	r1, r4, r5
 8014a28:	428b      	cmp	r3, r1
 8014a2a:	bf04      	itt	eq
 8014a2c:	6819      	ldreq	r1, [r3, #0]
 8014a2e:	685b      	ldreq	r3, [r3, #4]
 8014a30:	6063      	str	r3, [r4, #4]
 8014a32:	bf04      	itt	eq
 8014a34:	1949      	addeq	r1, r1, r5
 8014a36:	6021      	streq	r1, [r4, #0]
 8014a38:	6054      	str	r4, [r2, #4]
 8014a3a:	e7ca      	b.n	80149d2 <_free_r+0x26>
 8014a3c:	b003      	add	sp, #12
 8014a3e:	bd30      	pop	{r4, r5, pc}
 8014a40:	240050cc 	.word	0x240050cc

08014a44 <sbrk_aligned>:
 8014a44:	b570      	push	{r4, r5, r6, lr}
 8014a46:	4e0e      	ldr	r6, [pc, #56]	; (8014a80 <sbrk_aligned+0x3c>)
 8014a48:	460c      	mov	r4, r1
 8014a4a:	6831      	ldr	r1, [r6, #0]
 8014a4c:	4605      	mov	r5, r0
 8014a4e:	b911      	cbnz	r1, 8014a56 <sbrk_aligned+0x12>
 8014a50:	f000 f91a 	bl	8014c88 <_sbrk_r>
 8014a54:	6030      	str	r0, [r6, #0]
 8014a56:	4621      	mov	r1, r4
 8014a58:	4628      	mov	r0, r5
 8014a5a:	f000 f915 	bl	8014c88 <_sbrk_r>
 8014a5e:	1c43      	adds	r3, r0, #1
 8014a60:	d00a      	beq.n	8014a78 <sbrk_aligned+0x34>
 8014a62:	1cc4      	adds	r4, r0, #3
 8014a64:	f024 0403 	bic.w	r4, r4, #3
 8014a68:	42a0      	cmp	r0, r4
 8014a6a:	d007      	beq.n	8014a7c <sbrk_aligned+0x38>
 8014a6c:	1a21      	subs	r1, r4, r0
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f000 f90a 	bl	8014c88 <_sbrk_r>
 8014a74:	3001      	adds	r0, #1
 8014a76:	d101      	bne.n	8014a7c <sbrk_aligned+0x38>
 8014a78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	bd70      	pop	{r4, r5, r6, pc}
 8014a80:	240050d0 	.word	0x240050d0

08014a84 <_malloc_r>:
 8014a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a88:	1ccd      	adds	r5, r1, #3
 8014a8a:	f025 0503 	bic.w	r5, r5, #3
 8014a8e:	3508      	adds	r5, #8
 8014a90:	2d0c      	cmp	r5, #12
 8014a92:	bf38      	it	cc
 8014a94:	250c      	movcc	r5, #12
 8014a96:	2d00      	cmp	r5, #0
 8014a98:	4607      	mov	r7, r0
 8014a9a:	db01      	blt.n	8014aa0 <_malloc_r+0x1c>
 8014a9c:	42a9      	cmp	r1, r5
 8014a9e:	d905      	bls.n	8014aac <_malloc_r+0x28>
 8014aa0:	230c      	movs	r3, #12
 8014aa2:	603b      	str	r3, [r7, #0]
 8014aa4:	2600      	movs	r6, #0
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aac:	4e2e      	ldr	r6, [pc, #184]	; (8014b68 <_malloc_r+0xe4>)
 8014aae:	f000 fbdb 	bl	8015268 <__malloc_lock>
 8014ab2:	6833      	ldr	r3, [r6, #0]
 8014ab4:	461c      	mov	r4, r3
 8014ab6:	bb34      	cbnz	r4, 8014b06 <_malloc_r+0x82>
 8014ab8:	4629      	mov	r1, r5
 8014aba:	4638      	mov	r0, r7
 8014abc:	f7ff ffc2 	bl	8014a44 <sbrk_aligned>
 8014ac0:	1c43      	adds	r3, r0, #1
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	d14d      	bne.n	8014b62 <_malloc_r+0xde>
 8014ac6:	6834      	ldr	r4, [r6, #0]
 8014ac8:	4626      	mov	r6, r4
 8014aca:	2e00      	cmp	r6, #0
 8014acc:	d140      	bne.n	8014b50 <_malloc_r+0xcc>
 8014ace:	6823      	ldr	r3, [r4, #0]
 8014ad0:	4631      	mov	r1, r6
 8014ad2:	4638      	mov	r0, r7
 8014ad4:	eb04 0803 	add.w	r8, r4, r3
 8014ad8:	f000 f8d6 	bl	8014c88 <_sbrk_r>
 8014adc:	4580      	cmp	r8, r0
 8014ade:	d13a      	bne.n	8014b56 <_malloc_r+0xd2>
 8014ae0:	6821      	ldr	r1, [r4, #0]
 8014ae2:	3503      	adds	r5, #3
 8014ae4:	1a6d      	subs	r5, r5, r1
 8014ae6:	f025 0503 	bic.w	r5, r5, #3
 8014aea:	3508      	adds	r5, #8
 8014aec:	2d0c      	cmp	r5, #12
 8014aee:	bf38      	it	cc
 8014af0:	250c      	movcc	r5, #12
 8014af2:	4629      	mov	r1, r5
 8014af4:	4638      	mov	r0, r7
 8014af6:	f7ff ffa5 	bl	8014a44 <sbrk_aligned>
 8014afa:	3001      	adds	r0, #1
 8014afc:	d02b      	beq.n	8014b56 <_malloc_r+0xd2>
 8014afe:	6823      	ldr	r3, [r4, #0]
 8014b00:	442b      	add	r3, r5
 8014b02:	6023      	str	r3, [r4, #0]
 8014b04:	e00e      	b.n	8014b24 <_malloc_r+0xa0>
 8014b06:	6822      	ldr	r2, [r4, #0]
 8014b08:	1b52      	subs	r2, r2, r5
 8014b0a:	d41e      	bmi.n	8014b4a <_malloc_r+0xc6>
 8014b0c:	2a0b      	cmp	r2, #11
 8014b0e:	d916      	bls.n	8014b3e <_malloc_r+0xba>
 8014b10:	1961      	adds	r1, r4, r5
 8014b12:	42a3      	cmp	r3, r4
 8014b14:	6025      	str	r5, [r4, #0]
 8014b16:	bf18      	it	ne
 8014b18:	6059      	strne	r1, [r3, #4]
 8014b1a:	6863      	ldr	r3, [r4, #4]
 8014b1c:	bf08      	it	eq
 8014b1e:	6031      	streq	r1, [r6, #0]
 8014b20:	5162      	str	r2, [r4, r5]
 8014b22:	604b      	str	r3, [r1, #4]
 8014b24:	4638      	mov	r0, r7
 8014b26:	f104 060b 	add.w	r6, r4, #11
 8014b2a:	f000 fba3 	bl	8015274 <__malloc_unlock>
 8014b2e:	f026 0607 	bic.w	r6, r6, #7
 8014b32:	1d23      	adds	r3, r4, #4
 8014b34:	1af2      	subs	r2, r6, r3
 8014b36:	d0b6      	beq.n	8014aa6 <_malloc_r+0x22>
 8014b38:	1b9b      	subs	r3, r3, r6
 8014b3a:	50a3      	str	r3, [r4, r2]
 8014b3c:	e7b3      	b.n	8014aa6 <_malloc_r+0x22>
 8014b3e:	6862      	ldr	r2, [r4, #4]
 8014b40:	42a3      	cmp	r3, r4
 8014b42:	bf0c      	ite	eq
 8014b44:	6032      	streq	r2, [r6, #0]
 8014b46:	605a      	strne	r2, [r3, #4]
 8014b48:	e7ec      	b.n	8014b24 <_malloc_r+0xa0>
 8014b4a:	4623      	mov	r3, r4
 8014b4c:	6864      	ldr	r4, [r4, #4]
 8014b4e:	e7b2      	b.n	8014ab6 <_malloc_r+0x32>
 8014b50:	4634      	mov	r4, r6
 8014b52:	6876      	ldr	r6, [r6, #4]
 8014b54:	e7b9      	b.n	8014aca <_malloc_r+0x46>
 8014b56:	230c      	movs	r3, #12
 8014b58:	603b      	str	r3, [r7, #0]
 8014b5a:	4638      	mov	r0, r7
 8014b5c:	f000 fb8a 	bl	8015274 <__malloc_unlock>
 8014b60:	e7a1      	b.n	8014aa6 <_malloc_r+0x22>
 8014b62:	6025      	str	r5, [r4, #0]
 8014b64:	e7de      	b.n	8014b24 <_malloc_r+0xa0>
 8014b66:	bf00      	nop
 8014b68:	240050cc 	.word	0x240050cc

08014b6c <iprintf>:
 8014b6c:	b40f      	push	{r0, r1, r2, r3}
 8014b6e:	4b0a      	ldr	r3, [pc, #40]	; (8014b98 <iprintf+0x2c>)
 8014b70:	b513      	push	{r0, r1, r4, lr}
 8014b72:	681c      	ldr	r4, [r3, #0]
 8014b74:	b124      	cbz	r4, 8014b80 <iprintf+0x14>
 8014b76:	69a3      	ldr	r3, [r4, #24]
 8014b78:	b913      	cbnz	r3, 8014b80 <iprintf+0x14>
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	f000 fa6e 	bl	801505c <__sinit>
 8014b80:	ab05      	add	r3, sp, #20
 8014b82:	9a04      	ldr	r2, [sp, #16]
 8014b84:	68a1      	ldr	r1, [r4, #8]
 8014b86:	9301      	str	r3, [sp, #4]
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f000 fba3 	bl	80152d4 <_vfiprintf_r>
 8014b8e:	b002      	add	sp, #8
 8014b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b94:	b004      	add	sp, #16
 8014b96:	4770      	bx	lr
 8014b98:	2400009c 	.word	0x2400009c

08014b9c <_puts_r>:
 8014b9c:	b570      	push	{r4, r5, r6, lr}
 8014b9e:	460e      	mov	r6, r1
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	b118      	cbz	r0, 8014bac <_puts_r+0x10>
 8014ba4:	6983      	ldr	r3, [r0, #24]
 8014ba6:	b90b      	cbnz	r3, 8014bac <_puts_r+0x10>
 8014ba8:	f000 fa58 	bl	801505c <__sinit>
 8014bac:	69ab      	ldr	r3, [r5, #24]
 8014bae:	68ac      	ldr	r4, [r5, #8]
 8014bb0:	b913      	cbnz	r3, 8014bb8 <_puts_r+0x1c>
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f000 fa52 	bl	801505c <__sinit>
 8014bb8:	4b2c      	ldr	r3, [pc, #176]	; (8014c6c <_puts_r+0xd0>)
 8014bba:	429c      	cmp	r4, r3
 8014bbc:	d120      	bne.n	8014c00 <_puts_r+0x64>
 8014bbe:	686c      	ldr	r4, [r5, #4]
 8014bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bc2:	07db      	lsls	r3, r3, #31
 8014bc4:	d405      	bmi.n	8014bd2 <_puts_r+0x36>
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	0598      	lsls	r0, r3, #22
 8014bca:	d402      	bmi.n	8014bd2 <_puts_r+0x36>
 8014bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014bce:	f000 fae3 	bl	8015198 <__retarget_lock_acquire_recursive>
 8014bd2:	89a3      	ldrh	r3, [r4, #12]
 8014bd4:	0719      	lsls	r1, r3, #28
 8014bd6:	d51d      	bpl.n	8014c14 <_puts_r+0x78>
 8014bd8:	6923      	ldr	r3, [r4, #16]
 8014bda:	b1db      	cbz	r3, 8014c14 <_puts_r+0x78>
 8014bdc:	3e01      	subs	r6, #1
 8014bde:	68a3      	ldr	r3, [r4, #8]
 8014be0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014be4:	3b01      	subs	r3, #1
 8014be6:	60a3      	str	r3, [r4, #8]
 8014be8:	bb39      	cbnz	r1, 8014c3a <_puts_r+0x9e>
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	da38      	bge.n	8014c60 <_puts_r+0xc4>
 8014bee:	4622      	mov	r2, r4
 8014bf0:	210a      	movs	r1, #10
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	f000 f858 	bl	8014ca8 <__swbuf_r>
 8014bf8:	3001      	adds	r0, #1
 8014bfa:	d011      	beq.n	8014c20 <_puts_r+0x84>
 8014bfc:	250a      	movs	r5, #10
 8014bfe:	e011      	b.n	8014c24 <_puts_r+0x88>
 8014c00:	4b1b      	ldr	r3, [pc, #108]	; (8014c70 <_puts_r+0xd4>)
 8014c02:	429c      	cmp	r4, r3
 8014c04:	d101      	bne.n	8014c0a <_puts_r+0x6e>
 8014c06:	68ac      	ldr	r4, [r5, #8]
 8014c08:	e7da      	b.n	8014bc0 <_puts_r+0x24>
 8014c0a:	4b1a      	ldr	r3, [pc, #104]	; (8014c74 <_puts_r+0xd8>)
 8014c0c:	429c      	cmp	r4, r3
 8014c0e:	bf08      	it	eq
 8014c10:	68ec      	ldreq	r4, [r5, #12]
 8014c12:	e7d5      	b.n	8014bc0 <_puts_r+0x24>
 8014c14:	4621      	mov	r1, r4
 8014c16:	4628      	mov	r0, r5
 8014c18:	f000 f898 	bl	8014d4c <__swsetup_r>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	d0dd      	beq.n	8014bdc <_puts_r+0x40>
 8014c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c26:	07da      	lsls	r2, r3, #31
 8014c28:	d405      	bmi.n	8014c36 <_puts_r+0x9a>
 8014c2a:	89a3      	ldrh	r3, [r4, #12]
 8014c2c:	059b      	lsls	r3, r3, #22
 8014c2e:	d402      	bmi.n	8014c36 <_puts_r+0x9a>
 8014c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c32:	f000 fab2 	bl	801519a <__retarget_lock_release_recursive>
 8014c36:	4628      	mov	r0, r5
 8014c38:	bd70      	pop	{r4, r5, r6, pc}
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	da04      	bge.n	8014c48 <_puts_r+0xac>
 8014c3e:	69a2      	ldr	r2, [r4, #24]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	dc06      	bgt.n	8014c52 <_puts_r+0xb6>
 8014c44:	290a      	cmp	r1, #10
 8014c46:	d004      	beq.n	8014c52 <_puts_r+0xb6>
 8014c48:	6823      	ldr	r3, [r4, #0]
 8014c4a:	1c5a      	adds	r2, r3, #1
 8014c4c:	6022      	str	r2, [r4, #0]
 8014c4e:	7019      	strb	r1, [r3, #0]
 8014c50:	e7c5      	b.n	8014bde <_puts_r+0x42>
 8014c52:	4622      	mov	r2, r4
 8014c54:	4628      	mov	r0, r5
 8014c56:	f000 f827 	bl	8014ca8 <__swbuf_r>
 8014c5a:	3001      	adds	r0, #1
 8014c5c:	d1bf      	bne.n	8014bde <_puts_r+0x42>
 8014c5e:	e7df      	b.n	8014c20 <_puts_r+0x84>
 8014c60:	6823      	ldr	r3, [r4, #0]
 8014c62:	250a      	movs	r5, #10
 8014c64:	1c5a      	adds	r2, r3, #1
 8014c66:	6022      	str	r2, [r4, #0]
 8014c68:	701d      	strb	r5, [r3, #0]
 8014c6a:	e7db      	b.n	8014c24 <_puts_r+0x88>
 8014c6c:	08015d50 	.word	0x08015d50
 8014c70:	08015d70 	.word	0x08015d70
 8014c74:	08015d30 	.word	0x08015d30

08014c78 <puts>:
 8014c78:	4b02      	ldr	r3, [pc, #8]	; (8014c84 <puts+0xc>)
 8014c7a:	4601      	mov	r1, r0
 8014c7c:	6818      	ldr	r0, [r3, #0]
 8014c7e:	f7ff bf8d 	b.w	8014b9c <_puts_r>
 8014c82:	bf00      	nop
 8014c84:	2400009c 	.word	0x2400009c

08014c88 <_sbrk_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d06      	ldr	r5, [pc, #24]	; (8014ca4 <_sbrk_r+0x1c>)
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4608      	mov	r0, r1
 8014c92:	602b      	str	r3, [r5, #0]
 8014c94:	f7ee fb5e 	bl	8003354 <_sbrk>
 8014c98:	1c43      	adds	r3, r0, #1
 8014c9a:	d102      	bne.n	8014ca2 <_sbrk_r+0x1a>
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	b103      	cbz	r3, 8014ca2 <_sbrk_r+0x1a>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}
 8014ca4:	240050d8 	.word	0x240050d8

08014ca8 <__swbuf_r>:
 8014ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014caa:	460e      	mov	r6, r1
 8014cac:	4614      	mov	r4, r2
 8014cae:	4605      	mov	r5, r0
 8014cb0:	b118      	cbz	r0, 8014cba <__swbuf_r+0x12>
 8014cb2:	6983      	ldr	r3, [r0, #24]
 8014cb4:	b90b      	cbnz	r3, 8014cba <__swbuf_r+0x12>
 8014cb6:	f000 f9d1 	bl	801505c <__sinit>
 8014cba:	4b21      	ldr	r3, [pc, #132]	; (8014d40 <__swbuf_r+0x98>)
 8014cbc:	429c      	cmp	r4, r3
 8014cbe:	d12b      	bne.n	8014d18 <__swbuf_r+0x70>
 8014cc0:	686c      	ldr	r4, [r5, #4]
 8014cc2:	69a3      	ldr	r3, [r4, #24]
 8014cc4:	60a3      	str	r3, [r4, #8]
 8014cc6:	89a3      	ldrh	r3, [r4, #12]
 8014cc8:	071a      	lsls	r2, r3, #28
 8014cca:	d52f      	bpl.n	8014d2c <__swbuf_r+0x84>
 8014ccc:	6923      	ldr	r3, [r4, #16]
 8014cce:	b36b      	cbz	r3, 8014d2c <__swbuf_r+0x84>
 8014cd0:	6923      	ldr	r3, [r4, #16]
 8014cd2:	6820      	ldr	r0, [r4, #0]
 8014cd4:	1ac0      	subs	r0, r0, r3
 8014cd6:	6963      	ldr	r3, [r4, #20]
 8014cd8:	b2f6      	uxtb	r6, r6
 8014cda:	4283      	cmp	r3, r0
 8014cdc:	4637      	mov	r7, r6
 8014cde:	dc04      	bgt.n	8014cea <__swbuf_r+0x42>
 8014ce0:	4621      	mov	r1, r4
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	f000 f926 	bl	8014f34 <_fflush_r>
 8014ce8:	bb30      	cbnz	r0, 8014d38 <__swbuf_r+0x90>
 8014cea:	68a3      	ldr	r3, [r4, #8]
 8014cec:	3b01      	subs	r3, #1
 8014cee:	60a3      	str	r3, [r4, #8]
 8014cf0:	6823      	ldr	r3, [r4, #0]
 8014cf2:	1c5a      	adds	r2, r3, #1
 8014cf4:	6022      	str	r2, [r4, #0]
 8014cf6:	701e      	strb	r6, [r3, #0]
 8014cf8:	6963      	ldr	r3, [r4, #20]
 8014cfa:	3001      	adds	r0, #1
 8014cfc:	4283      	cmp	r3, r0
 8014cfe:	d004      	beq.n	8014d0a <__swbuf_r+0x62>
 8014d00:	89a3      	ldrh	r3, [r4, #12]
 8014d02:	07db      	lsls	r3, r3, #31
 8014d04:	d506      	bpl.n	8014d14 <__swbuf_r+0x6c>
 8014d06:	2e0a      	cmp	r6, #10
 8014d08:	d104      	bne.n	8014d14 <__swbuf_r+0x6c>
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	f000 f911 	bl	8014f34 <_fflush_r>
 8014d12:	b988      	cbnz	r0, 8014d38 <__swbuf_r+0x90>
 8014d14:	4638      	mov	r0, r7
 8014d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d18:	4b0a      	ldr	r3, [pc, #40]	; (8014d44 <__swbuf_r+0x9c>)
 8014d1a:	429c      	cmp	r4, r3
 8014d1c:	d101      	bne.n	8014d22 <__swbuf_r+0x7a>
 8014d1e:	68ac      	ldr	r4, [r5, #8]
 8014d20:	e7cf      	b.n	8014cc2 <__swbuf_r+0x1a>
 8014d22:	4b09      	ldr	r3, [pc, #36]	; (8014d48 <__swbuf_r+0xa0>)
 8014d24:	429c      	cmp	r4, r3
 8014d26:	bf08      	it	eq
 8014d28:	68ec      	ldreq	r4, [r5, #12]
 8014d2a:	e7ca      	b.n	8014cc2 <__swbuf_r+0x1a>
 8014d2c:	4621      	mov	r1, r4
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f000 f80c 	bl	8014d4c <__swsetup_r>
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0cb      	beq.n	8014cd0 <__swbuf_r+0x28>
 8014d38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014d3c:	e7ea      	b.n	8014d14 <__swbuf_r+0x6c>
 8014d3e:	bf00      	nop
 8014d40:	08015d50 	.word	0x08015d50
 8014d44:	08015d70 	.word	0x08015d70
 8014d48:	08015d30 	.word	0x08015d30

08014d4c <__swsetup_r>:
 8014d4c:	4b32      	ldr	r3, [pc, #200]	; (8014e18 <__swsetup_r+0xcc>)
 8014d4e:	b570      	push	{r4, r5, r6, lr}
 8014d50:	681d      	ldr	r5, [r3, #0]
 8014d52:	4606      	mov	r6, r0
 8014d54:	460c      	mov	r4, r1
 8014d56:	b125      	cbz	r5, 8014d62 <__swsetup_r+0x16>
 8014d58:	69ab      	ldr	r3, [r5, #24]
 8014d5a:	b913      	cbnz	r3, 8014d62 <__swsetup_r+0x16>
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f000 f97d 	bl	801505c <__sinit>
 8014d62:	4b2e      	ldr	r3, [pc, #184]	; (8014e1c <__swsetup_r+0xd0>)
 8014d64:	429c      	cmp	r4, r3
 8014d66:	d10f      	bne.n	8014d88 <__swsetup_r+0x3c>
 8014d68:	686c      	ldr	r4, [r5, #4]
 8014d6a:	89a3      	ldrh	r3, [r4, #12]
 8014d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d70:	0719      	lsls	r1, r3, #28
 8014d72:	d42c      	bmi.n	8014dce <__swsetup_r+0x82>
 8014d74:	06dd      	lsls	r5, r3, #27
 8014d76:	d411      	bmi.n	8014d9c <__swsetup_r+0x50>
 8014d78:	2309      	movs	r3, #9
 8014d7a:	6033      	str	r3, [r6, #0]
 8014d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d80:	81a3      	strh	r3, [r4, #12]
 8014d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d86:	e03e      	b.n	8014e06 <__swsetup_r+0xba>
 8014d88:	4b25      	ldr	r3, [pc, #148]	; (8014e20 <__swsetup_r+0xd4>)
 8014d8a:	429c      	cmp	r4, r3
 8014d8c:	d101      	bne.n	8014d92 <__swsetup_r+0x46>
 8014d8e:	68ac      	ldr	r4, [r5, #8]
 8014d90:	e7eb      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d92:	4b24      	ldr	r3, [pc, #144]	; (8014e24 <__swsetup_r+0xd8>)
 8014d94:	429c      	cmp	r4, r3
 8014d96:	bf08      	it	eq
 8014d98:	68ec      	ldreq	r4, [r5, #12]
 8014d9a:	e7e6      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d9c:	0758      	lsls	r0, r3, #29
 8014d9e:	d512      	bpl.n	8014dc6 <__swsetup_r+0x7a>
 8014da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014da2:	b141      	cbz	r1, 8014db6 <__swsetup_r+0x6a>
 8014da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014da8:	4299      	cmp	r1, r3
 8014daa:	d002      	beq.n	8014db2 <__swsetup_r+0x66>
 8014dac:	4630      	mov	r0, r6
 8014dae:	f7ff fdfd 	bl	80149ac <_free_r>
 8014db2:	2300      	movs	r3, #0
 8014db4:	6363      	str	r3, [r4, #52]	; 0x34
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dbc:	81a3      	strh	r3, [r4, #12]
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	6923      	ldr	r3, [r4, #16]
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	f043 0308 	orr.w	r3, r3, #8
 8014dcc:	81a3      	strh	r3, [r4, #12]
 8014dce:	6923      	ldr	r3, [r4, #16]
 8014dd0:	b94b      	cbnz	r3, 8014de6 <__swsetup_r+0x9a>
 8014dd2:	89a3      	ldrh	r3, [r4, #12]
 8014dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ddc:	d003      	beq.n	8014de6 <__swsetup_r+0x9a>
 8014dde:	4621      	mov	r1, r4
 8014de0:	4630      	mov	r0, r6
 8014de2:	f000 fa01 	bl	80151e8 <__smakebuf_r>
 8014de6:	89a0      	ldrh	r0, [r4, #12]
 8014de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014dec:	f010 0301 	ands.w	r3, r0, #1
 8014df0:	d00a      	beq.n	8014e08 <__swsetup_r+0xbc>
 8014df2:	2300      	movs	r3, #0
 8014df4:	60a3      	str	r3, [r4, #8]
 8014df6:	6963      	ldr	r3, [r4, #20]
 8014df8:	425b      	negs	r3, r3
 8014dfa:	61a3      	str	r3, [r4, #24]
 8014dfc:	6923      	ldr	r3, [r4, #16]
 8014dfe:	b943      	cbnz	r3, 8014e12 <__swsetup_r+0xc6>
 8014e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e04:	d1ba      	bne.n	8014d7c <__swsetup_r+0x30>
 8014e06:	bd70      	pop	{r4, r5, r6, pc}
 8014e08:	0781      	lsls	r1, r0, #30
 8014e0a:	bf58      	it	pl
 8014e0c:	6963      	ldrpl	r3, [r4, #20]
 8014e0e:	60a3      	str	r3, [r4, #8]
 8014e10:	e7f4      	b.n	8014dfc <__swsetup_r+0xb0>
 8014e12:	2000      	movs	r0, #0
 8014e14:	e7f7      	b.n	8014e06 <__swsetup_r+0xba>
 8014e16:	bf00      	nop
 8014e18:	2400009c 	.word	0x2400009c
 8014e1c:	08015d50 	.word	0x08015d50
 8014e20:	08015d70 	.word	0x08015d70
 8014e24:	08015d30 	.word	0x08015d30

08014e28 <__sflush_r>:
 8014e28:	898a      	ldrh	r2, [r1, #12]
 8014e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2e:	4605      	mov	r5, r0
 8014e30:	0710      	lsls	r0, r2, #28
 8014e32:	460c      	mov	r4, r1
 8014e34:	d458      	bmi.n	8014ee8 <__sflush_r+0xc0>
 8014e36:	684b      	ldr	r3, [r1, #4]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	dc05      	bgt.n	8014e48 <__sflush_r+0x20>
 8014e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	dc02      	bgt.n	8014e48 <__sflush_r+0x20>
 8014e42:	2000      	movs	r0, #0
 8014e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e4a:	2e00      	cmp	r6, #0
 8014e4c:	d0f9      	beq.n	8014e42 <__sflush_r+0x1a>
 8014e4e:	2300      	movs	r3, #0
 8014e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e54:	682f      	ldr	r7, [r5, #0]
 8014e56:	602b      	str	r3, [r5, #0]
 8014e58:	d032      	beq.n	8014ec0 <__sflush_r+0x98>
 8014e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e5c:	89a3      	ldrh	r3, [r4, #12]
 8014e5e:	075a      	lsls	r2, r3, #29
 8014e60:	d505      	bpl.n	8014e6e <__sflush_r+0x46>
 8014e62:	6863      	ldr	r3, [r4, #4]
 8014e64:	1ac0      	subs	r0, r0, r3
 8014e66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e68:	b10b      	cbz	r3, 8014e6e <__sflush_r+0x46>
 8014e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e6c:	1ac0      	subs	r0, r0, r3
 8014e6e:	2300      	movs	r3, #0
 8014e70:	4602      	mov	r2, r0
 8014e72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e74:	6a21      	ldr	r1, [r4, #32]
 8014e76:	4628      	mov	r0, r5
 8014e78:	47b0      	blx	r6
 8014e7a:	1c43      	adds	r3, r0, #1
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	d106      	bne.n	8014e8e <__sflush_r+0x66>
 8014e80:	6829      	ldr	r1, [r5, #0]
 8014e82:	291d      	cmp	r1, #29
 8014e84:	d82c      	bhi.n	8014ee0 <__sflush_r+0xb8>
 8014e86:	4a2a      	ldr	r2, [pc, #168]	; (8014f30 <__sflush_r+0x108>)
 8014e88:	40ca      	lsrs	r2, r1
 8014e8a:	07d6      	lsls	r6, r2, #31
 8014e8c:	d528      	bpl.n	8014ee0 <__sflush_r+0xb8>
 8014e8e:	2200      	movs	r2, #0
 8014e90:	6062      	str	r2, [r4, #4]
 8014e92:	04d9      	lsls	r1, r3, #19
 8014e94:	6922      	ldr	r2, [r4, #16]
 8014e96:	6022      	str	r2, [r4, #0]
 8014e98:	d504      	bpl.n	8014ea4 <__sflush_r+0x7c>
 8014e9a:	1c42      	adds	r2, r0, #1
 8014e9c:	d101      	bne.n	8014ea2 <__sflush_r+0x7a>
 8014e9e:	682b      	ldr	r3, [r5, #0]
 8014ea0:	b903      	cbnz	r3, 8014ea4 <__sflush_r+0x7c>
 8014ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8014ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ea6:	602f      	str	r7, [r5, #0]
 8014ea8:	2900      	cmp	r1, #0
 8014eaa:	d0ca      	beq.n	8014e42 <__sflush_r+0x1a>
 8014eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014eb0:	4299      	cmp	r1, r3
 8014eb2:	d002      	beq.n	8014eba <__sflush_r+0x92>
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	f7ff fd79 	bl	80149ac <_free_r>
 8014eba:	2000      	movs	r0, #0
 8014ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8014ebe:	e7c1      	b.n	8014e44 <__sflush_r+0x1c>
 8014ec0:	6a21      	ldr	r1, [r4, #32]
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	47b0      	blx	r6
 8014ec8:	1c41      	adds	r1, r0, #1
 8014eca:	d1c7      	bne.n	8014e5c <__sflush_r+0x34>
 8014ecc:	682b      	ldr	r3, [r5, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d0c4      	beq.n	8014e5c <__sflush_r+0x34>
 8014ed2:	2b1d      	cmp	r3, #29
 8014ed4:	d001      	beq.n	8014eda <__sflush_r+0xb2>
 8014ed6:	2b16      	cmp	r3, #22
 8014ed8:	d101      	bne.n	8014ede <__sflush_r+0xb6>
 8014eda:	602f      	str	r7, [r5, #0]
 8014edc:	e7b1      	b.n	8014e42 <__sflush_r+0x1a>
 8014ede:	89a3      	ldrh	r3, [r4, #12]
 8014ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ee4:	81a3      	strh	r3, [r4, #12]
 8014ee6:	e7ad      	b.n	8014e44 <__sflush_r+0x1c>
 8014ee8:	690f      	ldr	r7, [r1, #16]
 8014eea:	2f00      	cmp	r7, #0
 8014eec:	d0a9      	beq.n	8014e42 <__sflush_r+0x1a>
 8014eee:	0793      	lsls	r3, r2, #30
 8014ef0:	680e      	ldr	r6, [r1, #0]
 8014ef2:	bf08      	it	eq
 8014ef4:	694b      	ldreq	r3, [r1, #20]
 8014ef6:	600f      	str	r7, [r1, #0]
 8014ef8:	bf18      	it	ne
 8014efa:	2300      	movne	r3, #0
 8014efc:	eba6 0807 	sub.w	r8, r6, r7
 8014f00:	608b      	str	r3, [r1, #8]
 8014f02:	f1b8 0f00 	cmp.w	r8, #0
 8014f06:	dd9c      	ble.n	8014e42 <__sflush_r+0x1a>
 8014f08:	6a21      	ldr	r1, [r4, #32]
 8014f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f0c:	4643      	mov	r3, r8
 8014f0e:	463a      	mov	r2, r7
 8014f10:	4628      	mov	r0, r5
 8014f12:	47b0      	blx	r6
 8014f14:	2800      	cmp	r0, #0
 8014f16:	dc06      	bgt.n	8014f26 <__sflush_r+0xfe>
 8014f18:	89a3      	ldrh	r3, [r4, #12]
 8014f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f1e:	81a3      	strh	r3, [r4, #12]
 8014f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f24:	e78e      	b.n	8014e44 <__sflush_r+0x1c>
 8014f26:	4407      	add	r7, r0
 8014f28:	eba8 0800 	sub.w	r8, r8, r0
 8014f2c:	e7e9      	b.n	8014f02 <__sflush_r+0xda>
 8014f2e:	bf00      	nop
 8014f30:	20400001 	.word	0x20400001

08014f34 <_fflush_r>:
 8014f34:	b538      	push	{r3, r4, r5, lr}
 8014f36:	690b      	ldr	r3, [r1, #16]
 8014f38:	4605      	mov	r5, r0
 8014f3a:	460c      	mov	r4, r1
 8014f3c:	b913      	cbnz	r3, 8014f44 <_fflush_r+0x10>
 8014f3e:	2500      	movs	r5, #0
 8014f40:	4628      	mov	r0, r5
 8014f42:	bd38      	pop	{r3, r4, r5, pc}
 8014f44:	b118      	cbz	r0, 8014f4e <_fflush_r+0x1a>
 8014f46:	6983      	ldr	r3, [r0, #24]
 8014f48:	b90b      	cbnz	r3, 8014f4e <_fflush_r+0x1a>
 8014f4a:	f000 f887 	bl	801505c <__sinit>
 8014f4e:	4b14      	ldr	r3, [pc, #80]	; (8014fa0 <_fflush_r+0x6c>)
 8014f50:	429c      	cmp	r4, r3
 8014f52:	d11b      	bne.n	8014f8c <_fflush_r+0x58>
 8014f54:	686c      	ldr	r4, [r5, #4]
 8014f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d0ef      	beq.n	8014f3e <_fflush_r+0xa>
 8014f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f60:	07d0      	lsls	r0, r2, #31
 8014f62:	d404      	bmi.n	8014f6e <_fflush_r+0x3a>
 8014f64:	0599      	lsls	r1, r3, #22
 8014f66:	d402      	bmi.n	8014f6e <_fflush_r+0x3a>
 8014f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f6a:	f000 f915 	bl	8015198 <__retarget_lock_acquire_recursive>
 8014f6e:	4628      	mov	r0, r5
 8014f70:	4621      	mov	r1, r4
 8014f72:	f7ff ff59 	bl	8014e28 <__sflush_r>
 8014f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f78:	07da      	lsls	r2, r3, #31
 8014f7a:	4605      	mov	r5, r0
 8014f7c:	d4e0      	bmi.n	8014f40 <_fflush_r+0xc>
 8014f7e:	89a3      	ldrh	r3, [r4, #12]
 8014f80:	059b      	lsls	r3, r3, #22
 8014f82:	d4dd      	bmi.n	8014f40 <_fflush_r+0xc>
 8014f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f86:	f000 f908 	bl	801519a <__retarget_lock_release_recursive>
 8014f8a:	e7d9      	b.n	8014f40 <_fflush_r+0xc>
 8014f8c:	4b05      	ldr	r3, [pc, #20]	; (8014fa4 <_fflush_r+0x70>)
 8014f8e:	429c      	cmp	r4, r3
 8014f90:	d101      	bne.n	8014f96 <_fflush_r+0x62>
 8014f92:	68ac      	ldr	r4, [r5, #8]
 8014f94:	e7df      	b.n	8014f56 <_fflush_r+0x22>
 8014f96:	4b04      	ldr	r3, [pc, #16]	; (8014fa8 <_fflush_r+0x74>)
 8014f98:	429c      	cmp	r4, r3
 8014f9a:	bf08      	it	eq
 8014f9c:	68ec      	ldreq	r4, [r5, #12]
 8014f9e:	e7da      	b.n	8014f56 <_fflush_r+0x22>
 8014fa0:	08015d50 	.word	0x08015d50
 8014fa4:	08015d70 	.word	0x08015d70
 8014fa8:	08015d30 	.word	0x08015d30

08014fac <std>:
 8014fac:	2300      	movs	r3, #0
 8014fae:	b510      	push	{r4, lr}
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8014fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fba:	6083      	str	r3, [r0, #8]
 8014fbc:	8181      	strh	r1, [r0, #12]
 8014fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8014fc0:	81c2      	strh	r2, [r0, #14]
 8014fc2:	6183      	str	r3, [r0, #24]
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	2208      	movs	r2, #8
 8014fc8:	305c      	adds	r0, #92	; 0x5c
 8014fca:	f7ff fce7 	bl	801499c <memset>
 8014fce:	4b05      	ldr	r3, [pc, #20]	; (8014fe4 <std+0x38>)
 8014fd0:	6263      	str	r3, [r4, #36]	; 0x24
 8014fd2:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <std+0x3c>)
 8014fd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fd6:	4b05      	ldr	r3, [pc, #20]	; (8014fec <std+0x40>)
 8014fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fda:	4b05      	ldr	r3, [pc, #20]	; (8014ff0 <std+0x44>)
 8014fdc:	6224      	str	r4, [r4, #32]
 8014fde:	6323      	str	r3, [r4, #48]	; 0x30
 8014fe0:	bd10      	pop	{r4, pc}
 8014fe2:	bf00      	nop
 8014fe4:	0801585d 	.word	0x0801585d
 8014fe8:	0801587f 	.word	0x0801587f
 8014fec:	080158b7 	.word	0x080158b7
 8014ff0:	080158db 	.word	0x080158db

08014ff4 <_cleanup_r>:
 8014ff4:	4901      	ldr	r1, [pc, #4]	; (8014ffc <_cleanup_r+0x8>)
 8014ff6:	f000 b8af 	b.w	8015158 <_fwalk_reent>
 8014ffa:	bf00      	nop
 8014ffc:	08014f35 	.word	0x08014f35

08015000 <__sfmoreglue>:
 8015000:	b570      	push	{r4, r5, r6, lr}
 8015002:	2268      	movs	r2, #104	; 0x68
 8015004:	1e4d      	subs	r5, r1, #1
 8015006:	4355      	muls	r5, r2
 8015008:	460e      	mov	r6, r1
 801500a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801500e:	f7ff fd39 	bl	8014a84 <_malloc_r>
 8015012:	4604      	mov	r4, r0
 8015014:	b140      	cbz	r0, 8015028 <__sfmoreglue+0x28>
 8015016:	2100      	movs	r1, #0
 8015018:	e9c0 1600 	strd	r1, r6, [r0]
 801501c:	300c      	adds	r0, #12
 801501e:	60a0      	str	r0, [r4, #8]
 8015020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015024:	f7ff fcba 	bl	801499c <memset>
 8015028:	4620      	mov	r0, r4
 801502a:	bd70      	pop	{r4, r5, r6, pc}

0801502c <__sfp_lock_acquire>:
 801502c:	4801      	ldr	r0, [pc, #4]	; (8015034 <__sfp_lock_acquire+0x8>)
 801502e:	f000 b8b3 	b.w	8015198 <__retarget_lock_acquire_recursive>
 8015032:	bf00      	nop
 8015034:	240050d5 	.word	0x240050d5

08015038 <__sfp_lock_release>:
 8015038:	4801      	ldr	r0, [pc, #4]	; (8015040 <__sfp_lock_release+0x8>)
 801503a:	f000 b8ae 	b.w	801519a <__retarget_lock_release_recursive>
 801503e:	bf00      	nop
 8015040:	240050d5 	.word	0x240050d5

08015044 <__sinit_lock_acquire>:
 8015044:	4801      	ldr	r0, [pc, #4]	; (801504c <__sinit_lock_acquire+0x8>)
 8015046:	f000 b8a7 	b.w	8015198 <__retarget_lock_acquire_recursive>
 801504a:	bf00      	nop
 801504c:	240050d6 	.word	0x240050d6

08015050 <__sinit_lock_release>:
 8015050:	4801      	ldr	r0, [pc, #4]	; (8015058 <__sinit_lock_release+0x8>)
 8015052:	f000 b8a2 	b.w	801519a <__retarget_lock_release_recursive>
 8015056:	bf00      	nop
 8015058:	240050d6 	.word	0x240050d6

0801505c <__sinit>:
 801505c:	b510      	push	{r4, lr}
 801505e:	4604      	mov	r4, r0
 8015060:	f7ff fff0 	bl	8015044 <__sinit_lock_acquire>
 8015064:	69a3      	ldr	r3, [r4, #24]
 8015066:	b11b      	cbz	r3, 8015070 <__sinit+0x14>
 8015068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801506c:	f7ff bff0 	b.w	8015050 <__sinit_lock_release>
 8015070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015074:	6523      	str	r3, [r4, #80]	; 0x50
 8015076:	4b13      	ldr	r3, [pc, #76]	; (80150c4 <__sinit+0x68>)
 8015078:	4a13      	ldr	r2, [pc, #76]	; (80150c8 <__sinit+0x6c>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	62a2      	str	r2, [r4, #40]	; 0x28
 801507e:	42a3      	cmp	r3, r4
 8015080:	bf04      	itt	eq
 8015082:	2301      	moveq	r3, #1
 8015084:	61a3      	streq	r3, [r4, #24]
 8015086:	4620      	mov	r0, r4
 8015088:	f000 f820 	bl	80150cc <__sfp>
 801508c:	6060      	str	r0, [r4, #4]
 801508e:	4620      	mov	r0, r4
 8015090:	f000 f81c 	bl	80150cc <__sfp>
 8015094:	60a0      	str	r0, [r4, #8]
 8015096:	4620      	mov	r0, r4
 8015098:	f000 f818 	bl	80150cc <__sfp>
 801509c:	2200      	movs	r2, #0
 801509e:	60e0      	str	r0, [r4, #12]
 80150a0:	2104      	movs	r1, #4
 80150a2:	6860      	ldr	r0, [r4, #4]
 80150a4:	f7ff ff82 	bl	8014fac <std>
 80150a8:	68a0      	ldr	r0, [r4, #8]
 80150aa:	2201      	movs	r2, #1
 80150ac:	2109      	movs	r1, #9
 80150ae:	f7ff ff7d 	bl	8014fac <std>
 80150b2:	68e0      	ldr	r0, [r4, #12]
 80150b4:	2202      	movs	r2, #2
 80150b6:	2112      	movs	r1, #18
 80150b8:	f7ff ff78 	bl	8014fac <std>
 80150bc:	2301      	movs	r3, #1
 80150be:	61a3      	str	r3, [r4, #24]
 80150c0:	e7d2      	b.n	8015068 <__sinit+0xc>
 80150c2:	bf00      	nop
 80150c4:	08015d2c 	.word	0x08015d2c
 80150c8:	08014ff5 	.word	0x08014ff5

080150cc <__sfp>:
 80150cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ce:	4607      	mov	r7, r0
 80150d0:	f7ff ffac 	bl	801502c <__sfp_lock_acquire>
 80150d4:	4b1e      	ldr	r3, [pc, #120]	; (8015150 <__sfp+0x84>)
 80150d6:	681e      	ldr	r6, [r3, #0]
 80150d8:	69b3      	ldr	r3, [r6, #24]
 80150da:	b913      	cbnz	r3, 80150e2 <__sfp+0x16>
 80150dc:	4630      	mov	r0, r6
 80150de:	f7ff ffbd 	bl	801505c <__sinit>
 80150e2:	3648      	adds	r6, #72	; 0x48
 80150e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150e8:	3b01      	subs	r3, #1
 80150ea:	d503      	bpl.n	80150f4 <__sfp+0x28>
 80150ec:	6833      	ldr	r3, [r6, #0]
 80150ee:	b30b      	cbz	r3, 8015134 <__sfp+0x68>
 80150f0:	6836      	ldr	r6, [r6, #0]
 80150f2:	e7f7      	b.n	80150e4 <__sfp+0x18>
 80150f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80150f8:	b9d5      	cbnz	r5, 8015130 <__sfp+0x64>
 80150fa:	4b16      	ldr	r3, [pc, #88]	; (8015154 <__sfp+0x88>)
 80150fc:	60e3      	str	r3, [r4, #12]
 80150fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015102:	6665      	str	r5, [r4, #100]	; 0x64
 8015104:	f000 f847 	bl	8015196 <__retarget_lock_init_recursive>
 8015108:	f7ff ff96 	bl	8015038 <__sfp_lock_release>
 801510c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015114:	6025      	str	r5, [r4, #0]
 8015116:	61a5      	str	r5, [r4, #24]
 8015118:	2208      	movs	r2, #8
 801511a:	4629      	mov	r1, r5
 801511c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015120:	f7ff fc3c 	bl	801499c <memset>
 8015124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801512c:	4620      	mov	r0, r4
 801512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015130:	3468      	adds	r4, #104	; 0x68
 8015132:	e7d9      	b.n	80150e8 <__sfp+0x1c>
 8015134:	2104      	movs	r1, #4
 8015136:	4638      	mov	r0, r7
 8015138:	f7ff ff62 	bl	8015000 <__sfmoreglue>
 801513c:	4604      	mov	r4, r0
 801513e:	6030      	str	r0, [r6, #0]
 8015140:	2800      	cmp	r0, #0
 8015142:	d1d5      	bne.n	80150f0 <__sfp+0x24>
 8015144:	f7ff ff78 	bl	8015038 <__sfp_lock_release>
 8015148:	230c      	movs	r3, #12
 801514a:	603b      	str	r3, [r7, #0]
 801514c:	e7ee      	b.n	801512c <__sfp+0x60>
 801514e:	bf00      	nop
 8015150:	08015d2c 	.word	0x08015d2c
 8015154:	ffff0001 	.word	0xffff0001

08015158 <_fwalk_reent>:
 8015158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801515c:	4606      	mov	r6, r0
 801515e:	4688      	mov	r8, r1
 8015160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015164:	2700      	movs	r7, #0
 8015166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801516a:	f1b9 0901 	subs.w	r9, r9, #1
 801516e:	d505      	bpl.n	801517c <_fwalk_reent+0x24>
 8015170:	6824      	ldr	r4, [r4, #0]
 8015172:	2c00      	cmp	r4, #0
 8015174:	d1f7      	bne.n	8015166 <_fwalk_reent+0xe>
 8015176:	4638      	mov	r0, r7
 8015178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801517c:	89ab      	ldrh	r3, [r5, #12]
 801517e:	2b01      	cmp	r3, #1
 8015180:	d907      	bls.n	8015192 <_fwalk_reent+0x3a>
 8015182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015186:	3301      	adds	r3, #1
 8015188:	d003      	beq.n	8015192 <_fwalk_reent+0x3a>
 801518a:	4629      	mov	r1, r5
 801518c:	4630      	mov	r0, r6
 801518e:	47c0      	blx	r8
 8015190:	4307      	orrs	r7, r0
 8015192:	3568      	adds	r5, #104	; 0x68
 8015194:	e7e9      	b.n	801516a <_fwalk_reent+0x12>

08015196 <__retarget_lock_init_recursive>:
 8015196:	4770      	bx	lr

08015198 <__retarget_lock_acquire_recursive>:
 8015198:	4770      	bx	lr

0801519a <__retarget_lock_release_recursive>:
 801519a:	4770      	bx	lr

0801519c <__swhatbuf_r>:
 801519c:	b570      	push	{r4, r5, r6, lr}
 801519e:	460e      	mov	r6, r1
 80151a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151a4:	2900      	cmp	r1, #0
 80151a6:	b096      	sub	sp, #88	; 0x58
 80151a8:	4614      	mov	r4, r2
 80151aa:	461d      	mov	r5, r3
 80151ac:	da08      	bge.n	80151c0 <__swhatbuf_r+0x24>
 80151ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80151b2:	2200      	movs	r2, #0
 80151b4:	602a      	str	r2, [r5, #0]
 80151b6:	061a      	lsls	r2, r3, #24
 80151b8:	d410      	bmi.n	80151dc <__swhatbuf_r+0x40>
 80151ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80151be:	e00e      	b.n	80151de <__swhatbuf_r+0x42>
 80151c0:	466a      	mov	r2, sp
 80151c2:	f000 fbb1 	bl	8015928 <_fstat_r>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	dbf1      	blt.n	80151ae <__swhatbuf_r+0x12>
 80151ca:	9a01      	ldr	r2, [sp, #4]
 80151cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80151d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80151d4:	425a      	negs	r2, r3
 80151d6:	415a      	adcs	r2, r3
 80151d8:	602a      	str	r2, [r5, #0]
 80151da:	e7ee      	b.n	80151ba <__swhatbuf_r+0x1e>
 80151dc:	2340      	movs	r3, #64	; 0x40
 80151de:	2000      	movs	r0, #0
 80151e0:	6023      	str	r3, [r4, #0]
 80151e2:	b016      	add	sp, #88	; 0x58
 80151e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080151e8 <__smakebuf_r>:
 80151e8:	898b      	ldrh	r3, [r1, #12]
 80151ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151ec:	079d      	lsls	r5, r3, #30
 80151ee:	4606      	mov	r6, r0
 80151f0:	460c      	mov	r4, r1
 80151f2:	d507      	bpl.n	8015204 <__smakebuf_r+0x1c>
 80151f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	6123      	str	r3, [r4, #16]
 80151fc:	2301      	movs	r3, #1
 80151fe:	6163      	str	r3, [r4, #20]
 8015200:	b002      	add	sp, #8
 8015202:	bd70      	pop	{r4, r5, r6, pc}
 8015204:	ab01      	add	r3, sp, #4
 8015206:	466a      	mov	r2, sp
 8015208:	f7ff ffc8 	bl	801519c <__swhatbuf_r>
 801520c:	9900      	ldr	r1, [sp, #0]
 801520e:	4605      	mov	r5, r0
 8015210:	4630      	mov	r0, r6
 8015212:	f7ff fc37 	bl	8014a84 <_malloc_r>
 8015216:	b948      	cbnz	r0, 801522c <__smakebuf_r+0x44>
 8015218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801521c:	059a      	lsls	r2, r3, #22
 801521e:	d4ef      	bmi.n	8015200 <__smakebuf_r+0x18>
 8015220:	f023 0303 	bic.w	r3, r3, #3
 8015224:	f043 0302 	orr.w	r3, r3, #2
 8015228:	81a3      	strh	r3, [r4, #12]
 801522a:	e7e3      	b.n	80151f4 <__smakebuf_r+0xc>
 801522c:	4b0d      	ldr	r3, [pc, #52]	; (8015264 <__smakebuf_r+0x7c>)
 801522e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015230:	89a3      	ldrh	r3, [r4, #12]
 8015232:	6020      	str	r0, [r4, #0]
 8015234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015238:	81a3      	strh	r3, [r4, #12]
 801523a:	9b00      	ldr	r3, [sp, #0]
 801523c:	6163      	str	r3, [r4, #20]
 801523e:	9b01      	ldr	r3, [sp, #4]
 8015240:	6120      	str	r0, [r4, #16]
 8015242:	b15b      	cbz	r3, 801525c <__smakebuf_r+0x74>
 8015244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015248:	4630      	mov	r0, r6
 801524a:	f000 fb7f 	bl	801594c <_isatty_r>
 801524e:	b128      	cbz	r0, 801525c <__smakebuf_r+0x74>
 8015250:	89a3      	ldrh	r3, [r4, #12]
 8015252:	f023 0303 	bic.w	r3, r3, #3
 8015256:	f043 0301 	orr.w	r3, r3, #1
 801525a:	81a3      	strh	r3, [r4, #12]
 801525c:	89a0      	ldrh	r0, [r4, #12]
 801525e:	4305      	orrs	r5, r0
 8015260:	81a5      	strh	r5, [r4, #12]
 8015262:	e7cd      	b.n	8015200 <__smakebuf_r+0x18>
 8015264:	08014ff5 	.word	0x08014ff5

08015268 <__malloc_lock>:
 8015268:	4801      	ldr	r0, [pc, #4]	; (8015270 <__malloc_lock+0x8>)
 801526a:	f7ff bf95 	b.w	8015198 <__retarget_lock_acquire_recursive>
 801526e:	bf00      	nop
 8015270:	240050d4 	.word	0x240050d4

08015274 <__malloc_unlock>:
 8015274:	4801      	ldr	r0, [pc, #4]	; (801527c <__malloc_unlock+0x8>)
 8015276:	f7ff bf90 	b.w	801519a <__retarget_lock_release_recursive>
 801527a:	bf00      	nop
 801527c:	240050d4 	.word	0x240050d4

08015280 <__sfputc_r>:
 8015280:	6893      	ldr	r3, [r2, #8]
 8015282:	3b01      	subs	r3, #1
 8015284:	2b00      	cmp	r3, #0
 8015286:	b410      	push	{r4}
 8015288:	6093      	str	r3, [r2, #8]
 801528a:	da08      	bge.n	801529e <__sfputc_r+0x1e>
 801528c:	6994      	ldr	r4, [r2, #24]
 801528e:	42a3      	cmp	r3, r4
 8015290:	db01      	blt.n	8015296 <__sfputc_r+0x16>
 8015292:	290a      	cmp	r1, #10
 8015294:	d103      	bne.n	801529e <__sfputc_r+0x1e>
 8015296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801529a:	f7ff bd05 	b.w	8014ca8 <__swbuf_r>
 801529e:	6813      	ldr	r3, [r2, #0]
 80152a0:	1c58      	adds	r0, r3, #1
 80152a2:	6010      	str	r0, [r2, #0]
 80152a4:	7019      	strb	r1, [r3, #0]
 80152a6:	4608      	mov	r0, r1
 80152a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80152ac:	4770      	bx	lr

080152ae <__sfputs_r>:
 80152ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152b0:	4606      	mov	r6, r0
 80152b2:	460f      	mov	r7, r1
 80152b4:	4614      	mov	r4, r2
 80152b6:	18d5      	adds	r5, r2, r3
 80152b8:	42ac      	cmp	r4, r5
 80152ba:	d101      	bne.n	80152c0 <__sfputs_r+0x12>
 80152bc:	2000      	movs	r0, #0
 80152be:	e007      	b.n	80152d0 <__sfputs_r+0x22>
 80152c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152c4:	463a      	mov	r2, r7
 80152c6:	4630      	mov	r0, r6
 80152c8:	f7ff ffda 	bl	8015280 <__sfputc_r>
 80152cc:	1c43      	adds	r3, r0, #1
 80152ce:	d1f3      	bne.n	80152b8 <__sfputs_r+0xa>
 80152d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080152d4 <_vfiprintf_r>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	460d      	mov	r5, r1
 80152da:	b09d      	sub	sp, #116	; 0x74
 80152dc:	4614      	mov	r4, r2
 80152de:	4698      	mov	r8, r3
 80152e0:	4606      	mov	r6, r0
 80152e2:	b118      	cbz	r0, 80152ec <_vfiprintf_r+0x18>
 80152e4:	6983      	ldr	r3, [r0, #24]
 80152e6:	b90b      	cbnz	r3, 80152ec <_vfiprintf_r+0x18>
 80152e8:	f7ff feb8 	bl	801505c <__sinit>
 80152ec:	4b89      	ldr	r3, [pc, #548]	; (8015514 <_vfiprintf_r+0x240>)
 80152ee:	429d      	cmp	r5, r3
 80152f0:	d11b      	bne.n	801532a <_vfiprintf_r+0x56>
 80152f2:	6875      	ldr	r5, [r6, #4]
 80152f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80152f6:	07d9      	lsls	r1, r3, #31
 80152f8:	d405      	bmi.n	8015306 <_vfiprintf_r+0x32>
 80152fa:	89ab      	ldrh	r3, [r5, #12]
 80152fc:	059a      	lsls	r2, r3, #22
 80152fe:	d402      	bmi.n	8015306 <_vfiprintf_r+0x32>
 8015300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015302:	f7ff ff49 	bl	8015198 <__retarget_lock_acquire_recursive>
 8015306:	89ab      	ldrh	r3, [r5, #12]
 8015308:	071b      	lsls	r3, r3, #28
 801530a:	d501      	bpl.n	8015310 <_vfiprintf_r+0x3c>
 801530c:	692b      	ldr	r3, [r5, #16]
 801530e:	b9eb      	cbnz	r3, 801534c <_vfiprintf_r+0x78>
 8015310:	4629      	mov	r1, r5
 8015312:	4630      	mov	r0, r6
 8015314:	f7ff fd1a 	bl	8014d4c <__swsetup_r>
 8015318:	b1c0      	cbz	r0, 801534c <_vfiprintf_r+0x78>
 801531a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801531c:	07dc      	lsls	r4, r3, #31
 801531e:	d50e      	bpl.n	801533e <_vfiprintf_r+0x6a>
 8015320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015324:	b01d      	add	sp, #116	; 0x74
 8015326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801532a:	4b7b      	ldr	r3, [pc, #492]	; (8015518 <_vfiprintf_r+0x244>)
 801532c:	429d      	cmp	r5, r3
 801532e:	d101      	bne.n	8015334 <_vfiprintf_r+0x60>
 8015330:	68b5      	ldr	r5, [r6, #8]
 8015332:	e7df      	b.n	80152f4 <_vfiprintf_r+0x20>
 8015334:	4b79      	ldr	r3, [pc, #484]	; (801551c <_vfiprintf_r+0x248>)
 8015336:	429d      	cmp	r5, r3
 8015338:	bf08      	it	eq
 801533a:	68f5      	ldreq	r5, [r6, #12]
 801533c:	e7da      	b.n	80152f4 <_vfiprintf_r+0x20>
 801533e:	89ab      	ldrh	r3, [r5, #12]
 8015340:	0598      	lsls	r0, r3, #22
 8015342:	d4ed      	bmi.n	8015320 <_vfiprintf_r+0x4c>
 8015344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015346:	f7ff ff28 	bl	801519a <__retarget_lock_release_recursive>
 801534a:	e7e9      	b.n	8015320 <_vfiprintf_r+0x4c>
 801534c:	2300      	movs	r3, #0
 801534e:	9309      	str	r3, [sp, #36]	; 0x24
 8015350:	2320      	movs	r3, #32
 8015352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015356:	f8cd 800c 	str.w	r8, [sp, #12]
 801535a:	2330      	movs	r3, #48	; 0x30
 801535c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015520 <_vfiprintf_r+0x24c>
 8015360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015364:	f04f 0901 	mov.w	r9, #1
 8015368:	4623      	mov	r3, r4
 801536a:	469a      	mov	sl, r3
 801536c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015370:	b10a      	cbz	r2, 8015376 <_vfiprintf_r+0xa2>
 8015372:	2a25      	cmp	r2, #37	; 0x25
 8015374:	d1f9      	bne.n	801536a <_vfiprintf_r+0x96>
 8015376:	ebba 0b04 	subs.w	fp, sl, r4
 801537a:	d00b      	beq.n	8015394 <_vfiprintf_r+0xc0>
 801537c:	465b      	mov	r3, fp
 801537e:	4622      	mov	r2, r4
 8015380:	4629      	mov	r1, r5
 8015382:	4630      	mov	r0, r6
 8015384:	f7ff ff93 	bl	80152ae <__sfputs_r>
 8015388:	3001      	adds	r0, #1
 801538a:	f000 80aa 	beq.w	80154e2 <_vfiprintf_r+0x20e>
 801538e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015390:	445a      	add	r2, fp
 8015392:	9209      	str	r2, [sp, #36]	; 0x24
 8015394:	f89a 3000 	ldrb.w	r3, [sl]
 8015398:	2b00      	cmp	r3, #0
 801539a:	f000 80a2 	beq.w	80154e2 <_vfiprintf_r+0x20e>
 801539e:	2300      	movs	r3, #0
 80153a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153a8:	f10a 0a01 	add.w	sl, sl, #1
 80153ac:	9304      	str	r3, [sp, #16]
 80153ae:	9307      	str	r3, [sp, #28]
 80153b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80153b4:	931a      	str	r3, [sp, #104]	; 0x68
 80153b6:	4654      	mov	r4, sl
 80153b8:	2205      	movs	r2, #5
 80153ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153be:	4858      	ldr	r0, [pc, #352]	; (8015520 <_vfiprintf_r+0x24c>)
 80153c0:	f7ea ff8e 	bl	80002e0 <memchr>
 80153c4:	9a04      	ldr	r2, [sp, #16]
 80153c6:	b9d8      	cbnz	r0, 8015400 <_vfiprintf_r+0x12c>
 80153c8:	06d1      	lsls	r1, r2, #27
 80153ca:	bf44      	itt	mi
 80153cc:	2320      	movmi	r3, #32
 80153ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153d2:	0713      	lsls	r3, r2, #28
 80153d4:	bf44      	itt	mi
 80153d6:	232b      	movmi	r3, #43	; 0x2b
 80153d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153dc:	f89a 3000 	ldrb.w	r3, [sl]
 80153e0:	2b2a      	cmp	r3, #42	; 0x2a
 80153e2:	d015      	beq.n	8015410 <_vfiprintf_r+0x13c>
 80153e4:	9a07      	ldr	r2, [sp, #28]
 80153e6:	4654      	mov	r4, sl
 80153e8:	2000      	movs	r0, #0
 80153ea:	f04f 0c0a 	mov.w	ip, #10
 80153ee:	4621      	mov	r1, r4
 80153f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153f4:	3b30      	subs	r3, #48	; 0x30
 80153f6:	2b09      	cmp	r3, #9
 80153f8:	d94e      	bls.n	8015498 <_vfiprintf_r+0x1c4>
 80153fa:	b1b0      	cbz	r0, 801542a <_vfiprintf_r+0x156>
 80153fc:	9207      	str	r2, [sp, #28]
 80153fe:	e014      	b.n	801542a <_vfiprintf_r+0x156>
 8015400:	eba0 0308 	sub.w	r3, r0, r8
 8015404:	fa09 f303 	lsl.w	r3, r9, r3
 8015408:	4313      	orrs	r3, r2
 801540a:	9304      	str	r3, [sp, #16]
 801540c:	46a2      	mov	sl, r4
 801540e:	e7d2      	b.n	80153b6 <_vfiprintf_r+0xe2>
 8015410:	9b03      	ldr	r3, [sp, #12]
 8015412:	1d19      	adds	r1, r3, #4
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	9103      	str	r1, [sp, #12]
 8015418:	2b00      	cmp	r3, #0
 801541a:	bfbb      	ittet	lt
 801541c:	425b      	neglt	r3, r3
 801541e:	f042 0202 	orrlt.w	r2, r2, #2
 8015422:	9307      	strge	r3, [sp, #28]
 8015424:	9307      	strlt	r3, [sp, #28]
 8015426:	bfb8      	it	lt
 8015428:	9204      	strlt	r2, [sp, #16]
 801542a:	7823      	ldrb	r3, [r4, #0]
 801542c:	2b2e      	cmp	r3, #46	; 0x2e
 801542e:	d10c      	bne.n	801544a <_vfiprintf_r+0x176>
 8015430:	7863      	ldrb	r3, [r4, #1]
 8015432:	2b2a      	cmp	r3, #42	; 0x2a
 8015434:	d135      	bne.n	80154a2 <_vfiprintf_r+0x1ce>
 8015436:	9b03      	ldr	r3, [sp, #12]
 8015438:	1d1a      	adds	r2, r3, #4
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	9203      	str	r2, [sp, #12]
 801543e:	2b00      	cmp	r3, #0
 8015440:	bfb8      	it	lt
 8015442:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015446:	3402      	adds	r4, #2
 8015448:	9305      	str	r3, [sp, #20]
 801544a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015530 <_vfiprintf_r+0x25c>
 801544e:	7821      	ldrb	r1, [r4, #0]
 8015450:	2203      	movs	r2, #3
 8015452:	4650      	mov	r0, sl
 8015454:	f7ea ff44 	bl	80002e0 <memchr>
 8015458:	b140      	cbz	r0, 801546c <_vfiprintf_r+0x198>
 801545a:	2340      	movs	r3, #64	; 0x40
 801545c:	eba0 000a 	sub.w	r0, r0, sl
 8015460:	fa03 f000 	lsl.w	r0, r3, r0
 8015464:	9b04      	ldr	r3, [sp, #16]
 8015466:	4303      	orrs	r3, r0
 8015468:	3401      	adds	r4, #1
 801546a:	9304      	str	r3, [sp, #16]
 801546c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015470:	482c      	ldr	r0, [pc, #176]	; (8015524 <_vfiprintf_r+0x250>)
 8015472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015476:	2206      	movs	r2, #6
 8015478:	f7ea ff32 	bl	80002e0 <memchr>
 801547c:	2800      	cmp	r0, #0
 801547e:	d03f      	beq.n	8015500 <_vfiprintf_r+0x22c>
 8015480:	4b29      	ldr	r3, [pc, #164]	; (8015528 <_vfiprintf_r+0x254>)
 8015482:	bb1b      	cbnz	r3, 80154cc <_vfiprintf_r+0x1f8>
 8015484:	9b03      	ldr	r3, [sp, #12]
 8015486:	3307      	adds	r3, #7
 8015488:	f023 0307 	bic.w	r3, r3, #7
 801548c:	3308      	adds	r3, #8
 801548e:	9303      	str	r3, [sp, #12]
 8015490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015492:	443b      	add	r3, r7
 8015494:	9309      	str	r3, [sp, #36]	; 0x24
 8015496:	e767      	b.n	8015368 <_vfiprintf_r+0x94>
 8015498:	fb0c 3202 	mla	r2, ip, r2, r3
 801549c:	460c      	mov	r4, r1
 801549e:	2001      	movs	r0, #1
 80154a0:	e7a5      	b.n	80153ee <_vfiprintf_r+0x11a>
 80154a2:	2300      	movs	r3, #0
 80154a4:	3401      	adds	r4, #1
 80154a6:	9305      	str	r3, [sp, #20]
 80154a8:	4619      	mov	r1, r3
 80154aa:	f04f 0c0a 	mov.w	ip, #10
 80154ae:	4620      	mov	r0, r4
 80154b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154b4:	3a30      	subs	r2, #48	; 0x30
 80154b6:	2a09      	cmp	r2, #9
 80154b8:	d903      	bls.n	80154c2 <_vfiprintf_r+0x1ee>
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d0c5      	beq.n	801544a <_vfiprintf_r+0x176>
 80154be:	9105      	str	r1, [sp, #20]
 80154c0:	e7c3      	b.n	801544a <_vfiprintf_r+0x176>
 80154c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80154c6:	4604      	mov	r4, r0
 80154c8:	2301      	movs	r3, #1
 80154ca:	e7f0      	b.n	80154ae <_vfiprintf_r+0x1da>
 80154cc:	ab03      	add	r3, sp, #12
 80154ce:	9300      	str	r3, [sp, #0]
 80154d0:	462a      	mov	r2, r5
 80154d2:	4b16      	ldr	r3, [pc, #88]	; (801552c <_vfiprintf_r+0x258>)
 80154d4:	a904      	add	r1, sp, #16
 80154d6:	4630      	mov	r0, r6
 80154d8:	f3af 8000 	nop.w
 80154dc:	4607      	mov	r7, r0
 80154de:	1c78      	adds	r0, r7, #1
 80154e0:	d1d6      	bne.n	8015490 <_vfiprintf_r+0x1bc>
 80154e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154e4:	07d9      	lsls	r1, r3, #31
 80154e6:	d405      	bmi.n	80154f4 <_vfiprintf_r+0x220>
 80154e8:	89ab      	ldrh	r3, [r5, #12]
 80154ea:	059a      	lsls	r2, r3, #22
 80154ec:	d402      	bmi.n	80154f4 <_vfiprintf_r+0x220>
 80154ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154f0:	f7ff fe53 	bl	801519a <__retarget_lock_release_recursive>
 80154f4:	89ab      	ldrh	r3, [r5, #12]
 80154f6:	065b      	lsls	r3, r3, #25
 80154f8:	f53f af12 	bmi.w	8015320 <_vfiprintf_r+0x4c>
 80154fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154fe:	e711      	b.n	8015324 <_vfiprintf_r+0x50>
 8015500:	ab03      	add	r3, sp, #12
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	462a      	mov	r2, r5
 8015506:	4b09      	ldr	r3, [pc, #36]	; (801552c <_vfiprintf_r+0x258>)
 8015508:	a904      	add	r1, sp, #16
 801550a:	4630      	mov	r0, r6
 801550c:	f000 f880 	bl	8015610 <_printf_i>
 8015510:	e7e4      	b.n	80154dc <_vfiprintf_r+0x208>
 8015512:	bf00      	nop
 8015514:	08015d50 	.word	0x08015d50
 8015518:	08015d70 	.word	0x08015d70
 801551c:	08015d30 	.word	0x08015d30
 8015520:	08015d90 	.word	0x08015d90
 8015524:	08015d9a 	.word	0x08015d9a
 8015528:	00000000 	.word	0x00000000
 801552c:	080152af 	.word	0x080152af
 8015530:	08015d96 	.word	0x08015d96

08015534 <_printf_common>:
 8015534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015538:	4616      	mov	r6, r2
 801553a:	4699      	mov	r9, r3
 801553c:	688a      	ldr	r2, [r1, #8]
 801553e:	690b      	ldr	r3, [r1, #16]
 8015540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015544:	4293      	cmp	r3, r2
 8015546:	bfb8      	it	lt
 8015548:	4613      	movlt	r3, r2
 801554a:	6033      	str	r3, [r6, #0]
 801554c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015550:	4607      	mov	r7, r0
 8015552:	460c      	mov	r4, r1
 8015554:	b10a      	cbz	r2, 801555a <_printf_common+0x26>
 8015556:	3301      	adds	r3, #1
 8015558:	6033      	str	r3, [r6, #0]
 801555a:	6823      	ldr	r3, [r4, #0]
 801555c:	0699      	lsls	r1, r3, #26
 801555e:	bf42      	ittt	mi
 8015560:	6833      	ldrmi	r3, [r6, #0]
 8015562:	3302      	addmi	r3, #2
 8015564:	6033      	strmi	r3, [r6, #0]
 8015566:	6825      	ldr	r5, [r4, #0]
 8015568:	f015 0506 	ands.w	r5, r5, #6
 801556c:	d106      	bne.n	801557c <_printf_common+0x48>
 801556e:	f104 0a19 	add.w	sl, r4, #25
 8015572:	68e3      	ldr	r3, [r4, #12]
 8015574:	6832      	ldr	r2, [r6, #0]
 8015576:	1a9b      	subs	r3, r3, r2
 8015578:	42ab      	cmp	r3, r5
 801557a:	dc26      	bgt.n	80155ca <_printf_common+0x96>
 801557c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015580:	1e13      	subs	r3, r2, #0
 8015582:	6822      	ldr	r2, [r4, #0]
 8015584:	bf18      	it	ne
 8015586:	2301      	movne	r3, #1
 8015588:	0692      	lsls	r2, r2, #26
 801558a:	d42b      	bmi.n	80155e4 <_printf_common+0xb0>
 801558c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015590:	4649      	mov	r1, r9
 8015592:	4638      	mov	r0, r7
 8015594:	47c0      	blx	r8
 8015596:	3001      	adds	r0, #1
 8015598:	d01e      	beq.n	80155d8 <_printf_common+0xa4>
 801559a:	6823      	ldr	r3, [r4, #0]
 801559c:	68e5      	ldr	r5, [r4, #12]
 801559e:	6832      	ldr	r2, [r6, #0]
 80155a0:	f003 0306 	and.w	r3, r3, #6
 80155a4:	2b04      	cmp	r3, #4
 80155a6:	bf08      	it	eq
 80155a8:	1aad      	subeq	r5, r5, r2
 80155aa:	68a3      	ldr	r3, [r4, #8]
 80155ac:	6922      	ldr	r2, [r4, #16]
 80155ae:	bf0c      	ite	eq
 80155b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80155b4:	2500      	movne	r5, #0
 80155b6:	4293      	cmp	r3, r2
 80155b8:	bfc4      	itt	gt
 80155ba:	1a9b      	subgt	r3, r3, r2
 80155bc:	18ed      	addgt	r5, r5, r3
 80155be:	2600      	movs	r6, #0
 80155c0:	341a      	adds	r4, #26
 80155c2:	42b5      	cmp	r5, r6
 80155c4:	d11a      	bne.n	80155fc <_printf_common+0xc8>
 80155c6:	2000      	movs	r0, #0
 80155c8:	e008      	b.n	80155dc <_printf_common+0xa8>
 80155ca:	2301      	movs	r3, #1
 80155cc:	4652      	mov	r2, sl
 80155ce:	4649      	mov	r1, r9
 80155d0:	4638      	mov	r0, r7
 80155d2:	47c0      	blx	r8
 80155d4:	3001      	adds	r0, #1
 80155d6:	d103      	bne.n	80155e0 <_printf_common+0xac>
 80155d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155e0:	3501      	adds	r5, #1
 80155e2:	e7c6      	b.n	8015572 <_printf_common+0x3e>
 80155e4:	18e1      	adds	r1, r4, r3
 80155e6:	1c5a      	adds	r2, r3, #1
 80155e8:	2030      	movs	r0, #48	; 0x30
 80155ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80155ee:	4422      	add	r2, r4
 80155f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80155f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80155f8:	3302      	adds	r3, #2
 80155fa:	e7c7      	b.n	801558c <_printf_common+0x58>
 80155fc:	2301      	movs	r3, #1
 80155fe:	4622      	mov	r2, r4
 8015600:	4649      	mov	r1, r9
 8015602:	4638      	mov	r0, r7
 8015604:	47c0      	blx	r8
 8015606:	3001      	adds	r0, #1
 8015608:	d0e6      	beq.n	80155d8 <_printf_common+0xa4>
 801560a:	3601      	adds	r6, #1
 801560c:	e7d9      	b.n	80155c2 <_printf_common+0x8e>
	...

08015610 <_printf_i>:
 8015610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015614:	7e0f      	ldrb	r7, [r1, #24]
 8015616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015618:	2f78      	cmp	r7, #120	; 0x78
 801561a:	4691      	mov	r9, r2
 801561c:	4680      	mov	r8, r0
 801561e:	460c      	mov	r4, r1
 8015620:	469a      	mov	sl, r3
 8015622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015626:	d807      	bhi.n	8015638 <_printf_i+0x28>
 8015628:	2f62      	cmp	r7, #98	; 0x62
 801562a:	d80a      	bhi.n	8015642 <_printf_i+0x32>
 801562c:	2f00      	cmp	r7, #0
 801562e:	f000 80d8 	beq.w	80157e2 <_printf_i+0x1d2>
 8015632:	2f58      	cmp	r7, #88	; 0x58
 8015634:	f000 80a3 	beq.w	801577e <_printf_i+0x16e>
 8015638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801563c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015640:	e03a      	b.n	80156b8 <_printf_i+0xa8>
 8015642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015646:	2b15      	cmp	r3, #21
 8015648:	d8f6      	bhi.n	8015638 <_printf_i+0x28>
 801564a:	a101      	add	r1, pc, #4	; (adr r1, 8015650 <_printf_i+0x40>)
 801564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015650:	080156a9 	.word	0x080156a9
 8015654:	080156bd 	.word	0x080156bd
 8015658:	08015639 	.word	0x08015639
 801565c:	08015639 	.word	0x08015639
 8015660:	08015639 	.word	0x08015639
 8015664:	08015639 	.word	0x08015639
 8015668:	080156bd 	.word	0x080156bd
 801566c:	08015639 	.word	0x08015639
 8015670:	08015639 	.word	0x08015639
 8015674:	08015639 	.word	0x08015639
 8015678:	08015639 	.word	0x08015639
 801567c:	080157c9 	.word	0x080157c9
 8015680:	080156ed 	.word	0x080156ed
 8015684:	080157ab 	.word	0x080157ab
 8015688:	08015639 	.word	0x08015639
 801568c:	08015639 	.word	0x08015639
 8015690:	080157eb 	.word	0x080157eb
 8015694:	08015639 	.word	0x08015639
 8015698:	080156ed 	.word	0x080156ed
 801569c:	08015639 	.word	0x08015639
 80156a0:	08015639 	.word	0x08015639
 80156a4:	080157b3 	.word	0x080157b3
 80156a8:	682b      	ldr	r3, [r5, #0]
 80156aa:	1d1a      	adds	r2, r3, #4
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	602a      	str	r2, [r5, #0]
 80156b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80156b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80156b8:	2301      	movs	r3, #1
 80156ba:	e0a3      	b.n	8015804 <_printf_i+0x1f4>
 80156bc:	6820      	ldr	r0, [r4, #0]
 80156be:	6829      	ldr	r1, [r5, #0]
 80156c0:	0606      	lsls	r6, r0, #24
 80156c2:	f101 0304 	add.w	r3, r1, #4
 80156c6:	d50a      	bpl.n	80156de <_printf_i+0xce>
 80156c8:	680e      	ldr	r6, [r1, #0]
 80156ca:	602b      	str	r3, [r5, #0]
 80156cc:	2e00      	cmp	r6, #0
 80156ce:	da03      	bge.n	80156d8 <_printf_i+0xc8>
 80156d0:	232d      	movs	r3, #45	; 0x2d
 80156d2:	4276      	negs	r6, r6
 80156d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156d8:	485e      	ldr	r0, [pc, #376]	; (8015854 <_printf_i+0x244>)
 80156da:	230a      	movs	r3, #10
 80156dc:	e019      	b.n	8015712 <_printf_i+0x102>
 80156de:	680e      	ldr	r6, [r1, #0]
 80156e0:	602b      	str	r3, [r5, #0]
 80156e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80156e6:	bf18      	it	ne
 80156e8:	b236      	sxthne	r6, r6
 80156ea:	e7ef      	b.n	80156cc <_printf_i+0xbc>
 80156ec:	682b      	ldr	r3, [r5, #0]
 80156ee:	6820      	ldr	r0, [r4, #0]
 80156f0:	1d19      	adds	r1, r3, #4
 80156f2:	6029      	str	r1, [r5, #0]
 80156f4:	0601      	lsls	r1, r0, #24
 80156f6:	d501      	bpl.n	80156fc <_printf_i+0xec>
 80156f8:	681e      	ldr	r6, [r3, #0]
 80156fa:	e002      	b.n	8015702 <_printf_i+0xf2>
 80156fc:	0646      	lsls	r6, r0, #25
 80156fe:	d5fb      	bpl.n	80156f8 <_printf_i+0xe8>
 8015700:	881e      	ldrh	r6, [r3, #0]
 8015702:	4854      	ldr	r0, [pc, #336]	; (8015854 <_printf_i+0x244>)
 8015704:	2f6f      	cmp	r7, #111	; 0x6f
 8015706:	bf0c      	ite	eq
 8015708:	2308      	moveq	r3, #8
 801570a:	230a      	movne	r3, #10
 801570c:	2100      	movs	r1, #0
 801570e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015712:	6865      	ldr	r5, [r4, #4]
 8015714:	60a5      	str	r5, [r4, #8]
 8015716:	2d00      	cmp	r5, #0
 8015718:	bfa2      	ittt	ge
 801571a:	6821      	ldrge	r1, [r4, #0]
 801571c:	f021 0104 	bicge.w	r1, r1, #4
 8015720:	6021      	strge	r1, [r4, #0]
 8015722:	b90e      	cbnz	r6, 8015728 <_printf_i+0x118>
 8015724:	2d00      	cmp	r5, #0
 8015726:	d04d      	beq.n	80157c4 <_printf_i+0x1b4>
 8015728:	4615      	mov	r5, r2
 801572a:	fbb6 f1f3 	udiv	r1, r6, r3
 801572e:	fb03 6711 	mls	r7, r3, r1, r6
 8015732:	5dc7      	ldrb	r7, [r0, r7]
 8015734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015738:	4637      	mov	r7, r6
 801573a:	42bb      	cmp	r3, r7
 801573c:	460e      	mov	r6, r1
 801573e:	d9f4      	bls.n	801572a <_printf_i+0x11a>
 8015740:	2b08      	cmp	r3, #8
 8015742:	d10b      	bne.n	801575c <_printf_i+0x14c>
 8015744:	6823      	ldr	r3, [r4, #0]
 8015746:	07de      	lsls	r6, r3, #31
 8015748:	d508      	bpl.n	801575c <_printf_i+0x14c>
 801574a:	6923      	ldr	r3, [r4, #16]
 801574c:	6861      	ldr	r1, [r4, #4]
 801574e:	4299      	cmp	r1, r3
 8015750:	bfde      	ittt	le
 8015752:	2330      	movle	r3, #48	; 0x30
 8015754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015758:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801575c:	1b52      	subs	r2, r2, r5
 801575e:	6122      	str	r2, [r4, #16]
 8015760:	f8cd a000 	str.w	sl, [sp]
 8015764:	464b      	mov	r3, r9
 8015766:	aa03      	add	r2, sp, #12
 8015768:	4621      	mov	r1, r4
 801576a:	4640      	mov	r0, r8
 801576c:	f7ff fee2 	bl	8015534 <_printf_common>
 8015770:	3001      	adds	r0, #1
 8015772:	d14c      	bne.n	801580e <_printf_i+0x1fe>
 8015774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015778:	b004      	add	sp, #16
 801577a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801577e:	4835      	ldr	r0, [pc, #212]	; (8015854 <_printf_i+0x244>)
 8015780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015784:	6829      	ldr	r1, [r5, #0]
 8015786:	6823      	ldr	r3, [r4, #0]
 8015788:	f851 6b04 	ldr.w	r6, [r1], #4
 801578c:	6029      	str	r1, [r5, #0]
 801578e:	061d      	lsls	r5, r3, #24
 8015790:	d514      	bpl.n	80157bc <_printf_i+0x1ac>
 8015792:	07df      	lsls	r7, r3, #31
 8015794:	bf44      	itt	mi
 8015796:	f043 0320 	orrmi.w	r3, r3, #32
 801579a:	6023      	strmi	r3, [r4, #0]
 801579c:	b91e      	cbnz	r6, 80157a6 <_printf_i+0x196>
 801579e:	6823      	ldr	r3, [r4, #0]
 80157a0:	f023 0320 	bic.w	r3, r3, #32
 80157a4:	6023      	str	r3, [r4, #0]
 80157a6:	2310      	movs	r3, #16
 80157a8:	e7b0      	b.n	801570c <_printf_i+0xfc>
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	f043 0320 	orr.w	r3, r3, #32
 80157b0:	6023      	str	r3, [r4, #0]
 80157b2:	2378      	movs	r3, #120	; 0x78
 80157b4:	4828      	ldr	r0, [pc, #160]	; (8015858 <_printf_i+0x248>)
 80157b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157ba:	e7e3      	b.n	8015784 <_printf_i+0x174>
 80157bc:	0659      	lsls	r1, r3, #25
 80157be:	bf48      	it	mi
 80157c0:	b2b6      	uxthmi	r6, r6
 80157c2:	e7e6      	b.n	8015792 <_printf_i+0x182>
 80157c4:	4615      	mov	r5, r2
 80157c6:	e7bb      	b.n	8015740 <_printf_i+0x130>
 80157c8:	682b      	ldr	r3, [r5, #0]
 80157ca:	6826      	ldr	r6, [r4, #0]
 80157cc:	6961      	ldr	r1, [r4, #20]
 80157ce:	1d18      	adds	r0, r3, #4
 80157d0:	6028      	str	r0, [r5, #0]
 80157d2:	0635      	lsls	r5, r6, #24
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	d501      	bpl.n	80157dc <_printf_i+0x1cc>
 80157d8:	6019      	str	r1, [r3, #0]
 80157da:	e002      	b.n	80157e2 <_printf_i+0x1d2>
 80157dc:	0670      	lsls	r0, r6, #25
 80157de:	d5fb      	bpl.n	80157d8 <_printf_i+0x1c8>
 80157e0:	8019      	strh	r1, [r3, #0]
 80157e2:	2300      	movs	r3, #0
 80157e4:	6123      	str	r3, [r4, #16]
 80157e6:	4615      	mov	r5, r2
 80157e8:	e7ba      	b.n	8015760 <_printf_i+0x150>
 80157ea:	682b      	ldr	r3, [r5, #0]
 80157ec:	1d1a      	adds	r2, r3, #4
 80157ee:	602a      	str	r2, [r5, #0]
 80157f0:	681d      	ldr	r5, [r3, #0]
 80157f2:	6862      	ldr	r2, [r4, #4]
 80157f4:	2100      	movs	r1, #0
 80157f6:	4628      	mov	r0, r5
 80157f8:	f7ea fd72 	bl	80002e0 <memchr>
 80157fc:	b108      	cbz	r0, 8015802 <_printf_i+0x1f2>
 80157fe:	1b40      	subs	r0, r0, r5
 8015800:	6060      	str	r0, [r4, #4]
 8015802:	6863      	ldr	r3, [r4, #4]
 8015804:	6123      	str	r3, [r4, #16]
 8015806:	2300      	movs	r3, #0
 8015808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801580c:	e7a8      	b.n	8015760 <_printf_i+0x150>
 801580e:	6923      	ldr	r3, [r4, #16]
 8015810:	462a      	mov	r2, r5
 8015812:	4649      	mov	r1, r9
 8015814:	4640      	mov	r0, r8
 8015816:	47d0      	blx	sl
 8015818:	3001      	adds	r0, #1
 801581a:	d0ab      	beq.n	8015774 <_printf_i+0x164>
 801581c:	6823      	ldr	r3, [r4, #0]
 801581e:	079b      	lsls	r3, r3, #30
 8015820:	d413      	bmi.n	801584a <_printf_i+0x23a>
 8015822:	68e0      	ldr	r0, [r4, #12]
 8015824:	9b03      	ldr	r3, [sp, #12]
 8015826:	4298      	cmp	r0, r3
 8015828:	bfb8      	it	lt
 801582a:	4618      	movlt	r0, r3
 801582c:	e7a4      	b.n	8015778 <_printf_i+0x168>
 801582e:	2301      	movs	r3, #1
 8015830:	4632      	mov	r2, r6
 8015832:	4649      	mov	r1, r9
 8015834:	4640      	mov	r0, r8
 8015836:	47d0      	blx	sl
 8015838:	3001      	adds	r0, #1
 801583a:	d09b      	beq.n	8015774 <_printf_i+0x164>
 801583c:	3501      	adds	r5, #1
 801583e:	68e3      	ldr	r3, [r4, #12]
 8015840:	9903      	ldr	r1, [sp, #12]
 8015842:	1a5b      	subs	r3, r3, r1
 8015844:	42ab      	cmp	r3, r5
 8015846:	dcf2      	bgt.n	801582e <_printf_i+0x21e>
 8015848:	e7eb      	b.n	8015822 <_printf_i+0x212>
 801584a:	2500      	movs	r5, #0
 801584c:	f104 0619 	add.w	r6, r4, #25
 8015850:	e7f5      	b.n	801583e <_printf_i+0x22e>
 8015852:	bf00      	nop
 8015854:	08015da1 	.word	0x08015da1
 8015858:	08015db2 	.word	0x08015db2

0801585c <__sread>:
 801585c:	b510      	push	{r4, lr}
 801585e:	460c      	mov	r4, r1
 8015860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015864:	f000 f894 	bl	8015990 <_read_r>
 8015868:	2800      	cmp	r0, #0
 801586a:	bfab      	itete	ge
 801586c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801586e:	89a3      	ldrhlt	r3, [r4, #12]
 8015870:	181b      	addge	r3, r3, r0
 8015872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015876:	bfac      	ite	ge
 8015878:	6563      	strge	r3, [r4, #84]	; 0x54
 801587a:	81a3      	strhlt	r3, [r4, #12]
 801587c:	bd10      	pop	{r4, pc}

0801587e <__swrite>:
 801587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015882:	461f      	mov	r7, r3
 8015884:	898b      	ldrh	r3, [r1, #12]
 8015886:	05db      	lsls	r3, r3, #23
 8015888:	4605      	mov	r5, r0
 801588a:	460c      	mov	r4, r1
 801588c:	4616      	mov	r6, r2
 801588e:	d505      	bpl.n	801589c <__swrite+0x1e>
 8015890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015894:	2302      	movs	r3, #2
 8015896:	2200      	movs	r2, #0
 8015898:	f000 f868 	bl	801596c <_lseek_r>
 801589c:	89a3      	ldrh	r3, [r4, #12]
 801589e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158a6:	81a3      	strh	r3, [r4, #12]
 80158a8:	4632      	mov	r2, r6
 80158aa:	463b      	mov	r3, r7
 80158ac:	4628      	mov	r0, r5
 80158ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158b2:	f000 b817 	b.w	80158e4 <_write_r>

080158b6 <__sseek>:
 80158b6:	b510      	push	{r4, lr}
 80158b8:	460c      	mov	r4, r1
 80158ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158be:	f000 f855 	bl	801596c <_lseek_r>
 80158c2:	1c43      	adds	r3, r0, #1
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	bf15      	itete	ne
 80158c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80158ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80158ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80158d2:	81a3      	strheq	r3, [r4, #12]
 80158d4:	bf18      	it	ne
 80158d6:	81a3      	strhne	r3, [r4, #12]
 80158d8:	bd10      	pop	{r4, pc}

080158da <__sclose>:
 80158da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158de:	f000 b813 	b.w	8015908 <_close_r>
	...

080158e4 <_write_r>:
 80158e4:	b538      	push	{r3, r4, r5, lr}
 80158e6:	4d07      	ldr	r5, [pc, #28]	; (8015904 <_write_r+0x20>)
 80158e8:	4604      	mov	r4, r0
 80158ea:	4608      	mov	r0, r1
 80158ec:	4611      	mov	r1, r2
 80158ee:	2200      	movs	r2, #0
 80158f0:	602a      	str	r2, [r5, #0]
 80158f2:	461a      	mov	r2, r3
 80158f4:	f7ed fcdd 	bl	80032b2 <_write>
 80158f8:	1c43      	adds	r3, r0, #1
 80158fa:	d102      	bne.n	8015902 <_write_r+0x1e>
 80158fc:	682b      	ldr	r3, [r5, #0]
 80158fe:	b103      	cbz	r3, 8015902 <_write_r+0x1e>
 8015900:	6023      	str	r3, [r4, #0]
 8015902:	bd38      	pop	{r3, r4, r5, pc}
 8015904:	240050d8 	.word	0x240050d8

08015908 <_close_r>:
 8015908:	b538      	push	{r3, r4, r5, lr}
 801590a:	4d06      	ldr	r5, [pc, #24]	; (8015924 <_close_r+0x1c>)
 801590c:	2300      	movs	r3, #0
 801590e:	4604      	mov	r4, r0
 8015910:	4608      	mov	r0, r1
 8015912:	602b      	str	r3, [r5, #0]
 8015914:	f7ed fce9 	bl	80032ea <_close>
 8015918:	1c43      	adds	r3, r0, #1
 801591a:	d102      	bne.n	8015922 <_close_r+0x1a>
 801591c:	682b      	ldr	r3, [r5, #0]
 801591e:	b103      	cbz	r3, 8015922 <_close_r+0x1a>
 8015920:	6023      	str	r3, [r4, #0]
 8015922:	bd38      	pop	{r3, r4, r5, pc}
 8015924:	240050d8 	.word	0x240050d8

08015928 <_fstat_r>:
 8015928:	b538      	push	{r3, r4, r5, lr}
 801592a:	4d07      	ldr	r5, [pc, #28]	; (8015948 <_fstat_r+0x20>)
 801592c:	2300      	movs	r3, #0
 801592e:	4604      	mov	r4, r0
 8015930:	4608      	mov	r0, r1
 8015932:	4611      	mov	r1, r2
 8015934:	602b      	str	r3, [r5, #0]
 8015936:	f7ed fce4 	bl	8003302 <_fstat>
 801593a:	1c43      	adds	r3, r0, #1
 801593c:	d102      	bne.n	8015944 <_fstat_r+0x1c>
 801593e:	682b      	ldr	r3, [r5, #0]
 8015940:	b103      	cbz	r3, 8015944 <_fstat_r+0x1c>
 8015942:	6023      	str	r3, [r4, #0]
 8015944:	bd38      	pop	{r3, r4, r5, pc}
 8015946:	bf00      	nop
 8015948:	240050d8 	.word	0x240050d8

0801594c <_isatty_r>:
 801594c:	b538      	push	{r3, r4, r5, lr}
 801594e:	4d06      	ldr	r5, [pc, #24]	; (8015968 <_isatty_r+0x1c>)
 8015950:	2300      	movs	r3, #0
 8015952:	4604      	mov	r4, r0
 8015954:	4608      	mov	r0, r1
 8015956:	602b      	str	r3, [r5, #0]
 8015958:	f7ed fce3 	bl	8003322 <_isatty>
 801595c:	1c43      	adds	r3, r0, #1
 801595e:	d102      	bne.n	8015966 <_isatty_r+0x1a>
 8015960:	682b      	ldr	r3, [r5, #0]
 8015962:	b103      	cbz	r3, 8015966 <_isatty_r+0x1a>
 8015964:	6023      	str	r3, [r4, #0]
 8015966:	bd38      	pop	{r3, r4, r5, pc}
 8015968:	240050d8 	.word	0x240050d8

0801596c <_lseek_r>:
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	4d07      	ldr	r5, [pc, #28]	; (801598c <_lseek_r+0x20>)
 8015970:	4604      	mov	r4, r0
 8015972:	4608      	mov	r0, r1
 8015974:	4611      	mov	r1, r2
 8015976:	2200      	movs	r2, #0
 8015978:	602a      	str	r2, [r5, #0]
 801597a:	461a      	mov	r2, r3
 801597c:	f7ed fcdc 	bl	8003338 <_lseek>
 8015980:	1c43      	adds	r3, r0, #1
 8015982:	d102      	bne.n	801598a <_lseek_r+0x1e>
 8015984:	682b      	ldr	r3, [r5, #0]
 8015986:	b103      	cbz	r3, 801598a <_lseek_r+0x1e>
 8015988:	6023      	str	r3, [r4, #0]
 801598a:	bd38      	pop	{r3, r4, r5, pc}
 801598c:	240050d8 	.word	0x240050d8

08015990 <_read_r>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4d07      	ldr	r5, [pc, #28]	; (80159b0 <_read_r+0x20>)
 8015994:	4604      	mov	r4, r0
 8015996:	4608      	mov	r0, r1
 8015998:	4611      	mov	r1, r2
 801599a:	2200      	movs	r2, #0
 801599c:	602a      	str	r2, [r5, #0]
 801599e:	461a      	mov	r2, r3
 80159a0:	f7ed fc6a 	bl	8003278 <_read>
 80159a4:	1c43      	adds	r3, r0, #1
 80159a6:	d102      	bne.n	80159ae <_read_r+0x1e>
 80159a8:	682b      	ldr	r3, [r5, #0]
 80159aa:	b103      	cbz	r3, 80159ae <_read_r+0x1e>
 80159ac:	6023      	str	r3, [r4, #0]
 80159ae:	bd38      	pop	{r3, r4, r5, pc}
 80159b0:	240050d8 	.word	0x240050d8

080159b4 <_init>:
 80159b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159b6:	bf00      	nop
 80159b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159ba:	bc08      	pop	{r3}
 80159bc:	469e      	mov	lr, r3
 80159be:	4770      	bx	lr

080159c0 <_fini>:
 80159c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159c2:	bf00      	nop
 80159c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159c6:	bc08      	pop	{r3}
 80159c8:	469e      	mov	lr, r3
 80159ca:	4770      	bx	lr
